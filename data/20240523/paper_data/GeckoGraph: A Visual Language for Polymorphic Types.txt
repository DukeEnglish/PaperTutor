GeckoGraph: A Visual Language for Polymorphic Types
SHUAIFU,MonashUniversity,Australia
TIMDWYER,MonashUniversity,Australia
PETERJ.STUCKEY,MonashUniversity,Australia
Polymorphictypesareanimportantfeatureinmoststronglytypedprogramminglanguages.Theyallow
functionstobewritteninawaythatcanbeusedwithdifferentdatatypes,whilestillenforcingtherelationship
andconstraintsbetweenthevalues.However,programmersoftenfindpolymorphictypesdifficulttouseand
understandandtendtoreasonusingconcretetypes.WeproposeGeckoGraph,agraphicalnotationfortypes.
GeckoGraphaimstoaccompanytraditionaltext-basedtypenotationandtomakereading,understanding,and
comparingtypeseasier.Weconductedalarge-scalehumanstudyusingGeckoGraphcomparedtotext-based
typenotation.Toourknowledge,thisisthelargestcontrolleduserstudyonfunctionalprogrammingever
conducted.TheresultsofthestudyshowthatGeckoGraphhelpsimproveprogrammers’abilitytosucceedin
theprogrammingtaskswedesigned,especiallyfornoviceprogrammers.
CCSConcepts:•Softwareanditsengineering→Functionallanguages;Polymorphism;Datatypesand
structures;•Human-centeredcomputing→Visualization.
1 INTRODUCTION
Inprogramminglanguages,apolymorphictype[5]canrepresentvaluesofdifferenttypeswhile
providingacommoninterfaceorbehaviorforthosevalues.Polymorphictypesarecentraltothe
succinctnessofcontemporarystatically-typedfunctionallanguages,enablingaconsiderabledegree
of type-safe abstraction and hence component reuse. Parametric polymorphism is available in
manyprogramminglanguages,fromfunctionallanguagessuchasHaskellandMLtoimperative
andmulti-paradigmlanguagessuchasRust[20]andGo[11].Polymorphismallowsprogramsto
bewritteninawaythatismoregenericandadaptabletodifferentdatatypes,enablinggreater
flexibilityandcodereuse.Polymorphictypesareidealformodelingabstractions,suchasproperties
ofmathematicalobjectsandlawsthatholdontheseobjects.
Althoughpolymorphictypingpromisesrobustnessandahighdegreeofcodereusability,stud-
ies[16,17]showthatusingpolymorphisminpracticeposeschallenges,especiallyfornoviceusers.
Thesestudieshaveshownthathumanstendtofocusonconcretetypesandonlyrelyonpolymor-
phictypecheckingasalastresort.Inpractice,polymorphictypesoftenposeusabilityproblems
forprogrammers.Newpolymorphictypevariablescanbecreatedduringtypechecking.These
intermediatetypevariablesareoftenkeptbehindthecurtainunlessatypeerrorisencountered.
Thisoftenresultsinprogrammersresolvingtypeerrorswithtypevariablesnotauthoredbythe
programmersthemselves(Fig.1).
While type polymorphism is one of the oldest topics in programming language theory [5],
littleresearchfocusesontheusabilityofpolymorphictypes.Hagearguesthattheexpressiveness
and power of type systems often come at the cost of usability [12]. We aim to investigate the
challengesofusingpolymorphictypesandexplorehowtoimprovetheirusabilitywithvisualization
andmodernHCItechniques.Toachievethis,weproposeGeckoGraph,agraphicalnotationfor
types.GeckoGraphaimstocomplementtraditionaltext-basedtypenotationandmakereading,
understanding,andcomparingtypeseasier.GeckoGraphisprototypedandverifiediteratively,
leading to a design with visual clarity applicable to many programming contexts. Our study
evaluating 714 participants’ ability to solve type adaptation challenges in GeckoGraph versus
text-basedtypeannotationis,toourknowledge,thelargestcontrolleduserstudyofafunctional
Authors’addresses:ShuaiFu,shuai.fu@monash.edu,MonashUniversity,Australia;TimDwyer,tim.dwyer@monash.edu,
MonashUniversity,Australia;PeterJ.Stuckey,peter.stuckey@monash.edu,MonashUniversity,Australia.
4202
yaM
12
]LP.sc[
1v99621.5042:viXra2 ShuaiFu,TimDwyer,andPeterJ.Stuckey
GHCi, version 9.4.7: https://www.haskell.org/ghc/ :?
Couldn't match expected type ta
for help

ghci> length '3'

 with actual type Ch
length
<interactive>:1:8: error:
 In the first argument of length, namely '3'
ta In
Foldable
• Couldn't match expected type ‘t0 a0’ with actual In the expression: length '3' '3' Ch
type ‘Char’

• In the first argument of ‘length’, namely ‘'3'’
 In an equation for ‘it’: it = length '3'
In the expression: length '3'

In an equation for ‘it’: it = length '3'
Fig.1. AnexampletypeerrorwhereaprogrammermistakenlyprovidedaCharinsteadofaStringliteral.
Left–ThecompilershowsanerrormessagecomparingtheprovidedChartypetoaconfusinglynamedtype
t0 a0.Right–GeckoGraphshowstheexactmessagewiththetwotypesingraphicnotation,highlighting
thestructuraldifferenceratherthanidentifiernames.
programmingtoolorconcept.ThestudyresultsshowthatGeckoGraphhelpsimproveprogrammers’
abilitytosucceedinresolvingthetypechallenges,especiallyfornoviceprogrammers.
2 GECKOGRAPH
GeckoGraphisavisualnotationfortypeannotationsinstaticallytypedprogramminglanguages.
Itisintendedtoworktangiblywithtext-basedannotations,butusescolors,shapes,andsymbols
tomakestructuresoftypeseasytoidentifyataglance.Inthissection,wedescribethedesignof
GeckoGraphandhighlightsomeuniquebenefitsofprogrammingwithGeckoGraph.
2.1 DesignofGeckoGraph
ThedesignofGeckoGraphfocusesonvisualizingtypesinfunctionallanguages(e.g.,Haskell,ML).
In this paper, we use Haskell as an example. As illustrated in this section, it can express basic
types,polymorphictypes,algebraicdatatypes,andsomeadvancedtype-levelfeatures.However,
GeckoGraph could also be used in imperative and multiparadigm languages such as Rust. We
provideaGeckoGraphconstructionlibraryforHaskell.
WeidentifiedthreemaindesigngoalsforGeckoGraphbasedonthechallengesofusingpoly-
morphictypes[16,17]andhowprogrammerstendtousetypeannotations[19],asfollows.
(D1)Lowbarriertolearn. GeckoGraphshouldtakelittletonoefforttolearn.Therulesto
translateatext-basedtypenotationtoGeckoGraphshouldbeminimal.Wherepossible,GeckoGraph
shouldbeintuitivetoprogrammerswhoarefamiliarwithtext-basedtypenotation.
(D2) Easy to parse for humans. GeckoGraph should make the task of reading and under-
standingtypenotationeasy.Itshouldemphasizethelessobviouspropertiesofatypesignature.
GeckoGraphshouldeliminatetheneedformentalbacktracking,suchascountingopeningand
closingparenthesesandrememberingwhichtypeclassesarerequiredonwhichvariables.
(D3)Easytocompareandsearch. GeckoGraphshouldaimtomakethetaskofcomparing
twotypeseasy,especiallytomakesubtledifferencesintext-basednotationhardertomiss.This
alsoincludesthetaskofchoosinganidealfunctionfromalistofpotentialfunctions.Forexample,
programmerssearchforadesiredfunctionfromadocumentationsitewithonlypartialknowledge
ofitstype(e.g.,thearity,oneoftheargumenttypes,ortypeclassitmustfulfill).
SimpleTypes. Simpletypes,suchastypevariablesandconcretetypes,aredisplayedinacell a :
asolid-coloredrectangularboxwithanangledcorneronthetopleft.EachtypeidentifierencodesGeckoGraph:AVisualLanguageforPolymorphicTypes 3
adistinctcolorhueofthecell.Itsfirst1or2lettersaredisplayedinsidethecellatthebottomleft
toprovidefamiliarity(designgoal2.1)andstrongsecondaryencoding.Theangledcornerinthe
topleftprovidesvisualseparationbetweentwocells,evenwhenthesamecolorcellsarenextto
eachother,allowingGeckoGraphtobezoomedouttoextremelysmallsizes(Section5.2.1)without
sufferingreadability(designgoal2.1).
SYMBOL DESCRIPTION
A A type variable a
a
B Bo The type Bool
C The data type (a b)
a b
D The data type (a b c) with two type arguments
a b c
The data type (a (b c))
E
a b c
F The function type a -> b
a b
G The curried function type a -> b -> c
a b c
H The high order function type (a -> b) -> c
a b c
I A type with 2 type class constraints (A a, B a) => a
a
J a b A data type with with a type class constraint A a => a b
Fig.2. ExamplesofvarioustypesasrepresentedinGeckoGraph,includingtypevariables(A)andconcrete
types(B).Datatypes(C,D,E),functiontypes(F,G,H),andtypeclasses(I,J).
Datatypes. GeckoGraphdisplaysanalgebraicdatatypeasalargercell,wherethetypeconstructor
halfenclosesitsarguments: .Theargumentsarealignedinthebottomrightofthecell.Two
distinctvisualdimensionsareusedtoprovideadditionalvisualclarity(designgoal2.1).Datatypes4 ShuaiFu,TimDwyer,andPeterJ.Stuckey
containingmorearguments(e.g., a b cor(a b) c)willexpandhorizontally .Datatypes
thatarenested(e.g. a (b c))willgrowtaller .Thisdistinctionaccommodatesourdesign
goal2.1.NotethattheheightofGeckoGraphgrowsonlyupwards,butnotdownwards.Notonly
doesthisallowGeckoGraphtobemoreefficientinitsspaceusage,butitalsoallowsthelegend
texttobecorrectlyalignedatthebottomandcanbereadsimilarlyasregulartypenotation(design
goal2.1).
Function Types. Functions are the fundamental building blocks of functional programming
languages,andfunctiontypesareubiquitousandthemostimportantintype-levelprogramming.
InHaskell,(->)isdefinedasaninfixtypeoperatorwiththerightassociativitytoprovidesuccinct
typeannotation.GeckoGraphpreservesthissyntaxfeaturetomakethenotationmoreintuitive
(designgoal2.1):the2argumentsofafunctiontypeinGeckoGraphareplacedonbothsidesofthe
cell .Aspecialfunctionindicator(>>>)isdisplayedatthetopofthecell.
Curried functions (e.g., a -> b -> c) display as two cells of functions merged together
;thesecondfunctionoverlapsontopofthefirst,indicatingthatthesecondfunctionis
thereturntypeofthefirst.Regularhigh-orderfunctions(e.g.,(a -> b) -> c)followtherules
offunctionsandnesteddatatypes .Theplacementoffunctionindicatorsaimstomakeit
easytofinddesiredfunctionsinthedocumentationsitebasedonfunctionarityandhigh-order
functions(designgoal2.1).Itiseasytotellhigh-orderfunctionsfromtheverticalpositionofits
functionindicator.Similarly,itiseasytocountthearityofafunctionbycountingthenumberof
horizontallyconnectedfunctionindicators(Fig.3).
(a -> (a -> b) -> b) -> (b -> c) -> (a -> c) -> c
Ternary function
a a b b b c a c c
Binary function Unary function Unary function Unary function
First order function
Second order function
Third order function
Fig.3. Anexampleofusingthefunctionindicator.Thefunctionindicatorcanbeusedtoeasilyidentify
thearityofafunctiontypebycountingtheconnectingfunctionindicators.Forhigh-orderfunctionswhere
functionsareargumentsofotherfunctions,itisveryeasytoseethe“order"offunctionsandhowtheyare
arranged.GeckoGraph:AVisualLanguageforPolymorphicTypes 5
Type Classes. Type classes are an intrinsic part of Haskell [15], and many other functional
languages.InGeckoGraph,thetypeclasses(e.g., (A a, B a) => a)areindicatedintheextended
areabelowoneormoreGeckoGraphcells .Eachtypeclassrequiredonatypevariabledisplaysas
asquareindicatoralignedontherightoftheextendedarea.InGeckoGraph,type-classconstraints
are associated with every instance of the type variable that requires them. This means when
displayingthetype(==) :: Eq a => a -> a -> BoolinGeckoGraph,theconstraintEqappears
inbothoccurrencesof a.
TheGeckoGraphtypeclass’sdesignpromotesthetypeclassplacementsratherthanthetype
classnames.Programmerscaneasilyseewhereandhowmanytypeclassesarerequired,butthey
mayneedanextrastep(globallegendsofthecolormappingorpop-upwindow)toidentifythe
nameofthetypeclass.Webelievethatthisdecisioniswelljustified.Forexample,whenreadinga
type(A a, A c, B a, B b, C b) => a -> b -> c,programmersmayneedtoswitchbackand
forthtorememberwhichtypeclassesareneededonwhichvariable.GeckoGraphhelpsminimize
theefforttoassociateeachtypevariablewithallitstypeclasses(designgoal2.1).
2.2 BenefitsofUsingGeckoGraph
Generalizationpatternsintypeclasses. Afrequentlycitedconfusionamongnovicesistheoverlap
betweenlisttype[a]anditsmoregenericcounterpartFoldableinstances.Thesubtledifferences
areoftennotimportantforbeginners.However,whenencounteringtypeerrorsinworkingwith
lists,HaskelloftenexplainstheerrorwiththeFoldableinstance.FortheexampleinFig.1where
aprogrammermistakenlyprovidedaCharinsteadofaStringliteral,thecompilershowsanerror
messagecomparingtheprovidedChartypewithaconfusinglynamedtypet0 a0.Althoughany
Foldableinstanceisperfectlysuitedforthelist[26],thisgeneralizationmayreduceprogrammers’
confidenceintheirunderstandingofthelanguageandtheabilitytonavigateoutofatypeerror.
InGeckoGraph,alisttypeandatypewithaFoldableinstancehavethesameshape.Thisallows
thegenerictypet0 a0intheerrormessagetoassumethesameshapeas[a].Thisgeneralization
ofconcretetypesandabstractionoftype-classinstancesaimstoallowforteachingfundamental
functionalprogrammingconceptswithouthidinghigh-levelabstractions.Thesamebenefitsapply
topolymorphicnumbersandstrings.
Consistentcolorscheme. Acommontaskinprogrammingistoscanforadesiredfunctionfroma
seaofpotentiallyusefulfunctions,suchaslibrarydocumentation.Duringscanning,programmers
oftenhavepartialknowledgeofthedesiredfunction,e.g.,thearity,oneoftheargumenttypes,or
thetypeclassitmustfulfill.Atypicalexampleisconversion:usingaknownStringtypetoproduce
adesiredData.Texttype.Anotherexampleisthe‘lookup’function:usingaknownData.Map a
btoproduceadesiredbtype.GeckoGraphsupportsthistaskbyusingconsistentcolorsforthe
sametypeidentifier.Programmerscanrelyonthecolorgroupingtoscanforthedesiredtypein
theirprojectorinthird-partylibrarydocumentation.
AdvancedTypeFeatureVisualization. ThedesignofGeckoGraphenablesthevisualizationofmany
advancedtype-levelfeatures.Kindvisualization:ifthekindoftypevariablescanbeinferred,the
kindinformationisconsistentlydisplayedinGeckoGraph.Forexample,infigure4(A),thevariable
aneedsatleastthekind* -> *becauseofitsuseontheright-handside.GeckoGraphrespects
thiskindinformationanddisplaysitasaconstructortypeoveranemptystructure,indicatedusing
adottedoutline.Qualifiedconstraints:GeckoGraph’stypeclassnotationnaturallyextendsto
supportqualifiedconstraints.Inthetypeforall b. A (a b) => a b,GeckoGraphshowsthe
scopetypeclassrequirementona b(Fig.4B).MultipleParameterTypeClass:GeckoGraph
supportsmultipleparametertypeclassesbyusingmultipleshapeswiththesamecolorhueto6 ShuaiFu,TimDwyer,andPeterJ.Stuckey
indicatethedifferentparametersofthesametypeclass.Forexample,forthetypeA a b => a
b,GeckoGraphshowsthatthevariablesaandbbothneedanAclass,buttheyarethedifferent
parametersofA(Fig.4C).
PreciseInteractivity. Modernprogrammingenvironmentsoftenallowprogrammerstomouseover
partofthesourcecodetoquerydetailedinformation,suchasdefinition,referencesordocumenta-
tion.However,withtext-basedsourcecode,itisoftenhardtodistinguishwhetherprogrammers
wantthemostspecificfragmentunderthecursororlargerblocks.Becauseofitsgraphicallayout,
GeckoGraphallowsprogrammerstopreciselyselectwhichpartofatypesignaturetheyintendto
query,thatis,inFig.4(D)whentheusermousesoverthetypeclassbox(orangesquare)underthe
secondoccurrenceof athetypeclassitrepresentsisrevealedindetail.
SYMBOL DESCRIPTION
A Type (A a b -> a b). The kind of a is at least * -> *
A a b a b
B (forall b. A (a b)) => a b (quantified constraints)
a b
C
a b A a b => a b (Multiple Parameter Type Class)
D Precise sub-expression selection of a type signature
a a Bo
class Eq a where

(==) :: a -> a -> Bool
(/=) :: a -> a -> Bool


Eq Int

Eq Float

Eq Double
Fig.4. AdvancedfeaturesofGeckoGrap.(A)GeckoGraphsupportsKindVisualizationiftheinferredkindis
greaterthan*.(B)GeckoGraphsupportsqualifiedconstraintsbyextendingtheextendedareaacrossmultiple
typevariables.(C)GeckoGraphsupportsMultipleParameterTypeClasses,usingdifferentshapesofthe
samecolortoindicatethatmultiplevariablesmustsatisfycertaintypeclassescollectively.(D)GeckoGraph
supportsthepreciseselectionofitssub-structures.
LanguageAgnostic. GeckoGraphcanbeimplementedinanylanguagethatusesstatictyping.
Inprogrammingprojects,GeckoGraphsupportspolyglotprogrammingprojects.Typicalcircum-
stancesincludeprojectsusingforeignfunctioninterfacesormultiplelanguagesforclient-and
server-sideprogramming.GeckoGraphprovidesacommonnotationtodescribethefunctionality
andfeaturesofsystems.Inteachingandlearningprogramminglanguages,GeckoGraphremoves
thenomenclaturedifferenceindifferentprogramminglanguages.Forexample,whendescribing
algebraicdatatypes,differentlanguagecommunitiesusevariousnames:tuple,enum,struct,etc.It
isimportanttorealizethatthesearethesameconceptsandignoretheminutelinguisticbarriers.GeckoGraph:AVisualLanguageforPolymorphicTypes 7
2.3 PreviousiterationsofGeckoGraph
GeckoGraphwasdesignedthroughmanydifferentiterations.Manyresearchmethodswereusedto
verifyideas,includingprototyping,cognitivewalk-throughs,andformativestudies.Welistsome
notabledesignelementsandtheirmajorfeedback.
Fig.5. PreviousVersionsofGeckoGraph.Differentencodingsrepresentnamedtypes,typevariables,type
constructors,andhigh-orderfunctions.
Encodingthedirectionoffunctiontypes. Thiscanbefoundinthedesignv1(Fig.5).This
designsharesmanysimilaritieswithapriorproject[18]intypevisualization.Althoughmany
studentsandexpertsagreeonthis,itsuseofspaceonbothwidthandheightscalesisproportional
tothetypesinquestion,causingtoomuchinconvenience.Inaddition,thisdesigndoesnotproduce
acanonicalformforacurriedfunction.Forexample,forcomposition(.),itisunclearwhetherit
takestwofunctionsasinputandreturnsabinaryfunctionortwofunctionsandasinglestructure
asinputandreturnsadifferentstructure.
Encodingthedepthandsize. Grayscales,gradience,size,andsimulated3-dimensionalelevation
arepromisingvisualrepresentationsfordepictingnumericdimensionssuchasthedepthandwidth
oftheparsetree.However,gradientandelevationweredismissedbecauseoftheirrequirements
for a more demanding rendering process, making GeckoGraph harder to implement in more
restricteduserinterfaces,suchasthecommandline.Inaddition,allofthesevisualdimensions
reducereadabilitywhenscaleddowntoaverysmallsize.
Encoding symbolic names. In some variations, we tested using different geometric shapes to
indicatethesymbolicnamesoftypevariablesandconcretetypes.Wedecidedagainstusingicons
duetothelimitednumberofdifferentshapesuntiltheywereindistinguishable.Thecolorprovides
moreencodingspaces,andthelettersprovidefamiliaritywiththeoriginaltypeannotations.This
wasshowntohelpreducefrictionintheadoptionofGeckoGraph.8 ShuaiFu,TimDwyer,andPeterJ.Stuckey
3 EVALUATION
ToevaluatetheusefulnessofGeckoGraph,wedesignedacontrolledexperimentintheformof
a game called "Zero to Hero". The game contains 10 levels of varying difficulty. At each level,
participantsareaskedtoimplementafunctioncalled"zeroToHero"usingonlyalistofavailable
functions.Theseavailablefunctionsaredifferentateachlevel,andthetargettypesofZeroand
Herovaryateachlevel.ThedetailsofeachlevelareprovidedintheAppendix(AppendixA).
The experiment aims to study how polymorphic types are used and reasoned about during
programmingtasks.Inparticular,westudiedhowprogrammersscanandselectpotentiallyuseful
functionsfromalibraryandcompareintendedtypesandactualtypesduringtypeerrors.
3.1 Anexamplelevel
Weillustratethetaskoftheuserstudyusinglevel4ofthegame.Atthislevel(Fig.6),theprogram-
mersaretaskedwithimplementingthefunction zeroToHero :: Zero a b -> Hero b b.The
availablefunctionsaref1::Zero a b -> Hero b a,f2::Zero a a -> Hero a a,f3::Zero a b
-> Hero b a,andf4::Zero a b -> Hero b b.Twogenericfunctions($)and(.)areprovided
toimprovetheergonomicsofcomposingfunctions,butalltaskscanbewonwithouttheuseof
genericfunctions.Thepossiblesolutionandotherdetailsofthelevelcanbefoundintheappendix
(AppendixA).
A F
G
B
C
D
E
Fig.6. AscreenshotfromthegameZeroToHero.Onthislevel–level4(ShownatF)–theplayersneedto
implementthefunction zeroToHero :: Zero a b -> Hero b b(B).Theywritetheirowndefinitions
inthecodeeditor(D)usingasetofprovidedfunctions(G).Theinferredtypeoftheircurrentdefinitionis
shownin(C).Whenready,theycantesttheirsolutionbyclickingontheAttemptbutton(A).Theycanalso
skipalevelbyclickingontheBypassbuttonnexttoit.Theoutputfromthecompiler,ifthereisany,isshown
inawindowbelow(E).TheGeckoGraphinthescreenshotusesadifferentcolorschemethatisoptimizedfor
computerscreens.
Ateachlevelofthegame,theprogrammermustselecttherightfunctionstoachievethetarget
result.Inparticular,forthislevel,participantsmustdiscoverthatonlyf4andf2arenecessaryto
producethedesiredresults.AnimplementthatsatisfiesthetargettypeiszeroTohero z = f2
(f4 z).GeckoGraph:AVisualLanguageforPolymorphicTypes 9
3.2 Recruitment
ParticipantswererecruitedonlinethroughtheHaskellcommunityonRedditandDiscord.Partici-
pationisfullyanonymized;detailedethicalimplicationsoftheseexperimentswerereviewedand
approvedbytheIRBoftheauthors’institution.
3.3 GroupAssignments
Theexperimentusesabetween-subjectdesign.However,allparticipantsreceivebothtreatments
(withandwithoutGeckoGraph)duringtheirruns.Participantsareassignedtooneoftwogroups.
Bothgroupsreceivethesametasksinthesameorder.GrouponeparticipantsareassistedbyGeck-
oGraphonevenlevelsandonlytext-basedtypeannotationonoddlevels.Grouptwoparticipants
arethesamebutwiththeorderflipped.Bothgroupshaveaccesstothetext-basedtypesignature
foralltasks.Thenumberofparticipantsinthetwogroupsiscounterbalanced.
3.4 Hypothesis
Inprogrammingtasksthatinvolvereadingandunderstandingpolymorphictypes,graphicnotation
usingvisualelementsthatprovidehighgroupingstrength(colors,shapes,sizes,andsymbols)can
improvetheperformanceofsuchtaskscomparedtotraditionaltext-basedtypenotation.Ournull
hypothesisisthat"Usinggraphicnotationhasnoeffectcomparedtotraditionaltext-basedtype
notation."ThishypothesisandthetaskdesignwereregisteredattheOpenScienceFoundation
priortodatacollection.
3.5 TaskDesign
Participantsinbothgroupsreceivethesame10tasks.Thetasksstartoffeasybutgraduallyincrease
in difficulty. In each task, a target type signature of the function zeroToHero is given to the
participants.Participantsareprovidedwithalistofavailablefunctionstoimplementthetarget
function. This is to simulate the tasks of selecting useful functions from a library. In addition,
participantsarenotallowedtouseanyotherfunctionsorvariablesoutsidetheprovidedfunctions;
eventheHaskellpreludeisnotavailable.Thisensuresthateveryonehasthesameknowledgeand
minimizestheeffectoffamiliarity.
Participantscanskipalevelduringthegameiftheyarestuck.Webelievethatitisnormalfor
anyonetogetstuckonachallengingtask,andbeingstuckononeofthe10tasksdoesnotdiscount
theirqualitativeinputofthetool.Welimitthenumberofskipsthataparticipantcanuseduring
thegametofourtimessothatsubmittingqualitativefeedbackwithoutcompletingatleastsome
levelsisimpossible.
3.6 Measurements
Duringthestudy,thetimespentbyparticipantsoneachtaskisrecorded.Wealsorecordtheresulting
statusofeachlevel,whetheritisasuccessorfailure.Beforeeachrun,participantsnominatetheir
levelofHaskellexperienceonafour-levelscale:beginner,familiar,knowledgeable,andexpert.
Ifaparticipanthascompletedall10levels(withthehelpofskipping),weinvitetheparticipant
tocompleteapost-studysurvey.Init,weaskfortheiropiniononhowintuitivetheGeckoGraph
designis,howdistractingtheyfindGeckoGraph,andhowhelpfulGeckoGraphisduringthegame,
usingaseven-pointscale.Intheend,weaskafewopen-endedquestions,invitingparticipantsto
providetheirexperienceusingGeckoGraphandtheirexpectationsaboutthepotentialapplications
ofGeckoGraph.10 ShuaiFu,TimDwyer,andPeterJ.Stuckey
Datacollectionfromthehumanstudywasstoppedaftertheplannedcut-offperiodof14days.
Afterthecut-offdate,theZeroToHerogameisopensourceandavailableforfreeevaluation[3]
andrepeatingourexperiment,butnofurtherdatawascollected.
4 RESULTS
Duringthedatacollectionperiod,atotalof714usersparticipatedinthestudy.Amongthem,245
arenoviceusers,216arefamiliarwithHaskell,216areknowledgeableusers,and88areexpert
users.
4.1 Timetocompletelevels
The10levelsaredesignedtograduallyincreasedifficulty.Fromtheresultsoftheexperiment,most
ofthetasksalignwiththistrend.However,threetasksstandoutinFig.7.Level7(mean=334
seconds)isthehardesttaskinthegameintermsoftime,followedbylevel8(mean=228seconds)
andlevel5(mean=224seconds).Tocompleteanaveragelevel,thebeginnergroupusesanaverage
of100seconds,thefamiliargroupuses90seconds,theknowledgeablegroupuses80seconds,and
theexpertgroupuses70seconds.Thisroughlyalignswithself-reportedexpertise.Weshowthat
thetasktimeoneachlevelfollowsnormaldistributionsusingaShapiro-Wilktest[25](p-value
≤ 1.018×10−16,foranalphavalueof0.05,plessthan0.05isconsiderednormaldistribution).
Level5,7and8aretheonlythreelevelsthatincludefunctionsfromstandardHaskelllibrary,
baringthe(.)and($)providedforconvenience.Level3requiresprogrammerstousethefst
andsndfunctionstoextractvaluefromatuple.Level7requiresprogrammerstousethe(<*>)
functionoftheApplicativeclass,whilelevel8thefmapfunctionoftheFunctorclass.Theauthors
speculatethatthemoreexperiencedparticipantsaremuchmorefamiliarwiththesefunctions,
hencethestrongcontrastonthesethreelevels.
However,whencomparingthetasktimebetweenthetwotreatments,wewereunabletoreject
thenullhypothesis.Inatwo-sampleT-test,wecouldnotfindanysignificantdifferencebetween
thetwogroupsoverall(p-value=0.457),nordoestheredifferbetweenthetwogroupsinanyof
thefourlevelsofexperience(beginner:p-value=0.845,familiar:p-value=0.524,Knowledgeable:
p-value=0.712,expertp-value=0.771).
Time Overall Beginner Familiar Knowledgeable Expert
(Seconds)
600
500
400
300
200
110000
0
1 22 33 44 5 6 7 8 910 1 22 33 44 5 6 7 8 910 1 22 33 44 5 6 7 8 910 1 22 33 44 5 6 7 8 910 1 22 33 44 5 6 7 8 910
Task Number
Fig.7. Timespentoneachlevel,with95%confidenceinterval.Weshowthatthedifficultysteadilyincreases
acrossthegame,butlevels5,7,and8aresignificantlyharderthantheauthorsintended.Theoveralltask
timeofeachgrouproughlymatchesexperiencelevel.GeckoGraph:AVisualLanguageforPolymorphicTypes 11
4.2 Successrate
Wesawthat,overall,GeckoGraphprovidesahighersuccessrate(96.88%)thantext-basedtype
notation(94.62%).Thistrendcanbeseenineveryexperiencedgroup:beginnergroup(95.12%vs.
92.68%),familiargroup(97.39%vs.93.34%),knowledgeablegroup(96.82%vs.96.06%)andexpert
group(98.2%vs.96.40%).Wesawthesignificancedecreaseastheuser’sexperienceincreased.
Whenperformingaproportiontestoneachgroup,weseethattheeffectismostsignificantwith
thebeginnergroupandrejectthenullhypothesis(zscore=2.0228,p-value=0.0431),followedby
thefamiliargroup(zscore=1.7495,p-value=0.0802).Theknowledgeablegroup(zscore=1.0295,
p-value=0.3032)andtheexpertgroup(zscore=0.8660,p-value=0.3756)showlesssignificant
differencesbetweentreatments.
Whenbreakingdowntheresultineachtask(Fig.8),wewereabletorejectthenullhypothesisin
task10ofthebeginnergroupandtask10ofthefamiliargroup8.Wewilladdressthiscorrelation
inSection5.
Success Rate Beginner p-value = 0.0452 Familiar p-value = 0.0136
100%
95%
90%
85%
80%
75%
70%
1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10
Task Number
Knowledgeable Expert
100%
95%
90%
85% Without Gecko, Higher Success Rate
Without Gecko, Lower Success Rate
80%
With Gecko, Higher Success Rate
75%
With Gecko, Lower Success Rate
70%
1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10
Task Number
Fig.8. SuccessrateofeachtaskwithandwithoutGeckoGraph,groupedbyexperiencelevel.Thefigure
iscroppedfrom70%to100%forreadability.Inmosttasks,GeckoGraphprovidesasmalledge.However,
significantdifferenceswerefoundintask10ofthebeginnergroupandtask10ofthefamiliargroup.
4.3 QualitativeFeedback
Intheirresponsestothepost-studysurvey,mostprogrammersbelievethatthedesignofGeck-
oGraphisintuitive andthatitsappearanceintheinterfacedoesnot causedistraction.Forthe
question“DoyoufindtheGeckoGraphdistracting",mostoftheparticipantsratedanegativescore,
withanaverageof2.88(Fig.9left).Forthequestion“HowintuitivedoyoufindtheGeckoGraph?",
we saw a reverse correlation of experience (Fig. 9 Middle): experts find the GeckoGraph most
intuitive(5.07),followedbytheknowledgeablegroup(4.87),andthefamiliargroup(4.80).The
beginnergroupfoundittobetheleastintuitivebutstillratedapositivescoreof(4.71).When
answeringthequestion“HowhelpfuldoyoufindGeckoGraphinfindingthesolutionduringthe
game?",theanswerismoredividedintodifferentexperiencegroups(Fig.9right).Itisslightly
positiveforbeginners(4.25)andslightlynegativefortheothergroups,thefamiliargroup(3.86)and12 ShuaiFu,TimDwyer,andPeterJ.Stuckey
theknowledgeablegroup(3.32).TheexpertgroupfindsthatGeckoGraphisrelativelyunhelpful,
withanaveragescoreof2.95.
Intuitive Distracting Helpful
7 Very
6
5
2.60 2.88 3.04 2.97 3.86 3.32 2.95
4 Neutral
4.70 4.80 4.87 5.07 4.25
3
2
1 Not at all
Beginner Familiar Knowledgeable Expert
Fig.9. Theusersratedscoresofhowintuitive(left),distracting(middle),andhelpful(right)theyfound
GeckoGraph. Overall, programmers consider GeckoGraph to be intuitive and not distracting. However,
opinionsaresplitonitshelpfulness.
4.4 Threatstovalidity
Taskdesign. Inourhumanstudy,mostoftheprovidedfunctionsareveryabstract.Thesefunctions
arecreatedbytheauthorssolelyforthegamifiedstudy.Theyaredesignedtobedifferentfrom
well-knownHaskellfunctionstominimizethefamiliarityvariable.Theyarealsodesignedwithan
interestofbeingpuzzlingandfun.Thesefunctionsmaynotbethemostrepresentativeofreal-world
Haskellprogramming.
Theuseofskips. AlthoughwejustifiedtheuseofskipsinSection3.5,theavailabilityofskipping
doesallowuserstoadoptmoreutilitarianstrategies,ofteninvolvingskippingalevelwithoutgiving
itafairtry.Thishappenedmoreofteninthelaterlevelswhenusersrealizedtheyhadenoughskip
opportunitiesleftto“completethegame".Thesestrategiesmayresultinlowerrecordedsuccess
ratesthanifnoskipswereallowed.
5 DISCUSSION
5.1 Strengths
Fromtheresultsofourexperiment,weseethatusingGeckoGraphhasasignificanteffectonthe
successrateofourparticipants,especiallyonlessexperiencedprogrammers.Wealsoseethatwith
thedatawecollected,wedidnotfindasignificanttimedifferencebetweenprogrammingwithand
withoutGeckoGraph.Toextrapolatetheobservedexpressiveness,wespeculateonthepractical
benefitsofprogrammingwithGeckoGraph.
5.1.1 IdentifytheMostImportantFeatures. Onetrendthatwesawfromthequalitativefeedbackis
thatprogrammersfindGeckoGraphhelpfulforfindingpatternsandimportantfeaturesofthetypes.
ProgrammersareverypositiveaboutGeckoGraph’sabilitytorevealthemosthelpfulfeaturesofa
typeindistinctivevisualelementssuchascolor,length,andheight.
ThecolorsofGeckoGraphhelpprogrammerstoseethepermutationoftypevariablesinthe
inputandoutputofafunction.Arecentreview[27]of59graphicalperceptionarticlesshowed
thatcombiningsolidcolorhueinafilledshapeprovidesstrongervisualperceptionfornominalGeckoGraph:AVisualLanguageforPolymorphicTypes 13
datasuchastypeidentifiers.OneexampleofGeckoGraph’seffectiveuseofcoloristhe“rotation"
functionintheuserstudy(Fig.10).Withtext-basedtypenotation,programmersoftenrelyon
mnemonicdevicessuchasalphabeticorderingornamingconventions.Forexample,therotation
functionf2 :: Zero a b c d -> Zero b c d ainthegameislessrecognizableifchangedto
f2 :: Zero e v m h -> Zero v m h e.Toquoteaparticipant,“GeckoGraphisquiteintuitive
toseethepermutationsofthearguments.Also,toseehowtoproduceandconsumearguments."
f2 :: Zero a b c d -> Zero b c d a
Ze a b c d Ze b c d a
Fig.10. The‘rotate’functioninlevel8oftheuserstudy.Thenamegiveninthegameis‘f2’.Itshufflesthe
typeargumentsofaZerotype
ThehorizontalaxisofGeckoGraphoftenbecomesintuitivewhenidentifyingdifferencesin
functionarities.Forexample,inFig.11,theprogrammerintendedtoimplementafunctionthat
sums3integers.Intheimplementation,theprogrammermisseda(+)functionattheend;the
resultingfunctiontypeislargelydifferentinlength.Itisalsoclearthatthefunctionneedstoapply
toonemorebinaryfunctiontosatisfythelengthrequirement.
add3 :: Int -> Int -> Int -> Int
In In In In
add3 = (.) ((+) .)
a b In a b In In
Fig.11. Animplementationoffunctionadd3buttheauthormissedan(+)fromthecorrectimplementation
(.)((+).)(+).GeckGraphhighlightsthedifferenceinarity,andrevealsthatabinaryfunctionisneededonthe
right-handsideforthearitytomatch.
TheverticalaxisofGeckoGraphoftenshedslightonthemostcomplexstructureofthis
type.Thiscanoftenbeveryusefulwheninspectingmismatchingtypeerrorswheredatatypesare
nested.Commonexamplesincludewhenprogrammersforgettoapplythevalueto“return"ina
monadicblockortouseliftIOtocastanIOeffect.Forexample,inFig.12,theusesof returnare
excessive.Itcanbeeasilyidentifiedbyexaminingthedifferenceintheverticallayersofthetwo
types.Intext-basedtypenotation,thisisdistinguishedbydifferentpairsofparenthesis.However,
parenthesisisanoverloadedsyntaxintypenotation.InHaskell,parenthesesareusedtoenclose
tuples(a, b),specifythefixity (a -> b) -> c,orhavenoeffecta -> (b -> c).14 ShuaiFu,TimDwyer,andPeterJ.Stuckey
Toquotesomefeedbackfromparticipants:“TypesaremucheasiertounderstandbytheGecko-
Graphthanbytryingtoparseallparenthesesandunderstandthetypesfromthesignature."“It
makesiteasiertoseeataglancewhenyouroutputtypeiscorrectorwhatthedifferencebetween
thecurrenttypeandthetargetis."
f ::Maybe a -> a -> Maybe a
Ma a a Ma a
f a b = if isJust a
then return a
else return (Just b)
Ma a a m Ma a
Monad
Fig.12. ThefunctionfisplannedtohavethetypeMaybe a -> a -> Maybe a.Theprogrammermistakenly
appliedtheresulttothereturnfunction,makingtheresultinsideaMonadinstance.GeckoGraphreveals
thedifferenceinthe“layers"oftypes.
5.1.2 Lowbarriertolearnandunderstand. GeckoGraphhassomekeysimilaritiestotraditional
text-basedtypenotation.GeckoGraphrespectstheleft-to-rightreadingorder.GeckoGraphusesthe
familiarsymbolicnameasthesecondaryencoding.GeckoGraphsimulatestheprefixnotationin
typeconstructorsandtheinfixnotationintypeoperators.Withtheseconsiderations,weensured
thatprogrammerswereabletouseGeckoGraphfluentlywithaminimalamountoftraining.
Oneimportantclassoffeedbackfromtheopensectionisthatmanyprogrammersmentioned
thattheydidnothaveanypriorknowledgeofHaskellbutwereabletosolvethepuzzleswiththe
helpofGeckoGraph.“Itissimilarenoughtotraditionaltypesthatitisintuitive."“ThiswashowI
parsethetextualrepresentationoftypes"waspointedoutbymultipleparticipants.
5.2 Weaknesses
5.2.1 SpaceUsage. GeckoGraphuseshorizontalspaceinproportiontothesizeofthetypesignature
syntax tree, and GeckoGraph uses vertical space in proportion to the depth of the syntax tree.
Compared to the traditional text-based language, GeckoGraph has the limitation of requiring
verticalspace.Wehaveidentifiedsomeapproachestominimizespaceusagewhileretainingmost
of the advantages of using GeckoGraph, such as displaying only the color blocks without the
secondaryencodingofidentifiernames.
5.2.2 ColorEncoding. GeckoGraphhighlyreliesoncolorhueasamainencoding.Itprovidesa
strongvisualgrouping[27]forprogrammerstoidentifysubtlepatternsintypes,suchastheorder
andplacementofsubstructures.However,theperceptionofcolorisdifferentfrompersontoperson.GeckoGraph:AVisualLanguageforPolymorphicTypes 15
Thisbecomesanevenbiggerissueforcolor-blindorvisuallyimpairedprogrammers.Although
GeckoGraphusescolor-blindfriendlyschemes,itisonlyamethodtoavoidindistinguishabletypes
andisnotastrongguaranteeofeffectiveness.Forthis,weareexploringdifferentencodings,such
aspatternsandshapes,tomaximizetheaccessibilityofGeckoGraph.
5.3 GamifiedHumanStudy
Itisimportanttorecognizethatthehumanstudyisdesignedtobeaseriesofpuzzles.Thetasks
aremeanttocontainentertainingvalues.Wepracticedmultiplegamificationtechniques:levels,
story/theme,andgoals/rewards.[13]Thisnotonlyallowedustohaveconfidencethatparticipants
aremotivatedtocompletethetasks,italsolentuspopularityintheHaskellcommunityandled
toahistoricallyhighparticipationrate.Gamificationhasbeenshowntoimproveengagement
andmotivation.Thishasbeenharnessedbymanyresearchprojectstoimproveparticipationin
humanstudies[14].Weidentifythatstudiesonfunctionalprogrammingareoftentechnicaland
intimidating;ouruseofgamificationnotonlyattractedhistoricallyhighparticipation,butalso
attractedawidedistributionofexperiencelevels.
5.4 PotentialApplications
5.4.1 ProgrammingAssistance. WeenvisionmanywaysGeckoGraphcanbeintegratedintopro-
grammingtools.GeckoGraphcanvisualizeandinspecttypesintooltipsandpop-ups.Itcanbe
usedtodiscoverthemismatchingpartsoftwoconflictingtypesintypeerrors.Itcanbeusedto
generatetypeexpressionsandedittypeexpressionsstructurally.Inourpost-studysurvey,the
potentialintegrationoftexteditorsandprogrammingassistancewerethemostrequestedusecases
proposedbytheparticipants.
5.4.2 DocumentationAssistance. Fromwhatwehavelearnedfromourhumanstudy,GeckoGraph
iswellsuitedtosupportthedocumentationoftheprogramminglibraryandtheAPIdocumentation.
Itworksintandemwiththetraditionaltext-basedlanguageandcanbegeneratedmechanically,
makingitpossibletostandardizewithminimaleffort.Fordocumentationsitesthatallowsearching
byname(e.g.,Hoogle[21]),programmersoftenneedtosievethroughalistofidenticallynamed
functions.Forexample,asimpleHooglesearchforthenamemakeshowsalistoffunctionswith
vastlydifferentusageandpurpose.GeckoGraphcanhelpspeeduptheselectionprocessbyproviding
avisualnotationforeachtype,andprogrammerscanuseavisualgroupingofcolors,sizes,and
positionstohomeinonthecorrectdocumentationpage.
5.4.3 PedagogicalApplications. WebelievethatGeckoGraphcanbeavaluabletoolinteaching
techniquesandtheoriesinprogramminglanguagesthataredifficulttoconveyinplainlanguage.
In fact, many participants in our study reported that they had no prior knowledge of Haskell
programmingandthattheycouldunderstandtheprogrammingconceptsinthegameandcomplete
allthepuzzleswiththehelpofGeckoGraph.
Furthermore,theadvancedfeaturesofGeckoGraph(Section2.2)arealsosuitableforteaching
andlearninghigh-levelfunctionalprogrammingconcepts.Considertheassocfunctionforday
convolution[10]intheKanextension(Fig.13).Althoughthetypesignatureisshort,itisvery
difficult to trace the semantics mentally due to the number of variables, and their kinds are
notobviousfromthetext-basednotation.GeckoGraphmakesunderstandingthetypeeasierby
visualizingthe“hidden"higher-kindedtypes,revealingallthepartiallyapplieddatatypesinplay.16 ShuaiFu,TimDwyer,andPeterJ.Stuckey
assoc::Day f (Day g h) a -> Day (Day f g) h a
Da f Da g h a Da Da f g h a
Fig.13. Theassocfunctionfordayconvolution[10]intheKanextension.Evenforpeoplewhoarenot
familiarwiththeexactdefinitions,itiseasytoseethatthevariablesf,g,andhareallhigh-kindedtypes.
6 RELATEDWORK
6.1 Visualizingpolymorphictypes
Asimilarhalf-enclosingstructurewasproposedinthevisualizationoftypesbyJung[18].InJung’s
notation,thetypeconstructorhalfenclosesitsarguments,butthefigureforthetypeconstructoris
placedonthebottomright(Fig.14).Incontrast,GeckoGraphfollowsthenaturalreadingorder,
allowinglargerstructuresinatypesignaturetotakeprecedenceoversmallerones.
ComparedtofunctionsinJung’snotation,GeckoGraphshowstwomajorbenefits.First,Gecko-
Graphnaturallytranslatesthegeneralnotionofacurriedfunction.Partially,theapplicationofa
functioncanbereadasremovingthefirstoneofitsarguments.ThisisnotthecasewithJung’s
notation.Second,theshapeofafunctiontyperemainsconsistentwiththeshapeofnormaldata
types.InJung’sdesign,afunctiona -> blookssufficientlydistinctfromadatatypef a b.Thisis
importantbecause,infunctionallanguages,itisverycommonforabstractiontobedrawnfrom
functionandnormaldatatypes.Forexample,functionsandlistsbothhaveafunctorinstance,and
theirinnervaluescanbealteredusingafmapfunction.TheconsistentshapeofGeckoGraphmakes
thisgeneralizationeasiertoseevisually.
Text-based Notation Jung's Notation
(a -> b) -> [a] -> [b]
GeckoGraph
a b a b
Fig.14. Comparingthemapfunction((a -> b) -> [a] -> [b])intextnotation,GeckoGraph,andJung’s
notation.
6.2 Visualizationinprogramming
Usingvisualizationtechniquestoimprovethecomprehensionofpolymorphictypesisnotnew.This
isoftenpracticedtorepresentdocumentproperties,runtimeinformation,andstaticanalysisresults.GeckoGraph:AVisualLanguageforPolymorphicTypes 17
FluidEdt[24]displaysheapgraphsintheleftmargin.I3[4]offerssearchsimilarityandchange
historyincompactblock-baseddiagrams.Almeidaetal.[1]introducedanovelvisualizationtoaid
inunderstandingownershipandborrowingintheRustlanguage.Whilethefieldofgraphicaltype
representationisrelativelynarrow,ithasbeenstudiedtosomeextent.Clericietal.[6]proposed
agraph-basedtypeinferencesystemthatshowsthevisualrepresentationsofunificationstates.
GeckoGraphpositionsitselfsimilarlytotheseprojects,usingcolor,shapes,symbols,andicons
toprovideeasy-to-glanceinformation.However,GeckoGraphfocusesontype-levelinformation,
whichnootherresearchprojectsdo.Inaddition,GeckoGraphisevaluatedinamuchlargerstudy
thantheotherprojects,andGeckoGraphisevaluatedwithawiderrangeofexperiencelevels.
6.3 VisualvsTextualrepresentation
Manystudieshavecomparedtheeffectivenessofavisual-basedprogrammingenvironmentwitha
textual-basedone.Studies[7–9,23]foundthatcomparedtoapurelytextualprogramminglanguage
withsimilarpositioning,studentswhoweretaughtavisualprogramminglanguageshowgreater
confidence,betterretention,andenjoymentinprogrammingcourses.Whileshowingasimilar
trend,GeckoGraphexperimentsinthecontextofaccompanyingtext-basednotationratherthan
replacingit.
Many have studied the effect of visual augmentation, providing a visual representation of
programmingobjectswithoutremovingthetext-basednotation.Greenfoot[22]allowsvisualand
textualrepresentationsofprogrammingconceptstobeaccessibletothelearner.PILeT[2],providing
aprogrammingenvironmentthatisanadaptivepresentationbasedontheuser’spreference.Both
toolsshowpositiveresultsintheuseofvisualaugmentation.AlthoughsimilartoGeckoGraphin
combiningvisuallanguageandtext-basedprogrammingenvironment,bothstudiesevaluatedthe
effectbasedonimperativelanguages(JavaandPython),whileourevaluationfocusedontheeffect
onafunctionallanguage(Haskell).
7 CONCLUSIONANDFUTUREWORK
Inthispaper,weproposeGeckoGraph,agraphicalnotationfortypeannotationsinfunctional
programminglanguages.GeckoGraphaimstoaccompanytraditionaltext-basedtypenotation
and to make reading, understanding, and comparing types easier. We conducted a large-scale
humanstudyusingGeckoGraphcomparedtotext-basedtypenotation,thelargestuserstudyon
functionalprogrammingweareawareof.TheresultsofthestudyshowthatGeckoGraphhelps
improveprogrammers’abilitytosucceedinprogrammingtaskswedesigned,especiallyfornovice
programmers.
Ourworkinthisareaopensmanynewdirectionsforfutureresearch.Inparticular:
In-the-wildStudiesAlthoughourexperimentscenariosaredrawnfromreal-worldprogramming
tasks,acertainlevelofvariablecontrolisstillappliedtoremovetheeffectoffamiliaritywiththe
toolsandlibraries.However,itisnecessarytoassesstheusefulnessoftoolssuchasGeckoGraph
bytheirreal-lifeusage.Tostudythis,differentresearchmethodsshouldbeusedtostudyrealistic
usageandhumanexperience.Thismayincludefielddeploymentsorcasestudies.
AlternativeTypeVisualizationWestronglybelievethatvisualizationisanunderutilizedtech-
niqueinthiseffort.GeckoGraphfocusesonafaithfulviewofthetreestructureofprogramming
types.However,manymoreareasandtypesdemandahuman-focusedapproach.Forinstance,visu-
alizingtheordinalrelationshipofsubsumptionorvisualizingthenumericchangesindependently
typed“typeprograms".18 ShuaiFu,TimDwyer,andPeterJ.Stuckey
REFERENCES
[1] MarceloAlmeida,GrantCole,KeDu,GongmingLuo,ShulinPan,YuPan,KaiQiu,VishnuReddy,HaochenZhang,
YingyingZhu,andCyrusOmar.2022. RustViz:InteractivelyVisualizingOwnershipandBorrowing.In2022IEEE
SymposiumonVisualLanguagesandHuman-CentricComputing(VL/HCC).IEEE,Roma,Italy,1–10. https://doi.org/10.
1109/VL/HCC53370.2022.9833121
[2] BedourAlshaigy,SamiaKamal,FayeMitchell,ClareMartin,andArantzaAldea.2015.PILeT:anInteractiveLearning
ToolToTeachPython.InProceedingsoftheWorkshopinPrimaryandSecondaryComputingEducation(London,United
Kingdom)(WiPSCE’15).AssociationforComputingMachinery,NewYork,NY,USA,76–79. https://doi.org/10.1145/
2818314.2818319
[3] Anonymous.[n.d.].ZerotoHero:AHaskellPuzzleGame.https://zerotohero.fly.dev. Accessed:2024-2-22.
[4] FabianBeck,BogdanDit,JaleoVelasco-Madden,DanielWeiskopf,andDenysPoshyvanyk.2015.RethinkingUser
InterfacesforFeatureLocation.In2015IEEE23rdInternationalConferenceonProgramComprehension.IEEE,151–162.
https://doi.org/10.1109/ICPC.2015.24
[5] LucaCardelli.1987. Basicpolymorphictypechecking. Sci.Comput.Program.8,2(April1987),147–172. https:
//doi.org/10.1016/0167-6423(87)90019-0
[6] SilviaClerici,CristinaZoltan,andGuillermoPrestigiacomo.2013.Graphicalandincrementaltypeinference.Agraph
transformationapproach.High.-orderSymb.Comput.26,1-4(Dec.2013),29–62. https://doi.org/10.1007/s10990-014-
9104-8
[7] DanielCCliburn.2008.StudentopinionsofAliceinCS1.In200838thAnnualFrontiersinEducationConference.IEEE,
T3B–1–T3B–6. https://doi.org/10.1109/FIE.2008.4720254
[8] RomenigdaSilvaRibeiro,LeônidasdeOliveiraBrandão,TulioVitorMachadoFaria,andAnarosaAlvesFranco
Brandao.2014.Programmingweb-courseanalysis:Howtointroducecomputerprogramming?.In2014IEEEFrontiers
inEducationConference(FIE)Proceedings.IEEE,1–8. https://doi.org/10.1109/FIE.2014.7044140
[9] TebringDaly.2011.MinimizingToMaximize:AnInitialAttemptAtTeachingIntroductoryProgrammingUsingAlice.
JournalofComputingSciencesinColleges26,5(Jan.2011),23–30.
[10] BrianDay.1970.OnClosedCategoriesofFunctors.LectureNotesinMathematics137(1970),1–38.
[11] RobertGriesemerandIanLanceTaylor.[n.d.]. AnIntroductionToGenerics-TheGoProgrammingLanguage.
https://go.dev/blog/intro-generics. Accessed:2024-2-19.
[12] JurriaanHage.2020.Solvedandopenproblemsintypeerrordiagnosis?CEURWorkshopProc.2707(Oct.2020),62–74.
[13] JuhoHamari,JonnaKoivisto,andHarriSarsa.2014.DoesGamificationWork?–ALiteratureReviewofEmpirical
StudiesonGamification.In201447thHawaiiInternationalConferenceonSystemSciences.IEEE,3025–3034. https:
//doi.org/10.1109/HICSS.2014.377
[14] JiyinHe,MarcBron,LeifAzzopardi,andArjendeVries.2014.Studyinguserbrowsingbehaviorthroughgamified
searchtasks.InProceedingsoftheFirstInternationalWorkshoponGamificationforInformationRetrieval(Amsterdam,
TheNetherlands)(GamifIR’14).AssociationforComputingMachinery,NewYork,NY,USA,49–52. https://doi.org/
10.1145/2594776.2594787
[15] PaulHudak,JohnHughes,SimonPeytonJones,andPhilipWadler.2007.AhistoryofHaskell:beinglazywithclass.In
ProceedingsofthethirdACMSIGPLANconferenceonHistoryofprogramminglanguages(HOPLIII).Associationfor
ComputingMachinery,NewYork,NY,USA,12–1–12–55. https://doi.org/10.1145/1238844.1238856
[16] YangJun,GregMichaelson,andPhilTrinder.2000. Helpingstudentsunderstandpolymorphictypeerrors.In8th
AnnualConferenceontheTeachingofComputing.
[17] YangJun,GregMichaelson,andPhilTrinder.2000.Howdopeoplecheckpolymorphictypes?.InPPIG.academia.edu,
CozenzaItaly,6.
[18] YangJungandGregMichaelson.2000.Avisualisationofpolymorphictypechecking.J.Funct.Programming10,1(Jan.
2000),57–75. https://doi.org/10.1017/S0956796899003597
[19] JustinLubin.2021.HowStatically-TypedFunctionalProgrammersAuthorCode.InExtendedAbstractsofthe2021CHI
ConferenceonHumanFactorsinComputingSystems.AssociationforComputingMachinery,NewYork,NY,USA,1–6.
https://doi.org/10.1145/3411763.3451515
[20] SteveKlabnikandCarolNichols.[n.d.].GenericDataTypes.https://doc.rust-lang.org/book/ch10-01-syntax.html.
Accessed:2024-2-20.
[21] NeilMitchell.[n.d.].Hoogle.https://hoogle.haskell.org/. Accessed:2024-2-19.
[22] SusanaMontero,PalomaDíaz,DavidDíez,andIgnacioAedo.2010.Dualinstructionalsupportmaterialsforintroductory
object-orientedprogramming:Classesvs.objects.InIEEEEDUCON2010Conference.IEEE,1929–1934. https://doi.
org/10.1109/EDUCON.2010.5492438
[23] MarkNooneandAidanMooney.2018.Visualandtextualprogramminglanguages:asystematicreviewoftheliterature.
JournalofComputersinEducation5,2(June2018),149–174. https://doi.org/10.1007/s40692-018-0101-5GeckoGraph:AVisualLanguageforPolymorphicTypes 19
[24] JibinOu,MartinVechev,andOtmarHilliges.2015. AnInteractiveSystemforDataStructureDevelopment.In
Proceedingsofthe33rdAnnualACMConferenceonHumanFactorsinComputingSystems(Seoul,RepublicofKorea)(CHI
’15).AssociationforComputingMachinery,NewYork,NY,USA,3053–3062. https://doi.org/10.1145/2702123.2702319
[25] SShaphiroandMWilk.1965.Ananalysisofvariancetestfornormality.Biometrika(1965).
[26] Johannes Waldmann. 2018. When You Should Use Lists in Haskell (Mostly, You Should Not). (Aug. 2018).
arXiv:1808.08329[cs.PL]
[27] ZehuaZengandLeilaniBattle.2023.AReviewandCollationofGraphicalPerceptionKnowledgeforVisualization
Recommendation.InProceedingsofthe2023CHIConferenceonHumanFactorsinComputingSystems(<conf-loc>,
<city>Hamburg</city>,<country>Germany</country>,</conf-loc>)(CHI’23,Article820).AssociationforComputing
Machinery,NewYork,NY,USA,1–16. https://doi.org/10.1145/3544548.3581349
A GAMELEVELS
Weprovideallthelevelsettingsweusedinouruserstudy.Theonlinegameisstillopensourceand
availableforevaluation[3].However,thiscanbeattemptedlocallywithaHaskellinterpreteror
evenwithapenandpaper.ThetargettypeisthedesiredtypesignatureforthefunctionzeroToHero.
Theavailablefunctionsshowalistoffunctionsthatareallowedtobeusedintheimplementation.
Itisnotrequiredtousealltheavailablefunctions,anditisnotforbiddentouseanyotherfunctions
orvariablesoutsidetheprovidedfunctions;eventheHaskellpreludeisnotavailable.
A.1 Level1:Trialrun
TargetType.
• zeroToHero :: Zero a -> Hero a
AvailableFunctions.
• f :: Zero a -> Hero a
PossibleSolution.
• zeroToHero z = f z
A.2 Level2:Assemblerequired
TargetType.
• zeroToHero :: Zero a -> Hero a
AvailableFunctions.
• runZero :: Zero a -> a
• mkHero :: a -> Hero a
• ($) :: (a -> b) -> a -> b
PossibleSolution.
• zeroToHero z = mkHero (runZero z)
A.3 Level3:Whichpath?
TargetType.
• zeroToHero :: Zero a -> Hero (a, a)
AvailableFunctions.
• f1 :: Zero a -> Hero a
• f2 :: Zero a -> (a, a)
• f3 :: Hero a -> Hero (a, a)
• ($) :: (a -> b) -> a -> b20 ShuaiFu,TimDwyer,andPeterJ.Stuckey
• (.) :: (b -> c) -> (a -> b) -> a -> c
PossibleSolution.
• zeroToHero z = f3 . f1 $ z
A.4 Level4:Arepeatingpattern
TargetType.
• zeroToHero :: Zero a b -> Hero b b
AvailableFunctions.
• f1 :: Zero a b -> Hero b a
• f2 :: Zero a a -> Hero a a
• f3 :: Zero a b -> Zero b a
• f4 :: Zero a b -> Zero b b
• ($) :: (a -> b) -> a -> b
• (.) :: (b -> c) -> (a -> b) -> a -> c
PossibleSolution.
• zeroToHero z = f2 . f4 $ z
A.5 Level5:Aperfectpair
TargetType.
• zeroToHero :: Zero a b -> Hero b b
AvailableFunctions.
• fst :: (a, b) -> a
• snd :: (a, b) -> b
• f1 :: Zero a b -> Hero b a
• f2 :: Zero a a -> Hero a a
• f3 :: Zero a b -> Zero b a
• f4 :: Zero a b -> Zero b b
• ($) :: (a -> b) -> a -> b
• (.) :: (b -> c) -> (a -> b) -> a -> c
PossibleSolution.
• zeroToHero z = snd .f3 . f1 $ z
A.6 Level6:MontyHall
TargetType.
• zeroToHero :: Zero a b c -> Hero c a
AvailableFunctions.
• f1 :: Zero a b c-> Zero c b a
• f2 :: Zero a b c -> Zero a c c
• f3 :: Zero a b c -> Hero b c
• ($) :: (a -> b) -> a -> b
• (.) :: (b -> c) -> (a -> b) -> a -> cGeckoGraph:AVisualLanguageforPolymorphicTypes 21
PossibleSolution.
• zeroToHero z = f3 . f1 . f2 $ z
A.7 Level7:TIEfighter
TargetType.
• zeroToHero :: Zero a b c -> Hero c
AvailableFunctions.
• f1 :: Zero a b c -> Hero (a -> b)
• f2 :: Zero a b c -> Hero (b -> c)
• f3 :: Zero a b c -> Hero a
• (<$>) :: (a -> b) -> Hero a -> Hero b
• (<*>) :: Hero (a -> c) -> Hero a -> Hero c
• ($) :: (a -> b) -> a -> b
• (.) :: (b -> c) -> (a -> b) -> a -> c
PossibleSolution.
• zeroToHero z = f2 z <*> (f1 z <*> f3 z)
A.8 Level8:Themiddleman
TargetType.
• zeroToHero :: (a -> d) -> (b -> d) -> (c -> d) -> Zero a b c -> Hero a d c
AvailableFunctions.
• f1 :: Zero a b c -> Zero c a b
• f2 :: Zero a b c -> Hero a b c
• fmap :: (c -> d) -> Zero a b c -> Zero a b d
• ($) :: (a -> b) -> a -> b
• (.) :: (b -> c) -> (a -> b) -> a -> c
PossibleSolution.
• zeroToHero ad bd cd z = f2 . f1 . f1 . fmap bd . f1 $ z
A.9 Level9:Splitthedifference
TargetType.
• zeroToHero :: Zero a b c d -> Hero d d d d
AvailableFunctions.
• f1 :: Zero a b c -> Zero c a b
• f2 :: Zero a b c -> Hero a b c
• fmap :: (c -> d) -> Zero a b c -> Zero a b d
• ($) :: (a -> b) -> a -> b
• (.) :: (b -> c) -> (a -> b) -> a -> c
PossibleSolution.
• zeroToHero ad bd cd z = f2 $ f1 $ f1 $ f3 $ z22 ShuaiFu,TimDwyer,andPeterJ.Stuckey
A.10 Level10:Therollercoaster
TargetType.
• zeroToHero :: Zero (a -> b -> c -> d) a b c -> Hero d
AvailableFunctions.
• f1 :: Zero (a -> b) a c d -> Zero () b c d
• f2 :: Zero a b c d -> Zero b c d a
• f3 :: Zero a b c d -> Hero d
• ($) :: (a -> b) -> a -> b
• (.) :: (b -> c) -> (a -> b) -> a -> c
PossibleSolution.
• zeroToHero z = f3 . f2 . f2 . f1 . f2 . f1 . f2 . f1 $ z