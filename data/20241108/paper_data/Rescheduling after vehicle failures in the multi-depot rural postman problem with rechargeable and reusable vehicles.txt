Rescheduling after vehicle failures in the multi-depot
rural postman problem with rechargeable and
reusable vehicles
†∗
Eashwar Sathyamurthy , Jeffrey W. Herrmann , Shapour Azarm
November 7, 2024
Abstract
We present a centralized auction algorithm to solve the Multi-Depot Rural
Postman Problem with Rechargeable and Reusable Vehicles (MD-RPP-RRV),
focusing on rescheduling arc routing after vehicle failures. The problem involves
findingaheuristicallyobtainedbestfeasibleroutesformultiplerechargeableand
reusable vehicles with capacity constraints capable of performing multiple trips
from multiple depots, with the possibility of vehicle failures. Our algorithm
auctions the failed trips to active (non-failed) vehicles through local auctioning,
modifying initial routes to handle dynamic vehicle failures efficiently. When a
failure occurs, the algorithm searches for the best active vehicle to perform the
failed trip and inserts the trip into that vehicle’s route, which avoids a complete
rescheduling and reduces the computational effort. We compare the algorithm’s
solutions against offline optimal solutions obtained from solving a Mixed Integer
Linear Programming (MILP) formulation using the Gurobi solver; this formula-
tionassumesthatperfectinformationaboutthevehiclefailuresandfailuretimes
are given. We derived a set of 257 failure scenarios from arc routing instances
in the literature and used them to perform a competitive analysis. For each
scenario we used a simulated annealing algorithm to generate an initial set of
routes and then used the centralized auction algorithm to reschedule after each
vehicle failure. The results demonstrate that the centralized auction algorithm
produces solutions that are, in some cases, near-optimal; moreover the execu-
tion time for the proposed approach is much more consistent and is, for some
instances, orders of magnitude less than the execution time of the Gurobi solver.
The theoretical analysis provides an upper bound for the competitive ratio and
computational complexity of our algorithm, offering a formal performance guar-
antee in dynamic failure scenarios.
keywords- Centralized auction, Vehicle failures, Rural postman problem, Ca-
pacity constraints, Mixed Integer Linear Programming.
∗E. Sathyamurthy and S. Azarm are with the Department of Mechanical Engineering, University
of Maryland, College Park, MD 20742 USA.
†J. W. Herrmann is with the Department of Mechanical Engineering, The Catholic University of
America, Washington, DC 20064 USA.
1
4202
voN
6
]OR.sc[
1v37040.1142:viXra1 Introduction
Unmannedbattery-operatedrechargeablevehiclesarebecomingmoreprevalentinreal-
world applications due to their cost-effectiveness and efficiency [1,2]. However, these
systems still face significant challenges. The failure rate for drones is approximately
1 in 1,000 flight hours, two orders of magnitude higher than commercial aviation’s 1
in 100,000 flight hours, and sophisticated Unmanned Aerial Vehicle (UAV) systems
face an overall failure rate of 25% [3]. These failures can lead to significant delays
and disruptions, underscoring the need for improved reliability in unmanned vehicle
operations. Although many preventive maintenance approaches have been proposed
to increase the reliability of unmanned vehicles [3,4], any failure during a mission
requires changing the mission plan to react to the loss of the vehicle. This paper,
therefore, proposes an approach for effectively managing and mitigating the impact
of vehicle failures on routing after they occur, specifically addressing the challenges
of rerouting and task reallocation to ensure mission completion despite unexpected
vehicle breakdowns.
In the MD-RPP-RRV, the vehicles have limited capacity (operation time) but can
be recharged and reused for multiple trips from multiple depots to traverse a subset of
edges (required edges) in a weighted undirected connected graph, minimizing mission
time. The maximum time taken by vehicles to traverse all required edges is referred
to as mission time or maximum trip time. One of the key assumptions considered
in our previous study [5] to solve the MD-RPP-RRV was that vehicles do not fail
during their trips. In this study of the MD-RPP-RRV with vehicle failures, we relax
that assumption and consider that multiple (but not all) vehicles might fail randomly
during their trips.
This study developed and evaluated a rescheduling approach that reacts to vehicle
failures; it requires no information about the vehicle failures before the vehicles begin
following their routes.
StudyingtheMD-RPP-RRVwithvehiclefailuresiscrucialforaddressingreal-world
challenges in applications like parcel delivery, infrastructure inspection, and surveil-
lance, whereunmannedvehiclesmayencounterfailuresduringoperation, necessitating
the development of quick rerouting approaches for remaining active vehicles to ensure
mission completion. The MD-RPP-RRV is NP-hard to solve [5] as it generalizes the
RPP, which is proven to be NP-hard [6]. In its simplest case, with a single depot and
single trip, the MD-RPP-RRV reduces to the RPP. Hence, solving the MD-RPP-RRV
with vehicle failures poses significant computational challenges due to the additional
complexities introduced by random vehicle failures.
This paper proposes a centralized auction algorithm to address the MD-RPP-RRV
with vehicle failures. We chose a centralized approach over decentralized methods due
to its ability to maintain a global perspective, enabling quicker decision-making and
more efficient task reallocation essential for handling multiple random vehicle failures
dynamically. Our approach efficiently reassigns trips that a failed vehicle was sup-
posed to complete (considered as tasks) to the remaining active vehicles (considered
as agents) with the objective of minimizing the increase in mission time. To eval-
uate the performance of our proposed algorithm, we compared its solutions against
offline optimal solutions obtained from solving the Mixed Integer Linear Programming
(MILP) formulation using the Gurobi optimizer with vehicle failures known before-
hand. We also empirically and theoretically analyzed the competitive ratio to assess
2the proposed algorithm’s solution quality relative to the offline optimal solution.
The main contributions of this paper are the following:
1. AcentralizedauctionalgorithmthatreformulatestheMD-RPP-RRVasavariant
of the Generalized Assignment Problem (GAP) [25]. This approach efficiently
handlesdynamicvehiclefailuresbyreassigningtaskswithoutcompletererouting,
reducing computational complexity. Our method addresses a gap in existing
auction approaches [34] by applying them to dynamic failures in arc routing
problems,specificallytheMD-RPP-RRV,whichhasnotbeenpreviouslyexplored
in this context. This algorithm extends centralized auction methods [36,37] to
handle more complex task allocation scenarios in the MD-RPP-RRV context in
the following ways:
(a) Assigning multiple failed trips (tasks) to a single vehicle (agent).
(b) Dynamically reallocating trips from failed vehicles to active ones during the
mission, thereby adapting to changes in the available vehicle fleet size due
to failures.
This approach addresses limitations in existing methods that typically assign
only one task per agent or assume a fixed number of agents throughout the
mission.
2. Experimental results that describe the quality of the solutions that the approach
generates and the execution time required.
3. A theoretical upper bound for the competitive ratio of our proposed centralized
auction algorithm to solve the MD-RPP-RRV with vehicle failures. This analysis
provides a formal performance guarantee for our algorithm in dynamic failure
scenarios.
The remainder of this paper is organized as follows: Section 2 presents a literature
review of related works. Section 3 provides the assumptions and presents a MILP for-
mulation for the MD-RPP-RRV with known vehicle failures and failure times. Section
4 describes the proposed centralized auction algorithm. Section 5 presents our exper-
imental results. It details the testing of our proposed algorithm on failure scenarios
created from benchmark instances. It also compares the quality of the solutions with
offline optimal solutions that were obtained by solving the MILP formulation using
the Gurobi solver. Section 6 concludes the paper.
2 Literature Review
The MD-RPP-RRV involving vehicle failures extends the classical Multi-Depot Rural
Postman Problem MD-RPP [7–9] by incorporating multiple trips and vehicle failure
uncertainties. Whilevehiclefailureshavenotbeenextensivelystudiedinthecontextof
the RPP, related research exists in its variants, such as the Capacitated Arc Routing
Problem (CARP) [10–12] and the Vehicle Routing Problem (VRP) [13,14]. This
review examines relevant literature across ARP and VRP variants, as well as auction
algorithms, to identify key research gaps. Specifically, we focus on the lack of efficient,
real-timeapproachesforhandlingmultiplevehiclefailuresinmulti-depotscenarios, the
3limitations of existing auction-based methods in addressing arc routing problems, and
the need for robust solutions that can manage failures without relying on additional
resources like auxiliary or contingency vehicles.
2.1 ARP with vehicle failures
TheDynamicCapacitatedArcRoutingProblem(DCARP)extendsCARPbyincorpo-
rating dynamic changes in demand [15], service cost [16], and vehicle availability [17].
Liu et al. [18] addressed the multi-depot DCARP, considering fluctuations in vehicle
availability (failures), arc accessibility, task additions/removals, and demand changes
by proposing a memetic algorithm with a novel split scheme to minimize total travel
distance, updating routes upon interruptions. However, their assumption that failed
vehicles are repaired and reused without accounting for transport and repair time
overlooks potential delays, making it infeasible for time-critical operations.
Licht et al. [48] introduced the Rescheduling Arc Routing Problem, presenting a
MILP formulation for single-depot ARP with random single-vehicle failure and un-
capacitated vehicles. Their solution strategy minimizes disruption costs by locally
modifying routes of nearby active vehicles. While efficient for larger problems, the
approach is limited to single-vehicle failures and single-depot scenarios. Extending
this to multi-depot problems with capacitated vehicles and multiple random failures
remains an open research area, as it would require solving the MILP model multiple
times, potentially incurring significant computational overhead.
Consequently, solution strategies for multi-depot arc routing problems with capac-
itated vehicles subject to multiple random failures remain an open and unexplored
area of research.
2.2 VRP with vehicle failures
From a VRP perspective, dealing with vehicle failures is referred to as the Vehi-
cle Rescheduling problem (VRSP), where one or more vehicles need to reschedule
their routes to handle vehicle failures. Li et al. [19,20] studied the single depot Bus
Rescheduling Problem (SDBRP) or VRSP, which deals with modifying the tours of
non-failed buses to accommodate passengers in the failed bus and those expected to be
picked up from the remaining part of the failed tour minimizing operational and de-
lay costs. The authors proposed sequential and parallel auction algorithms for faster
rescheduling. Results showed that the parallel auction algorithm outperformed the
sequential one by generating quicker routes, especially for larger instances.
Li et al. [21] proposed a Lagrangian heuristic to solve the real-time VRSP to min-
imize changes to the initial schedule due to vehicle failure by imposing penalties for
reassignments. Results indicated that this approach is particularly effective when ve-
hicle failures occur later in a trip but is less effective when failures happen early on.
Mu et al. [22] proposed two variations of the tabu search algorithm to solve the VRSP
involving single vehicle failure to minimize disruption cost. The main assumption in
their study is that one extra vehicle is available at the depot and can be used to han-
dle breakdowns. Hence, there was no change in the initially planned routes of active
vehicles. They tested the algorithm on a set of problems generated based on stan-
dard vehicle-routing benchmark instances. However, both studies [21,22] were limited
to single-vehicle failures and relied on the availability of additional resources, leaving
4a significant research gap in developing robust, real-time solutions that can handle
multiple vehicle failures or early-trip failures without requiring extra vehicles.
2.3 Auction Algorithms
In the MD-RPP-RRV with vehicle failures, which can be formulated as a variant of
the GAP [25], the primary objective is to assign failed trips (tasks) to a fleet of active
vehicles (agents) while considering constraints such as battery capacity, recharging
opportunities, and vehicle reuse. The objective is to minimize the increase in total
mission time. Auction algorithms [26–28] are a popular approach to task allocation
in multi-vehicle coordination problems. These algorithms can be categorized into cen-
tralized and decentralized (distributed) approaches, each offering distinct advantages
and challenges.
2.3.1 Centralized Auctions
In the context of MD-RPP-RRV with vehicle failures, a centralized auction [29–31]
employs a central auctioneer to collect bids from active vehicles and assign them failed
trips, minimizing the overall increase in mission time. The central auctioneer manages
multiple vehicle failures simultaneously, maintaining a global view of active vehicle
positions, battery capacities, and failed trips. This comprehensive view can enable
quick decision-making, help minimize disruptions, and optimize mission time.
While centralized auctions are computationally demanding due to the NP-hard
nature of the task allocation problem [32], the application of heuristic approaches,
such as combinatorial [33,34] and greedy auctions [34], can reduce the computational
burden. These approaches allow for efficient allocation even in large-scale problems,
making them more practical in real-world scenarios. However, centralized auctions
require continuous communication between vehicles and the central auctioneer, which
may be challenging in environments with unreliable or restricted communication in-
frastructure.
2.3.2 Decentralized Auctions
Decentralized(distributed)auctionalgorithms[38–42]relyonpeer-to-peerinteractions
for task allocation, often without a central auctioneer. These approaches are robust to
communication failures and require less centralized control, making them appealing in
environments with limited communication infrastructure. However, decentralized auc-
tions may provide suboptimal solutions, especially when compared to their centralized
counterparts. The lack of a global perspective may result in locally optimal decisions,
which can lead to inefficiencies in task allocation.
In the context of the MD-RPP-RRV, where multiple random vehicle failures may
occur, decentralizedauctionsmaynotofferthespeedandqualityofsolutionsnecessary
to adapt to rapidly changing conditions. The inherent suboptimality of decentralized
approaches, coupledwiththeirtendencytobecometrappedinlocalminima, maymake
themunsuitableforscenariosthatrequirequickreroutingandefficienttaskreallocation
across the entire fleet. As a result, decentralized auctions were not considered for this
study, as they may lack the capacity to handle the complexity and urgency of multiple
simultaneous vehicle failures.
53 Problem Formulation and Assumptions
This section describes the formulation and assumptions considered for an offline MILP
problem to solve MD-RPP-RRV involving vehicle failures where the vehicle failure
times are known beforehand.
3.1 Assumptions
The following assumptions are considered for the MD-RPP-RRV with vehicle failures:
1. All vehicles are homogeneous, i.e., they have the same battery capacity and
recharge time and move at a constant uniform speed.
2. Arequirededgeisconsideredtraversedonlyifavehicletraversesitandcompletes
the trip by reaching a depot node. If a failure occurs after the vehicle has
traversed the required edge but before reaching the depot, the required edge is
not considered traversed and must be traversed by another vehicle.
3. Vehicle failure can occur during a trip but not during recharging.
4. At least one vehicle will not fail to complete the mission and traverse all required
edges.
5. Vehicle failures are detected and communicated to all other vehicles immediately
upon occurrence.
6. Vehicle failures occur instantaneously, not over a period of time.
3.2 Problem Formulation
The MILP formulation for the MD-RPP-RRV with vehicle failures builds upon our
previouswork[5], extendingittoaccountforvehiclefailurestogenerateofflineoptimal
solutions. The assumption here is that all vehicle failure times are known beforehand.
For the manuscript to be self-contained, the constraints and formulation are briefly
described, focusing mainly on the failure constraints. For a detailed explanation of
the MILP formulation (specifically constraints 1 - 12) for MD-RPP-RRV, readers are
referred to [5].
The MD-RPP-RRV is modeled on an undirected weighted connected graph G =
(N,E,T), where N represents the set of nodes, E denotes the set of edges connecting
these nodes, and T contains the edge weights, which is the time taken by a vehicle to
traverse the edge (i,j). Each edge (i,j) ∈ E corresponds to an edge with length l(i,j),
traversed by vehicles at a constant speed S. The time t(i,j) required to traverse an
edge is calculated as l(i,j)/S. The problem involves a subset of required edges E ⊆ E
u
that must be visited and a set of depots N ⊆ N where vehicles can start, stop, or
d
recharge.
6min β
(cid:88)
subject to: x(k,1,B(k),j) = z(k,1),k = 1,...,K (1)
(B(k),j)∈E
z(k,f)−z(k,f +1) ≥ 0, k = 1,...,K,f = 1,...,F −1 (2)
(cid:88)
x(k,f,i,d) = y(k,f,d), k = 1,...,K,f = 1,...,F (3)
(i,d)∈E,
d∈N
d
(cid:88)
y(k,f −1,d) ≥ x(k,f,d,j) k = 1,...,K,
(4)
(d,j)∈E
f = 2,...,F,d ∈ N
d
(cid:88)
z(k,f)− y(k,f,d) = 0, k = 1,...,K,f = 1,...,F (5)
d∈N
d
F F
(cid:88) (cid:88) (cid:88)
x(k,f,i,j)t(i,j)+( z(k,f)−1)×R ≤ β,
T
(6)
f=1(i.j)∈E f=1
k = 1,...,K
(cid:88)
x(k,f,i,j)t(i,j) ≤ C, k = 1,...,K,f = 1,...,F (7)
(i,j)∈E
(cid:88) (cid:88)
x(k,f,i,j)− x(k,f,i,j) = 0,
(i,j)∈E, (i,j)∈E, (8)
i∈N j∈N
d d
k = 1,...,K,f = 1,...,F
(cid:88) (cid:88)
x(k,f,i,j)− x(k,f,j,i) = 0, k = 1,...,K,
(9)
j∈N j∈N
f = 1,...,F,i ∈ N/{N }
d
K F K F
(cid:88)(cid:88) (cid:88)(cid:88)
x(k,f,i,j)+ x(k,f,j,i) ≥ 1, ∀(i,j) ∈ E (10)
u
k=1f=1 k=1f=1
(cid:88)
x(k,f,i,j) ≤ z(k,f)×M, k = 1,...,K,f = 1,...,F (11)
(i,j)∈E
(cid:88)
x(k,f,i,j) ≥ 2×x(k,f,p,q), k = 1,...,K,
(12)
(i,j)∈δ(S)
f = 1,...,F,∀S ⊆ N/{N },(p,q) ∈ E(S)
d
F F
(cid:88) (cid:88) (cid:88)
x(k,f,i,j)t(i,j)+( z(k,f)−1)×R ≤ f ,
T k (13)
f=1(i.j)∈E f=1
∀k ∈ F
x(k,f,i,j) ∈ [0,1], k = 1,...,K,f = 1,...,F,∀(i,j) ∈ E (14)
y(k,f,d) ∈ [0,1], k = 1,...,K,f = 1,...,F,d ∈ N (15)
d
z(k,f) ∈ [0,1], k = 1,...,K,f = 1,...,F (16)
β ∈ R+, M >> |E| (17)
The problem considers K vehicles, each with a maximum operational time C after
charging and a recharge time R . The maximum number of trips a vehicle can make is
T
denoted by F. To formulate the MD-RPP-RRV as a MILP model, three sets of binary
decision variables are introduced: x(k,f,i,j) indicates if vehicle k traverses edge (i,j)
during its f-th trip, y(k,f,d) denotes if vehicle k ends its f-th trip at depot d, and
7z(k,f) signifies if vehicle k uses its f-th trip. The objective function β represents
the maximum total time needed by any vehicle to complete all its trips and recharge
between trips.
The MILP formulation includes several constraints to ensure proper routing and
adherence to problem specifications. Constraints (1-5) manage trip initiation and
termination at depots. Constraints (6-7) enforce maximum trip time and battery
capacity limits. Constraints (8-10) ensure flow conservation and required edges traver-
sal. Constraints (11-12) eliminate unused trips and subtours. Constraint 13 forces all
failure vehicles (F ⊂ {1,..,K}) to operate only below their respective failure times
(f , ∀k ∈ F). This will ensure none of the failure vehicles is utilized to traverse re-
k
quired edges past their respective failure times. This comprehensive set of constraints
allows for generating offline optimal solutions for the MD-RPP-RRV for vehicle fail-
ures.
4 Proposed Approach
This section presents the proposed centralized auction approach, includes pseudocode
for the key procedures, and demonstrates it with a small instance of the MD-RPP-
RRV with vehicle failures. Table 1 provides the nomenclature used in the subsequent
sections.
4.1 MD-RPP-RRV solution routes
This section describes with an example a feasible solution to the MD-RPP-RRV given
by the simulated annealing metaheuristic [5] to help the reader better understand the
upcoming sections. A feasible solution specifies a route for each vehicle. A route
includes one or more trips, each beginning at a depot and ending at the same or a
different depot. The capacity constraint limits the length of a trip. Although the
primary objective of each vehicle is to traverse required edges, a vehicle might need
to make a trip without covering any required edges to reposition itself to a more
strategically located depot, from which it can more efficiently traverse the remaining
required edges in subsequent trips.
Consider an instance with an undirected graph G that has 8 nodes, 13 edges, 2
depot nodes, and 1 required edge, shown in Figure 1(a). There is only one vehicle
(V ), which begins at the depot at node 1; C = 7 time units; and R = 1.1 time units.
1 T
Due to the capacity constraint, the vehicle cannot directly traverse the required
edge (7,8) in one trip. In a feasible multi-trip route, the vehicle travels from its current
depot to another depot (node 5) to move closer to the required edge (Figure 1(b)),
recharges at that depot, and then completes a trip that includes the required edge
(Figure 1(c)).
The first trip {1-3-5} takes 6.2 time units for the vehicle to complete. Then, the
vehicle recharges at node 5, which takes 1.1 time units. Finally, the vehicle takes the
second trip {5-7-8-5}, which takes 4.5 time units to complete. Both trips are feasible
because each one’s duration is less than C. Completing the route and traversing the
required edge requires 11.8 time units, the sum of the trip times and the recharge time.
Thus, P = {1−3−5, 5−7−8−5} and y = 11.8, which is the time at which V
1 1 1
reached the depot at the end of the last trip. The mission or maximum trip time is
11.8 time units.
8Table 1: Nomenclature
Variable Description
C Vehicle capacity (time)
e Required edges traversed in the failed trip
f
E Set of required edges; E ⊂E
u u
ET Execution time in seconds
F ⊂{1,...,K} Failed vehicles
f Failure time of vehicle k ∈F
k
G=(N,E,T) Nodes, edges, edge weights
K Number of vehicles
N Set of depots
d
n ,k =1,...,K Location of vehicle k at time t; n ∈N
k k
P ,k =1,...,K Route for vehicle k until time t , P is a list
k k K
of all K vehicle routes
r Initial search radius to find nearby vehicles
i
close to failure trips
r Time to traverse a route, including recharge time.
t
R Time to recharge vehicle at depot
T
S ,k =1,...,K Status of vehicle k
k
T Simulation time iterating from 0 to mission time t
m
t Simulation time iterating from 0 to mission time t
m
t Mission time (or Maximum trip time)
m
y ,k =1,...,K Time that vehicle k arrived at last depot in P
k k
%∆β Percent increase of β w.r.t β
CA CA CA
%∆β Percent increase of β w.r.t β
OPTf OPTf OPT
β Maximum trip time or mission time of
CA
centralized auction
β Optimal Maximum trip time or mission
OPT
time without vehicle failures
β Optimal Maximum trip time or mission
OPTf
time with vehicle failures known beforehand
β Maximum trip time or mission time of
SA
simulated annealing without vehicle failures
∆r Search radius increment parameter if no
nearby vehicles are found
ρ Competitive ratio βCA
βOPTf
τ Failed trip due to a vehicle failure
f
Figure1: (a)AsampleinstanceofMD-RPP-RRV,(b)V gettingclosertotherequired
1
edge. (c) V traversing the required edge.
1
9Algorithm 1 MD-RPP-RRV with Vehicle Failures
1: procedure Simulation(G,K,F,N ,P ,S ,y ,n ,r ,∆r)
d K K K K i
2: P ,y ←SA(G,N ,K,n ,y ,E ,R ,C)
K K d K K u T
3: t ← max y
m k
k=1,...,K
4: D ←DepottoDepotRoutes(G,N ,R ,C)
d d T
5: Initialize dictionary M ←∅
F
6: for t=0→t do
m
7: for all vehicle k=1,...,K do
8: if t=f ,k∈F and S =True then
k k
9: S ←False
k
10: i←tripindex(G,P ,R ,t)
k T
11: τ ←∅,e ←∅
f f
12: for j =0→ len(P ) do
k
13: if j ≥i then
14: e ←requiredtrip(E ,P [j])
f u k
15: if e ̸=∅ then
f
16: τ ←P [j]
f k
17: M [τ ]←e
F f f
18: end if
19: end if
20: end for
21: end if
22: end for
23: if M ̸=∅ then
F
24: P ←Auction(G,M ,D ,t,K,P ,S ,y ,r ,∆r)
K F d K K K i
25: t ←Missiontime(G,P ,R )
m K T
26: end if
27: end for
28: return P
K
29: end procedure
4.2 MD-RPP-RRV with vehicle failures
Solving an instance of the MD-RPP-RRV with vehicle failures requires generating an
initial set of routes (with no information about the failures) and then rescheduling in
response to vehicle failures. In this study, we used a simulated annealing algorithm [5]
to generate the initial set of routes. A failure scenario (described in Section 5.1) is
a set of vehicles F ⊂ {1,...,K} that will fail at f ,k ∈ F times respectively. Be-
k
fore simulating the MD-RPP-RRV instance, we calculate the routes and route times
joining any two depot nodes in N using depottodepotroutes procedure (Line 4,
d
Algorithm 1) which will be useful when performing the auction. We simulate solving
the MD-RPP-RRV instance by iterating time t from 0 to mission time t (Line 6),
m
constantly checking for vehicle failures in each iteration (Lines 7-8). To track vehicle
failures, we use a boolean variable S ,k = 1,...,K, which provides the status of each
k
vehicle, and if its value says S = False, it indicates vehicle k has failed.
k
When a vehicle k ∈ F fails at time f , the approach uses tripindex (Algorithm
k
2) to determine the trip that vehicle k was traversing at time f .
k
Then all subsequent trips for vehicle k, including the current trip, are checked to
determine whether they are required using the requiredtrip procedure (Line 14).
A trip is required if it traverses at least one required edge, in which case the re-
quiredtrip procedure returns a set of required edges (e ⊆ E ) traversed during
f u
that trip. The requiredtrip procedure returns an empty set if the trip is not re-
quired, which eliminates the auctioning of trips that are not required. To store all
the failed trips and their respective required edges traversed by the failed vehicle, a
dictionary M is initialized (Line 5), which maps failed trip τ to the required edge(s)
F f
e traversed in that failed trip (Line 17), required for auctioning.
f
10Algorithm 2 TRIPINDEX
1: procedure TRIPINDEX(G,P ,R ,t)
k T
2: i ← −1
3: p ← 0
4: while p < t do
5: i ← i+1
6: if i = len(P ) then
k
7: p ← p+triptime(G,P [i])
k
8: else
9: p ← p+triptime(G,P [i])+R
k T
10: end if
11: end while
12: return i
13: end procedure
If M is not empty (Line 23), failed trips need to be reallocated. So, the auction
F
procedure reallocates the trips associated with the failed vehicle to other available
vehicles (line 24). The mission time t is recalculated based on the updated routes and
m
recharging times of the vehicles (line 25) to reflect failed trip reallocations. Finally, the
updated routes for all vehicles are returned, showing the optimized routes considering
trip reallocations due to vehicle failures (line 28).
The following section discusses the auction procedure in detail.
4.3 Auction Procedure
The auction procedure (Algorithm 3) quickly reallocates failed trips to active vehi-
cles, eliminating the need for complete replanning. As the number of active vehicles
increases, the potential reallocations for failed trips also grow. Hence, the selection
criterion for the optimal reallocation is to minimize the increase in overall mission
time. The auction procedure requires comprehensive information on all active ve-
hicle routes to reallocate failed trips optimally. Consequently, this procedure is fully
centralized, as it depends on the availability of information from all active vehicles. By
leveragingthestrengthsoffullycentralizedauctions, thealgorithmeffectivelymanages
thecomplexitiesintroducedbyvehiclefailures, ensuringrobustandadaptiveroutingin
MD-RPP-RRV. The following paragraphs describe the steps of the centralized auction
approach to handle vehicle failures.
The Auction procedure iteratively assigns failed trips τ from the set M to the
f F
most suitable active vehicle available. The procedure begins by initializing several
key variables at the start of each iteration: the minimum bid B is set to infinity,
min
indicating no bids have been received (line 3); the best vehicle k∗ and best route R
b
are initialized to empty set (lines 4, 5); and the best trip to be auctioned τ∗ is also
f
initialized to empty set (line 6). The current mission time t is then calculated (line
m
7) to evaluate the total time required for the vehicle fleet to complete their assigned
routes without the failed trips.
For each failed trip τ in the set M (line 8), the procedure begins by initializing
f F
the search radius r to a predefined starting value r (line 9), and the set of nearby
i
vehicles K is initialized as empty set (line 10). A while-loop then expands the search
r
radius incrementally by ∆r (line 13), calling the Search procedure (line 12) until one
11Algorithm 3 Auction Procedure
1: procedure Auction(G,M ,D ,t,K,P ,S ,y ,r ,∆r)
F d K K K i
2: while M ̸=∅ do
F
3: Initialize B ←∞
min
4: Initialize k∗ ←∅
5: Initialize R ←∅
b
6: Initialize τ∗ ←∅
f
7: t ←Missiontime(G,P ,R )
m K T
8: for all τ ,e ∈M do
f f F
9: Initialize r←r
i
10: Initialize K ←∅
r
11: while K =∅ do
r
12: K ←Search(G,P ,R ,τ ,r,K,S ,t)
r K T f K
13: r←r+∆r
14: end while
15: for all vehicle k∈K do
r
16: bid,R ←CalcBid(G,D ,τ ,t,e ,k,P ,t )
k d f f k m
17: if bid<B then
min
18: B ←bid
min
19: R ←R
b k
20: k∗ ←k
21: τ∗ ←τ
f f
22: end if
23: end for
24: end for
25: P k∗ ←R b
26: Remove τ∗,M [τ∗] from M
f F f F
27: end while
28: return P
K
29: end procedure
or more eligible vehicles are found within the current radius (that is, until the set K
r
is non-empty).
After identifying the nearby vehicles (those in K ), the Auction procedure calcu-
r
lates bids for each vehicle k ∈ K by calling the CalcBid procedure (line 16). This
r
procedure evaluates the cost of inserting the failed trip τ into the current route P of
f k
each vehicle k, returning both the bid value and the updated route R . The bid value
k
from each vehicle is compared to the current minimum bid B , and if a lower bid is
min
found, the minimum bid is updated (lines 17-23). The vehicle k that offers the lowest
bid is recorded as k∗, and the corresponding trip τ∗ is assigned to this vehicle.
f
This process repeats until all trips in M have been allocated, ensuring an opti-
F
mized distribution of failed trips among the active vehicles.
The Search procedure (Algorithm 4) is responsible for identifying the set of ve-
hicles K that are within a feasible range to participate in the auction for a failed
r
trip τ . The procedure begins by initializing the set K as empty (line 2). It then
f r
iterates over each vehicle k in the fleet (line 3), checking whether the vehicle is active
(S = True) (line 4). For each active vehicle, the current trip index i is determined
k
using the tripindex function (line 5). The procedure evaluates the distance from the
starting depot s and the ending depot e of each remaining trip j ≥ i in the vehicle’s
d d
planned route P to the failed trip τ . If either depot is within the search radius r
k f
(lines 6–20), the vehicle k is added to the set K (lines 12, 16). Once all vehicles
r
have been evaluated, the procedure returns the set K of eligible vehicles (line 23). To
r
calculate the distances from the depot nodes s and e , the Search procedure also
d d
uses distance procedure (lines 9–10), which gives the shortest distance between any
two nodes in the undirected weighted connected graph (G).
To illustrate the Search procedure, consider Figure 2. In Figure 2(a), we have
12Algorithm 4 Search
1: procedure Search(G,P ,R ,τ ,r,K,S ,t)
K T f K
2: Initialize K =∅
r
3: for all vehicle k=1,...,K do
4: if S = True then
k
5: i←tripindex(G,P ,R ,t)
k T
6: for j =i→ len(P ) do
k
7: s ←P [j][1]
d k
8: e ← end of P [j]
d k
9: D ←min(distance(G,s ,τ [1]),
distance(s Gd
,s ,end of τ ))
d f
d f
10: D ←min(distance(G,e ,τ [1]),
distance(Ged
,e ,end of τ ))
d f
d f
11: if D ≤r then
sd
12: Add vehicle k to K
r
13: break
14: else
15: if D ≤r then
ed
16: Add vehicle k to K
r
17: break
18: end if
19: end if
20: end for
21: end if
22: end for
23: return K
r
24: end procedure
a sample instance of MD-RPP-RRV showing vehicle V ’s routes and the failed trip of
1
vehicle V that needs to be auctioned. In the first iteration of the search procedure,
2
shown in Figure 2(b), the procedure searches for depots in vehicle V ’s routes that are
1
within the search radius r from the failed trip depots d and d of vehicle V . Since no
6 7 2
suitable depots are found within this radius, the search radius is increased to r+∆r,
and the search is repeated, as shown in Figure 2(c). This time, the procedure finds
depot d in vehicle V ’s routes to be within the increased search radius, making V
2 1 1
a candidate for reallocation. The Search procedure thus ensures that only active
vehicles within a feasible range are considered for reallocation, optimizing the auction
process by limiting the search space to relevant candidates.
The CalcBid procedure (Algorithm 5) calculates the bid for a vehicle k by de-
Figure2: MD-RPP-RRVsearchprocedure: (a)Initialsetup. (b)Firstsearchiteration.
(c) Second iteration with expanded search radius. Gray nodes and edges represent an
undirected graph; blue nodes are nodes in the routes for V and V ; red nodes are
1 2
depot locations, and purple nodes and edges show the expanding search area.
13Algorithm 5 Calculate Bid
1: procedure CalcBid(G,D ,τ ,t,e ,k,P ,t )
d f f k m
2: D ←{}
r
3: i←tripindex(G,P ,R ,t)
k T
4: for j =0→ len(P ) do
k
5: if j ≥i then
6: D [j]← end of trip P [j]
r k
7: end if
8: end for
9: P ←∅
b
10: P ←∞
t
11: for all item (j,d )∈D do
r r
12: P ←copy(P )
ck k
13: P ←inserttrip(G,D ,P ,j,d ,τ ,R )
d ck r f T
14: if P >routetime(G,P,R ) then
t T
15: P ←routetime(G,P,R )
t T
16: P ←P
b
17: end if
18: end for
19: bid←P −t
t m
20: return bid,P
b
21: end procedure
termining the optimal insertion of the failed trip τ into the vehicle’s current route
f
P . The procedure starts by initializing a dictionary D to store the depots that the
k r
vehicle is expected to visit in the future (line 2). The current trip index i is determined
using the tripindex function (line 3). For each trip j in the vehicle’s route, if j ≥ i,
the depot where the trip ended is added to the dictionary D (lines 4-7).
r
The algorithm then initializes variables to track the best route P and the best
b
route time P for inserting the failed trip (lines 9-10). For each entry (j,d ) in the
t r
dictionary D —where j is the trip index and d represents the set of depots at which
r r
trip j starts and ends—the procedure creates a copy of the current route P (line 12)
ck
and attempts to insert the failed trip τ at depots d using the inserttrip function
f r
(line 13). The route time is recalculated (line 14), and if the new route has a shorter
time than the current best, the best route and best route time are updated accordingly
(lines 15-18).
Finally, the bid is computed as the difference between the best route time P and
t
the current mission time t (line 19). The procedure returns the bid and the best
m
route P (line 20).
b
The InsertTrip procedure (Algorithm 6) is designed to insert a failed trip τ into
f
Algorithm 6 Insert Trip
1: procedure inserttrip(G,D ,P ,j,d ,τ ,R )
d ck r f T
2: P ←∅
3: if j !=len(P ) then
ck
4: P ←D [d ,τ [1]]+τ +D [end of τ ,d ]
i d r f f d f r
5: else
6: s ←routetime(G,D [d ,τ [1]],R )
d d r f T
7: e ←routetime(G,D [d ,end of τ ,R )
d d r f T
8: if s ≤e then
d d
9: P ←D [d ,τ [1]]+τ
i d r f f
10: else
11: P ←D [d ,end of τ ]+reverse of trip τ
i d r f f
12: end if
13: end if
14: P ← Insert P in P at trip index j
i cK
15: return P
16: end procedure
14Figure 3: Example of InsertTrip procedure: (a) Initial setup with V and V routes.
1 2
(b) Insertion of V ’s failed trip into V ’s route.
2 1
the current route P of a vehicle at a specified index j. The procedure first initializes
ck
an empty route P (line 2). If the index j is not at the end of the current route, the
procedure creates a cycle by connecting the depot d to the start of τ , then appending
r f
τ , and finally connecting the end of τ back to the depot d (line 4). If j is at the
f f r
end of the route, the procedure calculates the route times for connecting the depot d
r
to either the start or the end of τ (lines 6-7). It then chooses the connection with
f
the shorter route time and inserts τ accordingly, either directly or in reverse order
f
(lines 8-12). Finally, the constructed trip P is inserted into the current route P at
i ck
the specified index j (line 14), and the updated route P is returned (line 15).
Figure 3 illustrates an example of the InsertTrip procedure. In Figure 3 (a), we
see the initial setup with two vehicles, V and V . Vehicle V has an existing route
1 2 1
passing through depots d , d , d , d , and d , represented by black arrows. Vehicle V
1 2 3 4 5 2
has failed, and its failed trip between depots d and d needs to be inserted in vehicle
6 7
V ’s routes.
1
Figure 3 (b) shows the result of the InsertTrip procedure. V ’s failed trip (d
2 6
to d ) is inserted into V ’s route after d , as determined by the SEARCH procedure
7 1 2
(Figure 2). The insertion creates a cycle: d to d (new connection), d to d (failed
2 6 6 7
trip), then back to d before resuming V ’s original route. This demonstrates how
2 1
the procedure efficiently integrates the failed trip while maintaining the overall route
structure.
5 Results
This section describes the instances considered from the literature for the failure sce-
nario creation, the experimentation performed on the proposed approach, and the
results obtained from testing and comparing them with optimal offline solutions by
solving the MILP formulation (Section 3.2) using the Gurobi optimizer.
5.1 Instance Generation Process
We created a total of 77 MD-RPP-RRV instances from 19 gdb [49], 34 bccm [50] and
24 eglese [51,52] CARP benchmark instances. We generated MD-RPP-RRV instances
from CARP instances by randomly choosing one-fifth of the nodes as depots and
15randomly choosing one-third of the edges as required edges. Thus, the number of
depots is less than the number of required edges. The instance generation process sets
the number of vehicles as one-half of the number of required edges. In these instances,
the vehicle capacity C was set to twice the maximum edge weight to ensure a vehicle
could traverse the longest required edge and the recharge time R was set to twice the
T
vehicle capacity, reflecting the extended time needed for drone recharging.
We then created failure scenarios from the MD-RPP-RRV instances using the CFS
procedure(Algorithm7)shortfor”CreateFailureScenarios”. ForeachMD-RPP-RRV
instance consisting of K vehicles, at most K−1 failure scenarios can be created using
an iterative approach. Each failure scenario consists of determining three things: (i)
the number of vehicle failures (|F|), (ii) the set of failed vehicles (F), and (iii) the
vehicle failure times (f ,k ∈ F). The number of vehicle failures can be at most K −1
k
(line 3) because not all vehicles can fail (Section 3.1).
The failure scenario creation process starts by determining the number of vehicle
failures (N ) through a uniform random integer selection between 1 and K −1 (line
F
3). The process then iteratively creates N failure scenarios. For each scenario, an
F
empty list F is initialized to store the vehicles that will fail (line 5). In each iteration
j = 1,...,N , another loop runs from i = 1,...,j, where a vehicle k is randomly
F
chosen from the range [1,K] and added to the vehicle failure list F (lines 6-8).
Next, the failure times for each vehicle in the list F are determined. The maxi-
mum trip times y for all vehicles are obtained by executing the simulated annealing
k
algorithm on the MD-RPP-RRV instance (line 11). For each vehicle k in the failure
list F, a failure time f is selected randomly between 1 and y (line 12), ensuring the
k k
vehicle fails during the mission. These failure times are added to the vehicle failure
times list f for each vehicle in F (lines 12-12). Finally, the generated failure scenario,
k
comprising the failure list F and the corresponding failure times f , is added to the
k
set of failure scenarios S (line 15). The procedure returns the set of failure scenarios
S upon completion (line 17).
We created 257 failure scenarios from 77 MD-RPP-RRV instances obtained from
the instance generation process. Table 2 describes these failure scenarios.
Algorithm 7 Failure Scenario Creation
1: procedure CFS(G,N ,K,n ,y ,E ,R ,C)
d K K u T
2: S ←∅
3: N ←UniformRandomInteger(1,K−1)
F
4: for j =1→N do
F
5: F ←∅
6: for i=1→j do
7: k←RandomChoice(1,K)
8: F ←F ∪{k}
9: end for
10: f ←∅
k
11: P ,y ←SA(G,N ,K,n ,y ,E ,R ,C)
K K d K K u T
12: for all k∈F do
13: f ←UniformRandomInteger(1,y )
k k
14: end for
15: S ←S∪{(F,f )}
k
16: end for
17: return S
18: end procedure
16Table 2: Failure Scenarios Information
Instance #Instances #Failure Nodes Edges Vehicles Failures
Name Scenarios Range Range Range Range
GDB 19 37 9-16 19-44 2-7 1-5
BCCM 34 108 24-50 39-97 2-16 1-5
EGLESE 24 112 77-140 98-190 16-31 1-5
5.2 Experimentation
This section describes the experiments that we conducted to evaluate the centralized
auction approach and compare the quality of its solutions with optimal solutions (us-
ing perfect information) obtained from using Gurobi to solve the MILP formulation
(Section 3.2). The experiments were performed on an AMD EPYC 7763 64-core Pro-
cessor with 128 physical cores, 128 logical processors, and 8 CPU cores. Up to 32
threads were used, and 8 GB of memory was allocated to each CPU core. The Gurobi
optimizer version used is 10.0.0. The instances and failure scenarios can be accessed
using the GitHub repository from here.
5.2.1 GDB Failure Scenario Results
The performance of the centralized auction approach was evaluated against the offline
MILP formulation and analyzed for robustness in the face of vehicle failures using the
GDB failure scenarios presented in Table 3.
The table describes each GDB failure scenario using the symbols |N|, |E|, |E |, C,
u
R , K, |N |, and |F| as defined in Table 1. For each failure scenario, the maximum
T d
trip time (β ) and execution without vehicle failures obtained using the Gurobi
OPT
optimizer are provided. Columns 11 to 13 display the results for failure scenarios
from Gurobi for scenarios with known failures, including the offline optimal solution
(β ), the percentage increase in maximum trip time (%∆β ) wrt to β , and
OPT OPT OPT
f f
execution time. The percentage increase is calculated as follows.
β −β
OPT OPT
%∆β = f ×100 (18)
OPT
f β
OPT
Columns 14 and 15 show the results of the best maximum trip time (β ) obtained
SA
by running the SA algorithm [5] ten times and the total execution time for all ten runs.
Columns 16 to 19 display the results of the centralized auction algorithm for handling
dynamic vehicle failures. These include the maximum trip time of the centralized
auction algorithm (β ), percentage increase in maximum trip time (%∆β ) wrt
CA CA
to β , competitive ratio (ρ), and total execution time. The percentage increase is
SA
calculated as follows.
β −β
CA SA
%∆β = ×100 (19)
CA
β
SA
Note that the SA offline algorithm produced the optimal solution (best out of 10
simulations) for all GDB failure scenarios, considering no vehicle failures. Hence, we
can observe that β = β for all GDB failure scenarios.
SA OPT
The competitive ratio, defined as the ratio of the solution quality (maximum trip
time) obtained by the online algorithm (centralized auction handling vehicle failures
dynamically) to that of the optimal offline solution with vehicle failures known before-
hand, serves as a key metric for evaluating the effectiveness of the proposed approach.
17Table 3: GDB Failure Scenario Results
Gurobi GurobiOfflineResults SA CentralizedAuctionAlgorithm
FailureScenarioscreatedfromgdbinstances optimal withvehiclefailures Offline forhandlingdynamic
results knownbeforehand Results vehiclefailure
Failure
ET ET ET Total
Sc Ne an mar eio |N| |E| |Eu| C RT K |Nd| |F| βOPT
(sec)
βOPTf %∆βOPTf
(sec)
βSA
(sec)
βCA %∆βCA ρ
ET(sec)
gdb.1 11 19 5 40 80 2 3 1 148 133.63 251 69.59 60 148 0.01 364 145.95 1.45 60.01
gdb.2 7 21 8 16 32 4 2 1 15 4.51 16 6.67 50 15 0.00 60 300.00 3.75 50.00
gdb.3 7 21 8 12 24 4 2 1 7 1.62 8 14.29 48 7 0.00 36 414.29 4.50 48.00
gdb.4 7 21 8 12 24 4 2 2 7 1.02 8 14.29 48 7 0.00 38 442.86 4.75 48.00
gdb.5 7 21 8 12 24 4 2 3 7 0.95 10 42.86 48 7 0.00 98 1300.00 9.80 48.00
gdb.6 12 22 7 40 80 3 3 1 126 391.64 145 15.08 33 126 0.00 145 15.08 1.00 33.00
gdb.7 12 22 8 40 80 4 3 1 134 5099.18 144 7.46 45 134 0.00 146 8.96 1.01 45.00
gdb.8 12 22 8 40 80 4 3 1 34 5168.17 129 279.41 53 34 0.02 139 308.82 1.08 53.02
gdb.9 12 22 7 44 88 3 3 2 41 135.30 266 548.78 53 41 0.01 296 621.95 1.11 53.01
gdb.10 12 22 8 40 80 4 3 2 134 4842.24 240 79.10 45 134 0.01 269 100.75 1.12 45.01
gdb.11 12 22 7 44 88 3 3 1 41 259.10 146 256.10 53 41 0.00 167 307.32 1.14 53.00
gdb.12 11 22 8 18 36 4 3 2 16 213.22 63 293.75 71 16 0.00 103 543.75 1.63 71.00
gdb.13 12 22 7 40 80 3 3 2 126 125.51 154 22.22 33 126 0.00 265 110.32 1.72 33.00
gdb.14 11 22 8 18 36 4 3 1 16 39.48 17 6.25 71 16 0.00 65 306.25 3.82 71.00
gdb.15 13 23 7 60 120 3 3 1 59 716.11 221 274.58 58 59 0.00 238 303.39 1.08 58.00
gdb.16 12 25 9 38 76 4 3 1 120 15905.67 121 0.83 62 120 0.00 149 24.17 1.23 62.00
gdb.17 12 25 9 38 76 4 3 3 120 824.66 352 193.33 62 120 0.00 541 350.83 1.54 62.00
gdb.18 12 25 9 38 76 4 3 2 120 4332.88 134 11.67 62 120 0.00 233 94.17 1.74 62.00
gdb.19 12 26 9 40 80 4 3 1 40 11492.90 141 252.50 64 40 0.00 231 477.50 1.64 64.00
gdb.20 13 26 7 44 88 3 3 1 141 5206.36 141 0.00 73 141 0.00 267 89.36 1.89 73.00
gdb.21 8 28 10 16 32 5 2 1 12 26.91 13 8.33 71 12 0.00 53 341.67 4.08 71.00
gdb.22 8 28 10 14 28 5 2 2 10 23.58 11 10.00 67 10 0.00 47 370.00 4.27 67.00
gdb.23 8 28 10 14 28 5 2 1 10 2.65 10 0.00 67 10 0.00 45 350.00 4.50 67.00
gdb.24 8 28 10 16 32 5 2 2 12 67.94 14 16.67 71 12 0.00 90 650.00 6.43 71.00
gdb.25 10 28 9 198 396 4 3 2 48 46.21 58 20.83 81 48 0.00 490 920.83 8.45 81.00
gdb.26 10 28 9 198 396 4 3 1 48 22.63 48 0.00 81 48 0.01 485 910.42 10.10 81.01
gdb.27 11 33 11 18 36 5 3 3 15 1829.71 60 300.00 83 15 0.01 114 660.00 1.90 83.01
gdb.28 11 33 11 18 36 5 3 1 15 601.29 15 0.00 83 15 0.00 63 320.00 4.20 83.00
gdb.29 11 33 11 18 36 5 3 2 15 167.81 15 0.00 83 15 0.00 65 333.33 4.33 83.00
gdb.30 9 36 13 16 32 6 2 3 13 35622.56 52 300.00 94 13 0.00 57 338.46 1.10 94.00
gdb.31 9 36 13 16 32 6 2 2 13 58.43 16 23.08 94 13 0.00 56 330.77 3.50 94.00
gdb.32 9 36 13 16 32 6 2 1 13 1406.40 13 0.00 94 13 0.00 54 315.38 4.15 94.00
gdb.33 11 44 14 18 36 7 3 5 11 1108.67 60 445.45 97 11 0.00 149 1254.55 2.48 97.00
gdb.34 11 44 14 18 36 7 3 3 11 8509.65 14 27.27 97 11 0.00 57 418.18 4.07 97.00
gdb.35 11 44 14 18 36 7 3 1 11 21451.41 13 18.18 97 11 0.00 57 418.18 4.38 97.00
gdb.36 11 44 14 18 36 7 3 2 11 22016.09 13 18.18 97 11 0.00 58 427.27 4.46 97.00
gdb.37 11 44 14 18 36 7 3 4 11 1777.33 15 36.36 97 11 0.00 103 836.36 6.87 97.00
The ratio is denoted by ρ (generally greater than one), and the proposed approach
is called ρ-competitive as the solution quality is at most ρ times the offline optimal
solution quality.
β
CA
ρ = (20)
β
OPT
f
where ρ is the competitive ratio for the proposed centralized auction approach. β
CA
is the maximum trip time of the proposed centralized auction approach with dynamic
vehicle failures, and β is the maximum trip time of the offline optimal solution
OPT
f
obtainedfromsolvingofflineMILPformulationusingtheGurobioptimizerwithknown
vehicle failure times.
A one-way ANOVA test was conducted to analyze the relationship between input
parameters and the performance of the centralized auction algorithm. The results
reveal that only the number of vehicle failures |F| (p-value = 0.0022) and the sum
of vehicle capacity and recharge time C +R (p-value = 2.41e-05) significantly affect
T
the maximum trip time of the centralized auction algorithm (β ). Notably, C and
CA
R are combined in this analysis because, for all failure scenarios, R = 2C, reflecting
T T
their interdependence. Other parameters, such as the number of nodes |N| (p-value
= 0.5337) and edges |E| (p-value = 0.4176), do not show significant influence on β .
CA
A similar trend was observed when analyzing the competitive ratio ρ. These findings
indicate that the centralized auction algorithm’s performance is primarily influenced
by vehicle failures and the combined effect of capacity and recharge time.
Figure 4 illustrates how the maximum trip time achieved by the centralized auction
method varies with vehicle capacity and recharge time (C + R ). The GDB failure
T
18Figure 4: Comparison of maximum trip time: Centralized Auction vs. Offline MILP
solved using Gurobi with known vehicle failure times. The failure scenarios are sorted
in ascending order based on C +R .
T
scenarios are sorted in ascending order based on C + R . This relationship can be
T
intuitively understood: as we decrease vehicle capacity, vehicles need to perform more
trips to traverse all required edges, increasing the maximum trip time due to more
frequent recharges. Conversely, as we increase vehicle capacity, fewer trips are needed,
potentially decreasing the maximum trip time. This trend aligns with the ANOVA
results, confirming that the combined effect of capacity and recharge time significantly
impacts performance. Although the optimal solutions (with perfect information) have
lower maximum trip times, the centralized auction method remains effective across
various scenarios, particularly with shorter recharge times and higher vehicle capaci-
ties.
From the figure and the data in Table 3, we observe that the percentage increase in
maximum trip time of the centralized auction algorithm %∆β does not consistently
CA
correlate with the number of vehicle failures alone. For example, in scenario gdb.5,
with three vehicle failures, the percentage increase in maximum trip time is 1300%,
whereas in scenario gdb.33, with one vehicle failure, the increase is only 1254.55%.
This suggests that other factors, such as the timing and location of the vehicle failures
within the routes, play significant roles in influencing performance degradation. Early
failures or failures of critical vehicles tend to have a more substantial impact on the
overall system performance.
To gain a more comprehensive understanding of the centralized auction method’s
performance across various scenarios, a histogram of the competitive ratio was gener-
ated, as shown in Figure 5. The histogram indicates that, in many cases, the central-
ized auction algorithm achieves solutions close to the offline optimal, with competitive
ratios clustering around lower values. Specifically, the average competitive ratio across
all GDB failure scenarios is 3.41, with a median of 3.50. The distribution of competi-
tive ratios is asymmetric, with 51.35% (19/37) of the scenarios having a ratio between
1and3.6and35.14%(13/37)between3.6and6.2. Only13.51%(5/37)ofthescenarios
19Figure 5: Histogram of Competitive Ratio for GDB failure scenarios
haveacompetitiveratioabove6.2, withthemaximumobservedratiobeing10.10. This
distribution suggests that while the centralized auction algorithm generally performs
well, there are outlier scenarios where its performance significantly deviates from the
optimal. These outliers likely reflect situations with multiple early vehicle failures or
limited vehicle availability, which pose greater challenges for the online algorithm. The
minimum, competitive ratio of 1.00 indicates that in some scenarios, the centralized
auction achieves the same performance as the offline optimal solution, demonstrating
its potential for high efficiency under favorable conditions.
The centralized auction algorithm consistently outperforms the Gurobi solver in
terms of execution times, especially as the size of the failure scenarios increases. In
one of the complex scenarios (gdb.33), the auction algorithm produces solution routes
in 97 seconds versus Gurobi’s 1108 seconds. This trend is even more pronounced for
gdb.30, where the auction algorithm takes 94 seconds compared to Gurobi’s 35622
seconds—a 378-fold speedup. The auction algorithm’s execution time ranges from 33
to 97 seconds (median 67 seconds, standard deviation 19.2 seconds), showing minimal
variation despite increasing complexity. Conversely, Gurobi’s execution time spans
0.9 to 35622 seconds (median 391 seconds, standard deviation 7817.1 seconds), high-
lighting its variability. These results underscore the centralized auction algorithm’s
efficiency and scalability, making it ideal for real-time decision-making in dynamic
vehicle routing scenarios.
The results presented in these figures collectively demonstrate the efficacy and ro-
bustness of the centralized auction approach. Although the offline MILP formulation
solved by the Gurobi Optimizer generally achieves lower maximum trip times, the
centralized auction method performs similarly in many scenarios. This is particu-
larly noteworthy given the online nature of the auction approach, which must make
decisions without prior knowledge of future vehicle failures. Analyzing vehicle failure
scenariosrevealsthatthecentralizedauctionmethodcangracefullyhandleunexpected
disruptions. Although the maximum trip time rises as the number of vehicle failures
increases, this degradation is influenced not only by the number of failures but also by
20Table 4: BCCM Failure Scenario Results Part - A
SAOffline CentralizedAuctionAlgorithmfor
FailureScenarioscreatedfrombccminstances
Results handlingdynamicvehiclefailure
Failure
ET ET
Scenario |N| |E| |Eu| C RT K |Nd| |F|
(sec)
βSA
(sec)
βCA %∆βCA TotalET(sec)
Name
bccm.1 24 34 5 24 48 2 4 1 34 83 0.00 215 159.04 34.00
bccm.2 24 34 6 24 48 3 4 1 23 79 0.00 103 30.38 23.00
bccm.3 24 34 7 24 48 3 4 1 33 23 0.00 88 282.61 33.00
bccm.4 24 35 8 8 16 4 4 1 27 8 0.00 32 300.00 27.00
bccm.5 24 35 8 8 16 4 4 2 27 8 0.00 74 825.00 27.00
bccm.6 24 35 8 8 16 4 4 3 27 8 0.02 97 1112.50 27.02
bccm.7 24 35 6 8 16 3 4 1 25 7 0.01 51 628.57 25.01
bccm.8 24 35 9 8 16 4 4 1 31 26 0.00 69 165.38 31.00
bccm.9 24 39 13 20 40 6 4 1 27 20 0.00 64 220.00 27.00
bccm.10 24 39 13 20 40 6 4 2 27 20 0.00 79 295.00 27.00
bccm.11 24 39 13 20 40 6 4 3 27 20 0.00 116 480.00 27.00
bccm.12 24 39 13 20 40 6 4 1 27 19 0.00 64 236.84 27.00
bccm.13 24 39 13 20 40 6 4 1 32 64 0.02 67 4.69 32.02
bccm.14 24 39 13 20 40 6 4 2 32 64 0.00 124 93.75 32.00
bccm.15 24 39 13 20 40 6 4 3 32 64 0.02 168 162.50 32.02
bccm.16 31 50 15 20 40 7 6 1 42 18 0.004 72 300.00 42.00
bccm.17 31 50 15 20 40 7 6 2 42 18 0 72 300.00 42.00
bccm.18 31 50 15 20 40 7 6 3 42 18 0.004 128 611.11 42.00
bccm.19 31 50 15 20 40 7 6 1 40 61 0 118 93.44 40.00
bccm.20 31 50 15 20 40 7 6 1 46 63 0 72 14.29 46.00
bccm.21 31 50 15 20 40 7 6 2 46 63 0 107 69.84 46.00
bccm.22 31 50 15 20 40 7 6 3 46 63 0 177 180.95 46.00
bccm.23 31 50 15 20 40 7 6 4 46 63 0 180 185.71 46.00
bccm.24 30 63 20 20 40 10 6 1 48 71 0 124 74.65 48.00
bccm.25 30 63 20 20 40 10 6 2 48 71 0.006 121 70.42 48.01
bccm.26 30 63 20 20 40 10 6 3 48 71 0.005 177 149.30 48.01
bccm.27 30 63 20 20 40 10 6 4 48 71 0.014 174 145.07 48.01
bccm.28 30 63 20 20 40 10 6 5 48 71 0.04 235 230.99 48.04
bccm.29 30 63 21 20 40 10 6 1 50 73 0.022 120 64.38 50.02
bccm.30 30 63 20 20 40 10 6 1 47 69 0.014 115 66.67 47.01
bccm.31 30 63 20 20 40 10 6 2 47 69 0.008 121 75.36 47.01
bccm.32 30 63 20 20 40 10 6 3 47 69 0.009 216 213.04 47.01
bccm.33 30 63 20 20 40 10 6 4 47 69 0.013 171 147.83 47.01
bccm.34 30 63 20 20 40 10 6 5 47 69 0.021 178 157.97 47.02
bccm.35 34 65 20 30 60 10 6 1 49 92 0.00 107 16.30 49.00
bccm.36 34 65 20 30 60 10 6 2 49 92 0.00 112 21.74 49.00
bccm.37 34 65 17 30 60 8 6 1 59 30 0.02 169 463.33 59.02
bccm.38 34 65 17 30 60 8 6 2 59 30 0.00 114 280.00 59.00
bccm.39 34 65 17 30 60 8 6 3 59 30 0.00 177 490.00 59.00
bccm.40 34 65 17 30 60 8 6 4 59 30 0.02 191 536.67 59.02
bccm.41 34 65 17 30 60 8 6 5 59 30 0.02 276 820.00 59.02
bccm.42 34 65 17 30 60 8 6 1 55 93 0.00 113 21.51 55.00
bccm.43 34 65 19 30 60 9 6 1 58 30 0.012 116 286.67 58.01
bccm.44 34 65 19 30 60 9 6 2 58 30 0 119 296.67 58.00
bccm.45 34 65 19 30 60 9 6 3 58 30 0.001 117 290.00 58.00
bccm.46 34 65 19 30 60 9 6 4 58 30 0.003 179 496.67 58.00
bccm.47 34 65 19 30 60 9 6 5 58 30 0.015 284 846.67 58.02
bccm.48 40 66 18 20 40 9 8 1 61 62 0 67 8.06 61.00
bccm.49 40 66 19 20 40 9 8 1 66 70 0 129 84.29 66.00
bccm.50 40 66 19 20 40 9 8 2 66 70 0 105 50.00 66.00
bccm.51 40 66 19 20 40 9 8 3 66 70 0.016 123 75.71 66.02
bccm.52 40 66 19 20 40 9 8 4 66 70 0.01 178 154.29 66.01
bccm.53 40 66 19 20 40 9 8 5 66 70 0.03 183 161.43 66.03
bccm.54 40 66 18 20 40 9 8 1 61 62 0 120 93.55 61.00
their timing and location within the network. This suggests that the auction-based
system maintains a reasonable level of performance even under challenging circum-
stances.
5.2.2 BCCM Failure Scenario Results
We also applied the centralized auction algorithm to a comprehensive set of 108 failure
scenarios derived from the BCCM instances from the literature. Due to their extensive
size, the scenarios are divided into two parts (see Tables 4 and 5), each containing 54
failure scenarios sorted in ascending fashion of the number of edges (|E|). However,
because the BCCM instances are larger than the GDB instances, the Gurobi solver
encountered memory limitations on the available hardware. This is due to the expo-
nential growth in memory requirements for exact solvers like Gurobi when handling
larger instances of the NP-hard MD-RPP-RRV problem with added multiple vehicle
failure constraints.
21Table 5: BCCM Failure Scenario Results Part - B
SAOffline CentralizedAuctionAlgorithmfor
FailureScenarioscreatedfrombccminstances
Results handlingdynamicvehiclefailure
Failure
ET ET
Scenario |N| |E| |Eu| C RT K |Nd| |F|
(sec)
βSA
(sec)
βCA %∆βCA TotalET(sec)
Name
bccm.55 40 66 18 20 40 9 8 2 61 62 0.002 121 95.16 61.00
bccm.56 40 66 18 20 40 9 8 3 61 62 0.003 121 95.16 61.00
bccm.57 40 66 18 20 40 9 8 4 61 62 0.016 154 148.39 61.02
bccm.58 40 66 18 20 40 9 8 5 61 62 0.022 181 191.94 61.02
bccm.59 41 69 22 28 56 11 8 1 73 96 0.00 159 65.63 73.00
bccm.60 41 69 22 28 56 11 8 2 73 96 0.00 166 72.92 73.00
bccm.61 41 69 22 28 56 11 8 3 73 96 0.02 229 138.54 73.02
bccm.62 41 69 22 28 56 11 8 4 73 96 0.03 248 158.33 73.03
bccm.63 41 69 22 28 56 11 8 5 73 96 0.02 235 144.79 73.02
bccm.64 41 69 23 28 56 11 8 1 72 93 0.02 171 83.87 72.02
bccm.65 41 69 23 28 56 11 8 2 72 93 0.01 168 80.65 72.01
bccm.66 41 69 22 28 56 11 8 1 76 90 0.02 155 72.22 76.02
bccm.67 41 69 22 28 56 11 8 2 76 90 0.01 107 18.89 76.01
bccm.68 41 69 22 28 56 11 8 3 76 90 0.02 160 77.78 76.02
bccm.69 41 69 22 28 56 11 8 4 76 90 0.03 184 104.44 76.03
bccm.70 41 69 22 28 56 11 8 5 76 90 0.03 225 150.00 76.03
bccm.71 41 69 23 28 56 11 8 1 88 95 0.00 95 0.00 88.00
bccm.72 41 69 23 28 56 11 8 2 88 95 0.02 172 81.05 88.02
bccm.73 50 92 29 14 28 14 10 1 103 49 0 52 6.12 103.00
bccm.74 50 92 29 14 28 14 10 2 103 49 0.016 74 51.02 103.02
bccm.75 50 92 29 14 28 14 10 3 103 49 0.011 84 71.43 103.01
bccm.76 50 92 29 14 28 14 10 4 103 49 0.033 149 204.08 103.03
bccm.77 50 92 29 14 28 14 10 5 103 49 0.026 89 81.63 103.03
bccm.78 50 92 27 14 28 13 10 1 106 52 0.015 87 67.31 106.02
bccm.79 50 92 30 14 28 15 10 1 118 49 0.012 79 61.22 118.01
bccm.80 50 92 30 14 28 15 10 2 118 49 0.016 89 81.63 118.02
bccm.81 50 92 30 14 28 15 10 3 118 49 0.032 118 140.82 118.03
bccm.82 50 92 30 14 28 15 10 4 118 49 0.032 125 155.10 118.03
bccm.83 50 92 30 14 28 15 10 5 118 49 0.063 122 148.98 118.06
bccm.84 50 92 28 14 28 14 10 1 96 49 0 84 71.43 96.00
bccm.85 50 92 28 14 28 14 10 2 96 49 0.016 89 81.63 96.02
bccm.86 50 92 28 14 28 14 10 3 96 49 0.026 115 134.69 96.03
bccm.87 50 92 28 14 28 14 10 4 96 49 0.029 89 81.63 96.03
bccm.88 50 92 28 14 28 14 10 5 96 49 0.043 120 144.90 96.04
bccm.89 50 97 31 20 40 15 10 1 89 70 0.016 128 82.86 89.02
bccm.90 50 97 31 20 40 15 10 2 89 70 0.031 128 82.86 89.03
bccm.91 50 97 31 20 40 15 10 3 89 70 0.047 119 70.00 89.05
bccm.92 50 97 31 20 40 15 10 4 89 70 0.031 113 61.43 89.03
bccm.93 50 97 31 20 40 15 10 5 89 70 0.047 133 90.00 89.05
bccm.94 50 97 32 20 40 16 10 1 82 66 0 66 0.00 82.00
bccm.95 50 97 32 20 40 16 10 2 82 66 0.014 121 83.33 82.01
bccm.96 50 97 32 20 40 16 10 3 82 66 0.032 79 19.70 82.03
bccm.97 50 97 32 20 40 16 10 4 82 66 0.025 137 107.58 82.03
bccm.98 50 97 32 20 40 16 10 5 82 66 0.035 79 19.70 82.04
bccm.99 50 97 31 20 40 15 10 1 84 72 0.006 118 63.89 84.01
bccm.100 50 97 31 20 40 15 10 2 84 72 0.016 80 11.11 84.02
bccm.101 50 97 31 20 40 15 10 3 84 72 0.032 126 75.00 84.03
bccm.102 50 97 31 20 40 15 10 4 84 72 0.03 132 83.33 84.03
bccm.103 50 97 31 20 40 15 10 5 84 72 0.032 170 136.11 84.03
bccm.104 50 97 32 20 40 16 10 1 90 69 0.006 69 0.00 90.01
bccm.105 50 97 32 20 40 16 10 2 90 69 0.032 125 81.16 90.03
bccm.106 50 97 32 20 40 16 10 3 90 69 0.014 129 86.96 90.01
bccm.107 50 97 32 20 40 16 10 4 90 69 0.031 117 69.57 90.03
bccm.108 50 97 32 20 40 16 10 5 90 69 0.037 128 85.51 90.04
The centralized auction algorithm demonstrated robust performance across all sce-
narios. For instance, in scenario bccm.54, with 40 nodes and 66 edges, the algorithm
handled a single vehicle failure (|F| = 1) with a total execution time of 61 seconds
and achieved a total cost β of 120, resulting in a 93.55% increase compared to the
CA
baseline cost. Even in scenarios with multiple vehicle failures, such as bccm.28 where
|F| = 5, the algorithm maintained acceptable execution times (48.04 seconds) and
adjusted routes effectively despite a higher percentage change in maximum trip time
%∆β (230.99%) due to increased number of vehicle failures from 1 to 5.
CA
The centralized auction algorithm exhibited robust performance across all scenar-
ios. For example, in the failure scenario bccm.54, comprising 40 nodes and 66 edges,
the algorithm successfully managed a single vehicle failure (|F| = 1) with an execu-
tion time of 61 seconds and a total cost β of 120, representing a 93.55% increase
CA
relative to the simulated annealing maximum trip time β . In more challenging sce-
SA
narios involving multiple vehicle failures, such as bccm.28 with |F| = 5, the algorithm
maintained acceptable execution time (48.04 seconds) and effectively adjusted routes,
22Figure 6: (a) Average execution time and %∆β plotted with an increasing number
CA
ofvehiclefailures(b)AHistogramshowingthenumberoffailurescenarioswithvehicle
failures ranging between 1 and 5.
despite an increase in the percent maximum trip time (∆β ) of 230.99%, attributable
CA
to the higher number of vehicle failures.
The algorithm’s scalability is evident as the network size increases. In scenarios
with up to 50 nodes and multiple vehicle failures, such as bccm.108, the algorithm pro-
cessed the failure of five vehicles (|F| = 5) with a total execution time of 90.04 seconds
and a percent maximum trip time increase of 85.51%. The average execution time and
average percent increase in maximum trip time of the centralized auction algorithm
across 108 BCCM failure scenarios were 66.8 seconds and 169.58%, respectively.
Figure 6(a) illustrates this scalability, showing a gradual increase in average execu-
tion time from 59.4 seconds for a single vehicle failure to 76.7 seconds for five failures.
Notably, the algorithm maintains reasonable performance even as the complexity of
scenarios increases. The solution quality, measured by the average percentage increase
in maximum trip time, shows variability across different failure scenarios. Although
there is a general upward trend, with the highest increase of 233.8% observed for three
vehicle failures, the algorithm demonstrates resilience by adapting to more complex
failure situations without excessive degradation in trip times. Interestingly, the data
suggests that an increase in the number of vehicle failures (|F|) does not directly cor-
respond to an increase in the percent maximum trip time of the centralized auction
algorithm (%∆β ). This non-linear relationship implies that vehicle failure times sig-
CA
nificantly contribute to the maximum trip time increase rather than just the number
of failures alone.
Figure 6(b) provides insight into the distribution of failure scenarios, with a de-
creasing frequency of occurrences as the number of vehicle failures increases from 1 to
5. The ability to process a range of failure scenarios, from simple to complex, while
maintaining reasonable execution times and maximum trip time increases underscores
the algorithm’s robustness and scalability.
Notably, the algorithm’s performance remained robust regardless of increases in
network size or the number of failures. This robustness is crucial for practical applica-
tions where networks are subject to frequent changes and potential failures. The cen-
tralized auction algorithm’s ability to provide timely and high-quality solutions makes
it a suitable choice for managing complex, dynamic networks in the multi-depot rural
23Table 6: Eglese Failure Scenario Results Part - A
SAOffline CentralizedAuctionAlgorithmfor
FailureScenarioscreatedfromegleseinstances
Results handlingdynamicvehiclefailure
Failure
ET ET
Scenario |N| |E| |Eu| C RT K |Nd| |F|
(sec)
βSA
(sec)
βCA %∆βCA TotalET(sec)
Name
eglese.1 77 98 32 184 368 16 15 1 156 579 0.02 656 13.30 156.02
eglese.2 77 98 32 184 368 16 15 2 156 579 0.03 664 14.68 156.03
eglese.3 77 98 32 184 368 16 15 3 156 579 0.06 1067 84.28 156.06
eglese.4 77 98 32 184 368 16 15 4 156 579 0.07 1121 93.61 156.07
eglese.5 77 98 32 184 368 16 15 1 150 168 0.02 674 301.19 150.02
eglese.6 77 98 32 184 368 16 15 2 150 168 0.04 1081 543.45 150.04
eglese.7 77 98 32 184 368 16 15 3 150 168 0.05 912 442.86 150.05
eglese.8 77 98 32 184 368 16 15 4 150 168 0.06 1054 527.38 150.06
eglese.9 77 98 32 184 368 16 15 5 150 168 0.08 1184 604.76 150.08
eglese.10 77 98 32 184 368 16 15 1 164 168 0.02 628 273.81 164.02
eglese.11 77 98 32 184 368 16 15 1 165 580 0.02 580 0.00 165.02
eglese.12 77 98 32 184 368 16 15 2 165 580 0.04 1114 92.07 165.04
eglese.13 77 98 32 184 368 16 15 3 165 580 0.06 1369 136.03 165.06
eglese.14 77 98 32 184 368 16 15 4 165 580 0.06 1098 89.31 165.06
eglese.15 77 98 32 184 368 16 15 5 165 580 0.09 1190 105.17 165.09
eglese.16 77 98 32 184 368 16 15 1 158 569 0.02 691 21.44 158.02
eglese.17 77 98 32 184 368 16 15 2 158 569 0.04 1128 98.24 158.04
eglese.18 77 98 32 184 368 16 15 3 158 569 0.05 1140 100.35 158.05
eglese.19 77 98 32 184 368 16 15 4 158 569 0.07 1521 167.31 158.07
eglese.20 77 98 32 184 368 16 15 5 158 569 0.08 1265 122.32 158.08
eglese.21 77 98 32 184 368 16 15 1 171 178 0.02 654 267.42 171.02
eglese.22 77 98 32 184 368 16 15 2 171 178 0.03 684 284.27 171.03
eglese.23 77 98 32 184 368 16 15 3 171 178 0.05 687 285.96 171.05
eglese.24 77 98 32 184 368 16 15 4 171 178 0.06 1108 522.47 171.06
eglese.25 77 98 32 184 368 16 15 5 171 178 0.08 1117 527.53 171.08
eglese.26 77 98 32 184 368 16 15 1 142 149 0.02 1021 585.23 142.02
eglese.27 77 98 32 184 368 16 15 2 142 149 0.03 646 333.56 142.03
eglese.28 77 98 32 184 368 16 15 3 142 149 0.05 1062 612.75 142.05
eglese.29 77 98 32 184 368 16 15 1 160 564 0.02 607 7.62 160.02
eglese.30 77 98 32 184 368 16 15 2 160 564 0.03 729 29.26 160.03
eglese.31 77 98 32 184 368 16 15 3 160 564 0.05 1051 86.35 160.05
eglese.32 77 98 32 184 368 16 15 4 160 564 0.07 1279 126.77 160.07
eglese.33 77 98 32 184 368 16 15 1 159 559 0.02 695 24.33 159.02
eglese.34 77 98 32 184 368 16 15 2 159 559 0.04 686 22.72 159.04
eglese.35 77 98 32 184 368 16 15 3 159 559 0.06 1477 164.22 159.06
eglese.36 77 98 32 184 368 16 15 4 159 559 0.07 1166 108.59 159.07
eglese.37 77 98 32 184 368 16 15 5 159 559 0.08 1471 163.15 159.08
eglese.38 77 98 32 184 368 16 15 1 159 568 0.02 985 73.42 159.02
eglese.39 77 98 32 184 368 16 15 2 159 568 0.04 1040 83.10 159.04
eglese.40 77 98 32 184 368 16 15 3 159 568 0.05 1114 96.13 159.05
eglese.41 77 98 32 184 368 16 15 4 159 568 0.06 985 73.42 159.06
eglese.42 77 98 32 184 368 16 15 5 159 568 0.10 1736 205.63 159.10
eglese.43 77 98 32 184 368 16 15 1 158 181 0.02 651 259.67 158.02
eglese.44 77 98 32 184 368 16 15 2 158 181 0.03 724 300.00 158.03
eglese.45 77 98 32 184 368 16 15 3 158 181 0.05 1249 590.06 158.05
eglese.46 77 98 32 184 368 16 15 4 158 181 0.06 724 300.00 158.06
eglese.47 77 98 32 184 368 16 15 5 158 181 0.08 1250 590.61 158.08
eglese.48 77 98 32 184 368 16 15 1 164 575 0.03 1083 88.35 164.03
eglese.49 77 98 32 184 368 16 15 2 164 575 0.05 1475 156.52 164.05
eglese.50 77 98 32 184 368 16 15 3 164 575 0.06 1438 150.09 164.06
eglese.51 77 98 32 184 368 16 15 4 164 575 0.07 1499 160.70 164.07
eglese.52 77 98 32 184 368 16 15 5 164 575 0.09 2004 248.52 164.09
eglese.53 140 190 63 206 412 31 28 1 484 642 0.08 798 24.30 484.08
eglese.54 140 190 63 206 412 31 28 2 484 642 0.15 738 14.95 484.15
eglese.55 140 190 63 206 412 31 28 3 484 642 0.22 754 17.45 484.22
eglese.56 140 190 63 206 412 31 28 4 484 642 0.32 1200 86.92 484.32
postman problem with vehicle failures.
In conclusion, the centralized auction algorithm appears to be an effective and
scalable approach for handling dynamic vehicle failures in large-scale scenarios.
5.2.3 EGLESE Failure Scenario Results
Finally, we applied the centralized auction algorithm to 112 failure scenarios derived
from the EGLESE instances, divided into two parts due to their larger size (see Ta-
bles 6 and 7). These instances are larger than the BCCM instances and include up
to 140 nodes and 190 edges; hence, Gurobi could not find the optimal results due
to hardware memory constraints. Using larger instances provides more insights into
how the algorithm’s performance and computational effort change with an increasing
number of vehicle failures.
The centralized auction algorithm’s performance across the EGLESE instances is
characterized by a consistent increase in execution time and adjustment to maximum
24Table 7: Eglese Failure Scenario Results Part - B
SAOffline CentralizedAuctionAlgorithmfor
FailureScenarioscreatedfromegleseinstances
Results handlingdynamicvehiclefailure
Failure
ET ET
Scenario |N| |E| |Eu| C RT K |Nd| |F|
(sec)
βSA
(sec)
βCA %∆βCA TotalET(sec)
Name
eglese.57 140 190 63 206 412 31 28 5 484 642 0.37 746 16.20 484.37
eglese.58 140 190 63 206 412 31 28 1 467 170 0.08 675 297.06 467.08
eglese.59 140 190 63 206 412 31 28 2 467 170 0.15 687 304.12 467.15
eglese.60 140 190 63 206 412 31 28 3 467 170 0.23 657 286.47 467.23
eglese.61 140 190 63 206 412 31 28 4 467 170 0.30 700 311.76 467.30
eglese.62 140 190 63 206 412 31 28 5 467 170 0.37 1180 594.12 467.37
eglese.63 140 190 63 206 412 31 28 1 456 171 0.08 646 277.78 456.08
eglese.64 140 190 63 206 412 31 28 2 456 171 0.15 675 294.74 456.15
eglese.65 140 190 63 206 412 31 28 3 456 171 0.23 721 321.64 456.23
eglese.66 140 190 63 206 412 31 28 4 456 171 0.30 1136 564.33 456.30
eglese.67 140 190 63 206 412 31 28 5 456 171 0.38 1193 597.66 456.38
eglese.68 140 190 63 206 412 31 28 1 483 200 0.09 1158 479.00 483.09
eglese.69 140 190 63 206 412 31 28 2 483 200 0.16 1220 510.00 483.16
eglese.70 140 190 63 206 412 31 28 3 483 200 0.23 1256 528.00 483.23
eglese.71 140 190 63 206 412 31 28 4 483 200 0.32 1230 515.00 483.32
eglese.72 140 190 63 206 412 31 28 5 483 200 0.40 1136 468.00 483.40
eglese.73 140 190 63 206 412 31 28 1 461 189 0.09 636 236.51 461.09
eglese.74 140 190 63 206 412 31 28 2 461 189 0.17 658 248.15 461.17
eglese.75 140 190 63 206 412 31 28 3 461 189 0.24 1213 541.80 461.24
eglese.76 140 190 63 206 412 31 28 4 461 189 0.33 772 308.47 461.33
eglese.77 140 190 63 206 412 31 28 5 461 189 0.38 720 280.95 461.38
eglese.78 140 190 63 206 412 31 28 1 496 654 0.09 699 6.88 496.09
eglese.79 140 190 63 206 412 31 28 2 496 654 0.17 1046 59.94 496.17
eglese.80 140 190 63 206 412 31 28 3 496 654 0.18 1626 148.62 496.18
eglese.81 140 190 63 206 412 31 28 4 496 654 0.32 1254 91.74 496.32
eglese.82 140 190 63 206 412 31 28 5 496 654 0.41 1257 92.20 496.41
eglese.83 140 190 63 206 412 31 28 1 464 190 0.08 619 225.79 464.08
eglese.84 140 190 63 206 412 31 28 2 464 190 0.16 788 314.74 464.16
eglese.85 140 190 63 206 412 31 28 3 464 190 0.26 1222 543.16 464.26
eglese.86 140 190 63 206 412 31 28 4 464 190 0.32 1189 525.79 464.32
eglese.87 140 190 63 206 412 31 28 5 464 190 0.39 762 301.05 464.39
eglese.88 140 190 63 206 412 31 28 1 458 172 0.08 685 298.26 458.08
eglese.89 140 190 63 206 412 31 28 2 458 172 0.16 713 314.53 458.16
eglese.90 140 190 63 206 412 31 28 3 458 172 0.23 685 298.26 458.23
eglese.91 140 190 63 206 412 31 28 4 458 172 0.31 734 326.74 458.31
eglese.92 140 190 63 206 412 31 28 5 458 172 0.31 685 298.26 458.31
eglese.93 140 190 63 206 412 31 28 1 461 202 0.09 806 299.01 461.09
eglese.94 140 190 63 206 412 31 28 2 461 202 0.16 715 253.96 461.16
eglese.95 140 190 63 206 412 31 28 3 461 202 0.25 788 290.10 461.25
eglese.96 140 190 63 206 412 31 28 4 461 202 0.32 1173 480.69 461.32
eglese.97 140 190 63 206 412 31 28 5 461 202 0.39 1168 478.22 461.39
eglese.98 140 190 63 206 412 31 28 1 489 621 0.09 1094 76.17 489.09
eglese.99 140 190 63 206 412 31 28 2 489 621 0.18 1144 84.22 489.18
eglese.100 140 190 63 206 412 31 28 3 489 621 0.23 724 16.59 489.23
eglese.101 140 190 63 206 412 31 28 4 489 621 0.32 1169 88.24 489.32
eglese.102 140 190 63 206 412 31 28 5 489 621 0.39 826 33.01 489.39
eglese.103 140 190 63 206 412 31 28 1 498 192 0.08 702 265.63 498.08
eglese.104 140 190 63 206 412 31 28 2 498 192 0.17 1136 491.67 498.17
eglese.105 140 190 63 206 412 31 28 3 498 192 0.23 678 253.13 498.23
eglese.106 140 190 63 206 412 31 28 4 498 192 0.33 1248 550.00 498.33
eglese.107 140 190 63 206 412 31 28 5 498 192 0.37 775 303.65 498.37
eglese.108 140 190 63 206 412 31 28 1 489 196 0.08 664 238.78 489.08
eglese.109 140 190 63 206 412 31 28 2 489 196 0.16 680 246.94 489.16
eglese.110 140 190 63 206 412 31 28 3 489 196 0.25 716 265.31 489.25
eglese.111 140 190 63 206 412 31 28 4 489 196 0.32 1320 573.47 489.32
eglese.112 140 190 63 206 412 31 28 5 489 196 0.39 1281 553.57 489.39
triptimeasthenumberoffailuresincreases. Forexample, inscenarioeglese.56, with
140 nodes and 190 edges, the algorithm handled four vehicle failures (|F| = 4) within
a total execution time of 484.32 seconds, resulting in a maximum trip time β of 1200
CA
and a percentage increase of 86.92% over the baseline cost. In scenarios with a higher
number of failures, such as eglese.62 where |F| = 5, the execution time increased to
467.37seconds,withacorrespondingβ of1180andapercentageincreaseof594.12%.
CA
These results demonstrate the algorithm’s ability to handle complex failure conditions,
maintainingfeasiblesolutiontimeseveninscenarioswithmultiplesimultaneousvehicle
failures.
The average execution time for the EGLESE scenarios indicates a linear relation-
ship between the number of failures and the computation time required by the auction
algorithm. This linearity is further reflected in Figure 7(a), where the execution time
increasesfrom317.2secondsforasinglevehiclefailureto349.8secondsforfivefailures.
Similarly, the percentage increase in maximum trip time (%∆β ) rises from 193.4%
CA
25for a single failure to 329.2% for five failures, suggesting a proportional relationship
between the number of vehicle failures and the complexity of the route adjustments.
This differs from the BCCM scenarios, where the relationship between failures and
performance metrics was less predictable.
Figure 7(b) presents the distribution of failure scenarios, showing a relatively even
spread of scenarios with 1 to 5 vehicle failures. This balanced distribution ensures
a comprehensive evaluation of the algorithm’s performance under varying levels of
disruption, offering insights into its adaptability and robustness across different failure
conditions. The consistency in performance metrics and the balanced distribution of
failure scenarios highlight the algorithm’s effectiveness in managing a wide range of
failure conditions, providing reliable solutions even as the complexity of the problem
increases.
Figure 7: (a) Average execution time and %∆β plotted with an increasing number
CA
ofvehiclefailures(b)AHistogramshowingthenumberoffailurescenarioswithvehicle
failures ranging between 1 and 5.
Overall, the results from the EGLESE instances more insights about the scalabil-
ity of the centralized auction algorithm. The linear trend in both execution time and
percentage increase in trip time as the number of failures increases indicates the algo-
rithm’s capability to maintain performance even with escalating failure complexities.
This adaptability is particularly important for real-world applications where vehicle
failures can occur unpredictably, requiring dynamic reallocation of resources to main-
tain service continuity. The EGLESE scenarios, with their larger network sizes and
detailed failure distributions, provide valuable evidence of the algorithm’s robustness
and efficiency in handling complex failure scenarios, making it a suitable approach for
large-scale applications in dynamic routing problems.
5.3 Sensitivity Analysis
The sensitivity analysis presented in Table 8 investigates the impact of introducing a
parameter called “wait time” into the centralized auction algorithm. The wait time
(t ) represents a delay period after a vehicle failure occurs, during which the algo-
w
rithm waits to see if additional failures occur. The rationale for this approach is that,
26Table 8: Sensitivity Analysis of Centralized Auction
CentralizedAuctionAlgorithmforhandlingdynamicvehiclefailuretestedon257failurescenarioswithdifferentwaittimes
Instance tw=0tu tw=2tu tw=4tu tw=6tu tw=8tu tw=10tu Intheend
Name Average Average Average Average Average Average Average
Average Average Average Average Average Average Average
(#Failure ET ET ET ET ET ET ET
Scenarios)
%∆βCA
(sec)
%∆βCA
(sec)
%∆βCA
(sec)
%∆βCA
(sec)
%∆βCA
(sec)
%∆βCA
(sec)
%∆βCA
(sec)
GDB(37) 417.87 68.81 423.01 68.81 427.36 68.81 430.71 68.81 438.62 68.81 465.43 68.81 445.26 68.82
BCCM(108) 169.58 66.87 174.00 66.87 177.65 66.87 176.64 66.88 183.56 66.88 185.85 66.87 192.71 66.87
EGLESE(112) 260.48 328.76 260.93 328.75 261.17 328.75 261.42 328.75 261.71 328.76 261.97 328.75 281.84 328.67
by waiting and allowing more vehicle failures to occur within this time window, the
algorithm can auction all trips associated with these failures simultaneously, which
should reduce the total number of auction cycles and might yield better solutions. We
conducted this sensitivity analysis to determine whether such a wait time influences
the algorithm’s performance in terms of execution time (ET) and percentage increase
in maximum trip time after dealing with vehicle failures (%∆β ).
CA
The table presents the average execution time and the average percentage increase
in maximum trip time across different wait times, ranging from t = 0 to t = 10 time
w w
units(tu), aswellasascenariolabeled“Intheend,” wherethealgorithmwaitsuntilall
failures have occurred before proceeding with the auction. The analysis is performed
for 257 failure scenarios generated from three sets of instances, GDB, BCCM, and
EGLESE, for different wait times.
The results indicate that for the GDB instance, the average percentage increase
in maximum trip time gradually rises from 417.87% at t = 0 to 465.43% at t = 10,
while the execution time remains constant at approximately 68.81 seconds. In the ”In
the end” scenario, where the algorithm waits for all failures to occur, the percentage
increase in maximum trip time slightly decreases to 445.26%, while the execution time
remains virtually unchanged. This suggests that while waiting for all failures can
slightly reduce the trip time increase by consolidating trips, the computational effort
remains consistent, and the reduction in trip time increase is minimal.
For the BCCM instance, a similar trend is observed. The percentage increase in
maximum trip time rises from 169.58% at t = 0 to 185.85% at t = 10, with execution
timestablearound66.87seconds. Inthe”Intheend”scenario, thepercentageincrease
in maximum trip time reaches 192.71%, slightly higher than the wait times. This
indicates that waiting until all failures have occurred can increase the maximum trip
time, likely due to the need to accommodate more simultaneous failed trips. However,
the execution time remains stable, suggesting that consolidating auctions does not
increase the computational cost significantly.
The EGLESE instance, representing a larger and more complex network, exhibits
stable behavior with minimal variations in both the percentage increase in maximum
trip time and execution time across different wait times. The increase in maximum
trip time remains relatively constant, ranging from 260.48% at t = 0 to 261.97% at
t = 10, while the execution time remains steady around 328.75 seconds. In the ”In the
end” scenario, the percentage increase in maximum trip time rises to 281.84%, slightly
higher than with intermediate wait times. This suggests that in larger networks,
waiting until all failures have occurred can result in a slight increase in the overall trip
time, astheconsolidatedauctionmusthandlealargersetoffailedtripssimultaneously.
Nonetheless, theimpactonexecutiontimeremainsminimalduetothelargernetwork’s
inherent complexity.
Overall, the sensitivity analysis reveals that while increasing the wait time slightly
affects the maximum trip time in smaller instances like GDB and BCCM, the effect is
27lesspronouncedinlargernetworkslikeEGLESE.Theexecutiontimeremainsrelatively
stable across all wait times, indicating that the computational cost of waiting for
additional failures is minimal. However, the ”In the end” scenario shows that waiting
for all failures can lead to a slight increase in maximum trip time, as the algorithm
must handle more failed trips at once. This suggests that while consolidating auctions
may simplify the process, it does not necessarily lead to better performance in terms of
maximum trip time, particularly in larger networks where failure consolidation leads
to increased complexity.
5.4 Theoretical Competitive Ratio
This section derives an upper bound for the worst-case theoretical competitive ratio of
the proposed auction algorithm. The derivation is based on the following assumptions,
in addition to those in Section 3.1:
1. The depots form a fully connected undirected graph where the time to traverse
between any two depot nodes in N is within the battery capacity C.
d
2. All required edges can be traversed by the vehicles despite the vehicle failures.
Since vehicle failures can only increase the mission time or leave it unchanged, we
have:
β ≤ β . (21)
OPT OPT
f
In the worst-case scenario, K − 1 vehicles fail (as per Assumption 4 in Sec-
tion 3.1). Solving the MD-RPP-RRV instance without vehicle failures using the sim-
ulated annealing algorithm [5] provides the routes for all vehicles, denoted as P ,
K
and their arrival times at the final depots, denoted as y . By analyzing the set
k
y = {y ,y ,...,y }, we identify the most utilized vehicle, which is the vehicle that
K 1 2 K
takes the longest time to complete its assigned route:
k = arg max y . (22)
mu k
k=1,...,K
Let N be the number of trips made by vehicle k : N = len(P ). In the
t mu t kmu
worst case, we assume that all K vehicles have N trips in their routes. Therefore,
t
when K −1 vehicles fail, the total number of trips that need to be reallocated by the
auction algorithm is:
N = N (K −1). (23)
fail t
The proposed auction algorithm reallocates each failed trip individually to the
active vehicles. Since the depots form a fully connected graph, any active vehicle can
reach the starting depot of a failed trip within its battery capacity C. In the worst-
case scenario, an active vehicle performing a failed trip incurs the following additional
time:
1. Travel to the starting depot of the failed trip: Time up to C, plus a
recharge time R before starting the failed trip.
T
282. Perform the failed trip: Time up to C, plus a recharge time R upon com-
T
pletion.
3. Return to the original route: Time up to C, plus a recharge time R before
T
resuming the original route.
Thus, the total additional time for each failed trip is:
T+ = 3(C +R ). (24)
T
Assumingtheextratripsareassignedevenlyamongtheactivevehicles, intheworst
case, one vehicle may end up with the maximum additional workload. To compute
the upper bound of the competitive ratio, we consider the scenario where the most
utilized active vehicle (which already has mission time β ) is assigned all the failed
OPT
trips. The maximum mission time of the auction algorithm becomes:
β = β +N (K −1)T+.
CA OPT t
Since β ≤ β , it follows that:
OPT OPT
f
β ≤ β +N (K −1)T+.
CA OPT t
f
Therefore, the competitive ratio is upper-bounded by:
β
CA
ρ =
β
OPT
f
β β +N (K −1)T+
CA ≤ OPT f t
β β
OPT OPT
f f
N (K −1)3(C +R )
t T
ρ ≤ 1+ .
β
OPT
f
This expression indicates that the competitive ratio increases linearly with the
number of trips auctioned per failed vehicle (N ), the number of failed vehicles (K−1),
t
and the combined travel and recharge time per trip (C +R ), relative to the optimal
T
mission time β when failures are known beforehand.
OPT
f
Figure 8 shows the theoretical upper bound and experimental competitive ratios of
the centralized auction algorithm for GDB failure scenarios, sorted in ascending order
based on the theoretical competitive ratio. As illustrated, the theoretical competi-
tive ratio consistently bounds the experimental competitive ratio across all scenarios,
highlighting the robustness of the theoretical model in providing an upper limit on
performance degradation due to vehicle failures. The gap between the experimental
and theoretical competitive ratios can be attributed to the relaxed assumption in the
experimental setting, wherein in each failure scenario, the graph connecting the depot
nodes may not be complete (as assumed in the derivation of the theoretical competi-
tive ratio). Moreover, the derivation assumes the worst case for each failure scenario
where K − 1 vehicles fail, and each failed vehicle results in the auctioning of all of
its trips in its route. This may not always be the case experimentally, reducing the
experimental competitive ratio compared to the theoretical upper bound.
29Figure 8: Experimental and theoretical competitive ratio for GDB failure scenarios
5.5 Computational Complexity Analysis of Centralized Auc-
tion Algorithm
The computational complexity of the centralized auction algorithm, as outlined in the
AUCTION procedure (Algorithm 3), is driven by the efficient redistribution of failed
trips due to vehicle failures by inserting them into active vehicles’ routes without the
need for extensive rerouting. To facilitate this, a dictionary D (Line 4 in Algorithm
d
1) is precomputed using DEPOTTODEPOTROUTES, where each key represents a pair of
depots (d ,d ) and the corresponding value contains the route time t(d ,d ) (including
1 2 1 2
recharge time) and the feasible route r (d ,d ) connecting depots d and d . This
t 1 2 1 2
precomputation, although it increases memory usage, allows the auction algorithm
to effectively insert the failed trip into the best possible active vehicle routes while
maintaining operational constraints.
Each route stored in D satisfies vehicle capacity and battery constraints, and the
d
dictionary utilizes the following properties for efficiency:
• Symmetry in travel time: t(d ,d ) = t(d ,d ).
1 2 2 1
• Self-route time is zero: t(d ,d ) = 0.
1 1
• Routes are reversible: r (d ,d ) = reverse(r (d ,d )).
t 2 1 t 1 2
Given |N | depots, the dictionary initially contains |N |2 entries. However, using
d d
these properties, redundant calculations are avoided, reducing the number of unique
entries to |N d|×(|N d|−1).
2
5.5.1 Precomputation Process
Populating the dictionary D involves two main cases:
d
• Single-Trip Depot Pairs: For depot pairs that can be reached in a single trip,
Dijkstra’s algorithm computes the shortest paths. The time complexity for each
30call is O((|E| + |V|)log|V|), where |E| is the number of edges and |V| is the
number of vertices. With O(|N |2) possible calls, the total complexity for this
d
step is:
O(|N |2 ×(|E|+|V|)×log|V|).
d
• Multiple-Trip Depot Pairs: For pairs requiring multiple trips, the Floyd-
Warshall algorithm calculates the shortest paths, with a complexity of O(|N |3).
d
Thus, the overall time complexity for precomputing the dictionary D is:
d
O(|N |2 ×(|E|+|V|)×log|V|+|N |3).
d d
The space complexity is O(|N |2), as route data for each depot pair is stored. This
d
precomputation ensures that during the auction process (Algorithm 3), route retrieval
is efficient, contributing to the overall computational efficiency of the centralized auc-
tion algorithm.
5.5.2 Auction Execution and Complexity
The auction process involves reallocating failed trips to active vehicles, requiring bid
calculations and selecting optimal insertion points (CALCBID in Algorithm 5). The
time complexity of the bid calculation per vehicle depends on the number of possible
insertion points m in the vehicle’s route. Since the failed trips can only be inserted
at depot nodes, the upper bound on the number of insertion points is the number of
depots |N |.
d
Moreover, only depots within the search radius, as determined by the SEARCH
procedure, are considered. In the worst-case scenario, all depots are within the search
radius, thus m = |N |. Additionally, all K − 1 vehicles may need to be considered,
d
leading to K = K −1.
r
For each insertion point, the algorithm evaluates the cost of inserting the failed
trip τ . Since the insertion involves accessing precomputed routes from the dictionary
f
D and inserting a cycle that includes τ , the time complexity T is O(1).
d f insert
Therefore, the per-vehicle complexity simplifies to:
O(m×T ) = O(|N |×1) = O(|N |).
insert d d
Considering K = K active vehicles, the total time complexity for bid calculation
r
becomes:
O((K −1)×|N |) = O(K ×|N |).
d d
TheSEARCHprocedure(Algorithm4)identifiesactivevehicleswithinasearchradius
r of the failed trip’s starting and ending depots. The procedure iterates over all active
vehicles K, checking the proximity of their upcoming depots to the failed trip’s depots.
The time complexity of the search process is O(K) per radius increment. The
search radius starts from an initial value r and is incremented by ∆r until suitable
i
vehicles are found or the search radius reaches the maximum possible value.
Since the search radius can only be extended until it covers the entire graph, the
maximum search radius is bounded by the diameter D of the graph. Therefore, the
(cid:6) (cid:7)
maximum number of radius increments is D−ri . Consequently, the worst-case time
∆r
complexity of the search process is:
(cid:18) (cid:24) (cid:25)(cid:19)
D−r
i
O K × .
∆r
31In practice, D is a property of the graph and is fixed, and ∆r is chosen according to
operational considerations. Therefore, the number of increments is bounded, and the
search process remains efficient.
In the worst-case scenario, where m = |N | and K = K, the total time complexity
d r
for the auction process per failed trip is:
(cid:18) (cid:24) (cid:25) (cid:19)
D−r
i
O K × +K ×|N |
d
∆r
(cid:18) (cid:18)(cid:24) (cid:25) (cid:19)(cid:19)
D−r
i
:=O K × +|N |
d
∆r
By recognizing that m is bounded by |N | and K = K, the algorithm effectively
d r
limitsthecomputationaleffortrequiredforbidcalculationandsearchoperations. This
constraint helps maintain computational efficiency, especially in large-scale instances
where |N | and K are manageable relative to the overall problem size.
d
5.5.3 Overall Execution and Efficiency
The overall execution time of the centralized auction algorithm is influenced by both
the precomputation of depot-to-depot routes and the dynamic auction operations.
While the pre-computation step may be computationally intensive, it is performed
offline before real-time operations commence.
During real-time execution, the auction process efficiently reassigns failed trips
using the precomputed routes, with search and bid calculations optimized for perfor-
mance. Empirical observations indicate that the real-time execution of the centralized
auction process remains efficient, completing operations within acceptable time frames
even in complex scenarios.
Overall, the centralized auction algorithm balances precomputation efforts with
dynamic adaptability, enabling effective reallocation of failed trips and ensuring ro-
bustness in large-scale instances of the MD-RPP-RRV.
6 Conclusion
This paper contributes by presenting a centralized auction algorithm for the MD-
RPP-RRV, efficiently rescheduling trips after dynamic vehicle failures by reassigning
them to active vehicles without requiring complete rerouting. This approach provides
timelysolutionseveninlargeinstanceslikeBCCMandEGLESE.Experimentalresults
acrossvariousfailurescenariosshowthatouralgorithmproducescomparableresultsto
offline optimal solutions in terms of solution quality while significantly outperforming
them in execution times. The theoretical analysis also provides an upper bound for
the competitive ratio and computational complexity, offering a formal performance
guarantee in dynamic failure scenarios. Sensitivity analysis demonstrates that brief
waiting periods can balance solution quality and computational speed, while longer
waits offer diminishing returns.
Future work can consider incorporating vehicle failures with precursors to allow
preemptive mitigations and predictive failure modeling to better manage failures over
time. Additionally, addressinguncertaintiesinrequirededgeinformationandadapting
toevolvingrequirededgeswouldenhancethealgorithm’sapplicabilityinmoredynamic
and complex scenarios.
32Acknowledgments
This work was partly supported by a gift from Dr. Alex Mehr (Ph.D. ’03) through
the Design Decision Support Laboratory Research and Education Fund and partly by
an Army Cooperative Agreement W911NF2120076. Finally, the authors acknowledge
the University of Maryland High-Performance Computing resources (Zaratan) made
available for conducting the research reported in this article.
References
[1] del Cerro, J., Cruz Ulloa, C., Barrientos, A., & de Leo´n Rivas, J. (2021). Un-
manned aerial vehicles in agriculture: A survey. Agronomy, 11(2), 203.
[2] Yao, H., Qin, R., & Chen, X. (2019). Unmanned aerial vehicle for remote sensing
applications—A review. Remote Sensing, 11(12), 1443.
[3] Petritoli, E., Leccese, F., & Ciani, L. (2018). Reliability and maintenance analysis
of unmanned aerial vehicles. Sensors, 18(9), 3171.
[4] Zahariadis, T., Voulkidis, A., Karkazis, P., & Trakadas, P. (2017, August). Pre-
ventive maintenance of critical infrastructures using 5G networks & drones. In
2017 14th IEEE International Conference on Advanced Video and Signal Based
Surveillance(AVSS) (pp. 1-4). IEEE.
[5] Sathyamurthy, E., Herrmann, J. W., & Azarm, S. (2024). Hybrid metaheuristic
approaches for the multi-depot rural postman problem with rechargeable and
reusable vehicles. IEEE Access.
[6] Lenstra, J. K., & Kan, A. R. (1976). On general routing problems. Networks,
6(3), 273-280.
[7] Ferna´ndez, E., & Rodr´ıguez-Pereira, J. (2017). Multi-depot rural postman prob-
lems. Top, 25(2), 340-372.
[8] Ferna´ndez, E., Laporte, G., & Rodr´ıguez-Pereira, J. (2018). A branch-and-cut
algorithm for the multidepot rural postman problem. Transportation Science,
52(2), 353-369.
[9] Chen, H., Cheng, T., & Shawe-Taylor, J. (2018). A balanced route design for
min-max multiple-depot rural postman problem (mmmdrpp): a police patrolling
case. International Journal of Geographical Information Science, 32(1), 169-190.
[10] Golden,B.L.,&Wong,R.T.(1981).Capacitatedarcroutingproblems.Networks,
11(3), 305-315.
[11] Wøhlk, S. (2008). A decade of capacitated arc routing. The vehicle routing prob-
lem: latest advances and new challenges, 29-48.
[12] Lacomme, P., Prins, C., & Ramdane-Ch´erif, W. (2001, April). A genetic algo-
rithm for the capacitated arc routing problem and its extensions. In Workshops
on applications of evolutionary computation (pp. 473-483). Berlin, Heidelberg:
Springer Berlin Heidelberg.
33[13] Toth, P., & Vigo, D. (Eds.). (2002). The vehicle routing problem. Society for
Industrial and Applied Mathematics.
[14] Braekers, K., Ramaekers, K., & Van Nieuwenhuyse, I. (2016). The vehicle rout-
ing problem: State of the art classification and review. Computers & industrial
engineering, 99, 300-313.
[15] Padungwech, W., Thompson, J., &Lewis, R.(2020).Effectsofupdatefrequencies
in a dynamic capacitated arc routing problem. Networks, 76(4), 522-538.
[16] Tagmouti, M., Gendreau, M., & Potvin, J. Y. (2011). A dynamic capacitated arc
routing problem with time-dependent service costs. Transportation Research Part
C: Emerging Technologies, 19(1), 20-28.
´
[17] Nagy, Z., Werner-Stark, A., & Dulai, T. (2022). An artificial bee colony algorithm
for static and dynamic capacitated arc routing problems. Mathematics, 10(13),
2205.
[18] Liu, M., Singh, H. K., & Ray, T. (2014, July). A memetic algorithm with a new
split scheme for solving dynamic capacitated arc routing problems. In 2014 IEEE
Congress on Evolutionary Computation (CEC) (pp. 595-602). IEEE.
[19] Li, J. Q., Mirchandani, P. B., & Borenstein, D. (2007). The vehicle rescheduling
problem: Model and algorithms. Networks: An International Journal, 50(3), 211-
229.
[20] Li, J. Q., Mirchandani, P. B., & Borenstein, D. (2008). Parallel auction algorithm
for bus rescheduling. In Computer-aided Systems in Public Transport (pp. 281-
299). Springer Berlin Heidelberg.
[21] Li, J. Q., Mirchandani, P. B., & Borenstein, D. (2009). A Lagrangian heuristic
for the real-time vehicle rescheduling problem. Transportation Research Part E:
Logistics and Transportation Review, 45(3), 419-433.
[22] Mu, Q., Fu, Z., Lysgaard, J., & Eglese, R. (2011). Disruption management of
the vehicle routing problem with vehicle breakdown. Journal of the Operational
Research Society, 62(4), 742-749.
[23] Chao, I.M., Golden, B.L., &Wasil, E.(1993).Anewheuristicforthemulti-depot
vehicleroutingproblemthatimprovesuponbest-knownsolutions.AmericanJour-
nal of Mathematical and Management Sciences, 13(3-4), 371-406.
[24] Approximation Algorithms for Some Routing Problems Greg N. Frederickson,
Matthew S. Hecht, and Chul E. Kim SIAM Journal on Computing 1978 7:2,
178-193
[25] Cattrysse, D. G., & Van Wassenhove, L. N. (1992). A survey of algorithms for the
generalized assignment problem. European journal of operational research, 60(3),
260-272.
[26] Bertsekas, D. P. (2009). Auction Algorithms. Encyclopedia of optimization, 1,
73-77.
34[27] Bai, X., Fielbaum, A., Kronmu¨ller, M., Knoedler, L., & Alonso-Mora, J. (2022).
Group-based distributed auction algorithms for multi-robot task assignment.
IEEE Transactions on Automation Science and Engineering, 20(2), 1292-1303.
[28] Xue, J., Hu, Q., An, Y., & Wang, L. (2021). Joint task offloading and resource
allocation in vehicle-assisted multi-access edge computing. Computer Communi-
cations, 177, 77-85.
[29] Chao, I.M., Golden, B.L., &Wasil, E.(1993).Anewheuristicforthemulti-depot
vehicleroutingproblemthatimprovesuponbest-knownsolutions.AmericanJour-
nal of Mathematical and Management Sciences, 13(3-4), 371-406.
[30] Frederickson, G. N., Hecht, M. S., & Kim, C. E. (1976, October). Approximation
algorithms for some routing problems. In 17th annual symposium on foundations
of computer science (sfcs 1976) (pp. 216-227). IEEE.
[31] Koes, M., Sycara, K., & Nourbakhsh, I. (2006, May). A constraint optimization
framework for fractured robot teams. In Proceedings of the fifth International
joint conference on Autonomous agents and multiagent systems (pp. 491-493).
[32] Gerkey, B. P., & Matari´c, M. J. (2004). A formal analysis and taxonomy of task
allocation in multi-robot systems. The International journal of robotics research,
23(9), 939-954.
[33] Smith, V. L. (2006). Combinatorial auctions (Vol. 1, No. 0). P. C. Cramton, Y.
Shoham, & R. Steinberg (Eds.). Cambridge: MIT press.
[34] DeVries, S., &Vohra, R.V.(2003).Combinatorialauctions: Asurvey.INFORMS
Journal on computing, 15(3), 284-309.
[35] S. Koenig, C. Tovey, M. Lagoudakis, V. Markakis, D. Kempe, P. Keskinocak, A.
Kleywegt, A. Meyerson, and S. Jain. 2006. The power of sequential single-item
auctions for agent coordination. In Proceedings of the 21st national conference on
Artificial intelligence - Volume 2 (AAAI’06). AAAI Press, 1625–1629.
[36] Sandholm, T. (2002). Algorithm for optimal winner determination in combinato-
rial auctions. Artificial intelligence, 135(1-2), 1-54.
[37] Hoos, H. H., & Boutilier, C. (2000, July). Solving combinatorial auctions using
stochastic local search. In Aaai/iaai (pp. 22-29).
[38] Andersson, M., & Sandholm, T. (2000, April). Contract type sequencing for re-
allocative negotiation. In Proceedings 20th IEEE International Conference on
Distributed Computing Systems (pp. 154-160). IEEE.
[39] Botelho, S. C., & Alami, R. (1999, May). M+: a scheme for multi-robot
cooperation through negotiated task allocation and achievement. In Proceed-
ings 1999 IEEE international conference on robotics and automation (Cat. No.
99CH36288C) (Vol. 2, pp. 1234-1239). IEEE.
[40] Brunet, L. L. P. (2008). Consensus-based auctions for decentralized task assign-
ment (Doctoral dissertation, Massachusetts Institute of Technology).
35[41] Brunet, L., Choi, H. L., & How, J. (2008, August). Consensus-based auction
approaches for decentralized task assignment. In AIAA guidance, navigation and
control conference and exhibit (p. 6839).
[42] Dias, M. B., Zlot, R., Kalra, N., & Stentz, A. (2006). Market-based multirobot
coordination: A survey and analysis. Proceedings of the IEEE, 94(7), 1257-1270.
[43] Parker, L. E. (1998). ALLIANCE: An architecture for fault tolerant multirobot
cooperation. IEEE transactions on robotics and automation, 14(2), 220-240.
[44] Stroupe, A. W. (2003). Collaborative execution of exploration and tracking using
move value estimation for robot teams (MVERT). Carnegie Mellon University.
[45] Wagner, A., & Arkin, R. (2004, April). Multi-robot communication-sensitive re-
connaissance. In IEEE International Conference on Robotics and Automation,
2004. Proceedings. ICRA’04. 2004 (Vol. 5, pp. 4674-4681). IEEE.
[46] Jones, E. G., Browning, B., Dias, M. B., Argall, B., Veloso, M., & Stentz,
A. (2006, May). Dynamically formed heterogeneous robot teams performing
tightly-coordinated tasks. In Proceedings 2006 IEEE International Conference
on Robotics and Automation, 2006. ICRA 2006. (pp. 570-575). IEEE.
[47] Simmons, R., Singh, S., Heger, F. W., Hiatt, L. M., Koterba, S., Melchior, N. A.,
& Sellner, B. (2007). Human-robot teams for large-scale assembly.
[48] Monroy-Licht, M., Amaya, C. A., Langevin, A., & Rousseau, L. M. (2017). The
rescheduling arc routing problem. International Transactions in Operational Re-
search, 24(6), 1325-1346.
[49] Golden, B. L., DeArmon, J. S., and Baker, E. K. (1983). Computational experi-
ments with algorithms for a class of routing problems. Computers and Operations
Research, 10(1), 47-59.
[50] Benavent, E., Campos, V., Corber´an, A., & Mota, E. (1992). The capacitated
Chinese postman problem: Lower bounds. Networks, 22(7), 669-690.
[51] Li, L. Y., & Eglese, R. W. (1996). An interactive algorithm for vehicle routeing
for winter—gritting. Journal of the Operational Research Society, 47(2), 217-228.
[52] Li, L. Y. O. (1992). Vehicle routeing for winter gritting (Doctoral dissertation,
University of Lancaster).
[53] Sathyamurthy, Eashwar, (2021). Multi-flight algorithms for multi-uav arc routing
problem. M.S. Thesis, University of Maryland, College Park, Maryland.
36