Making Hybrid Languages: A Recipe
LEIFANDERSEN,UniversityofMassachusettsBoston,USA
CAMERONMOY,NortheasternUniversity,USA
STEPHENCHANG,UniversityofMassachusettsBoston,USA
MATTHIASFELLEISEN,NortheasternUniversity,USA
The dominant programming languages support only linear text to express ideas. Visual languages offer
graphicalrepresentationsforentireprograms,whenviewedwithspecialtools.Hybridlanguages,withsupport
fromexistingtools,allowdeveloperstoexpresstheirideaswithamixoftextualandgraphicalsyntaxtailored
toanapplicationdomain.Thismixputsbothkindsofsyntaxonequalfootingand,importantly,theenriched
languagedoesnotdisruptaprogrammer’stypicalworkflow.Thispaperpresentsarecipeforequipping
existingtextualprogramminglanguagesaswellasaccompanyingIDEswithamechanismforcreatingand
usinggraphicalinteractivesyntax.ItalsopresentsthefirsthybridlanguageandIDEcreatedusingtherecipe.
1 MIXINGTEXTWITHVISUALANDINTERACTIVESYNTAX
Programmersuseprogramminglanguagestocommunicatetheirthoughts,bothtocomputersand
tootherprogrammers.Lineartextsufficesforthispurposemostofthetime,butsomethoughtsare
inherentlygeometricandbetterexpressedvisually.
Recognizing this problem, researchers have devised many solutions ranging from purely vi-
sual languages [Resnick et al. 2009], to special-purpose IDEs [Perez and Granger 2007], and
variousotherstrategies[Beinetal.2020;Omaretal.2021].
Inparticular,Andersenetal.[2020]proposedtheidea ;; A Point is: {:x Real :y Real}
ofahybridlanguage,whichcombinestextualcodewith
miniaturegraphicaluserinterfaces(GUIs),dubbedvisual ;; Point Point Point -> #{Point ...}
andinteractivesyntax.Usingahybridlanguage,program- ;; Compute the set of Bezier points
(defn build-bez [A B C]
merscancommunicatetheirthoughtswithtextmostof
thetimeandweaveinvisualinteractiveconstructswhen
itisappropriatefortheproblemdomain. (g/let [ ]
For example, consider the calculation of quadratic
Béziercurves[Farin2014].Thestandardalgorithmcom-
(if (close-enough? A B C)
binestwotasks:findingmidpointsandrecursion.While
#{A C ABC}
thesecondiseasilyexpressedviatext,thefirstisageo-
(union #{ABC}
metricideathatdeservesapictorialrepresentation.The (build-bez A AB ABC)
build-bezfunctioninfigure1illustrateshowaprogram- (build-bez C BC ABC)))))
mermightuseahybridvariantofClojuretoconveythese
Fig.1. ComputingBézierpoints
twoideas.ItcomputesasetofBézierpointsfromthree
inputpointsthatformatriangle.Whiletheembedded
visualsyntaxdepictsthemidpoint(ofmidpoints)calculation,recursivelycomputingtherestofthe
pointsremainstextual.
Unfortunately,existingattemptsatvisualsyntaxhavefundamentalflawsthateitherunreasonably
disruptaprogrammer’stypicalworkflow,imposeanundueburdenonalanguageimplementation,
orboth.Forexample,suchsolutionsalmostalwaysforceprogrammerstouseoneparticular(new)
IDE for their work, a non-starter for most. Andersen et al. [2020]’s solution forces a language
implementationtomaintaintwodifferentGUIlibrariesandkeepthemsynchronized—wheneven
Authors’addresses:LeifAndersen,Leif.Andersen@umb.edu,UniversityofMassachusettsBoston,Boston,Massachusetts,
USA;CameronMoy,camoy@ccs.neu.edu,NortheasternUniversity,Boston,Massachusetts,USA;StephenChang,Stephen.
Chang@umb.edu,UniversityofMassachusettsBoston,Boston,Massachusetts,USA;MatthiasFelleisen,matthias@ccs.neu.
edu,NortheasternUniversity,Boston,Massachusetts,USA.
4202
raM
2
]LP.sc[
1v53310.3042:viXra2 LeifAndersen,CameronMoy,StephenChang,andMatthiasFelleisen
onesuchlibraryalreadyimposesaseriousamountofworkformostlanguages.Thisduplication
makestheimplementationcostlytounmaintain.Italsomeansprogrammerswilloftenhaveto
implementthesameGUItwice:oncefortheactualuserinterface—usingtheoriginalGUIlibrary—
andasecondtimeforthevisualsyntaxrenderer—usingthespecial-purposelibrary.
Thispaper’smaincontributionisthedevelopmentofageneralrecipeforcreatingmaintainable
andusablehybridlanguages.Allpriorworklacksatleastoneoftheseattributes.Akeyideaisthat
hybridlanguagesshouldbecreatedbyadaptingexistinglanguagesandIDEsinsteadofcreatingnew
ones.Doingsoimprovesusabilitybecauseitallowsprogrammerstokeepusingafamiliarlanguage,
andapopularIDE,whenprogrammingwiththehybridlanguage.Italsohelpsmaintainability
becauseitreusesalanguage’sexistinginfrastructureandlibraries.Toshowthisconcretely,asecond
contributionofthispaperistoapplytherecipetocreateHybridClojureScriptandacompatible
CodeMirror-basedhybridIDE.
Morespecifically,section2describesthedesigngoalsoftherecipe,whichcomefromstudying
existing solutions. Next, section 3 presents the ingredients needed for the recipe: an existing
programming language, a general-purpose IDE, and a GUI library. Section 4 provides a quick
glimpseattheresultofapplyingtherecipetoClojureScriptandotherchoseningredients.The
subsequenttwosectionsexplaintherecipeindetail.Specifically,section5explainshowtoadapta
languagetosupporthybridsyntax,andsection6explainshowtoadaptanexistingIDEsothatit
mayvisualizehybridsyntaxandallowprogrammerstointeractwithit.Next,section7compares
varioushybridlanguagesandIDEsalongseveraldimensions,andsection8describesseveralcase
studies.Finally,thelasttwosectionsexplainrelatedworkandconclude.
2 REQUIREMENTSFORCREATINGAHYBRIDLANGUAGE
Anexaminationofexistingworksuggeststhefollowingguidelinesforahybrid-languagerecipe:
(1) Thegoalmustbetoadaptanexistinglanguage.Doingsoimmediatelymakestheresulting
languageusablebecauseprogrammerscancontinueworkinginafamiliarcontext.The
resultismaintainablebecauseimplementersdonotneedtoworkonnewsystem.
(2) Likewise,hybridIDEsshouldbeadaptedfromexistingones.Thiscomeswiththesame
advantagesforIDEsasforthelanguages.
(3) The hybrid language must be backwards compatible, meaning that it can run existing
non-hybridcode,andthathybridprogramscanrunonnon-hybridimplementations.
(4) AllexistingIDEsandtexteditorsmustworkwithhybridcode.Sinceprogrammershave
strongIDEpreferences,forcingaspecificIDEchoiceimposesaserioususabilityburdenon
programmers.Hybridcodeshouldalsoremaincompatiblewithotherexistingtools.
(5) Implementationsofvisualsyntaxmustbeabletore-useexistingGUIsandGUIlibraries.This
relieveslanguageimplementersfromhavingtomaintaintwodifferentGUIlibraries.Italso
helpsprogrammersavoidduplicateeffort,becausetheywilloftencreateinteractive-syntax
extensionsthatareidenticaltotheGUIfoundintheapplication’srun-timecode.
(6) Finally,visualandinteractivesyntaxshouldbelinguistic,meaningitmustsmoothlyinte-
gratewithtextualsyntaxandallthelanguage’sabstractionmechanisms.Similarly,visual
syntaxshouldnotjustbeanewcategoryofsyntax,butitshouldideallybepossibletoturn
allexistingsyntacticcategoriesofthechosenlanguageintovisualsyntaxconstructs.
Section9presentsamoredetailedanalysisofthemostcloselyrelatedpiecesofresearchandhow
eachofthemlivesuptotheaboveguidelines.MakingHybridLanguages:ARecipe 3
3 THEINGREDIENTS
Everyrecipestartswithalistofingredients.Asdescribedinthelastsection,thebasicingredients
formakingahybridlanguageare(1)anexistingprogramminglanguage;(2)anIDE,and(3)aGUI
library.Sincedifferentqualityingredientscanaffecttheoutcomeofarecipe,thissectiondescribes
someadditionalattributesthatfacilitatestheconstructionofhybridlanguagesandIDEs,andalso
makestheresultstrulyusable.
3.1 SelectingHigh-QualityIngredients
Ideally,thechosenlanguagecomeswithasyntax-extensionmechanism.Sincethegoalistoadd
interactivesyntaxforanyproblemdomain,aprogrammerneedsamechanismforinterpreting
new syntactic features in the language. While it is possible to create shallow embeddings of
domain-specificnotationsinanylanguage,asyntacticallyextensiblelanguagegreatlyfacilitates
thisstep.
Similarly,thechosenIDEshould(1)provideanextensioninterfaceforplug-insand(2)support
theexecutionofcodeatedittime.Byusingaplug-intool,itbecomespossibletointerpretvisual
syntaxextensionsasmini-GUIsintheIDE’seditor.Sincethisinterpretationmustrunwhilethe
programmereditscode,anIDEthatcanruncodeatedittimeinanisolatedfashionisthebest
match. After all, programmer-created code may accidentally interfere with a logical invariant
oftheIDE’simplementationifitisrunwithoutprotection.Ofcourse,thisedit-timecodemust
simultaneouslybewritteninthechosenlanguageandmustcooperatewiththeIDE’seditor—which
suggestsadditionalconstraintsonthechosenGUIlibrary.
Besidesbeingsuitableforbuildingapplication-levelgraphicalinterfaces,theGUIlibrarymust
come with a text editor that is the same as the chosen IDE’s editor. Furthermore, the editor
mustallowtheinsertionofGUIwidgets(canvases,buttons,menus).Bymeetingthesetwocriteria,
programmersshouldeasilybeabletosharerun-timeGUIcodewithedit-timeGUIsyntaxextensions.
3.2 ExampleIngredients
Giventheseattributes,ClojureScript,CodeMirror,andtheDOM(DocumentObjectModel)are
reasonablechoices.ClojureScriptsuppliesaLisp-stylemacrosystemthatmakesiteasytocreatea
constructfordefiningvisualandinteractivesyntax.TheCodeMirrorIDEcomeswitharichplugin
API,thoughitdoesnotinherentlyisolatecodethatrunsatedittime.
AsfortheGUIattribute,ClojureScriptisascriptinglanguagefortheDOM,andCodeMirror’s
editorisbasedontheDOMaswell.Theseingredientscansmoothlycollaborateatedittime,as
longastheIDEcanbeprotectedfromproblemsintheprogrammer-suppliedcodeforinteractive
syntaxextensions.
Ofthethreeingredients,theDOMisparticularlybeneficial.Itisstandardizedandcanbefoundat
theheartofwebbrowsers,modernIDEssuchasVisualStudioCode,andevensomenativeoperating
systemslikeAndroid.Threedecadesofdevelopmentworkhaveturneditintoaperformantand
expressivetechnology.Atthesametime,programmershavecontributedalargecollectionofwidely
availableGUIlibrariesfortheDOMsuchasReact,Angular,andVue.js.Allofthesearefamiliarto
manyprogrammersandcanthusbeusedtoquicklybuildbothapplication-levelGUIsandre-used
forthecreationofinteractivesyntaxextensions.
4 AFIRSTTASTE
Tastingadishisoftenincentivetoaskfortherecipe.Inthisspirit,thissectionprovidesabrief
overviewof HybridClojureScriptanditsuseinelIDE,thehybridCodeMirror-basedIDE.4 LeifAndersen,CameronMoy,StephenChang,andMatthiasFelleisen
Fig.2. In-IDEviewoftheBézierfunction
Figure2displayswhataprogrammerseeswhenprogramminginHybridClojureScriptusing
elIDE.Concretely,thescreenshotshowsthecodeoftheBéziercurvefunctionfromfigure1in
elIDE.Themostinterestingpartofthescreenshotistheuseoftheinteractive-syntaxextension
describedintheintroduction.
Asthescreenshotshows,theimplementationofvisualsyntaxfortheBézierfunctionrenders
thecodeintwoways:avisualviewontheleftandaplaintextualoneontheright.Thevisualview
generalizesthestandarddiagramsformidpointcalculationsthatstudentsmightseeinageometry
class.Thediagramistobeunderstoodabstractly,meaningitcomputesmidpointsbasedonthe
run-timepositionofthegivennodes(A,B,andC)andtheirrelativepositiontoeachother.
Equallyimportantisthepurelytextualrepresentationofthecodeseenrightnexttothevisual
view.ThistextiswhattheIDEputsintoafilewhentheprogrammersavesthecode.Henceany
ClojureScriptimplementationcanrunthissavedversionofhybridcode.Betterstill,textiswhat
IDEtoolsorcommand-linetoolsprocess,whichimpliesthatprogrammerscontinuetobenefitfrom
allthesetoolsastheydevelopinthehybridlanguage.Finally,thetextisalsowhatprogrammers
seewhentheyopenthecodeinunadaptedIDEsorplain-texteditors.
Another important aspect of interactive syntax is that extensions implement a model-view-
control pattern. That is, a change to either view is immediately reflected in the other one. A
model—dubbedthestate—reconcilesthetwoviewswitheachother.Whenaprogrammeruses
gesturestomanipulatethemini-GUI,theimplementationofinteractivesyntaxchangesthestate;
theIDEnoticesthechangeandupdatesbothviews.MakingHybridLanguages:ARecipe 5
^:visr
(geometry.core/Diagram
{:changing false,
:nodes
{"A" {:type :anchor, :x 0, :y 20},
"AB" {:A "A",
:B "B",
:ratio 0.5,
:type :derived},
"ABC" {:A "AB",
👁 (λ) :B "BC",
:ratio 0.5,
:type :derived},
"B" {:type :anchor, :x 40, :y 0},
"BC" {:A "B",
:B "C",
:ratio 0.5,
:type :derived},
"C"
{:type :anchor, :x 50, :y 70}}})
Fig.3. AcloselookattheBézier-specificsyntaxextension
Figure3providesacloselookattheplain-textviewofaninteractive-syntaxconstruct,whichis
justafunctionapplication.Specifically,itappliesafunctionfromthedefinitionoftheinteractive-
syntaxextensiontoatextualversionofthecurrentstate.HerethereferenceistotheDiagram
extension,foundinthegeometry.coremodule.
Thisexaminationofthetextualviewdemonstratestwopoints.First,aprogrammercancreatean
instanceofaninteractive-syntaxextensioninaplaintexteditor.NospecialIDEisneeded.Second,
aprogrammercanchangethereferencepointertotheinteractive-syntaxdefinition(Diagram),and
thevisualizationontheleftwouldchangeimmediately.(If elIDEcannotfindtheimplementation,
itfallsbackonadefaultview.)
EventhisbrieftourvalidateshowHybridClojureScriptrunninginelIDEsatisfiesalldesiderata
of section 2. Table 4 contrasts the system with the work of Andersen et al. [2020], the closest
competitor.ItclarifieshowthesystempresentedherecooperateswithIDEtoolsproperlyand
preserves the existing workflow. Further, the edit-time GUIs use the same library as run-time
GUIsandtheIDEitself.BesidesmakingthelanguageandIDEeasiertouse,italsomakesHybrid
ClojureScriptrunninginelIDEhavefarbetterperformancecharacteristicsthanAndersenet
al.’sadaptationofRacketandDrRacket.
5 ARECIPEFORADAPTINGALANGUAGE
IfanexistingprogramminglanguagecomeswithbindingsforanappropriateGUIlibrary,then
turningitintoahybridonecanhappeninastep-by-stepfashion.Thissectionexplainsthosesteps,
illustratesthemwithClojureScript,andpresentsacompleteexampleinthehybridvariant.
5.1 TheRecipe
Ahybridlanguageallowsprogrammerstoaddnew,problem-specificsyntacticconstructstothe
already-availablevocabulary.Programmerscanthenusetheseconstructstobuildlibrariesorfull
programswithinteractiveandvisualsyntax.6 LeifAndersen,CameronMoy,StephenChang,andMatthiasFelleisen
Property RelatedResearch Andersenetal.[2020] thispaper
Language Racket ClojureScript
GUIlibrary bespokeGUI DOM
AddInteractiveSyntaxtoExisting,TextualPL ✓ ✓
AdaptPopular,General-PurposeIDE ✗∗ ✓
HybridPLisbackwardscompatible ✓ ✓
HybridIDEisbackwardscompatible ✗† ✓
StandardGUIlibrary,GUIComponentReuse ✗‡ ✓
Linguisticvisualandinteractivesyntax ✓ ✓
∗ LimitedtoitshybridcapabilitieswhenusedinanIDE.
† StandardIDEsareforwardscompatible,onlyhybridIDEsbreakcompatibility.
‡ SomereuseispossiblebyusingashimtogenerateGUIsfromacommonsource.
Fig.4. Desideratacomparisonforinteractivesyntaxdesigns
Giventhiscontext,thefirststepofthereciperequirescreatingsyntaxfordefiningnewkinds
ofinteractivesyntax.Morespecifically,thisnewdefinitionformspecifieshowinteractive-syntax
extensionskeeptrackoftheirstate(ofthemodel),i.e.,thosevaluesthatmustpersist;howthey
render this state as a mini-GUI, or serialize it as plain text; and how these mini-GUIs react to
programmer gestures that, in turn, manipulate the state. This setup closely follows the MVC
architecture.Finally,whentheprogrammerwishestorunprogramsconstructedwithinteractive
visualsyntax,theinteractive-syntaxextensionmustknowhowtoelaboratethetextualviewtoa
run-timesemantics;thismayhappenviaa“compilation”oran“interpretation”.
Thevisiblenoveltyhereisthatthestateofinteractive-syntaxextensionscanberenderedaseither
amini-GUIforuseinadaptedIDEsorplainprogramtext.Thelatterisusedinbothadaptedand
non-adaptedIDEs,aswellaswhentheentireprogramisrun.Additionally,whentheprogrammer
interactswiththecodeineithermodality,theinteractive-syntaxstatemustbeupdatedsothat
bothviewsshowtheup-to-daterenderingasneeded.
render
visual view gesture
react
state
serialize
edit
textual view
deserialize
elaborate
run-time meaning
Fig.5. Interactive-syntaxextensionsatworkMakingHybridLanguages:ARecipe 7
Figure5sketcheshowaninteractivesyntaxinstancerespondstoprogrammerstimuli.Ithigh-
lights(ingray)thefiveelementsthatthecreatorofaninteractive-syntaxextensionmustspecify
withthedefinitionform.
Thechallengeforhybrid-languageimplementersconcernsprogramphases.Whileprogram-
mingalwaysinvolvesthreephases—edittime,whentheprogrammereditsthecode;compiletime,
whenthecodeiscompiled;andruntime,whentheresultingtargetcoderuns—interactive-syntax
extensionsdemandthatprogrammer-defined codecanrunatedittimeandcompiletime.
Foralanguageimplementertofollowthisrecipemeanspickingarepresentationforinstancesof
aninteractive-syntaxextension—rangingfromstrings(bad)toalgebraicdatatypes(acceptable)to
S-expressions(fantastic,duetoitssynergywiththemulti-phasereflectivenatureofinteractive-
syntaxextensions)—andtosupplyaninterpreteroracompilerforthisnotation.Inthecontext
ofJavaScript,forexample,a“cook”coulduseatranspilerframeworktoassignsemanticstonew
syntactic elements. In the context of a macro-extensible language, however, the work is even
simpler;itsufficestoimplementasingle(butnon-trivial)macrodefinition.Thenextsubsection
illustratesthisparticulartechniquebyapplyingtherecipetoClojureScript.
5.2 ApplyingtheRecipetoClojureScript
InordertoturnClojureScriptintoahybridlanguage,itsufficestodefineasinglemacro,named
defvisr,whosepurposeistodefinenewinteractivesyntaxextensions.Tousedefvisr,apro-
grammermustspecifythreeelements:
(1) astateelement,whichisanassociationoffieldnameswithinitialvalues;
(2) render,whichequipstheextensionwithedit-timesemantics;and
(3) elaborate,whichassignsrun-timesemanticstothecurrentstate.
Hereisatemplateofthenewdefinitionform:
1 (defvisr Name
2 (:state field-name field-value ...)
3 (:render [this] ... rendering code ...)
4 (:elaborate [this] ... elaboration code ...)
Adefvisrdefinitionintroducesanewinteractive-syntaxconstruct,whichcanbeinstantiated
many times, via plain text code or via GUI gestures (in a hybrid IDE). The state component
specifiesthestatepartoftheinteractive-syntaxextension,asindicatedbythe“state”boxinfigure5.
Theuseof defvisrspecifiesthreecomputations.First,renderconsumesoneargument—named
thisbyconvention—whichisthecurrentstate.ItturnsthestateintoaDOMelementthatissent
totheIDE,assumingitissuitablyadapted.FollowingstandardDOM-developmentpractice,render
collapsesviewandcontrol.Thatis,itissimultaneouslyresponsiblefordrawingtheGUIandfor
handlinguserinputthatallowsthedirectmanipulationofthestate.Forthesecondaspect,render
maymutatethefieldsofthestate.InClojureScriptterminology,thedefvisrmacroimplementation
suppliesrenderwithan“atom”containingthestate.Thus,therendercomponentimplementsthe
“render”and“react”boxesfromfigure5.
Second,theextensionprovidesserializationforstatesusingJavaScript’sserializationfacilities,
asrequiredbythe“serialize”boxinfigure5.Observe,however,thatadefvisrdefinitiondoesnot
requirespecifyingserializationexplicitly.Instead,adefvisrinstanceimplementsthisfunctionality
implicitlyfortheprogrammer.
Third,likerender,elaborateconsumesthecurrentstate(astext)asitssoleargument.Itstaskis
tointerprettheserializedstatewhentheClojureScriptprogramruns,asindicatedbythe“elaborate”
boxinfigure5.Thetextualviewexpressesthisideawithacalltotheelaborator(whichactuallyhas
thesamenameastheinteractive-syntaxconstructitself,e.g.,theDiagramdefvisrdefinedbelow)8 LeifAndersen,CameronMoy,StephenChang,andMatthiasFelleisen
wrapped around the serialized state. This expression may end up being a function application
or,sincethisisClojureScript,amacro.Inthelattercase,elaboratemaygeneratecompile-time
code,whichcan,forexample,setupnewvariablebindingsorstaticallycheckinstancesofthe
interactive-syntaxextension.
Asaconvenience,defvisrexploitsthestatespecificationtosimplifythesyntaxoftherendering
andelaborationcode.Specifically,itimplicitlybindsthenamesofthefieldsofthestateinthescope
ofthetwofunctionbodiesforreference.MutationmustuseClojureScript’satomfunctionality.
1 ;; A DIAGRAM is: {:nodes {<STRING NODE> ...} :changing BOOLEAN}
2
3 ;; A NODE is one of:
4 ;; - {:type :anchor :x NUM :y NUM}
5 ;; - {:type :derived :A STRING :B STRING :ratio NUM}
6
7 (defvisr Diagram
8 (:state nodes {}
9 changing true)
10 (:render [this] (render-state-as-dom-element nodes changing)))
11 (:elaborate [this] (elaborate-diagram-to-syntax nodes))
12
13 (defmacro (g/let [diagram] & body)
14 `(clojure.core/let ~(macroexpand diagram) ~@body))
Fig.6. Thedefvisrfortheinteractive-syntaxextensioninfigure1
5.3 WorkingwiththeAdaptedClojureScript
Figure6sketchesadefvisrdefinitionofthemidpointextensionusedinfigure1.
State. Asthecommentsexplain,theDiagramextensionmanagesvaluesoftypeDIAGRAM.That
is,thestateconsistsofsomenodesandabooleanflag,calledchanging.EachNODEcontainsits
typeanditsposition;thenodesfieldmanagestheNODEsandtheirconnections.Theinformationin
nodesisusedfordrawingthediagramatedittimeaswellassettingupvariablebindingsforthe
bodyoftheplain-textg/letmacroatcompiletime.Thechangingfieldofthestateissettotrue
whentheprogrammerisactivelymodifyingthediagram;itisanedit-timeonlyvalue.
The:typefieldindicatesthattherearetwodistinctclassesofnodes.Anchor nodesareinputsto
instancesoftheDiagraminteractive-syntaxextension;theirpositionsbecomeknownatruntime
only.Intheexamplefromfigures2and3,A,B,andCareanchornodes.Derived nodesareoutputs
ofthemidpointcalculation;theirvaluesaredeterminedalgebraicallyfromanchornodesandother
derivednodes.Inthepreviousexample,AB,BC,andABCarederivednodes.Aninteractionwith
thevisualdiagramcouldshiftthesederivednodesandassignweightsotherthan0.5,yieldinga
differentkindofcurvecalculation.
TheRenderer. Figure7sketchestherendererimplementationfortheDiagraminteractive-syntax
extension.Concretely,thecodeontheleftsideofthefigureshowsthefunction,Diagram-view,
whichrendersaDiagramasaGUIview.ItreusesfunctionalityfromaruntimeGUIlibraryandis
thusstraightforwardforcreatorsoftheinteractivesyntaxtowrite.Morespecifically,anexternal
JavaScriptlibrary,visjs,handlesthelow-leveldrawingandeventhandlingfortheDiagram.The
:>(line6ontheleft)isaspecialkeywordthatactsasaforeignfunctioninterface(FFI)toexternal
JavaScriptlibraries.MakingHybridLanguages:ARecipe 9
1 (ns geometry.library 1 (ns geometry.elaborator
2 (:require [visjs])) 2 (:require [geometry.library
3 3 :refer [Diagram-view]]))
4 ;; (Atom #{Node ...}) -> Dom-Element 4
5 (defn Diagram-view [nodes] 5 ;; (Atom #{Node ...}) (Atom Boolean) -> DOM-Element
6 [:> visjs/Graph {:options ...elided... 6 (defn render-state-as-dom-element [nodes changing]
7 :events ...elided... 7 [:div {:style ... elided (uses changing) ...}
8 :graph (build-diagram @nodes)}])8 [Diagram-view nodes]])
(a)library.cljs (b)renderer.cljs
Fig.7. Rendererforageometryextension
Thecodeontherightsideisthefunctionalityneededtousethislibrarycodefortheactual
Diagramrenderer.Therequirespecificationimportsthelibrary,inparticular,theDiagram-view
function.Asmentioned,therender-state-as-dom-elementfunctionisappliedtoanatomthat
contains the state. An atom in ClojureScript is essentially a mutable box. From this state, the
renderercomputesadatastructurethatencodestheuser-facingDOM-element.Functionsplaced
inthefirstpositioninavector(e.g.Diagram-viewonline8)aretreatedassub-componentstobe
rendered.Likewise,keywords(e.g.:divonline7)directlyrepresentDOMtags.
Thisrenderingcodeisalsocalledinresponsetoaprogrammer’sinteractionwiththemini-GUI.
Itthenreadsandmodifiesthestatethroughinteractionswiththestateatom.Unboxingtheatom,
throughthe@operator(ontheleft),returnsanimmutableencodingofthestate(line8,left).When
thestateatomchanges,apublish–subscribestylewatcher(inthevisjslibrary)noticesandupdates
thetwoviews.
(let [{:keys [AB BC ABC]}
(g/let [(Diagram {:nodes {... ...}
=⇒ (compute-mid-points ...nodes...
:changing false})]
elaborates {:A A :B B :C C})]
body ...)
body ...)
Fig.8. Elaboratorforageometryextension
TheElaborator. Generallyspeaking,aninteractive-syntaxelaboratorisasyntax-to-syntaxfunc-
tion.Figure8showsanexampleofhowDiagram’selaborator(whichisinvokedbydirectlyapplying
theDiagramnametoastaterepresentation)isused.Asseenontheleft-handside,thisparticular
Diagraminteractive-syntaxisdesignedtobeusedwithaspecialg/letmacro.Specifically,elabo-
rationofaDiagramproducestwoparts:asequenceofidentifiers(calledkeysinClojureScript),
andanexpression.
The right side of the figure shows how these elaboration results are used in the run-time
representationoftheprogram:thethreecomputedidentifiersareusedasbindersinaplainlet,
andtheexpressioncomputesthevaluesforthesebinders.Morespecifically,theexpressionisan
applicationof compute-mid-points—arun-timefunction—tosymbolicnamesandtheconcrete
anchornodes;itcomputesthederivednodepositionsbasedontherun-timepositionoftheanchor
nodes.Allofthissetsupthethreevariablebindingsthatareseenasthethreeredmidpointdotsin
thevisualinteractivesyntaxfromfigures1and2.10 LeifAndersen,CameronMoy,StephenChang,andMatthiasFelleisen
6 ADAPTINGANIDETOHYBRIDCLOJURESCRIPT
AhybridprogramminglanguagemustcomewithatleastoneIDEthatcandisplayinteractive-
syntaxextensionsvisuallyandtextually.ThissectiondescribeselIDE,anadaptationofCodeMirror
forwritingprogramsinHybridClojureScript.CodeMirrorisaDOM-basededitorthatservesas
thefoundationofanumberofIDEs.
6.1 elIDENeedsaHint
Acloserlookatfigure3(onpage5),specificallythetextualviewontheright,revealsanexplicit
:visrClojuremetadataprefixonthefirstline.ThistagtellselIDEthat(1)thisexpressionisan
(cid:98)
instanceofinteractivesyntaxand(2)theexpressioncontainsareferencetotheimplementation
foritsvisualization.ThisuseofmetadataplaysakeyroleingettinganadaptedIDEtoworkwith
hybridsyntax.
6.2 TheArchitectureofelIDE
UnlikeanIDEforplain-textprogramming,anIDEforahybridlanguagemustrunuser-definedcode
atedittime.EnablinganIDEtorunuser-definedcodeatedittimeraisesanumberofconcerns,
mostimportantly,thatedit-timecodemayinterferewiththeintegrityoftheIDE.Also,anydesign
mustbemodularsothatthehybridlanguageandthehybridIDEdonotbecometightlycoupled.
CodeMirror
UI Library Text Editor Integrated
Filesystem Development
Environment
Edit Program
Run Program
ClojureScript Stopify
Program Result
Compiler Evaluator
ClojureScript Stopify Programming
Reader Compiler Evaluator Language
Fig.9. ArchitectureforelIDE(top)andHybridClojureScript(bottom)
Figure9showsanarchitecturediagramof elIDE(top)andHybridClojureScript(bottom).
TherestofthissubsectionfirstexplainsthestandardIDEfeaturesandthenthoseaddedforHybrid
ClojureScript.
StandardIDEFacilities. TheelIDEIDEsupportstheexpectedfunctionality:(1)editingcodewith
theCodeMirrortexteditor;(2)storingcodeinafileandloadingitfromthere;1(3)runningcode;
and(4)backgroundexecution.Allofthesefacilitiesarerealizedintheexpectedfashion.
1BecauseelIDErunsinabrowser,itusesBrowserFS[Powersetal.2017],alightweightfilesystemforbrowsers.MakingHybridLanguages:ARecipe 11
HybridIDEFacilities. Thekeyhybridfacilityistoreflectchangestothestateofaninstanceof
aninteractive-syntaxextensionintheprogram’sdisplayedsourcecode.Whetherthesechanges
happenviatexteditingordirectmanipulationoftheGUIdoesnotmatter.ByallowingHybrid
ClojureScripttocommunicatebacktoelIDE,thisreflectionisenabledinanaturalmanner.
AddinginteractivesyntaxtoalanguagemeansthatavisualIDEmustcontinuouslyrunthe
rendering code of instances of interactive syntax in the background. As a programmer edits
interactivesyntax,theIDEupdatesthestateifneededandcallstheappropriatefunctionstopresent
thevisualizationandtheplain-textvariantsasneeded.
AHybridClojureScriptspecificreader(figure9)istheentrypointforthistask.Itscansthe
entireprogram,determineswhichportionofthecoderunsatedittime,andsendsthisportionof
thecodetothebackgroundevaluator.
Inordertosatisfytheedit-timeevaluationrequirement,ClojureScriptisbootstrappedwithan
evaluatorthatcomposestheClojureScriptcompilerandStopify[Baxteretal.2018].Thelatterisa
JavaScripttranspilerandrun-timeenvironmentwhosepurposeistocompilestraightJavaScript
intocodethatsupportscooperativemultitaskingthroughcontinuationpassing.Inthecontextof
HybridClojureScript,Stopifysuppliestwopiecesoffunctionality.First,itallowstheIDEto
pauserunningprograms,i.e.,misbehavinginteractive-syntaxextensionsdonotlockuptheIDE.
Second,itprovidesasandboxenvironmentthatseparatesedit-timecodeforinteractive-syntax
extensionsfromtheIDE.ItthuspreventstheformerfrominterferingwiththeIDE’sinternals.
Finally,therenderingcodeofinteractivesyntaxistheonlywayforHybridClojureScriptto
sendinformationbacktotheIDE.Statemanagedinthiscodeistranslatedbackintotheprogram
astext.Specifically,theimplementationturnstherequiredchangesintocodesnippetswrittenina
standardJavaScriptlibraryformanipulatingtheDOM.(Theright-handsideoffigure7showsa
concreteexampleofwhatthesesnippetslooklikeandhowtheyarecomputed.)Whenthesepieces
ofcodearesenttoCodeMirror,theyplaceDOMelementsintothetexteditorattheproperplaces.
6.3 TheGeneralIdea
ThelessonslearnedfrombuildingahybridIDEwithCodeMirrorgeneralizetoarecipe.Itstarts
fromanIDEthatusesthesameGUIlibrary,includinganeditor,asthehybridlanguage.Tomake
theIDEhybrid,thatIDEmustbeabletocollaboratewithhybridlanguagessothatitcandisplay
instancesofinteractivesyntaxasminiGUIs.Thiscollaborationcoversthreeaspects:
(1) thelanguageimplementationcantelltheIDEwhichpiecesofthecodeareinteractive;
(2) theIDEcanrequestthatthelanguageimplementationevaluatetheGUIcodefromidentified
instancesofinteractivesyntaxatedittimeandcompleteprogramsatruntime;and
(3) thelanguageimplementationmayinsertelementsintotheIDE’seditor.
Withoutthelast,theIDEcannotshowprogrammersinteractivesyntaxasGUIsinsteadoftext.
Hence,adaptinganexistingIDEtoahybridlanguageiseasilyimplementableifitcomeswitha
plug-inAPIorasimilarcapability.Thisplug-inAPImustgrantfullaccesstotheIDE’seditor,and
itmustsupportcallbacksthatallowtheIDEtoinvokethelanguageimplementationonbothpieces
offunctionality—atedittime—andcompleteprograms—atruntime.Thefirstkindofcallbackrelies
ontheabove-mentionedfullaccesscapabilitysothatitcaninserttheresultsoftheevaluationat
theappropriateplaces.Finally,runningtheimplementationatedittimedemandssomeformof
sandboxing.ForHybridClojureScript,theauthorshadtomanuallyconstructthissandboxing
fortheCodeMirrorIDEusingStopify;ifateamadaptsanother,more-powerfulIDE,suchasVisual
StudioCode,2theexistinglanguage-serverarchitecturemayalreadyaccountforthisneed.3
2https://code.visualstudio.com/
3https://microsoft.github.io/language-server-protocol/12 LeifAndersen,CameronMoy,StephenChang,andMatthiasFelleisen
7 EVALUATION:PRESERVINGANDENHANCINGADEVELOPER’SWORKFLOW
Evaluatingalanguagedesignshouldconfirmthatitisbothuseful andusable.Previousdesigns
forinteractive-syntaxdemonstrateitsusefulnesswithaplethoraofexamples.Eachvalidatesthat
interactive-syntaxexpressessomedomainconceptsmoredirectlyandclearlythanlineartext.The
nextsectionsketcheshowsuchexamplesareeasilyreconstructableintheDOM-basedapproach.
Theusabilityofpreviousdesigns,however,isquestionable.Here,usabilitymeansthatdevelopers
canbuildonwhattheyknowandcaneasilycreateandinsertinteractive-syntaxextensions.More
generally,ausablehybridlanguageshouldenhance—notinterferewith—theordinarysoftware
developmentworkflow.Thissectionpresentsasystematiccharacterizationofmajorandminor
workflowactivitiesandananalysisofhowwellthispaper’sDOM-baseddesigncompareswith
priordesignstoenhanceandpreservethem(section7.1).Additionally,itaddressessomeremaining
areasof HybridClojureScriptandelIDEthatneedimprovement(section7.2).
7.1 WorkflowOperationsandInteractiveSyntax
Programmersinteractwiththeircodebasesinthefollowingmajorways:
• Auditing,themostcommontask,isreadingandcomprehendingexistingcode.Theprimary
goalofvisualandinteractivesyntaxistoletcodeaboutgeometricconceptsspeakforitself.
• Creation,thesecond-mostcommontask,istowritenewcode.Asfarasinteractivesyntaxis
concerned,“creation”referstotwoactions:(1)creatingnewinteractive-syntaxextensions
and(2)usingexistinginteractive-syntaxextensions(fromalibrary)tocreateprograms.In
theidealcase,aprogrammerworkinginatext-onlyIDEcanstillinsertaninstanceofan
interactive-syntaxextension,anditmustworkcorrectlyinahybridIDE.
• CopyandPasteistheactofcopyingcodeto,andpastingitfrom,theclipboard.Italsorefers
tothedirectactionofdragginganddropping.Botharecommon,andinteractivesyntax
mustnotgetinthewayofeither.
• Running programs(intheIDEorotherwise)isafundamentalpartofsoftwaredevelop-
ment.Existingtoolsshouldworkwithoutchanges,evenifprogramsincludeinstancesof
interactive-syntaxextensions.
• SearchandReplaceistheactoffindingcodeand,optionally,replacingitwithnewcode.Ata
minimum,interactivesyntaxshouldnothindertheseoperations.Ideally,adevelopershould
beabletosearchforgraphicalrenderingsofinteractivesyntaxand/orreplaceexistingcode
withgraphicalrenderingsofinteractivesyntax.
Inadditiontothesefivemajoractionsoncode,thereisasignificantnumberofmoreminorones:
Abstraction,Autocomplete,Coaching,CodeFolding,Comments,Comparison,Debugging,Dependency
Update,Elimination,HyperlinkingDefinitionsandUses,Merging,Migration,Multi-CursorEditing,
Refactoring,Reflow,Styling,Undo/Redo.Toavoidanoverlylongandtediousevaluationsection,
however,thissectiondealsonlywiththemajoractions;acomparisonoftheminoractionswith
themostcloselyrelatedapproachcanbefoundinthelastsection.
Figure10presentsacomparisonoftheDOM-baseddesignandothersystemswithrespecttothe
majorworkflowoperations.Specifically,itcompareswithAndersenetal.[2020],Livelits[Omar
etal.2021]andSandblocks[Beinetal.2020],whicharethecloselyrelatedprojectswithsimilar
goals.Eachcellinthetwocolumnsmarksaworkflowoperationwitha“✓”ora“✗”,dependingon
howwellthedesignworkswiththisaction.
Asmentioned,thealways-availabletextviewisthekeyreasonwhyalloperationsarepossible
withaDOM-basedinteractive-syntaxapproach.Everyinstanceofaninteractive-syntaxextension
is always available as both a graphical widget and a plain-text rendering because serialization
worksinsidetheIDE.Furthermore,allinstancesofinteractive-syntaxextensionsareserializedtoMakingHybridLanguages:ARecipe 13
Activity Literature thispaper Andersenetal.[2020] [Omaretal.2021] [Beinetal.2020]
System — HybridRacket Livelits Sandblocks
Language ClojureScript Racket bespokelanguage Squeak
GUI DOM bespokeGUI DOM Morphic
Auditing ✓ ✓ ✓ ✗‡
Creation(definition) ✓∗ ✓∗ ✓∗ ✓∗
Creation(use) ✓ ✗† ✗† ✓
CopyandPaste ✓ ✓ ✗ ✓
Running ✓ ✓ ✓ ✓§
SearchandReplace ✓ ✗ ✗ ✓
∗ Orthogonaltointeractive-syntaxextensions.
† Possible,butdifficult.SeeSection2.
‡ Sandblockslimitsinteractive-syntaxcomponentstoexpressions.
§ Whilepossible,dynamicscopingleadstounexpectedbehavior.SeeSection9.
Fig.10. Interactivesyntaxvscodingactions
filesastext,annotatedwithmetadata.Henceeveryworkflowoperationcanexploittheplain-text
version,bothinsideandoutsideoftheIDE.
ThebespokeGUIlibraryusedinAndersenetal.[2020]isthekeyreasonwhytwomajorworkflow
operationsaredifficulttoimpossibleinthatsystem.Specifically,thechosenIDEmustinternally
storethebespokeGUIcodeasbinarydata—renderingexistingworkflowoperationsunavailable.
For“creation,”thebespokeGUIlibrarydoesmakeitpossibletocreatenewtypesofinteractive-
syntaxextensions,but,usingthosenewextensiontypesisextremelychallenging.Developersmust
frequentlyleavetheIDEentirelytomakerelativelysimplechanges.Also,“SearchandReplace”is
limitedtothefunctionalityofthebespokeGUIlibrary.Asaresult,developersmustonceagain
leavetheIDEanduseaplain-texteditor.
Livelitsusesabespokeprogramminglanguage.Assuch,thesystemfailstosupportacquired
programminghabits.Itdoes,however,usetheDOMGUIsystem,anditthusisconceivablethat
itcouldincorporatesomeideasfromthispaperinordertoimprovesomedeveloperworkflow
operations. While both the DOM-based design of this paper and Sandblocks support all com-
moneditingoperations,SandblocksmodifiesSqueak’slexicalscopingtodynamicscope.Further,
interactive-syntaxinthissystemmaybecreatedforexpressionsonly.Thus,Sandblocksusersare
limitedinwhichpartsofaprogrammaybeexpressedvisually.
7.2 MinorLimitations
HybridClojureScript,thehybridlanguageinthispaper,isnotperfectwhenitcomestousability.
Thissubsectiondescribesthreeshortcomings,sothatpotentialhybridlanguageimplementers
areawareofthem.Noneoftheseshortcomingsarefundamentaltointeractive-syntaxextensions,
however,noraretheyfundamentaltoaDOM-baseddesign.Rather,theyarelimitationsduetothe
chosenprogramminglanguage,ClojureScript.
First,ClojureScript’smacrosystemrequiresputtingmacrodefinitionsandusesinseparatefiles.
ThusHybridClojureScriptintroducessomeworkflowfrictionforprogrammerswhowishto
developextensionsandtestinstancesinasinglefile.Fortunately,interactive-syntaxextension
definitionsandusescanbeplacedinonefileiftheycompiledirectlytoasinglerun-timefunction.14 LeifAndersen,CameronMoy,StephenChang,andMatthiasFelleisen
Second,ClojureScript’smacrosystemimplementsonlyaweakformofhygiene[ClingerandRees
1991;Kohlbeckeretal.1986].Thus,interactive-syntaxelaboratorsarenothygienic.Tocircumvent
thisweakness,HybridClojureScriptprovidesafunctionalversionofelaboratewhichsuffices
inmostcases.
Finally,asbrieflymentionedinsection6,HybridClojureScriptfallsshortinitssandboxing
capabilities.Whilethishasnotposedanyproblemforanyofthe(almost100)usersoftheprototype,
it does highlight the need for future research on the interface between interactive syntax and
security.Asis,thelimitedsandboxprovidedbyStopifymeansinteractive-syntaxextensionsare,at
worst,assecureasordinarywebpagesdesignedwithsecurityinmind.
Althoughtheselimitationsareundesirable,noneofthemreducetheusefulnessorusabilityof
HybridClojureScriptinasubstantialway.Inpractice,theabilitytousearenderingenginewith
multipledecadesofengineeringoffsetsthehighfrictionofdefiningextensionsandminorproblems
withhygieneandsandboxing.
8 EVALUATION:DOM-BASEDINTERACTIVESYNTAXATWORK
AhybridlanguagebasedonastandardandwidelyusedGUIlibrary,i.e.,aDOM-basedone,comes
withsignificantadvantages.First,programmershavebuiltmanyspecializedlibrariesformulti-
dimensionaldomainsthatcanbeusedtoimplementinteractive-syntaxextensions.Second,using
suchlibrariesimposesalmostnoeffortonaprogrammer.Third,ifalibrarydoesnotquitefit,it
tendstobeopensourceandthuseasytomodify.
Thissectionpresentsthreeusesof HybridClojureScriptandimplicitlyelIDE.Thefirstone
shows how to use a graph library as-is to express a REST API connection as a state-machine.
Thesecondillustratestheeasewithwhichaslightlymodifiedlibrarycanbeusedtoexpressthe
geometryofaboardgame.Thefinalre-createsthemostsophisticatedexampleofAndersenetal.
[2020]’swork—ameta-syntaxextension—withlesscodebyreusingexistinglibraries.
8.1 UsingandCombiningExistingLibraries
Aprotocolforcallingmethodsinacertainorder,e.g.,duringauthentication,isoftenexpressedasa
state-machinediagram.Thusitisaperfectusecaseforinteractive-syntax.Morespecifically,to
preventmisusingobjects,libraryauthorsofteninjectrun-timecodewhichchecksthatmethods
arecalledintherightorder.Withoutinteractive-syntax,thiscodemustbemanuallysyncedtothe
state-machinediagrampresentinthedocumentation.Ofcourse,thereisnoguaranteethatthe
codecorrespondstothediagram.Worse,thediagramandthecodearelikelytogetoutofsyncas
thelibraryevolves.
Usinganinteractive-syntaxextension,alibraryauthorcandescribeaprotocolgraphicallyand
havethecorrespondingrun-time-checkingcodegeneratedautomatically.Consideranauthentica-
tionprotocolforaRESTAPIonobjectswiththreemethods:auth,req,done.Theprotocolimposes
thefollowingconstraintsonthesemethods:
(1) usetheauthmethodtosendcredentialsandreceiveanauthenticationtokeninresponse;
(2) usethereqmethod,withanendpointURLandthevalidauthenticationtoken,torepeatedly
requestdata;and
(3) usethedonemethodtoendtheauthenticatedsession.
Figure11showshowaprogrammermayuseaninteractive-syntaxextensiontoexpressthe
protocol as a state machine. This extension elaborates to a predicate which, given a sequence
representingthehistoryofmethodcallstoanauthenticationobject,determineswhetheritsatisfies
theprotocol[Dimoulasetal.2016].MakingHybridLanguages:ARecipe 15
;; [Sequenceof Message] -> Boolean
;; Returns whether the sequence of messages satisfies the
;; authentication protocol.
(def satisfies-auth-protocol?
)
Fig.11. AstatemachineforanAPIprotocol
Thestatemachineconsistsofthreestates:start,good,andend.Theshadedgraybackground
of startshowsthatitisthestartingstate.Eachstateindicates,viathetransitionsemanatingfrom
it,thesetofmethodsaclientmodulecancall.Forexample,inthegoodstate,aclientmodulecan
calleitherthereqordonemethod.Atransitionislabeledwithamethodnamepluspredicates
fortheargumentsandresult.Iftheargumentsandresultsatisfythepredicatesspecifiedonthe
transition,thenthestatemachinemovestothenextstate.Ifnosuchtransitionexists,thenthe
protocolisviolated,andthisviolationisreported.
In figure 11 the transition corresponding to a successful authentication binds the returned
token to the variable t. This is shown in square brackets. The scope of this binding includes
alldownstreamtransitions.Anytransitioninscopecanthenusethisvariableinpredicates.For
example,theexpression(== t)constructsapredicatethatdeterminesifavalueisequaltothe
token.
Thediagrampresentedinfigure11isactuallyjustoneuseofageneral-purposeinteractive-syntax
extension,whichisusedheretogeneratestate-machine-checkingpredicates.Todemonstratethe
versatilityofthisextension,figure12showsaslightlysimplifiedimplementationoftheAndroid
MediaPlayerAPI4protocolthatusesthesameinteractive-syntaxextension.
Using the interactive-syntax extension, a programmer performs GUI gestures to create new
states;deleteexistingones;addordeletetransitions;editthesourceanddestinationofatransition;
turn states into starting or accepting states; rename states (via a text box); edit the predicates
labelingatransition(viaatextbox);andchangewhatvariablesarebound.Thesegesturesare
intuitive.Forexample,creatinganewtransitionmerelyrequiresclickinganddraggingfromthe
sourcestatetothedestinationstate.Alteringthepropertiesofatransitioninvolvesselectingthe
transitionandclickingtheeditbutton.
Theextension’selaboratoranalyzescodeonthetransitionstodeterminethenecessarybinding
structure. Specifically, the elaborator creates a separate function for each transition with the
appropriate parameters, and provides the run-time system enough information to supply the
correctargumentstoeachfunction.Syntaxandtypeerrorsinthespecificationareraisedatcompile
time.Forexample,ifatransitionpredicatespecifiedadependencyonavariablethatisnotinscope,
elaboratewouldsignalacompile-timeerror.
4https://developer.android.com/reference/android/media/MediaPlayer16 LeifAndersen,CameronMoy,StephenChang,andMatthiasFelleisen
;; [Sequenceof Message] -> Boolean
;; Returns whether the sequence of messages satisfies the
;; Android MediaPlayer protocol.
(def satisfies-android-protocol?
)
Fig.12. TheAndroidMediaPlayerprotocolwithinteractivesyntax
Developingthiskindofinteractive-syntaxextensionisarelativelylow-effortproject.Inasense,
itisavariationoftheBéziercurveexampleasitusesthesamegenericgraph-drawingcomponent.5
Forthedialogtoedittransitionedges,theextensiondependsonadifferentGUIlibrary.6Asaresult
ofthisreuse-and-combineapproach,theimplementationforthisextensionconsistsoffewerthan
300linesofcode.
8.2 ForkingLibraries
Implementingaboardgameisanotherscenariowheredomain-specificgeometricideasdominatea
numberofactivities.ThissubsectionexamineshowthepopularSettlersofCatangamecanbenefit
fromgraphicalsyntax.
Morespecifically,implementingSettlersischallengingduetoitshexagonalgridboardwhere
eachedgeofahexagoniscoloredaccordingtotheplayerthatownsthatedge.Aroad consistsofa
continuoussequenceofedgesofthesamecolor.Whenthegameisscored,thelongestsuchroad
playsarole.
Unittestsdemonstratetheusefulnessofinteractive-syntaxextensionsparticularlywell.Inthis
spirit,figure13adisplaysaunittestforthelongestroadcalculationusingtraditionalplain-text
syntax.Bycontrast,figure13bpresentsthesameunittestusinganinstanceofinteractive-syntax
extensionsfortilesandboards.Theboardshowsupexactlyasitdoesintheapplication’sGUIitself.
Indeed,theinteractive-syntaxextensionreusesGUIcodefromtheapplicationitself,makingit
simpletoimplement.IftheGUIcodeofthegameapplicationweretochange,thesyntaxextension
wouldtagalong.Oneconsequenceofthisreuseconcernsthemanipulationoftheboardandtiles.
Toupdatetheboard,aprogrammerclicksdirectlyonanedgetochangeitscolor.Thedesiredcolor
isselectedviaadrop-downmenu(upperleft).
Itshouldbeobviousfromthetwoside-by-sidefiguresthat(1)textisaninferiormediumto
expressandmaintaintheunittestand(2)aninteractive-syntaxrepresentationcomeswithadditional
compile-timeadvantages,suchaswell-formedtestinputsandoutputs.
Mostimportantly,HybridClojureScriptenablesaprogrammertoimplementtheabovescenario
withabout50linesofcodeandasmalladaptationtoanopen-sourcelibrary.Technicallyspeaking,
5https://visjs.org/
6https://getbootstrap.com/MakingHybridLanguages:ARecipe 17
(is
Yellow
(is
(= (longest [[:gray :gray :gray :gray :green :green]
[:gray :gray :gray :gray :gray :gray]
[:gray :gray :gray :gray :yellow :gray]
[:gray :gray :green :green :red :red]
[:gray :gray :gray :yellow :yellow :gray] (= (longest )
[:gray :gray :gray :gray :gray :gray]
[:gray :gray :yellow :red :gray :gray]
[:gray :gray :gray :gray :yellow :gray]
[:gray :gray :gray :gray :gray :gray]])
:yellow))
(a)Textualunittest
:yellow))
(b)Visualunittest
Fig.13. Aninteractive-syntaxextensionforanimplementationof“SettlersofCatan”
the code for the board uses a hexagon-grid library,7 a mostly generic component for drawing
hexagons.Unlikethelibrariesusedintheprecedingsubsection,thislibraryisnotextensible.Thus,
theauthorshadtoforkitandadd45linesofcodeinabouttwohours;theselinesaregeneric,
however,andwouldenhancetheexistinglibraryformanyotherpurposes.
8.3 Meta-Extensions
Meta-extensionsarethemostcomplicatedformofinteractive-syntaxdefinitions.Roughlyspeaking,
ameta-extensionisaninteractive-syntaxextensionwhoseinstanceselaboratetoanotherinteractive-
syntaxextension.
Fields
Name:
Name ≡ Bob Smith
Grade ≡ Grade:
B+
Comments ≡
Comments:
+
Problem 2 Missing.
(a)Anassignment-specificformdefinitionforgraders (b)Instanceoftheassignment-specificform
Fig.14. Aninteractive-syntaxextensionforaformbuilder
Thisexampleconcernstheeditingof(tabular)forms,whichareusefulinthedomainofsoftware
itselfandmanyapplicationdomains.Thecaseofeditingformsisobviouslyself-referential,meaning
aneditorforaformmustbeabletogenerateforms.Theconcreteusecaseisaboutaprogramming
instructor,whomakesgradingformsthatteachingassistantscanusetoreportastudent’sscore.
7https://github.com/Hellenic/react-hexgrid18 LeifAndersen,CameronMoy,StephenChang,andMatthiasFelleisen
Figure 14 illustrates how Hybrid ClojureScript can realize such form editors. Specifically,
Figure14adisplaysaformeditorforcreatinggradingforms.Inadditiontocreatingnewfields,the
instructorcanreorderfieldsandaddoptionalconstraintsonthedatastoredinthosefields.The
elaboratecomputationofthisinteractive-syntaxextensioncreatesextensionswhoseinstances
lookliketheformsinfigure14b.Oncefilledwithstudent-specificdata,thesegeneratedforms
elaboratetodictionaries,whichcanbesubmittedtotheinstructor’sgradebookcode.
Both the form builder itself, as well as the forms created with that builder, exploit another
DOM-basedGUIlibrary.6Usingthislibrary,theimplementationislessthan50linesofcode.For
comparison,Andersenetal.[2020],whocreatedthisexample,reportthattheirformbuildercode
comesinatslightlymorethan100linesofcode.
9 RELATEDWORK
ThefirstsubsectioncompareswithSandblocks[Beinetal.2020],asystemwithsimilarcharacteris-
ticstotheonepresentedinthispaper.Theremainingsubsectionslookatworksinotherseveral
areasthatinspiredthisresearch:(1)languagesandenvironmentsthatallowprogrammerstorun
customprogramsastheyeditcode;(2)graphicalandnon-textualprogramminglanguages;and(3)
projectionalandbidirectionalediting.
9.1 Sandblocks
In February 2020, a research group at the Hasso-Plattner-Institut für Digitales Engineering at
UniversitätPotsdampublishedatechnicalreport[Beinetal.2020]ontheSandblockssystem.the
SmalltalkprogramminglanguageanditsMorphicgraphicaldevelopmentenvironment.Atfirst
glance,thevisualsyntaxextensionslookrelatedtotheonespresentedhere.Itsvisualextensions
canbeinterleavedwithprogramtext.Furthermore,theprojectreportcarefullyspellsoutthedesign
goalthatvisualsyntaxmustnotinterferewithadeveloper’stoolchainandworkflow.
Unfortunately,thedesignfallsshortofitsgoals.Unlikethehybridlanguagepresentedinthis
paper,visualelementsintheSandblocksimplementationarenotgeneral.Forexample,programmers
cannotaddvisualizationsforfielddefinitions,methods,patterns,templates,andothersyntactic
forms.Further,thevisualconstructsdonotrespectthelanguage’sstaticsemanticssuchaslexical
scope.Asaresult,thedeveloper’stoolchainandworkflowarenotpreserved.
9.2 EditTime
Tworatherdistinctpiecesofworkcombineedit-timecomputationwithaformofprogramming.
ThefirstisfoundinthecontextoftheSpoofaxlanguageworkbenchprojectandistrulyabout
general-purposeprogramminglanguages.ThesecondisMicrosoft’smixingoftextualandgraphical
“programs”initsOfficeproductivitysuite.
Spoofax[KatsandVisser2010]isaframeworkfordevelopingprogramminglanguages.Erdweg
etal.[2011]recognizethat,whendevelopersgrowprogramminglanguages,theywouldalsoliketo
growtheirIDEsupport.Forexample,anewlanguagefeaturemayrequireanewstaticanalysis
orrefactoringtransformations,andthesetoolsshouldcooperatewiththelanguage’sIDE.They
thereforeproposeaframeworkforcreatingedit-timelibraries.Inessence,suchlibrarieswould
connectthelanguageimplementationwiththeIDEandspecificallytheIDEtoolsuite.Thefeatures
areextra-linguistic,however,andthusdonotsupportthekindsofabstraction(andmeta-abstraction)
enabledbyinteractive-syntaxextensions.
MicrosoftOfficeplugins,calledVSTOAdd-ins[Microsoft2019],allowauthorstocreatenewtypes
ofdocumentsandembedthemintootherdocuments.Onedevelopermightuseittomakeamusic
type-settingeditor,whileanothermightuseittoputmusicnotationinaPowerPointpresentation.MakingHybridLanguages:ARecipe 19
Eventhoughthistoolsetlivesinthe.NETframework,however,itisalsoanextra-linguisticidea
anddoesnotallowdeveloperstobuildprogrammingabstractions.
9.3 GraphicalandLiveLanguages
Severalprogrammingsystemshaveenabledamixtureofsomegraphicalandtextualprogramming
fordecades.ThefourmostprominentexamplesareBoxer,Hypercard,Scratch,andSmalltalk.
Boxer[diSessaandAbelson1986]allowsdeveloperstoembedGUIelementswithinotherGUI
elements(“boxing”),tonamesuchGUIelements,andtorefertothesenamesinprogramcode.That
is,“programs”consistofgraphicalrenderingsofGUIobjectsandprogramtext(insidetheboxes).
Forexample,aBoxerprogrammercouldcreateaboxthatcontainsanimageofaboardgametile,
nameit,andrefertothisnameinaunittestinasurroundingbox.Boxerdoesnot,however,satisfy
anyoftheotherdesideratalistedinsection2.Inparticular,ithaspoorsupportforcreatingnew
abstractionswithregardtotheGUIelements.
Scratch[Resnicketal.2009]isafullygraphicallanguagesystemwidelyusedineducation.In
Scratch,userswritetheirprogramsbysnappinggraphicalblockstogether.Theseblocksresemble
puzzle pieces and snapping them together creates syntactically valid programs. Scratch offers
limited,butgrowing,capabilitiesforaprogrammertomakenewblocktypes[HarveyandMönig
2010].Thesecreatedblocktypes,however,arethemselvescreatedthroughtext.
LabVIEW[Kodosky2020]isacommercialvisuallanguagetargetedatscientistsandengineers.It
iswidelyadoptedinitstargetcommunities.Whileitispossibletocreaterobustproductsusing
LabVIEW,extendingitwithnewtypesofvisualizationsisnon-trivial,anditisrarelydone.
Hypercard[Goodman1988]givesusersagraphicalinterfacetomakeinteractivedocuments.
AuthorshaveusedHypercardtocreateeverythingfromuserinterfacestoadventuregames.While
Hypercardhasbeenusedinawidevarietyofdomains,itisnotageneral-purposelanguage.
BeforetheSandboxproject,Smalltalk[Bergeletal.2013;GoldbergandRobson1983;Ingalls
etal.2008;Klokmoseetal.2015;Rädleetal.2017]supporteddirectmanipulationofGUIobjects,
often called live programming. Rather than separating code from objects, Smalltalk programs
existinasharedenvironmentcalledtheMorphicuserinterface[MaloneyandImagineering2001].
ProgrammerscanvisualizeGUIobjects,inspectandmodifytheircodecomponent,andre-connect
themtotheprogram.NoconventionalSmalltalksystem,however,trulyaccommodatesgeneral-
purposegraphical-orientedprogrammingasaprimarymode.
GRAIL[Ellisetal.1969a,b]ispossiblyoneoftheoldestexamplesofgraphicalsyntax.Itallows
userstocreateandprogramwithgraphicalflowcharts.Despitetheapparentlimitationsofthis
domain,GRAILwaspowerfulenoughtobeimplementedusingitself.
Notebooks[Ashkenas2019;Bernardinetal.2012;PerezandGranger2007;Wolfram1988]and
Webstrates [Klokmose et al. 2015; Rädle et al. 2017] are essentially a modern reincarnation of
GRAIL,exceptthattheyusearead-eval-printloopapproachtodatamanipulationratherthan
theGUI-basedonemadesoattractivebytheMorphicframework.Thesesystemsdonotpermit
domain-specificsyntaxextensions.
9.4 BidirectionalandProjectionalEditing
Bidirectional editors attempt to present two editable views for a program that developers can
manipulateinlockstep.Oneexample,Sketch-n-Sketch[Chughetal.2016;Hempeletal.2018],
allowsprogrammerstocreateSVG-likepicturesbothprogrammaticallywithtextandbydirectly
manipulatingthepicture.AnotherexampleisDreamweaver[Adobe2019],whichallowsauthors
tocreatewebpagesdirectlyanddropdowntoHTMLwhenneeded.Changesmadeinoneview
propagatebacktotheother,keepingtheminsync.Theinteractive-syntaxmechanisminthispaper
ismoregeneral,however,andthustheauthorsofthispaperconjecturethatitcouldbeusedto20 LeifAndersen,CameronMoy,StephenChang,andMatthiasFelleisen
implementabidirectionaleditingsystem.Dually,ideasfromotherbidirectionaleditingsystems
couldbeusedtoimprovetheprocessofcreatinginteractive-syntaxextensionsinthefuture.
Wizardsandcodecompletiontools,suchasGraphite[Omaretal.2012],performthistaskin
onedirection.AsmallgraphicalUIcangeneratetextualcodeforaprogrammer.However,once
finished,theprogrammercannotreturntothegraphicalUIfromtext.
Projectionaleditingaimstogiveprogrammerstheabilitytoeditprogramsvisually.8Indeed,in
thisworld,therearenoprogramsperse,onlygraphicallypresentedabstractsyntaxtrees(AST)
thatadevelopercaneditandmanipulate.ThesystemcanthenrendertheASTsasconventional
programtext.Themostwell-knownsystemisMPS[Pechetal.2013;VoelterandLisson2014].
Ithasbeenusedtocreatelargenon-textualprogrammingsystems[Voelteretal.2012].Unlike
interactive-syntaxextensions,projectionaleditorsmustbemodifiedintheirhosteditorsandalways
demandseparatededit-timeandrun-timemodules.Suchaseparationmeansalleditorsmustbe
attachedtoaprogramproject,theycannotbeconstructedlocallywithinafile.Itthereforeisrather
difficulttoabstractoverthem.
Barista [Ko and Myers 2006] is a framework that lets programmers mix textual and visual
programs.Thegraphicalextensions,however,aretiedtotheBaristaframework,ratherthanthe
programsthemselves.LikeMPS,BaristasavestheASTsforaprogram,ratherthantherawtext.
Larch[Frenchetal.2014]alsoprovidesahybridvisual-textualprogramminginterface.Programs
written in this environment, however, do not contain a plain text representation. As a result,
programmerscannoteditprogramsmadeintheLarchEnvironmentinanyothereditor.
TheHazelprojectandLivelits[Omaretal.2021]arealsocloselyrelatedtointeractive-syntax
extensions.Likeeditors,theLivelitsproposalaimstoletprogrammersembedgraphicalsyntax
intotheircode.Incontrasttointeractive-syntaxextensions,whichusephasestosupporteditor
instantiationandmanipulation,theproposedLivelitswillemploytyped-holeediting.
EisenbergandKiczales[2007]introducedanEclipsepluginthatbroughtgraphicalelementsto
Java.Likeinteractive-syntax,thesegraphicalelementshaveaplaintextrepresentation,storedas
Javaannotations.Thisimpliesthatprogrammerscanwritecodewiththispluginandviewitin
anyplain-texteditor.Theplugindiffersfrominteractive-syntaxextensions,however,intwoways:
(1)thepluginsarelessexpressivethanelaborators;and(2)thewaynewtypesofextensionsare
createdlimitsprogrammers’abilitytoabstractoverthem.Forexample,programmerscannotcreate
meta-instanceswiththisplugin.
10 CONCLUSION
ThispaperdescribesarecipeforcreatingahybridprogramminglanguageandIDEwhichcan
supporttheexactrightmixoftextualandinteractivevisualcodethatprogrammersneedfortheir
problemdomain.Further,bystartingwithanappropriateexistinglanguage,IDE,andGUIlibrary,the
recipeproduceshybridresultsthatareeasytouseduetotheirfamiliaritytoprogrammers;remain
compatiblewithunadaptedlanguageimplemenationsandtools;andalsopreserveaprogrammer’s
workflow.Finally,thepaperdemonstratesthesebenefitsconcretelybyusingtherecipetocreate
Hybrid ClojureScript and a hybrid CodeMirror-based IDE. The evaluation shows that they
improveonmanyoftheshortcomingsofpriorhybridtextual-visualsolutions.
Therecipediscussedinthispapersuggestsseveraldirectionsforfuturework.Herearesome
examplesofpossiblefuturedirections.First,thereareseveralwaysdevelopersusevisualizations
whenprogramming,everythingfromviewingchartstodisplayingcallgraphs.Afuturestudycan
classifythesevisualizationsanddiscusshowinteractivesyntaxcanhandlethem.Second,while
thispaperprovidesarecipeforturningalanguageintoahybridvariant,alanguageserverprotocol
8IntentionalSoftware[Simonyietal.2006]seemsrelated,butthereislittleinformationintheliteratureaboutthisproject.MakingHybridLanguages:ARecipe 21
couldbeusedtohelpautomatethisprocess.Afutureattemptcandescribeandanalyzethisprotocol.
Finally,whiletheapplicationoftherecipetoClojureScriptandCodeMirrorisclearlysuccessful,
thenextstepistodemonstratetheapplicabilityoftherecipetoalanguagethatisnotalready
macro-extensible.Thepapersketcheshowthiscanbeaccomplished;theonlytrueproof,though,
isanactualimplementation.
ACKNOWLEDGMENTS
ThisresearchwaspartiallysupportedbyNSFgrants1823244and20050550.22 LeifAndersen,CameronMoy,StephenChang,andMatthiasFelleisen
ADDITIONALWORKFLOWEVALUATIONS
Section7evaluatedtheusabilityofvarioushybridlanguagesystemswithrespecttothemajor
operationsthatprogrammersusetoeditsoftware.Thissectionfocusesonthemoreminorpro-
grammeractions.Notethatthisevaluationconsidersahybridlanguageusableevenifitinhibits
oneoftheminorcodingactions.Nonetheless,ananalysisoftheminoractionsisstillincluded,with
theunderstandingthateachinhibitedcodingactionincreasesthefrictionprogrammersexperience
whenusinginteractivesyntaxanddecreasesitsusability.
Activity Literature thispaper Andersenetal.[2020]
System — HybridRacket
Language ClojureScript Racket
GUI DOM bespokeGUI
Abstraction ✗ ✓
Autocomplete ✓ ✓
Coaching ✓ ✓
CodeFolding ✗ ✓
Comments ~ ~
Comparison ✗ ✓
Debugging ✗ ✓
DependencyUpdate ✓ ✓
Elimination ✗ ✓
HyperlinkingDefinitionsandUses ✗ ✓
Merging ✗ ✓
Migration ~ ~
Multi-CursorEditing ~ ~
Refactoring ✗ ✓
Reflow ✓ ✓
Style ✓ ✓
Undo/Redo ✓ ✓
~ Orthogonaltointeractive-syntaxextensions.
Fig.15. Interactivesyntaxvscodingactions,continued(alsosee10)
Theminorprogrammeractionsthatareevaluatedare:
• Abstractionmeansgeneralizingtwo(ormore)piecesofcodeintoasingleonethatcanthen
beinstantiatedtoworkintheoriginalplaces(andmore).Interactivesyntaxmustfacilitate
convertingonetypeofinstanceintoanotherifabstractioninvolvesthecodeforadefinition
ofinteractivesyntax.
• Autocompleteallowsprogrammerstochoosedescriptivenamesandenterthemeasily;recent
formsofthiscodeactioncompleteentirephrasesofcode.Itrequiressemanticknowledgeof
theprogramminglanguage.Intheidealcase,anIDEforahybridlanguageshouldsupport
autocompletionoftextualprefixesintoaninstanceofinteractivesyntax.
• Coachingisabouttheback-and-forthbetweenprogrammersandanalysistools.Acoaching
tool displays the results of a (static or dynamic) analysis in the editor and (implicitly)
requestsareaction.Asimpleexampleistheunderliningofunboundvariables;anadvanced
onemayhighlightexpressionsthatforceregisterspilling.ThechallengeisthataddingMakingHybridLanguages:ARecipe 23
interactivesyntaxmeansextendingthelanguageinanon-functionalmanner,anddoingso
comeswithitsinherentproblems.
• CodeFoldingenablesIDEstohideblocksofcodewhileediting.Developersliketopresent
overviewsofcodewithcodefolded.InteractivesyntaxmustnotinhibitthisIDEaction.
• Commentsdonotaffectinteractivesyntax.
• Comparison,oftenreferredtoasdiffing,isneededtocomprehendsmallchangestoexisting
codeasthosearecreated.Whilethetoolisavailableonsaythetextofgitrepositories,itis
moreoftenusedinsideofIDEs.Ifinteractivesyntaxalwayscomeswithtextualequivalents,
codecomparisonsshouldcontinuetoworkintheconventionalmanner.
• Debuggingdemandsrunningaprograminastep-by-stepfashion,i.e.,stepsapersoncan
movethroughandcomprehendsequentially.Thecommentsoftheprecedingbulletapply
here.
• DependencyUpdateisaboutupdatingpackagesandlibrariesforvariousreasons.Achange
madetothedefinitionofaninteractive-syntaxextensionisreflectedinusesofthatextension
automatically.
• Eliminationisthedualofabstraction,meaningin-liningthecodeforanexistingabstraction.
Thecommentsconcerningtheabstractionbulletapplyhere,too.
• HyperlinkingDefinitionsandUsesallowsprogrammerstoeasilynavigatebetweendefinitions
anduses.Tohyperlinkpiecesofcodeproperly,anIDEmustunderstandboththetextand
thesemanticsofcode.Whetherthisformoflinkingworksproperlydependsonhoweasily
anIDEcangetholdofthetextthatcorrespondstoaninstanceofinteractivesyntax.
• Mergingtwoblocksofcodeisthenaturalextensiontocomparison.Insteadofviewinga
reportofthedifference,however,mergingattemptstogeneratesyntacticallycorrectcode
thatrepresentstwosourcesderivedfromoneoriginalpoint.Likecomparison,mergingis
clearlyatext-basedactionbutmoresophisticated.Researchisneededtoinvestigatehow
wellmergingworksinthepresenceofinteractivesyntax.
• Migration happens when a dependency or platform changes, breaking backwards com-
patibility.Frequentlythisrequiressmalltweaksthroughanentirecodebase.Supporting
extensionmigrationsufficeshere.
• Multi-CursorEditingallowstwo(ormore)developerstoconcurrentlyeditthesameprogram.
Thisisorthogonaltointeractivesyntax.
• Refactoringisasyntax-orevensemantics-awaresearch-and-replaceaction.Mostsimple
refactoring actions should work as-is even in the presence of interactive syntax. More
researchisneededtounderstandwhetherrefactoringworkswhensyntacticdifferences
involveinteractivesyntax.
• ReflowautomaticallytransformsprogramtextinanIDEbuffertoconformtosomestyle
standards,e.g.,properindentation.IfanIDEaccommodatesinstancesofinteractivesyntax,
reflowcontinuestowork.
• Stylingchangesaspectsofcodedisplay,e.g.,thefontsizeorthecolortheme.Instancesof
interactive-syntaxmaybenefitfromexplicitlycoordinatingwithstyleoperations.
• Undo/Redoisstraightforwardfortext.Forinteractivesyntax,eachextensioncanpackage
multiplechangesintoasingleundo/redostep.
Thetableinfigure15showshowAndersenetal.[2020]’sdesigncompareswiththeonepresented
inthispaperforeachoperation.24 LeifAndersen,CameronMoy,StephenChang,andMatthiasFelleisen
REFERENCES
Adobe.Adobedreamweavercchelp,2019.URLhttps://helpx.adobe.com/pdf/dreamweaver_reference.pdf.
LeifAndersen,MichaelBallantyne,andMatthiasFelleisen.Addinginteractivevisualsyntaxtotextualcode.Proc.ACM
Program.Lang.,4(OOPSLA),nov2020.doi:10.1145/3428290.URLhttps://doi.org/10.1145/3428290.
JeremyAshkenas.Observable:Theusermanual,2019.URLhttps://observablehq.com/@observablehq/user-manual.
SamuelBaxter,RachitNigam,JoeGibbsPolitz,ShriramKrishnamurthi,andArjunGuha.Puttinginallthestops:Execution
controlforjavascript. InProceedingsofthe39thACMSIGPLANConferenceonProgrammingLanguageDesignand
Implementation,PLDI2018,page30–45,NewYork,NY,USA,2018.AssociationforComputingMachinery. ISBN
9781450356985.doi:10.1145/3192366.3192370.URLhttps://doi.org/10.1145/3192366.3192370.
LeonBein,TomBraun,BjörnDaase,ElinaEmsbach,RobertHirschfeld,LeonMatthes,ToniMattis,JensMönig,Stefan
Ramson,PatrickRein,etal.SandBlocks:IntegrationVisuellerandTextuellerProgrammelementeinLive-Programmiersysteme,
volume132.UniversitätsverlagPotsdam,2020.
AlexandreBergel,DamienCassou,StéphaneDucasse,andJannikLaval.DeepIntoPharo.SquareBracketAssociates,2013.
L.Bernardin,P.Chin,P.DeMarco,K.O.Geddes,D.E.G.Hare,K.M.Heal,G.Labahn,J.P.May,J.McCarron,M.B.Monagan,
D.Ohashi,andS.M.Vorkoetter.Mapleprogrammingguide,2012.
RaviChugh,BrianHempel,MitchellSpradlin,andJacobAlbers.Programmaticanddirectmanipulation,togetheratlast.
SIGPLANNot.,51(6):341–354,jun2016. ISSN0362-1340. doi:10.1145/2980983.2908103. URLhttps://doi.org/10.1145/
2980983.2908103.
WilliamClingerandJonathanRees. Macrosthatwork. POPL’91,page155–162,1991. doi:10.1145/99583.99607. URL
https://doi.org/10.1145/99583.99607.
ChristosDimoulas,MaxS.New,RobertBruceFindler,andMatthiasFelleisen. Ohlord,pleasedon’tletcontractsbe
misunderstood(functionalpearl).InJacquesGarrigue,GabrieleKeller,andEijiroSumii,editors,Proceedingsofthe21st
ACMSIGPLANInternationalConferenceonFunctionalProgramming,ICFP2016,Nara,Japan,September18-22,2016,pages
117–131,2016.doi:10.1145/2951913.2951930.
A.AdiSessaandH.Abelson.Boxer:Areconstructiblecomputationalmedium.Commun.ACM,29(9):859–868,sep1986.
ISSN0001-0782.doi:10.1145/6592.6595.URLhttps://doi.org/10.1145/6592.6595.
AndrewD.EisenbergandGregorKiczales.Expressiveprogramsthroughpresentationextension.InProceedingsofthe6th
InternationalConferenceonAspect-OrientedSoftwareDevelopment,AOSD’07,page73–84,NewYork,NY,USA,2007.
AssociationforComputingMachinery.ISBN1595936157.doi:10.1145/1218563.1218573.URLhttps://doi.org/10.1145/
1218563.1218573.
ThomasO.Ellis,JohnF.Heafner,andW.L.Sibley.Thegraillanguageandoperations.TechnicalReportRM-6001-ARPA,
Rand.Corp.SantaMonicaCA,1969a.
ThomasO.Ellis,JohnF.Heafner,andW.L.Sibley. Thegrailproject:Anexperimentinman-machinecommunications.
TechnicalReportRM-5999-ARPA,Rand.Corp.SantaMonicaCA,1969b.
SebastianErdweg,LennartC.L.Kats,TillmannRendel,ChristianKästner,KlausOstermann,andEelcoVisser.Growing
alanguageenvironmentwitheditorlibraries. SIGPLANNot.,47(3):167–176,oct2011. ISSN0362-1340. doi:10.1145/
2189751.2047891.URLhttps://doi.org/10.1145/2189751.2047891.
GeraldFarin.CurvesandSurfacesforComputer-AidedGeometricDesign:APracticalGuide.Elsevier,2014.
G.W.French,J.RichardKennaway,andA.M.Day. Programsasvisual,interactivedocuments. Software:Practiceand
Experience,44(8):911–930,2014.
AdeleGoldbergandDavidRobson.Smalltalk-80:TheLanguageandItsImplementation.Addison-WesleyLongmanPublishing
Co.,Inc.,USA,1983.ISBN0201113716.
D.Goodman.TheCompleteHypercardHandbook.BantamBooks,Inc.,USA,1988.ISBN055334577X.
BrianHarveyandJensMönig.Bringing"noceiling"toscratch:Canonelanguageservekidsandcomputerscientists?Proc.
Constructionism,pages1–10,2010.
BrianHempel,JustinLubin,GraceLu,andRaviChugh. Deuce:Alightweightuserinterfaceforstructuredediting.
InProceedingsofthe40thInternationalConferenceonSoftwareEngineering,ICSE’18,page654–664,NewYork,NY,
USA,2018.AssociationforComputingMachinery. ISBN9781450356381. doi:10.1145/3180155.3180165. URLhttps:
//doi.org/10.1145/3180155.3180165.
DanielIngalls,KrzysztofPalacz,StephenUhler,AnteroTaivalsaari,andTommiMikkonen.Thelivelykernelaself-supporting
systemonawebpage.InRobertHirschfeldandKimRose,editors,Self-SustainingSystems,pages31–50,Berlin,Heidelberg,
2008.SpringerBerlinHeidelberg.ISBN978-3-540-89275-5.
LennartC.L.KatsandEelcoVisser.Thespoofaxlanguageworkbench:Rulesfordeclarativespecificationoflanguagesand
ides. SIGPLANNot.,45(10):444–463,oct2010. ISSN0362-1340. doi:10.1145/1932682.1869497. URLhttps://doi.org/10.
1145/1932682.1869497.
ClemensN.Klokmose,JamesR.Eagan,SiemenBaader,WendyMackay,andMichelBeaudouin-Lafon.Webstrates:Shareable
dynamicmedia. InProceedingsofthe28thAnnualACMSymposiumonUserInterfaceSoftwareandTechnology,UISTMakingHybridLanguages:ARecipe 25
’15,page280–290,NewYork,NY,USA,2015.AssociationforComputingMachinery. ISBN9781450337793. doi:
10.1145/2807442.2807446.URLhttps://doi.org/10.1145/2807442.2807446.
AmyJ.KoandBradA.Myers.Barista:Animplementationframeworkforenablingnewtools,interactiontechniquesand
viewsincodeeditors.InProceedingsoftheSIGCHIConferenceonHumanFactorsinComputingSystems,CHI’06,page
387–396,NewYork,NY,USA,2006.AssociationforComputingMachinery.ISBN1595933727.doi:10.1145/1124772.1124831.
URLhttps://doi.org/10.1145/1124772.1124831.
JeffreyKodosky.Labview.Proc.ACMProgram.Lang.,4(HOPL),jun2020.doi:10.1145/3386328.URLhttps://doi.org/10.1145/
3386328.
EugeneE.Kohlbecker,DanielP.Friedman,MatthiasFelleisen,andBruceF.Duba. Hygienicmacroexpansion. LFP’86,
pages151–161,1986.doi:10.1145/319838.319859.
JohnMaloneyandWaltDisneyImagineering.Anintroductiontomorphic:Thesqueakuserinterfaceframework.Squeak:
OpenPersonalComputingandMultimedia,2001.
Microsoft.Officeandsharepointdevelopmentinvisualstudio,2019.URLhttps://docs.microsoft.com/en-us/visualstudio/
vsto/office-and-sharepoint-development-in-visual-studio?view=vs-2017.
CyrusOmar,YoungSeokYoon,ThomasD.LaToza,andBradA.Myers.Activecodecompletion.In201234thInternational
ConferenceonSoftwareEngineering(ICSE),pages859–869,2012.doi:10.1109/ICSE.2012.6227133.
CyrusOmar,DavidMoon,AndrewBlinn,IanVoysey,NickCollins,andRaviChugh.FillingtypedholeswithliveGUIs.In
Proceedingsofthe42ndACMSIGPLANInternationalConferenceonProgrammingLanguageDesignandImplementation,
PLDI2021,page511–525,NewYork,NY,USA,2021.AssociationforComputingMachinery.ISBN9781450383912.doi:
10.1145/3453483.3454059.URLhttps://doi.org/10.1145/3453483.3454059.
VaclavPech,AlexShatalin,andMarkusVoelter. Jetbrainsmpsasatoolforextendingjava. InProceedingsofthe2013
InternationalConferenceonPrinciplesandPracticesofProgrammingontheJavaPlatform:VirtualMachines,Languages,
andTools,PPPJ’13,page165–168,NewYork,NY,USA,2013.AssociationforComputingMachinery.ISBN9781450321112.
doi:10.1145/2500828.2500846.URLhttps://doi.org/10.1145/2500828.2500846.
FernandoPerezandBrianE.Granger. IPython:Asystemforinteractivescientificcomputing. ComputinginScience&
Engineering,9(3):21–29,2007.doi:10.1109/MCSE.2007.53.
BobbyPowers,JohnVilk,andEmeryD.Berger.Browsix:Bridgingthegapbetweenunixandthebrowser.SIGPLANNot.,52
(4):253–266,apr2017.ISSN0362-1340.doi:10.1145/3093336.3037727.URLhttps://doi.org/10.1145/3093336.3037727.
RomanRädle,MidasNouwens,KristianAntonsen,JamesR.Eagan,andClemensN.Klokmose. Codestrates:Literate
computingwithwebstrates.InProceedingsofthe30thAnnualACMSymposiumonUserInterfaceSoftwareandTechnology,
UIST’17,page715–725,NewYork,NY,USA,2017.AssociationforComputingMachinery.ISBN9781450349819.doi:
10.1145/3126594.3126642.URLhttps://doi.org/10.1145/3126594.3126642.
MitchelResnick,JohnMaloney,AndrésMonroy-Hernández,NatalieRusk,EvelynEastmond,KarenBrennan,AmonMillner,
EricRosenbaum,JaySilver,BrianSilverman,andYasminKafai.Scratch:Programmingforall.Commun.ACM,52(11):
60–67,nov2009.ISSN0001-0782.doi:10.1145/1592761.1592779.URLhttps://doi.org/10.1145/1592761.1592779.
CharlesSimonyi,MagnusChristerson,andShaneClifford.Intentionalsoftware.SIGPLANNot.,41(10):451–464,oct2006.
ISSN0362-1340.doi:10.1145/1167515.1167511.URLhttps://doi.org/10.1145/1167515.1167511.
MarkusVoelterandSaschaLisson.Supportingdiversenotationsinmps’projectionaleditor.InGEMOC,pages7–16,2014.
MarkusVoelter,DanielRatiu,BernhardSchaetz,andBerndKolb.mbeddr:Anextensiblec-basedprogramminglanguage
andideforembeddedsystems.InProceedingsofthe3rdAnnualConferenceonSystems,Programming,andApplications:
SoftwareforHumanity,SPLASH’12,page121–140,NewYork,NY,USA,2012.AssociationforComputingMachinery.
ISBN9781450315630.doi:10.1145/2384716.2384767.URLhttps://doi.org/10.1145/2384716.2384767.
StephenWolfram.TheMathematicaBook.CambridgeUniversityPress,1988.