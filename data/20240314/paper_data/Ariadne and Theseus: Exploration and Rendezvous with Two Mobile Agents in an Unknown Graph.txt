Ariadne and Theseus: Exploration and Rendezvous
with Two Mobile Agents in an Unknown Graph
Romain Cosson
romain.cosson@inria.fr
Abstract
Depth-first search generalizes the ancient maze-solving
heuristic ‘right-hand-on-the-wall’which can be used in
We investigate two fundamental problems in mobile theabsenceofcycles,i.e. fortrees. Giventheabilityto
computing: exploration and rendezvous, with two dis- mark previously explored nodes (e.g. with a chalk), an
tinct mobile agents in an unknown graph. The agents agentusing depth-first searchis guaranteedto traverse
can read and write information on whiteboards that eachedgeonceinbothdirectionsandthenreturntothe
are located at all nodes. They both move along one origin. In modern terms, we say it achieves graph ex-
adjacent edge at every time-step. In the exploration plorationin2mmoves,wheremisthenumberofedges
problem, both agents start from the same node of the of the graph. The algorithm is optimal in the sense of
graph and must traverseall of its edges. We show that competitive analysis Miyazaki et al. [2009].
asimplevariantofdepth-firstsearchachievescollective
exploration in m synchronous time-steps, where m is
Main results. In the myth, Theseus can count on
the number of edges of the graph. This improves the
the help of the ingenious Ariadne. In this paper, we
competitive ratio of collective graph exploration. In
startbystudyingthequestionofwhethertwoagentsini-
the rendezvousproblem,the agentsstartfromdifferent
tially located at the same node can solve a maze faster
nodes of the graph and must meet as fast as possible.
thanasingleagent. Weanswerbytheaffirmativeusing
We introduce an algorithm guaranteeing rendezvous in
the formalism of collective exploration introduced by
at most 3m time-steps. This improves over the so-
2 Fraigniaud et al. [2006]. Specifically, our main contri-
called ‘wait for Mommy’ algorithm which requires 2m
bution to this problemis a collectivegraphexploration
time-steps. All our guaranteesare derivedfroma more
algorithmfortwoagentswhichrequiresexactlymtime-
generalasynchronoussettinginwhichthespeedsofthe
steps to explore any tree with m edges. It is the first
agents are controlledby an adversaryat all times. Our
methodtoprovideaquantitativeimprovementoverthe
guarantees also generalize to weighted graphs, if the
guarantee provided by a single depth-first search, par-
number of edges m is replaced by the sum of all edge
tially answering a question of Brass et al. [2014]. The
lengths.
algorithm is presented in Section 3.
We then consider the problem of ‘rendezvous’ in which
Keywords. mobile computing, distributed communi-
thetwoagentsstartfromdifferentnodesandmustmeet
cation, collective exploration, rendezvous, asynchrony.
somewhere in the graph. While the problem has at-
tracteda richbody of literature (see the surveyof Pelc
1 Introduction [2019]) the setting where the graph is unknown and
the agents are distinguishable (i.e. they may use differ-
In 1952, Claude Shannon presented an electromechani- entalgorithms)hassurprisinglyreceivedlittleattention.
cal mouse capable of finding the exit of a maze embed- Thebestmethodathandforthisproblemisthesimple
ded in a 5 5 grid. The device was baptised ‘Theseus’ ‘Wait for Mommy’ algorithm in which one agent stays
×
in reference to the mythical hero who must escape an immobile while the other performs a depth-first search,
inextricable labyrinth after having killed the ferocious achieving rendezvous in at most 2m time-steps. Our
Minotaur. Shannon’s mouse is arguably the first au- contribution to this problem is an algorithm achieving
tonomousmobiledeviceKlein[2018],itinspiredanum- rendezvous of two mobile agents in only 3m time-
⌈2 ⌉
ber of micro-mouse competitions globally. steps. The algorithm is presented in Section 4.
The navigation algorithm used by Shannon’s mouse is We formalize in Section 2 an asynchronous navigation
known today as ‘depth-first search’. Its analysis dates modelinwhichanadversarychoosesateachroundthe
back to Lucas [1883], making it one of the few al- agent which may perform a move. Our guarantees for
gorithms which preceded the era of computer science. the synchronoussetting are directly derived from more
1
4202
raM
21
]AM.sc[
1v84770.3042:viXrageneralresultswhichholdforthisasynchronoussetting. ‘depth-first search ordering’ which corresponds to the
We also introduce the practical formalism of ‘naviga- order in which the nodes of a graph would be discov-
tion tables’ which could be applicable to other aspects ered by Tr´emaux’s algorithm ; however it does not il-
of mobile computing. Finally, we explain in Section 5 lustrate well the application of the method to mazes,
the generality of our model of asynchrony, and show since it implicitly assumes that the searchercan ‘jump’
that the guarantees of our algorithms are preserved on between previously discovered nodes, just like a com-
weighted graphs. puter can jump between different addresses in mem-
ory in constant time (RAM model). Depth-first search
orderings are key ingredients of so-called ‘linear algo-
1.1 Related works
rithms’ for graphs, the study of which was initiated by
HistoryofDepth-FirstSearch. Depth-firstsearch Tarjan [1972] to compute the strongly connected com-
(DFS) isperhapsthe mostfundamentalalgorithmfora ponents of a directed graph and the biconnected com-
mobile agent in a graph. It will be a basic component ponentsofanundirectedgraph. Surprisingly,somefun-
of the methods presented in this paper. We thus start damental questions about depth-first search orderings
with a brief history of the algorithm. remain open today Aggarwaland Anderson [1987].
The first formal presentation of depth-first search for
graphsappearsinthelate19thcentury. Thealgorithm Single mobile agent in an unknown graph. We
is designed by Charles Pierre Tr´emaux in response to recall some insightful and more recent results on the
an open problem of Lucas [1883] asking, in eloquent topic of graph exploration with a single agent, and re-
terms, whether there exists a deterministic algorithm fer to the survey of Das [2019] for more details. Specif-
for solving mazes: ically, we observe that the literature usually varies in
the following modelling choices.
Reader, imagineyourself lost inthecrossroads
of a labyrinth, in the galleries of a mine, in Storage. The terms refers to maximum amount of in-
thequarries of thecatacombs, under the shady formation that can be stored at any node of the graph
alleys of a forest. You don’t have the thread of (e.g. on a whiteboard) and is quantified in bits. The
Ariadneinyourhand,andyouareinthesame depth-first search algorithms presented in Lucas [1883]
situation as Little Tom Thumb after the birds and Tarry [1895] requires (∆) bits of storage, where
O
have eaten the breadcrumbs he left along his ∆isthe maximumdegreeofthegraph. Thisisbecause
path. What can you do to find your way back thesearchermuststoreoneachnodethelistofadjacent
to the labyrinth, the mine shaft, the entrance portnumbersthatarealreadyexplored. Anotherexplo-
to the catacombs, or the woodsman’s cabin? ration method, called the ‘rotor router’ algorithm only
requires (log(∆)) bits of memory but needs (Dm)
EdouardLucas, The Game of Labyrinths, Lucas [1883]. O O
round to achieve exploration, where D is the diameter
of the graph (i.e. the maximum distance between any
two nodes) Yanovski et al. [2003], Menc et al. [2017].
Tr´emaux’s Depth-First Search can synthetically be de-
scribed as follows (see Algorithm 1 for details). The Memory. The term refers to the maximum on-board
searcher (say, Ariadne) always attempts to go through memorythattheagentmayuseduringnavigation. Itis
apassagethatshehasnottraversed,butpreferstoback- alsoquantifiedinbits. Inalabeledgraph, (m)bitsof
O
trackratherthantocrossherownpath. Whensheisat memory are sufficient to represent the graph, and thus
anodeofwhichallpassageshavebeenexplored,sheex- to implement DFS (even without storage). Universal
itsthisnodeusingthepassagebywhichshefirstdiscov- exploration sequences, introduced by Reingold [2008],
ered it. Shortly after Tr´emaux, Tarry [1895] observed allow to explore a graph with just (log(n)) memory,
O
thataslightlydifferentalgorithmentailsthesameguar- and no storage, but only come with a poly(n) explo-
antees. The specificities of this variantare discussed in ration guarantee, where n is the number of nodes in
Even [2011]. the graph.
Later,depth-first searchreceiveda lotof attentionout- Feedback. The term refers to the information revealed
side mobile computing, due to the growing body of re- totheagentwhenitattainsanewnode. Alineofwork
searchonother aspects of theoreticalcomputer science initiated by Kalyanasundaramand Pruhs [1994] stud-
(see e.g. Golomb and Baumert [1965]). The algorithm ies the case where the entire neighbourhood of a node
is usually implemented by stacking all the neighbours isrevealedtotheagentwhenthatnodeisvisited. Their
of the last discovered node, and applying the method goal is for the agent to find a path passing through all
recursively until all nodes have been discovered (and nodes and that is only a constant factor times longer
the stack is empty). This implementation leads to a thananoptimalsolutiontothetravelingsalesmanprob-
2lem. Thecompetitiveratioforthisproblemisknownto couldbeimproved. Thispaperanswersaffirmativelyto
lie between (logn) andΩ(1) andseveralspecialcases thisquestionbyshowingthattwoagentsmaygotrough
O
have been studied, e.g. Megow et al. [2012], Birx et al. all edges of a graph in m rounds, thus improving the
[2021], Akker et al. [2024]. competitiveratiofrom2ktok,foranyk 2(seediscus-
≥
sioninSection3.3). We notethatsomespecialcasesof
In this paper, we shall focus on algorithms which use
collective graph exploration have also been considered
(∆) storage per node, no memory, and no additional
O in the litterature, such as grid graphs with rectangular
feedback. This corresponds to the original setting of
obstaclesOrtolf and Schindelhauer[2012],Cosson et al.
the depth-first search algorithm, as presented in Lucas
[2023] and cycles Higashikawa et al. [2014].
[1883].
Collective tree and graph exploration. This
problem models the exploration of an unknown envi- Finally, we observe that collective exploration can be
ronmentbymultiple mobileagents. Thesettingwasin- generalized to the asynchronous setting (i.e. when
troducedbyFraigniaud et al.[2006]forthespecialcase agentshaveadversarialspeeds)andtoweightedgraphs
of trees andeasily adapts to generalgraphs Brass et al. (i.e. where the weights represent a cost associated to
[2011]. traversing an edge). Our algorithm and its guarantee
adapt to these generalizations.
Consider an unknown graph G = (V,E). A team of
k N agents initially located at a same node is tasked
∈
to traverse all edges of the graph. The agents move
synchronously along one adjacent edge at each round.
An edge is revealed only when one agent becomes ad-
jacent to that edge. For an exploration algorithm ALG,
we denote by ALG(G,k)the number ofrounds the team
Rendezvous of two mobile agents. We provide a
takes to traverse all edges of G. The literature mainly
short overview of the rendezvous problem, and refer to
focuses on the analysis of the competitive ratio of ALG
the survey of Pelc [2019] for more details. We note
defined by,
that most of the effort on the problem has been on the
ALG(G,k) questionoffeasibilityofrendezvous,ratherthanonthe
competitive-ratio(ALG,k)=max , runtime (see e.g. Guilbault and Pelc [2011]). The rea-
G OPT(G,k)
son why rendezvous might be infeasible even when the
where OPT(G,k) denotes the minimum amount of graph is known by the agents, is that it is generally
rounds required by the team to go through all edges assumed that the agents are indistinguishable (except
of G if the graph was known in advance. perhaps by some personal label or by their initial po-
sition in the graph) and that they must use the same
The analysis of this competitive ratio has been quite
deterministic algorithm. The most obvious example of
fruitful for the special case of trees (i.e. when G is
an infeasible rendezvous is that of two identical agents
assumed to have no cycle). To date, the best com-
in the ring Kranakis et al. [2003] for which there is no
petitive ratio is in (k/log(k)) if the agents use dis-
O waytobreakthesymmetry. Theproblemofrendezvous
tributed communication (i.e. they communicate only
naturally generalizes to asynchronous models of mo-
through node storage) Fraigniaud et al. [2006] and is
bile computing De Marco et al. [2006], Czyzowicz et al.
in (√k) if the agents are allowed complete commu-
O [2012], Dieudonn´e et al. [2013]. In contrast to most
nication (i.e. they are controlled by one central algo-
previous works, we consider the situation where the
rithm) Cosson and Massouli´e [2024]. Several other col-
agents have distinct algorithms and can communicate
lective exploration algorithms have been proposed for
by readingandwriting onthe whiteboardsatallnodes
trees,e.g. Brass et al.[2011], Ortolf and Schindelhauer
(i.e. with storage). This setting is usually treated in
[2014], Cosson [2024].
the rendezvous literature by the aforementioned ‘Wait
On the contrary, very little is known about collective for Mommy’ algorithm Pelc [2019], which requires 2m
exploration of general graphs. To the best of our synchronous time steps. Our rendezvous algorithm im-
knowledge, the only general non-trivial guarantee is in proves this quantity to 3m. We note that replacing
2
2m/k+2n(lnk +1) Brass et al. [2014]. To date, the depth-firstsearchby thealgorithmofPanaite and Pelc
best competitive ratioremains in 2k andis attainedby [1999] in the ‘Wait for Mommy’ algorithm leads to a
the trivial algorithm that uses a single agent to per- rendezvousinm+3n,whichisbetter forgraphswitha
form depth-first search and keeps the k 1 remaining super-linear number of edges, but this alternative does
−
agents idle at the origin. It was highlighted as an open notprovidesatisfactoryguaranteesforweightedgraphs
question by Brass et al. [2014] whether this guarantee and does not deal with asynchrony.
32 Problem setting and defini-
The generalityofthis modelofasynchronyisexplained
tions in Section 5. In particular, this model will encapsulate
the situation where the adversary decides at all times
the (continuous) speeds of the agents.
2.1 Navigation model
The algorithms presented in this paper rely on the as- 2.2 Tr´emaux’s algorithm
sumption that it is possible to read and write informa-
tiononwhiteboardslocatedatallnodes. Itwillbemore We now turn to the formal description of Tr´emaux’s
convenient to assume that there are multiple (smaller) algorithm (Algorithm 1) in the model of mobile com-
whiteboardsateachnode,oneforeachpassage adjacent puting defined above. The agent is able to mark pas-
to the givennode. Apassage(more commonlyreferred sagesusing markers E (Explored),F(First entry),and
to as a port) is defined as the intersection of an edge B (Backtrack)which may replace the default marker
∅
with one of its endpoints. The denomination is bor- (unmarked). For the sake of self-containedness,we pro-
rowedfromEven[2011]. Obviously,anexplorationalgo- vide a brief analysis of Tr´emaux’s algorithm and refer
rithmrequiring (1)storageoneachpassageentailsan to Even [2011] for more details.
O
associated exploration algorithm requiring (∆) stor-
O In pseudo-code and proofs, we shall use the notation
age on each node, where ∆ is the maximum degree of e
u v to denote the passage (i.e. port) of edge e =
the graph. −→
(u,v) E at node u V. The value of v becomes
∈ ∈
knowntoanagentatuonlyifitchoosestomovealong
Move of an agent. In our model of mobile comput-
this passage.
ing, the move of an agent decomposes in the following
steps: Algorithm 1 DFS, Tr´emaux’s algorithm
S1 Theagentreadsatitslocationu,itdecideswhether 1: if there is a passage u e v marked B then
exploration continues, and if so it chooses a port 2: Mark u e v by E a−→ nd traverse e
(or passage) at u denoted p u; 3: else if ther−→ e is an unmarked passage u e v then
e −→
4: Mark u v by E and traverse e
S2 The agent may change the marker of p u;
5: if v
was−→
previously discovered then
S3 The agent uses p u to traverse the chosen edge; 6: Mark v e u by B
−→
7: else
S4 Theagentarrivesatvthroughportp ,itreadsthe
v 8: Mark v e u by F
marker of p v as well as all the markers of adjacent 9: end if −→
ports;
10: else if there is a passage u e v marked F then
−→
S5 The agent possibly changes the marker of p ; 11: Traverse e
v
12: else
Note that this decomposition is inspired from the sim-
13: Declare STOP
ple description of Tr´emaux’s algorithm found in Even
14: end if
[2011]. In particular, it would not be possible to im-
plement depth-firstsearch,orany linear explorational-
gorithm, without steps (S4) and (S5) (see. Menc et al. Proposition2.1(Lucas[1883]). ForanygraphGwith
[2017]). m edges, Tr´emaux’s algorithm (Algorithm 1) has the
agent traverse all edges once in each direction and stop
at the origin.
Synchronous and asynchronous models. We
studytwomodelsofmobilecomputing,thesynchronous
Proof. The proof of the result relies on Claims 2.2
model and the asynchronous model.
and 2.3, which are shown below.
Synchronous model. In the synchronous model, both
agents make one move at each time-step. In particular,
Claim 2.2. When the algorithm terminates, the agent
they perform the steps (S1) to (S5) simultaneously. If
is at the origin and has explored all edges.
both agents start the round on the same node, we fur-
ther assume that they can entirely communicate and
Proof. The algorithm terminates only when the agent
coordinate during (S1) to avoid conflicting choices.
is adjacent to passages markedE. All discoverednodes
Asynchronous model. In the asynchronous model, we other than the origin have a passage marked F. Thus
assume that an adversary decides at each round which the algorithm terminates when the agent is at the ori-
ofthetwoagentswillperformamove. Thatagentthen gin. Now, assume by contradictionthat some edge was
performs all steps (S1) to (S5) without interruption. nevertraversed,andconsider without lossof generality
4one such edge that is adjacent to a node that has been p u p′ u p v p′ v
discovered. Note that the corresponding node cannot
B E - -
be the origin. Consider the last move when an agent
E v discovered B
left thatnode. Thatmovemusthaveleft a markE F, ∅
E v undiscovered F
→
which was never erased. Iterating this reasoning, there ∅
F - - -
is a sequence of edges marked E F leading from this
→
nodetotheorigin,wheretheagentispresently(thelast Table 1: Tr´emaux’s navigation Table.
edge of the sequence is possibly markedE B). This is
→
a contradiction because the origin is only adjacent to 10 3
markers D. A B D
1 2
5 4
6 9
Claim 2.3. No edge can be traversed twice in the same
direction. 8
C E
7
Proof. Assumebycontradictionthatsomeedgeeistra-
versedtwiceinthesamedirection,andconsiderthefirst Figure1: ExampleofexecutionofTr´emaux’salgorithm,
occurrence of such event on passage u e v. From the starting from node A, for a graph with m=5 edges.
−→
descriptionofthealgorithm,itisclearthatthispassage
was marked F. Now, observe that the edges with one
3 Exploration by two agents
endpoint marked F form a directed sub-tree of the ex-
plored graph rooted at the origin(the tail of the arrow
3.1 Asynchronous exploration
ismarkedEandtheheadismarkedF).Ifsomeedgeof
this sub-tree is traversed twice in the reverse direction,
We now describe an exploration algorithm with two
it must be that this same edge was traversed twice in
agents in the asynchronous model of Section 2.1.
the other direction, thereby contradicting the fact that
we chose the first occurrence of the event of an edge The algorithm, is the same for both agents which do
being traversedtwice in the same direction. not need to be distinguishable. It is presented in Table
2 using the formalism of navigation tables introduced
in Section 2.3. A brief intuition is as follows. The
TheclaimsabovefinishtheproofofProposition2.1. agents both perform independent versions of Tr´emaux
algorithm, backtracking whenever they encounter pre-
viously explored vertices. The agents also use a new
2.3 Navigation table
mark D (Done) to indicate that an edge has been tra-
versed twice. When one of the agents returns to the
We now provide an equivalent and more compact way
origin and there is no adjacent unmarked passage, it
todescribeanavigationalgorithm–suchasTr´emaux’s
uses the marker E left by the other agent to follow its
algorithm – in a table with four columns, (see e.g. Ta-
trail. If one agent is only adjacent to passages marked
ble 1). This format will be useful to give a clear and
D, it declares that the graph is explored. In this case,
compact description of our algorithms. The lines are
it will always be true that both agents are located on
ordered by priority and the agent chooses the first line
the same node. In practice, the second line of the navi-
thatfits its currentsituation. The firstcolumn(p )de-
u gationtable,Table2,isneverusedintheasynchronous
notes the markers available at u, the initial position of
setting, but will reveal useful for the synchronous set-
theagent,anddefinesthefirststep(S1)ofamove. For
ting to account for the fact that the robots may decide
instance, we can read from the first column of Table 1
to simultaneously traversean unexplorededge in oppo-
that Tr´emaux’s algorithm always prefers an adjacent
site directions.
port marked to one markedF. We can also infer that
∅
iftheagentisnotadjacenttoamarkerin B, ,F ,the Theorem 3.1. In the asynchronous setting, the two
algorithm stops. The second column p′ u{ tells∅ how} the agents using Table 2 traverse all edges twice and then
markershouldbechangeinstep(S2). Thethirdcolumn stop at the same node after exactly 2m rounds, where
p v indicateswhattherobotreadsatv,thenewposition m is the number of edges of the graph.
of the agent (S4). The forth column p′ prescribes how
v
the marker of edge (u,v) at v should change (S5). The We now turn to the analysis of the algorithm in the
symboldash‘-’signalsthatallmarkersareaccepted,or asynchronous setting. We make the following claims
unchanged, in the corresponding step. that lead to the proof of Theorem 3.1.
5p p′ p p′ 8 9
u u v v A B D
B D - D
1 10
E E D
∅ 6 3
E v discovered B 2 7
∅
E v undiscovered F
5
∅
F D - D C E
E D - D 4
Table 2: Exploration with a two agents: navigation
Figure 2: Ariadne (blue) and Theseus (red), exploring
table.
a graph with m=5 in the asynchronous setting.
Claim 3.2. At the start of any round, the edges that
Else if u is adjacent to an unmarked passage, then
have both passages unmarked have never been traversed, 1
takingthat passageandmarkingits endpoints by B,E,
the edges which have both passages marked by B, E,
{ or F maintains the invariant.
F have been traversed once, the edges which have both
}
passages marked D have been traversed twice. All of the Else if u is adjacent to a passage marked E, that pas-
1
edges in the graph fall in one of these cases. sage appears in the path between both agents. Thus
moving the agent along that edge and marking both
endpoints by D preserves the invariant.
Proof. Initially, all passages are unmarked. When an
unexplored edge is traversed for the first time, both
Claim 3.4. If an agent is adjacent only to passages
of its endpoints are marked by one of B, E, F. Note
marked D, both agents must be co-located and all edges
that a markedpassagenever becomes unmarkedin the
have been visited twice.
course of the exploration. This proves that the edges
thathaveneverbeentraversedareexactlythosehaving
Proof. Since the set of nodes that are marked B, E,
two unmarked passages.
F form a path between both agents, when one of the
Also observe that whenever a passage marked B, E, F agents is adjacent only to passages marked D, it must
is traversed, both passages of the corresponding edge be that the other is located on the same node and that
will be markedD. This provesthe claimthat the edges all passages in the graphs have markers in , D .
{∅ }
which have been traversed once are exactly those for
We now assume by contradiction that one edge has
which both passages are marked by B, E, F.
never been traversed, i.e. that there is an unmarked
Finally, observe that a passage marked D will never passage. Without lossofgenerality,we consideranode
be used by the agent. This allows to conclude that the that has been visited and that is adjacent to one such
edgeswhichhavebeentraversedtwiceareexactlythose passage. This node cannot be the current position of
with both endpoints marked D. the two agents. Consider the last time that an agent
left this node in a move that was not a backtracking
move. At that moment, the corresponding agent must
Claim 3.3. At the start of any round, the set of edges
haveleftthenodethroughanunexplorededge,because
that have been traversed once form a path of disjoint
thosearealwayspreferredtopreviouslyexplorededges.
edges between both agent’s locations.
Thusit leftamarkerE thatwasneverunmarked. This
forms a contradiction.
Proof. Weprovideaproofofthisinvariantbyinduction.
The invariant holds initially, because all passages are Proof of Theorem 3.1. By Claim 3.4, if the algorithm
unmarked and both agents are on the same node. We terminates, all edges have been visited at least twice
assume that the result holds at some round t, and we and the agents are co-located. By Claim 3.2, the al-
showthattheresultholdsatthenextround. Wedenote gorithm must terminate in at most 2m steps, because
by u 1 e1 ... eℓ−1 u ℓ the pathof lengthℓ N between each edge can be traversed at most twice.
←→ ←−→ ∈
bothagents. We assumewithoutlossofgeneralitythat
the agent that is allowed to move at the present round
is located at u . 3.2 Synchronous exploration
1
If u is adjacent to a passage marked B, then that Wenowconsiderthesynchronoussetting,inwhichboth
1
passage must appear in the path between both agents. agentsmovesimultaneouslyatallrounds. Weshallnot
Thus moving the agent along that edge, and marking changethealgorithmbasedonTable2,exceptforwhen
both of its endpoints by D preserves the invariant. both agents are co-located. In this case, we will simply
6assumethat bothsteps (S1)occursequentially,instead Finally,the proofofClaim3.4isexactlythe sameasin
of simultaneously, in order to avoid the situation in theasynchronoussetting,asistheproofofTheorem3.5.
which both agents would always choose the same ports
and would thus never split. This is easily enforced by
the assumption that the agents may coordinate when
3.3 Competitive ratio
they are located at the same node. Such assumption is
always granted in the setting of collective exploration
We now briefly discuss how the result of Theorem 3.5
Fraigniaud et al.[2006],Brass et al.[2011]. Notethatif
improves the competitive ratio of collective graph ex-
wewouldfurtherrequirethatbothagentsreturntothe
ploration. In collective graph exploration, it is clear
origin at the end of exploration, we could also assume that OPT(G,k) m/k where OPT(G,k), denotes the
that they build a complete map of the graph whenever ≥
minimum number of rounds required by the team to
theymeetatsomenodeafterhavingtraversedalledges
traverse all edges of G, if the team has full knowledge
by using some internalmemory, as explained in the fol- ofG. Ouralgorithm,whichsatisfiesALG(G,k) m,for
lowing statement. ≤
any k 2, thus improves the competitive guarantee of
≥
the signle depth first-search (which requires 2m time-
Theorem 3.5. In the synchronous setting, the two
steps), from 2k to k, partially answering the question
agents using Table 2 traverse all edges of the graph and
in the conclusion of Brass et al. [2014].
meet at some node in exactly m time-steps, where m
is the number of edges. If the agents are also provided
In a more restrictive formulation of collective explo-
with (m) bits of memory and the graph is labelled, the
ration, the agents are required to return to the origin
O
agents can then build a full map of the graph and re-
after all edges have been traversed. In this case our
turn to the origin in D additional steps, where D is the
guarantee becomes ALG(G) m+D because the two
diameter of the graph. ≤
agents can use a shortest path to return to their initial
positiononce they havetraversedalledges (andhavea
Proof. We will show that Claim 3.2 and Claim 3.3 also full map of the graph). For this variantof the problem,
hold in the synchronous setting. wealsohaveOPT(G,k) m/kandOPT(G) 2D. Thus,
≥ ≥
OPT(G,k) max m/k,2D k m/k+ 1/2 2D
≥ { }≥ k+1/2 k+1/2 ≥
Proof of Claim 3.2 in the synchronous setting. The 1 (m+D) = 1 ALG(G,k). In this more restric-
k+1/2 k+1/2
proof is the same as in the sequential case, except for tive formulation of the problem, we therefore improve
the particular situation where both agents move simul- thecompetitiveratiooftheproblemfrom2k tok+1/2,
taneously along the same edge in opposite directions. for any k 2.
≥
Note that this situation only occurs if both passages
e
of some edge u v are unmarked. In this case, the
←→
edge is traversed twice in a single round. Fortunately, 4 Rendezvous of two agents
the secondline of Table 2 allowsto catchthis situation
andbothpassagesofthe edge aremarkedD atthe end 4.1 Asynchronous rendezvous
of this time-step.
In this section, we present a rendezvous algorithm for
the asynchronous model. The algorithm differs from
Proof of Claim 3.3 in the synchronous setting. The
most of the literature in that we do not restrict the
proof works again by induction and the arguments
prior coordination between the agents.
above still hold except for the case of agents moving
simultaneously along the same edge in opposite di-
rections. Observe that such situation may be seen as Algorithm. The distinct agents are called Ariadne
equivalenttotwoconsecutivemovesofasingleagentin and Theseus, and are defined by their navigation ta-
the asynchronousmodel. In the first move,the moving bles, Table 4 and Table 3. We assume that they can
agent meets the other agent and mark the passage sense when they are located on a same node, and that
e e
u v by E B. In the subsequent move, that they stop if that is the case. A brief intuition on the
−→ −→
agent backtracks on the same edge which gets marked algorithm is as follows. Both agents run a depth-first
e
D D. Note that the final configuration is the same search until they land on a node previously discovered
←→
as for the synchronous setting in which both agents by the other agent. Then, they follow the trail left by
move along e simultaneously in opposite directions, the other agent. To avoid both agents from cycling be-
except that the position of the agents in the final hind eachother indefinitely, one of the agent (Ariadne)
configurationis inverted,whichis without consequence will retrace her path when she realises that the other
for the rest of the execution. The invariantis thus also (Theseus) is following following her trail. We state the
preserved in this situation. main result.
7Proposition 4.1. Ariadne and Theseus, defined re- directed pathfrom the originofTheseus to the current
spectively by Table 4 and Table 3 meet in any unknown position of Theseus.
graph G in at most 3m steps, where m is the number of
The first round when Theseus is located on a node ini-
edges in G.
tiallydiscoveredbyAriadne,thisnodemustbeadjacent
p p′ p p′ to a port marked E A because its exploration was not
u u v v finished by Ariadne before the move of Theseus, and
B T D - D she has not been back since (otherwise the rendezvous
E A E AT - F AT wouldbecomplete). Fromthatmoment,the behaviour
E AT E ATT - F ATT of Theseus is that it will follow the markers E A or E AT
E T v discovered by T B T which lead to Ariadne.
∅
E v undiscovered by T F
T T
F∅ D - D The first round when Ariadne is located on a node ini-
T
tiallydiscoveredbyTheseus,thisnodemustbeadjacent
Table 3: Theseus. to a port marked E . Ariadne will use this marker to
T
follow the trail of Theseus. When this leads her to a
p p′ p p′ nodethatshehadinitiallydiscovered,themarkerE T is
u u v v replacedbymarkedE andunderstandsthatTheseus
AT
B D - D
A is also following her. She thus retrace her steps using
E E - F
T AT AT markers F and F to get to Theseus.
AT A
F D’ - D’
AT
E v discovered by A B Wenowformalizetheargumentsabovebythefollowing
A A
∅ E v undiscovered by A F claims.
A A
∅
F D - D
A Claim 4.3. At all rounds, the edges with tail in EA,
{
Table 4: Ariadne.
EAT, EATT
}
form a directed path from the origin of
Ariadne to the position of Ariadne.
Termination. The algorithm terminates if the two Proof. The statement is verified by induction on the
agents are on the same node, or alternatively if one moves of Ariadne similarly to the proof of Claim 3.3.
agentdoesnothaveapossiblemove. Westartwiththe Observe that Ariadne always leaves a marker E or
A
following claim,which canbe directly verifiedfrom the E behindher,exceptwhenshebacktracksandcloses
AT
navigation tables. some edge. Also, Theseus can only convert makers E
A
and E in markers E and E . This suffices to
Claim 4.2. The edges with an endpoints marked by AT AT ATT
prove the claim.
BA, EA, FA, BT, ET, FT have been traversed once.
{ }
The edges with an endpoint marked by EAT, FAT, D
{ }
have been traversed twice. The edges with an endpoint Claim 4.4. If Theseus has found a node earlier discov-
marked by EATT, FATT, D’ have been traversed three ered by Ariadne, the edges with tail in EA, EAT lead
{ } { }
times. from Theseus to Ariadne.
It is clear from the preceding claim that no edge gets
Proof. We considerthe firstroundwhenTheseus lands
traversed more than 3 times. Thus the algorithm ter-
on some node v initially discovered by Ariadne. No-
minates in at most 3m steps.
tice that the exploration of this node was not finished
by Ariadne at this round, thus it must be adjacent to
Correctness. Wenowshowthatalgorithmiscorrect,
some marker E . Thus v belongs to the directed path
A
i.e. that if the moving agent does not have an adjacent
ofedgeswith tailin E , E , E whichgoesfrom
A AT ATT
port matching the first column of his navigation table, { }
the origin to Ariadne. Since Theseus has not yet tra-
then it is located on the same node as the other agent.
versed an edge traversed earlier by Ariadne, there can
be no markersE in the graph. At this instant, it is
While Ariadne and Theseus do not walk on a node dis- ATT
thereforethecasethatedgeswithtailin E ,E lead
covered by the other, they both perform a Tr´emaux A AT
{ }
fromTheseus to Ariadne,and it is clear that this prop-
depth-first search, using letter D to indicate that some
erty is preserved by all subsequent moves of Theseus
edgehasbeenusedtwiceandcanwillbediscarded. Re-
(which will be through edges marked E or E .
call from the the analysis of the previous section that A AT
in this phase, the edges with a tail E form a directed
A
path from the origin of Ariadne leading to the current Claim 4.5. If Theseus has not found a node earlier
positionofAriadneandtheedgeswithatailE forma discovered by Ariadne, but Ariadne has found a node
T
8earlier discovered by Theseus, the edges with tail in ET Refined analysis. We finally notice that the total
lead from Ariadne to Theseus. number of moves before rendezvous can be reduced
from 3m to 2m + n 1. It suffices to observe that
−
the set of edges which may be traversed three times
Proof. While both agents have disjoint itineraries, the
are initially marked E F . There are at most n 1
set of edges with tails E T form a directed path from such edges by propertyT ↔ of tT he initial depth-first sea− rch
the origin of Theseus to the position of Theseus. The
of Theseus.
first round when Ariadne is located on a node discov-
ered earlier by Theseus, the edges with tail markedE
T
thus lead from Ariadne to Theseus. This invariant is 4.2 Synchronous rendezvous
preserved for any move of Theseus or Ariadne, for as
We now show how the algorithm above can be trans-
longasTheseusdoesnotfindanode discoveredbyAri-
lated to the synchronous setting. We shall not change
adne.
the navigation tables, but we assume that rendezvous
is achieved if Theseus and Ariadne are located on the
Claim 4.6. At least one of Theseus and Ariadne will same node at the same time-step, or alternatively if
find a node earlier discovered by the other. they travel through the same edge in opposite direc-
tions in the same synchronousround. Our result is the
following.
Proof. While they do not find a node discovered by
the other, it is clear from the tables that both Ariadne Theorem 4.8. In the synchronous setting, Ariadne
and Theseus each run an instance of depth-first search. andTheseusmeetatanodeorinsideanedgeinatmost
Since the graph is connected, and the adversary must 3m/2 time-steps, where m is the number of edges of
move one of the agents at each round, the algorithm t⌈ he gra⌉ ph and n the number of nodes.
cannot stop before one of the agent has found a node
discovered by the other.
Proof. It suffices to observe that if Theseus and Ari-
adne have not achieved synchronous rendezvous in t
Claim4.7. IfoneofAriadneorTheseusdoesnothave time-steps, the state of the markers in the graph and
a move prescribed by their navigation table, they are the position of the agents is the same as that obtained
located on the same node. by a run of the asynchronous setting for 2t moves. In-
deed, assume that the property is true at time step t.
Theagentsthensynchronouslychooseanadjacentport.
Proof. We assume that one of Ariadne or Theseus do
Eithertheagentswillachieverendezvousatthatround,
not have a move prescribed by their navigation table.
orit is possible to asynchronouslyfirstmoveone of the
By previous claim, it must be the case that either (1)
agenttoitsdestination,whichisnotthepositionofthe
TheseushasfoundanodeearlierdiscoveredbyAriadne
other agent, and only then to move the other agent at
or(2)Theseushasneverfoundanodeearlierdiscovered
its destination. This proves the property at time t+1
byAriadnebutAriadnehasfoundanodeearlierdiscov-
and finishes the proof of Theorem 4.8.
ered by Theseus.
(1) In the first case, if the agents are not co-located by The algorithmwe presentedinthissectionthusoutper-
Claim 4.4 there are markers in E , E adjacent to forms the 2m guarantee of so-called ‘Wait for Mommy’
A AT
{ }
Theseus, and markers in F , F , B adjacent to algorithm in the synchronous mobile model.
A AT A
{ }
Ariane, thus both agents have a possible move in their
navigation table.
5 Generalizations
(2) In the second case, by Claim 4.5 if the agents are
not co-located, then there is a marker E T adjacent to In this section, we show that our algorithms immedi-
Ariadne and markers in F T, B T adjacent to Theseus. atelyadapttonaturalextensionsofthemobilecomput-
{ }
Thus,bothagentshaveapossiblemoveintheirnaviga- ing model defined in Section 2.1.
tion table.
5.1 Weighted graphs
The agents are thus on the same node when the algo-
rithm stops.
We observe that the problem of collective exploration
orrendezvouscanbeextendedtoweightedgraphs. For
Claim4.7endstheformalproofofcorrectness,byshow- any edge e E, we denote by w the weight (or
e
∈
ing that both agents have a prescribed move in their length) of that edge, which corresponds to the cost
navigation table, at least until the rendezvous. paid by an agent which traverses e. We also denote
9byL=P w thesumofalltotaledgelengths. The index of the agent that triggers the i-th event. Finally,
e∈E e
goal of collective graph exploration (resp. rendezvous) weobserve(by animmediate inductioninm andm )
A T
then becomes to traverse all edges of the graph (resp. thatthesequenceofnodesattainedbytheagentsinthe
to meet somewhere in the graph) while paying a lim- continuousmodelcorrespondexactlytothesequenceof
ited total cost. Since our proofs bound the maximum nodes that would have been attained by the agents if
number times eachedge is traversedby 2 inthe case of the adversary had attributed the following sequence of
exploration (resp. by 3 in the case of rendezvous), we discrete moves: r ,r ,...,r .
1 2 mA+mT
have the following results.
Note that in this model of continuous moves, the cost
Proposition 5.1. The two agents using Table 2 per-
of exploration(resp. rendezvous) becomes equalto the
form asynchronous collective exploration in weighted
totalamountofdistance(or. energy)thatwasafforded
graph, while paying a total cost of at most 2L.
by the adversary before termination. This is equal to
Proposition 5.2. The two agents using Table 4 and the integralof the sum of the speeds of the agents. We
Table 3 perform asynchronous rendezvous in an un- then have the following proposition.
known weighted graph, while paying a total cost of at
Proposition 5.4. The guarantees of Proposition 5.1
most 3L.
and Proposition 5.2 generalize to the setting where the
agents move continously (and the adversary controls
5.2 Continuous moves their speeds).
We now support the claim of the abstract that our
Proof. By the definition of the problem of rendezvous,
model of mobile computing captures the situation
the task is completed when the agents meet inside an
where the adversary controls at all times the speeds
edge. Therefore, by Claim 5.3, our guarantees of the
oftheagents. Forthis,wemustassumethattheagents
model with discrete moves transfers to the model with
move continuously. Thus, the agents could be blocked
continuous moves. The argument is similar for explo-
by the adversarywhen they are inside a given edge. In
ration. Simply observe that the algorithm based on
this setting it becomes necessary to assume that the
Table 2 has completed exploration whenever the two
agents have a (restricted) memory, which allows them
agents meet inside an edge.
torememberthemarkeratthepassagefromwhichthey
comefrom. Itwillalsobe necessarytoassumethatthe
agentscancommunicateiftheymeetinsideagivenedge. Conclusion
We now make the following claim.
In this paper, we studied two problems of mobile com-
Claim 5.3. For any algorithm based on a navigation puting, exploration and rendezvous, for two agents in
table, while the robots do not meet inside an edge, the an unknown graphs. For both problems, we provide
settingwheretheagents move continuously(andthead- algorithms that improve over the naive strategies that
versarycontrolstheirspeed)isequivalenttoarunofthe are based on depth-first search. Our guarantees hold
setting of Section 2.1 where the agents make discrete for a general model of asynchrony, and generalize well
moves (and the adversary chooses which robot moves). to weighted graphs.
Proof. Withoutlossofgenerality,assumethatalledges Acknowledgements
are split into two sub-edges, with a node in the middle.
The author thanks Andrzej Pelc for his valuable feed-
We will consider the exploration and rendezvous prob-
backandsuggestions,aswellastheArgoteamatInria.
lem in this new graph. Observe that our guarantees
are preserved, because the sum of all edges lengths L
is invariant to this transformation (see preceding sec-
References
tion for the definition of L). We now let the adver-
sary control the (continuous) speeds of the agents at Daniel Klein. Mighty mouse, 2018. URL
all times until they meet inside an edge of the original https://www.technologyreview.com/.
graphatsometimet. Wesaythataneventistriggered
E´douard Lucas. R´ecr´eations math´ematiques, volume 3.
at every instant when an agent leaves a node of the
Gauthier-Villars, 1883.
original graph, or attains a node in the original graph.
We denoteby t( 1A),t( 2A),...,t( mA A) allthe instants(before Shuichi Miyazaki, Naoyuki Morimoto, and Yasuo Ok-
t) at which Ariadne triggers an event. And we define abe. The online graph exploration problem on re-
t(T),t(T),...,t(T) similarly for Theseus. We then de- stricted graphs. IEICE transactions on information
1 2 mT
fine r A,T for i 1,...,m +m to be the and systems, 92(9):1620–1627,2009.
i A T
∈ { } ∈ { }
10Pierre Fraigniaud, Leszek Gasieniec, Dar- Nicole Megow, Kurt Mehlhorn, and Pascal Schweitzer.
iusz R. Kowalski, and Andrzej Pelc. Collec- Online graph exploration: New results on old and
tive tree exploration. Networks, 48(3):166– new algorithms. Theoretical Computer Science, 463:
177, 2006. doi: 10.1002/net.20127. URL 62–72,2012.
https://doi.org/10.1002/net.20127.
Alexander Birx, Yann Disser, Alexander V Hopp, and
Peter Brass, Ivo Vigan, and Ning Xu. Improved Christina Karousatou. An improvedlower bound for
analysis of a multirobot graph exploration strategy. competitivegraphexploration.TheoreticalComputer
In 13th International Conference on Control Au- Science, 868:65–86,2021.
tomation Robotics & Vision, ICARCV 2014, Singa-
Erik van den Akker, Kevin Buchin, and Klaus-Tycho
pore, December 10-12, 2014, pages 1906–1910.IEEE,
Foerster. Multi-agent online graph exploration
2014. doi: 10.1109/ICARCV.2014.7064607. URL
on cycles and tadpole graphs. arXiv preprint
https://doi.org/10.1109/ICARCV.2014.7064607.
arXiv:2402.13845, 2024.
Andrzej Pelc. Deterministic rendezvous algorithms. In
Peter Brass, Flavio Cabrera-Mora, Andrea Gasparri,
Distributed Computing by Mobile Entities: Current
and Jizhong Xiao. Multirobot tree and graph ex-
Research in Moving and Computing, pages 423–454.
ploration. IEEE Trans. Robotics, 27(4):707–717,
Springer, 2019.
2011. doi: 10.1109/TRO.2011.2121170. URL
Gaston Tarry. Le probleme des labyrinthes. Nouvelles https://doi.org/10.1109/TRO.2011.2121170.
annales demath´ematiques: journal des candidats aux
RomainCossonandLaurentMassouli´e. Collectivetree
´ecoles polytechnique et normale, 14:187–190,1895.
exploration via potential function method. In 15th
ShimonEven. Graph algorithms. CambridgeUniversity Innovationsin Theoretical ComputerScienceConfer-
Press, 2011. ence(ITCS2024).Schloss-Dagstuhl-LeibnizZentrum
fu¨r Informatik, 2024.
Solomon W Golomb and Leonard D Baumert. Back-
track programming. Journal of the ACM (JACM), Christian Ortolf and Christian Schindelhauer. A re-
12(4):516–524,1965. cursive approach to multi-robot exploration of trees.
In International Colloquium on Structural Informa-
Robert Tarjan. Depth-first search and linear graph al-
tion and Communication Complexity, pages 343–354.
gorithms. SIAM journal on computing,1(2):146–160,
Springer, 2014.
1972.
Romain Cosson. Breaking the k/log k barrier in collec-
Alok Aggarwal and Richard Anderson. A random nc
tive tree exploration via tree-mining. In Proceedings
algorithm for depth first search. In Proceedings of
of the 2024 Annual ACM-SIAM Symposium on Dis-
the nineteenthannualACM symposium on Theory of
crete Algorithms (SODA), pages 4264–4282. SIAM,
computing, pages 325–334,1987.
2024.
Shantanu Das. Graph explorations with mobile agents.
Christian Ortolf and Christian Schindelhauer. Online
Distributed Computing by Mobile Entities: Current
multi-robot exploration of grid graphs with rectan-
Research in Moving and Computing, pages 403–422,
gular obstacles. In Guy E. Blelloch and Maurice
2019.
Herlihy, editors, 24th ACM Symposium on Paral-
lelism in Algorithms and Architectures, SPAA ’12,
Vladimir Yanovski, Israel A Wagner, and Alfred M
Pittsburgh, PA, USA, June 25-27, 2012, pages 27–
Bruckstein. A distributed ant algorithm for protect
\ 36.ACM,2012. doi: 10.1145/2312005.2312010.URL
efficientlypatrollinganetwork.Algorithmica,37:165–
https://doi.org/10.1145/2312005.2312010.
186, 2003.
Romain Cosson, Laurent Massouli´e, and Laurent Vi-
ArturMenc,DominikPajak,andPrzemysl awUznan´ski.
ennot. Efficient collaborative tree exploration with
Time and space optimality of rotor-router graph ex-
breadth-first depth-next. In 37th International
ploration. Information Processing Letters,127:17–20,
Symposium on Distributed Computing (DISC 2023).
2017.
Schloss Dagstuhl-Leibniz-Zentrum fu¨r Informatik,
Omer Reingold. Undirected connectivity in log-space. 2023.
Journal of the ACM (JACM), 55(4):1–24,2008.
Yuya Higashikawa, Naoki Katoh, Stefan Langerman,
Bala Kalyanasundaram and Kirk R Pruhs. Construct- and Shin-ichi Tanigawa. Online graph explo-
ing competitive tours from local information. Theo- ration algorithms for cycles and trees by multi-
retical Computer Science, 130(1):125–138,1994. ple searchers. J. Comb. Optim., 28(2):480–495,
112014. doi: 10.1007/s10878-012-9571-y. URL
https://doi.org/10.1007/s10878-012-9571-y.
SamuelGuilbaultandAndrzejPelc. Asynchronousren-
dezvousofanonymousagentsin arbitrarygraphs. In
Principles of DistributedSystems: 15th International
Conference, OPODIS 2011, Toulouse, France, De-
cember 13-16, 2011. Proceedings 15, pages 421–434.
Springer, 2011.
Evangelos Kranakis, Nicola Santoro, Cindy Sawchuk,
and Danny Krizanc. Mobile agent rendezvous in a
ring.In23rdInternationalConferenceonDistributed
Computing Systems, 2003. Proceedings., pages 592–
599. IEEE, 2003.
Gianluca De Marco, Luisa Gargano, Evangelos
Kranakis, Danny Krizanc, Andrzej Pelc, and Ugo
Vaccaro. Asynchronous deterministic rendezvous in
graphs. Theoretical Computer Science, 355(3):315–
326, 2006.
Jurek Czyzowicz, Andrzej Pelc, and Arnaud Labourel.
How to meet asynchronously (almost) everywhere.
ACM Transactions on Algorithms (TALG), 8(4):1–
14, 2012.
Yoann Dieudonn´e, Andrzej Pelc, and Vincent Villain.
How to meet asynchronously at polynomial cost. In
Proceedings of the 2013 ACM symposium on Princi-
ples of distributed computing, pages 92–99,2013.
Petri¸sorPanaiteandAndrzejPelc. Exploringunknown
undirectedgraphs. Journal of Algorithms,33(2):281–
295, 1999.
12