Engineering consensus in static networks with unknown disruptors
Agathe Bouis, Christopher Lowe, Ruaridh A. Clark, and Malcolm Macdonald
Centre for Signal and Image Processing (CeSIP), Department of Electric and Electrical Engineering, University of
Strathclyde, Glasgow, Scotland
agathe.bouis@strath.ac.uk
1Abstract
Distributed control increases system scalability, flexibility, and redundancy. Foundational to such
decentralisation is consensus formation, by which decision-making and coordination are achieved.
However, decentralised multi-agent systems are inherently vulnerable to disruption. To develop a
resilient consensus approach, inspiration is taken from the study of social systems and their dynamics;
specifically, the Deffuant Model. A dynamic algorithm is presented enabling efficient consensus to be
reached with an unknown number of disruptors present within a multi-agent system. By inverting typical
social tolerance, agents filter out extremist non-standard opinions that would drive them away from
consensus. This approach allows distributed systems to deal with unknown disruptions, without
knowledge of the network topology or the numbers and behaviours of the disruptors. A disruptor-
agnostic algorithm is particularly suitable to real-world applications where this information is typically
unknown. Faster and tighter convergence can be achieved across a range of scenarios with the social
dynamics inspired algorithm, compared with standard Mean-Subsequence-Reduced-type methods.
Keywords:
Consensus, Fault-tolerance, Disruption-tolerance, Social dynamics, Multi-agent system, Distributed,
Resilience.
Introduction
Methods of network control are shifting from centralised to distributed to avoid communication overheads,
their associated latencies and single point failures [1, 2]. Distributed control strategies must cope with issues
of security and resilience to faults, and deliberate attacks against ever growing networks (both in number of
nodes and connections). Although such issues are also present in centralised systems, distributed networks
prove to be particularly vulnerable as they lack a central authority to authenticate nodes as well as monitor
and detect misbehaviours or failures [3]. Decentralised control methods are thus characterised by the realistic
systems to which they are applied: systems with unknown numbers of disruptors and unknown network
topologies. Typical networks include the likes of Internet of Things (IoTs), mobile robotic systems, smart power
grids, and wireless sensor networks.
The foundation of distributed control is consensus, whereby nodes within a system reach a common shared
state [4]. This is often achieved using linear consensus iterations, where at each time step network nodes
update their state values based on a weighed combination of their neighbours’ values [5, 6]. The choice of
combination is what decides on a consensus’ disruption tolerance. Disruption tolerance is commonly defined
as the ability to cope with, and/or recover from disruptions within the network [7]. These malfunctions can be
faults or deliberate attacks [8], which are manifested in this paper under the same form: undetectable
disruptions. The simplest approach to selecting which neighbouring nodes to combine is mean-based
computation; where the average of all neighbours’ values is used for the state update. However, these types
of methods are not resilient as nodes can be swayed by the presence of disruptors [8]. They must therefore be
adapted to ensure fault-resilience; usually by filtering incoming neighbour state values and/or by augmenting
the system in some way such as introducing virtual connectivities to collect more values on which to base the
update [9], or implementing observers to create adaptive controllers [10, 11]. One such typical approach is the
2Mean-Subsequence-Reduced (MSR)-type method [12], and its extensions (e.g. Weighted-MSR [8, 13],
Omission-MSR [14], …). MSR methods ensure their fault-tolerance by removing a set number of the largest and
smallest values received by nodes at each consensus step, enabling agents to reach an agreement despite
disruptive values. The removed numbers correspond to the maximum possible number of faults that the
system can cope with [15]. By requiring knowledge of this design value, MSR method are observed to respond
poorly to situations where this information is unavailable as well as lacking robustness to additional failures.
To provide a dynamic and robust solution to the consensus problem, requiring neither information regarding
the topology nor indication of the number of disruptive agents in the system, this paper presents a fully
decentralised, adaptive consensus algorithm handling the specifications of realistic, static networks using a
framework adapted from the dynamics of social systems. Specifically, a sociophysics approach is adopted.
Sociophysics models the behaviour of human crowds and the social interactions therein [16, 17]. That is, people
in everyday life influence one another and adapt towards, or away from, the expressed opinions of the people
they have interacted with.
A model of interest, notably regarding the spreading of minority opinion [18], is that proposed by Deffuant et
al [19]. Deffuant’s Bounded confidence (BC) is a stochastic model of the evolution of continuous-valued
opinions within a given range [20], usually set between -1 and 1 [21]; moderate opinions close to 0 and extreme
ones approaching either -1 or 1. The framework can be understood as: two agents coming into contact must
hold sufficiently close opinions in order to mutually influence one another. When encountering agents of
radically different opinions, that is, when the difference of opinions is too large, there are no changes with
respect to the opinions held prior to the communication. The threshold for the difference is known as the
agent’s tolerance, 𝑑. Denoting the opinion of agent 𝑖 at a given time 𝑡 as 𝑜 [𝑡], the interactions of agent 𝑖 with
𝑖
agent j can be described as
𝑜 [𝑡 + 1]= 𝑜 [𝑡]+ 𝜂(𝑜 [𝑡]− 𝑜 [𝑡]) if |𝑜 [𝑡]− 𝑜 [𝑡]|< 𝑑 . Eq. 1
𝑖 𝑖 𝑗 𝑖 𝑗 𝑖
When implementing a fixed universal tolerance, the final distribution of opinions can be categorised as;
consensus, when a single opinion dominates; polarisation, when two opinions emerge; and, fragmentation,
when several opinion clusters can be observed [9]. The transition from one phase to the next depends on the
universal tolerance threshold.
A secondary dimension to improve the model’s realism was introduced by Sobkowicz [22]. By deriving an
explicit correlation between extreme opinions and low tolerance, the tendency for extremists to be inflexible
is explained. It also illustrates the propensity of moderate agents to be more open minded and thus easily
swayed towards extremism [22-24]. This can be exploited by bad actors to lead to dissention, polarisation, and
fragmentation of opinions [23, 25, 26]. This behaviour is addressed by morphing the universal tolerance, 𝑑,
into individual agent’s tolerance. These tolerances are then updated as a function of the agent’s own opinion
with respect to other opinions as 𝑑 = 𝑓 (|𝑜 |).
𝑖 𝑖
The mechanism of belief diffusion is not solely observed in opinion dynamics, it also represents the foundations
of consensus algorithms in network wherein agents communicate with their (usually one-hop) neighbours to
update their own state variables. The source of conflict in both model and algorithm can be understood to
stem from similarly disruptive attitudes. As observed by the rise in political extremism propelled by small but
vocal minorities, in social environments agents with extreme opinions compel other non-extreme agents
3(moderates) into becoming extremists themselves [16, 18]. This is also the case for engineered networks,
where the presence of even small minorities of disruptive, selfish, or malicious agents can come to prevent
consensus [3].
This paper exploits, and inverts, the mechanisms of opinion diffusion to design a consensus algorithm resistant
to faulty/disruptive actors (extremists). The algorithm, termed the Opinion Dynamics-inspired DIsruption-
tolerant Consensus, ODDI-C (pronounced o·duh·see), enables a resilient consensus to be reached despite a lack
of awareness of network topology and number of disruptive agents. This approach is chosen based on the
similarity between how agents in bounded confidence social models and nodes in linear consensus scenarios
update their opinions/values. On the basis of these similar mechanisms of opinion/state value update, features
of social systems resulting in consensus are analysed, extracted, and implemented in the context of a
consensus algorithm. In practice, this is achieved through the exploitation of a dynamic tolerance linked to
extremism, whereby agents filter out extreme non-standard opinions driving them away from consensus. This
make the approach particularly suitable to real-world applications where there is limited, to no, external
information and where synchronisation is critical.
Opinion Dynamics-inspired DIsruption-tolerant Consensus (ODDI-C) Algorithm
The ODDI-C Algorithm adapts the concept of tolerance from social systems, using an analogous approach to
the Deffuant Model for its update and filtering. That is, an agent’s tolerance increases when it finds itself more
extreme, and all values beyond an agent’s tolerance are filtered out and not considered during the update.
Moreover, the ODDI-C Algorithm deals with the median-based z-scores rather than raw opinions 𝜓 [𝑡]. The
𝑖
median-based z-score quantifies how close an opinion is to the local median of the distribution. The
replacement of the raw opinion with the z-score serves two purposes. The first is to allow for any range of
input to be considered, thus expanding the typical Deffuant model’s range of -1 to 1. Secondly, and more
importantly, the use of the z-score serves as inbuilt tolerance indicator.
The consensus of compliant agents can be ensured by having them only consider opinions which are closer to
the median than they are. The z-score facilitates this by acting as a dynamic tolerance for the agent doing the
filtering, enabling it to only consider opinions whose z-score are smaller than its own. Put otherwise, agents
standing close to the median of the distribution will prove particularly stubborn while agents who are outlier
themselves will be much more willing to account for other agents’ opinions. This is an inversion of typical social
systems, for whom extremism is linked to low tolerances. This approach also provides an elegant solution to
the problem of filtering out extreme values while allowing for a level of adaptability dependent on the agent’s
own opinion.
Note here the use of the median rather than the mean when dealing with z-scores due to its statistical
robustness to outliers. The median is more stable than the mean when dealing with heavy tailed or asymmetric
distributions, and as such, it is a more appropriate tool for outlier filtering [27]. Adapted from [28], three
consensus properties act as algorithm design requirements.
• Termination: All compliant agents must decide on a value.
• Validity: The agreed upon value is not influenced or dictated by disruptive agents.
4• Agreement: No two compliant agents decide on different values, to within an agreed tolerance.
Note that Termination does not require Agreement, in which case polarisation or fragmentation are obtained.
The ODDI-C Algorithm is primed for systems dealing with faults/attacks of unknown identities and behaviours
Considering this unknown, the validity property is impossible to ensure [29]. The property is thus weakened,
following [29], to be applicable for such scenarios, which use linear consensus mechanics with unknown
disruptors.
• Weak Validity: If all nodes are compliant and propose the same value, all nodes will agree on this value.
Algorithm Rules
The algorithm assumes a network constructed as follows: Let 𝐺(𝑡)= (𝑉,𝜀,𝐴) be a digraph with a finite
number of nodes (agents) 𝑉 = 1,2,...,𝑁 , a set of directed edges 𝜀 ⊆ 𝑉 × 𝑉 , and an adjacency matrix 𝐴 =
𝑎 ∈ 𝑅(𝑁×𝑁). Each directed edge (𝑗,𝑖)∈ 𝜀 represents a directional link between the node pair (𝑗,𝑖), such
𝑖𝑗
that communication between the nodes is enabled. In the model described here, it is assumed that the nodes
communicate synchronously at each given opportunity such that the edges model the flow of information
between the two nodes. The set of nodes influencing node 𝑖, it’s in-neighbours, is defined 𝑉𝑖𝑛 =𝑗 ∈ 𝑉 ∶
𝑖
(𝑗,𝑖)∈ 𝜀 while the nodes influenced by 𝑖, its out-neighbours, are in the set 𝑉𝑜𝑢𝑡 = 𝑗 ∈ 𝑉 ∶ (𝑖,𝑗) ∈ 𝜀. The
i
components of the adjacency matrix 𝑎 = 1 if 𝑗 ∈ 𝑉, that is, if node 𝑖 can receive information from node 𝑗,
𝑖𝑗 𝑖
otherwise 𝑎 = 0 . It should also be noted that each node has access to its own value at each time step, thus
𝑖𝑗
making it consider its inclusive neighbourhood.
The synchronous ODDI-C Algorithm implemented by compliant agents is presented in Figure 1.
Figure 1: ODDI-C Algorithm Flow Diagram. The algorithm is repeated for each compliant node at each time step until
the termination criterion (or criteria) is (are) met.
The algorithm’s filtering process works as follows, starting with Neighbour State Value Collection (see Figure
1). At each time step 𝑡 ∈ 𝑁, each compliant node 𝑖 sends its state variable 𝜓 [𝑡] to all of the nodes in its out-
𝑖
neighbourhood 𝑗 ∈ 𝑉𝑜𝑢𝑡 out and in turn receives the state variables 𝜓 [𝑡] from its in-neighbours 𝑗 ∈ 𝑉𝑖𝑛
𝑗
(compliant and disruptive, if they exist). These values are known as Ψ[𝑡],
𝑖
5𝛹[t]= 𝜓 [𝑡]: 𝑗 ∈𝑉𝑖𝑛 . Eq. 2
𝑖 𝑗 𝑖
From these received values, the Filter Parameter Creation can begin. These parameters are the median
Ψ̃Ψ𝑖[𝑡]
𝑖
and the Median Absolute Deviation MAD𝛹𝑖[𝑡] (a more robust alternative to the standard deviation) of the
𝑖
concatenated array Ψ[𝑡] and are determined from
𝑖
𝛹𝛹𝑖[𝑡]=median(𝛹[𝑡]) Eq. 3
𝑖 𝑖
MAD𝛹𝑖[𝑡]=median(|𝛹[𝑡]−𝛹̃𝛹𝑖[𝑡]|) . Eq. 4
𝑖 𝑖 𝑖
When dealing with normal distributions, the MAD is scaled using a factor of 1.4826 [27, 30]. The use of the
MAD and its normalised scaling,
NMAD𝛹𝑖[𝑡]=1.4826⋅MAD𝛹𝑖[𝑡], Eq. 5
𝑖 𝑖
relies on the assumption of a normal mostly symmetric distribution of values. For other distribution, other
estimators or scalings may be more appropriate [30]. This in turn allows for the median-based z-scores of the
received values to be calculated. These values are kept as absolutes as the sign is of no importance for the
filtering. The z-scores of the received values is determined as,
|𝛹[𝑡]−𝛹̃𝛹𝑖[𝑡]|
z-score (𝛹[𝑡])[𝑡]=( 𝑖 𝑖 ), Eq. 6
𝑖 𝑖 NMAD𝛹𝑖[𝑡]
𝑖
using the median (𝛹𝛹𝑖[𝑡]) and scaled MAD (MAD𝛹𝑖[𝑡]) of the distribution. The filter value,
𝑖 𝑖
|𝜓[t]−Ψ̃Ψ𝑖[𝑡]|
filter𝑖[𝑡]=( i 𝑖 )
𝑖 NMAD 𝑖𝛹𝑖[𝑡] Eq. 7
= z-score𝑖,
𝑖
is then created based on the z-score of the agent (and its opinion 𝜓 [𝑡]).
𝑖
Before the filter can be used, it must be optimised. This is accomplished through the implementation of
dynamic upper limit. The method used is a Hampel filter, a method typically applied to limit the classification
of nodes as outlier/not-outlier. Nodes are classified as outliers if they are larger/smaller than 3 scaled Median
Absolute Deviations (NMAD) [27]. Considering our use of z-score as discriminant (rather than the raw state
value), the Hampel filter is adapted as:
filter [𝑡]=3 Eq. 8
𝑚𝑎𝑥
if filter𝑖[t]≥ filter [t] then filter𝑖[t]= filter [t]. Eq. 9
𝑖 max 𝑖 max
Once the filter value is set for each agent, they can then proceed to the Dynamic Filtering, assessing which
values will be used to contribute to the update. Values are filtered out if their z-scores are higher than the
dynamic filter value. Selected values (𝐹[𝑡]) can be understood as
𝑖
𝐹[𝑡]=𝛹(z-score (𝛹[𝑡])[𝑡]<filter𝑖[𝑡]) Eq. 10
𝑖 𝑖 𝑖 𝑖 𝑖
meaning that the only values the node will accept will be closer to the median (centre of the distribution) than
its own value.
6Following the filtering, agents will follow the Update Rule to update their state values (𝜓 [𝑡+1]) based on the
𝑖
average difference between the selected values (𝑓 ∈𝐹[𝑡]) and its own past value (𝜓 [𝑡]). The extent of the
𝑖 𝑖 𝑖
update will be tuned by the learning rate of the consensus 𝜂, here set to be 0.5 (refer to damped Newton’s
method for details). The resulting new state value is expressed as
𝜓 [𝑡+1]=𝜓[𝑡]+𝜂⋅ 1 ∑|𝐹𝑖|(𝜓 [𝑡]−𝑓[𝑡]). Eq. 11
𝑖 |𝐹𝑖| 𝑗=1 𝑖 𝑖
The algorithm is repeated for each compliant node and for each time step until the Termination Assessment
is met. This assessment’s criterion can be a maximum time, where the simulation stops once maximum time is
exceeded (𝑡 >𝑡 ), or a value-based decision, where the simulation stops once convergence is within
𝑚𝑎𝑥
acceptable threshold.
Convergence Metric
To visualize the evolution of compliant nodes’ opinions over time, a simple metric assessing convergence is
implemented. Convergence is the process by which the agreement and termination properties are met. The
Convergence Metric (𝐶𝑀) is calculated at each time step as the Total Difference (𝑇𝐷) between compliant
agents, normalised with respect to the initial difference between all nodes (𝑇𝐷[0]),
TD[𝑡]
CM[𝑡]= Eq. 12
TD[0]
TD[𝑡] ∑𝑉 ∑𝑉 (|𝜓 [𝑡]− 𝜓 [𝑡]|), Eq. 13
𝑘=1 𝑚=1 𝑘 𝑚
where 𝜓 are agents’ opinions 𝜓 ∈ 𝛹 for k ∈ 1, V and 𝜓 are agents’ opinions 𝜓 ∈ 𝛹 such that between
𝑘 𝑘 𝑘 𝑚 𝑚 𝑚
the two loops k and m, all agent opinions are compared, and their absolute difference tabulated. The relative
metric decreases when nodes converge, agreeing on a shared state, and increases when nodes diverge.
As the convergence metric is a relative value dependent on the initial difference between nodes’ values
(𝑇𝐷[0]), it can be problematic to understand on its own, even when contextualised by the plot of nodes’
opinion trajectories. To avoid confusion, an error threshold (𝑒𝑟𝑟) is applied. This threshold is used to create a
minimum floor value (𝐹𝑙𝑜𝑜𝑟) for the convergence metric. Results smaller than this floor are levelled to the
floor value. This adaptation of the convergence metric prevents the development of small rounding errors
while giving context to the results.
𝑒𝑟𝑟
Floor= Eq. 14
TD [0]
if CM <Floor then CM=Floor, Eq. 15
the error threshold (𝑒𝑟𝑟) is set at a value of 10−7.
Analysis
The convergence of the consensus algorithm is proven by assessing the changing (converging) boundedness of
compliant agents at each time step. The update of the algorithm, from Eq. 11, which can be written as
7𝜓 [𝑡+1]= 𝜓 [𝑡]+ 𝜖⋅ 𝟏𝑇 ⋅(𝜓 [𝑡]⋅𝟏𝑇 − 1 𝐹[𝑡]). Eq. 16
𝑖 𝑖 𝐹𝑖 𝑖 𝐹𝑖 |𝐹𝑖| 𝑖
This can be rearranged as
𝜓 [𝑡+1]= 𝜓 [𝑡]+ 𝜖⋅ 𝟏𝑇 ⋅(𝜓 [𝑡]⋅𝟏𝑇 − 𝜇𝐹𝑖 [𝑡]) Eq. 17
𝑖 𝑖 𝐹𝑖 𝑖 𝐹𝑖 𝑖
where
𝜇𝐹𝑖
[𝑡] is the local mean of the filtered values 𝐹[𝑡] at time 𝑡. It should be noted that
𝜇𝐹𝑖
[𝑡],
𝑖 𝑖 𝑖
1
𝜇𝐹𝑖 [𝑡]= 𝐹[𝑡], Eq. 18
𝑖 |𝐹| 𝑖
𝑖
differs from 𝜇 [𝑡] (the mean of all values received by agent 𝑖) as extremist values are filtered out of the
𝑖
distribution. Given this rearranging,
lim𝜓 [𝑡]→ 𝜇𝐹𝑖 [𝑡] . Eq. 19
𝑡→∞ 𝑖 𝑖
As established by the algorithm rules, the values 𝐹[𝑡] change at each time step and so will the local filtered
𝑖
mean
(𝜇𝐹𝑖
[𝑡]). The local filtered mean will in turn evolve to a global mean 𝑀 [𝑡] as the agents communicate
𝑖
with each other and disruptions are filtered out. Although not a static value, the global mean will remain stable
for the most part, being a weighted mean of the local means, in addition to being a function of the network
topology and of the initial state values
lim𝜇𝐹𝑖[𝑡]→ 𝑀 [𝑡] Eq. 20
𝑡→∞ 𝑖
∴ lim𝜓 𝑖[𝑡]→ 𝑀 [𝑡]. Eq. 21
𝑡→∞
This can be rearranged such that
∴ lim(𝜓 𝑖[𝑡]−𝑀[𝑡])→0, Eq. 22
𝑡→∞
which can be understood in terms of the bounds as
|𝜓 [𝑡+Δ]−𝑀[𝑡+Δ]|≤|𝜓 [𝑡]−𝑀[𝑡]| Eq. 23
𝑖 𝑖
where 𝑡+∆ >𝑡 as ∆ > 0 is a positive non-zero value representing a change in time. Note that the consensus
algorithm operates in a discrete synchronous manner. On the basis that all agents send (and receive) their
opinions at the same time and at the same frequency, time can be counted in a discrete fashion with time
steps. As such, ∆ can also be viewed as a non-zero number of time steps. When looking at the state values ψ[t]
of all the compliant agents
max(𝜓 [𝑡+Δ])≤max(𝜓 [𝑡]) Eq. 24
𝑖 𝑖
min(𝜓 [𝑡+Δ])≥ min(𝜓 [𝑡]). Eq. 25
𝑖 𝑖
Such that if 𝑟 is the range of opinions of compliant nodes
𝑟[𝑡]= max(𝜓 [𝑡])−min(𝜓 [𝑡]) Eq. 26
𝑖 𝑖
𝑟[𝑡+Δ]= max(𝜓 [𝑡+Δ])−min(𝜓 [𝑡+Δ]) Eq. 27
𝑖 𝑖
8𝑟[𝑡++Δ]≤𝑟[𝑡] . Eq. 28
This means that a decreasing range of agents’ opinions is observed over time as the agents converge. While it
is known that the agents will tend towards their local mean, as a result of the filtering mean-based consensus,
the “pull” or attraction towards the local mean may lead an agent’s opinion further away from the global mean.
However, if sufficient exchange of data takes place, such as the ones ensured by meeting the sufficient and
necessary conditions of [(𝐹+1,𝐹+1)−𝑟𝑜𝑏𝑢𝑠𝑡𝑛𝑒𝑠𝑠] (where robustness is described by LeBlanc in [4]), this
local mean converges to the global mean.
Numerical Experimentation
Four numerical experiments are used to investigate the algorithm’s performance. Experiment 1 considers a
single network with disruptors, where the performance of the ODDI-C Algorithm is compared against a scenario
with a classical mean-based algorithm (no filtering) implemented. This allows for the confirmation of the Weak
Validity property and for the behaviour of compliant nodes following ODDI-C to be examined in the face of
specific patterns of disruptive behaviours. Experiment 2 assesses the performance impact of changing network
connectivity in the face of a constant number of disruptions using a series of small Monte Carlo simulation (50
runs) per connectivity level. This test enables for ODDI-C’s performance to be measured for various
connectivity levels, assessing the connectivity’s impact on the Termination and Agreement properties. ODDI-
C’s output is compared against the MSR-Algorithm’s [8] for the same networks, its behaviour being a point of
reference in the field of disruption tolerant consensus (details of its implementation are provided in Section:
MSR Implementation).
Experiment 3 uses a sequence of small Monte Carlo simulations to evaluate ODDI-C’s performance degradation
(deterioration of compliance with the Termination and Agreement properties) when dealing with increasing
numbers of disruptions for networks with fixed connectivity. This test is used to investigate the Termination
and Agreement properties of the algorithm, particularly regarding (|𝐷|), the number of disruptors, which
overwhelm attempts at consensus building. Similar, to Experiment 2, each simulation is duplicated using MSR
as comparison. Experiments 2 and 3 are both performed on 20-node networks to allow for a sufficient number
of message exchanges and nodes to showcase the algorithm’s scaling while remaining of a comprehensible
and manageable size.
The premise of ODDI-C Algorithm is an undetectable fault or attack scenario disrupting the system’s ability to
achieve Termination and Agreement [31]; meaning, disruptions inhibit the Weak Validity property. Disruptive
agents are understood as being “deceptive”, with non-disruptive agents remaining unaware of their presence
in the system. Disruptive agents do not follow the ODDI-C Algorithm, instead adopting unknown behaviours
and/or values and broadcasting them [32]. Three types of disruptions are used across the three Experiments:
a sine wave (T1, described in Eq. 29), a linearly increasing function (T2, described in Eq. 30), and a noise pattern
(T3, described in Eq. 31). The functions describing them are
(Ψ̅[0]+𝑠 )+ (𝐴⋅𝑟)∗sin( 𝜔𝑡+𝑠 )
𝑦 𝑥 Eq. 29
Ψ̅[0]+ 𝑚⋅𝑡 Eq. 30
Ψ̅[0]+ rand⋅0.9⋅𝑟, Eq. 31
9where, Ψ̅[0] is the average of all nodes (including ones that will become disruptive) at time 0, 𝑠 is the vertical
𝑦
y-axis shift of the sine wave disruption, 𝑠 is the horizontal x-axis shift of the sine wave disruption, 𝐴 is the
𝑥
amplitude factor of the sine wave disruption, 𝑟 is the range of node values at time 0, 𝜔 is the angular frequency
of the sine wave disruption, 𝑚 is the gradient of the linear function, and rand is a uniformly distributed random
number in the interval [0,1]. Initial node values of are drawn from normal distributions with mean 𝜇 and
standard deviation 𝜎, and described as
Ψ[0]~ 𝒩(𝜇,𝜎2).
Eq. 32
In all test cases, disruptive agents become active from time step 2 onward. These nodes keep the same identity
throughout the run. The nodes do not recover and are considered to remain disruptive for the extent of each
run. The convergence metric is determined and used to compare ODDI-C and MSR’s behaviour in multi-run
scenarios. The termination criterion for all Experiments is a maximum time 𝑡 =40, with the simulation
𝑚𝑎𝑥
stopping once this maximum time is reached.
For Experiment 1, the network robustness is provided. This metric is provided to enable comparisons of the
proposed algorithm performance to other consensus algorithms, which test their algorithms on graphs
described by their robustness. Networks are changed randomly for Experiments 2 and 3, as such their
robustness are not provided considering their lack of relevance. As defined by LeBlanc [8], network robustness
formalises the notion of redundancy of direct information exchange between the various subsets in the
network. It is a term which captures the idea that there are enough nodes in every pair of non-disjoint sets
within the network that have at least a given number of neighbours outside of their respective sets. That is,
that each node receives enough information so that it will not be swayed by disruptive agents attempting to
“contaminate” the subset to which the node belongs. The reader is directed towards [8] for details regarding
this robustness calculation.
MSR Implementation
MSR relies on knowledge of the number of disruptions |𝐷| in the system, with at most |𝐷| ×2 being filtered
out. At each time step, each node 𝑖 receives its in-neighbours’ values (Ψ[𝑡]), forms a sorted list, and proceeds
𝑖
to the filtering. If there are less than |𝐷| values larger than the node’s own value (|𝐷|>|Ψ[𝑡]>𝜓[t]|), then
𝑖 i
node 𝑖 only removes the values strictly larger than its own (|Ψ[𝑡]>𝜓[t]|), otherwise it removes precisely the
𝑖 i
number of disruptive values known to be present in the system (|𝐷|). Likewise, if there are less than |𝐷| values
strictly smaller than the node’s own value (|𝐷|>|Ψ[𝑡]<𝜓[t]|), only this number will be removed.
𝑖 i
Otherwise, precisely |𝐷| smaller than the node’s values will be removed. The remaining values 𝐹[𝑡] are used
𝑖
in linear consensus update as described in Eq. 11. MSR’s implementation in Experiments 2 and 3 follows [8].
Experiment 1: Single run
Two simple scenarios are first considered, focusing on assessing single runs on two networks. Two multi agent
networks are assessed, one with 𝑁 = 7 nodes and the other with 𝑁 = 15 nodes. In the first case, the
disruptive agents are 𝐷 = 1,7 and in the 15-node case, they are 𝐷 = 4,12. The 7- node network is (3,3)-
robust while the 15-node is (5,1)-robust (in addition to being (4,2)- and (3,2)-robust). All agents (compliant and
10disruptive) have initial values drawn from a normal distribution. The 7-node case have initial conditions
between 10 and 100 (distribution described in Eq. 32, parameters 𝜇 =50.5, 𝜎 =24.75 ) and deals with two
disruptive sine waves (T1, as described in Eq. 29), one with a large period and amplitude, and another with a
small period and amplitude. The 15-node case has initial conditions set between 1 and 15 (distribution
described in Eq. 32, parameters 𝜇 =8, 𝜎 =7) and its disruptive behaviours are a linearly increasing function
(T2, as described in Eq. 30) and a noise function (T3, as described in Eq. 31). The parameters describing the
disruptive behaviours in Experiment 1 are shown in Table 1 for the 7-node and 15-node cases:
Table 1: Experiment 1 Disruptive Node Parameters
𝐴 𝑠 𝑠 𝜔 𝑚
𝑥 𝑦
D1 (T1) 0.4523 1.5011 0.4289 1.8711 −
EXP1:7
D2 (T1) 0.4512 3.2642 -1.3117 0.2761 −
EXP1:7
D1 (T2) − − − − -0.1707
EXP1:15
D2 (T3) − − − − −
EXP1:15
11Figure 2: Comparison of the ODDI-C and the Simple Mean-based Algorithm performances for the 7- Node (3,3)-
robust Network with 2 Disruptive Agents. The two disruptive agents both exhibit a sine wave (T1, as described
in Eq. 29), each with a different amplitude and period. Tiles (a and c) show the nodes’ Opinion Trajectories for
the ODDI-C (a) and the Mean-based algorithms (c), tile (b) shows the network diagram (compliant agents shown
in purple) and tile (d) compares the scenarios’ Convergence Metric (calculated as the normalised difference
between compliant nodes).
The results of the simulation of the 7-node network are shown in Figure 2; note the convergence metric’s floor
value of ~10−8. The disruptive behaviours and the nodes’ initial conditions are the same for both the ODDI-C
and the Mean-based Algorithm cases. As seen in Figure 2 (a), with ODDI-C implemented, consensus is rapidly
and effectively reached - unlike the case with the mean-based algorithm (c). This is expressed more clearly
looking at the convergence metric, Figure 2 (d), which decreases for ODDI-C’s run as compliant nodes come
together and the difference between their state value reduces. This is not true for the mean-based algorithm
simulation for which the convergence metric fluctuates along with the disruptive nodes’ values.
12Figure 3: Comparison of the ODDI-C and the Simple Mean-based algorithm performances for the 15-Node (3,2)-robust
Network with 2 Disruptive Agents. The two disruptive agents exhibit are a noise pattern (T3, as described in Eq.
31) and a linear behaviour (T2, as described in Eq. 30) respectively. Tiles (a and c) show the nodes’ Opinion
Trajectories for the ODDI-C (a) and the Mean-based algorithms (c) respectively, tile (b) shows the network
diagram (compliant agents shown in purple) and tile (d) compares the scenarios’ Convergence Metric
(calculated as the normalised difference between compliant nodes.
The results of the simulation of the 15-node network are shown in Figure 3. Here again, the difference between
ODDI-C and the Mean-based Algorithm runs are clear - with ODDI-C maximum convergence (floor value of the
convergence metric) is reached in around 15 steps, while with the mean-based algorithm, the state values of
the compliant nodes wobble and proper consensus is not reached.
Experiment 2: Fixed number of disruptors, Increasing network connectivity
A twenty-node network dealing with a fixed number of disruptive nodes, |𝐷|=5, is considered. The
algorithm’s performance is assessed when increasing the network connectivity (in-degree) in steps of two,
𝑉𝑖𝑛 = [3,5,…,15]. To account for the random nature of all consensus algorithms and of possible behaviours,
13Monte Carlo simulations of 50 runs per in-degree are performed. The results of the runs, meaning their
convergence metrics, are averaged to showcase the trends of the simulations with error bars provided to show
maximum and minimum values of each batch’s convergence metrics. These are also used for the ODDI-C
Algorithm’s comparison with the MSR.
To allow for comparison, the behaviour of the disruptions is kept constant across runs and Monte Carlo batches
(50 × 8 = 400 simulations). The opinion trajectories are calculated for the first simulation, stored, and then
re-used for subsequent simulations. Note however that while the behaviours are fixed, the identities of the
nodes exhibiting this disruptive behaviour are not, being selected at random from the pool of all node for each
run. The disruptors are three sine waves (T1, described in Eq. 29), a linear function (T2, described in Eq. 30),
and a noise function (T3, described in Eq. 31). The parameters describing the disruptive behaviours are shown
in Table 2.
Table 2: Experiment 2 Disruptive Node Parameters
𝐴 𝑠 𝑠 𝜔 𝑚
𝑥 𝑦
D1 (T1) 0.1137 1.2050 -3.9058 3.1381 −
EXP2
D2 (T1) 0.5181 0.9961 -1.5561 0.2217 −
EXP2
D3 (T2) − − − − 0.5738
EXP2
D4 (T1) 0.39528 4.5602 -0.0241 0.2203 −
EXP2
D5 (T3) − − − − −
EXP2
For each run, a new uniformly random graph is constructed. Taking as input the batch’s in-degree, each node’s
in-neighbours are selected uniformly at random, without replacement, from the vector of all other nodes in
the system. This simple random selection of in-degrees allows for a maximum variation between the tested
digraph networks and their resulting adjacency matrix.
Figure 4: Comparison of the ODDI-C (a) and MSR (b) Algorithms’ convergence metrics.
The ODDI-C Algorithm’s outperforms the MSR (a pattern repeated for other disruptive behaviours) as observed
across Figure 4. For each connectivity, ODDI-C reaches consensus with equal or better performance than MSR.
14When simulating high in-degrees, ODDI-C reaches consensus with equal or fewer time steps than MSR despite
having no knowledge of the number of disruptive agents within the system. Lower in-degree exhibit similar
behaviour, due to the high ratio of disruptor nodes to connectivity, the MSR filters out most if not all values
received by nodes. As a result, compliant nodes cannot reach any form of consensus (see tile (b) of Figure 4).
This is not the case of ODDI-C, which even with low in-degrees manages to bring nodes to some form of low-
level consensus in the network.
Experiment 3: Fixed network connectivity, Increasing number of disruptors
The scenario investigated looks at a twenty node network with a fixed connectivity (in-degree of 6 for all
agents) dealing with an increasing number of unknown disruptors, |𝐷|, starting with no disruptors and
increasing in steps of 1 until reaching a maximum of 8: (|𝐷|= [0,1,…,8]). Considering the random nature of
all consensus algorithms and of their possible behaviours, short Monte Carlo simulations of 50 runs are
performed for each batch of disruptors. The results of the runs, meaning their convergence metrics, are
averaged to showcase the trends of the simulations, with error bars showing maximum and minimum
convergence metric values being shown at constant intervals. These are also used in the comparison with the
MSR.
To enable comparison between the ODDI-C and MSR algorithms, the behaviour of the disruptions is kept
constant across runs, and Monte Carlo batches. For the first run of the second simulation batch (number of
Disruptive agents (|D| = 1)), the opinion trajectory of the disruptive node is calculated before being stored.
This opinion at each time step is then re-used for the other 49 runs of the batch (|𝐷|= 1) as well as being
used by later batches with more disruptive agents. Taking the case of |𝐷|= 7, the behaviour of D=1 is the
same as for |𝐷| = 2,3,…,8. This continuity enables for a fairer comparison of not only runs, but also MSR
against ODDI-C Algorithm. Note that the node identity of the disruptors is non-constant, being selected at
random from the pool of all node for each run. This Experiment’s disruptions are four sine waves (T1, described
in Eq. 29), a linear function (T2, described in Eq. 30), and three noise functions (T3, described in Eq. 31). The
parameters of these disruptions are shown in Table 3.
Table 3: Experiment 3 Disruptive Node Parameters
𝐴 𝑠 𝑠 𝜔 𝑚
𝑥 𝑦
D1 (T1) 0.3666 1.6825 0.2100 1.2452 −
EXP3
D2 (T1) 0.08841 4.3958 1.1349 1.12364 −
EXP3
D3 (T3) − − − − −
EXP3
D4 (T1) 0.4889 0.4714 -0.0241 4.4269 −
EXP3
D5 (T3) − − − − −
EXP3
D6 (T3) − − − − −
EXP3
D7 (T1) 0.6072 3.0984 -2.0524 2.4376 −
EXP3
15D8 (T2) − − − − -0.3156
EXP3
The results of Experiment 3 are shown in Figure 5. The convergence metrics are plotted for all investigated
disruptor numbers, with error bars. As before, ODDI-C sees a performance equal or better than that of the
MSR in all cases. For cases with no or low numbers (0-3) of disruptive agents, the convergence patterns are the
similar for both ODDI-C and MSR. MSR reaches maximum consensus in around 25 seconds while ODDI-C
reaches consensus in almost 30 seconds. This trend reverses for higher numbers of disruptors. In these cases,
ODDI-C’s caution is rewarded as the disruption are observed to have less impact than on MSR’s convergence.
Figure 5: Comparing the convergence metrics of the ODDI-C (a) and MSR (b) Algorithms.
Discussion
Numerical analysis of performance confirms that the ODDI-C Algorithm satisfies its design requirements,
meaning the Termination, Agreement, and Weak Validity properties, whilst outperforming MSR when looking
at simulation convergence metrics. Experiment 1, through its simulation of the 7-node and 15-node networks
(Figure 2 (a) and Figure 3 (a) respectively), validates the ODDI-C algorithm’s Weak Validity property. This is
further corroborated by Experiment 3’s 0-Disruptor test which sees rapid consensus among all nodes.
Experiment 1 also demonstrates ODDI-C’s adaptability to various types of disruptive behaviour. As shown
across both scenarios including disruptive nodes, the algorithm minimises the influence of disruptors.
Compared to the mean-based algorithm case, ODDI-C is observed to effectively dampen disruptive instabilities
while ensuring convergence of compliant nodes.
Experiments 2 and 3 validate ODDI-C’s Termination and Agreement Properties. In addition, they display ODDI-
C’s adaptability and its advantages compared to MSR, other than the already significant ability to operate
without knowledge of the number of disruptive nodes in the network. In both experiments, MSR’s trends show
a near-constant convergence of compliant nodes until convergence plateaus are reached (see both Figure 4
(b) and Figure 5 (b)). This behaviour is expected from MSR’s fixed filtering method. If the number of disruptors
is known, filtering out twice that number of the most extreme values received will result in a steady
convergence, unaffected by disruptive patterns. This is not the case for ODDI-C. The algorithm filters a non-
constant number of values, each time adapting to the values received. As a result, filtering and convergence
vary for each node across time steps and runs, as noted by ODDI-C’s less constant rate of convergence in both
16experiments.
In experiment 2, the adaptability is illustrated when assessing both MSR’s and ODDI-C’s behaviours at high in-
degrees. For MSR, increasing connectivity significantly improves the gradient of convergence, in a steady and
consistent manner (see Figure 4 (b)). MSR’s performance nonetheless remains limited by the amount of
filtering being performed. Experiment 2 deals with 5 fixed disruptors, and thus up to 10 values will be filtered
out (the 5 highest and lowest values received). In most cases, fewer values will be removed as only values
strictly more extreme than the node’s own values are removed. Despite this precaution, a vast number of non-
malicious nodes will be filtered out, slowing consensus. This is not the case for ODDI-C whose filtering is
dynamic and for which increasing connectivity drastically improves performance (see Figure 4 (a)). This
improvement in convergence is the result of nodes being provided with more data points/samples from which
to create their data distributions and from which to calculate z-scores for filtering (see Section: Algorithm Rules
for details of the algorithm’s filtering). Increasing connectivity refines the filter, resulting in a faster
convergence. While ODDI-C displays high convergence trends, especially when boosted by high in-degrees, it
is worth acknowledging a by-product of this adaptability: when exhibiting non-extreme values, disruptive
nodes may not be caught by the dynamic filtering and may thus impact the final convergence value. This by-
product is observed when looking at ODDI-C’s trends for relatively high in-degrees (𝑉𝑖𝑛 = 7) for which
oscillations or “wobbles” are observed starting from time step 25. This behaviour, which stems from
disrupting sine wave oscillations, emerges only in the ODDI-C simulations. Note, MSR’s faces the same
disruptors but is also less converged. This variation is the results of distributed consensus’ dynamism,
specifically, the fact that compliant nodes are always accounting for other nodes’ values when creating their
filters. Thus, in cases where disruptor nodes’ values come close to connected nodes’ medians, their disrupting
values will influence compliant node’s update, making them waver. This characteristic, the wobbling of
compliant nodes’ convergence, nonetheless remains small (see the log-scale used for the convergence metric).
ODDI-C’s adaptability is similarly observed in Experiment 3’s performance difference between MSR and ODDI-
C. Specifically, for low numbers of disruptors. When dealing with no or low numbers of disruptions, the MSR
acts like a classical mean-based consensus, removing none (or very few) of its neighbours. ODDI-C meanwhile,
still filters in-coming values. As such, nodes will be accepting a reduced number of state values compared to
the MSR, slowing down convergence (see Figure 5). Despite this slight drawback, ODDI-C will still reach
convergence; this vigilance is proven to be an advantage whenever disruptions are involved in any scenario.
Against low numbers of disruptions, the algorithm’s dynamism avoids over-filtering. Unlike the MSR, ODDI-C
is therefore able to reach very high levels of convergence without plateauing when presented with disruptions
(similar to the patterns observed in Figure 4).
Finally, ODDI-C’s adaptability is what allows it to provide a level of convergence when dealing with high ratios
of disruptors to connectivity (batches with low connectivity in Figure 4 and high number of disruptors in Figure
5). The higher this ratio, the poorer the convergence, although this remains better than MSR’s complete lack
of consensus. On MSR’s part, this is the result of filtering out all values. For ODDI-C, this stems from the
calculation of a median-based z-score. That is, the fewer in-neighbours a node has, the less data points will it
have to form a distribution of received values. Z-scores calculated will be coarser and less accurate, with the
node’s own z-score (which acts as filter discriminant) being more easily influenced by extreme nodes. High
ratios of disruptor to connectivity are also much more likely to see one node being overwhelmed by disruptive
nodes, and in turn acting disruptive to its own out-neighbours. Nevertheless, it is interesting to note that high
17levels of performance can still be reached for specific networks (see error bars) even in cases of low
connectivities.
In summary, ODDI-C outperforms MSR thanks to its adaptability, despite lacking knowledge of the topology or
number of disruptive agents. With its dynamic filtering approach, ODDI-C effectively filters disruptions for a
range of disruptor number to connectivity ratios, demonstrating high levels of disruption-resilience. ODDI-C
makes the most of increased connectivity and information when its nodes receive it, more so than MSR, as
well as continuing to function in runs facing high disruptor ratios which overwhelm MSR. ODDI-C’s social
dynamics derived resilience is noted across all three experiments, confirming the algorithm as disruption-
tolerant and validating its consensus properties across a range of scenarios.
Conclusion
The mechanics of social opinion dynamics can be used to engineer efficient disruption-tolerant consensus
algorithms in fixed networks requiring no knowledge of either network topology or the number of disruptive
agents. By adapting the mechanics of tolerance-based opinion diffusion, the Opinion Dynamics-inspired
Disruption- tolerant Consensus (ODDI-C) algorithm effectively dampens the instabilities generated by disruptor
agents. By curbing the impact of disruptors, shown to affect mean-based algorithm scenarios, the ODDI-C
Algorithm enables high levels of convergence to be reached and confirms itself to be disruption-tolerance. The
algorithm presented outperforms the classical MSR Method, reaching a tighter set of converged values for the
same connectivity in addition to being more robust to the influence of disruptor nodes. The ODDI-C Algorithm
enables for better consensus in spite of the presence of disruptive agents and less knowledge than that
required by MSR.
Declarations
Availability of data and materials
The source code supporting the conclusions of this article is available in the ODDI-C Algorithm GitHub
repository, https://github.com/Agathe18474/ODDI-C-Algorithm/tree/v1.0.
Project Name: ODDI-C Algorithm.
Archived version at time of the publication: https://zenodo.org/doi/10.5281/zenodo.10650711
Operating system: Platform independent.
Programming Language: MATLAB 2023b.
Any restrictions to use by non-academics: MATLAB licence needed.
Competing interests
Not applicable.
Funding
This project is funded by the Air Force Office of Scientific Research (AFOSR), Grant number FA8655-22-1-7033.
18Authors' contributions
Conceptualization and methodology, A.B., R.C., C.L., and M.M.; software and numerical experiments, A.B.;
Interpretation, A.B., R.C., and M.M.; writing, review, and editing, A.B., R.C., and M.M.; funding acquisition,
M.M, and R.C. All authors have read and agreed to the published version of the manuscript.
Acknowledgements
Not applicable.
References
[1] D. Ding, Q.-L. Han, Y. Xiang, X. Ge, X.-M. Zhang, A survey on security control and attack detection for
industrial cyber-physical systems, Neurocomputing, 275 (2018) 1674-1683.
[2] D. Sakavalas, L. Tseng, Network topology and fault-tolerant consensus, Synthesis Lectures on
Distributed Computing Theory, 9 (2019) 1-151.
[3] P. Michiardi, R. Molva, Core: a collaborative reputation mechanism to enforce node cooperation in
mobile ad hoc networks, Advanced Communications and Multimedia Security: IFIP TC6/TC11 Sixth Joint
Working Conference on Communications and Multimedia Security September 26–27, 2002, Portorož,
Slovenia, Springer, 2002, pp. 107-121.
[4] R. Olfati-Saber, J.A. Fax, R.M. Murray, Consensus and cooperation in networked multi-agent systems,
Proceedings of the IEEE, 95 (2007) 215-233.
[5] F. Pasqualetti, A. Bicchi, F. Bullo, Consensus computation in unreliable networks: A system theoretic
approach, IEEE Transactions on Automatic Control, 57 (2011) 90-104.
[6] A. Jadbabaie, J. Lin, A.S. Morse, Coordination of groups of mobile autonomous agents using nearest
neighbor rules, IEEE Transactions on automatic control, 48 (2003) 988-1001.
[7] M. Al-Kuwaiti, N. Kyriakopoulos, S. Hussein, Network dependability, fault-tolerance, reliability,
security, survivability: a framework for comparative analysis, 2006 International Conference on Computer
Engineering and Systems, IEEE, 2006, pp. 282-287.
[8] H.J. LeBlanc, H. Zhang, X. Koutsoukos, S. Sundaram, Resilient asymptotic consensus in robust networks,
IEEE Journal on Selected Areas in Communications, 31 (2013) 766-781.
[9] L.-A. Phan, T. Kim, Fast consensus-based time synchronization protocol using virtual topology for
wireless sensor networks, IEEE Internet of Things Journal, 8 (2020) 7485-7496.
[10] Y. Lv, G. Wen, T. Huang, Adaptive protocol design for distributed tracking with relative output
information: A distributed fixed-time observer approach, IEEE Transactions on Control of Network
Systems, 7 (2019) 118-128.
[11] J.A.V. Trejo, D. Rotondo, M.A. Medina, D. Theilliol, Observer-based event-triggered model reference
control for multi-agent systems, 2020 International Conference on Unmanned Aircraft Systems (ICUAS),
IEEE, 2020, pp. 421-428.
[12] R.M. Kieckhafer, M.H. Azadmanesh, Reaching approximate agreement with mixed-mode faults, IEEE
Transactions on Parallel and Distributed Systems, 5 (1994) 53-63.
19[13] L. Su, N.H. Vaidya, Reaching approximate byzantine consensus with multi-hop communication,
Information and Computation, 255 (2017) 352-368.
[14] M.H. Azadmanesh, R.M. Kieckhafer, Exploiting omissive faults in synchronous approximate
agreement, IEEE Transactions on Computers, 49 (2000) 1031-1042.
[15] H. Zhang, S. Sundaram, Robustness of information diffusion algorithms to locally bounded
adversaries, 2012 American Control Conference (ACC), IEEE, 2012, pp. 5855-5861.
[16] C. Castellano, S. Fortunato, V. Loreto, Statistical physics of social dynamics, Reviews of modern
physics, 81 (2009) 591.
[17] G. Weisbuch, G. Deffuant, F. Amblard, J.P. Nadal, Meet, discuss, and segregate!, Complexity, 7 (2002)
55-63.
[18] J. Xie, S. Sreenivasan, G. Korniss, W. Zhang, C. Lim, B.K. Szymanski, Social consensus through the
influence of committed minorities, Physical Review E, 84 (2011) 011130.
[19] G. Deffuant, W. Jager, W. Moss, Dialogues concerning a (possibly) new science, Journal of Artificial
Societies and Social Simulation, 9 (2006).
[20] J.-D. Mathias, S. Huet, G. Deffuant, Bounded confidence model with fixed uncertainties and
extremists: The opinions can keep fluctuating indefinitely, Journal of Artificial Societies and Social
Simulation, 19 (2016) 6.
[21] G. Deffuant, F. Amblard, G. Weisbuch, T. Faure, How can extremism prevail? A study based on the
relative agreement interaction model, Journal of artificial societies and social simulation, 5 (2002).
[22] P. Sobkowicz, Extremism without extremists: Deffuant model with emotions, Frontiers in Physics, 3
(2015) 17.
[23] S. Guarino, N. Trino, A. Celestini, A. Chessa, G. Riotta, Characterizing networks of propaganda on
twitter: a case study, Applied Network Science, 5 (2020) 1-22.
[24] O. Araque, C.A. Iglesias, An approach for radicalization detection based on emotion signals and
semantic similarity, IEEE Access, 8 (2020) 17877-17891.
[25] H. Berghel, Malice domestic: The Cambridge analytica dystopia, Computer, 51 (2018) 84-89.
[26] F. Pierri, A. Artoni, S. Ceri, Investigating Italian disinformation spreading on Twitter in the context of
2019 European elections, PloS one, 15 (2020) e0227821.
[27] C. Leys, C. Ley, O. Klein, P. Bernard, L. Licata, Detecting outliers: Do not use standard deviation around
the mean, use absolute deviation around the median, Journal of experimental social psychology, 49 (2013)
764-766.
[28] M. Raynal, Consensus in synchronous systems: A concise guided tour, 2002 Pacific Rim International
Symposium on Dependable Computing, 2002. Proceedings., IEEE, 2002, pp. 221-228.
[29] P. Civit, S. Gilbert, R. Guerraoui, J. Komatovic, M. Vidigueira, On the Validity of Consensus,
Proceedings of the 2023 ACM Symposium on Principles of Distributed Computing, 2023, pp. 332-343.
[30] P.J. Rousseeuw, C. Croux, Alternatives to the median absolute deviation, Journal of the American
Statistical association, 88 (1993) 1273-1283.
[31] R.M. Ferrari, A.M. Teixeira, Safety, Security and Privacy for Cyber-Physical Systems, Springer2021.
20[32] Y. Shang, Median-based resilient consensus over time-varying random networks, IEEE Transactions
on Circuits and Systems II: Express Briefs, 69 (2021) 1203-1207.
21