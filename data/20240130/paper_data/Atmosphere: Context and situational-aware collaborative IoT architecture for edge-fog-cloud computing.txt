ComputerStandards&Interfaces79(2022)103550
Contents lists available at ScienceDirect
&
Computer Standards Interfaces
journal homepage: www.elsevier.com/locate/csi
Atmosphere: Context and situational-aware collaborative IoT architecture
for edge-fog-cloud computing
Guadalupe Ortiza,*, Meftah Zouaib, Okba Kazarb, Alfonso Garcia-de-Pradoa,
Juan Boubeta-Puiga
aUCASE Software Engineering Research Group, University of Cadiz, Puerto Real, Cadiz, Spain
bUniversity of Mohamed Khider, Laboratory LINFI, Biskra, Algeria
A R T I C L E I N F O A B S T R A C T
Keywords: The Internet of Things (IoT) has grown significantly in popularity, accompanied by increased capacity and lower
Collaborative Internet of Things cost of communications, and overwhelming development of technologies. At the same time, big data and real-
Edge computing time data analysis have taken on great importance and have been accompanied by unprecedented interest in
Smart data
sharing data among citizens, public administrations and other organisms, giving rise to what is known as the
Context and situational awareness
Collaborative Internet of Things. This growth in data and infrastructure must be accompanied by a software
Agent-oriented software
architecture that allows its exploitation. Although there are various proposals focused on the exploitation of the
Complex event processing
IoT at edge, fog and/or cloud levels, it is not easy to find a software solution that exploits the three tiers together,
taking maximum advantage not only of the analysis of contextual and situational data at each tier, but also of
two-way communications between adjacent ones. In this paper, we propose an architecture that solves these
deficiencies by proposing novel technologies which are appropriate for managing the resources of each tier: edge,
fog and cloud. In addition, the fact that two-way communications along the three tiers of the architecture is
allowed considerably enriches the contextual and situational information in each layer, and substantially assists
decision making in real time. The paper illustrates the proposed software architecture through a case study of
respiratory disease surveillance in hospitals. As a result, the proposed architecture permits efficient communi-
cations between the different tiers responding to the needs of these types of IoT scenarios.
1. Introduction instantly and they want it to be adapted to their situation and specific
context. Furthermore, they have already imposed a need to be part of
The Internet of Things (IoT) has become very popular in recent years; smart cities, which requires the processing of large amounts of data and
however, the term, introduced by Kevin Ashton in 1999 [1], is now more which are even more intelligent thanks to data democratization and
than two decades old. When it was first introduced the scope of the IoT citizen data sharing.
was reduced to the supply chain, but today it refers to a wide spectrum of Therefore, the IoT requires not only the management of device data,
domains and is used in a broader sense, referring to the digital inter- but also the exchange of information between multidisciplinary plat-
connection of objects and devices that can obtain and share information forms. The vast amount of data from multiple smart devices can and
throughout platforms, providing added value to businesses, adminis- should be shared to provide added value and enable a broader global
trations and citizens. understanding of the domain in question. Collaborative IoT (C-IoT)
The rise of the IoT has been accompanied by the improvement and takes account of IoT in the scope of heterogeneous domains and envi-
reduction in costs of technology and communications, as well as an ronments where sensors, gateways and services can interact at different
improvement in data analysis software; in particular, big data and levels; sensors provide their sensed data; gateways add intelligence and
streaming data processing, allowing for real-time decision making. take action or communicate information at a higher level; lastly, services
Furthermore, it is not only a question of greater profits for companies; use the information provided by the gateway to improve the quality of
we live in a so-called fast-paced society and citizens want everything life of people and business processes.
* Corresponding author
E-mail addresses: guadalupe.ortiz@uca.es (G. Ortiz), meftah.zouai@univ-biskra.dz (M. Zouai), o.kazar@univ-biskra.dz (O. Kazar), alfonso.garciadeprado@uca.es
(A. Garcia-de-Prado), juan.boubeta@uca.es (J. Boubeta-Puig).
https://doi.org/10.1016/j.csi.2021.103550
Received 3 November 2020; Received in revised form 9 April 2021; Accepted 12 June 2021
Availableonline20June2021
0920-5489/Â© 2021 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY-NC-ND license
(http://creativecommons.org/licenses/by-nc-nd/4.0/).G. Ortiz et al. C o m p u t e r S t a n d a r d s & I n t e r f a c es79(2022)103550
On the one hand, we are looking for low consumption protocols and that very high real-time processing ratios are achieved with the com-
software that allow a small device not only to send and receive mes- bination of SOA 2.0 and CEP [6]. Finally, as far as fog is concerned, we
sages, but also to have its own intelligence, thus going from a mere could see that processing with a SOA 2.0 combined with CEP was
connected device to becoming a smart one. On the other hand, we want reasonably good [8]. Since the aim of this paper is to minimize the use of
entire buildings and even entire cities to be connected, which requires resources and improve the performance in the fog as well as providing
higher bandwidth and massive, scalable data processing. the added value of coordinating communications with several nodes, we
To accommodate the collaborative IoT, we will need to design soft- will study how to improve this performance because SOA may be an
ware architectures that allow us to establish these communication oversized solution for fog. On the other hand, in the initially analyzed
channels, taking into account the capabilities and needs of each level of architectures, communication between the different levels is carried out
collaboration. We will have to design three levels of abstraction: (1) a through message brokers, mainly through low consumption protocols
lower level with the smart devices or edge devices that will obtain the such as Message Queuing Telemetry Transport (MQTT). Extending the
information from the sensors and will be able to interact with the ac- use of the broker to provide bidirectional communication does not imply
tuators, but that normally have limited computing resources; (2) a sec- relevant impact on node performance.
ond level, in the fog, that will allow us to collect information from RQ 3. If the answer to RQ2 is affirmative, would it be useful to have
several edge devices and act as a gateway for communication with other two-way communication among the three system layers and data pro-
gateways and with the third level; and (3) the latter being either the end cessing in all of them in a broad range of IoT scenarios?
user or being located in the cloud with its inherent high computing Again, we believe that the answer is affirmative: given the large
capacity. amount of data obtained today from various sources (sensors, adminis-
Most of the approaches we find today focus on one issue or another; trations, users, organizations, companies, etc.) and the proven benefit of
there are relevant approaches that center on ensuring the low resource real-time data analysis for decision making, we are convinced that many
consumption of the edge devices with their gateways [2,3] and others IoT scenarios will benefit from this architecture for the C-IoT. It will
that see to the real-time processing of large amounts of data reaching the allow for the processing and exchanging of situations of interest detected
cloud [4]. However, few focus their efforts on providing a solution with at the three levels in order to have greater contextual and situational
three levels of granularity that provides the best benefits from all parties knowledge for decision making.
and particularly that permits appropriate processing in every tier and RQ4. Besides, if the answer to RQ2 is affirmative, can we ensure
bidirectional communication between adjacent layers. interoperability between layers and coordination between devices of the
Hence, in order to address this issue, several Research Questions same or different layers despite the lack of agreement on communication
(RQ) arise; the first one is: standards for the IoT, and can we do it in a secure way?
RQ 1. Can we integrate various specific software approaches that Although there is currently no agreement on the standards to be used
have proven to be efficient at the edge, fog and cloud, respectively, to in terms of communications protocol and message payload format for
provide a complete three-tier software architecture in which all three the IoT, there is a trend towards the use of messaging brokers and low-
tiers can process information? power communication protocols such as Mosquito and MQTT [9],
In recent years, we have seen several approaches that give good re- respectively. In terms of the message payload format, there is no
sults at edge, fog and cloud levels. In particular, some of the authors of established scheme or standard, although the use of the JSON format is
this paper have proposed the use of agent-oriented programming as an very common. We believe that interoperability can be ensured by adding
efficient solution for making intelligent decisions based on sensed data a transformation module, where necessary, to send the data to the cor-
and data shared between the different edge nodes of the architecture responding node in the required format. Concerning coordination be-
[5]. Such agents will provide the edge nodes with intelligence, auton- tween devices of the same and different layers, on the one hand, we have
omy and capacity of cooperation and organization. The authors of the to highlight that there are several widely used protocols for coordinating
present paper have also made specific proposals for the processing of IoT software agents; on the other, it is worth noting that message brokers
data in context-aware cloud architectures [6,7] and in C-IoT environ- also support coordination through their communication mechanisms;
ments [8] by combining fog with cloud nodes through the use of therefore, we expect a smooth coordination between devices. Finally,
Event-Driven Service-Oriented Architectures (ED-SOA or SOA 2.0) and the security mechanisms used for communications are independent of
Complex Event programming (CEP). From our experience, we believe the proposal being presented, and existing standard mechanisms for
that the integration of the proposed solutions can provide a software such communications can be applied, with particular attention to sen-
architecture that covers the three levels efficiently. However, such sitive data.
previous proposals lack certain features that would significantly As a result, the main contribution of this paper is Atmosphere, a
improve the usefulness of the proposed architecture. First of all, the software architecture that covers all levels of the C-IoT and meets the
agent-based software architecture [5] focused all the analysis for deci- key requirements to address decision making from contextual and
sion making in the agentsâ layer and the gateway acted as a sole inter- situational heterogeneous data in an efficient way.
mediary and distributor of messages; thus, we lack data processing in the The proposal will benefit, on the one hand, from the intelligence,
gateway that could improve decision making on the edge devices. Sec- autonomy and low consumption of software agents in the edge tier; on
ondly, the C-IoT architecture involving cloud and fog nodes [8] lacks the other hand, having a gateway in the fog will allow us to centralize
bidirectional communication between fog and cloud nodes, and there- the information from various devices related to each other and process
fore the cloud does not benefit from the knowledge and situations of their relevant data and those obtained from the cloud to enhance deci-
interest detected in the fog. This leads us to the following research sion making. Finally, the cloud node will feedback and be fed back by
questions: the gateway with further situations of interest detected when processing
RQ 2. Would it be possible to have real-time data processing at every data from several sources. Despite the lack of standards, the use of
level of the integrated architecture as well as two-way communication protocols and data formats common to IoT information exchange in this
between the edge and fog nodes and the fog and cloud ones by adjusting proposal will facilitate interoperability between the layers and compo-
to system resources? nents of the proposed solution. Besides, we have illustrated the proposed
We certainly think so. By integrating the edge-specific architecture software architecture through a scenario for hospital patients with res-
with the C-IoT-specific architecture we are providing real-time pro- piratory diseases, where third parties such as pharmaceutical or research
cessing on all three levels of the architecture. In the case of the edge, the laboratories interact with the system.
system has been tested efficiently with the software agents [5]. The rest of the paper is organized as follows. Section 2 provides
Regarding the cloud, resources are almost unlimited and we have seen background information on the technologies and paradigms involved in
2G. Ortiz et al. C o m p u t e r S t a n d a r d s & I n t e r f a c es79(2022)103550
this paper. Then, Section 3 provides two specific examples of C-IoT orchestrating all connected devices, as well as, if necessary, devices in
scenarios. Afterwards, Section 4 describes the proposed Atmosphere the cloud [13].
architecture; it is initially described at a higher level for better under- Indeed, one of the main objectives of the combined use of edge and
standing, then communication between the different tiers and the soft- fog computing is to have intelligent sensing: submitting only useful data
ware architecture in each tier are explained. Section 5 describes how the based on the knowledge and intelligence available locally at the edge
architecture would be deployed in a case study based on one of the device to be processed at the fog [14].
illustrative scenarios in Section 3, providing some samples of agent rules Thus, fog computing provides certain advantages such as fewer
and event patterns to facilitate the comprehension of the system. Section resource requirements for edge devices, improved context awareness,
6 shows the results of the architecture performance evaluation. Section 7 low latency real-time processing and lower bandwidth requirements
discusses and compares existing related work to our provided proposal thanks to only having to submit the necessary collected data to the cloud
and Section 8 brings further discussion on the proposal itself. Finally, instead of all of it, as well as facilitating collaboration between several
conclusions and future work are presented in Section 9. edge devices [14].
Why do we still need a cloud? Because normally these fog devices
2. Background will also have limited resources, and they are expected to be close to the
final devices, where there most probably will be space restrictions. Be-
This section firstly introduces the relationship between edge, fog and sides, the information from many fog devices might be necessary to
cloud computing and, secondly, it places it within the context of the C- make higher level decisions, therefore they have to be submitted to a
IoT. Then, Ed-SOA is introduced, followed by an explanation of CEP and central computing node (in the cloud).
message brokers. Afterwards, context and situational awareness are Please note that sometimes the edge node can act as a fog node (with
explained. Finally, agent-oriented software is defined. enough computing capacities and submitting relevant information
directly to the cloud); other times, the suitable architecture might
2.1. Edge, fog and cloud computing include both edge and fog nodes, as well as, of course, cloud ones.
It is also worth clarifying that sometimes the terms edge and fog are
It is remarkable that we can find various definitions for edge and fog used indistinctly. The reason is that at times having a fog or not will
computing in the literature and that, among these definitions and de- depend, as previously explained, on the particular scenario; we might
scriptions, there are sometimes overlaps and unclear boundaries. have an edge device with enough capacity to act as a fog node and
Fog computing and edge computing seem similar, as both involve directly communicate with the cloud. This is why for some authors, edge
bringing intelligence and data processing closer to the data source. and fog devices might be considered as the same thing [15], since they
However, in fog computing, intelligent processing is expected to take are opposite to cloud computing nodes in the network connection [16].
place in a gateway in the local area network where the endpoint nodes However, in this paper we distinguish three tiers âedge, fog and
submit data to and from which they receive processed data back, cloudâ, as previously motivated [10â14].
whereas, in edge computing, intelligent processing is expected to take
place in final devices near the edge of the network [10]. 2.2. Collaborative Internet of Things
When we address edge computing we are referring to a hardware
infrastructure with computing capacities, which is generally located C-IoT [17] considers the IoT in the scope of heterogeneous elements
near the devices making use of said infrastructure. In the IoT scope, and domains, where sensors, gateways and services potentially intero-
normally so-called IoT devices provide such computing capacities and perate at different levels; sensors provide their sensed data; gateways
are named edge nodes, edge devices or smart devices, even though, add intelligence to them and undertake actions or report information to
depending on the granularity of the particular scenario, the devices may a higher level, and services utilize the information provided by the
have higher or lower computation capacity. Having such computing gateway to enhance peopleâs life quality or business processes.
capacities in the device itself provides several advantages: the first one is Collaboration on the IoT takes place on three concentric levels: the
that we can preprocess the data obtained in the edge device and innermost level would be the individual, the intermediate level would be
communicate such information to external devices only when relevant the industrial level and finally the outer level would be the infrastruc-
or necessary, saving edge device resources and improving latency; the ture. At all these levels, we can find a pyramid of applications that allow
second one is that the device can make its own decisions, if so pro- the materialization of the C-IoT: at the base of the pyramid we would
grammed, particularly useful when there is no network connection. have everything related to the sensor, at the intermediate level, the
With millions of interconnected devices, the generated data can be gateway and, finally, at the top of the pyramid, the services offered to
significantly extensive. Therefore, it is not possible to use the traditional the end user [17].
hardware environments and software tools to manage and process the For example, in the application domain of a pandemic, sensors of
data with an acceptable response time, but fog computing has the po- medical devices, patient data, medicines, etc., would be placed at the
tential to provide better performance for real-time services [11]. In this base of the pyramid; in the gateway we could have patient histories,
sense, fog computing responds to the need of an intermediate layer research results and known effects of the treatments; thirdly, in the
between the cloud and the smart end devices, where the fog provides cloud there would be a large bank of services to access treatments by age
support for low latency real-time analytics of data that cannot be pro- group, results, patient evolution depending on the treatment, affected by
cessed in the end-device as well as to interrelate and process together geographical area or admitted to each hospital, etc. We therefore have
data from different devices and to provide support to communications individual data (patients), industry data (treatments) and infrastructure
with external services. Edge devices are usually limited in computing data (hospital center information).
and storage but may process certain data the instant they sense them and Having said that, we can easily identify the previously explained
may make quick decisions that do not depend on other devicesâ data [12, terms, edge, fog and cloud with the three levels in the pyramid: sensing,
chapter 3]. Therefore, the use of fog computing does not involve either gateway and services, respectively.
doing all the analysis on the edge or not doing analysis on the edge, but Besides, what will give us great added value will be the combination
promotes doing as much processing on the edge as is possible and of data obtained from sensors or information systems with data provided
necessary within realistic constraints and processing the rest of the in- by citizens, and will allow us greater control and monitoring of various
formation in the fog. This way, some data are processed by applications C-IoT scenarios, such as e-health [4], smart cities [18], Industry 4.0
running on edge devices within the network and the rest of the data is [19], etc. To do this, we will need to be able to process heterogeneous
processed by a node in the fog, which is also responsible for intelligently data from various sources in real time. In order to be able to process
3G. Ortiz et al. C o m p u t e r S t a n d a r d s & I n t e r f a c es79(2022)103550
heterogenous data coming from several sources we will require a soft- Despite all the advantages provided by SOA 2.0, this type of archi-
ware architecture that permits it; this leads us to introduce Event-Driven tecture might not be ideal to analyze and correlate large amounts of data
Service-Oriented Architectures in Section 2.3. Furthermore, to be able to in terms of events in real time. To meet this requirement, it is necessary
perform data analysis streaming in real time, we will also require to integrate CEP [21], a technology that allows the capturing, analyzing
additional technologies, which brings us to explain complex event pro- and correlating of a large amount of heterogeneous data (simple events)
cessing and message brokers also in Section 2.3. It is worth pointing out with the aim of detecting relevant situations in a particular domain [23].
that when talking about real time throughout this paper, we refer to This situation of interest detected by an event pattern is named complex
quasi real time. This term differs from the strict traditional definition of event. The software that permits the analysis of streaming data according
real-time computation, where real-time responses are expected to be to the defined patterns in real time is the CEP engine. Among the com-
received in the order of milliseconds or even microseconds. Generally, plex event engines, Esper stands out due to its maturity and perfor-
the term quasi real time refers to a short-time response from a system mance, as well as the wide coverage of its EPL event pattern definition
according to its needs, it might be in the order of milliseconds or maybe language [24].
in seconds. For instance, as we will later see in the case study, if we need In addition, when large amounts of events are received, and have to
to warn a doctor to assist a patient a millisecond difference in the be processed by the system, it is convenient to integrate a new element
response time is not noticeable (some minutes delay would). Therefore, that facilitates such communications and the management of the input
such systems respond rapidly to the occurring events but do not require data. To do this, it is convenient to use a message broker. Message
strict under millisecond response. brokers implement an asynchronous mechanism which allows source
Note that the gateway in such smart systems for C-IoT has to provide and target messages to be completely decoupled, as well as allowing the
a number of relevant features [17]: storage of messages in the broker until they can be processed by the
target element.
1. It has to be context- and situational-aware to allow service There are brokers and protocols specifically designed for devices
customization. with limited resources. In particular, the MQTT [25] protocol was pro-
2. It needs to be able to make decisions on its own, without the need for posed as a light protocol implementing a publish/subscribe mechanism
sending the data to the cloud, which would delay the response. for Machine-to-Machine (M2M) communication; the broker Mosquitto
3. Given a certain context, it must be able to anticipate certain actions, [26] implements MQTT and is being frequently used in the scope of IoT
since it knows the situation and the user from a pre-existing history. nowadays.
4. It must be autonomous, be able to interoperate and collaborate with
other nodes in the system and make decisions based on a series of 2.4. Context and situational awareness
rules of reasoning facilitating communication between different
nodes. Dey et al.âs context definition in [27] is specially well-known, where
âContext is any information that can be used to characterize the situation of
According to feature number 1, we will need to introduce context an entityâ; such an entity can be almost anything âan object, a device, a
and situational awareness âsee Section 2.4â. In order to fulfill features citizen, et ceteraâ, which can be useful to improve the interaction be-
2 and 3, we will see how CEP, isolated and combined with a SOA 2.0, tween the end user and the computer system or application, as well as to
together with a message broker could be used âsee Section 2.3â. enhance the functionality of the application itself. Context will be spe-
Finally, autonomy âfeature 4â will be provided by an additional cific to each application and system domain and even to each system
technology, an agent-oriented software, introduced in Section 2.5. use.
Context awareness supports the fact that context information, ob-
2.3. Event-driven service-oriented architecture and complex event tained from the system environment, is properly used by the system to
processing improve its quality in terms of user satisfaction, and accuracy in terms of
the functionality of the system itself. That is, a context-aware system is
SOA represents a paradigm for the design and implementation of expected to use information such as location, company, known social
loosely coupled distributed systems where services are the main attributes, personal status, domain-specific known facts and other
implementation mechanism. These architectures deliver easy interop- available information to anticipate system needs so that more custom-
erability among third-party systems in a flexible and loosely coupled ized systems can be delivered. Therefore, a system is context-aware if it
way. This way, costs are reduced when system modifications or im- uses the context to provide relevant customized information and/or
provements are required, since the system will be easier to maintain and services to the user or to the system itself, adapting its system behavior
evolve [20]. to the particular needs of the specific user or system [28]. Context and
Success and growth in the use of service-based systems require a new context awareness have become a key issue for decision making in
service infrastructure that allows us to interconnect and maintain ap- general and for real-time decision making in particular [29].
plications flexibly. This infrastructure must support well-known web This leads us to the concept of situational or situation awareness,
service standards and provide support for a message middleware [20]. originally defined by Endsley [30] as âthe perception of elements in the
These requirements are fulfilled by an Enterprise Service Bus (ESB). An environment within a volume of time and space, the comprehension of their
ESB facilitates interoperability between various applications and com- meaning, and the projection of their status in the near futureâ. If we extend
ponents through standard service-oriented interfaces, facilitating the such a concept to computing situational awareness, we can think of it as
development of complex systems based on a SOA and allowing appli- the understanding of the events related to the entity and its context in a
cations to be offered as services in the ESB. The bus provides other given situation. As a result, the situation would be the result of context
additional advantages, among which we should highlight the assurance information pieces being interpreted and aggregated, in order to obtain
of system scalability. more meaningful situations of interest.
ED-SOA, or SOA 2.0., evolves from traditional SOA. Unlike tradi-
tional SOAs where communications are mainly carried out through 2.5. Agent-oriented software
remote procedure calls, in SOA 2.0. communication between users,
applications and services is mainly conducted by means of events [21]. In 1993, Shoham defined agents as âan entity whose state is viewed as
This new paradigm also benefits from the use of an ESB. In this case, the consisting of mental components such as beliefs, capabilities, choices, and
ESB will allow us to integrate various heterogeneous data sources and commitmentsâ [31], where the choices or actions will be based on the
invocations to various distributed systems and applications [22]. agentâs decisions, the latter being determined by the agentâs beliefs
4G. Ortiz et al. C o m p u t e r S t a n d a r d s & I n t e r f a c es79(2022)103550
according to its and other agentsâ capabilities. the scope of IoT [38â41], as well as those that include agents in the fog
More recently, in 2003, Silva et al. defined the concept of agent and [42,43] and of course proposals that take advantage of the great effi-
multi-agent systems (MAS) in the field of software engineering and ciency of CEP for real-time data analysis in the cloud [44,45]. However,
distributed systems [32], where agents are expected to represent we believe that they do not address the joint use of all these technologies
autonomous components in software systems. An agentÂ´s behavior is in a multitier edge-fog-cloud software architecture, which is what we
defined based on its plans and actions, its characteristics and the inter- contribute in this paper, taking a step further in the development of
action with other agents. In addition, they are considered proactive multitier software architectures for the IoT.
thanks to their autonomy to perform tasks. Besides, they are adaptive,
since they adapt their status and behavior by responding to messages 3. Illustrating scenarios for C-IoT
from other agents.
In MAS, the agents are autonomous and their characteristics allow In this section we provide two illustrative examples of C-IoT sce-
them to interact with the environment and other agents. A MAS is narios; the first one is focused on hotel amenities and energy con-
considered to be an object-oriented system that is associated with an sumption monitoring and the other on hospital patient monitoring.
intelligent meta-system. In this manner, an agent is seen as an object that
has an intelligence layer, which comprises a series of capabilities such as 3.1. C-IoT scenario for hotel amenities and energy consumption
uniform communication protocol, perception, reaction and deliberation, monitoring
all of which are not inherent to objects. In MAS environment, an Agent
Communication Language (ACL) is required to send a message to any Let us imagine a large hotel totally automated with new technolo-
agent, FIPA ACL being a well-known one [33]. We will also require an gies. We could have several IoT devices in each room; letâs suppose we
agent platform and a well-known platform is JADE [34], the Java Agent have the following devices:
Development Framework which permits developing agent-oriented ap-
plications according to the FIPA patterns. JADE is based on the coexis- â¢ Air conditioning/heating: this IoT device would detect the temper-
tence of several Java Virtual Machines (JVMs) distributed over multiple ature in the room and activate air conditioning/heating to adapt to
computers: each computer will have a JVM, with a container of agents; the userâs comfort temperature. The user can program its operation,
the JADE platform runs at the main container. for instance, according to the time, the number of people in the room
and the activity (for example, if he/she is taking a bath).
2.6. State of the Art for Edge-Fog-Cloud Software Architectures â¢ Bath/Jacuzzi: this device can also be programmed to the userâs fa-
vorite temperature; it could also be programmed at a certain time
Although we can find multiple works that deal with edge computing, and its information could be valuable not only for the air condi-
fog computing, edge-fog, fog-edge and so on, the vast majority of them tioning/heating device, but also, for example, for the background
approach it from a network communications and communication pro- music device.
tocols perspective. We have found few works that study the software â¢ Background music: when the bath is running, the background music
architecture that allows developers to take better advantage of the data device is switched on and relaxing music is played. Or perhaps,
flowing between the three layers âedge, fog and cloudâ. In this sec- depending on the time of day, if the bath is used in the morning it
tion, we will summarize some of their shortcomings that motivate our could play upbeat music, and relaxing music in the evening.
proposal; a more exhaustive analysis of such and other proposals can be
found in the related work section. We have some observations to make regarding communications. On
Among the proposals found that feature a software architecture with the one hand, we see that several edge devices will require information
the three layers mentioned above [2â4,35â37], we have noticed that obtained from other edge devices in the room: for instance, the air
most of them provide computing mechanisms for both the fog and the conditioning and background music devices should know when the bath
cloud layer, but rarely provide computational mechanisms for the edge, is activated/deactivated. On the other hand, communication with higher
and are limited to sending the data obtained by the device at that layer. level actors is also required. First of all, the user must have a way to
Thus, these proposals [2,35â37] do not take advantage of edge program all his/her tastes through an interface, which would be trans-
computing being able to facilitate faster decision making directly be- lated into conditions for the edge devices. But the hotel manager might
tween edge devices when the scenario demands it. directly program a whole hotel floor according to the tastes of a regular
Another shortcoming of many of these proposals is the fact that customer or a group of regular customers. The hotel manager can also
communication between layers is not always in real time [2â4,35,36], receive information from all the rooms, for example, on each roomâs
which limits the ability to make timely decisions in the specific appli- energy consumption levels or temperature, which could result in rules
cation domain. Likewise, communication between edge nodes and end for energy saving or fire detection.
users is rarely facilitated âonly in [2,36]â which would allow faster
communication for highly relevant situations detected at the edge that 3.2. C-IoT scenario for hospital patient monitoring
may require an immediate response from the end user.
Finally, we have already pointed out in the introduction the benefits Let us imagine another scenario, the hospitals in a certain region.
that can be obtained from real-time bidirectional communications be- Suppose we find ourselves in the context of a time of year with a high
tween the three layers; however, we see that only one of the mentioned incidence of contagious respiratory diseases. In this scenario, the hos-
proposals implements bidirectional communications [37], which, pital could be equipped with a set of devices, such as:
however, is one that does not provide edge computing.
For all these reasons, we believe it is necessary to propose a new â¢ Access devices: to enter the rooms of patients with such respiratory
software architecture that provides all these added benefits to facilitate diseases, you can only access with ID cards that, in addition to
faster and more effective decision-making. In order to choose the tech- denying passage to unauthorized visitors, keep information about
nologies that will form part of each level of the architecture, we have which people and when they have accessed the room.
drawn on our previous experience, through which we have observed the â¢ Ventilators: ventilators are equipped with a series of sensors that
usefulness and efficiency of using agents at the edge and CEP in the fog detect the O2 and CO2 blood levels as well as the patientâs flow and
and CEP-enhanced SOAs in the cloud. This is not only based on our own proximal pressure.
experience, we see that several proposals are emerging that propose the â¢ Windows: windows are equipped with actuators to open and close for
use of agents as an efficient solution for decision making at the edge in room ventilation, when necessary.
5G. Ortiz et al. C o m p u t e r S t a n d a r d s & I n t e r f a c es79(2022)103550
â¢ Exterior emergency light: rooms are equipped with an exterior
emergency light to indicate that a doctor needs to come to the room
urgently.
â¢ Interior emergency light: rooms are equipped with an internal
emergency light to indicate that attention is needed due to an event
that is happening outside the room.
â¢ Control panel with patient local history: doctors would insert infor-
mation about administered medication and any reactions to the
medication into it. Other doctors can also see the aforementioned
information in it, as well as relevant messages related to the patient
history.
Concerning communication between edge nodes, if the O2 blood
level detected by the ventilator is below a certain threshold, the external
light of the room would be immediately activated, the door would be
unlocked and the room would be ventilated. If the number of rooms with
the external light on is over a set threshold, the internal lights of the
remaining rooms are illuminated for a short period of time so the doctors
inside them are aware of this fact.
In the hospital, we could have a control center that receives the
relevant information from all the edge nodes in each room on every
Fig. 1. Atmosphere architecture high level description.
floor. If the number of rooms on the same floor with an event that has
activated the outside light happened to go above a certain threshold, the
control center would receive an alert and immediately send more doc- 4.1. High level layer and component description
tors to that floor.
We could also have access to the patient history from the control As previously mentioned, our architecture will have edge nodes, fog
center. The control panel in the room would send all recorded infor- nodes and cloud nodes, as explained in the following paragraphs.
mation about medicines and reactions to the aforementioned center to Edge nodes: we must remember that IoT devices, represented as
be processed, thanks to which we could detect if the patient is being edge nodes, tend to have limited computing resources, that is why (1)
given some medicine that previously gave him/her a reaction and send a the software they incorporate must consume few resources in execution
message back to the control panel at the edge. We could also detect if the and (2) communications through the Internet must be limited as much as
same medicine is causing other patients any side effects, information possible to save resources. With this objective, we have deployed a
that could be raised to the cloud, which research laboratories might be software agent in every edge node, to filter the information that does
subscribed to. In a scenario such as the current one, with a pandemic and need to be transmitted from the one that will only be used internally,
a massive shipment of vaccines to different parts of the world, labora- since agentsâ consumption is low and they have autonomy and enough
tories would benefit from knowing about possible side effects of a intelligence and decision capacity. The agentâs intelligence is pro-
certain severity in real time, not only because the knowledge of side grammed based on a series of behavioral rules [46]; this way, the device
effects in general could lead to measures. This would be particularly behavior will be able to adapt to the environment, making decisions
useful because receiving these alerts in real time could lead to the same according to the information obtained from its sensors and to the in-
adverse effect arriving from different hospitals on the same date, raising formation obtained from other edge nodes connected to the network and
suspicions about a defective batch and leading to measures being from the fog node. The agents will be able to communicate with each
promptly taken, such as stopping the production of the medicine and other, processing and analyzing the information sensed and received
urgently alerting other recipients who have received vaccines from the from other actors and making the corresponding decisions without the
same batch, etc. need to contact the user.
As we have seen, there are several scenarios where an architecture Fog nodes: these are devices that will act as gateways between the
combining edge, fog and cloud computing might be necessary. In each IoT devices on the edge and (a) the user and (b) the nodes in the cloud
scenario, we might require some adjustments in the architecture with [47]. On the one hand, all communications of the software agents with
regards to the number of edge nodes, fog gateways and cloud nodes. In the end user will take place through a message broker in the gateway:
the following section, we will explain the flexible architecture suggested edge devices can send messages to a topic in the broker which the user is
for such scenarios. subscribed to. On the other, interactions between the fog and the cloud
will also be done through other message broker in a bidirectional way.
Said broker will be connected to a CEP engine in the fog node to process
4. Atmosphere architecture
the received data and detect relevant information for the other party.
That is, (1) the cloud sends information to the fog, the CEP engine
Atmosphere is a collaborative architecture for the IoT, composed of
processes such information and if a pattern is detected, then it submits
several edge, fog and cloud nodes which collaborate in a service and
the relevant information to the edge; (2) the edge sends information to
agent-oriented ecosystem through the cooperation of software agents
the fog, the CEP engine processes the said information and if a pattern is
and CEP.
detected then it submits the relevant information to the cloud. Of course,
We will have three layers in the architecture, such layers will
a pattern can be detected according to the information received both
conceptually focus on sensing data, acting as a gateway and offering
from the edge and the cloud.
services and will be materialized in the corresponding edge, fog and
Cloud Node: The cloud node has a two-way communication system
cloud nodes. Fig. 1 shows an illustrating architecture where one cloud
with nodes in the fog. On the one hand, the cloud node subscribes to the
node, two fog nodes and five edge nodes have been included. However,
message topics of the nodes in the fog, so it can obtain information from
the architecture could have additional nodes of all types (to illustrate
all these nodes and make higher level decisions. This information is
this, some extra fog and edge nodes are also represented in smaller
acquired along with other heterogeneous data sources and processed
sizes). In any case, the architecture is expected to have more edge nodes
through a CEP-enabled SOA 2.0. The CEP engine might detect situations
than fog ones and in turn more fog nodes than cloud ones.
6G. Ortiz et al. C o m p u t e r S t a n d a r d s & I n t e r f a c es79(2022)103550
of interest either for third parties or for fog nodes, and submit them to the size of the hospital. In Fig. 3 we represent the architecture with two
the corresponding message brokers which such actors might subscribe fog nodes, one communicating with the edge nodes from all the rooms
to. It is important to remember that there could be more nodes in the and the other for patient admission and staff monitoring. Finally, a node
cloud that might be communicating with other nodes in the cloud at the in the cloud could be from the Ministry of Health or from a medical
same time, but for simplicityâs sake we are going to represent only one. society. Such cloud nodes could collect information from many sources,
To set up the system, first of all, the edge devices will be programmed such as pharmaceutical laboratories, pharmacies, and so on. For
with the software agents and the corresponding rules with the actions instance, it could be detected thanks to the information provided by
they may perform depending on the information received from the pharmaceutical laboratories and pharmacies whose demand for a
sensors, the other agents, the gateway and the user. These rules will not particular medicine, which is administered at the hospital, is growing
only include actions such as turning on the air conditioner, but also out of control, and there could be a lack of stock in a short period of time.
which information might be broadcasted to the remaining agents as well That information should reach the hospital fog node and be transmitted
as which information should be submitted to the user or gateway topic to the doctors by the hospital control center, as well as being shown in
to be processed in the CEP engine. Secondly, we will deploy and the edge control panels of patients with respiratory diseases.
configure the message broker and the CEP engine in the fog node, which Again, granularity and the number of nodes will depend on many
will receive data from the edge, other fog and cloud nodes, as previously factors: hospital size, the number of hospitals supervised by a general
explained. For this purpose, the actors will be subscribed to the corre- hospital and so on.
sponding topics. Besides, the patterns designed in the CEP engine will be
deployed. Finally, we will also deploy a message broker and SOA 2.0, 4.2. Communications and insight on the components in atmosphere
with an integrated CEP engine, in the cloud. We will also subscribe the
message broker to the data sources of interest, as well as to the fog nodes In this section, we will give further details on the internal architec-
corresponding to the scenario in question, and the designed patterns will ture of each layer in Atmosphere and explain all the possible commu-
be deployed. We will also deploy other desired actions for when a nications that can take place between its components. Remember that
pattern is met (notification submission, service offering, etc). Examples the edge will not communicate directly to the cloud, but will do so
of such rules and patterns will be given in Section 5.2. through the fog node. All these communications are made using a
If we focus on the first illustrative scenario, we can visualize the lightweight messaging broker through the MQTT protocol.
devices in each room as edge nodes. On the other hand, we can visualize Edge nodes insight and communication
a fog node on each hotel floor, and finally a node in the cloud for the In the edge nodes, we are going to have the following modules for
hotel itself, as represented in Fig. 2.What is grouped by each node in the every agent:
fog or in the cloud obviously depends on the particular case study and
the granularity we might want to give each layer. We could have a small â¢ Environment components. They consist of sensors and actuators of
hotel with only one node in the fog. And perhaps, we might have a hotel the domain in question. These objects are able to communicate to
chain owner, with a fog node for each hotel and a cloud node for all his/ provide data (measurements) or perform commands.
her hotels. Sometimes, granularity does not depend on the size, but it â¢ Rules Database (DB) component. It collects the agentâs knowledge
can depend on the functionality that we want to give each layer, for and contains rules that help the agent to make decisions.
example. â¢ Analysis module. It checks if the rules are satisfied based on data
Regarding the second illustrative scenario, we can expect the devices obtained from sensors and data sent by other agents. These rules are
in each room to be edge nodes. On the other hand, we can visualize a fog defined in the rule database. If the agent detects that a rule is satis-
node at the hospital control center or maybe on each floor, depending on fied it sends information to the parties involved (other agents, and/or
the fog node).
Fig. 2. Representing atmosphere architecture in a hotel amenities and energy Fig. 3. Representing atmosphere architecture in a hospital patient moni-
consumption monitoring scenario. toring scenario.
7G. Ortiz et al. C o m p u t e r S t a n d a r d s & I n t e r f a c es79(2022)103550
either to the edge, the cloud or other fog nodes depending on the
particular pattern being triggered âfurther details are given
belowâ. Please note that messages received in the CEP from
different sources may include the same or different fields to be pro-
cessed. In case they include the same fields, an additional field may
be included to identify the source in order to better coordinate their
processing.
â¢ Component for messaging incoming and outgoing data to the node:
Mosquitto message broker. A message broker is software that allows
applications and systems to communicate with each other and ex-
change information. The message broker can enable the translation
of messages between different messaging protocols, allowing third
parties to communicate with each other, regardless of their lan-
guages and implementation platforms. In our fog node, as we will
explain below, it will permit bidirectional communication between
the agents in the edge and the CEP engine in the fog, between the
latter and the SOA 2.0 in the cloud and between CEP engines of two
fog nodes.
Fig. 4. Insight on edge nodes and their communication with the Fog.
Therefore, on the one hand, the JADE platform that supports the
â¢ Communication module. It provides all the interaction mechanisms
agents distributed among the edge nodes, and on the other hand, a CEP
of the agent with the other agents and the fog. The agents commu-
engine. Since all messages received in the fog are formatted inside our
nicate with each other and with the JADE gateway in the fog through
own architecture, they will already be in a homogeneous format, thus
the standard FIPA ACL communication language.
we will avoid the need for a SOA 2.0 and an ESB and will only require the
CEP engine. In the event that our own sources could not be programmed
Therefore, each edge node will be driven by an agent. The agent will
to send data in a homogeneous format, we could include a format
access the information sensed from a specific sensor and/or will acti-
adapter, specific to our devices, prior to sending it to the CEP engine. We
vate/deactivate the actuator in question. It will have a set of rules to
will also have a message broker to offer input and output message topics
detect information of interest to be submitted to other agents and/or to
to the fog node. The relevant events detected by the edge nodes will be
the fog node. Besides, it will communicate with the latter thanks to the
sent to the entry topic through the JADE coordination mechanism in the
communication module. All communications are supported by the JADE
gateway; in that same topic, events of interest sent from the cloud or
platform, which we have used to implement our agent-oriented
from other fog nodes will be received. All data received in that topic will
software.
be processed by the CEP engine which will upload new situations of
Therefore, there are several communications that an edge device
interest detected to the cloud, other fog and edge nodes, as programmed
might be involved in, as shown in Fig. 4
in the pattern through a new output topic. In addition, the user can send
new conditions to the edge nodes through a topic and receive infor-
1. First of all, (1a) the sensors in the device will sense the information
mation of interest by the same means. Therefore, communications of the
from the environment and (1b) the analysis module will submit the
fog node, the gateway, with the other participants would be as repre-
sensed information to the communication module in the edge device.
sented in Fig. 5:
2. Secondly, when necessary, according to the rules programmed in the
Thus, the behavior is as follows:
agents, the sensed information will be transmitted to the remaining
interested edge devices within the same network.
1. The fog node will receive the following information:
3. Analogously, the device will receive information from other devices
a. The fog node will receive relevant information submitted from the
in the network.
agents at the edge through a message topic.
4. Besides, depending on the rules programmed in the agent and the
decisions made, the edge device (4a) might submit information to the
message broker in the gateway and/or (4b) activate an actuator.
Fog Nodes Insight and Communications
In the fog nodes we are going to have the following components:
â¢ Component for the management and coordination of edge agents:
JADE platform. It offers flexible and efficient messaging, managing
private incoming message queues for each agent. Agents can access
their queue in a variety of ways. In addition, communications and
coordination between them is done through message passing
following the ACL standard.
â¢ Real-time data analysis component: Esper CEP engine. It is a specific
software capable of real-time analysis of the data received in the
form of events. The patterns to detect relevant situations of interest
in the domain in question should be deployed in advance in this
engine âsome examples of CEP patterns can be found in Section
5.2â. In the case of the fog node, the CEP engine (1) will receive the
data submitted from the edge, the cloud and/or other fog nodes, (2)
will check if any of the predefined and deployed patterns is triggered
Fig. 5. Insight on Fog Nodes and their communication with the edge and
by such data and (3) will submit the detected relevant situations
the Cloud.
8G. Ortiz et al. C o m p u t e r S t a n d a r d s & I n t e r f a c es79(2022)103550
b. Also, the fog node will receive relevant information to be pro- message topic which the fog nodes in the architecture and/or external
cessed from the cloud. This information will be received through third parties can subscribe to. Besides, the fact that a SOA 2.0 is used
the same message topic. allows us to introduce additional actions when a situation of interest is
c. Finally, the fog node might obtain relevant information to be detected, not only sending the information to a message topic (3a, 3d),
processed from other fog nodes, which will also be received but also offering additional services (3b) and sending alerts and notifi-
through the message topic. cations (3c), as shown in Fig. 6:
2. As the information reaches the broker, it is sent to the CEP engine.
3. As the information is processed in real time in the CEP engine, 1 First of all, the cloud node can receive external data from the do-
various situations of interest can be detected. These situations of mains of interest from multiple sources, (1) which are received
interest can be sent to three output topics, according to the action through a message topic integrated within the ESB.
associated to the detected pattern, and may be relevant to the edge, 2 The cloud node will also obtain information from the fog nodes with
the cloud and/or other fog nodes. Thus, the fog node will send the relevant data to be processed. Such information is also received
following output information: through a message topic (2) integrated within the ESB.
a. Relevant situations of interest to the edge nodes. 3 Once the information is transformed and processed by the CEP en-
b. Relevant situations of interest to the cloud nodes. gine, detected situations of interest can be submitted to interested
c. Relevant situations of interest to the other fog nodes. parties, such as the fog nodes which will be subscribed to a message
4. Finally, there will be direct communication with the user, which does topic (3a) or other parties which can receive, as previously
not go through the CEP engine: mentioned, notifications (3b), services (3c) and also subscribe to a
a. The agents at the edge will submit relevant information to the message topic themselves (3d).
user, according to the rules programmed in them; such informa-
tion is submitted through a message topic. 5. Case study
b. The user will be subscribed to that topic and therefore receive
such information through it. IoT applications for healthcare are taking considerable relevance
c. Similarly, the user will submit new conditions, rules or actions to nowadays [48]; for this reason, we have selected this scenario as a case
the edge through the message topic. study for our proposal.
d. Finally, the edge nodes will receive such information through
their subscription to the topic. 5.1. Description
Cloud Node Insights and Communications Suppose we find ourselves in the scenario of a pandemic of a severe
In the cloud nodes we are going to have the following components: respiratory disease. Let E be the systemâs set of edge nodes {e1,â¦, en}, F
be the systemâs set of fog nodes {f1,â¦, fn} and C the systemâs set of cloud
â¢ Component for the pre-processing of the information and submission nodes {c1,â¦, cn}. Also, U will be the end user {u}. Given the set of nodes
to the CEP engine: Mule ESB. An ESB is in charge of routing and N =EâªFâªCâªU, the message sent from the origin node no to the target
facilitating communications in a SOA. In the proposed architecture, node nt will be represented as nont.
the bus channels the following communications: reception of simple In this scenario, we could have a hospital equipped with the
events from the message broker, event transformation and routing to following nodes, as previously represented in Fig. 3:
the CEP engine and to a database if necessary, complex event
reception of the complex events detected by the CEP engine, complex â¢ A series of edge nodes as described in Section 3.2: access devices (e1),
event routing to the relevant message broker. ventilators (e2), windows (e3), exterior emergency light (e4), interior
â¢ Real-time data analysis component: Esper CEP engine. As previously emergency light (e5) and control panel with patient local history (e6).
mentioned, it is in charge of analyzing the data received in form of â¢ The hospital would also have a fog node to control all the edge ones
events in real-time. The patterns to detect relevant situation of in- (f1) and another one for patient admission and staff distribution (f2).
terest in the domain in question should be deployed in advance in â¢ We will also have a cloud node (c1) in which we will have pharma-
this engine. In the case of the cloud node, the CEP engine, first of all, ceutical laboratories, pharmacies, Ministry of Health and other
will receive the data submitted from one or several fog nodes and external data providers.
external systems relevant for the domain in question. Then, it will â¢ Finally, the end user in communication with the edge through the fog
check if any of the predefined and deployed patterns is triggered by will be the surveillance unit (u).
such data. Finally, it will submit the detected relevant situations
either to the fog nodes through the message broker or with other Fig. 7 represents the communications between edge nodes, fog ones
protocols and/or formats to other interested parties out of the system
âfor instance, through SMTP, Firebase notification, HTTP service
requests, etc.
â¢ Component for messaging incoming and outgoing data to the node:
Mosquitto message broker. In our cloud node, as we will explain
below, it will permit bidirectional communication between the CEP
engine in the fog and the SOA 2.0 in the cloud, as well as permitting
the input of events from external systems and output of notifications
to the latter.
Therefore, the cloud node is implemented as a SOA 2.0, which re-
ceives information from one or several message topics. The ESB in the
SOA 2.0 is in charge of homogenizing the heterogeneous information
received from all data sources, some of them external to the system (1)
and others coming from fog nodes within the system (2). Once it is well
formatted, it is submitted to the CEP engine where relevant situations of
interest are detected. Such enhanced information is submitted to a Fig. 6. Insight on Cloud Nodes and communications.
9G. Ortiz et al. C o m p u t e r S t a n d a r d s & I n t e r f a c es79(2022)103550
pharmacies that the demand for a particular medicine administered
by the fog hospital f1 is growing out of control, which could lead to
a lack of stock in a short period of time. That information should
reach the hospital fog node (c1f1) and be transmitted to the surveil-
lance unit in the hospital (f1u) and should also be shown in the res-
piratory patientsâ control panels (f1e6). Besides, continuing with the
example of adverse effects, pharmaceutical laboratories can alert in
real time all hospitals where a particular drug is being administered
that it is causing serious adverse reactions to certain patients.
The example could be extended to many other cases. For instance
(see red lines in Fig. 7), the fog node in admissions and staff distribution
(f2) registers all incoming emergency patients with respiratory problems
requiring specialized medical attention. This node will also be sub-
scribed to f1 to detect active red lights (f1f2) and could, in turn, call
pulmonologists on duty at their homes depending on the number of new
emergency patients and the amount of red lights per floor.
On the other hand, we could program several rules in this fog node
(f2) to send relevant information to the cloud nodes (f2c1). For example,
notifications could be sent to the cloud with the number of pulmonol-
Fig. 7. Communications between Nodes in the given hospital scenario.
ogists in the hospital and the number of patients with severe respiratory
symptoms. If the cloud receives this information from hospitals
and cloud in this particular scenario. throughout the region, decisions can be made regarding staff rede-
Edge nodes in the same room would communicate their events to ployment, new contracts and health alerts for the population to observe
each other and have a set of rules programmed into them (see black lines symptoms or to advise them to go to the least collapsed centers, if
in Fig. 7). For example: necessary.
â¢ If the O2 blood level detected by the ventilator is below a certain
5.2. Agent Rules and CEP Patterns
threshold, the agent in the external emergency light would detect it
and immediately activate the light (e2e4), the door would be
In this section, we give some small code snippets to illustrate the kind
unlocked (e2e1) and the room would be ventilated (e2e3).
of conditions we can use at each level of the architecture in order to
obtain added knowledge through the use of CEP and agent-oriented
The fog node which controls edge devices in the rooms would receive
software.
the relevant information from all the edge nodes in each room on every
Rules and situational-aware data at the edge
floor (see brown lines).
Since several edge nodes are interested in O2 saturation, such a value
â¢ The fog node will receive a message any time a room activates the could be broadcast by the ventilator to all the edge nodes in the room, as
shown in Listing 1.
external light (e4f1). When the number of rooms on the same floor
with an event that has activated the external light is above a certain
Listing 1. Code snippet to broadcast measured O2.
sensing.setSensorValue(value);
threshold, it sends an alert to the hospital surveillance unit to
ACLMessage msg =new ACLMessage(ACLMessage.INFORM);
immediately send more doctors to that floor (f1u), at the same time it msg.setContent(value +"");
turns on the internal lights of the remaining rooms for a short period for (AID aid: agents) {
of time so the doctors inside them are aware of this fact (f1e5). msg.addReceiver(aid);
}
O2SensorAgent.this.send(msg);
We could also have the patient history in the fog node: e6 would send
all the information recorded about the medicines and reactions to the
fog node (e6f1) through the input topic, to be processed (see blue lines in
When the external light agent receives the O2 saturation level and it
Fig. 7):
is under 90%, it turns on the external light and sends a message to the
fog topic, as shown in Listing 2. The fog will be in charge of counting the
â¢ Once data is analyzed in the CEP engine, we could detect if the pa-
number of external lights on at a given time.
tient is being given some medicine that previously gave him/her a
Listing 2. Code snippet for actions when O2 is under 90%.
reaction or it can be seen if, for example, the same medicine is
ACLMessage msg =myAgent.receive(mt);
causing other patients any side effects. This is relevant data, not only if (msg !=null) {
in terms of changing the treatment, and therefore it can be sent to the try {
control panel in the room (f1e6), but also in terms of research so it setSensorValue(Integer.parseInt(msg.getContent()));
should be raised to the cloud (f1c1). An example of such a situation ag +en "t :. l "o g +M mes ss ga .gg ee t( C"O o2
n
tv ea nl tu ()e
)
;" +msg.getSender().getLocalName()
would be the one in Section 3.2, in which pharmaceutical labora- if (sensorValue <=90) {
tories could receive real-time information on the adverse effects of myAgent.activateExternalLight();
administering a drug (or vaccine, as in the example in Section 3.2). myAgent.notifyFog ()
}
On the other hand, the cloud can collect information from many } catch (NumberFormatException ex) {{â¦}}
}
sources, such as pharmaceutical laboratories, pharmacies, the Ministry
of Health, and so on (see green lines in Fig. 7).
Patterns and context-aware actions programmed in the Fog
â¢ For instance, it could be detected from the analysis in the SOA 2.0 of When the fog receives external light on messages from the same floor
the information provided by pharmaceutical laboratories and at a certain period of time (see CEP pattern in Listing 3), and the number
10G. Ortiz et al. C o m p u t e r S t a n d a r d s & I n t e r f a c es79(2022)103550
of external lights on exceeds a threshold â4, for exampleâ (see CEP (continued)
pattern in Listing 4), it sends an alert to the surveillance unit to imme- select current_timestamp() as timestamp,
diately send more doctors to that floor. a1.id as id,
Listing 3. ExternalLightByFloor pattern EPL code. a1.type as type,
a 1.place as place,
@Name("ExternalLightByFloor")
count(a1.place) as count
@Tag(name="domainName", value="Fog")
from pattern [(every a1 =Medicine(a1.place =âpharmacyâ))].win:time_batch(1
insert into ExternalLightByFloor hours)
select current_timestamp() as timestamp, group by a1.id, a1.type, a1.place
a1.floor as floor,
count(a1.isOn) as count
from pattern [(every a1 =ExternalLight(a1.isOn =true))].win:time_batch(10
minutes) Listing 8. StockShortageByPharmacy pattern EPL code.
group by a1.floor @Name("StockShortageByPharmacy")
@Tag(name="domainName", value="Fog")
insert into StockShortageByPharmacy
Listing 4. SurvaillanceUnit pattern EPL code. select a1.*
from pattern [(every a1 =StockByPharmacy(a1.count <=5))]
Listing 4
@Name("SurveillanceUnit")
@Tag(name="domainName", value="Fog")
insert into SurveillanceUnit Listing 9. UseByHospital pattern EPL code.
select a1.timestamp as timestamp, @Name("UseByHospital")
a1.floor as floor @Tag(name="domainName", value="Fog")
from pattern [(every a1 =ExternalLightByFloor(a1.count >=4))] insert into UseByHospital
select current_timestamp() as timestamp,
a1.id as id,
Data and context-aware patterns in the cloud a1.type as type,
a1.place as place,
It could be detected by the information provided by pharmaceutical
count(a1.place) as count
laboratories and pharmacies that demand for a particular medicine that from pattern [(every a1 =Medicine((a1.place =âhospitalâ and a1.type =
is administered by the fog hospital f1 is growing out of control, which ârespiratoryâ)))].win:time_batch(1 hours)
could lead to a lack of stock in a short period of time. To detect it, we group by a1.id, a1.type, a1.place
receive information from several sources: pharmaceutical laboratories,
pharmacies and hospitals. With pattern in Listings 5 and 6, we will
detect when a particular medicine has very high demand (letâs say more Listing 10. RespiratoryUseByHospital pattern EPL code.
than 1000 units per hour). With the patterns in Listings 7 and 8, we @Name("RespiratoryUseByHospital")
detect a stock shortage of a particular medicine in pharmacies (letâs say
@Tag(name="domainName", value="Fog")
insert into RespiratoryUseByHospital
the stock is under 5 units per hour). With Listings 9 and 10, we detect the select a1.*
use of a particular medicine for respiratory diseases in a hospital. from pattern [(every a1 =UseByHospital(a1.count >=1))]
Finally, the pattern in Listing 11 detects when the medicine being used
in the hospital for respiratory diseases has very high demand in phar-
maceutical laboratories and stock shortage in pharmacies, therefore Listing 11. MedicineStockBreak pattern EPL code.
detecting a high risk of running out of stock for the medicine in question. @Name("MedicineStockBreak")
That information should reach the hospital fog node and be transmitted
@Tag(name="domainName", value="Fog")
insert into MedicineStockBreak
to all doctors in that hospital and it should also be shown in the respi-
select current_timestamp() as timestamp,
ratory patientsâ control panels. a3.id as id
Listing 5. DemandByLaboratory pattern EPL code. from pattern [(every (a1 =VeryHighDemandByLaboratory and a2 =
@Name("DemandByLaboratory") StockShortageByPharmacy(a2.id =a1.id) and a3 =RespiratoryUseByHospital(a3.
@Tag(name="domainName", value="Fog") id =a2.id)))].win:time_batch(24 hours)
insert into DemandByLaboratory
select current_timestamp() as timestamp,
a1.id as id, Please note that the pattern code can be defined manually or through
a1.type as type, the use of the MEdit4CEP [49]graphical tool, which permits automatic
a1.place as place,
code generation. The graphical definition of the patterns in Listing 3 to
count(a1.place) as count
from pattern [(every a1 =Medicine(a1.place =âlaboratoryâ))].win:time_batch(1 11 can be found at the Mendeley repository referenced in the supple-
hours) mentary material section.
group by a1.id, a1.type, a1.place
6. Evaluation
Listing 6. VeryHighDemandByLaboratory pattern EPL code.
As previously mentioned, in the past we evaluated an architecture
@Name("VeryHighDemandByLaboratory") integrating an ESB together with a CEP engine in a cloud node and re-
@Tag(name="domainName", value="Fog")
sults showed that the architecture had very good performance (see [6]).
insert into VeryHighDemandByLaboratory
select a1.* In our present work, it is necessary to evaluate the performance of
from pattern [(every a1 =DemandByLaboratory(a1.count >1000))] both fog and edge nodes. We have considered only one fog and one edge
node to simplify the tests whilst looking for the limit of their capacity.
For this purpose, we have employed (i) an Orange Pi Zero with an ARM
Listing 7. StockByPharmacy pattern EPL code. Cortex-A7 Quad-Core (Allwinner H2) CPU, 512MB RAM, 8GB MicroSD
@Name("StockByPharmacy") Class 10 and 10/100 RJ45 Ethernet as the edge node and (ii) a Raspberry
@Tag(name="domainName", value="Fog")
Pi 3 with Quad Core 1.2GHz Broadcom BCM2837 64bit CPU, 1GB RAM,
insert into StockByPharmacy
a 32GB MicroSD Class 10 and 100 Base Ethernet as the fog node.
(continued on next column)
Particularly, we have conducted performance tests with the
11G. Ortiz et al. C o m p u t e r S t a n d a r d s & I n t e r f a c es79(2022)103550
technologies and communications as proposed in our architecture for 50% of usage for the fog node âsee Fig. 10â, discarding the warm up.
the fog and edge nodes (see Section 6.1). Then, the CEP and software However, when we look closely at the response time in Fig. 11, it re-
agents technologiesâ performance have been evaluated separately, also mains stable for incoming rates of 10 and 20 events per second and starts
alleviating the communications load on the architecture (see Section to fluctuate from 30 events per second. We can see that, at the rate of 30
6.2). events per second, response time fluctuates between approximately 20
and 45 milliseconds. This is due to the fact that, having a higher message
rate, the CPU is less likely to decide to change the running process and
6.1. Atmosphere Architecture Evaluation therefore a context switching is not required. For this reason, in certain
moments we can obtain better response times at the rate of 30 events per
In order to obtain both nodesâ performance rates and to stress the second than at 20, in the last scenario we understand that the processor
systems in order to check their limit with regards to the incoming event is constantly making context switches with the resulting time cost.
message rate that can be processed in real time, we have conducted the Despite this, response time remains below 50 milliseconds in all cases
following procedure (see Fig. 8): and the averages, as shown in Table 1, are under 35 milliseconds for the
higher incoming rate.
â¢ For every test set, we submit the incoming event message rate from In addition, it is important to highlight that, as previously explained,
the edge node to the fog one through a message MQTT topic in the each message actually corresponds to 3 messages in the system; there-
Mosquitto broker. Every message contains JSON information with fore, these rates of 10, 20 and 30 messages per second could be
random values for IsOn and floor (see case study in Section 5). considered as 30, 60 and 90 messages per second, respectively. Besides,
â¢ Such messages are processed in the Esper CEP engine executed on the when using QoS 1 â as is the caseâ, each message sent by MQTT im-
fog node and the resulting complex event message is then submitted plies a recognition message sent back to the sender, therefore 2 more
back from the fog node to the edge one, through a message MQTT messages for every incoming message. This would imply that the initial
topic in a Mosquitto broker. Note that the edge node is in charge of rates of 10, 20 and 30 incoming event messages per second are actually
processing it. 50, 100 and 150 messages per second, respectively. We consider these
â¢ Be aware that, in order to force the system, every incoming message rates and response times appropriate in the scope of IoT for QoS 1.
in the fog node results in a complex event message to be sent to the In any case, in multiple IoT domains we may not need QoS 1;
edge node. therefore, we have repeated the tests with QoS 0 for incoming rates of
â¢ In parallel, the edge node is sending a simulated humidity informa- 200, 300 and 320 events per second. Table 2 shows that, when using QoS
tion message through the JADE platform every second. 0, CPU usage remains stable at around 20% of usage for the edge node
âsee Fig. 12â and 40 to 70% of usage for the fog node âsee Fig. 13â,
We have developed and tested the system both with MQTT Quality of discarding the systemâs warm up. When we analyze the response time
Service (QoS) 1 and QoS 0, and measured CPU usage and response time (see Fig. 14), we can check that, although we have some peaks with
in both nodes. In this testing scenario, the response time refers to the higher response times, the average response time remains below 7
time elapsed since the edge node sends a message by MQTT to the fog milliseconds; these are also shown in Table 2.
node, the latter processes it with the CEP engine and the output message Additionally, it is important to remember that each message actually
from the CEP engine arrives back to the edge node. Therefore, note that corresponds to 3 messages in the system given that it refers to the time
every message implies in fact two communications between the nodes elapsed since the edge node sends a message by MQTT to the fog node,
âthe message going through MQTT from the edge to the fog and the one the latter processes it with the CEP engine and the output of the CEP
going through MQTT from the fog to the edgeâ and, always in parallel, engine arrives back to the edge node and also, in parallel, a message is
the one going through the JADE platform from the edge to the fog sent from the edge node to the fog one through JADE infrastructure.
gateway every second. Besides, when using QoS 1 (see Fig. 8, left-hand Therefore, these rates of 200, 300 and 320 messages per second could be
side), each message sent by MQTT implies a recognition message sent considered 600, 900 and 960 messages per second. Since we are using
back to the sender. Therefore, when the edge node sends the initial MQTT with QoS 0, no acknowledgement message is sent back to the
incoming event message to the fog one, the latter submits one response message sender in this scenario.
back, and when the fog node sends the complex event message to the Once such a performance limit is found, we proceeded to test the
edge, the latter also submits one response in return, therefore, two more system with the higher rate for a longer time and therefore with more
messages for every incoming message. When using QoS 0, no incoming messages. In particular, we have performed tests with one
acknowledgment message is submitted (see Fig. 8, right-hand side). million events. As detailed in Table 3, when using QoS 1 with an
The charts explained in the following lines show the results for incoming event rate of 30 events per second, CPU usage remains stable
incoming rates of 10, 20 and 30 events per second with QoS 1 and 200, at less than 20% of usage for the edge node âsee Fig. 15â and less than
300 and 320 events per second for QoS 0; the system is not able to deal 60% of usage for the fog node âsee Fig. 16â, discarding the warm up.
with higher rates of events. With the aim of finding the incoming rate Looking closely at the response time in Fig. 17, we can see that it fluc-
limit, we initially did short tests (130 seconds) to see the evolution of tuates but, as detailed in Table 3, more than 97% of the response time
CPU usage and response time. data are under 50 ms.
As we can see in Table 1, when using QoS 1, CPU Usage remains When we proceeded to test the system with QoS 0 with 1 million
stable on less than 20% of usage for the edge node âsee Fig. 9â and incoming events, we detected that the system could not deal with the
rate of 320 incoming event messages per second, but did was able to
cope with 300 incoming event messages per second. As we can see in
Table 4, when using QoS 0 with an incoming event rate of 300 events per
second, CPU usage remains stable on less than 20% of usage for the edge
node âsee Fig. 18â and around 60% of usage for the fog nodeâsee
Fig. 19â, discarding the warm up. Besides, in Fig. 20 we can check that
the response time fluctuates but, as detailed in Table 4, more than 90%
of the response time data are under 5 milliseconds.
Note that the spreadsheet data represented in the charts from Figs. 9
to 20 are available at the Mendeley repository referenced in the sup-
Fig. 8. Message flow between nodes during tests. plementary material section.
12G. Ortiz et al. C o m p u t e r S t a n d a r d s & I n t e r f a c es79(2022)103550
Table 1
Average CPU usage and response time for QoS 1.
Incoming message rate Real message rate Edge node average CPU usage (%) Fog node average CPU usage (%) Average response time
(events/s) (messages/s) Including warm Excluding warm Including warm Excluding warm (ms)
up up up up
10 50 15.5 11.6 42.7 43.6 8.5
20 100 16.3 12.6 42.3 43.5 45.9
30 150 18.3 12.9 44.5 46.3 34.2
Fig. 9. CPU usage in the Edge Node with MQTT QoS 1.
Fig. 10. CPU usage in the Fog Node with MQTT QoS 1
Fig. 11. Response time of communications between the Edge and Fog Nodes with MQTT QoS 1.
6.2. Evaluating CEP and software agents separately in the atmosphere additional performance tests of the main technologies in isolation, for
architecture the use of CEP in the fog node and for the use of software agents in the
fog and edge nodes. This way, we can evaluate a straightforward
In order to evaluate the suitability of the chosen technologies inde- deployment without communication between layers on the one hand,
pendently of the proposed architecture, we have carried out some and a deployment where the edge nodes receive all data without being
13G. Ortiz et al. C o m p u t e r S t a n d a r d s & I n t e r f a c es79(2022)103550
Table 2
Average CPU usage and response time for QoS 0.
Incoming message rate Real message rate Edge node average CPU Fog node average CPU Average response
(events/s) (messages/s) usage (%) usage (%) time (ms)
Including warm up Excluding warm Including warm up Excluding warm
up up
200 600 27.9 15.6 44.3 45.7 6.9
300 900 26.8 15.4 52.3 57 6.3
320 960 30.9 18 46.5 51.3 5.2
Fig. 12. CPU Usage in the Edge Node with MQTT QoS 0.
Fig. 13. CPU Usage in the Fog Node with MQTT QoS 0.
Fig. 14. Response time of communications between the Edge and Fog Nodes with MQTT QoS 0.
14G. Ortiz et al. C o m p u t e r S t a n d a r d s & I n t e r f a c es79(2022)103550
Table 3 filtered by the CEP engine on the other, as explained in the following
CPU usage and response time distribution for QoS 1 for 1 million incoming paragraphs. In these tests, we have focused on the QoS 0 evaluation as
events. most of the MQTT communications between nodes are eliminated. In
CPU Usage Interval (%) <=5 5-20 20-40 40-60 >60 addition, we have selected the 300 incoming events per second rate
tested in Section 6.1 for QoS 0.
Edge Node Sampling Percentage (%) 0.26 99.48 0.22 0.04 0
Fog Node Sampling Percentage (%) 0 0 0.1 99.88 0.01 Firstly, performance tests were carried out keeping only the CEP
engine processing in the fog node; this has been called the CEP-only test.
Response Time Interval (ms) <Â¼5 6-10 11-50 51-100 >100
That is to say, we have not run JADE nor has there been any commu-
Sampling Percentage (%) 0 0.21 97.81 1.58 0.4 nication between the node in the fog and the one in the edge, apart from
the fact that the event simulator has been kept on the edge node, as
shown in the left-hand side of Fig. 21. The simulated data was sent, as
previously said, through MQTT QoS 0 with a ratio of 300 events per
second and all these data were processed in the CEP engine. The results
Fig. 15. CPU Usage in the Edge Node with MQTT QoS 1 and one million incoming events.
Fig. 16. CPU Usage in the Fog Node with MQTT QoS 1 and one million incoming events.
Fig. 17. Response time of communications between the Edge and Fog Nodes with MQTT QoS 1 and one million incoming events.
15G. Ortiz et al. C o m p u t e r S t a n d a r d s & I n t e r f a c es79(2022)103550
Table 4
CPU usage and response time distribution for QoS 0 for one million incoming
events.
CPU Usage Interval (%) <=5 5-20 20- 40- 60- >80
40 60 80
Edge Node Sampling 0.06 96.58 1.95 0.9 0.48 0.03
Percentage (%)
Fog Node Sampling 0 0 0,84 80,25 18,91 0
Percentage (%)
Response Time Interval (ms) <Â¼5 6-10 11-50 51-100 >100
Sampling Percentage (%) 90.57 6.4 2.56 0.23 0.25
Fig. 21. Message flow between Nodes during CEP-Only (left-hand side) and
JADE-Only (right-hand side) tests.
Fig. 18. CPU Usage in the Edge Node with MQTT QoS 0 and one million incoming events.
Fig. 19. CPU Usage in the Fog Node with MQTT QoS 0 and one million incoming events.
Fig. 20. Response Time of Communications between the Edge and Fog Nodes with MQTT QoS 0 and one million incoming events.
16G. Ortiz et al. C o m p u t e r S t a n d a r d s & I n t e r f a c es79(2022)103550
show that the fog node is very fast; as expected, there is faster event flowing between such devices and the result of analyzing them. In the
processing with lower CPU consumption than in the Atmosphere ar- following lines, we describe the works we have found in which we
chitecture since we have removed all communications between nodes appreciate a greater similarity to our proposal in terms of the problem to
except to send data from the simulator. In Fig. 22, we show the CPU be solved, yet we will see that the approaches are rather diverse.
usage and response time values for the fog node in our original test case, Zhao et al. [2] propose an IoT edge computing-enabled collaborative
compared with the values obtained with this new CEP-only configura- tracking architecture with three layers: the lower layer is the one
tion. With this new configuration, the CPU usage remains below 30% composed by sensors, actuators, microprocessors and so on; the middle
and response times around 7 ms, as we can see in the left and right-hand layer (edge) is conformed by ARM-based Raspberry Pi computational
side of Fig. 22, respectively. This shows how powerful the CEP engine boards and smart devices and communicates with the former by Blue-
can be in a fog node and how the performance of the Atmosphere ar- tooth and Zigbee. Finally, in the top layer we can find the cloud services,
chitecture is not particularly affected when combining the use of CEP which communicate with the middle layer by Narrow Band (NB)-IoT
with the use of software agents, despite the increase in the number of and 4G. The edge layer is in charge of collecting, filtering, analyzing,
communications between nodes. storing and transmitting the data from one layer to the other. The main
Secondly, we have performed tests removing the CEP engine and difference with our proposal is that no computing is performed on the
keeping all the processing in the JADE; this has been called the JADE- layer where the sensors and actuators are, but all the information
only test. In this case, we still keep the data simulator in the edge node, collected from the lower level is processed in their edge computing
the JADE gateway in the fog node and a software agent in the edge node. device. Besides, they do not perform any rules to detect situations of
All data sent by the simulator, this time through ACL and not through interest, but simply track the manufacturing materials.
MQTT, are processed by a service at the JADE gateway and, once pro- Farahani et al. [4] propose a three-layer architecture to deliver
cessed, sent to the agent at the edge node, as shown in the right-hand real-time health monitoring and anomaly detection. The lower layer in
side of Fig. 21. As we can see from the test results, the CPU consump- the architecture is the one composed of the endpoint IoT health devices,
tion in the fog node (left-hand side of Fig. 23) when only using JADE is the middle one is the one they call edge/fog computing layer, and the
also very good âunder 40%â, even less consumption than our original upper layer is the cloud one. In the device, they perform noise removal
architecture, while it is higher on the edge node (right-hand side of from an electrocardiogram (ECG) signal and extract the relevant fea-
Fig. 23) since it remains around 35% versus the original 10%: as ex- tures from them, then depending of whether the result of the prediction
pected, the edge device is overloaded in these tests when a large number made by the algorithm applied to the device data exceeds the threshold,
of messages is being submitted to it. Response times (see Fig. 24) for the edge computing may or may not be required. Fog allows more
JADE-only configuration are also lower than in the proposed Atmo- computing tasks and more complex machine learning algorithms to take
sphere architecture, but we have to bear in mind that we are reducing place on the edge nodes, thus supporting decision making with more
the number of communications when measuring the response time. Note complex models. Further support is also given by the cloud node, which
that the submission of humidity has been removed from these tests as will also be involved in heavier tasks such as model training or
well as the submission through MQTT from the edge node to Mosquitto personalization. Even though the proposal deserves our attention and
and from Mosquitto to CEP and vice versa, which have been replaced by the proposed three-tier architecture bears some resemblance to the one
a unique message from the edge node to the JADE gateway in the fog and we present in this paper, they only focus on machine learning models
the message back from the latter to the software agent in the edge node. and their accuracy at the three different levels. However, we propose an
As a conclusion, we have checked that the JADE gateway in the fog architecture in which situations of interest can be detected in real time at
node can handle a high number of events, but when distributing them, any of the three levels and which may be of interest to the others, so that
without prior filtering of unnecessary events, it can overload the node at we enable two-way communication throughout the components of the
the edge. Therefore, by combining the use of CEP in the fog node for architecture.
filtering events coming from different nodes with the use of software Also, the proposal from Bade et al. [50] deserves special mention due
agents for decision making of relevant data at the edge node, we will to their usage of both agent-oriented software and CEP. They propose a
have an efficient and scalable system that facilitates communications three-layer application middleware for post-processing of Wireless
between the different layers. Sensor Networks (WSN) and RFID. Their proposed three layersânet-
work edge, network layer and application layerâ, would be equivalent
7. Related work to the edge, the fog and the final user application in our proposal. They
propose the use of agents to filter, aggregate, transform and enrich data
Although we can find multiple works that deal with edge computing, in the network edge. Such enriched data is then submitted to the
fog computing, edge-fog, fog-edge and so on, the vast majority of them network layer where it is processed by the CEP engine and relevant
approach it from a network communications and communication pro- complex events detected are then submitted to the application layer, in
tocols perspective. We have found few works that study the software so doing, informing the final user. Bidirectional communication is sup-
architecture that allows developers to take better advantage of the data ported since applications can send processing instructions, queries and
Fig. 22. CPU usage and response time in the Fog Node with MQTT QoS and 300 incoming events/s for atmosphere and CEP-only architectures.
17G. Ortiz et al. C o m p u t e r S t a n d a r d s & I n t e r f a c es79(2022)103550
Fig. 23. CPU Usage in the Fog and Edge Nodes with MQTT QoS and 300 incoming events/s for atmosphere and JADE-only architectures.
Some of the examples given are high temperature or low humidity.
Then, such situations of interest are sent to the cloud where they can be
further processed and where customers can subscribe to possible
notifications.
Mahmud et al. [37] present a three-layer architecture to integrate
sensors, fog computing and cloud computing. They have, on the one
hand, health sensors that send the obtained information to the fog
infrastructure, where a series of microcomputer instances processes
received data, providing it to the services in the fog, which in turn feeds
the health applications that would in turn allow the sensorsâ demand to
be replenished. Communication between the fog and the cloud would
also be bidirectional; in the cloud, the data would be processed in the
virtual machine by the cloudâs own services, to provide them to the
applications in the cloud itself. However, they do not mention what type
of technologies would be used for processing in both the cloud and the
fog.
Fig. 24. Response time in the Fog Node with MQTT QoS and 300 incoming In Table 5, we summarize a set of features of the proposals, all of
events/s for atmosphere and JADE-only architectures. which are relevant in the scope of C-IoT. If these implement the feature
in question, the +symbol is used, if they do not, we have usedâ, and / is
configurations to the network edge, where agents also support the used if it is partially provided. The examined features are the following:
execution of the business workflows of the domain in question. A. 3-tier: the proposed software architecture is based on three tiers,
Also interesting is the proposal from Ai et al. [3]. Even though they namely edge, fog and cloud.
mainly focus on network communications, it is worth noting how they B. Edge device computing: a computing mechanism is provided at
visualize architectures where several edge nodes can exchange infor- the edge tier.
mation with each other. In addition, each edge node can communicate C. Fog device computing: a computing mechanism is provided at the
with a fog node, which in turn communicates with more fog nodes fog tier.
horizontally and vertically, the fog node at the top of the communication D. Cloud computing: a computing mechanism is provided at the
pyramid being the one that connects with the cloud. cloud tier.
Shah-Mansouri and Wong [51] study the computing resource allo- E. Detecting real-time situations: the computing mechanisms can
cation in a fog-cloud computing paradigm with the aim of minimizing provide real-time detection of situations in all the implemented layers.
the power consumption of fog nodes and cloud servers of different IoT F. Communicating real-time situations among tiers: the architecture
applications as well as determining part of the computation workload of permits communicating detected situations among the three tiers.
each fog node that should be offloaded to the remote cloud servers for G. Communicating edge nodes with end users: a mechanism is pro-
IoT users to obtain a higher quality experience. vided to facilitate communication from the edge to the end user.
The work from Debauche et al. [35] presents a three-tier architec- H. Multidomain: the proposed architecture is not limited to a
ture. The sensors or wearable devices send the information to the smart particular domain.
gateway, where they are anonymized, semantically enriched, com- I. Bidirectional communication: communication among the tiers is
pressed and encrypted before being submitted to the cloud where the
analytical processing is done. Therefore, in this work no events of in-
terest are detected at the edge or at the fog, but all the processing for the Table 5
detection of situations of interest is done in the cloud causing the system C-IoT feature implementation by analyzed proposals.
to be slower and less scalable.
Evaluated features A B C D E F G H I J
In [36], Maleki et al. present a 3-layer architecture, where the IoT
Zhao [2] + - + + â - + - - -
devices send their data to the fog. Data are then processed in the fog in Farahani [4] + + + + + - - + - +
real time using Spark. In addition, the system has a cluster of fog nodes Bade et al. [50] / - + - + / + + + -
and a master that allows the streaming distributed processing. Only Ai [3] + + + + / / - + - -
relevant events are sent to the cloud for storage. Shah-Mansouri [51] - - + + - - - + - -
Debauche [35] + - + + / - - + / /
The work presented by Hossain et al. [52] consists of a proposal in
Maleki [36] + - + + + / + + - +
which raw data is sensed and submitted to the close edge device. This Hossain et al. [52] - + - + + + / + - -
edge device supports the processing of such data and infers a situation, Mahmud [37] + - + + + + - + + -
understanding by situation a set of information about an environment. Our proposal + + + + + + + + + -
18G. Ortiz et al. C o m p u t e r S t a n d a r d s & I n t e r f a c es79(2022)103550
bidirectional. therefore, they will already be in a homogenous and appropriate format.
J. Machine learning: the prediction of situations of interest is facili- Moreover, not only the input but also the output will always be
tated by machine learning techniques. addressed to a MQTT topic, so we will not need to adapt the commu-
There are other works that cannot be compared with ours because nications protocol either.
they focus on other relevant issues in this same domain, but they will RQ 2. Would it be possible to have real-time data processing at every
generally be complementary approaches. For example, very interesting level of the integrated architecture as well as two-way communication
is the proposal from Masri et al. [53], where a communication algorithm between the edge and fog nodes and the fog and cloud ones by adjusting
between devices in the fog is presented to distribute the processing load to system resources?
between different nodes in a collaborative way. This is not our objective, Yes, we have ensured that the three tiers process the information
but our architecture could benefit from using an algorithm for this according to their capacities and resources: the edge is processing the
purpose in a complementary way. information autonomously with the software agents, the fog is pro-
To sum up, we can say that, although all proposals provide some cessing it with the CEP engine and the cloud is doing so with the SOA 2.0
features or others, few allow for the processing, real-time and bidirec- combined with the CEP engine. We also ensure a collaborative archi-
tional communication in the three tiers, which is the great challenge tecture multi-dimensionally. On the one hand, we have the collabora-
addressed in this paper. Without a doubt, something that we must face in tion between all edge nodes that share information with each other;
our future work is the integration with machine learning techniques. We similarly, if we wanted to have several fog nodes in the system they
believe that this integration is feasible since we have approached it in could also share information with each other and the same would
other works with SOA 2.0 [7,54], but in this case, we will have to happen with the cloud nodes. On the other hand, we share information
consider to what extent it is applied to each level of the architecture. from the edge to the fog and vice versa, and from the fog to the cloud and
vice versa; therefore the relevant information is shared by the three tiers.
8. Discussion Furthermore, when having multiple actors in our case study, we are
sharing information between users (patients in the edge), state in-
The proposed architecture has proven to enable C-IoT with three stitutions (hospitals in the fog), government agencies (Ministry of Health
tiersâedge, fog and cloud-, with multiple stakeholders and a wide range in the cloud), companies (pharmaceutical laboratories in the cloud),
of applicability domains going one step further in the state of the art, research institutions (research groups in the cloud) and so on and so
taking advantage of the three tiers. forth. Furthermore, the performance tests carried out show how the
On the one hand, with edge computing we will benefit from better devices with the least resources, in the fog and on the edge, are perfectly
network performance and less latency since IoT edge devices can capable of processing data in real time for a rate of input data according
intelligently process data locally thanks to software agents. Besides, they to an IoT scenario.
can transmit relevant information to nearby fog devices, when useful. RQ 3. If the answer to RQ2 is affirmative, would it be useful to have
This way, this information can be used for other relevant functions in two-way communication among the three system layers and data pro-
this or other layers of the architecture. cessing in all of them in a broad range of IoT scenarios?
On the other, the location of fog devices between the edge nodes and Yes, it would. We have shown an example that clearly illustrates the
the cloud provides better performance, distributing processing and usefulness of the proposal in a hospital environment and we have also
enabling real-time response without high latencies. Moreover, fog nodes illustrated the C-IoT domain with the amenities and energy management
enable the system to scale more easily, grouping the edge nodes ac- and monitoring in a hotel. As these scenarios, many other IoT environ-
cording to the needs of the real-world case study. Besides, fog nodes can ments could benefit from this architecture that allows the processing and
perform data aggregation to send partially processed data to the cloud, exchanging of situations of interest detected at the three levels of the
thus facilitating the addition of several sources in such cloud nodes. architecture in order to have greater contextual and situational knowl-
Thanks to these two features, the design and deployment of different edge for decision making inside a community or even among countries
configurations in terms of the number of nodes per level and their [55]. Undoubtedly, the different actors in society (administrations,
grouping will allow developers to deal with different scenarios in a more public and private institutions, citizens and industry) are increasingly
efficient way, adapting to the needs of the case study in question. prone to share data and encourage this collaboration, which provides
Finally, cloud nodes can process huge amounts of data and send benefits for everyone. With this architecture, we hope to move a step
already processed relevant data to the fog nodes, thus alleviating the forward in this direction towards a society capable of taking better
computing load in them. advantage of IoT in multiple domains and therefore conducting better
As a result, we have time-sensitive distributed processing which al- decision making on a daily basis for greater economic benefit and social
lows real-time decision making at each layer of the architecture ac- welfare.
cording to local information and external pre-processed information RQ4. Besides, if the answer to RQ2 is affirmative, can we ensure
specially filtered for the domain in question. interoperability between layers and coordination between devices of the
Our research questions, presented in Section 1, are answered below. same or different layers despite the lack of agreement on communication
RQ 1. Can we integrate various specific software approaches that standards for the IoT, and can we do it in a secure way?
have proven to be efficient at the edge, fog and cloud, respectively, to Yes, secure communications can be provided to ensure interopera-
provide a complete three-tier software architecture in which all three bility between layers and coordination between devices of the same or
tiers can process information? different layers. First of all, agents communicate through JADE plat-
Yes, we have shown how we can integrate various specific software form; secondly, the communications between the different levels are
approaches that have proven to be efficient at the edge, fog and cloud, done through a Mosquito broker using an MQTT protocol. Concerning
respectively. In particular, we have proposed the use of agent-oriented JADE platform, it provides support for security in MAS systems; in
programming as an efficient solution for making intelligent decisions particular, it provides features for authentication and permissions and
based on sensed data and data shared between the different edge nodes message integrity and confidentiality. Regarding the security for com-
of the architecture [5], and the use of a SOA 2.0 with CEP for real-time munications between nodes, Mosquitto provides authentication options
heterogeneous data processing and notification in the cloud [8]. through certificates or pre shared keys with SSL/TLS as well as access
Besides, even though we already proved the efficiency of combining control restrictions. Of course, we might use another message broker
SOA 2.0 and CEP also for a fog node [8], we have chosen to propose a and/or communication protocol in a different implementation of the
lighter and faster alternative, using CEP without the ESB, since, in the architecture, but it is expected that chosen brokers and protocols offer
fog, we will only integrate messages coming from our platform and, security support mechanisms. Finally, the ESB in the cloud also provides
19G. Ortiz et al. C o m p u t e r S t a n d a r d s & I n t e r f a c es79(2022)103550
security features, which indeed is a particular feature of an ESB. Visualization. Juan Boubeta-Puig: Software, Writing â review &
On interoperability, as previously mentioned, although there is editing.
currently no agreement on the standards to be used in terms of com-
munications protocol and message payload format for the IoT, there is a
Declaration of Competing Interest
trend towards the use of messaging brokers such as Mosquito and its
MQTT protocol and JSON format for message payload format. We can
None.
add a transformation module, where necessary, to send the data to the
corresponding node in the required format, as explained in Section 4.2.
Acknowledgements
Concerning coordination between devices of the same and different
layers, on the one hand, we have previously highlighted that JADE
This work was partially supported by the Spanish Ministry of Science
provides a specific mechanism for agent coordination; on the other,
and Innovation and the European Regional Development Fund (ERDF)
message brokers in general, and Mosquitto in particular, provide
under project FAME [RTI2018-093608-B-C33] and excellence network
different configurations for communications so that several coordina- RCIS [RED2018-102654-T]. We also thank Carlos Llamas JaÂ´en for his
tion models are supported.
support with the setting up of the performance evaluation tests.
9. Conclusions
Supplementary materials
In this paper, we have taken another step forward in the state of the
We have uploaded our supplementary materials to Mendeley Data at
art of software architectures to facilitate C-IoT. The proposed techno-
the following dataset:
logical solution makes use of three paradigms and specific technologies
Ortiz, Guadalupe; Zouai, Meftah; Kazar, Obka; Garcia-de-Prado,
(agent-oriented software, SOA 2.0 and CEP) for the three layers of C-IoT
Alfonso; Boubeta-Puig, Juan (2021), âDataset for Atmosphere: Context
(sensing, gateway and services), which will be carried out by processing
and Situational-Aware Collaborative IoT Architecture for Edge-Fog-
real-time data at the edge, fog and cloud, respectively. The novel soft-
Cloud Computingâ, Mendeley Data, v1. URL: https://data.mendeley.
ware architecture proposed and deployed along the three tiers not only
com/datasets/mxtwc6vb8w/1.
adapts to the needs and processing capabilities of each tier, but also
The supplementary material is composed of the following folders and
permits interoperability and two-way communications between the
items:
three levels and data processing in all of them, multiplying the knowl-
Case Study Patterns: it includes the CEP patterns from Listing 3 to
edge in each tier and therefore significantly improving collaborative
Listing 11, patterns in both EPL code and its graphical representation
decisions in real time. Besides, being able to process data at the edge will
modeled with the MEdit4CEP tool.
translate into being able to make faster decisions at the edge when in-
Performance Evaluation Results Data Files: it includes the spread-
formation from other layers is not relevant for the decision-making
sheets with CPU usage and response time values obtained from Atmo-
process, therefore being able to act more quickly when the scenario
sphere performance tests in Section 6.1.
conditions require it. Not only this, but we also avoid overloading the
networks and the computation in other layers with information that
References
does not need to be processed in them. Furthermore, when processing
data in the fog, it is not only saving the time required to send data to the [1] K. Ashton, That âInternet of Thingsâ thing, RFID J. 22 (2009) 97â114.
cloud which could delay communications and decision-making and ac- [2] Z. Zhao, P. Lin, L. Shen, M. Zhang, G.Q. Huang, IoT edge computing-enabled
tions, but also the fact that, in certain scenarios, we may encounter collaborative tracking system for manufacturing resources in industrial park, Adv.
Eng. Inf. 43 (2020), 101044, https://doi.org/10.1016/j.aei.2020.101044.
privacy restrictions that can make it difficult to send such information to
[3] Y. Ai, M. Peng, K. Zhang, Edge computing technologies for Internet of Things: a
the cloud, requiring further processing to anonymize the data, and its primer, Digit. Commun. Netw. 4 (2018) 77â86, https://doi.org/10.1016/j.
consequent delay, before it is sent. Keeping and processing such data in dcan.2017.07.001.
the fog provides further security to the data collected in our architecture. [4] B. Farahani, M. Barzegari, F. Shams Aliee, K.A. Shaik, Towards collaborative
intelligent IoT eHealth: from device to fog, and cloud, Microprocess. Microsyst. 72
As part of our future work, we expect to analyze which machine (2020), 102938, https://doi.org/10.1016/j.micpro.2019.102938.
learning mechanisms and algorithms would be the most suitable for the [5] M. Zouai, O. Kazar, G.O. Bellot, B. Haba, N. Kabachi, M. Krishnamurhty, Ambiance
system and at which levels it would be reasonable to integrate them to intelligence approach using IoT and multi-agent system, Int. J. Distrib. Syst.
Technol. 10 (2019) 37â55, https://doi.org/10.4018/IJDST.2019010104.
provide a competitive advantage without damaging system perfor-
[6] A. Garcia-de-Prado, G. Ortiz, J. Boubeta-Puig, CARED-SOA: a context-aware event-
mance. Machine learning techniques will make it possible not only to driven service-oriented architecture, IEEE Access 5 (2017) 4646â4663, https://doi.
detect situations of interest but also to predict them based on the data org/10.1109/ACCESS.2017.2679338.
[7] G. Ortiz, J.A. Caravaca, A. Garcia-de-Prado, F. Chavez de la O, J. Boubeta-Puig,
processed in real time, and to anticipate decision-making based on these
Real-time context-aware microservice architecture for predictive analytics and
predictions, which can be key in certain application domains to prevent smart decision-making, IEEE Access 7 (2019) 183177â183194, https://doi.org/
unwanted situations. Furthermore, in our future work we will study the 10.1109/ACCESS.2019.2960516.
[8] A. Garcia-de-Prado, G. Ortiz, J. Boubeta-Puig, COLLECT: COLLaborativE ConText-
benefits that the proposed architecture based on the integration of
aware service oriented architecture for intelligent decision-making in the Internet
agent-oriented software and CEP can provide in the field of Industry 4.0. of Things, Expert Syst. Appl. 85 (2017) 231â248, https://doi.org/10.1016/j.
Our proposed system should integrate all elements that depend on the eswa.2017.05.034.
[9] N. Naik, Choice of effective messaging protocols for IoT systems: MQTT, CoAP,
production chain by connecting all production machines and sensors
AMQP and HTTP, in: 2017 IEEE International Systems Engineering Symposium
through the IoT, connecting its enterprise resource planning system with (ISSE), IEEE, Vienna, Austria, 2017, pp. 1â7, https://doi.org/10.1109/
the control system in manufacturing, operations, marketing, ware- SysEng.2017.8088251.
housing, distribution and delivery and permitting an improved low la- [10] Cloud Winsystems, Fog and Edge Computing â Whatâs the Difference?, 2017.
https://www.winsystems.com/cloud-fog-and-edge-computing-whats-th
tency decision making. e-difference/(accessed. March 242021.
[11] A. Al-Fuqaha, M. Guizani, M. Mohammadi, M. Aledhari, M. Ayyash, Internet of
CRediT authorship contribution statement Things: a survey on enabling technologies, protocols, and applications, IEEE
Commun. Surv. Tutor. 17 (2015) 2347â2376, https://doi.org/10.1109/
COMST.2015.2444095.
Guadalupe Ortiz: Conceptualization, Methodology, Writing â orig- [12] R. Buyya, S.N. Srirama (Eds.), Fog and Edge Computing: Principles and Paradigms,
inal draft, Writing â review & editing, Funding acquisition. Meftah John Wiley & Sons, Inc., Hoboken, NJ, USA, 2019.
Zouai: Software, Investigation, Writing â review & editing. Okba [13] M. Yannuzzi, R. Milito, R. Serral-Gracia, D. Montero, M. Nemirovsky, Key
ingredients in an IoT recipe: fog computing, cloud computing, and more fog
Kazar: Conceptualization. Alfonso Garcia-de-Prado: Validation, computing. IEEE 19th International Workshop on Computer Aided Modeling and
20G. Ortiz et al. C o m p u t e r S t a n d a r d s & I n t e r f a c es79(2022)103550
Design of Communication Links and Networks (CAMAD), IEEE, Athens, Greece, [42] H. Abbas, S. Shaheen, M. Elhoseny, A.K. Singh, M. Alkhambashi, Systems thinking
2014, pp. 325â329, https://doi.org/10.1109/CAMAD.2014.7033259. for developing sustainable complex smart cities based on self-regulated agent
[14] C. Perera, Y. Qin, J.C. Estrella, S. Reiff-Marganiec, A.V. Vasilakos, Fog computing systems and fog computing, Sustain. Comput. 19 (2018) 204â213, https://doi.org/
for sustainable smart cities: a survey, ACM Comput. Surv. 50 (2017) 1â43, https:// 10.1016/j.suscom.2018.05.005.
doi.org/10.1145/3057266. [43] D. Sahinel, C. Akpolat, F. Sivrikaya, S. Albayrak, An agent-based network resource
[15] B. Omoniwa, R. Hussain, M.A. Javed, S.H. Bouk, S.A. Malik, Fog/Edge computing- management concept for smart city services, in: 2018 14th Annual Conference on
based IoT (FECIoT): architecture, applications, and research issues, IEEE Internet Wireless On-Demand Network Systems and Services (WONS), IEEE, Isola, 2018,
Things J. 6 (2019) 4118â4149, https://doi.org/10.1109/JIOT.2018.2875544. pp. 129â132, https://doi.org/10.23919/WONS.2018.8311675.
[16] A.V. Dastjerdi, H. Gupta, R.N. Calheiros, S.K. Ghosh, R. Buyya, Fog Computing: [44] X. Lu, J. Yin, N.N. Xiong, S. Deng, G. He, H. Yu, JTangCMS: an efficient monitoring
Principles, Architectures, and Applications, Elsevier, 2016, pp. 61â75. Internet of system for cloud platforms, Inf. Sci. 370â371 (2016) 402â423, https://doi.org/
Things. 10.1016/j.ins.2016.06.009.
[17] F. Behmann, K. Wu, Collaborative Internet of Things (C-IoT): for Future Smart [45] A.S. Dhillon, S. Majumdar, M. St-Hilaire, A. El-Haraki, A Mobile complex event
Connected Life and Business, John Wiley and Sons, Inc, Hoboken, 2015. processing system for remote patient monitoring, in: 2018 IEEE International
[18] C. Zhang, Design and application of fog computing and Internet of Things service Congress on Internet of Things (ICIOT), IEEE, San Francisco, CA, 2018,
platform for smart city, Futur. Gener. Comput. Syst. 112 (2020) 630â640, https:// pp. 180â183, https://doi.org/10.1109/ICIOT.2018.00034.
doi.org/10.1016/j.future.2020.06.016. [46] G. Fortino, A. Guerrieri, W. Russo, C. Savaglio, Integration of agent-based and
[19] C. Zunino, A. Valenzano, R. Obermaisser, S. Petersen, Factory communications at Cloud Computing for the smart objects-oriented IoT, in: Proceedings of the 2014
the dawn of the fourth industrial revolution, Comput. Stand. Interfaces 71 (2020), IEEE 18th International Conference on Computer Supported Cooperative Work in
103433, https://doi.org/10.1016/j.csi.2020.103433. Design, CSCWD 2014, 2014, pp. 493â498, https://doi.org/10.1109/
[20] M. Papazoglou, Web Services and SOA: Principles and Technology, Pearson CSCWD.2014.6846894.
Education, Essex, England ; New York, 2012, 2nd ed,, http://catalogue.pearsoned. [47] M. Zouai, O. Kazar, B. Haba, H. Saouli, B. Hind, IoT approach using multi-agent
co.uk/educator/product/Web-Services-and-SOA-Principles-and-Technology/ system for ambient intelligence, 11 (2017) 15â32.
9780273732167.page. [48] S.M.R. Islam, D. Kwak, M.D.H. Kabir, M. Hossain, K.-S. Kwak, The Internet of
[21] D.C. Luckham, Event Processing for Business: Organizing the Real-Time Enterprise, things for health care: a comprehensive survey, IEEE Access 3 (2015) 678â708,
John Wiley & Sons, Hoboken, N.J., USA, 2012. https://doi.org/10.1109/ACCESS.2015.2437951.
[22] M. Papazoglou, W.V.D. Heuvel, Service-oriented design and development [49] J. Boubeta-Puig, G. Ortiz, I. Medina-Bulo, MEdit4CEP: a model-driven solution for
methodology, Int. J. Web Eng. Technol. 2 (2006) 412â442, https://doi.org/ real-time decision making in SOA 2.0, Knowl.-Based Syst. 89 (2015) 97â112,
10.1504/IJWET.2006.010423. https://doi.org/10.1016/j.knosys.2015.06.021.
[23] C. Inzinger, W. Hummer, B. Satzger, P. Leitner, S. Dustdar, Generic event-based [50] D. Bade, W. Lamersdorf, An agent-based event processing middleware for sensor
monitoring and adaptation methodology for heterogeneous distributed systems: networks and RFID systems, Comput. J. 54 (2011) 321â331, https://doi.org/
event-based monitoring and adaptation for distributed systems, Software 44 (2014) 10.1093/comjnl/bxp103.
805â822, https://doi.org/10.1002/spe.2254. [51] H. Shah-Mansouri, V.W.S. Wong, Hierarchical fog-cloud computing for IoT
[24] EsperTech, Esper Reference. Chapter 5. EPL Reference: Clauses, (2020). http://es systems: a computation offloading game, IEEE IoT J. 5 (2018) 3246â3257, https://
per.espertech.com/release-5.2.0/esper-reference/html/epl_clauses.html (accessed doi.org/10.1109/JIOT.2018.2838022.
April 7, 2021). [52] S. Alamgir Hossain, Md.Anisur Rahman, M.A. Hossain, Edge computing framework
[25] OASIS Consortium, MQTT, (2020). http://mqtt.org/(accessed April 7, 2021). for enabling situation awareness in IoT based smart city, J. Parallel Distrib.
[26] Eclipse, M., (2020). https://mosquitto.org/(accessed April 7, 2021). Comput. 122 (2018) 226â237, https://doi.org/10.1016/j.jpdc.2018.08.009.
[27] A.K. Dey, Understanding and Using Context, Personal Ubiquitous Comput. 5 [53] W. Masri, I.A. Ridhawi, N. Mostafa, P. Pourghomi, Minimizing delay in IoT systems
(2001) 4â7. https://doi.org/10.1007/s007790170019. through collaborative fog-to-fog (F2F) communication, in: 2017 Ninth
[28] G.D. Abowd, A.K. Dey, P.J. Brown, N. Davies, M. Smith, P. Steggles, Towards a International Conference on Ubiquitous and Future Networks (ICUFN), IEEE,
Better Understanding of Context and Context-Awareness, Springer-Verlag, Milan, 2017, pp. 1005â1010, https://doi.org/10.1109/ICUFN.2017.7993950.
Karlsruhe, Germany, 1999, pp. 304â307, https://doi.org/10.1007/3-540-48157-5_ [54] J. RoldÂ´an, J. Boubeta-Puig, J.Luis MartÃ­nez, G. Ortiz, Integrating complex event
29. processing and machine learning: an intelligent architecture for detecting IoT
[29] F. Burstein, P. BrÂ´ezillon, A. Zaslavsky (Eds.), Supporting Real Time Decision- security attacks, Expert Syst. Appl. 149 (2020), 113251, https://doi.org/10.1016/
Making: The Role of Context in Decision Support on the Move, Springer US, Boston, j.eswa.2020.113251.
MA, 2011, https://doi.org/10.1007/978-1-4419-7406-8. [55] X. Larrucea, M. Moffie, S. Asaf, I. Santamaria, Towards a GDPR compliant way to
[30] M.R. Endsley, Design and evaluation for situation awareness enhancement, in: secure European cross border healthcare Industry 4.0, Comput. Stand. Interfaces
Proceedings of the Human Factors Society Annual Meeting 32, 1988, pp. 97â101, 69 (2020), 103408, https://doi.org/10.1016/j.csi.2019.103408.
https://doi.org/10.1177/154193128803200221.
[31] Y. Shoham, Agent oriented programming, Artif. Intell. 60 (1993) 51â92.
[32] V. Silva, A. Garcia, A. BrandËao, C. Chavez, C. Lucena, P. Alencar, Taming agents Guadalupe Ortiz obtained her PhD in Computer Science at the University of Extremadura
(Spain) in 2007, where she worked from 2001 as Assistant Professor. In 2009 she joined
and objects in software engineering, in: A. Garcia, C. Lucena, F. Zambonelli, the University of CÂ´adiz (UCA) as tenured Associate Professor in Computer Science and
A. Omicini, J. Castro (Eds.), Software Engineering for Large-Scale Multi-Agent
Systems, Springer Berlin Heidelberg, Berlin, Heidelberg, 2003, pp. 1â26, https:// Engineering. Her research interests focus on the integration of complex-event processing
and context-awareness in service-oriented architectures in the Internet of things.
doi.org/10.1007/3-540-35828-5_1.
[33] P.D. OâBrien, R.C. Nicol, FIPA â towards a standard for software agents, BT
Technol. J. 16 (1998) 51â59, https://doi.org/10.1023/A:1009621729979. Meftah Zouai obtained his PhD in Computer Science at the University of Biskra (Algeria)
[34] F.L. Bellifemine, G. Caire, D. Greenwood, Developing Multi-Agent Systems with in 2021. In 2016, he obtained a Master in Networks Technologies and Communication. His
JADE | Wiley, Wiley, 2007. https://www.wiley.com/en-us/Developing+Multi+ research interests focus on Multi-agent and embedded systems and the integration of cloud
Agent+Systems+with+JADE-p-9780470057476. computing and context-awareness in service-oriented architectures in the Internet of
[35] O. Debauche, S. Mahmoudi, P. Manneback, A. Assila, Fog IoT for health: a new things.
architecture for patients and elderly monitoring, Procedia Comput. Sci. 160 (2019)
289â297, https://doi.org/10.1016/j.procs.2019.11.087.
Okba Kazar is full professor at the Computer Science department of the University of
[36] N. Maleki, M. Loni, M. Daneshtalab, M. Conti, H. Fotouhi, SoFA: A Spark-oriented
Biskra and director of LINFI laboratory. His main research fields are artificial intelligence,
Fog Architecture, in: IECON 2019 - 45th Annual Conference of the IEEE Industrial
multi-agents systems, big data, Internet of Things and smart health. He has published more
Electronics Society, IEEE, Lisbon, Portugal, 2019, pp. 2792â2799, https://doi.org/ than 320 papers in international journals and conferences and two books: âManual dâIn-
10.1109/IECON.2019.8927065. telligence artificielleâ and âBig data securityâ.
[37] R. Mahmud, F.L. Koch, R. Buyya, Cloud-fog interoperability in IoT-enabled
healthcare solutions, in: Proceedings of the 19th International Conference on
Distributed Computing and Networking, ACM, Varanasi India, 2018, pp. 1â10, Alfonso GarcÃ­a-de-Prado received his Ph.D. degree in Computer Science at the University
https://doi.org/10.1145/3154273.3154347. of CaÂ´diz (UCA), Spain, in 2017, where he has been an assistant professor since 2012.
[38] S. Shen, Y. Han, X. Wang, Y. Wang, Computation offloading with multiple agents in Previously he had been a developing programmer, analyst and consultant for international
edge-computingâsupported IoT, ACM Trans. Sen. Netw. 16 (2020) 1â27, https:// industry partners. His research focuses on context-aware service-oriented architectures, as
doi.org/10.1145/3372025. well as their integration with complex event processing and the Internet of things.
[39] Y. Zhang, B. Feng, W. Quan, A. Tian, K. Sood, Y. Lin, H. Zhang, Cooperative edge
caching: a multi-agent deep learning based approach, IEEE Access 8 (2020)
Juan Boubeta-Puig is a tenured Associate Professor with the Department of Computer
133212â133224, https://doi.org/10.1109/ACCESS.2020.3010329. Science and Engineering at the University of CÂ´adiz (UCA), Spain. He received his Ph.D.
[40] X. Liu, J. Yu, Z. Feng, Y. Gao, Multi-agent reinforcement learning for resource
degree in Computer Science from UCA in 2014. His research interests include real-time big
allocation in IoT networks with edge computing, China Commun. 17 (2020)
data analytics through complex event processing, event-driven service-oriented architec-
220â236, https://doi.org/10.23919/JCC.2020.09.017.
tures, Internet of Things and model-driven development.
[41] X. Liu, J. Yu, J. Wang, Y. Gao, Resource allocation with edge computing in IoT
networks via machine learning, IEEE Internet Things J. 7 (2020) 3415â3426,
https://doi.org/10.1109/JIOT.2020.2970110.
21