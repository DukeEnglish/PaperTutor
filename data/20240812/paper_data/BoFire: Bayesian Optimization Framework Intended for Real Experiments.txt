BoFire: Bayesian Optimization Framework Intended for Real
Experiments
JohannesP.Du¨rholt1, ThomasS.Asche1, JohannaKleinekorte1, GabrielMancino-
Ball1, Benjamin Schiller1, Simon Sung1, Julian Keupp2, Aaron Osburg3, Toby
Boyne4, Ruth Misener4, Rosona Eldred5, Wagner Steuer Costa5, Chrysoula
Kappatou6, Robert M. Lee6, Dominik Linzner6, David Walz6, Niklas Wulkow6,
Behrang Shafei6
johannespeter.duerholt@evonik.com
1Evonik Operations GmbH, DE, 2Boehringer Ingelheim Pharma GmbH & Co. KG, DE, 3Heidelberg
University, DE, 4Imperial College London, UK, 5Chemovator GmbH, DE, 6BASF SE, DE
Abstract
Ouropen-sourcePythonpackageBoFirecombinesBayesianOptimization(BO)withother
design of experiments (DoE) strategies focusing on developing and optimizing new chem-
istry. PreviousBOimplementations,forexampleastheyexistintheliteratureorsoftware,
require substantial adaptation for effective real-world deployment in chemical industry.
BoFire provides a rich feature-set with extensive configurability and realizes our vision of
fast-tracking research contributions into industrial use via maintainable open-source soft-
ware. Owing to quality-of-life features like JSON-serializability of problem formulations,
BoFire enables seamless integration of BO into RESTful APIs, a common architecture
component for both self-driving laboratories and human-in-the-loop setups. This paper
discusses the differences between BoFireand other BO implementations andoutlines ways
that BO researchneeds to be adapted for real-worlduse in a chemistry setting.
Keywords: Bayesian optimization, Design of experiments, Active learning
1. Introduction
Once a chemist has outlined a possible reaction for creating a new chemical, or proposed a
formulation or process for a new product, the focus in industrial chemistry shifts towards
optimization. There are lots of questions that need to be answered. For example: How,
by changing the temperature and pressure of the reaction, can we maximize the yield and
the purity of the desired chemical? How, by changing the chemical formulation, can we
minimize environmental impact and maximize safety? Given a set of thousands of candidate
molecules, which should be tested inthe laboratory when onlylimited resources are available?
To answer these questions, the most common approach in industry is still human in-
tuition, trial-and-error, or expensive mechanistic models. However, Bayesian optimization
(BO) and design of experiments (DoE) offer great possibilities to the chemical industry:
treating chemical experiments as black-box functions and optimizing them in the most
efficient manner or uncovering the sources of variation under relevant conditions, respec-
tively(Coley et al.,2017;Hase et al.,2018;Shields et al.,2021;Thebelt et al.,2022;Frazier,
2018).
©2024Du¨rholt,Asche,Kleinekorte,Mancino-Ball,Schiller,Keupp,Sung,Osburg,Boyne, Misener,Eldred,Steuer
Costa,Kappatou, Lee,Linzner,Walz,Wulkow,Shafei.
License: CC-BY4.0,seehttps://creativecommons.org/licenses/by/4.0/.
4202
guA
9
]GL.sc[
1v04050.8042:viXraDu¨rholt, et al.
Software tools have been introduced to enhance the application of BO, for instance Ax
(Bakshy et al., 2018) and BayBE (Fitzner et al., 2022), building on foundational machine
learning software like BoTorch (Balandat et al., 2020). The BO tools are complemented
by software with cheminformatics capabilities, for example providing representations of
molecules, such as SMILES (Landrum, 2006; Moriwaki et al., 2018; Griffiths et al., 2023).
However, in an industrial chemistry setting, existing BO and active learning software
would require substantial adaptation prior to deployment. Further, as experiments grow
in scale and complexity, coordinating between lab components becomes challenging: in-
consistent data handling makes implementing standalone software into a larger pipeline
infeasible. Following the needs in chemical industry, we have developed (and continue to
develop) the open-source software package Bayesian Optimization Framework Intended for
Real Experiments or BoFire1. Our companies actively deploy BoFire in both self-driving
labs and human-in-the-loop applications. BoFire also supports serialization, whereby all of
its components can be translated into a RESTful format, providing an API out of the box
and simplifying implementation in existing systems. By making the algorithmic component
of our industrial software open-source, we seek to give machine learning researchers a path
towards fast-tracking their research ideas into practice and to provide an easy to use tool
for practitioners in chemical industry.
Comparison to related work. The frameworks most similar to BoFire are Ax (Chang,
2019) and BayBE (Fitzner et al., 2022). Compared to Ax, BoFire offers chemoinformat-
ics capabilities, classical DoE approaches and serialization via Pydantic (Colvin, 2024).
Compared to BayBE, BoFire offers DoE strategies, serialization via Pydantic, and other
application-relevant features such as true multi-objective optimization compared to a pure
scalarization based approach. We developed BoFire to meet the BO and DoE needs of
industrial chemists in a single package.
2. Integrating experimental design into real-world labs
We take an experimentalist-first approach to the software architecture, implementing fea-
turesthatareindustriallyusefulandfocusingoneasyuserdeployment. A real-world example
motivates this section (with corresponding code in Listing 1 and visualization in Figure 1)
and our GitHub repository features other examples in Jupyter notebooks.
Domains. InBoFire,aDomainconsistsof Inputs,Outputs,andoptionallyConstraints.
BoFire allows the user to define an input space X = x 1⊗x 2...⊗xD where the input fea-
turesxi canbecontinuous,discrete, molecularorcategorical. BoFiresupportsthefollowing
constraints: (non)linear (in)equality, NChooseK, and interpoint equality. The package also
provides support for learning black-box inequality constraints.
A chemist designs a paint using a selection of 20 different compounds, each of which
has a continuously-varying concentration. They use an NChooseK constraint to limit
each test-paint mixture to at most 5 compounds. For a batch of multiple mixtures,
all paints are tested at the same temperature, requiring an InterpointEquality
constraint which keeps the temperature fixed during the batch of experiments.
1. https://github.com/experimental-design/bofire
2Bayesian Optimization Framework Intended for Real Experiments
Objectives. In BoFire, objectives are defined separately from the outputs on which they
operate. This allows us to define outputs in a physically meaningful way. Here, minimiza-
tion, maximization, close-to-target and sigmoid-type objectives are supported. For multi-
objective optimization, BoFire supports two schemes: an a priori approach, in which the
user specifies an additive or multiplicative weighting of each objective; and an a posteriori
approach, where the optimizer approximates the Pareto front of all optimal compromises
for subsequent decision-making. The latter is implemented via qParEGO (Knowles, 2006)
and q(log)(N)EHVI strategies (Daulton et al., 2020, 2021; Ament et al., 2023). Both can
be used in combination with black box constraints.
The chemist wants to achieve a target viscosity, while maximising hydrophobicity.
They define the measurements as Outputs, and use the CloseToTargetObjective
and MaximizeObjective respectively to drive the optimization.
Strategies. Given a Domain, the user selects a Strategy to generate experimental pro-
posals. Classical DoE based strategies can generate (fractional)-factorial, space-filling (via
sobol-,uniform-orlatin-hypercubesampling),andD-,E-,A-,G-, orK-optimaldesigns. Com-
paredtocommercialsoftware(e.g. Modde,JMP),BoFiresupportsdesignsoverconstrained
mixed-type input spaces. Alternatively, predictive strategies use Surrogates to model the
data-generating process and perform BO. Many of these strategies are built on BoTorch
(Balandat et al., 2020) and provide numerous acquisition functions. They are easily ex-
tendable and allow users to define custom strategies and surrogates, for instance as we did
with ENTMOOT (Thebelt et al., 2021).
The initial paint experiments should be selected using a SpaceFillingDesign,then
use a PredictiveStrategy to suggest optimal experiments. The chemist uses the
StepwiseStrategy interface to seamlessly transition between strategies.
3. Library Philosophy
Fully serializable. BoFire is industry-ready for self-driving labs. In this setting, com-
munication is key: many systems pass data and information between each other, and data
integrity is essential.
BoFire is natively usable with a RESTful Application Programming Interface (API)
and structured json-based, document-oriented databases, via the use of the popular data-
validation library Pydantic allowing for seamless integration into FastAPI (Ram´ırez, 2024).
We separate all Strategies and Surrogates into data models, and functional com-
ponents. Data models are fully json-(de)serializable classes built on Pydantic, which hold
complete information regarding the search space, surrogates and strategies. This clear dis-
tinction allows for a minimal BoFire installation consisting only of the data models. This
is especially useful in scenarios where a process orchestration layer (POL) is involved as the
middlelayerbetweenacentrallydeployedplannerusingBoFire,andclosed-loopequipment.
Modularization. BoFire is both easy to use and highly customizable with respect to
its strategies and surrogates. Each component of BoFire is modular - problem definitions
are independent of the strategies used to solve them, which are in turn independent of the
surrogates used to model the observed data. This separation of responsibility enables a
3Du¨rholt, et al.
compounds = [f"compound_{i}" for i in range(20)]
domain = Domain.from_lists(
[ContinuousInput(key="temp", bounds=[20, 90], unit="°C"),
*(ContinuousInput(key=comp, bounds=[0, 1]) for comp in compounds)],
[ContinuousOutput(key="viscosity",
objective=CloseToTargetObjective(target_value=0.5, exponent=2)),
ContinuousOutput(key="hydrophobicity", objective=MaximizeObjective())],
[NChooseKConstraint(
features=compounds, min_count=1, max_count=5, none_also_valid=False),
InterpointEqualityConstraint(feature="temp")])
Listing 1: Defining the domain of the paint problem in Section 2.
Surrogate
Proposal
Strategy
Domain
BayesOpt { }
C ∈ {H2C O, ,···}
◦ ◦
T ∈ [20 C,90 C] DoE
Experiments
Figure 1: BoFire provides a complete interface for defining and solving optimization prob-
lems in the lab. All objects in the loop - candidates, strategies, surrogates, and
proposals - are fully serializable.
‘plug-and-play’ approach. By building BoFire using the BoTorch library, we can leverage
the wide range of software written in the BoTorch ecosystem.
4. Discussion & Conclusion
This paper has presented BoFire, our open-source BO and DoE python package. Repre-
sentingseveralcompanies inthechemical industry,wedeploy BoFiredaily tobringBOand
DoE into our companies. Each individual contributing company could have easily devel-
opedtheirown bespokepackage, butwejoinedforces tocreate BoFirebecauseof ourvision
of catalyzing machine learning research. BoFire exemplifies our collaboration goals with
researchers, for example those working in academia, for example current work on practical
multi-fidelity modeling (Bonilla et al., 2007; Folch et al., 2023). Through BoFire, we offer
the possibility for researchers to useour platform to translate new strategies and surrogates
into practice.
4Bayesian Optimization Framework Intended for Real Experiments
References
Sebastian Ament, Samuel Daulton, David Eriksson, Maximilian Balandat, and Eytan Bak-
shy. Unexpected improvements to expected improvement for Bayesian optimization. In
NeurIPS, volume 36, pages 20577–20612, 2023.
Eytan Bakshy, Lili Dworkin, Brian Karrer, Konstantin Kashin, Ben Letham, Ashwin
Murthy, and Shaun Singh. Ae: A domain-agnostic platform for adaptive experimen-
tation. In NeurIPS Systems for ML Workshop, 2018.
Maximilian Balandat, Brian Karrer, Daniel R. Jiang, Samuel Daulton, Benjamin Letham,
Andrew Gordon Wilson, and Eytan Bakshy. BoTorch: A Framework for Efficient Monte-
Carlo Bayesian Optimization. In NeurIPS, 2020.
Edwin V Bonilla, Kian Chai, and Christopher Williams. Multi-task Gaussian process pre-
diction. NIPS, 20, 2007.
Daniel T.Chang. Bayesian hyperparameter optimization with BoTorch, GPyTorch and Ax.
arXiv:1912.05686, 2019.
Connor W Coley, Regina Barzilay, Tommi S Jaakkola, William H Green, and Klavs F
Jensen. Prediction of organic reaction outcomes using machine learning. ACS Central
Science, 3(5):434–443, 2017.
Samuel Colvin. Pydantic, June 2024. URL https://github.com/pydantic/pydantic.
Samuel Daulton, Maximilian Balandat, and Eytan Bakshy. Differentiable expected hy-
pervolume improvement for parallel multi-objective Bayesian optimization. In NeurIPS,
volume 33, pages 9851–9864, 2020.
Samuel Daulton, Maximilian Balandat, and Eytan Bakshy. Parallel Bayesian optimiza-
tion of multiple noisy objectives with expected hypervolume improvement. In NeurIPS,
volume 34, pages 2187–2200, 2021.
MartinFitzner,AdrianSˇoˇsi’c,AlexanderHopp,andAlexLee. BayBE–aBayesianbackend
for design of experiments, 2022. URL https://github.com/emdgroup/baybe. Accessed:
2024-02-22.
Jose Pablo Folch, Robert M Lee, Behrang Shafei, David Walz, Calvin Tsay, Mark van der
Wilk, and Ruth Misener. Combining multi-fidelity modelling and asynchronous batch
Bayesian optimization. Computers & Chemical Engineering, 172:108194, 2023.
Peter I. Frazier. A tutorial on Bayesian optimization. arXiv preprint arXiv:1807.02811,
2018.
Ryan-RhysGriffiths,LeoKlarner,HenryMoss,AdityaRavuri,SangT.Truong,YuanqiDu,
Samuel Don Stanton, Gary Tom, Bojana Rankovi´c, Arian Rokkum Jamasb, Aryan Desh-
wal, Julius Schwartz, Austin Tripp, Gregory Kell, Simon Frieder, Anthony Bourached,
Alex James Chan, Jacob Moss, Chengzhi Guo, Johannes P. Du¨rholt, Saudamini Chaura-
sia,JiWonPark,Felix Strieth-Kalthoff,AlphaLee,BingqingCheng,AlanAspuru-Guzik,
5Du¨rholt, et al.
Philippe Schwaller, and Jian Tang. GAUCHE: A library for Gaussian processes in chem-
istry. In NeurIPS, 2023.
Florian Hase, Lo¨ıc M Roch, Christoph Kreisbeck, and Al´an Aspuru-Guzik. Phoenics: a
Bayesian optimizer for chemistry. ACS Central Science, 4(9):1134–1145, 2018.
Joshua Knowles. ParEGO: A hybrid algorithm with on-line landscape approximation for
expensivemultiobjective optimization problems. IEEE transactions on evolutionary com-
putation, 10(1):50–66, 2006.
Greg Landrum. RDKit: Open-source cheminformatics, 2006. URL
https://www.rdkit.org.
Hirotomo Moriwaki, Yu-Shi Tian, Norihito Kawashita, and Tatsuya Takagi. Mordred: a
molecular descriptor calculator. Journal of cheminformatics, 10(1):1–14, 2018.
Ram´ırez. FastAPI, June 2024. URL ’https://github.com/tiangolo/fastapi’.
BenjaminJShields,Jason Stevens, JunLi, MarvinParasram, Farhan Damani, JesusIMar-
tinez Alvarado, Jacob M Janey, Ryan P Adams, and Abigail G Doyle. Bayesian reaction
optimization as a tool for chemical synthesis. Nature, 590(7844):89–96, 2021.
Alexander Thebelt,Jan Kronqvist,Miten Mistry, RobertMLee, Nathan Sudermann-Merx,
andRuthMisener. ENTMOOT:Aframeworkforoptimizationoverensembletreemodels.
Computers & Chemical Engineering, 151:107343, 2021.
Alexander Thebelt, Johannes Wiebe, Jan Kronqvist, Calvin Tsay, and Ruth Misener. Max-
imizing information from chemical engineering data sets: Applications to machine learn-
ing. Chemical Engineering Science, 252:117469, 2022.
6