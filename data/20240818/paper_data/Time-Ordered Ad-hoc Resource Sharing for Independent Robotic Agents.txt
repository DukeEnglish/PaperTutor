Time-Ordered Ad-hoc Resource Sharing for Independent Robotic
Agents
Arjo Chakravarty1, Michael X. Grey2, M. A. Viraj J. Muthugala3 and Mohan Rajesh Elara3
Abstract—Resource sharing is a crucial part of a multi- • A Conjunctive Normal Form (CNF) formulation of the
robotsystem.WeproposeaBooleansatisfiabilityproblem(SAT) robot resource allocation problem
basedapproachtoresourcesharing.Ourkeycontributionsare
• A greedy algorithm for optimizing resource assignment
an algorithm for converting any constrained assignment to a
weighted-SAT based optimization. We propose a theorem that • An algorithm for converting any assignment problem
allows optimal resource assignment problems to be solved via and its SAT formulation into a cost optimization prob-
repeated application of a SAT solver. Additionally we show lem.
a way to encode continuous time ordering constraints using • A CNF encoding of the scheduling problem
Conjunctive Normal Form (CNF). We benchmark our new
• An open source package integrated with ROS 2 and
algorithmsandshowthattheycanbeusedinanad-hocsetting.
Open-RMF that handles resource assignment
We test our algorithms on a fleet of simulated and real world
robots and show that the algorithms are able to handle real The rest of this paper is organised as follows: Section II
world situations. Our algorithms and test harnesses are open covers a background literature review. Section III introduces
source and build on Open-RMF’s fleet management system.
theresourceallocationproblemforfixedtimeranges.Section
IV compares a weighted SAT based approach to a greedy
I. INTRODUCTION
approach.SectionIVproposesandcomparestwoalgorithms:
Multi-robot systems is a well studied field with a va-
one based on SAT and another greedy method. Section V
riety of sub problems. There has been extensive study of
extends the CNF formulation introduced in Section III to
robotcommunications,jointexplorationstrategies[1],multi-
support time ranges instead of fixed time and shows that it
agent path finding [2] [3] and task allocation [4]. Open-
is faster than discretization. Finally, Section VI describes an
RMFisanopensourceframeworkthatfacilitatesmulti-fleet
experimental validation done in simulation and on physical
orchestration [5]. It comes with tools for handling problems
robots.
such as traffic management, map alignment and optimal
task allocation [4]. Robotics researchers have spent much II. BACKGROUND
effort on optimizing multi-robot path planning [2] [6], task One straightforward method to solve the resource as-
assignment[4][7]andmulti-robotlocalization[8].However, signment problem is to check if the robot’s destination is
as we move these systems to production one problem that currently occupied and wait for it to become available.
arises is ad hoc (on-demand) physical resource contention1. This overly simplistic approach easily leads to deadlock,
Suppose two or more robots intend to use the same item for example, if two robots each want to go to the location
like a parking spot, charger, or an elevator. There needs to currently occupied by the other, then both are stuck waiting
be a way for their use of the resources to be orchestrated. on the other to move.
Thispaperproposesalgorithmsforareservationsystembuilt TheclassicalgorithmforresourceassignmentistheKhun-
upon the notion of optimizing the assignment of resources Munkres method [9]. This method assumes there are n
while taking into account individual costs for robots using a resourcesandmrequesters.Eachrequesterassignsacostfor
Boolean satisfy-ability solver (SAT). When combined with a given resource, e.g. the distance the requester would need
traffic deconfliction, it allows lifelong operation of a multi- totravelfromtheircurrentlocationtoarriveateachresource.
robot system. Our primary contributions in this paper are: The algorithm will converge on the optimal set of resource
assignments in a matter of O(n3) time [9]. This method
This research is supported by Intrinsic llc., the National Robotics Pro-
howeverdoesnotaccountforscenarioswhereitisnecessary
gramme under its National Robotics Programme (NRP) BAU, Ermine III:
Deployable Reconfigurable Robots, Award No. M22NBK0054, A*STAR for multiple requesters to take turns with one resource as is
underits“RIE2025IAF-PPAdvancedROS2-nativePlatformTechnologies often the case in a realistic deployment. Additionally it is
forCrosssectorialRoboticsAdoption(M21K1a0104)”programme,andalso
not possible to to encode constraints into the Kuhn-Munkres
supported by SUTD Growth Plan (SGP) Grant, Grant Ref. No. PIE-SGP-
DZ-2023-01. algorithm. This makes it unsuitable for our use as we often
1Arjo Chakravarty is with Intrinsic LLC and Singapore University needtoencodeconstraintslike“Thisrobotmusthaveaccess
of Technology and Design, Singapore. arjoc@intrinsic.ai,
to a charger within the next two hours”.
arjo chakravarty@mymail.sutd.edu.sg
2MichaelX.GreyiswithIntrinsicLLCmxgrey@intrinsic.ai It can be shown that the robot resource assignment prob-
3M. A. Viraj J. Muthugala and Mohan Rajesh Elara are lem has equivalent complexity to the Travelling Salesman
with Singapore University of Technology and Design, Singapore. Problem (TSP) making it NP-hard [7]. Several approaches
{viraj jagathpriya,rajeshelara}@sutd.edu.sg
for solving such problems exist such as using Linear Pro-
1https://github.com/open-rmf/rmf/discussions/83#
discussioncomment-1123844 gramming(LP)[7]orConstraintProgramming(CP).Integer
4202
guA
51
]OR.sc[
1v24970.8042:viXralinear programming (ILP) is heavily favoured by many TSP A. Definitions
solvers [10], however fast ILP solvers such as Gurobi [11]
Given a set of resource requests, we assign resources
and C-PLEX [12] remain proprietary. Google’s open source
across those requests based on the available alternatives in
OR-tools use constraint programming solvers for such NP-
a way that minimizes the overall cost without having any
hard optimizations [13].
assignments that overlap in time.
Theapproachwefavourissimilartotheapproachusedby
• Each request can be defined as R i.
OR-tools as there are many very mature open source SAT
• A request has n alternatives α i,j =(s i,j,r i,j,d i,j,c i,j)
solvers available for use [14]. The Conflict Driven Clause where s ,d ,c ∈R. Each alternative is made of a
i,j i,j i,j
Learning algorithm allows SAT solvers to learn clauses
start time s, a resource r, a cost c and a duration d.
which are impossible enabling us to limit the search space
• An alternative α i,j conflicts with another alternative
drastically[15][16][17].Itiseasytoencodenewconstraints
α if it shares the same resource (i.e. r = r )
k,m i,j k,m
using CNF as compared to LP. This means that we know if
and it overlaps in time with the other alternative.
a set of requested inputs is impossible even before trying to
optimize the constraints. Similar approaches have been used B. Simplification to CNF
by others, for instance Imeson and Smith use SAT and TSP TheproposedproblemcanbesimplifiedintoaCNF.Sup-
solvers to solve integrated task and motion planning [17]. pose the variable x represents the fact that the alternative
i,j
However, our approach is much simpler. α is awarded. We have two constraints:
i,j
A form of the SAT problem which can encode optimiza- First only one alternative from a request R with n
i
tion is the Weighted MaxSAT problem [18]. In the MaxSAT alternativescanbeawarded.Thisgivesustheclausesshown
problem there are a few hard and a few soft constraints. The in (1) and (2)
hardconstraintsareoneswhichcannotbeviolated,whilethe
(x ∨x ∨x ...∨x ) (1)
cost of the soft constraints is minimized with weights [18]. i,0 i,1 i,2 i,n
This is not unlike the problem we have at hand—in fact (cid:94)
(¬x ∨¬x ),where j <k (2)
i,j i,k
the formulation we present is one that could potentially be
j,k
solvedusingMaxSATsolvers.However,forourformulation
we do not have soft constraints thus significantly reducing Secondly, no items with conflicts can be assigned. So for
the complexity and eliminating the need for MaxSAT. every pair of conflicts α i,j, α i,m we get the clause (3)
Often CP-SAT solvers encode the costs of individual (¬x ∨¬x ) (3)
i,j k,m
assignments themselves as CNF formulas [13]. This leads
to the conundrum where floating point numbers cannot be IV. COSTOPTIMIZATION
represented and only integers can be used. In most cases A. Weighted-SAT Based Approach
this is rarely a problem as we can just multiply the costs by
While SAT can provide a feasible solution, it does not
an arbitrarily large number [13]. For our problem however,
provide an easy way to calculate cost. Repeated application
thanks to the fact that only one alternative per request needs
of SAT is a common technique used when dealing with
to be assigned (see section III for definition of alternative),
such optimizations [18]. In our case we can formulate our
we can perform some simple tricks to speed up the search
optimization in terms of the boolean variables as shown in
and limit our search space when dealing with assignment (4) where x ∈{0,1} and c ∈R.
i,j i,j
type problems. Additionally, we show that it is possible
(cid:88)
to express such floating point constraints in terms of total argmin x c (4)
i,j i,j
orders, thus enabling conventional SAT solvers to reason xi,j i,j
about them.
Oneofthesimplestwaystosolvethisproblemistoaskthe
SAT solver for SAT assignment, then negate the assignment
and add it as a clause to the original. We keep doing this
III. PROBLEMSTATEMENT
untiltheSATsolverreturns”unsatisfiable”(UNSAT).Atthis
point we can confirm that there are no more alternative as-
The problem we wish to solve is one where a group signments. Such a naive brute-force approach does not scale
of heterogeneous robots request access to a certain set of very well given a scenario where there are many feasible
resources. For instance, robots may need to use charging solutions. Even when we come across the optimal solution,
stations,parkingspaces,orelevators.When arobotneedsto we would need to continue performing an exhaustive search
utilizesomekindofresource,itproposesasetofacceptable toeliminateallpossiblealternativesbeforewecanprovethat
alternative choices along with the cost of each alternative. the candidate solution is optimal.
For example if a robot needs to charge its battery and is There is additional information in the problem domain
compatible with three different charging stations, it would that we can exploit to define necessary and sufficient condi-
requestanassignmenttooneofthethreestations,listingthe tions for determining whether a feasible solution is optimal
cost of going to each station from its current location (e.g. without an exhaustive search. This motivates the following
time or distance to travel). Lemma:Lemma 4.1: Given an assignment A = Algorithm1SATCostOptimizerwithAssignmentHeuristic
1
(x ,x ....x ) if a cheaper solution A exists, then Require: An incremental SAT solver
0,j 1,l n,z 2
∃x ∈A such that given x ∈A , c <c . literals← Generate SAT literals from requests
i,j 2 i,k 1 i,j i,k
clauses←{}
Proof: (by contradiction)
best cost←∞
Suppose not. Given that there exist two solutions A 2 best solution←∅
and A 1 where A 2 is cheaper than A 1. Then from the OPEN ←{clauses}
contradiction it follows that ∀i,i < n, given x i,j ∈ A 2 and while OPEN is not empty do
x i,k ∈ A 1, c i,j ≥ c i,k. This leads to the total cost of the current clauses← pop an element in OPEN
solution cost(A 2) = c 0,j1 + c 1,j2 + ... + c n,jn ≥ c 0,k1 + s← Call Incremental SAT with current clauses
c 1,k2 +...+c n,kn = cost(A 1). But this is a contradiction if s is UNSAT then
because we had defined A 2 to be cheaper than A 1. continue.
end if
Algorithm 1 uses Lemma 4.1 to formulate a new clause
if cost(s)<best cost then
every time a solution is found. Given a SAT solution we
best cost←cost(s)
add a clause to the formula that requires at least one of
best solution←s
the cheaper alternatives to be true. This guides the solver
new clause←()
towardstheoptimalsolutionfasterthanabruteforcesearch.
// Create clause generated by Lemma 4.1
Additionally, as a result of Lemma 4.1 we immediately
for all x in s do
know if a solution is optimal. This is because if a cheaper ij
for all cost(x )<cost(x ) do
solution exists it must satisfy Lemma 4.1. Thus if we get ik ij
new clause←new clause∨x
an UNSAT solution from the SAT solver, we know that a ik
end for
cheapersolutioncannotexistandourpreviousassignmentis
end for
optimal.
new clauses←clauses∧new clause
Fig. 1 shows how this heuristic greatly reduces computa-
new clauses←new clauses∧¬s
tion time for problems. Both a Naive brute-force approach
else
and Algorithm 1 were made to solve 100 problems with
new clauses←clauses∧¬s
a large number of feasible alternatives. The heuristic based
end if
approach is able to handle larger problems relatively well
OPEN ←new clauses
comparedtothenaiveSATapproachwhichquicklybecomes
end while
tooslow.Oneofthenicefeaturesofincrementaloptimization
methods with SAT is that we are able to quickly obtain
solutionswhicharesub-optimalbutfeasible,whichisuseful
B. Alternate Solution to Optimization via a Greedy Conflict
in real world scenarios when having an effective solution
Driven Approach
quicklyismoreimportantthanobtainingtheoptimalsolution
Wecanalsofindanoptimalsolutionusingagreedysearch
eventually.
(see Algorithm 2). The approach relies on greedily picking
thelowestcostalternativesforeachreservation,thenwhena
conflictariseswebranchthesearchbasedontheconflict.For
instanceifα andα conflictwitheachotherwebranch
m,n j,k
on the fact that either α must belong to the solution and
m,n
henceeliminateα ,orα mustbelongtothesolutionand
j,k j,k
hence eliminate α , or neither belong to the solution so
m,n
both should be eliminated.
This gives us a branching factor of 3 where the frequency
of branching comes from the number of conflicting alter-
natives. Therefore the more conflicts there are, the longer
the greedy search will take. Additionally, if a solution is
unsatisfied,theoptimizerwillexamineeverypossiblebranch
before it terminates. This combinatorial approach will not
scale well with an increasing number of conflicting requests
and alternatives.
C. Understanding the weaknesses of each algorithm
Algorithm 1 and Algorithm 2 are interesting duals of
Fig. 1. Box-plot of Naive SAT based search vs heuristic driven search.
each other when we consider the worst case performance
Bothsolversweregiven100hardoptimizationproblemsofdifferentsizes.
Benchmarkwasrunona24-coreGCPinstancewithcodewritteninRust. of each algorithm. Fig. 2 shows an adversarial example for
Eachrequesthas10alternatives. Algorithm1.Here,thesolverhasmanyalternativestochooseAlgorithm 2 Greedy Conflict-Driven Optimizer
B ←()
0
S = lowest cost assignment a ∀ requests R
0 i,j i
OPEN ←{(S ,B )}
0 0
while OPEN is not empty do
(solution,B ) ← pop lowest cost assignment in Fig. 3. Example of a scenario which elicits a worst case response in
0
OPEN. theGreedyprocessbutisquicklysolvedbytheSAToptimizationprocess.
Assumethatalt3haslowestcost.
check for conflicts in solution
if no conflicts found then
return solution conflicts. This would cause the greedy algorithm to examine
end if thelowercostalternativesfirst,onlytodiscoverthattheyare
for all c in conflicts do infeasible. The SAT based solver on the other hand would
(α i,j,α k,m)=c quickly identify a feasible solution.
B 1 ←¬α i,j ∧B 0 TheincrementalnatureofAlgorithm2makesitappealing
S 1 = lowest cost assignment a i,j ∀ requests R i for ad hoc request scenarios because it can rapidly find
such that B 1 is satisfied a feasible solution and then converge towards the optimal
B 2 ←¬α k,m∧B 0 solution with however much time the overall system is
S 2 = lowest cost assignment a i,j ∀ requests R i willing to budget. When the multi-robot system needs to
such that B 2 is satisfied handle unknown requests coming in at unpredictable times,
B 3 ←¬α i,j ∧¬α k,m∧B 0 havinganyviablesolutionwithinatimeframethatkeepsthe
S 3 = lowest cost assignment a i,j ∀ requests R i overall system responsive is more important than eventually
such that B 3 is satisfied finding the optimal solution. In our benchmarks, we found
OPEN ← OPEN ∪ (S 1,B 1) ∪ (S 2,B 2) ∪ that the SAT method arrives at the first feasible (but sub-
(S 3,B 3) optimal) solution within less than a second for 40 requests
end for with 40 alternatives. Fig. 4 shows the time to first solution
end while of the SAT solver on a Thinkpad P50 with 64GB RAM
and a 16-core 11th Gen Intel(R) Core(TM) i7-11850H @
2.50GHz.Thisshowsthatthealgorithmiswellsuitedforad
from.Dependingonwherethefirstiterationlands,theworst hoc requests.
case scenario is that the SAT solver starts from the highest
D. Experimental Benchmarks
cost request and slowly works its way down through every
possible feasible alternative. In contrast, Algorithm 2 would Wecreatedmultiplebenchmarksetsbasedonthescenarios
find the solution at its first search node. describedinthesectionIV-B.Theywererunsingle-threaded
Fig. 3 shows an example which would make the greedy on a 24-core AMD EPYC 7B12 processor with 96GB
algorithm (Algorithm 2) have trouble producing a solution of RAM running in Google Cloud. The algorithms were
sincetheoverlappingtimesforthealternativescreatenumer- implemented in Rust [19] and the SAT solver used was
ous conflicts and therefore many branches. the VariSAT solver [20]. The first set of benchmarks were
In an extreme scenario where no feasible assignments can basedonascenariowheretherearemanyfeasiblesolutions.
befoundtosimultaneouslysatisfyallrequests,thegreedyal-
gorithmwouldendupdoinganexhaustivesearch,branching
at every conflict before determining that no solution exists.
On the other hand, the SAT solver in Algorithm 1 would
return UNSAT in the very first iteration.
Itisalsopossibletoconstructanadversarialexamplewith
a feasible solution. One could create a problem where the
only viable solutions have high costs, and then sprinkle in a
bunchoflowercostalternativesthatallleadtoirreconcilable
Fig.2. Exampleofascenariowhichelicitsaworstcaseresponseinthe Fig. 4. Box-plot of time taken for SAT with heuristics to generate first
SAT optimization process but is quickly solved by the greedy process in feasible but suboptimal solution. For a request size of n, there are n
O(n) alternatives.I.Efor40requeststhereare40alternativeseach.Fig. 5. Box plot showing performance comparison when many options Fig.7. Boxplotofperformancecomparisonvsrequestsinscenariowith
exist and no conflicts exist. Problem size n refers to number of requests. fixednumberofconflicts.Heretherewere10alternativesperoption.
Eachrequestalsohasnalternatives
each place a request to use the same resource at the same
This results in a more optimization heavy workload. In such time with no other alternatives, then the fixed time scheme
instances, the greedy method reaches optimality faster than would simply return UNSAT.
repeatedapplicationofSATwithheuristics.AsshowninFig. This means that we should support a time window in
5,astheproblemsizeincreases,theperformanceoftheSAT which each reservation alternative may begin. For this, there
methodwithheuristicsfallsfarbehindthegreedymethodfor aretwopossiblesolutions.Thefirstistousetheformulation
problemswithsimplesolutions.Conversely,asthenumberof in section III-A and generate a sequence of alternatives for
conflictsincreases,thegreedymethodfairsworseevenwitha each resource at discrete time intervals. The second option
small number of conflicts (see Fig. 6) while the SAT based would be to encode ordering into the SAT formulation. The
methods are able to solve large instances in a reasonable latter has the advantage that a sub-optimal solution can be
amount of time. Fig. 7 shows that the performance of the found very quickly, and an unsatisfiable scenario can be
GreedyMethodsignificantlydegradesmuchfasterthanSAT found more quickly thanks to the fact that the starting time
with number of conflicts. range not affecting the formula length (see Section V-B for
more details). Additionally, there is no need to tune the time
V. EXTENDINGTHESYSTEMTOENCODETIMERANGES
resolution to which we discretize.
Inareservationsystemforrobots,itisimportanttohandle
A. CNFencodingofschedulingconstraintstocreateamodel
scenarios that would require robots to take turns using the
same resource. The simple fixed time scheme does not lend We can extend our previous formulation to add support
itself to solving such problems. For example if two robots for varying start times. Let’s revise our original problem
statement.
1) Definitions:
• Each request can be defined as R i.
• A request has n alternatives β i,j =
(s ,l ,r ,d ,c ) where s ,l ,d ∈ R.
i,j i,j i,j i,j i,j i,j i,j i,j
Each alternative is made of an earliest start time s, a
latest start time l, a resource r, a cost c, and a duration
d.
• Analternativeβ i,j cannotco-existwithalternativeβ k,m
if it shares the same resource (i.e. r =r ) and the
i,j k,m
earliest end time of β (given by s +d ) is greater
i,j i,j i,j
than the latest start time of β (given by l ).
k,m k,m
The CNF decomposition is similar to the previous decom-
position in (1) and (2), except we introduce a new set of
variablesX toimposeordering.WesayX istrueif
ijkm ijkm
β startsafterβ .Basedonthisdefinitionwewillimplya
i,j k,m
stricttotal orderonall X withina givenresource.Strict
ijkm
Fig.6. Boxplotofperformancevsnumberofconflicts.Heretherewere totalordersgenerallyhavefourproperties:irreflexivity,anti-
10requestssubmittedeachwith5alternatives. symmetry, transitivity and connectedness [21]. We do notneedtoconsiderirreflexivityasthatissomethingthataSAT Algorithm 3 Conflict detection and clause learning for
solver already encodes. To encode anti-symmetry we start Resource Ordering
with the clause (5): let G(V,E) be the graph formed where V is the set of all
the x assigned to be true and in resource r∗, and E is
ij
(x ∧x ∧X ) =⇒ ¬X (5)
ij km ijkm kmij the set of all true X .
ijkm
sorted assignment←topological sort(G)
We can transform (5) into:
schedule ←{}
¬((x ∧x ∧X ))∨¬X (6) banned clauses ←{}
ij km ijkm kmij
for all i in sorted assignment.len() do
Which by De’Morgan’s Law simplifies to:
s = sorted assignment[i].earliest start
i
l = sorted assignment[i].latest start
¬x ∨¬x ∨¬X ∨¬X (7) i
ij km ijkm kmij
if s > schedule.last.end time() then
i
We also want to encode transitivity so we assume: schedule.insert at(s i, sorted assignment[i])
else if l > schedule.last.end time() then
i
(X ijkm∧X kmnl) =⇒ X ijnl (8) t← schedule.last.end time()
schedule.insert at(t, sorted assignment[i])
Which gets encoded into
else
¬X ∨¬X ∨X (9) banned clause ←()
ijkm kmnl ijnl
j = schedule.len()-1
We only need connectedness if both x ij and x km are while schedule[j].start time() == schedule[j-
within the same resource and both x ij and x km are true. 1].end time() do
This can be given by the boolean formula below: banned clause ∨=¬ assignment[i]
j ←j−1
(x ∧x ) =⇒ (X ∨X ) (10)
ij km ijkm kmij end while
Which simplifies to: banned clauses.push(banned clause)
end if
(¬x ij ∨¬x km∨X ijkm∨X kmij) (11) end for
return banned clauses
Finally we add all known literals of X . The cases
ijkm
where we know X are
ijkm
• Iff β i,j cannot be scheduled after β k,m (i.e. l i,j <
s k,m + d k,m ∧ s i,j + d i,j > s k,m), then we add the B. Comparing Discretization vs Continuous representation
literal ¬X .
ijkm
Note that this set of constraints only provides us with a
An alternative to the formulation described in equations
necessary condition. They are not sufficient to prove that
(7)-(9) is to discretize each order and check for satisfiability
an assignment is valid. One still needs to traverse the order
using the conditions described in (3). The first thing that
determined by the SAT solver and find if the order is valid.
merits discussion is the order of growth of clauses. In the
In particular our SAT encoding does not take duration into
case of discretization, we find that the number of literals is
account outside of the indefinite case. Here we can use
proportional to the interval of each alternative (t) multiplied
learning to identify new clauses as defined by Algorithm
by the number of resources to consider (n). The order
3. These new clauses will allow us to constrain the output of growth of the clauses is then O(n2t2). On the other
of the SAT solver to only include assignments that satisfy
hand, the continuous representation is independent of t.
thestarttimeconstraintofeachalternativewhiletakingtheir However the transitivity constraints result in O(n2) literals
durations into account. andO(n3)clauses.Discretizationleadstotheaddedproblem
The key idea in Algorithm 3 is that certain combinations
that assigned reservations may have gaps between them. In
of assignments would violate the latest start time constraints
practice this can be fixed with a post processing pass.
of one or more alternatives. Using the X values, we
ijkm
Fig. 8 shows the start time range has a significant impact
topologically sort the alternatives that would use the same
on the time to solve a fixed-timestep discretization based
resource within a candidate solution, and then we calcu-
solver,whereasthecontinuoussolverisabletofindsolutions
late what the concrete start time values would be for that
severalordersofmagnitudesfasterandisvirtuallyunaffected
combinationofassignments.Thecandidatesolutionbecomes
by the start time range.
invalidifanyoftheassignmentshasbeenpushedoutbeyond
its latest start time constraint. In this case we retrace which Note that for cost optimization Algorithm 1 still applies
assignments were responsible for causing the unacceptable withsomelimitations.Thecostcannotdependontimewhen
delay and mark that combination as illegal. This allows us using the continuous formulation, whereas the discretized
to further limit the search space such that we converge on a time representation can encode different costs into alterna-
valid solution. tives that start at different times.Fig.10. ExampleofphysicaldemousingtwoSmorphirobots.Thegreen
starshowsthecontendedresource.
Fig. 8. Discrete vs continuous expression: 5 requests with 5 alternatives
were given. The discretiation time step was 10 minutes. The algorithms
wereruntillthefirstfeasiblealternativeisfound system, and then proceed to the position when permitted. In
order to ensure that no other robot can move in to the same
spot,theclaimheldbytherobotmustbereleasedbeforeany
VI. VALIDATION
other claimants are permitted to go. The system releases the
We ran several scenarios in Gazebo [22] for 24 hours claimoncetherobotmovesawayfromtheclaimedposition.
in simulated time to check that no deadlocks occur. The The reservation system would then give permission to the
first scenario involved 2 robots periodically making a re- next claim. This process of requesting, claiming, waiting
quest to the same location to simulate “charging”. Fig. 9 for permission, proceeding, and then returning to their start
shows an example of conflicting requests made. We tried points cycled for 30 minutes without any deadlocks.
similar simulations with 3 robots in the same world. The
system would automatically re-order the robots such that no
conflict occurs. We use Open-RMF’s office world from the VII. CONCLUSIONSANDFUTUREWORK
rmf demos package to validate our algorithm’s behaviour.
Wealsohadscenarioswhererandomrequestsweremadefor This paper proposed a novel algorithm for an ad-hoc
robots to go to different waypoints. The algorithms and test reservation system that optimizes the assignment of re-
harnesses were implemented in ROS 2 [23] with Rust [19] quested resources while accounting for the individual costs
and can be found on GitHub2. to the requesters. We race a SAT solver against a Greedy
Additionally, we tested our algorithm for 30 minutes on solver since the performance profile of each method is
two Smorphi robots3 shown in Fig. 10. In this test, the two complementary. Additionally we have shown how to encode
robots repeatedly requested the same spot. The robot would order into the boolean satisfiability problem and shown how
request the resource (in this case the position in the center the constrained assignment problem can be optimized via
of the L bend), claim its assignment from the reservation repeated application of a SAT solver.
Our benchmarks, simulations and real world demonstra-
2https://github.com/open-rmf/rmf_reservation
tion show the feasibility of using the SAT based algorithms
3https://www.wefaarobotics.com
forresourcesharing.Ofparticularimportancearetheheuris-
ticsdevelopedforassignmentandtheencodingdevelopedfor
total ordering.
As future work, we would like to examine how the costs
of assignments produced by the algorithm in Section V can
depend on time or some other arbitrary function or are
we forced to use discretization to account for the cost of
delaying an assignment. We also only look at discretization
at fixed time steps, however we may be able to minimize
computation time if were smart about the way we sampled
possibleassignments.Otherinterestingideasincludeextend-
ing the CNF formulations here to more complex planning
schemes where one reservation might depend on which of
thepreviousreservationswasawarded.Finallyarethereways
Fig.9. Exampleofsimulatedworld.Thearrowsshowrequestedtrajectory
inanexamplescenario.Thereservationsystemwouldre-ordertherequests ofautomaticallydiscoveringtheoremsthatcanrapidlyguide
suchthatnotworobotswouldconflictwitheachotherforuseofthepantry. optimizations.REFERENCES [12] I.I.Cplex,“V12.1:User’smanualforcplex,”InternationalBusiness
MachinesCorporation,vol.46,no.53,p.157,2009.
[1] M. Dharmadhikari, H. Nguyen, F. Mascarich, N. Khedekar, and [13] CPAIOR,“Cpaior2020masterclass:Constraintprogramming,”Sept.
K.Alexis,“Autonomouscaveexplorationusingaerialrobots,”in2021 2020.[Online].Available:https://youtu.be/lmy1ddn4cyw
International Conference on Unmanned Aircraft Systems (ICUAS), [14] T. Balyo, M. Heule, M. Iser, M. Ja¨rvisalo, and M. Suda, “Proceed-
2021,pp.942–949. ings of sat competition 2023: Solver, benchmark and proof checker
[2] G.Sharon,R.Stern,A.Felner,andN.R.Sturtevant,“Conflict-based descriptions,”2023.
searchforoptimalmulti-agentpathfinding,”ArtificialIntelligence,vol. [15] J. Marques-Silva and K. Sakallah, “Grasp: a search algorithm for
219,pp.40–66,2015.[Online].Available:https://www.sciencedirect. propositionalsatisfiability,”IEEETransactionsonComputers,vol.48,
com/science/article/pii/S0004370214001386 no.5,pp.506–521,1999.
[3] J.Kottinger,S.Almagor,andM.Lahijanian,“Conflict-basedsearchfor [16] L. Zhang, C. F. Madigan, M. H. Moskewicz, and S. Malik, “Effi-
multi-robot motion planning with kinodynamic constraints,” in 2022 cient conflict driven learning in a boolean satisfiability solver,” in
IEEE/RSJInternationalConferenceonIntelligentRobotsandSystems IEEE/ACM International Conference on Computer Aided Design.
(IROS). IEEE,2022,pp.13494–13499. ICCAD 2001. IEEE/ACM Digest of Technical Papers (Cat. No.
[4] B.GerkeyandM.Mataric,“Sold!:auctionmethodsformultirobotco- 01CH37281). IEEE,2001,pp.279–285.
ordination,”IEEETransactionsonRoboticsandAutomation,vol.18, [17] F.ImesonandS.L.Smith,“Multi-robottaskplanningandsequencing
no.5,pp.758–768,2002. using the sat-tsp language,” in 2015 IEEE International Conference
[5] “Open-rmf,”https://github.com/open-rmf/rmf. onRoboticsandAutomation(ICRA),2015,pp.5397–5402.
[6] R.Stern,N.Sturtevant,A.Felner,S.Koenig,H.Ma,T.Walker,J.Li, [18] F. Heras, J. Larrosa, and A. Oliveras, “Minimaxsat: An efficient
D. Atzmon, L. Cohen, T. Kumar, et al., “Multi-agent pathfinding: weightedmax-satsolver,”JournalofArtificialIntelligenceResearch,
Definitions,variants,andbenchmarks,”inProceedingsoftheInterna- vol.31,pp.1–32,2008.
tionalSymposiumonCombinatorialSearch,vol.10,no.1,2019,pp. [19] N. D. Matsakis and F. S. Klock II, “The rust language,” in ACM
151–158. SIGAdaAdaLetters,vol.34,no.3. ACM,2014,pp.103–104.
[7] C. Nam and D. A. Shell, “Assignment algorithms for modeling [20] “Varisat,”https://github.com/jix/varisat.
resourcecontentioninmultirobottaskallocation,”IEEETransactions [21] S. Epp, AISE DISCRETE MATHEMATICS WITH APPLICATIONS.
onAutomationScienceandEngineering,vol.12,no.3,pp.889–900, CengageLearning,2011.
2015. [22] N.KoenigandA.Howard,“Designanduseparadigmsforgazebo,an
[8] S. Yu, C. Fu, A. K. Gostar, and M. Hu, “A review on map-merging open-source multi-robot simulator,” in 2004 IEEE/RSJ International
methods for typical map types in multiple-ground-robot slam solu- Conference on Intelligent Robots and Systems (IROS) (IEEE Cat.
tions,”Sensors,vol.20,no.23,p.6988,2020. No.04CH37566),vol.3,2004,pp.2149–2154vol.3.
[9] J.Munkres,“Algorithmsfortheassignmentandtransportationprob- [23] S. Macenski, T. Foote, B. Gerkey, C. Lalancette, and W. Woodall,
lems,”Journalofthesocietyforindustrialandappliedmathematics, “Robot operating system 2: Design, architecture, and uses in
vol.5,no.1,pp.32–38,1957. the wild,” Science Robotics, vol. 7, no. 66, p. eabm6074,
[10] W. Cook, In Pursuit of the Traveling Salesman: Mathematics at the 2022. [Online]. Available: https://www.science.org/doi/abs/10.1126/
Limits of Computation. Princeton University Press, 2014. [Online]. scirobotics.abm6074
Available:https://books.google.com.sg/books?id=UmuYDwAAQBAJ
[11] Gurobi Optimization, LLC, “Gurobi Optimizer Reference Manual,”
2023.[Online].Available:https://www.gurobi.com