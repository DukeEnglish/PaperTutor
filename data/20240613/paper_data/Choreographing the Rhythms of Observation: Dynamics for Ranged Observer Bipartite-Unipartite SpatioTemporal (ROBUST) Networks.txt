Choreographing the Rhythms of Observation:
Dynamics for Ranged Observer Bipartite-Unipartite SpatioTemporal (ROBUST) Networks
A Dissertation
Submitted to the Graduate Faculty of
the University of New Orleans
in partial fulfillment of the
requirements for the degree of
Doctor of Philosophy
in
Engineering and Applied Science
by
(Ted) Edward Holmberg
B.A. University of New Orleans, 2007
M.Sc. University of New Orleans, 2014
May, 2024
4202
nuJ
11
]AM.sc[
1v37470.6042:viXraContents
Contents ii
List of Figures xxi
List of Tables xxix
Abstract xxxiii
1 Introduction 1
1.1 Background . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1
1.2 Problem Statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
1.3 Objectives of the Study . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
1.4 Significance of the Research . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
1.5 Research Questions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
1.6 Research Hypotheses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
1.7 Dissertation Structure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
1.8 Scope of the Study . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
2 Literature Review 12
2.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
2.1.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
2.1.2 Case Studies and Applications . . . . . . . . . . . . . . . . . . . . . . 12
2.2 Frequency Clustering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
2.2.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
ii2.2.2 Methodology . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
2.2.3 Application in Sensor Placement . . . . . . . . . . . . . . . . . . . . 14
2.2.4 Advantages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
2.2.5 Limitations and Concerns . . . . . . . . . . . . . . . . . . . . . . . . 15
2.2.6 Contextual Comparison . . . . . . . . . . . . . . . . . . . . . . . . . 15
2.3 K-means Clustering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16
2.3.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16
2.3.2 Methodology . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
2.3.3 Spatiotemporal Adaptations . . . . . . . . . . . . . . . . . . . . . . . 17
2.3.4 Application in Sensor Placement . . . . . . . . . . . . . . . . . . . . 17
2.3.5 Advantages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
2.3.6 Limitations and Concerns . . . . . . . . . . . . . . . . . . . . . . . . 18
2.3.7 Contextual Comparison . . . . . . . . . . . . . . . . . . . . . . . . . 19
2.4 DBSCAN Clustering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
2.4.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
2.4.2 Methodology . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
2.4.3 Spatiotemporal Adaptations . . . . . . . . . . . . . . . . . . . . . . . 21
2.4.4 Application in Sensor Placement . . . . . . . . . . . . . . . . . . . . 22
2.4.5 Advantages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
2.4.6 Limitations and Concerns . . . . . . . . . . . . . . . . . . . . . . . . 23
2.4.7 Contextual Comparison . . . . . . . . . . . . . . . . . . . . . . . . . 23
2.5 Greedy Algorithm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
2.5.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
2.5.2 Methodology . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25
2.5.3 Applications in Sensor Placement . . . . . . . . . . . . . . . . . . . . 25
2.5.4 Advantages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27
2.5.5 Limitations and Concerns . . . . . . . . . . . . . . . . . . . . . . . . 27
iii2.5.6 Contextual Comparison . . . . . . . . . . . . . . . . . . . . . . . . . 28
2.6 Genetic Algorithm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
2.6.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
2.6.2 Methodology . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30
2.6.3 Applications in Sensor Placement . . . . . . . . . . . . . . . . . . . . 32
2.6.4 Advantages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34
2.6.5 Limitations and Concerns . . . . . . . . . . . . . . . . . . . . . . . . 34
2.6.6 Contextual Comparison . . . . . . . . . . . . . . . . . . . . . . . . . 35
2.7 Integer Linear Programming (ILP) . . . . . . . . . . . . . . . . . . . . . . . 35
2.7.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
2.7.2 Methodology . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37
2.7.3 Applications in Sensor Placement . . . . . . . . . . . . . . . . . . . . 38
2.7.4 Advantages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39
2.7.5 Limitations and Concerns . . . . . . . . . . . . . . . . . . . . . . . . 39
2.7.6 Contextual Comparison . . . . . . . . . . . . . . . . . . . . . . . . . 40
2.8 Mixed Integer Linear Programming (MILP) . . . . . . . . . . . . . . . . . . 40
2.8.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40
2.8.2 Methodology . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42
2.8.3 Applications in Sensor Placement . . . . . . . . . . . . . . . . . . . . 43
2.8.4 Advantages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44
2.8.5 Limitations and Concerns . . . . . . . . . . . . . . . . . . . . . . . . 44
2.8.6 Contextual Comparison . . . . . . . . . . . . . . . . . . . . . . . . . 45
2.9 Graph Signal Sampling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45
2.9.1 Graph Sampling Theory . . . . . . . . . . . . . . . . . . . . . . . . . 45
2.9.2 Sampling Strategy . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46
2.9.3 Online Dictionary Learning . . . . . . . . . . . . . . . . . . . . . . . 47
2.9.4 Dynamic Sensor Placement . . . . . . . . . . . . . . . . . . . . . . . 48
iv3 ROBUST Network Theory 49
3.1 Overview. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49
3.1.1 Approach . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49
3.1.2 Components . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50
3.1.3 Analysis Techniques . . . . . . . . . . . . . . . . . . . . . . . . . . . 50
3.1.4 Objective . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50
3.2 Definition of the ROBUST Network . . . . . . . . . . . . . . . . . . . . . . . 51
3.2.1 Extending Spatiotemporal Networks to ROBUST Networks . . . . . . 52
3.3 Observer Nodes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54
3.3.1 Observer Role in ROBUST . . . . . . . . . . . . . . . . . . . . . . . . 54
3.3.2 Observer View and Myopia . . . . . . . . . . . . . . . . . . . . . . . 55
3.3.3 Observer Movement . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60
3.3.4 Multi-Observer Coordination . . . . . . . . . . . . . . . . . . . . . . 62
3.3.5 Strategic Deployment . . . . . . . . . . . . . . . . . . . . . . . . . . . 63
3.4 Observable Nodes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65
3.4.1 Observable Role in ROBUST . . . . . . . . . . . . . . . . . . . . . . 65
3.4.2 Behavior Variability of Observable Nodes . . . . . . . . . . . . . . . . 66
3.4.3 Movement and Dynamics of Observable Nodes . . . . . . . . . . . . . 67
3.4.4 Temporal Existence of Observable Nodes . . . . . . . . . . . . . . . . 68
3.4.5 Mobility of Observable Nodes . . . . . . . . . . . . . . . . . . . . . . 70
3.4.6 Interest Levels of Observable Nodes . . . . . . . . . . . . . . . . . . . 71
3.4.7 Observational Myopia in Observable Nodes . . . . . . . . . . . . . . . 73
3.4.8 Observation Status of Observable Nodes . . . . . . . . . . . . . . . . 74
3.4.9 Inter-node Communication Dynamics among Observable Nodes . . . 76
3.4.10 Adaptability to Environmental Changes in Observable Nodes . . . . . 77
3.5 Ranged Edges and Spatial-Temporal Constraints in ROBUST Network . . . 79
3.5.1 Introduction to Ranged Edges . . . . . . . . . . . . . . . . . . . . . . 79
v3.5.2 Proximal Recurrence: A Spatial-Temporal Clustering Technique . . . 80
3.5.3 Influence of Observer Myopia . . . . . . . . . . . . . . . . . . . . . . 80
3.5.4 Strategic Importance of Ranged Edges . . . . . . . . . . . . . . . . . 80
3.6 Bipartite Analysis in ROBUST Network . . . . . . . . . . . . . . . . . . . . 81
3.6.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81
3.6.2 Objectives of Bipartite Analysis . . . . . . . . . . . . . . . . . . . . . 81
3.6.3 Methodology . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81
3.6.4 Rationale . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82
3.7 Unipartite Analysis in ROBUST Network . . . . . . . . . . . . . . . . . . . . 82
3.7.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82
3.7.2 Objectives . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82
3.7.3 Methodology . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83
3.7.4 Rationale . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83
3.8 Novelty of ROBUST Network . . . . . . . . . . . . . . . . . . . . . . . . . . 84
3.8.1 Innovative Approach to Network Analysis . . . . . . . . . . . . . . . 84
3.8.2 Alignment with Research Hypotheses . . . . . . . . . . . . . . . . . . 84
3.8.3 Strategic Implications . . . . . . . . . . . . . . . . . . . . . . . . . . 84
3.8.4 Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85
4 ROBUST Measures and Analysis 86
4.1 Spatial Metrics for Node Analysis . . . . . . . . . . . . . . . . . . . . . . . . 86
4.1.1 Myopic Degree: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86
4.1.2 Spatial Closeness Centrality: . . . . . . . . . . . . . . . . . . . . . . 87
4.2 Edge-Based Spatial Metrics . . . . . . . . . . . . . . . . . . . . . . . . . . . 88
4.2.1 Spatial Edge Density . . . . . . . . . . . . . . . . . . . . . . . . . . . 88
4.2.2 Edge Length Proportion . . . . . . . . . . . . . . . . . . . . . . . . . 90
4.3 Spatial Properties and Network Structures . . . . . . . . . . . . . . . . . . . 91
4.3.1 Spatial Clustering Coefficient . . . . . . . . . . . . . . . . . . . . . . 91
vi4.3.2 Resilience in Spatial Networks . . . . . . . . . . . . . . . . . . . . . 93
5 ROBUST and Static Observers 96
5.1 Myopic Filtering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98
5.1.1 Vectorized Approach . . . . . . . . . . . . . . . . . . . . . . . . . . . 98
5.1.2 Visualization of Myopic Filtering . . . . . . . . . . . . . . . . . . . . 99
5.2 Link Generation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100
5.2.1 Unweighted Links . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100
5.2.2 Weighted Links . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100
5.2.3 Visualization of Link Generation . . . . . . . . . . . . . . . . . . . . 101
5.3 Centrality Ranking . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
5.3.1 Unweighted Centrality . . . . . . . . . . . . . . . . . . . . . . . . . . 102
5.3.2 Weighted Centrality . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
5.3.3 Considerations for Centrality . . . . . . . . . . . . . . . . . . . . . . 103
5.3.4 Visualization of Centrality Ranking . . . . . . . . . . . . . . . . . . . 103
5.4 Event Classifier . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105
5.4.1 Binary Classification . . . . . . . . . . . . . . . . . . . . . . . . . . . 105
5.4.2 Weighted Classification . . . . . . . . . . . . . . . . . . . . . . . . . . 105
5.4.3 Visualization of Event Classification . . . . . . . . . . . . . . . . . . . 106
5.5 Coverage Analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106
5.5.1 Overview of Coverage Metrics . . . . . . . . . . . . . . . . . . . . . . 107
5.5.2 Strategic Implications . . . . . . . . . . . . . . . . . . . . . . . . . . 108
5.5.3 Visualization of Coverage Metrics . . . . . . . . . . . . . . . . . . . . 109
5.5.4 Unipartite Dynamics: Parameters and Outputs . . . . . . . . . . . . 110
5.5.5 Visualization of Initial Unobserved Events . . . . . . . . . . . . . . . 112
5.6 Point Density Heatmap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114
5.6.1 Introduction to Heatmap Utilization . . . . . . . . . . . . . . . . . . 114
5.6.2 Constructing the Point Density Matrix . . . . . . . . . . . . . . . . . 114
vii5.6.3 Methodological Approach . . . . . . . . . . . . . . . . . . . . . . . . 114
5.6.4 Visualization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115
5.7 Kernel Convolution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117
5.7.1 Theoretical Foundation of Kernel Convolution . . . . . . . . . . . . . 117
5.7.2 Operationalizing Convolution in Spatial Analysis . . . . . . . . . . . 117
5.7.3 Convolution Process in Detail . . . . . . . . . . . . . . . . . . . . . . 117
5.7.4 Scalability and Computational Efficiency . . . . . . . . . . . . . . . . 118
5.7.5 Visualization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 118
5.8 Centroid Identification and Iterative Optimization . . . . . . . . . . . . . . . 120
5.8.1 Objective and Methodology . . . . . . . . . . . . . . . . . . . . . . . 120
5.8.2 Iterative Centroid Selection Process . . . . . . . . . . . . . . . . . . . 120
5.8.3 Resultant Coverage Optimization . . . . . . . . . . . . . . . . . . . . 120
5.8.4 Visualization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121
6 ROBUST and Mobile Observers 122
6.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122
6.2 Phase 1: PREP Mapper . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123
6.2.1 Node Generation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 124
6.2.2 Link Generation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129
6.3 Phase 2: TED Predictor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133
6.3.1 Perfect Knowledge vs Imperfect Knowledge . . . . . . . . . . . . . . 133
6.4 Phase 3: WAITR Planner (Perfect Knowledge) . . . . . . . . . . . . . . . . 138
6.4.1 Weight Initialization . . . . . . . . . . . . . . . . . . . . . . . . . . . 138
6.4.2 Generate Piecewise Pathlets . . . . . . . . . . . . . . . . . . . . . . . 139
6.4.3 Temporal Path Generation . . . . . . . . . . . . . . . . . . . . . . . . 140
6.4.4 Path Selection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141
6.5 Phase 3: WAITR Planner (Imperfect Knowledge) . . . . . . . . . . . . . . . 145
6.5.1 Conceptualizing Reward in Observer Node Dynamics . . . . . . . . . 145
viii6.5.2 Conceptualizing Regret in Observer Node Dynamics . . . . . . . . . . 145
6.5.3 Toward Spatiotemporal Regret Assessment . . . . . . . . . . . . . . . 145
6.5.4 Risk Aversion in Observer Node Strategy . . . . . . . . . . . . . . . . 146
6.5.5 Cost-Benefit Analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . 146
6.5.6 Imperfect Knowledge Visualization . . . . . . . . . . . . . . . . . . . 146
6.6 Scalability of the ROBUST Network . . . . . . . . . . . . . . . . . . . . . . 153
6.6.1 Introduction to Scalability in the ROBUST Network . . . . . . . . . 153
6.6.2 Matrix and Vector-Based Operations . . . . . . . . . . . . . . . . . . 153
6.6.3 Dynamic Adaptation to Network Size . . . . . . . . . . . . . . . . . . 154
6.6.4 Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 155
6.7 ROBUST and Continuous Sampling . . . . . . . . . . . . . . . . . . . . . . . 155
6.7.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 155
6.7.2 Phase 3: WAITR Planner (Perfect Knowledge) . . . . . . . . . . . . 155
6.7.3 Weight Initialization . . . . . . . . . . . . . . . . . . . . . . . . . . . 156
6.7.4 Path Selections Considering Path Segment Rewards . . . . . . . . . . 156
7 Case Study I: Oceanographic Monitoring 157
7.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 157
7.2 Background . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158
7.2.1 GCOOS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158
7.2.2 HYCOM . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158
7.3 Objective . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159
7.4 Motivation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159
7.5 Approach . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159
7.6 Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 160
7.6.1 Temporal Graph Representation . . . . . . . . . . . . . . . . . . . . . 160
7.6.2 ROBUST Network Model . . . . . . . . . . . . . . . . . . . . . . . . 161
7.7 Analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165
ix7.7.1 Coverage measure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 166
7.7.2 Coverage Robustness measure . . . . . . . . . . . . . . . . . . . . . . 167
7.8 Optimizing Placements of New Sensor Nodes . . . . . . . . . . . . . . . . . . 168
7.8.1 Monte Carlo Simulation . . . . . . . . . . . . . . . . . . . . . . . . . 169
7.9 Case Study Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169
7.9.1 Initial Sensors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169
7.9.2 First New Sensor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 170
7.9.3 Second New Sensor . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171
7.10 Discussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173
8 Case Study II: Urban Safety 174
8.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174
8.2 Background . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175
8.2.1 Dataset: Crime Dynamics and Surveillance in NOLA . . . . . . . . . 175
8.2.2 Mathematical Background . . . . . . . . . . . . . . . . . . . . . . . . 175
8.3 Related Work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 177
8.3.1 K-means Clustering . . . . . . . . . . . . . . . . . . . . . . . . . . . . 177
8.3.2 DBSCAN . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178
8.3.3 Frequency Clustering . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
8.4 Approach . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
8.4.1 Problem Definition . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
8.4.2 Objectives . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
8.4.3 Rationale . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180
8.4.4 Challenges . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181
8.5 Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181
8.6 Datasets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190
8.6.1 Observer Node Set . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190
8.6.2 Observable Node Set . . . . . . . . . . . . . . . . . . . . . . . . . . . 191
x8.7 Experimental Setup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194
8.8 Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194
8.8.1 Initial ROBUST network . . . . . . . . . . . . . . . . . . . . . . . . . 194
8.8.2 Proposed Method Results: Proximal Recurrence . . . . . . . . . . . . 198
8.8.3 Comparison with Existing Methods . . . . . . . . . . . . . . . . . . . 198
8.9 Case Study Discussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201
8.9.1 Evaluating Effectiveness . . . . . . . . . . . . . . . . . . . . . . . . . 201
8.9.2 Comparative Analysis of Clustering Approaches . . . . . . . . . . . . 204
8.9.3 Inadequacies of Mode-Based Analysis . . . . . . . . . . . . . . . . . . 208
8.9.4 Advantages of Proximal Recurrence Approach . . . . . . . . . . . . . 208
8.9.5 Comparison with Histogram Approach . . . . . . . . . . . . . . . . . 209
8.10 Case Study Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210
8.10.1 Key Findings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210
8.10.2 Implications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 211
8.10.3 Future Directions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 211
8.10.4 Closing Remarks for Case Study . . . . . . . . . . . . . . . . . . . . . 211
9 Case Study III: Multiagent Planning 212
9.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 212
9.2 Background . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213
9.2.1 HYCOM . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213
9.2.2 Underwater Autonomous Gliders . . . . . . . . . . . . . . . . . . . . 213
9.3 Related Work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 214
9.3.1 Proximal Recurrence Clustering . . . . . . . . . . . . . . . . . . . . . 214
9.3.2 STROOB Networks . . . . . . . . . . . . . . . . . . . . . . . . . . . . 214
9.3.3 Pathing Strategies . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215
9.3.4 Temporal Greedy Strategy with Look-Ahead . . . . . . . . . . . . . . 215
9.4 Approach . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215
xi9.5 Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216
9.5.1 Weighted Proximal Recurrence Clustering . . . . . . . . . . . . . . . 216
9.5.2 ROBUST Network Construction . . . . . . . . . . . . . . . . . . . . . 217
9.5.3 TED Predictor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218
9.5.4 WAITR Planner . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219
9.6 Analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 222
9.6.1 Event Coverage Ratio (ECR) . . . . . . . . . . . . . . . . . . . . . . 222
9.7 Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 222
9.8 Discussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 223
9.8.1 Coverage of WPR Clustering Techniques . . . . . . . . . . . . . . . . 223
9.8.2 Efficiency of Multiagent Path Planning . . . . . . . . . . . . . . . . . 223
9.9 Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 224
9.9.1 Future Work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 224
10 Benchmarking Approach 225
10.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225
10.2 Perfect Knowledge . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225
10.2.1 Rationale . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 226
10.2.2 Limitations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 226
10.2.3 Future Work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 226
10.3 Static Sensor Placement: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 226
10.3.1 A Clustering Challenge . . . . . . . . . . . . . . . . . . . . . . . . . . 226
10.4 Mobile Sensor Placement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 227
10.4.1 A Planning Challenge . . . . . . . . . . . . . . . . . . . . . . . . . . 227
10.5 Benchmarking Objectives . . . . . . . . . . . . . . . . . . . . . . . . . . . . 228
10.5.1 Metrics for Evaluation: . . . . . . . . . . . . . . . . . . . . . . . . . . 228
10.6 Synthetic Dynamic Heatmap . . . . . . . . . . . . . . . . . . . . . . . . . . . 229
10.6.1 Dimensionality . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 229
xii10.6.2 Points of Interest . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 229
10.6.3 Evolutionary Behavior . . . . . . . . . . . . . . . . . . . . . . . . . . 230
10.6.4 Additional Considerations: . . . . . . . . . . . . . . . . . . . . . . . . 230
10.6.5 Visualization: Initial Heatmap . . . . . . . . . . . . . . . . . . . . . 230
11 Benchmarking Results 236
11.1 Static Placements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 236
11.1.1 Frequency Clustering . . . . . . . . . . . . . . . . . . . . . . . . . . 237
11.1.2 K-means Clustering . . . . . . . . . . . . . . . . . . . . . . . . . . . 243
11.1.3 Improved K-means Clustering . . . . . . . . . . . . . . . . . . . . . . 249
11.1.4 DBSCAN Clustering . . . . . . . . . . . . . . . . . . . . . . . . . . . 255
11.1.5 Improved DBSCAN Clustering . . . . . . . . . . . . . . . . . . . . . 261
11.1.6 Mixed Integer Linear Programming (MILP) . . . . . . . . . . . . . . 267
11.1.7 ROBUST with PREP Clustering . . . . . . . . . . . . . . . . . . . . 273
11.2 Mobile Placements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 279
11.2.1 Greedy Planning . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 279
11.2.2 Graph Signal Sampling Planner . . . . . . . . . . . . . . . . . . . . . 286
11.2.3 ROBUST with WAITR Planner . . . . . . . . . . . . . . . . . . . . 292
12 Benchmarking Analysis 298
12.1 Static Placements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 298
12.1.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 298
12.1.2 Summary of Table 12.1 . . . . . . . . . . . . . . . . . . . . . . . . . 299
12.1.3 Comparative Analysis: . . . . . . . . . . . . . . . . . . . . . . . . . . 299
12.2 Mobile Placements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 300
12.2.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 300
12.2.2 Summary of Table 12.2 . . . . . . . . . . . . . . . . . . . . . . . . . 300
12.2.3 Comparative Analysis: . . . . . . . . . . . . . . . . . . . . . . . . . . 301
xiii12.2.4 Challenges of Imperfect Knowledge . . . . . . . . . . . . . . . . . . . 301
12.2.5 WAITR’s Role in Benchmarking . . . . . . . . . . . . . . . . . . . . . 302
13 Conclusions and Future Work 303
13.1 Summary of Findings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 303
13.1.1 Novel Graph-Based Measures . . . . . . . . . . . . . . . . . . . . . . 303
13.1.2 Demonstrates ROBUST Under Perfect Knowledge . . . . . . . . . . . 303
13.1.3 Versatility Across Domains . . . . . . . . . . . . . . . . . . . . . . . . 304
13.2 Contributions to the Field . . . . . . . . . . . . . . . . . . . . . . . . . . . . 304
13.2.1 Extending Spatiotemporal Measures with ROBUST . . . . . . . . . . 304
13.2.2 Extending Spatiotemporal Dynamics with ROBUST . . . . . . . . . 304
13.3 Directions for Future Research . . . . . . . . . . . . . . . . . . . . . . . . . . 305
13.3.1 Incorporating Imperfect Knowledge . . . . . . . . . . . . . . . . . . . 305
13.3.2 Refinement of Temporal Pathing Methodologies . . . . . . . . . . . . 305
13.3.3 Expanding the Scope of Case Studies . . . . . . . . . . . . . . . . . . 305
13.3.4 Concluding Remarks . . . . . . . . . . . . . . . . . . . . . . . . . . . 305
References 307
Appendices 326
A Theoretical Foundations 326
A.1 Transition to Graph-Based Approaches . . . . . . . . . . . . . . . . . . . . . 326
A.2 Static Networks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 326
A.2.1 Network Basics in Graph Theory . . . . . . . . . . . . . . . . . . . . 326
A.2.2 Types of Networks . . . . . . . . . . . . . . . . . . . . . . . . . . . . 328
A.2.3 Network Topology and Structure . . . . . . . . . . . . . . . . . . . . 330
A.2.4 Path Analysis in Networks . . . . . . . . . . . . . . . . . . . . . . . . 332
A.2.5 Graph Theory Algorithms . . . . . . . . . . . . . . . . . . . . . . . . 335
xivA.2.6 Graph Representations . . . . . . . . . . . . . . . . . . . . . . . . . . 337
A.2.7 Network Resilience and Robustness . . . . . . . . . . . . . . . . . . . 339
A.2.8 Unipartite vs. Bipartite Networks . . . . . . . . . . . . . . . . . . . . 342
A.2.9 Edge-based Measures . . . . . . . . . . . . . . . . . . . . . . . . . . . 343
A.3 Static Spatial Networks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 347
A.3.1 Definition of Spatial Networks . . . . . . . . . . . . . . . . . . . . . . 348
A.3.2 Spatial Properties and Nodes . . . . . . . . . . . . . . . . . . . . . . 349
A.3.3 Spatial Properties and Edges . . . . . . . . . . . . . . . . . . . . . . 351
A.3.4 Spatial Properties and Network Structures . . . . . . . . . . . . . . . 355
A.3.5 Spatial Properties and Isomorphism . . . . . . . . . . . . . . . . . . . 358
A.4 Dynamic Networks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 359
A.4.1 Static vs. Dynamic Networks . . . . . . . . . . . . . . . . . . . . . . 359
A.4.2 Variability in Dynamic Networks: . . . . . . . . . . . . . . . . . . . . 360
A.4.3 Transition from Static to Dynamic Models . . . . . . . . . . . . . . . 360
A.4.4 Example Dynamic Network: Adaptive Pathing Algorithm . . . . . . . 360
A.5 Temporal Networks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 362
A.5.1 Temporal Networks are Dynamic . . . . . . . . . . . . . . . . . . . . 362
A.5.2 Importance of Temporal Dimension . . . . . . . . . . . . . . . . . . . 363
A.5.3 Mathematical Representations of Temporal Networks . . . . . . . . . 364
A.5.4 General Dynamics in Temporal Networks . . . . . . . . . . . . . . . . 366
A.5.5 Analytical Challenges in Temporal Networks . . . . . . . . . . . . . . 370
A.5.6 Key Concepts in Temporal Network Analysis . . . . . . . . . . . . . . 373
A.5.7 Detecting Edge Patterns in Temporal Networks . . . . . . . . . . . . 375
A.5.8 Detecting Node Patterns in Temporal Networks . . . . . . . . . . . . 376
A.5.9 Detecting Structural Patterns in Temporal Networks . . . . . . . . . 378
A.6 Spatiotemporal Networks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 379
A.6.1 Introduction to Spatiotemporal Networks . . . . . . . . . . . . . . . . 379
xvA.6.2 Mathematical Representation of Spatiotemporal Networks . . . . . . 380
A.6.3 Dynamics of Spatiotemporal Networks . . . . . . . . . . . . . . . . . 382
A.6.4 Computational and Analytical Complexity . . . . . . . . . . . . . . . 383
A.6.5 Conclusion and Transition to ROBUST Networks . . . . . . . . . . . 384
B ROBUST Dynamics 386
B.1 Observer-Observable Dynamics . . . . . . . . . . . . . . . . . . . . . . . . . 386
B.2 Identifying Subcategories by Behavior . . . . . . . . . . . . . . . . . . . . . . 388
B.3 Unipartite Relationships . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 388
B.3.1 Selfish Dynamics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 389
B.3.2 Collaborative Dynamics . . . . . . . . . . . . . . . . . . . . . . . . . 390
B.4 Bipartite Relationships . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 391
B.4.1 Cooperative Dynamics . . . . . . . . . . . . . . . . . . . . . . . . . . 391
B.4.2 Competitive Dynamics . . . . . . . . . . . . . . . . . . . . . . . . . . 392
B.4.3 Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 393
C Collaborative Bipartite Dynamics 394
C.1 Server-Client Dynamics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 394
C.1.1 Examples of Server-Client Relationships . . . . . . . . . . . . . . . . 395
C.1.2 Node Interactions: Request-Response Cycle . . . . . . . . . . . . . . 396
C.1.3 Link Generation and Constraints . . . . . . . . . . . . . . . . . . . . 397
C.1.4 Implications for Network Optimization and Analysis . . . . . . . . . 397
C.1.5 Network Optimization . . . . . . . . . . . . . . . . . . . . . . . . . . 398
C.1.6 Spatiotemporal Considerations . . . . . . . . . . . . . . . . . . . . . . 398
C.1.7 Efficiency Metrics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 399
C.1.8 Server Placement Strategies . . . . . . . . . . . . . . . . . . . . . . . 399
C.2 Waiter-Client Dynamics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 400
C.2.1 Examples of Waiter-Client Relationships . . . . . . . . . . . . . . . . 400
xviC.2.2 Node Interactions: Prompt-Response Cycle . . . . . . . . . . . . . . . 401
C.2.3 Link Generation and Constraints . . . . . . . . . . . . . . . . . . . . 401
C.2.4 Network Optimization . . . . . . . . . . . . . . . . . . . . . . . . . . 403
C.2.5 Spatiotemporal Considerations . . . . . . . . . . . . . . . . . . . . . . 403
C.2.6 Efficiency Metrics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 404
C.2.7 Waiter Placement Strategies . . . . . . . . . . . . . . . . . . . . . . . 404
C.3 Manager-Worker Dynamics . . . . . . . . . . . . . . . . . . . . . . . . . . . . 405
C.3.1 Examples of Manager-Worker Dynamics . . . . . . . . . . . . . . . . 405
C.3.2 Node Interactions: Task Allocation and Execution Cycle . . . . . . . 406
C.3.3 Optimization Strategies for Manager-Worker Interactions . . . . . . . 406
C.3.4 Network Optimization . . . . . . . . . . . . . . . . . . . . . . . . . . 407
C.3.5 Spatiotemporal Considerations in Task Allocation . . . . . . . . . . . 407
C.3.6 Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 407
C.4 Guard-Citizen Relationship . . . . . . . . . . . . . . . . . . . . . . . . . . . 408
C.4.1 Operational Framework . . . . . . . . . . . . . . . . . . . . . . . . . 408
C.4.2 Node Interactions: Surveillance and Intervention Cycle . . . . . . . . 409
C.4.3 Strategies for Maximizing Freedom and Safety . . . . . . . . . . . . . 409
C.4.4 Spatiotemporal Considerations . . . . . . . . . . . . . . . . . . . . . . 409
C.4.5 Efficiency Metrics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 409
D Competitive Bipartite Dynamics 411
D.1 Defender-Invader Dynamics . . . . . . . . . . . . . . . . . . . . . . . . . . . 411
D.1.1 Operational Framework . . . . . . . . . . . . . . . . . . . . . . . . . 412
D.1.2 Node Interactions: Prediction and Interception Cycle . . . . . . . . . 413
D.1.3 Strategic Defense Optimization . . . . . . . . . . . . . . . . . . . . . 413
D.1.4 Spatiotemporal Considerations . . . . . . . . . . . . . . . . . . . . . . 413
D.1.5 Efficiency Metrics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 413
D.1.6 Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 415
xviiD.2 Predator-Prey Dynamics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 415
D.2.1 Operational Framework . . . . . . . . . . . . . . . . . . . . . . . . . 415
D.2.2 Node Interactions: Search and Evasion Cycle . . . . . . . . . . . . . . 416
D.2.3 Strategic Evasion and Search Optimization . . . . . . . . . . . . . . . 416
D.2.4 Spatiotemporal Considerations . . . . . . . . . . . . . . . . . . . . . . 416
D.2.5 Efficiency Metrics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416
D.3 Hide-Seek Dynamics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 417
D.3.1 Operational Framework . . . . . . . . . . . . . . . . . . . . . . . . . 417
D.3.2 Node Interactions: Surveillance and Evasion Cycle . . . . . . . . . . . 418
D.3.3 Strategic Evasion and Surveillance Optimization . . . . . . . . . . . . 418
D.3.4 Spatiotemporal Considerations . . . . . . . . . . . . . . . . . . . . . . 418
D.3.5 Efficiency Metrics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 418
D.4 Host-Parasite Dynamics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 419
D.4.1 Operational Framework . . . . . . . . . . . . . . . . . . . . . . . . . 419
D.4.2 Node Interactions: Infection and Response Cycle . . . . . . . . . . . 419
D.4.3 Strategies for Infection Control and Host Resilience . . . . . . . . . . 420
D.4.4 Spatiotemporal Considerations . . . . . . . . . . . . . . . . . . . . . . 420
D.4.5 Efficiency Metrics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 421
D.4.6 Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 421
E Potential Cases for ROBUST network 422
E.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 422
E.2 Software Development: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 422
E.3 Environmental Modeling: . . . . . . . . . . . . . . . . . . . . . . . . . . . . 423
E.4 Urban Planning: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 423
E.5 Traffic Flow Optimization: . . . . . . . . . . . . . . . . . . . . . . . . . . . 423
E.6 Disaster Planning: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 424
E.7 Online Platforms: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 424
xviiiE.8 Retail and Consumer Behavior: . . . . . . . . . . . . . . . . . . . . . . . . . 424
E.9 Online Shopping Patterns: . . . . . . . . . . . . . . . . . . . . . . . . . . . . 425
E.10 Biology and Medicine: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 425
E.11 Education: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 426
E.12 Economics and Finance: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 426
E.13 Astronomy: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 427
E.14 Transportation and Logistics: . . . . . . . . . . . . . . . . . . . . . . . . . . 427
E.15 Energy and Infrastructure: . . . . . . . . . . . . . . . . . . . . . . . . . . . 427
F Benchmarking Environment 429
F.1 Study Design . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 429
F.2 Data Collection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 429
F.2.1 Oceanography Data Case Study . . . . . . . . . . . . . . . . . . . . . 430
F.2.2 Crime Data Case Study . . . . . . . . . . . . . . . . . . . . . . . . . 430
F.2.3 Spatiotemporal Insights . . . . . . . . . . . . . . . . . . . . . . . . . 430
F.3 Synthetic Spatiotemporal Data . . . . . . . . . . . . . . . . . . . . . . . . . 431
F.3.1 Rationale for Synthetic Data . . . . . . . . . . . . . . . . . . . . . . . 431
F.3.2 Advantages of Synthetic Spatiotemporal Data . . . . . . . . . . . . . 431
F.3.3 Disadvantages of Synthetic Spatiotemporal Data . . . . . . . . . . . . 432
F.4 Dynamic Heatmaps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 432
F.4.1 Dynamic Heat Map Abstraction . . . . . . . . . . . . . . . . . . . . . 432
F.4.2 Mathematical Formulation of Dynamic Heatmaps . . . . . . . . . . . 433
F.4.3 Dynamic Changes in Heatmaps . . . . . . . . . . . . . . . . . . . . . 434
F.4.4 Applications and Implications . . . . . . . . . . . . . . . . . . . . . . 435
F.5 Dynamic Heatmap Generator . . . . . . . . . . . . . . . . . . . . . . . . . . 436
F.5.1 Motivation and Objectives . . . . . . . . . . . . . . . . . . . . . . . . 436
F.5.2 Tool Overview and Comprehensive Capabilities . . . . . . . . . . . . 437
F.5.3 Interactive Elements and User Engagement . . . . . . . . . . . . . . . 438
xixF.5.4 Application Architecture and Deployment . . . . . . . . . . . . . . . 440
F.5.5 API Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . 442
F.5.6 Algorithmic Deep Dive and Mathematical Formulation . . . . . . . . 445
F.6 Synthetic Spatiotemporal Techniques . . . . . . . . . . . . . . . . . . . . . . 452
F.7 Synthetic Stochastic Dynamics . . . . . . . . . . . . . . . . . . . . . . . . . . 452
F.8 Computational Environment . . . . . . . . . . . . . . . . . . . . . . . . . . . 453
Vita 454
xxList of Figures
2.1 Example: Frequency clustering . . . . . . . . . . . . . . . . . . . . . . . . . 13
2.2 Example: K-means clustering . . . . . . . . . . . . . . . . . . . . . . . . . . 16
2.3 Example: DBSCAN clustering . . . . . . . . . . . . . . . . . . . . . . . . . . 20
2.4 Example: Greedy clustering . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
2.5 Example: Genetic clustering . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
2.6 Example: Integer Linear Programming (ILP) clustering . . . . . . . . . . . . 36
2.7 Example: Mixed Integer Linear Programming (MILP) clustering . . . . . . . 41
3.1 Example Observer-Observable Network . . . . . . . . . . . . . . . . . . . . . 49
4.1 Spatial centrality of a node in a network. . . . . . . . . . . . . . . . . . . . . 87
4.2 Illustration of spatial closeness centrality. . . . . . . . . . . . . . . . . . . . . 88
4.3 Comparison of Network Connectivity . . . . . . . . . . . . . . . . . . . . . . 89
4.4 Illustration of Edge Length Proportion in a Spatial Network . . . . . . . . . 90
4.5 Illustration of Pearson Correlation in Spatial Networks . . . . . . . . . . . . 92
4.6 Spatial Resilience . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94
5.1 Bipartite Dynamics between Observers and Events . . . . . . . . . . . . . . 97
5.2 Flowchart of Analysis using Bipartite Dynamics . . . . . . . . . . . . . . . . 97
5.3 Myopic Filtering using Bipartite Dynamics . . . . . . . . . . . . . . . . . . . 99
5.4 Link Generation using Bipartite Dynamics . . . . . . . . . . . . . . . . . . . 101
5.5 Centrality Ranking using Bipartite Dynamics . . . . . . . . . . . . . . . . . 104
5.6 Event Classifier using Bipartite Dynamics . . . . . . . . . . . . . . . . . . . 107
xxi5.7 Centrality Analysis using Bipartite Dynamics . . . . . . . . . . . . . . . . . 109
5.8 Unipartite Dynamics between Unobserved Events . . . . . . . . . . . . . . . 110
5.9 Unipartite Input Parameters and Outputs . . . . . . . . . . . . . . . . . . . 110
5.10 Flowchart of Analysis using Unipartite Dynamics . . . . . . . . . . . . . . . 111
5.11 Initial set of Aggregated Unobserved Events . . . . . . . . . . . . . . . . . . 113
5.12 Point Density Heatmap using Unipartite Dynamics . . . . . . . . . . . . . . 116
5.13 Kernel Convolution using Unipartite Dynamics . . . . . . . . . . . . . . . . . 119
5.14 Centroid Identification using Unipartite Dynamics . . . . . . . . . . . . . . . 121
6.1 Grid with Heat-mapped Events . . . . . . . . . . . . . . . . . . . . . . . . . 128
6.2 Waypoint Nodes with PREP Mapper . . . . . . . . . . . . . . . . . . . . . . 128
6.3 Waypoint Links with PREP mapper . . . . . . . . . . . . . . . . . . . . . . 132
6.4 Process flow from Waypoint Network to Ranked Active Nodes. . . . . . . . . 133
6.5 TED Predictor results over two timesteps. Top: time 0 showing best nodes
(gold) and active nodes (lime) with perfect knowledge. Bottom: time 1 show-
ing best nodes (gold) and active nodes (lime) with perfect knowledge. . . . . 137
6.6 Flow chart representation of the process from input to best paths selection. . 138
6.7 Sensor placements in WAITR Planner over two frames. Top: time 0. Bottom:
time 1. Yellow stars are sensors with 2-hop movements. Best nodes in gold,
Active nodes in lime, Inactive in gray. . . . . . . . . . . . . . . . . . . . . . . 144
7.1 Computing residuals between time frames . . . . . . . . . . . . . . . . . . . 163
7.2 A snapshot of ROBUST Network at time t . (Global view) . . . . . . . . . . 165
0
7.3 Two temporal snapshots of the ROBUST network at times t and t from
0 2
same region. (Zoom view) . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165
7.4 Sequence of Temporal Snapshots of the ROBUST network with the initial
GCOOS sensor configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . 170
xxii7.5 Sequence of Temporal Snapshots of the ROBUST network with the suggested
position for a new sensor represented as a green star . . . . . . . . . . . . . . 171
7.6 Sequence of Temporal Snapshots of the ROBUST network with the suggested
position for a 2nd sensor represented as a yellow star . . . . . . . . . . . . . 172
8.1 RTCC Cameras. Locations of the RTCC cameras . . . . . . . . . . . . . . . 191
8.2 Orleans Parish Inclusion Zone Polygon . . . . . . . . . . . . . . . . . . . . . 193
8.3 Histogram of effectiveness scores (node degrees) for observer nodes in the
initial ROBUTS network, demonstrating a power-law distribution. The x-
axis represents the degree count, signifying the ability of an observer node to
detect events within a specified radius, while the y-axis shows the count of
nodes for each degree. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195
8.4 HeatmapofobservernodeeffectivenessscoresintheinitialROBUSTnetwork.
Node spatial locations are plotted with color intensity indicating degree cen-
trality and a gradient from blue (low effectiveness) to red (high effectiveness). 196
8.5 Spatial distribution and observational coverage of events in the initial RO-
BUST network. Event locations are color-coded to indicate observational
coverage: deep green for multiple observers, green for a single observer, varied
colors for near-observers, and red for unobserved events. . . . . . . . . . . . 197
8.6 ROBUST network visualization post proximal recurrence integration. New
nodes are represented in blue, directly observed nodes in green, and unob-
served nodes in red, with edges indicating observational relationships. . . . . 198
8.7 Histogram of node degree distribution for the new nodes introduced through
the proximal recurrence strategy. Axes represent degree and node count,
respectively. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199
8.8 Aggregate node degree distribution of the updated ROBUST network, with
original nodes in blue and new nodes superimposed in red. . . . . . . . . . . 199
xxiii8.9 Centroids and associated events determined using DBSCAN clustering on
unwitnessed events within the ROBUST network. Centroids (blue), clustered
nodes(green),andunclusterednodes(red)aredepicted,withedgesconnecting
centroids and respective nodes. . . . . . . . . . . . . . . . . . . . . . . . . . 200
8.10 Node insertions based on DBSCAN clustering, emphasizing new DBSCAN
nodes and filtering out events and nodes not within the centroid’s spatial range.201
8.11 Distribution of node degrees for new nodes in the ROBUST network via the
DBScan algorithm, with axes representing degree and node quantity. . . . . 202
8.12 Overall node degree distribution in the updated ROBUST network, showcas-
ing the original distribution (blue) and the new DBScan nodes (red). . . . . 202
8.13 Visualization using K-means clustering on unwitnessed events within the RO-
BUST network. Centroids are in blue, clustered nodes in green, and they are
interconnected with edges. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203
8.14 Centroid-based node insertions using K-means clustering, focusing on new
nodes while filtering those out of the spatial range of the centroid. . . . . . . 204
8.15 Histogram showing the distribution of node degrees for nodes added through
the K-means method. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205
8.16 Combined histogram indicating the node degree distribution in the updated
ROBUST network, distinguishing between original (blue) and K-means added
nodes (red). . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205
8.17 ROBUST network utilizing the Mode-adjusted variant of K-means approach,
featuring new nodes (blue), directly observed nodes (green), and remaining
unobserved nodes (red). . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206
8.18 Histogram indicating the distribution of node degrees for nodes added via the
Standard Mode strategy. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207
8.19 Histogram of node degree distribution in the ROBUST network, illustrating
both original (blue) and Standard Mode added nodes (red). . . . . . . . . . 207
xxiv9.1 Shows densest cluster identifications for frame 1 . . . . . . . . . . . . . . . . 217
9.2 ROBUSTnet, Aggregated Spatiotemporal Graph . . . . . . . . . . . . . . . . 218
9.3 TED predictor shows node activations for frame 1 . . . . . . . . . . . . . . . 219
9.4 Sequential visualization of ROBUST-network path planning for three AUVs
across Frames 0, 1, and 2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 221
A.1 Sample network representation in graph theory . . . . . . . . . . . . . . . . 327
A.2 Example of a node in a network . . . . . . . . . . . . . . . . . . . . . . . . . 327
A.3 Example of an edge connecting two nodes . . . . . . . . . . . . . . . . . . . 327
A.4 Two isomorphic networks with different spatial arrangements . . . . . . . . . 328
A.5 An example of an undirected network. . . . . . . . . . . . . . . . . . . . . . 328
A.6 An example of a directed network. . . . . . . . . . . . . . . . . . . . . . . . . 329
A.7 An example of an unweighted network. . . . . . . . . . . . . . . . . . . . . . 329
A.8 An example of a weighted network with weights on edges. . . . . . . . . . . . 330
A.9 Illustration of node degree: undirected (left) with degree 3, and directed
(right) with in-degree 3 and out-degree 2. . . . . . . . . . . . . . . . . . . . . 330
A.10 Comparison of different degree distributions. . . . . . . . . . . . . . . . . . . 331
A.11 Example of a network with a highlighted local cluster around node v . The
1
thick red edges represent |E |. . . . . . . . . . . . . . . . . . . . . . . . . . . 332
vi
A.12 Example of a network showing closed triplets (in red) and an open triplet (in
blue). The global clustering coefficient is calculated based on these. . . . . . 332
A.13 Unweighted network with the shortest path based on hops. . . . . . . . . . . 333
A.14 Weighted network with the shortest path based on edge weights. . . . . . . . 333
A.15 Visualization of Betweenness Centrality . . . . . . . . . . . . . . . . . . . . . 334
A.16 Illustration of Community Structure in a Network . . . . . . . . . . . . . . . 334
A.17 Graph and its Adjacency Matrix . . . . . . . . . . . . . . . . . . . . . . . . . 338
A.18 Graph and its Adjacency List . . . . . . . . . . . . . . . . . . . . . . . . . . 339
A.19 Illustration of Node Failure in a Graph . . . . . . . . . . . . . . . . . . . . . 340
xxvA.20 Illustration of Edge Failure in a Graph . . . . . . . . . . . . . . . . . . . . . 340
A.21 Impact of Node Failure on a Random Network . . . . . . . . . . . . . . . . . 341
A.22 Impact of Critical Node Failure on a Scale-Free Network . . . . . . . . . . . 342
A.23 Impact of Node Failure on a Small World Network . . . . . . . . . . . . . . . 342
A.24 Example of a Unipartite Network . . . . . . . . . . . . . . . . . . . . . . . . 342
A.25 Example of a Bipartite Network . . . . . . . . . . . . . . . . . . . . . . . . . 342
A.26 Comparison of Edge Density . . . . . . . . . . . . . . . . . . . . . . . . . . . 344
A.27 Example for Edge Centrality where B-C is influential . . . . . . . . . . . . . 345
A.28 Example of Edge Betweenness Centrality with High Centrality Score for Edge
C-D . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 346
A.29 Network with Central Nodes U and V Connected by an Edge and Surrounded
by Nodes A, B, C, D . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 347
A.30 Example of a Static Spatial Network. Nodes are embedded in a spatial coor-
dinate system. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 348
A.31 Spatial network with meaningful node placement. Nodes are positioned ac-
cording to spatial coordinates. . . . . . . . . . . . . . . . . . . . . . . . . . . 349
A.32 Comparison of 2D and 3D point mappings. . . . . . . . . . . . . . . . . . . . 350
A.33 ComparisonofSpatialNodeDistributions. Left: EvenlySpacedNodes. Right:
Clustered Nodes. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 351
A.34 Edge formation influenced by spatial relationships. . . . . . . . . . . . . . . 352
A.35 Comparison of Weighted and Unweighted Spatial Networks . . . . . . . . . . 353
A.36 Example of Edge-based Spatial Constraints . . . . . . . . . . . . . . . . . . . 354
A.37 Comparison of Planarity in Spatial Networks . . . . . . . . . . . . . . . . . . 355
A.38 Voronoi Tessellation in Spatial Networks . . . . . . . . . . . . . . . . . . . . 356
A.39 Illustration of Pearson Correlation in Spatial Networks . . . . . . . . . . . . 357
A.40 G is a Spatial network . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 358
1
A.41 G & G are isomorphic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 358
2 1
xxviA.42 G is not isomorphic to G & G . . . . . . . . . . . . . . . . . . . . . . . . 358
3 1 2
A.43 State i of dynamic network . . . . . . . . . . . . . . . . . . . . . . . . . . . . 360
A.44 State j of dynamic network . . . . . . . . . . . . . . . . . . . . . . . . . . . 360
A.45 Dynamic Edges in Adaptive Pathing Network under Different Conditions . . 361
A.46 Comparative Dynamic Nodes in Adaptive Pathing Network . . . . . . . . . . 362
A.47 Temporal evolution of the network . . . . . . . . . . . . . . . . . . . . . . . 363
A.48 Illustration of Directed Dynamic Networks showcasing the progression and
directedness of network changes. Each graph represents a different state with
varying edge activations. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 364
A.49 Event-based versus Snapshot-based . . . . . . . . . . . . . . . . . . . . . . . 366
A.50 Time-varying Graph . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 371
A.51 Time-Aggregated Graph . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 371
A.52 Time Windowed Graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 372
A.53 Time-varying Path & Time-Aggregated Path . . . . . . . . . . . . . . . . . . 373
A.54 SpatioTemporal evolution of the network . . . . . . . . . . . . . . . . . . . . 379
B.1 Identifying the Various Bipartite Relationships . . . . . . . . . . . . . . . . . 386
B.2 Sensor and events in and out of range across three timesteps. . . . . . . . . . 387
B.3 Sensor adapts position for events across three frames. . . . . . . . . . . . . . 387
B.4 Finite State Machine for the Responsive Observer Cycle. . . . . . . . . . . . 388
C.1 Finite State Machine showing the request-response cycle. . . . . . . . . . . . 396
C.2 Finite State Machine showing the prompt-response cycle. . . . . . . . . . . . 401
C.3 Left: A waiter node with a max degree of 5 can only connect to 5 clients,
leaving clients 6 and 7 disconnected. Right: Load balancing clients across two
waiters, ensuring all clients are connected. . . . . . . . . . . . . . . . . . . . 402
C.4 Finite State Machine showing the task allocation and execution cycle. . . . . 406
D.1 Invader-Defender relationship . . . . . . . . . . . . . . . . . . . . . . . . . . 412
xxviiF.1 Heat map H at initial time . . . . . . . . . . . . . . . . . . . . . . . . . . . 433
t
F.2 Heat map H at a later time . . . . . . . . . . . . . . . . . . . . . . . . . . 433
t+1
F.3 Random H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 434
1
F.4 Random H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 434
2
F.5 Random H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 434
3
F.6 Stochastic H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 435
1
F.7 Stochastic H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 435
2
F.8 Stochastic H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 435
3
F.9 Evolutionary H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 436
1
F.10 Evolutionary H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 436
2
F.11 Evolutionary H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 436
3
F.12 H Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 439
1
F.13 H Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 439
2
F.14 H Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 439
3
F.15 H Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 439
4
xxviiiList of Tables
7.1 (GCOOS) Observer Node Properties . . . . . . . . . . . . . . . . . . . . . . 162
7.2 (HYCOM RoI) Event Node Properties . . . . . . . . . . . . . . . . . . . . . 162
7.3 RoI Snapshot Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163
8.1 (RTCC) Observer Node Properties . . . . . . . . . . . . . . . . . . . . . . . 190
8.2 (CFS) Event Node Properties . . . . . . . . . . . . . . . . . . . . . . . . . . 192
8.3 CFS Violent Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 193
9.1 Coverage comparisons using WPR clustering with a range=0.5. . . . . . . . 222
9.2 Efficiency comparison of WAITR and Greedy planning strategies for different
numbers of gliders. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 223
12.1 Comparison of Sensor Placement Strategies . . . . . . . . . . . . . . . . . . . 298
12.2 Sensor Coverage Analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 300
A.1 Sample Spatial Embedding of Nodes in a Network . . . . . . . . . . . . . . . 349
A.2 Edge Characteristics in the Adaptive Pathing Algorithm . . . . . . . . . . . 361
A.3 Dynamic Node Positions in Different Scenarios . . . . . . . . . . . . . . . . . 362
A.4 Example: Event-based graph log with activation and deactivation times . . . 365
A.5 Example: Snapshot representation of a temporal network . . . . . . . . . . . 365
A.6 Markvoian Random Dynamics in a Temporal Network . . . . . . . . . . . . 367
A.7 Bayesian Stochastic Dynamics in a Temporal Network . . . . . . . . . . . . . 368
A.8 Uniform Random Dynamics in a Temporal Network . . . . . . . . . . . . . . 369
xxixF.1 class HeatmapRandomBase . . . . . . . . . . . . . . . . . . . . . . . . . . . 442
F.2 class HeatmapRandomWeightedWithConstraints . . . . . . . . . . . . . . . 443
F.3 class HeatmapRandomWeighted . . . . . . . . . . . . . . . . . . . . . . . . 443
F.4 class HeatmapConwayGoL . . . . . . . . . . . . . . . . . . . . . . . . . . . 444
F.5 class HeatmapConwayGoLWithSpatialRules . . . . . . . . . . . . . . . . . . 445
F.6 class HeatmapConwayGoLWithTemporalRules . . . . . . . . . . . . . . . . 445
xxxList of Algorithms
1 Frequency Clustering Algorithm . . . . . . . . . . . . . . . . . . . . . . . . . 14
2 K-means Clustering Algorithm . . . . . . . . . . . . . . . . . . . . . . . . . . 17
3 DBSCAN Clustering Algorithm . . . . . . . . . . . . . . . . . . . . . . . . . . 20
4 expandCluster function used in DBSCAN . . . . . . . . . . . . . . . . . . . . 21
5 regionQuery function used in DBSCAN . . . . . . . . . . . . . . . . . . . . . 21
6 Greedy Placement Algorithm . . . . . . . . . . . . . . . . . . . . . . . . . . . 25
7 Genetic Algorithm for Sensor Placement . . . . . . . . . . . . . . . . . . . . . 30
8 Maintaining Population Diversity in Genetic Algorithm . . . . . . . . . . . . . 31
9 Crossover and Mutation in Genetic Algorithm . . . . . . . . . . . . . . . . . . 31
10 Generational Evolution in Genetic Algorithm . . . . . . . . . . . . . . . . . . 31
11 ILP Definition of Decision Variables . . . . . . . . . . . . . . . . . . . . . . . 37
12 ILP Objective Function for Point Coverage . . . . . . . . . . . . . . . . . . . 37
13 ILP Constraints for Circle Placement . . . . . . . . . . . . . . . . . . . . . . . 38
14 Definition of Decision Variables in MILP . . . . . . . . . . . . . . . . . . . . . 42
15 MILP Objective Function for Circle Placement . . . . . . . . . . . . . . . . . 42
16 Enhanced Constraints for Sensor Movement in MILP . . . . . . . . . . . . . . 43
17 Creation of a Spatial Network with Spatial Clustering Coefficient . . . . . . . 93
18 Dijkstra’s Algorithm for Shortest Path . . . . . . . . . . . . . . . . . . . . . . 336
19 Girvan-Newman Algorithm for Community Detection . . . . . . . . . . . . . . 336
xxxi20 Random Choice method . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 447
21 generateGrid method for Heatmap Generation . . . . . . . . . . . . . . . . . . 447
22 countAliveNeighbors method for Counting Neighbors . . . . . . . . . . . . . . 447
23 evolveGrid method for Grid Evolution . . . . . . . . . . . . . . . . . . . . . . 448
24 conwaysRules method for Conway’s Game of Life . . . . . . . . . . . . . . . . 448
25 setHeatmaps method for storing series of heatmaps . . . . . . . . . . . . . . . 448
26 gridToHeatMap method for converting grid to heatmap with spatial evolution 449
27 gridToHeatMap method for converting grid to heatmap with temporal evolution449
28 generateRandomGrid method for Heatmap Generation . . . . . . . . . . . . . 450
29 applyHotspotDistribution method for modifying grid based on heat levels . . 451
30 enforceNeighborhood method for adjusting neighborhood values . . . . . . . . 451
31 generateHeatMap method for Heatmap Generation . . . . . . . . . . . . . . . 452
xxxiiAbstract
Existing network analysis methods struggle to optimize observer placements in dynamic en-
vironments with limited visibility. This dissertation introduces the novel ROBUST (Ranged
Observer Bipartite-Unipartite SpatioTemporal) framework, offering a significant advance-
ment in modeling, analyzing, and optimizing observer networks within complex spatiotem-
poral domains. ROBUST leverages a unique bipartite-unipartite approach, distinguishing
between observer and observable entities while incorporating spatial constraints and tempo-
ral dynamics.
This research extends spatiotemporal network theory by introducing novel graph-
basedmeasures,includingmyopicdegree,spatialclosenesscentrality,andedgelengthpropor-
tion. Thesemeasures,coupledwithadvancedclusteringtechniqueslikeProximalRecurrence,
provide insights into network structure, resilience, and the effectiveness of observer place-
ments. The ROBUST framework demonstrates superior resource allocation and strategic
responsiveness compared to conventional models. Case studies in oceanographic monitoring,
urban safety networks, and multi-agent path planning showcases its practical applicability
and adaptability. Results demonstrate significant improvements in coverage, response times,
and overall network efficiency.
This work paves the way for future research in incorporating imperfect knowledge, re-
finingtemporalpathingmethodologies, andexpandingthescopeofapplications. Bybridging
theoretical advancements with practical solutions, ROBUST stands as a significant contri-
bution to the field, promising to inform and inspire ongoing and future endeavors in network
optimization and multi-agent system planning.
xxxiiiChapter 1
Introduction
1.1 Background
Real-time spatial data is often generated at a pace and volume that far exceeds our capacity
to collect it Li et al. [2022]. This poses a significant challenge to observers such as sensors,
agents, and cameras, which must locate the most crucial data from an overwhelmingly large
pool of possibilities Ladner et al. [2002], Chung et al. [2001], Wilson et al. [2003]. Continually
determining how to acquire current and future real-time data can be likened to a ’dance.’
The development of Responsive Observer Bipartite-Unipartite SpatioTemporal (ROBUST)
networks was motivated by the need to systematically structure these decisions and the
resulting dynamics – essentially choreographing the observations – into a conceptual and
mathematical model. ROBUST networks are designed to navigate, analyze, and optimize
the intricacies of these observational processes.
This work focuses on using ROBUST networks to optimize resource allocation, en-
hance prediction accuracy, and bolster strategic responsiveness. This entails a thorough
examination of the relationships between observers and observables across spatial and tem-
poral dimensions. Effective positioning of observers for optimal data collection is a pivotal
element of this research.
1Additionally, this work aims to develop scalable, adaptable, and robust solutions
for managing real-time spatiotemporal data observations. ROBUST networks are explored
in detail within this research demonstrating their effectiveness through examples and case
studies in subsequent chapters.
1.2 Problem Statement
Current network models are not effective enough to deal with the complex and varied inter-
actions in spatiotemporal bipartite networks, especially when precise and optimal network
configurations are needed Ferreira et al. [2020]. These models struggle to cope with the
intricate timing and spatial aspects of these networks Hamdi et al. [2022].
Several issues make this problem more difficult. External factors often make network
behavior unpredictable, there’s a need to balance different goals within the network Shekhar
et al. [2015], and there are potential threats to the network’s security and reliability. Fur-
thermore, there’s a lack of effective methods to test and confirm that these networks are
functioning correctly.
The aim of this dissertation is to develop new methods and tools to better understand
and improve ROBUST networks, making them more effective for practical use in real-world
situations.
1.3 Objectives of the Study
The main goal of this study is to create, refine, and test a system for managing ROBUST
networks. ROBUST networks are expected to be more effective and provide clearer insights
than current network models due to the novel approach of coupling a Bipartite-Unipartite
workflow. The focus is on understanding and utilizing patterns in space and time to improve
how these networks work and to make better decisions about where to place observation
tools.
2Key goals of the study include:
1. Developing an Improved Network Model: By adopting spatiotemporal graph
theory over traditional static graph approaches, this model emphasizes strict spatial
properties in nodes and adapts to evolutionary changes over time. It aims to enhance
accuracy and practicality in real-world applications, utilizing dynamic spatial and tem-
poral data for refined network modeling and analysis.
2. Analyzing Spatial-Temporal Patterns: Utilizingadvancedgraphanalysismethods
to scrutinize space-time patterns within ROBUST networks. This analysis is geared
towards identifying the most influential nodes, assessing network robustness, pinpoint-
ing areas of brittleness, and predicting potential evolutions within the network. These
insights are crucial for enhancing network functionality, guiding strategic placement
and adjustments of observation nodes, and preparing for future changes.
3. In-depth Analysis of Decision-Making: This goal involves adopting a compre-
hensive analytical approach to understand decision-making in uncertain environments.
Key to this approach is the incorporation of concepts like the ‘chain of regret,’ a tool
usedtoevaluatetheimpactofpastdecisionsoncurrentandfuturenetworkstates. This
analysis aims to distinguish between outcomes influenced by inherent randomness in
the network and those arising from its inefficiencies.
4. Accurate Representation of Problem Domains: This objective focuses on en-
suring that ROBUST networks are tailored to accurately represent specific real-world
scenarios across different domains. It involves developing strategies to apply ROBUST
networks effectively in varied contexts, determining which spatiotemporal properties
are integral to each scenario, and deciding the appropriate granularity of analysis.
Central to this process is the precise identification and modeling of the two primary
entities in these networks: observers and observables.
31.4 Significance of the Research
This research aims to advance the field of network analysis, with particular focus on spa-
tiotemporal bipartite networks. It addresses critical gaps in existing methodologies, offering
both theoretical and practical contributions to the understanding and optimization of com-
plex systems. Overall, the research expands the scope and application of network analysis,
leading to systems that are more robust, adaptable, and aligned with the nuanced require-
ments of spatiotemporal dynamics. The implications of this research span a wide range
of disciplines and industries, underlining the interconnectedness of modern observational
systems and the need for advanced analytical approaches.
Key Significance Highlights:
• Efficient Resource Use: By reducing the observer node set in ROBUST networks,
the research enhances resource efficiency, balancing operational costs with effective
data coverage.
• Improved Response Times: Minimizing distances between nodes in ROBUST net-
works shortens response times, which is vital in dynamic real-world scenarios.
• Enhanced Outcomes: Utilizing temporal centrality measures, the research leads to
optimized network configurations and strategic observer node placements, improving
overall network performance.
• TemporalNetworkPathing: TheintroductionofWeightedAggregateInter-Temporal
Rewards (WAITR) planning. This approach employs the principles of connectivity and
flow to predict network states over time, enabling networks to dynamically adapt to
environmental changes and emerging data patterns.
• Real-time Network Evaluation: Continuous reconfiguration and real-time assess-
ment are emphasized, allowing for agile adaptations and performance optimization of
4the networks.
• Addressing Stochastic Challenges: The ‘chain of regret’ measure is incorporated
to manage the inherent unpredictability in networks, enhancing decision-making in
uncertain environments.
• ClusteringandSpatiotemporalCoherence: TheProximalRecurrence(PR)method-
ology ensures accurate clustering and coherent representation of spatial-temporal as-
pects in network analysis.
1.5 Research Questions
The research questions at the heart of this study are designed to address the complexities of
ROBUST networks. The questions aim to probe the depths of network dynamics, uncovering
how they can be optimized, managed, and leveraged to improve both theoretical understand-
ing and practical applications. Specifically, the study seeks to answer the following critical
questions:
1. Howcanthephysicallocationandspatialrelationshipbetweenobserverandobservable
entities within a bipartite network significantly affect its dynamics and the overall
network analysis?
2. How do the temporal dynamics of interactions or behaviors of entities within these
networks evolve, and how might past interactions influence future ones?
3. Given the inherent randomness and uncertainty within these domains, how can proba-
bilisticapproachesbemoreappropriatelyappliedtopredictfuturestatesorinteractions
within the network?
4. What are the most effective strategies for ensuring that observers only interact with
observables, maintaining the integrity of intra-type interactions within the network?
55. How can clear objectives such as optimizing network performance, maximizing cover-
age, or minimizing costs be defined and achieved within the constraints of a ROBUST
network?
By addressing these questions, this research intends to contribute to a richer under-
standing and more sophisticated handling of complex networks. The ultimate goal is to
articulate and apply novel strategies that not only meet the theoretical challenges posed by
spatiotemporal and bipartite dynamics but also address practical considerations in deploying
these networks across various domains.
1.6 Research Hypotheses
These hypotheses are central to the research objectives, guiding the investigative approach
and laying the groundwork for the subsequent methodology, analysis, and discussion. They
aredesignedtobetestedthroughaseriesofcontrolledexperimentsandcomparativeanalyses,
aiming to demonstrate the validity and utility of ROBUST networks in real-world scenarios.
H1: Utilizing ROBUST networks for dataset analysis will result in more precise and ac-
tionable insights than those achievable with conventional models, such as heuristic al-
gorithms, Integer Linear Programming (ILP), Greedy Algorithms, Combinatorial Op-
timization. The effectiveness of ROBUST networks will be quantified using coverage
and robustness measures, which will assess their proficiency in dynamic spatiotem-
poral data analysis. This hypothesis focuses on the distinctive strength of ROBUST
networks to adhere to spatiotemporal constraints governing node behaviors, providing
enhanced precision in analyses that factor in both spatial and temporal dynamics of
the network.
H2: ROBUST networks will demonstrate superior resource allocation and strategic respon-
siveness compared to the alternative models cited in Chapter 2 for observational net-
works. This hypothesis will be tested by determining the optimal balance between
6minimizing node insertions and maximizing event capture. The focus is on demon-
strating the efficiency and responsiveness of ROBUST networks relative to established
models
H3: The integration of spatial-temporal graph analysis in ROBUST networks will lead to
improved optimization, evidenced by more effective placement of observer nodes and en-
hanced network efficiency. This hypothesis posits that spatial-temporal graph method-
ology intrinsic to ROBUST networks will yield superior network optimization out-
comes. The assessment will involve evaluating the overall network centrality distribu-
tions and nodal centrality to quantify the improvements in observer node placement
and overall network efficiency.
Each hypothesis is tailored to be empirically testable, providing a clear framework for
examining the advancements offered by ROBUST networks in the realm of spatiotemporal
data analysis.
1.7 Dissertation Structure
The structure of this dissertation is meticulously designed to guide readers through the
complex choreography of observation within Responsive Observer Bipartite-Unipartite Spa-
tioTemporal (ROBUST) Networks.
The dissertation is organized into the following chapters:
Chapter 1: Introduction
Introduces the concept and significance of ROBUST networks, highlighting the challenges in
handling real-time spatial data and setting the stage for exploring advanced network analysis
methods to address these issues.
7Chapter 2: Literature Review
Delves into the current state of research surrounding the analysis of sensor networks in a
spatiotemporal environment.
Chapter 3: ROBUST Network Theory
Introduces the Ranged Observer Bipartite-Unipartite SpatioTemporal (ROBUST) Network,
a novel framework for modeling the complex dynamics between spatially-sensitive observers
and observable entities, expanding upon earlier theoretical concepts and aiming to opti-
mize the performance of observational systems through strategic placement and dynamic
reconfiguration of observers.
Chapter 4: ROBUST Measures and Analysis
This chapter includes some novel graph-based measures designed for ROBUST network
analysis.
Chapter 5: ROBUST and Static Observers
This chapter delves into optimizing observer node placements in networks, employing bipar-
tite and unipartite analyses to enhance network coverage and resilience, and strategically
positioning observer nodes to fill coverage gaps and improve the network’s overall efficiency.
Chapter 6: ROBUST and Mobile Observers
This chapter expands on the foundational principles of the ROBUST Network by examining
the application of mobile sensor placements, delineating a three-phase process involving
the PREP Mapper, TED Predictor, and WAITR Planner to optimize sensor positions for
real-time adaptability and responsiveness, thereby enhancing the network’s effectiveness in
diverse operational environments.
8Chapter 7: Case Study I: Oceanographic Monitoring
Presents real-world applications and practical implementation of ROBUST networks in en-
vironmental modeling.
Chapter 8: Case Study II: Urban Safety Network
Presents real-world applications and the practical implementation of ROBUST networks in
urban safety.
Chapter 9: Case Study III: Multiagent Planning
This chapter presents a case study on multiagent spatiotemporal planning strategies for Au-
tonomous Underwater Vehicles (AUVs) using the ROBUST Network, focusing on optimizing
AUV fleet paths in the Gulf of Mexico to enhance data collection efficiency by leveraging
oceanographic variabilities.
Chapter 10: Benchmarking Approach
This chapter introduces a benchmarking framework using a synthetic dataset to evaluate
static and mobile sensor placement methods, analyzes the results under the assumption of
perfect knowledge, and establishes a baseline for comparison with real-world scenarios.
Chapter 11: Benchmarking Results
Presents experimental results and visualizations comparing the performance of literature-
based and proposed sensor placement methods (both static and mobile) on synthetic bench-
mark datasets.
Chapter 12: Benchmarking Analysis
This chapter includes an analysis and discussion of the research findings and their implica-
tions from the Benchmarking results.
9Chapter 13: Conclusions and Future Work
Summarizes the findings, discusses the contributions to the field, and outlines the directions
for future research, thereby encapsulating the research journey and its broader implications.
Appendix A: Theoretical Foundations
The theoretical foundations for the study are established by exploring graph theory and
analysis, spatial graphs, dynamic graphs, and temporal graphs, ultimately leading to the
development of spatiotemporal graphs.
Appendix B: ROBUST Dynamics
This chapter explores the nuanced dynamics within the ROBUST Network, focusing on the
complex interplay between cooperative and competitive relationships among observer and
observable nodes, crucial for designing and managing multiagent systems effectively.
Appendix C: Collaborative Bipartite Dynamics
This chapter explores collaborative dynamics in specialized observer-observable relationships
withintheROBUSTnetwork,detailinghowdifferentbipartiteinteractionslikeServer-Client,
Waiter-Client, Manager-Worker, and Guard-Citizen contribute to optimizing network per-
formance and efficiency through strategic role-based interactions.
Appendix D: Competitive Bipartite Dynamics
This chapter analyzes competitive dynamics within the ROBUST Network, focusing on
various adversarial relationships like Invader-Defender and Predator-Prey, detailing their
strategic interactions and the implications for network resilience and optimization
Appendix E: Potential Cases for ROBUST Networks
Presents possible real-world applications and the practical implementation of ROBUST net-
work across various domains to showcase its vast and wide-ranging usability opportunities.
10Appendix F: Benchmarking Environment
Proposes an approach to dissecting and evaluating distinct spatiotemporal data behaviors in
two primary case studies (Oceanography Data and Crime Data), with the goal of extrapo-
lating insights and creating synthetic datasets to generalize these behaviors. This approach
allows for testing and evaluation of analytical methods across various spatiotemporal sce-
narios, thus enhancing the understanding and optimization of data analysis techniques.
1.8 Scope of the Study
The scope of this study encompasses the development and application of ROBUST networks
within stochastic spatiotemporal environments. It focuses on optimizing sensor placement
strategies, enhancing decision-making processes through the innovative “WAITR” metric,
and assessing network performance in unpredictable settings. The study critically examines
the application of these networks in real-world scenarios, such as environmental monitoring
and urban safety, utilizing spatial-temporal data to inform network behavior and efficiency.
Moreover, the research addresses the challenges of managing uncertainty within these
networks, applying stochastic modeling techniques to provide actionable insights. Tempo-
ral analysis, including forecasting, nowcasting, and hindcasting, plays a supportive role in
refining the network models and enabling robust predictions and evaluations of network
efficacy.
11Chapter 2
Literature Review
2.1 Introduction
2.1.1 Overview
There are several potential approaches for addressing the problem of sensor placements in
spatiotemporal environments. This chapter covers several popular approaches and some new
approaches. These approaches may be contrasted and compared to the approach proposed
in this research.
2.1.2 Case Studies and Applications
In evaluating the performance and generalizability of the Greedy Algorithm for sensor place-
ment, this study leverages customizable synthetic datasets, simulating dynamic heatmaps.
This approach ensures that the algorithm’s effectiveness is not overfitted to a specific case. It
also allows us to explore a wide range of scenarios, providing insights into how the algorithm
adapts to various conditions and challenges.
122.2 Frequency Clustering
2.2.1 Overview
Frequency clustering (i.e., mode-based clustering) focuses on identifying the dominant oc-
currence within a dataset. This simple approach serves as a frequentist baseline for sensor
placement, highlighting the areas with the highest concentration of events. It can be a valu-
able starting point (i.e. base case) for analysis, offering insights into dominant recurrent
patterns before applying more complex optimization strategies. Neyman [1977]
Figure 2.1: Example: Frequency clustering
Figure 2.1 contrasts traditional data display with frequency clustering. The left panel
illustrates the original dataset with uniformly black dots. The right panel employs mode
clustering, wherepointsarevisualizedwithvaryinglevelsofopacitytoreflecttheirfrequency;
numbers indicate the count of occurrences.
132.2.2 Methodology
Frequency Clustering identifies the most frequently occurring data point in the dataset,
which represents the statistical mode. This process emphasizes the most common values
and disregards spatial relationships among data points.
Identification of Dominant Occurrences
Frequency Clustering determines the most common occurrences within a dataset, offering
insights into the prevalent events or values.
Algorithm 1: Frequency Clustering Algorithm
Input: Dataset D
Output: Sorted map M of data points by frequency
begin
1
Initialize an empty map M to store the frequency of each point;
2
foreach point in D do
3
if point is in M then
4
Increment the count of point in M;
5
else
6
Add point to M with a count of 1;
7
Sort M by value in descending order;
8
return M;
9
2.2.3 Application in Sensor Placement
Frequency Clustering can be applied to sensor placement by identifying the most common
events captured by sensors. However, its limitations become apparent in complex bipartite
spatiotemporal networks.
Inadequacy in Spatial-Temporal Contexts
The technique’s focus on frequency without considering spatial dimensions may miss impor-
tant spatial clusters, leading to suboptimal node insertion strategies in sensor networks.
14Potential Overlooking of Crucial Hubs
Frequency Clustering might bypass less frequent but strategically important spatial hotspots
or hubs in a network, which could be vital for understanding and optimizing sensor place-
ment.
Neglect of Spatial Relationships
While identifying frequent occurrences, Frequency Clustering overlooks the spatial distribu-
tion and relationships of data points, which can be crucial in many contexts.
2.2.4 Advantages
• Simplicity: Frequency Clustering is straightforward and easy to implement.
• Highlighting Dominant Trends: It effectively brings out the most common occur-
rences in a dataset.
2.2.5 Limitations and Concerns
• Neglect of Spatial Relationships: The method does not consider the spatial posi-
tioning of data points, crucial in sensor networks.
• Potential for Overlooking Important Patterns: It may miss crucial spatial-
temporal patterns that are not the most frequent but are strategically significant.
2.2.6 Contextual Comparison
Compared to more sophisticated methods like Genetic Algorithms, Frequency Clustering
offers a simpler approach focused on frequency analysis. However, its neglect of spatial
and temporal dynamics makes it less suitable for complex sensor placement problems where
spatial relationships and diverse temporal patterns play a significant role. While it can
15provide insights into dominant trends, it may need to be paired with other methods for a
comprehensive analysis of sensor data.
2.3 K-means Clustering
2.3.1 Overview
K-means clustering is a popular algorithm that partitions datasets into k distinct clusters
by minimizing intra-cluster variances. It’s a fundamental method for identifying centroids
across spatially diverse data points. A centroid is the central point of each cluster, calculated
as the mean position of all the points in the cluster MacQueen [1967].
Figure 2.2: Example: K-means clustering
Figure 2.2 displays K-means clustering: the left panel shows original data points in
black, andtherightpanelshowstheclustereddatawithcentroidsmarkedbystarsandlinked
to their associated points.
162.3.2 Methodology
The algorithm assigns data points to the nearest cluster center and recalculates the center
until convergence. It requires the number of clusters, k, to be specified in advance. K-
meansiterativelyupdatesthepositionsofclustercentroidstominimizethetotalintra-cluster
variance. Jain [2010]
Algorithm 2: K-means Clustering Algorithm
Result: Partition dataset into k clusters
begin
1
Initialize centroids randomly;
2
repeat
3
foreach data point do
4
Assign the data point to the cluster with the closest centroid;
5
foreach cluster do
6
Recalculate the centroid as the mean of all points in the cluster;
7
until centroids do not change significantly;
8
return clusters and their centroids;
9
2.3.3 Spatiotemporal Adaptations
Researchers have extended K-means to address the complexities of spatiotemporal data. For
example, Dorabiala et al. (2022) proposed Spatiotemporal K-means (STKM), a specialized
method designed to identify moving clusters within spatiotemporal datasets Dorabiala et al.
[2022b].
2.3.4 Application in Sensor Placement
K-means clustering has found applications in sensor placement by grouping sensors or ob-
served events based on their spatial and sometimes temporal characteristics. Here are a few
recent examples:
• Water Distribution Networks: Gautam et al. (2022) employed K-means clustering
to optimize sensor placement in water distribution networks, aiming to maximize the
detection of contamination events Gautam et al. [2022].
17• Environmental Monitoring: Li et al. (2024) proposed a dynamic sensor placement
strategyforpighouses,leveragingathree-wayK-meansmodeltoadaptsensorpositions
based on changing environmental conditions Li et al. [2024].
• Smart Home Networks: Simonsson et al. (2023) employed K-means clustering
to analyze resident movement patterns captured by 3D depth cameras within smart
homes. By clustering locations based on similarity, they were able to identify optimal
sensor positions and fields of view for activity monitoring Simonsson et al. [2023].
Limitations in Sensor Placements
Its straightforward approach can oversimplify complex spatiotemporal patterns in sensor
data. In scenarios with complex spatial-temporal dynamics, K-means may fail to capture
subtle yet crucial patterns due to its rigid clustering approach.
Inadequate for Observational Range Considerations
K-means does not account for the observational range of entities, like surveillance cameras,
which is a critical aspect in strategic sensor placement.
2.3.5 Advantages
• Simplicity: K-means is easy to understand and implement.
• Efficiency: It is computationally less intensive, making it suitable for large datasets.
2.3.6 Limitations and Concerns
• Predefined Cluster Number: The need to specify k in advance can be limiting in
dynamic real-world scenarios.
• Rigidity in Assignment: The algorithm’s insistence on assigning every data point
to a cluster can obscure important patterns.
18• Lack of Spatial Consideration: K-means does not inherently consider the spatial
reach of the entities involved, such as sensors or cameras.
2.3.7 Contextual Comparison
While K-means provides a straightforward approach to clustering, it lacks the sophistication
needed for complex sensor placement scenarios, especially when compared to methods like
Genetic Algorithms. The latter offers a more nuanced understanding of spatial and temporal
constraints, making it better suited for such applications. K-means, however, can be a good
starting point or a supplementary method in simpler situations where high-level grouping is
sufficient.
2.4 DBSCAN Clustering
2.4.1 Overview
Density-Based Spatial Clustering of Applications with Noise (DBSCAN) is a clustering algo-
rithm that forms clusters based on density proximity. Unlike traditional clustering methods,
it does not require pre-specification of the number of clusters and can identify outliers as
noise.
Figure 2.3 contrasts unclustered data (left panel) with DBSCAN results (right panel),
where vibrant dots indicate core points within their gray radius, muted dots mark boundary
points, and gray dots denote noise.
2.4.2 Methodology
DBSCANstartsfromanarbitrarypointandexpandsclustersbyexploringneighboringpoints
that satisfy a predefined density condition, thereby connecting points directly or indirectly
within a density reach. Ester et al. [1996]
19Figure 2.3: Example: DBSCAN clustering
Handling Noise
Points that do not meet the density criteria are marked as noise, allowing DBSCAN to focus
on significant clusters while ignoring outliers.
Algorithm 3: DBSCAN Clustering Algorithm
Input: Dataset D, radius ε, minimum number of points minPts
Output: Clusters based on density and noise identification
begin
1
foreach point in D do
2
if point is not visited then
3
mark point as visited;
4
NeighborPts ← regionQuery(point, ε);
5
if sizeof(NeighborPts) < minPts then
6
mark point as NOISE;
7
else
8
increment cluster count;
9
expandCluster(point, NeighborPts, cluster, ε, minPts);
10
20Expansion of Clusters
Once a dense point is found, DBSCAN expands the cluster by including all density-reachable
points, effectively growing clusters based on local density criteria.
Algorithm 4: expandCluster function used in DBSCAN
1
Function expandCluster(point, NeighborPts, cluster, eps, minPts):
add point to cluster;
2
while NeighborPts is not empty do
3
P ← NeighborPts.pop();
4
if P is not visited then
5
mark P as visited;
6
NeighborPts’ ← regionQuery(P, eps);
7
if sizeof(NeighborPts’) ≥ minPts then
8
NeighborPts ← NeighborPts joined with NeighborPts’;
9
if P is not yet member of any cluster then
10
add P to cluster;
11
Density Reach
The algorithm defines a minimum number of points within a given radius to identify dense
regions, forming the basis of a cluster.
Algorithm 5: regionQuery function used in DBSCAN
1
Function regionQuery(source point, eps, Dataset):
neighbors ← empty list;
2
foreach target point in Dataset do
3
if distance(source point, target point’) ≤ eps then
4
append target point to neighbors;
5
return neighbors;
6
2.4.3 Spatiotemporal Adaptations
Researchers have extended DBSCAN to address spatiotemporal data. For example, Birant
and Kut (2007) proposed Spatiotemporal DBSCAN (ST-DBSCAN), a specialized method
designed to identify clusters that evolve over time and space Birant and Kut [2007b]
212.4.4 Application in Sensor Placement
DBSCAN’s approach to clustering can be applied to sensor placement, especially when an-
alyzing spatial-temporal data. Here are a few recent examples:
• Energy Management Network Yoganathan et al. (2018) proposed a data-driven
approach to optimizing sensor placement for energy management in buildings. They
combined clustering algorithms, information loss analysis, and the Pareto principle to
determine the ideal number and locations of sensors to maximize indoor environment
monitoring while minimizing cost and redundancy Yoganathan et al. [2018]
• Methan Detection Network Wang et al. (2021) developed an unsupervised ma-
chine learning framework to optimize sensor placement for methane leak detection in
oil and gas facilities. Their approach integrates facility data, historical leak rates, me-
teorological data, and atmospheric dispersion models. Sensor locations are optimized
to maximize leak detection with a limited budget, and DBSCAN is used for spatial
clustering to reduce redundancy. Wang et al. [2021]
Limitations in Sensor Placement
However, its specific characteristics introduce limitations in the context for ranged-based
sensor placements.
Merging of Adjacent Clusters DBSCAN tends to merge close clusters, which can lead
to larger, less meaningful clusters in sensor networks and obscure true spatial-temporal
patterns.
Lack of Observational Range Consideration The algorithm does not inherently con-
sider the observational range of sensors, which is critical in many spatial network analyses.
22No Centroid Generation DBSCAN does not produce centroid points for clusters, which
can be a drawback in strategizing node insertions where centroids are valuable.
2.4.5 Advantages
• Flexibility in Number of Clusters: DBSCAN automatically determines the num-
ber of clusters based on data density.
• Outlier Detection: It effectively identifies and excludes outliers, focusing on signifi-
cant clusters.
2.4.6 Limitations and Concerns
• Sensitivity to Parameters: The results are highly sensitive to the choice of density
parameters.
• Difficulty with Varying Densities: DBSCAN struggles with data sets where clus-
ters have varying densities.
• Inadequacy for Complex Spatial Networks: It is less effective in scenarios re-
quiring detailed consideration of spatial influence and observational range.
2.4.7 Contextual Comparison
Compared to other clustering methods like K-means or sophisticated approaches like Genetic
Algorithms, DBSCAN offers a unique perspective by focusing on density-based clustering.
However, its limitations in handling complex spatial-temporal data and observational ranges
make it less suited for intricate sensor placement problems where these factors are crucial. It
excels in scenarios where automatic cluster determination and outlier exclusion are beneficial
but may require supplementation with other methods for more comprehensive analysis.
232.5 Greedy Algorithm
2.5.1 Overview
The Greedy Algorithm represents a straightforward approach in sensor placement tasks. It
iteratively makes the locally optimal choice at each stage with the intent of finding a global
optimum. Jungnickel [1999] In the context of sensor placement, this algorithm relocates each
sensor within a predefined radius to maximize the coverage or reading quality.
Figure 2.4: Example: Greedy clustering
Figure 2.4 visualizes the greedy algorithm applied to point-selected clustering. Each
blue dot is a point; larger dots represent overlapping points. The algorithm selects the center
point (shown as green dashed circles) that covers the maximum number of other points
within their radius. Numbers indicate the count of points each selected sensor covers. Grey
dashed circles illustrate alternative placements considered by the algorithm but ultimately
24not chosen due to the limited number of sensors allowed, showcasing the algorithm’s local
optimization behavior.
2.5.2 Methodology
This algorithm evaluates each point independently, selecting positions that yield the maxi-
mum sum of values within a specified region around the point. The process iteratively up-
dates circle positions without backtracking, a characteristic hallmark of greedy algorithms
Cormen et al. [2009].
Algorithm 6: Greedy Placement Algorithm
Input: Set of points P, coverage radius r, maximum number of circles n
max
Output: Optimal placement of circles
begin
1
Initialize an empty list of circles S;
2
Initialize all points as uncovered U ← P;
3
while |S| < n and U ̸= ∅ do
4 max
p ← null;
5 best
max coverage ← 0;
6
foreach p in U do
7
coverage ← |{u ∈ U : distance(u,p) ≤ r}|;
8
if coverage > max coverage then
9
max coverage ← coverage;
10
p ← p;
11 best
if p is null then
12 best
break;
13
Add p to S;
14 best
Update U to remove points covered by p ;
15 best
2.5.3 Applications in Sensor Placement
The Greedy Algorithm has practical applications for sensor placement due to its ability to
make quick, localized decisions and facilitate the efficient management of sensor networks,
especially in dynamic environments. Here are a some recent examples:
• Salinity Monitoring: Aydin et al. (2019) combined a PCA model with a greedy
algorithm to optimize sensor placement for salinity estimation in drainage monitor-
25ing networks. Their approach aimed to minimize salinity reconstruction errors for
improved water resource management. Aydin et al. [2019]
• Maritime Surveillance Optimization: Nguyen et al. (2023) propose a multi-agent
approach for sensor allocation and path planning for mobile sensors with limited field
of view in maritime environments. Their method employs a greedy sensor assignment
algorithm and regret-matching learning to enhance situational awareness with limited
resources (i.e. sensors). Nguyen et al. [2023]
Adaptation to Environmental Changes
Greedy algorithms excel in adapting to temporal and spatial changes in the environment.
This feature is particularly useful in spatiotemporal sensor networks, where sensor positions
need constant adjustment based on the evolving data landscape.
Handling of Occupied Positions
AsignificantaspectoftheGreedyAlgorithminsensorplacementisitsapproachtomanaging
already occupied positions. This is especially pertinent in dense sensor networks where
space for optimal sensor placement may be limited. The algorithm’s strategy to circumvent
this challenge involves checking for position availability and, if necessary, adjusting to the
next best available position. This mechanism ensures continuous operation of the sensor
network even in scenarios with limited spatial options, reflecting a practical adaptation of
the algorithm to real-world constraints.
Scalability and Performance
WhiletheGreedyAlgorithmprovidesafastsolutionforsmallernetworks, scalabilityremains
a challenge in larger networks. The computational efficiency drops as the number of sensors
increases, highlighting the need for hybrid approaches in extensive networks.
26Integration with Predictive Models
The algorithm’s effectiveness can be enhanced by integrating it with predictive models.
These models can provide foresight into future environmental changes, allowing the Greedy
Algorithm to make more informed decisions and somewhat mitigating its inherent short-
sightedness.
Sequential Decision-Making
In sequential decision-making scenarios, the algorithm’s inability to backtrack can lead to
inconsistencies in sensor placements over time. Advanced sensor management strategies
can be employed to periodically re-evaluate and adjust the network, ensuring continuous
optimization despite the algorithm’s limitations.
2.5.4 Advantages
The primary advantages of the Greedy Algorithm include its simplicity and computational
efficiency. It is particularly effective in scenarios where a near-optimal solution is acceptable
and rapid decision-making is crucial.
2.5.5 Limitations and Concerns
Despite its advantages, the Greedy Algorithm has inherent limitations, especially in complex
sensor networks:
• Local Optima: The algorithm’s focus on immediate gain often leads to suboptimal
globalsolutions,especiallyincomplexenvironmentswithmultipleinteractingvariables.
• Lack of Future Planning: The algorithm does not account for future states or
possibilities, potentially leading to less effective overall network performance over time.
27• Sequential Inconsistencies: In the context of sequential decision-making, the lack
of backtracking or consideration of future states can result in disjointed or inconsistent
sensor placements over time.
2.5.6 Contextual Comparison
When compared to other algorithms, such as dynamic programming or backtracking algo-
rithms, the Greedy Algorithm offers a trade-off between computational speed and the quality
of the solution. In scenarios where rapid decision-making is prioritized over the optimality of
results, the Greedy Algorithm remains a viable option. However, for applications demand-
ing high precision and long-term planning, alternative methods may provide more effective
solutions.
2.6 Genetic Algorithm
2.6.1 Overview
The Genetic Algorithm (GA) represents a sophisticated approach to sensor placement prob-
lems. Unlike simpler methods like the Greedy Algorithm, GA is based on the principles of
natural selection and genetics Holland [1975]. It is particularly effective in exploring a large
search space to find optimal or near-optimal solutions for complex problems such as sensor
placement, where multiple variables and constraints are involved.
Figure 2.5 shows the results of a Genetic Algorithm (GA). Each blue dot indicates a
point to be covered, with larger dots signifying the presence of multiple overlapping points.
The final cluster positions are denoted by green dashed circles, where each red numeral
within a circle reflects the count of points it encloses. Grey dashed circles represent previous
leadingconfigurationsthroughouttheGA’siterations,providinginsightintotheevolutionary
progression and the exploration of the solution space.
28Figure 2.5: Example: Genetic clustering
292.6.2 Methodology
GAs work by maintaining a population of potential solutions, known as individuals. These
individuals evolve over successive generations. In each generation, individuals are evaluated
using a fitness function, selected based on their fitness, and then combined and mutated to
produce a new generation of individuals. This process continues until a satisfactory solution
is found or a predefined number of generations have been completed. Whitley [1994], Hol-
land [1975]
Algorithm 7: Genetic Algorithm for Sensor Placement
Input: Initial population P, fitness function f, crossover rate c , mutation rate m ,
r r
number of generations g
Output: Optimal or near-optimal solution
begin
1
for i ← 1 to g do
2
Evaluate each individual in P using f;
3
Select a subset of P based on fitness to create a mating pool;
4
while new population size < |P| do
5
Select parents from the mating pool;
6
Perform crossover on parents with probability c to create offspring;
7 r
Perform mutation on offspring with probability m ;
8 r
Add offspring to the new population;
9
Replace P with the new population;
10
return The best individual from P according to f;
11
Population Diversity
In GAs, population diversity is crucial. It prevents the algorithm from converging prema-
turely on suboptimal solutions. By maintaining a diverse set of solutions, the algorithm can
explore various parts of the search space and enhance its ability to find the global optimum.
Kramer [2017]
30Algorithm 8: Maintaining Population Diversity in Genetic Algorithm
Input: Population P, diversity threshold δ
Output: Diverse population
begin
1
Calculate diversity measure for P;
2
if diversity measure < δ then
3
Introduce new random individuals into P;
4
Re-evaluate diversity measure;
5
return P;
6
Crossover and Mutation
Crossover combines parts of two or more parent solutions to create new offspring, while mu-
tation introduces random changes to individual solutions. These operators help in exploring
new areas of the search space and avoiding local optima. Kramer [2017]
Algorithm 9: Crossover and Mutation in Genetic Algorithm
Input: Parents p , p , crossover rate c , mutation rate m
1 2 r r
Output: Offspring o , o
1 2
begin
1
if random number < c then
2 r
Perform crossover on p and p to produce o and o ;
3 1 2 1 2
else
4
Set o ← p and o ← p ;
5 1 1 2 2
Mutate o and o with probability m ;
6 1 2 r
return o , o ;
7 1 2
Generational Evolution
Through generational evolution, GAs refine their solutions over time. Kramer [2017]
Algorithm 10: Generational Evolution in Genetic Algorithm
Input: Current generation population P , fitness function f
curr
Output: Next generation population P
next
begin
1
Evaluate P using f;
2 curr
Select the fittest individuals from P ;
3 curr
Generate P using crossover and mutation on the selected individuals;
4 next
return P ;
5 next
312.6.3 Applications in Sensor Placement
In the context of sensor placement, GAs offer several unique advantages. For instance,
they can handle multiple constraints and objectives, making them well-suited for complex
scenarios where traditional algorithms might struggle. Here are some recent examples:
• Police Patrol Networks: Jiang et al. (2022) propose a genetic algorithm-based
framework to optimize patrol routes for city inspectors (i.e. mobile sensors) in smart
city management. Their approach classifies road segments by event frequency and
employs a modified genetic algorithm (DP-MOGA) to minimize response time and the
number of inspectors needed. The model is tested using real-world patrol data from
Zhengzhou, China. Jiang et al. [2022]
• Multi-Agent Coverage Optimization: Sadek et al. (2021) introduce a multi-
agentapproachforoptimizingcoveragepathplanninginunknownenvironments. Their
solution leverages dynamic programming and a genetic algorithm to achieve faster
coverage times, minimize redundant coverage, and reduce communication overhead.
Sadek et al. [2021]
Handling of Constraints
Inaddition,ThetheflexibilityofGAsisevidentintheirabilitytomanagevariousconstraints,
such as movement limits and speed restrictions of sensors. By customizing crossover and
mutation operations, GAs can ensure that these constraints are respected throughout the
optimization process. Holland [1975]
Adaptation to Diverse Scenarios
GAs are adaptable to a wide range of sensor placement scenarios. Whether it’s a static
environmentoradynamiconewithtemporalandspatialvariations, GAscanevolvesolutions
that are well-suited to the specific characteristics of the environment. Whitley [1994]
32Integration with Sensor Networks
In sensor networks, GAs can be used to optimize sensor positions over time, taking into
accountfactorslikecoverage, connectivity, andenergyefficiency. Thismakesthemavaluable
tool in the design and management of efficient and effective sensor networks.
Design of Fitness Function
The fitness function in GAs for sensor placement is crucial as it guides the evolution of
solutions. In this implementation, the fitness function is designed to ensure that spatial
constraints are adhered to, preventing sensor overlap and maximizing sensor coverage across
all time steps. It evaluates not just the immediate sensor placement but also its impact over
time, favoring solutions that maintain effective coverage throughout the sensor network’s
operational duration.
Crossover and Mutation with Spatiotemporal Constraints
In this case, the crossover and mutation would be tailored to respect the spatiotemporal
constraints inherent in sensor placement. The crossover operation involves swapping entire
temporal paths of sensors between two parent solutions. This ensures that each sensor’s
movement history is preserved, adhering to speed limits and other movement constraints.
Mutation, on the other hand, is implemented with careful consideration of future positions.
Any mutation at a given timestep influences the subsequent positions of the sensor, main-
taining the continuity and feasibility of its path.
Avoidance of Sensor Overlap
A key consideration in our GA is the avoidance of sensor overlap. This is achieved through a
careful design of the fitness function and mutation operations. The fitness function penalizes
configurations where sensors overlap in their coverage, thus promoting a spread of sensors
across the monitored area. The mutation operation also ensures that any changes in sensor
33positiondonotleadtooverlaps, respectingthespatialexclusivityrequiredforeffectivesensor
deployment.
2.6.4 Advantages
• Exploration of Large Search Space: GAs are capable of exploring a vast search
space more efficiently than traditional methods, increasing the likelihood of finding
superior solutions.
• Handling of Multiple Objectives and Constraints: They can simultaneously
consider multiple objectives and constraints, making them highly versatile.
• Adaptability: GAs can adapt to changing environments and requirements, making
them suitable for dynamic scenarios.
• Temporal Optimization: Unlike algorithms that focus on immediate gains, GAs
consider the entire timeline, optimizing sensor positions for the duration of their oper-
ation.
2.6.5 Limitations and Concerns
Despite their advantages, GAs have certain limitations:
• Computational Intensity: They can be computationally intensive, especially for
large populations or many generations.
• No Guarantee of Optimal Solution: GAs do not always guarantee an optimal
solution and may sometimes converge on suboptimal solutions.
• Requirement for Parameter Tuning: The effectiveness of a GA depends signifi-
cantly on the tuning of its parameters, which can be a complex and time-consuming
process.
34• Complexity in Handling Spatiotemporal Constraints: The need to respect mul-
tiple spatiotemporal constraints adds complexity to the algorithm, requiring sophisti-
cated crossover and mutation strategies.
2.6.6 Contextual Comparison
Compared to other algorithms like the Greedy Algorithm, GAs offer a more robust and
flexibleapproachforcomplexsensorplacementproblems. Theyarebettersuitedforscenarios
wheretheexplorationofalargesearchspaceandhandlingofmultipleconstraintsarecritical.
However, their computational intensity and the need for careful parameter tuning can be
seen as trade-offs compared to simpler, more straightforward algorithms.
2.7 Integer Linear Programming (ILP)
2.7.1 Overview
Integer Linear Programming (ILP) is a mathematical optimization method, highly effective
for binary variable problems such as point placements. It stands out for providing optimal
solutions within specific linear constraints and objectives, offering a contrast to heuristic
methods that yield approximate solutions. Nemhauser and Wolsey [1988]
Figure2.6illustratestheapplicationofIntegerLinearProgramming(ILP)foroptimal
circle placement. Each blue dot represents a point to be covered, with larger dots signifying
multiple overlapping points at that location. The green dashed circles highlight the optimal
solution determined by ILP, with the red numerals inside each circle indicating the total
number of points encompassed by that circle. The grey circles represent all possible circle
positions evaluated during the ILP process, showcasing the exhaustive search within the
solution space to arrive at the optimal configuration.
35Figure 2.6: Example: Integer Linear Programming (ILP) clustering
362.7.2 Methodology
ILPtacklestheproblemofsensorplacementbysettingitupasanoptimizationproblemwith
integer constraints. This involves the definition of decision variables, an objective function,
and constraints, all expressed in linear terms. Schrijver [1998]
Decision Variables
Decision variables in ILP are binary, denoting whether a sensor is placed (1) or not (0) at a
potential location. Nemhauser and Wolsey [1988]
Algorithm 11: ILP Definition of Decision Variables
Input: Set of potential sensor locations L
Output: Decision variables x for each location l ∈ L
l
begin
1
foreach location l ∈ L do
2
x ← Binary variable, x ∈ {0,1};
3 l l
Objective Function
The objective function aims to maximize the coverage of points, represented by the sum of
the values within the range of each placed point. Nemhauser and Wolsey [1988]
Algorithm 12: ILP Objective Function for Point Coverage
Input: Decision variables x , coverage values c for each location l and point p
l l,p
Output: Maximized total coverage
begin
1
(cid:80) (cid:80)
Maximize c x ;
2 l∈L p∈P l,p l
Constraints
Constraints ensure the practical feasibility of the circle placement, such as limiting the to-
tal number of circles and avoiding overlapping coverage areas. Nemhauser and Wolsey [1988]
37Algorithm 13: ILP Constraints for Circle Placement
Input: Decision variables x , maximum number of circles M, overlap matrix o
l l,m
Output: Feasible solution satisfying all constraints
begin
1
// Limit the number of circles
(cid:80)
x ≤ M;
2 l∈L l
foreach location l ∈ L do
3
foreach location m ∈ L\{l} do
4
// Prevent overlap in point coverage
x +x ≤ 1 if o = 1;
5 l m l,m
2.7.3 Applications in Sensor Placement
ILP is adept at managing complex sensor placement scenarios, particularly with dynamic
environmental changes and multiple constraints. Here are some recent examples:
• Smart Home Target Tracking: Gholizadeh-Tayyar et al. (2020) introduce an ILP
model to optimize sensor placement for indoor target tracking in smart homes. Their
approachuniquelyintegratestargettrackingmethodswithsensordeployment,account-
ing for smart home layouts, sensor parameters, and system reliability. Gholizadeh-
Tayyar et al. [2020]
Constraint Management
ILP rigorously manages constraints, including those on sensor movement limits and non-
overlapping coverage areas. Specifically, it mirrors the constraints in the code by limiting
potential sensor positions based on their previous locations and a defined maximum move-
ment speed. This approach ensures that sensor repositioning between time steps is both
realistic and feasible. Schrijver [1998]
Movement and Coverage Optimization
TheILP modelmayinclude constraints suchasmovementspeedwhile alsooptimizingsensor
coverage. To avoid overlap, a constraint is applied similar to the non-overlapping constraint
38in the code, where sensor positions are chosen such that their coverage areas do not intersect
within a specified radius. This ensures effective utilization of each sensor’s coverage capacity
without redundancy.
Adaptation to Temporal Variations
In dynamic environments, ILP adapts sensor positions in response to changing scenarios
over time. This adaptation is akin to the time-step adjustments in the model, where sensor
positions are re-calibrated for each time step, accounting for both the movement constraints
and the need to avoid overlapping coverage areas.
2.7.4 Advantages
• Optimality: ILPensuresoptimalsolutions, anotablestrengthoverheuristicmethods.
• Precise Constraint Handling: Its explicit incorporation of various constraints
makes it highly effective.
• Adaptability: Suitable for environments with temporal variations, ILP adapts well
to changing conditions.
• Efficient Coverage: Focusing on maximizing coverage, ILP ensures efficient sensor
network utilization.
2.7.5 Limitations and Concerns
The limitations of ILP include:
• Computational Demand: Particularly intense for large-scale problems.
• Restriction to Linear Formulations: Requires linear constraints and objective
functions.
39• Binary Focus: Mainly handles binary decision variables.
• Time-Consuming: Solution acquisition can be slow for complex problems.
• Parameter Sensitivity: Minor changes can significantly alter solutions.
2.7.6 Contextual Comparison
ILP’s deterministic and optimal solutions are advantageous for maximum coverage and pre-
cision compared to heuristic methods like Genetic Algorithms and simpler methods like the
Greedy Algorithm. However, its slower solution times and computational intensity, coupled
with the need for linear formulations, make it less flexible than these alternatives.
2.8 Mixed Integer Linear Programming (MILP)
2.8.1 Overview
Mixed Integer Linear Programming (MILP) extends the capabilities of Integer Linear Pro-
gramming (ILP) by introducing continuous variables alongside binary decision variables.
This expansion enables MILP to model more complex and dynamic scenarios, such as circle
(i.e. sensor) placement with varied movement patterns and speeds.
Figure 2.7 illustrates the application of Mixed Integer Linear Programming (MILP)
for optimal circle placement. Each blue dot represents a point to be covered, with larger
dots indicating multiple overlapping points at the same location. The green dashed circles
highlight the optimal solution determined by MILP, marked by red numerals inside each
circle that indicate the total number of points encompassed. The grey circles represent
all potential circle positions, including fractional coordinates, evaluated during the MILP
process. This demonstrates the comprehensive search within an expanded solution space,
encompassing both integer and fractional positions, to determine the optimal configuration.
40Figure 2.7: Example: Mixed Integer Linear Programming (MILP) clustering
412.8.2 Methodology
MILP approaches sensor placement by incorporating continuous variables and modified con-
straints, thereby allowing a more nuanced representation of sensor behavior over time.
Decision Variables
In contrast to ILP’s binary-only approach, MILP uses both binary and continuous vari-
ables. Binary variables (has circle) indicate the presence or absence of a circle at a location,
while continuous variables (movement step) represent the circle’s movement. Lee and Leyf-
fer [2012]
Algorithm 14: Definition of Decision Variables in MILP
Input: Set of potential sensor locations L, set of time steps T
Output: Binary sensor placement variables and continuous movement variables
begin
1
foreach location l in L do
2
sensor vars[l] ← binary variable indicating sensor presence at location l;
3
foreach location l in L, time t in T do
4
movement vars[l, t] ← continuous variable indicating sensor movement at
5
location l at time t;
Objective Function
MILP’s objective function is dual-faceted: maximizing total circle coverage and minimizing
movement. This dual focus aligns with temporal scenarios where both coverage and move-
ment efficiency are vital. Lee and Leyffer [2012]
Algorithm 15: MILP Objective Function for Circle Placement
Input: sensor vars, movement vars
Output: Optimized objective value
begin
1
coverage sum ← sum of sensor vars indicating total coverage;
2
movement sum ← sum of movement vars indicating total movement;
3
Objective ← maximize(coverage sum) - minimize(movement sum);
4
Solve MILP with Objective;
5
42Enhanced Constraints
MILP introduces advanced constraints that govern circle movement, limiting it based on
previous positions and maximum speed. These constraints offer a realistic portrayal of circle
(i.e. sensor) dynamics, especially in variable environments. Lee and Leyffer [2012]
Algorithm 16: Enhanced Constraints for Sensor Movement in MILP
Input: sensor vars, movement vars, maximum speed max speed
begin
1
foreach location l in L, time t and t+1 in T do
2
if sensor vars[l] at time t and t+1 is active then
3
Constrain movement vars[l, t] ≤ max speed;
4
else
5
Constrain movement vars[l, t] = 0;
6
2.8.3 Applications in Sensor Placement
MILP’sapplicationinsensorplacementisdistinguishedbyitsabilitytohandlemorecomplex
and dynamic situations than ILP. Here are some recent examples:
• Sensor Network Optimization for Methane Emissions: Klise et al. (2020)
present a MILP approach for optimizing sensor placement in methane emission mon-
itoring scenarios. They develop the open-source Chama package to determine ideal
sensor positions and detection thresholds for maximizing leak detection efficacy. Their
model accounts for uncertainties in wind conditions and emission patterns. Klise et al.
[2020]
Dynamic Movement Modeling
UnlikeILP,MILPmodelssensormovementscontinuously, reflectingrealisticsensorbehavior.
The inclusion of continuous variables in the code for sensor movements allows the model to
account for varying speeds and gradual repositioning.
43Comprehensive Coverage and Movement Optimization
MILP not only considers total coverage but also integrates movement costs into its optimiza-
tion process. This is exemplified in the code’s objective function, which includes the total
movement variable, striking a balance between coverage and movement efficiency.
Adaptation to Complex Scenarios
MILP’s advanced constraints and continuous variables make it adept at handling more in-
tricate scenarios. The model can simulate scenarios where sensor movement and its costs
are significant factors, as reflected in the movement constraints and continuous variables in
the code.
2.8.4 Advantages
• Enhanced Realism: MILP’s use of continuous variables offers a more realistic depic-
tion of sensor movements.
• Balanced Optimization: It considers both coverage maximization and movement
minimization, aligning with practical needs.
• Flexibility: More suited for complex and dynamic environments compared to ILP.
• Comprehensive Modeling: MILP’s ability to incorporate varied constraints and
variables allows for detailed scenario simulation.
2.8.5 Limitations and Concerns
The limitations of MILP include:
• Computational Complexity: More demanding than ILP due to the inclusion of
continuous variables.
44• Solution Difficulty: Finding optimal solutions can be more challenging and time-
consuming.
• Model Complexity: Requires careful formulation and understanding of constraints
and variables.
2.8.6 Contextual Comparison
MILP, with its inclusion of continuous variables and dual-objective focus, offers a more
nuanced approach than ILP, particularly in scenarios where sensor movement and its impli-
cations are critical. While it maintains the strengths of ILP in terms of constraint handling
and coverage optimization, MILP stands out in its ability to model sensor dynamics more
realistically. However, this comes at the cost of increased computational complexity and
solution difficulty.
2.9 Graph Signal Sampling
Graph Signal Sampling is an advanced technique in signal processing that applies the prin-
ciples of graph theory to sample and reconstruct signals on irregular domains. It extends
traditional signal processing, which typically deals with time or spatially-regular signals, to
complex networks or graphs.
2.9.1 Graph Sampling Theory
Theoretical Framework
Graph sampling theory establishes a method for selecting a subset of nodes (vertices) in
a graph to reconstruct a signal defined over the entire graph. This theory is grounded in
understanding how the structure of a graph (how nodes are interconnected) affects the signal
(information or data) residing on the graph. The main objective is to identify pivotal nodes
45that can represent the entire signal on the graph, facilitating efficient signal processing tasks
like compression, reconstruction, and analysis. Nomura et al. [2022]
Practical Implications
In real-world applications, such as sensor networks, this theory provides a systematic ap-
proach for deploying a limited number of sensors to capture essential information. It’s
especially beneficial in environments where deploying sensors at every possible location is
neitherfeasiblenorcost-effective. Graphsamplingtheoryhelpsinmakinginformeddecisions
about where to place sensors for maximum coverage and efficiency.
2.9.2 Sampling Strategy
Node Selection Criteria
The strategy for sampling on a graph involves selecting nodes that best represent the overall
signal. This decision-making process is informed by various graph attributes, including node
centrality, connectivity, and the distribution of signal values. The goal is to choose nodes
that, together, can reconstruct the full graph signal as accurately as possible. Nomura et al.
[2022]
Voronoi Regions Voronoi regions in graph signal sampling divide the graph into distinct
areas, each centered around a selected node or sensor. These regions help in determining the
influence or coverage area of each sensor, which ensures that the entire graph is effectively
monitored. Using Voronoi regions helps in evenly distributing the sensors across the network
for balanced signal representation. Nomura et al. [2022]
P-Hop Neighbors P-hop neighbor analysis in graph sampling focuses on the proximity
of nodes within a specific number of hops (steps) in the graph. By considering nodes that
are within a certain hop distance, the strategy ensures that the sampled nodes capture local
46signal variations effectively and leads to more accurate signal reconstruction from limited
observations. Nomura et al. [2022]
2.9.3 Online Dictionary Learning
Adaptive Dictionary Construction
Online Dictionary Learning in the context of graph signal sampling refers to the continuous
developmentandrefinementofabasisset(dictionary)thatcanefficientlyrepresentthegraph
signals. These dictionaries are collections of basis vectors that capture significant patterns
or features in the signal, allowing for efficient signal approximation and analysis. Nomura
et al. [2022]
Iterative Updates This process is iterative, meaning the dictionary is constantly updated
as new data is observed. This iterative nature allows the dictionary to evolve and adapt to
changes in the signal, ensuring it remains an accurate representation of the current state of
the graph signal. Nomura et al. [2022]
Sparse Regularization Sparse regularization in dictionary learning is a method that
emphasizes the use of a small number of significant basis vectors for signal representation.
It aims to achieve a sparse representation where most of the coefficients are zero or close to
zero, retaining only those that are most relevant for capturing the key features of the data.
This is particularly beneficial in handling high-dimensional data because it simplifies the
model, makingitbothcomputationallyefficientandeasiertointerpret. Theprocesstypically
involves a technique like soft-thresholding, which reduces the influence of less significant
data elements by honing in on the most crucial aspects of the signal. This selective focus on
important features leads to a more meaningful and manageable representation of complex
data. Nomura et al. [2022]
47Real-Time Data Adaptation Adapting to real-time data is a critical aspect of this
method, allowing for responsive signal processing in dynamic environments. However, this
adaptability introduces challenges, such as managing incomplete or noisy data and ensuring
computational efficiency, particularly when the graph or the signal changes rapidly.
2.9.4 Dynamic Sensor Placement
Sensor Positioning Strategies
Dynamicsensorplacementisastrategyingraphsignalsamplingthatinvolvesthecontinuous
adjustmentof sensor locationsbased onthe evolvingnature ofthe graph signal. Unlike static
placement, where sensors remain fixed, dynamic placement allows for a more responsive and
flexible monitoring system.
Utility-Based Placement Autilityfunction,oftenbasedonreal-timedatalikeheatmaps,
guides the placement of sensors. This function evaluates the importance or relevance of
different locations on the graph, allowing sensors to be positioned where they are most
needed. This method ensures that sensors are always optimally located to capture crucial
signal information.
Dynamic Adaptation Challenges Although it is advantageous in adapting to changing
conditions, dynamic sensor placement also poses several challenges. These include computa-
tional complexity due to constant recalculations, the necessity for accurate and timely data
processing, and logistical considerations in physically moving sensors within the network, if
applicable.
48Chapter 3
ROBUST Network Theory
3.1 Overview
The Ranged Observer Bipartite-Unipartite SpatioTemporal (ROBUST) Network is a novel
framework for modeling the intricate dynamics between spatially-sensitive observers and
observable entities. It addresses the challenges identified in Chapters 1 - 2 and expands
upon the theoretical concepts presented in Chapter A.
observable observable
observable observer observable
observable observable
Figure 3.1: Example Observer-Observable Network
3.1.1 Approach
ROBUST is a mathematical and conceptual framework that represents the spatial and tem-
poral relationships between observers and observable events. It consists of a set of nodes
(representing observers and observables) and a set of edges (representing the spatiotemporal
49interactions between them). Holmberg et al. [2022, 2023]
3.1.2 Components
Observer Nodes: Controllable elements in the network, such as sensors or cameras, that
can observe events.
Observable Nodes: Events or phenomena that are being observed.
Ranged Edges: Edges in ROBUST have both a spatial and temporal component. The
spatial component defines the distance between the observer and observable nodes, while
the temporal component defines the time interval over which the observation takes place.
Holmberg et al. [2022, 2023]
3.1.3 Analysis Techniques
ROBUST can be analyzed using both bipartite and unipartite techniques.
Bipartite Analysis: Focuses on the interactions between observer and observable nodes.
Unipartite Analysis: Focuses on the structure and dynamics of the network as a whole.
3.1.4 Objective
The ultimate objective of ROBUST is to develop a sophisticated framework for optimizing
the performance of observational systems. This framework will allow users to:
• Identify optimal locations for static observers to ensure coverage and efficiency.
• Plan and reconfigure paths for dynamic observers to adapt to changing environments
and targets.
• Integrate continuous observer models for ongoing, real-time environmental monitoring.
50• Expand the observational reach of existing systems to cover larger or more complex
areas.
3.2 Definition of the ROBUST Network
The ROBUST Network is a novel graph-theoretic framework designed to model complex ob-
servational systems. It consists of two distinct sets of entities: observer nodes and observable
nodes.
Observer Nodes
Observer Nodes represent entities that can observe events, such as sensors or cameras. Each
observernodehasadefinedmyopicrange, whichlimitsthedistanceoverwhichitcanobserve
events. Holmberg et al. [2022, 2023]
Observerable Nodes
Observable Nodes represent events or phenomena that can be observed. These nodes can be
further classified into two categories:
• Observed Events: Events that are within the myopic range of at least one observer
node.
• Unobserved Events: Events that are not within the myopic range of any observer
node. The ROBUST Network is a bipartite graph, meaning that edges can only exist
between observer nodes and observable nodes. An edge is created between an observer
node and an observable node if the observer node is within the myopic range of the
observable node.
The ROBUST Network also incorporates temporality, allowing events to occur at
different points in time. This enables the network to capture the dynamic nature of obser-
vation.
51Inadditiontothebipartitestructure,theROBUSTNetworkalsoincludesaunipartite
groupingofunobservedevents. Thisgroupingisformedbyclusteringunobservedeventnodes
that are within the myopic range of each other. This unipartite grouping provides insights
into the spatial distribution and potential significance of unobserved events.
3.2.1 Extending Spatiotemporal Networks to ROBUST Networks
Building upon the foundational concepts of spatiotemporal networks introduced in Chapter
A,wefurtherelaboratethemodeltoaccommodatethespecificitiesoftheROBUSTNetwork.
The ROBUST Network integrates the dynamic nature of spatiotemporal networks with a
bipartitestructurebydistinguishingbetweenobserverandobservableentities,andintroduces
the concept of myopia to model spatial constraints effectively.
Notation and Terminology
• Sets:
– Rn: Represents an n-dimensional, real-valued space. In our model, this space
describes the spatial coordinates of nodes.
– A: This denotes a general set of possible attributes for nodes. Examples of node
attributes could include sensor battery level, signal strength, or event intensity.
– B: Similar to A, this represents a set of attributes for edges. Edge attributes
could include observation quality or signal strength between nodes.
• Mathematical Concepts:
– Bipartite Graph: A graph where nodes are divided into two distinct sets, and
edges can only exist between nodes in different sets (never between nodes of the
same set).
– Myopic Range: The maximum distance within which an observer node can
sense or observe an event.
52• Specific to the ROBUST Network Model:
– V : The set of observer nodes.
O
– V : The set of observable nodes.
E
– Vobs: The subset of observable nodes that are currently within the myopic range
E
of at least one observer.
– Vunobs: The subset of observable nodes that are not currently within the myopic
E
range of any observer.
Mathematical Formulation of ROBUST Networks
Let the ROBUST Network be denoted as G = (V,E,P,T,A ,A ), where:
st V E
• Nodes (V): V represents the collection of all nodes in the network. These nodes are
divided into two sets:
– Observer Nodes (V ) represent entities that can observe events, such as sensors
O
or cameras. Each observer node has a defined myopic range, which limits the
distance over which it can observe events.
– Observable Nodes (V ) represent events or phenomena that can be observed.
E
These nodes can be further classified into two categories:
∗ Observed Events (V ): Events that are within the myopic range of at least
E
obs
one observer node.
∗ Unobserved Events (V ): Events that are not within the myopic range of
E
unobs
any observer node.
• Edges(E): E representstheconnectionsbetweenobservernodesandobservablenodes.
An edge only exists between an observer node and an observable node if the observable
node is within the myopic range of the observer node, adhering to a bipartite graph
configuration.
53• Spatial Positioning (P): P : V ×T → Rn captures the spatial location of each node
(observer or observable) at a specific point in time (t). This function incorporates the
myopic constraints that influence observer capabilities.
• Temporal Domain (T): T represents the time domain, allowing the model to capture
the dynamic nature of observation.
• Time-Variant Attributes (A and A ):
V E
– A : V ×T → A represents time-variant attributes associated with each node in
V
the network (observer or observable) over time (t).
– A : E × T → B represents time-variant attributes associated with the edges
E
between nodes over time (t). These attributes could include the quality of ob-
servation or the strength of the signal between an observer and an observable
node.
The functions P, A , and A introduce dimensions of space, attributes of nodes,
V E
and attributes of edges that are vital for the temporal-spatial analysis of networks under the
constraints of myopic observation.
3.3 Observer Nodes
ObservernodesareconfigurableintheROBUSTNetwork, actingasthesystem’scontrollable
elements capable of monitoring and collecting data from the environment. In practice, these
nodes have severe spatiotemporal constraints, including a limited range of observation and
a limited ability to observe events that occur outside of a certain time frame.
3.3.1 Observer Role in ROBUST
Observer nodes form the backbone of the ROBUST Network, endowed with the auton-
omy to monitor, interact with their environment, and make decisions under direct opera-
54tional control. Their primary role extends beyond comprehensive surveillance across the
network’s spatiotemporal dimensions; they effectively become the eyes, operational arms,
and decision-making brains of the system. Tasked with discerning and responding to the
dynamic landscape of observable events, their deployment and actions are strategically in-
formed to optimize coverage and efficiency. This involves not only the physical positioning
for optimal data acquisition but also the adaptability to shift focus based on evolving ob-
servational priorities, thus highlighting regions of high interest or activity. As the principal
decision-making agents, observer nodes dynamically interpret data to inform their actions,
ensuring the network’s adaptability and responsiveness. This foundational role underpins
the subsequent discussions on deployment strategies and bipartite dynamics, providing a
clear delineation of observer nodes as distinct, proactive, and decision-making agents within
the network’s architecture.
3.3.2 Observer View and Myopia
Observer nodes in the ROBUST Network can represent either mechanical, biological, or
virtual entities. Their ability to sense the environment in the world is based on their specific
embodiment. ObservernodesintheROBUSTNetworkareequippedwithavarietyofsensors
that allow them to interact with their environment and collect data. The type of sensor used
determines the observer node’s view, which includes the range, resolution, and type of data
that can be collected.
Type of Sensors
Observer nodes in the ROBUST Network can use a wide range of sensors, including: Ladner
et al. [2002], Chung et al. [2001], Wilson et al. [2003]
• Mechanical sensors: Sensors that use mechanical components to detect and measure
physical phenomena. Examples of mechanical sensors include cameras, microphones,
and accelerometers.
55• Biological sensors: Sensors that use biological components to detect and measure
chemical or biological phenomena. Examples of biological sensors include biosensors
and chemical sensors.
• Virtual sensors: Software engineering tools that can be used to detect and measure
changes in the state of a system. Examples of virtual sensors include differencing and
hashing between two states of code.
Generalized Sensor Categories in Observer Nodes
Observer nodes within the ROBUST Network utilize a broad spectrum of sensors, each
designed to detect specific changes in the environment. These changes can be physical or
digital, illustrating the flexibility and depth of environmental monitoring. The following
categories encapsulate the range of changes these sensors are designed to detect:
• Light Sensors: Detect changes in light intensity, color spectrum, and patterns, ap-
plicable in both natural and artificial lighting conditions.
• Sound Sensors: Capture variations in sound waves, including frequency, amplitude,
and direction, crucial for audio analysis and surveillance.
• Pressure Sensors: Measure changes in pressure, including atmospheric, liquid, or
gas pressures, relevant for environmental monitoring and industrial processes.
• Chemical Sensors: Identify changes in chemical compositions, detecting specific
substances or changes in air and water quality.
• Temperature Sensors: Monitor fluctuations in temperature, essential for environ-
mental control, weather monitoring, and industrial processes.
• Motion Sensors: Detect movement or displacement, applicable in security systems,
wildlife tracking, and automated systems.
56• Dimension Sensors: Measure changes in size or volume, including physical dimen-
sionslikelength, width, height, ordigitaldimensionssuchasfilesize, usefulinlogistics,
manufacturing, and digital storage management.
• Weight Sensors: Gauge changes in weight or mass, crucial for industrial weighing
systems, health monitoring, and inventory control.
• Electromagnetic Sensors: Detect electromagnetic fields or waves, applicable in nav-
igation, communication, and scientific research.
• Environmental Sensors: Comprehensive category covering sensors that monitor
humidity, pH levels, salinity, and more, providing a holistic view of environmental
conditions.
This classification not only underscores the diversity of sensors integrated into ob-
server nodes but also reflects the wide-ranging nature of environmental changes they are
tasked with detecting. Ladner et al. [2002], Chung et al. [2001], Wilson et al. [2003]
Sensor Capabilities
Each type of sensor has its own unique set of capabilities, including:
• Range: The distance over which the sensor can collect data.
• Resolution: The level of detail that the sensor can capture.
• Temporal resolution: The frequency at which the sensor can collect data.
Limitations of Sensors
Some sensors have inherent limitations, such as line-of-sight or field of view. For example,
visual sensors can only see objects that are within their line of sight. While audio sensors can
also be affected by line-of-sight, sound waves can diffract around obstacles to some extent,
57allowing them to be heard even if the source is not directly visible. Other sensors have
no such limitations and can detect objects or phenomena that are not directly visible. For
example, GPS sensors can track the location of an object even in conditions of poor visibility,
such as darkness or fog.
These limitations are important to consider when selecting sensors for observer nodes
in addition to where to place and in what orientation. The specific limitations of a sensor
will determine how well it can be used to collect data in a particular environment.
Myopia
The term ”myopia” in the context of the ROBUST Network refers to the inherent limitations
in a sensor’s range and field of view. This affects how and what observers can detect. For
example, a sensor with a short range may not be able to detect objects that are far away.
Similarly, a sensor with a narrow field of view may not be able to detect objects that are not
directly in front of it.
Importance of Observer View and Myopia
Understanding the interplay between sensor capabilities and observational needs is crucial
for optimizing the deployment and operation of observer nodes. The network’s design must
account for these factors, ensuring that nodes are not only well-equipped for their intended
roles but also placed and scheduled to overcome or mitigate their myopic constraints. This
section sets the groundwork for discussing how strategic placement, technology selection,
and coordination enhance the network’s overall observational capacity.
Additional Considerations
In addition to the factors discussed above, there are a number of other considerations that
can affect observer view and myopia, including:
• Orientation: The direction in which the sensor is pointing.
58• Obstructions: Objects that can block the sensor’s view.
• Environmental conditions: Factors such as lighting, noise, and weather can affect
the sensor’s performance.
By taking all of these factors into account, it is possible to design and deploy observer
nodes that can effectively collect the data needed to meet the objectives of the ROBUST
Network.
Abstract Sensors for Existential Observations
In addition to the physical and digital sensors outlined previously, observer nodes may also
integrate abstract sensors designed to detect and qualify existential observables. These
abstract sensors represent logical conditions, states, or events that, while not directly mea-
surable through physical means, are crucial for the comprehensive monitoring and analysis
capabilities of the network.
Definition and Examples: Abstract sensors operate by interpreting data, signals, or in-
putsfromvarioussourcestodeterminethepresence, absence, orstateofaspecificobservable.
Examples include:
• Presence Detection: Logicalconditionsassessingthepresenceorabsenceofanentity
within a defined space, akin to the waiter-client model where the primary observable
is the arrival or presence of a client.
• State Change Detection: Sensors that monitor for changes in system states or
conditions, signaling transitions that are indicative of significant events or actions.
• Event Triggering: Conditions or algorithms designed to detect specific patterns or
sequences of actions that signify an event of interest has occurred or is imminent.
59Importance in Observer Nodes: The inclusion of abstract sensors expands the obser-
vational scope of the ROBUST Network, allowing for the detection of nuanced or complex
phenomena that traditional sensors may not directly capture. This capability is particularly
important in contexts where the observable is conceptual or based on the aggregation of
multiple data points or signals.
Conclusion The observer view and myopia are important factors to consider when de-
signing and deploying observer nodes in the ROBUST Network. By understanding the
capabilities and limitations of different types of sensors, and by taking into account the spe-
cific environmental conditions in which the nodes will be deployed, it is possible to optimize
the network’s observational capacity and achieve the desired objectives.
3.3.3 Observer Movement
The mobility of observer nodes within the ROBUST Network significantly impacts their ob-
servational capabilities and the network’s overall effectiveness. Observers can be categorized
based on their movement patterns, which dictate how they navigate the environment and
adapt to dynamic conditions.
Static Observers: These nodes remain fixed in predetermined locations, providing consis-
tent coverage in areas of strategic importance. Their stationary nature simplifies deployment
but requires careful planning to ensure comprehensive coverage.
Dynamic Observers: Dynamic observers are capable of movement, enhancing the net-
work’s adaptability and coverage. They can be further classified based on their movement
patterns:
• Discrete Dynamic Observers: These nodes move in predetermined intervals or in
response to specific triggers, allowing for flexible coverage that adapts to changing
conditions or requirements.
60• Continuous Dynamic Observers: With the ability to move continuously, these ob-
servers can track dynamic phenomena or adjust their positioning in real-time, offering
the highest level of adaptability and coverage optimization.
Environmental and Terrain Considerations:
• Obstacle Avoidance: Essential for navigating complex physical environments, from
urban landscapes to natural terrains, ensuring uninterrupted data collection.
• Terrain Adaptation: Observers must be equipped to handle diverse environments,
such as aquatic settings for Autonomous Underwater Vehicles (AUVs) or aerial condi-
tions for drones.
• Energy Consumption and Power Requirements: For dynamic observers, it is
crucial to consider their energy consumption and power requirements, especially in
situations where they need to move frequently.
Abstract Movement in Virtual Environments: In digital or virtual settings, the con-
cept of movement extends to navigating through data structures, networks, or virtual spaces.
Here, movement can be interpreted as the process of exploring digital domains, such as
traversing directories, databases, or virtual worlds, where spatial measures are represented
by complexity levels, data access paths, or interaction within software environments. For
example, a web crawler can be used to navigate and collect data from a website.
Implications for Network Design: The choice between static and dynamic observers
influences the network’s design and operational strategies. While static observers provide
reliable coverage in key areas, dynamic observers offer flexibility to respond to unexpected
changes or events. The integration of both types within the network can provide a balanced
approach, combining stability with adaptability.
613.3.4 Multi-Observer Coordination
Effective coordination among observer nodes is pivotal in the ROBUST Network, ensuring
that collective observation efforts are harmonized for maximal coverage and efficiency. This
subsection delves into the mechanisms of multi-observer coordination, shedding light on how
these nodes collaborate and, at times, compete within the same operational space to fulfill
the network’s objectives.
Collaborative Dynamics: Observer nodes, by design, share an action space where their
operations and data collection efforts influence one another. Through strategic collabora-
tion, thesenodescanenhancethenetwork’scapacitytomonitorandanalyzetheenvironment
comprehensively. Coordination mechanisms, such as consensus algorithms and coordinated
scheduling, play a crucial role in synchronizing observer activities, ensuring that data col-
lection is optimized across spatial and temporal dimensions without excessive overlap or
redundancy.
Adversarial and Competitive Interactions: Notallinteractionswithinthenetworkare
cooperative. In certain scenarios, as explored in Chapter B: ROBUST Dynamics, observer
nodes may find themselves in competitive or even adversarial relationships. These situations
arise when nodes compete for resources or observation priorities, necessitating strategies that
balance individual node objectives with overarching network goals. This dynamic introduces
alayerofcomplexityincoordination,wherethenetworkmustnavigatebetweencollaboration
and competition to achieve optimal outcomes.
Strategies for Effective Coordination: Achieving effective multi-observer coordination
requires a multifaceted approach, incorporating both algorithmic solutions and operational
strategies:
• Algorithmic Coordination: Utilization of advanced algorithms to dynamically al-
locate tasks, manage resources, and schedule observations among nodes, ensuring that
62each node’s contributions are aligned with network-wide goals.
• Operational Strategies: Development of protocols for communication, data sharing,
and conflict resolution among nodes, facilitating a cooperative environment even in the
presence of potential competitive dynamics.
Impact on Network Performance: The manner in which observer nodes coordinate
their actions directly influences the ROBUST Network’s efficiency and efficacy. Properly
orchestrated, multi-observer coordination enhances the network’s ability to adapt to envi-
ronmental changes, detect and analyze events of interest, and utilize resources efficiently,
thereby maximizing the collective observational power of the network.
Conclusion: Multi-observer coordination is a cornerstone of the ROBUST Network’s op-
erational paradigm, ensuring that the collective capabilities of observer nodes are leveraged
totheirfullestpotential. Byfosteringanenvironmentwherenodescaneffectivelycollaborate
and navigate competitive dynamics, the network can achieve its objectives more effectively.
3.3.5 Strategic Deployment
Optimizing the ROBUST Network’s performance hinges on the strategic deployment of ob-
server nodes. This critical process involves meticulously planning the placement of nodes to
achieve comprehensive environmental coverage and efficient data collection, tailored to the
network’s dynamic needs.
Adaptive Coverage Strategy: Strategic deployment is characterized by an adaptive
coverage strategy. This approach involves identifying and prioritizing regions of interest
while considering the potential for areas devoid of significant activity to be strategically
overlooked. Such selectivity enhances network efficiency, allowing for the reallocation of
resources to areas with higher observational value. This adaptive strategy ensures that the
63deployment of observer nodes is both precise and flexible, meeting the network’s objectives
within the confines of available resources and operational capabilities.
Placement Algorithms and Models:
• Optimization Algorithms: The deployment strategy incorporates sophisticated al-
gorithms designed to analyze environmental data and predict areas of high interest.
These algorithms assist in determining the most effective locations for observer node
placement, ensuring optimal coverage and data collection efficiency.
• Simulation Models: Before actual deployment, simulation models are utilized to
evaluate the potential impact of various placement strategies. These models help in
understanding how different configurations might affect network performance, allowing
for adjustments that enhance coverage and efficiency.
– Monte Carlo Simulations: Utilizing random sampling and probabilistic analy-
sis, Monte Carlo simulations offer insights into the behavior of the network under
a wide range of scenarios. This method is particularly valuable for identifying
robust deployment strategies that maintain coverage and efficiency amidst uncer-
tainty and environmental variability.
Dynamic Reconfiguration:
• Responsive Adjustment: Observer nodes are equipped with the capability for dy-
namic reconfiguration, allowing them to adapt to environmental changes or new ob-
servational requirements.
• Autonomous and Directed Movements: Whether through autonomous decision-
making or directives from a central control, observer nodes can adjust their positions,
operational parameters, or focus areas. This movement strategy is integral to the
64network’sabilitytodynamicallyrealignitsresourcesandmaintaineffectivesurveillance
across varying conditions.
Conclusion: The strategic deployment and dynamic reconfiguration of observer nodes are
cornerstone practices within the ROBUST Network, ensuring that its observational capabil-
ities are maximized. Through careful planning, adaptive strategies, and the use of advanced
algorithms and models, the network achieves a delicate balance between comprehensive cov-
erage and resource efficiency. These practices underscore the network’s adaptability and
precision in capturing and analyzing environmental data, foundational to its success.
3.4 Observable Nodes
Observable nodes within the ROBUST Network represent the entities, events, or conditions
that are subject to observation by observer nodes. These nodes encapsulate a wide array of
phenomena, ranging from environmental variables and physical objects to digital events and
states. This section delves into the nature of observable nodes, their classification based on
observability, their interaction dynamics with observer nodes, and their broader implications
for network design and operational efficiency.
3.4.1 Observable Role in ROBUST
Observable nodes are critical elements within the ROBUST Network, serving as the focal
points of observation and analysis by observer nodes. Unlike observer nodes, which actively
monitor and interact with the environment, observable nodes represent the dynamic and
diverse set of phenomena that populate the network’s environment, from physical entities
and environmental conditions to digital signals and states. Their role is passive yet pivotal;
they constitute the subjects of the network’s surveillance efforts, providing the raw data and
insights upon which decisions and actions are based.
65Observable nodes, by their very nature, introduce variability and complexity into the
network’s operational landscape. They do not possess autonomy in the same way observer
nodes do; rather, their existence, behavior, and changes are what the network seeks to
detect, understand, and respond to. These nodes embody the network’s external interface,
the bridge between the digital and physical worlds, or the interplay of various data layers
within a purely digital realm.
Their presence and behavior are key determinants of the network’s observational
strategies and priorities. The detection, classification, and analysis of observable nodes
drive the adaptive responses of the network, shaping the deployment of observer nodes and
the allocation of resources. Observable nodes, therefore, play a central role in defining the
network’s objectives, influencing its design and evolution over time. They are the catalysts
for the network’s actions, prompting adjustments in observational focus and strategies to
ensure that the network remains aligned with its overarching goals of comprehensiveness,
efficiency, and adaptability.
In essence, observable nodes are at the heart of the ROBUST Network’s purpose
and functionality. They are the raison d’ˆetre for the network’s existence, challenging it
to continually refine and adapt its observational capabilities to meet the demands of an
ever-changing environment. Through the lens of observable nodes, the network navigates
the complexity of its operational domain, striving to achieve a detailed understanding and
effective management of the phenomena it seeks to monitor.
3.4.2 Behavior Variability of Observable Nodes
Observable nodes within the ROBUST Network exhibit a wide spectrum of behaviors, re-
flecting the diverse nature of the phenomena these nodes represent. This variability is crucial
for understanding the dynamic interaction between observable nodes and observer nodes, as
it directly impacts the network’s observational strategies and data collection methodologies.
66Spectrum of Responses: Observable nodes’ responses to observation efforts can be cat-
egorized into several distinct behaviors:
• Disregard for Observers: Some observable nodes may exhibit behaviors that are
indifferent to the presence of observer nodes. This category typically includes pas-
sive environmental phenomena or digital states that remain unchanged regardless of
observation.
• Seeking Observers: In contrast, certain observable nodes might actively seek to be
observed. This behavior is often seen in systems where feedback from observation can
trigger desired actions or responses, such as in automated monitoring systems that rely
on observer input to initiate corrective measures.
• Evading Observation: Somenodesmayexhibitbehaviorsaimedatevadingdetection
or observation. This is particularly relevant in contexts involving privacy concerns,
security measures, or competitive dynamics where visibility to observer nodes might
lead to undesired outcomes.
3.4.3 Movement and Dynamics of Observable Nodes
The dynamics and movement patterns of observable nodes within the ROBUST Network are
essential factors influencing their detectability and the overall effectiveness of the observation
strategy. These patterns can range from entirely random to highly predictable, based on
inherent or environmental factors.
Classification of Dynamics: Observable nodes exhibit a variety of dynamic behaviors
that can be broadly classified into three categories:
• Random Dynamics: Some observable nodes may move or change in unpredictable
ways, making it challenging for observer nodes to track them consistently. This ran-
67domness requires flexible and adaptive observation strategies to ensure effective cover-
age.
• Stochastic (Probabilistic) Dynamics: Other nodes display stochastic behaviors,
where their movements or changes follow known probability distributions. This allows
for more strategic planning of observation efforts, utilizing statistical models to predict
future states or positions.
• Evolutionary Dynamics: Certain observable nodes may evolve over time, following
predictable patterns that can be modeled and anticipated. Understanding these evolu-
tionary trends enables observer nodes to adapt their observation tactics to stay aligned
with the nodes’ trajectories.
3.4.4 Temporal Existence of Observable Nodes
The temporal existence of observable nodes within the ROBUST Network significantly im-
pacts the network’s observation strategies and data analysis processes. This existence varies
widely, ranging from ephemeral phenomena that appear and disappear within a single ob-
servational frame to persistent entities that remain detectable across multiple frames or even
indefinitely. Understanding these temporal patterns is crucial for tailoring the network’s
approach to monitoring and analyzing these nodes effectively.
Transient Observable Nodes: Transient observable nodes are those that appear briefly
andthenvanish, oftenwithinasingleobservationalframe. Theirfleetingnatureposesunique
challenges for observation, requiring rapid detection and analysis methods to capture and
interpret the data they provide before they disappear. Such nodes often represent short-lived
events or conditions that can offer valuable insights into the dynamic nature of the network’s
environment.
68Persistent Observable Nodes: In contrast, persistent observable nodes maintain their
presence over extended periods, ranging from several frames to a constant state throughout
the network’s operational timeline. Their enduring existence allows for more comprehensive
observation and analysis, facilitating long-term studies and trend analysis. Persistent nodes
typically include stable environmental conditions, ongoing physical processes, or continuous
digital activities.
Influence on Observation Planning and Analysis: The temporal existence of ob-
servable nodes directly influences the ROBUST Network’s observation planning and data
analysis strategies. For transient nodes, the network must deploy rapid-response observation
techniques capable of quickly capturing and processing the fleeting data. This might involve
high-frequency monitoring or the use of real-time analytics to interpret the data as it is
collected.
For persistent nodes, the strategy shifts towards sustained observation and in-depth
analysis, leveraging the accumulated data over time to uncover trends, patterns, and long-
term changes. This approach may utilize slower, more methodical observation methods and
complex analytical models to extract meaningful insights from the extended dataset.
Adapting to Temporal Variability: Adapting to the temporal variability of observ-
able nodes requires the ROBUST Network to be versatile and responsive in its observation
capabilities. By recognizing and accommodating the different temporal existences of these
nodes, the network can optimize its observation and analysis efforts, ensuring that both tran-
sient and persistent phenomena are effectively monitored and understood. This adaptability
enhances the network’s overall effectiveness in capturing the full spectrum of observable
phenomena within its domain.
693.4.5 Mobility of Observable Nodes
Observable nodes within the ROBUST Network exhibit a range of mobility characteristics,
from stationary entities to those that demonstrate various degrees of movement. This mo-
bility plays a significant role in determining the approach and techniques employed by the
network to observe and analyze these nodes effectively.
Stationary Observable Nodes: Stationary observable nodes are those that remain fixed
inlocationovertime. Theirimmobilitysimplifiestheprocessofobservation, astheirposition
relative to observer nodes does not change. Stationary nodes typically include physical
structures, environmental landmarks, or fixed digital entities. The stable nature of these
nodesallowsforconsistentobservationandfacilitateslongitudinalstudiestomonitorchanges
or trends over time.
Mobile Observable Nodes: In contrast, mobile observable nodes are characterized by
their ability to move or change position within the network’s environment. This mobility can
vary widely, from predictable patterns to erratic movements, and poses additional challenges
for observation. Mobile nodes require dynamic observation strategies that can adapt to their
changing positions, ensuring effective coverage and data collection. Examples of mobile
observable nodes include moving physical objects, dynamic environmental phenomena, or
shifting digital states.
Observation Techniques for Mobile Nodes: To effectively track and observe mobile
observable nodes, the ROBUST Network employs a variety of techniques and technologies,
including:
• Real-time Tracking: Utilizing sensors and algorithms that can monitor the position
and movement of nodes in real time, enabling observer nodes to adjust their focus and
maintain coverage of mobile targets.
70• Predictive Modeling: Implementing models that predict the future movements of
observable nodes based on historical data and observed patterns, facilitating anticipa-
tory adjustments in observation strategies.
• Adaptive Observation Methods: Employing flexible observation methods that can
quicklyrespondtochangesinthemobilityofobservablenodes, suchasadjustingsensor
configurations or deploying mobile observer nodes to follow the targets.
Impact on Network Design and Operation: The mobility of observable nodes signifi-
cantly influences the design and operational strategies of the ROBUST Network. Accounting
for both stationary and mobile nodes ensures that the network can effectively capture a com-
prehensive dataset, reflecting the full spectrum of dynamics within its observation domain.
Thisconsiderationiscrucialforthenetwork’sabilitytoprovideaccurate, timely, andrelevant
data for analysis and decision-making processes.
3.4.6 Interest Levels of Observable Nodes
The significance of observable nodes within the ROBUST Network is a critical factor in
prioritizing observation efforts and allocating resources. This significance, or level of interest,
varieswidelyamongobservablenodes, influencinghowthenetworkmanagesitsobservational
capabilities to effectively monitor and analyze these entities.
Binary and Continuous Classification: To address the diverse range of observable
nodes, the ROBUST Network employs a classification system that categorizes nodes based
on their level of interest. This system is designed to facilitate decision-making processes
regarding observation priorities and resource allocation:
• Binary Classification: This approach simplifies the classification by categorizing
observable nodes into two distinct groups: those of interest and those not of inter-
71est. It enables a clear distinction, directing observation efforts towards nodes deemed
significant for the network’s objectives.
• Continuous Classification: In contrast, a continuous classification system offers a
more nuanced understanding of significance, rating observable nodes on a scale (e.g.,
from 0 to 1). This method allows for a gradation of interest levels, providing a more
detailed framework for prioritizing observation and analysis.
Determining Interest Levels: Interest levels are determined based on several factors,
including the potential impact of the observable node on network objectives, the novelty
or rarity of the phenomena, and the relevance of the data it can provide. This assessment
is crucial for optimizing the network’s observation strategies, ensuring that resources are
focused on nodes that offer the greatest value or insight.
Implications for Observation Strategy: Theclassificationofobservablenodesbyinter-
est levels directly influences the ROBUST Network’s observation strategy. Nodes classified
as highly significant may warrant more intensive observation efforts, including higher fre-
quency monitoring, dedicated resources, and specialized analysis techniques. Conversely,
nodes deemed of lesser interest may be monitored less frequently or with standard methods,
allowing the network to allocate its resources more efficiently.
Adapting to Changes in Interest Levels: Interest levels of observable nodes may
change over time, necessitating flexibility in the network’s observation strategy. The RO-
BUST Network is designed to adapt to these changes, reevaluating the significance of nodes
as new information becomes available or as the network’s objectives evolve. This dynamic
approach ensures that the network remains focused on the most relevant and impactful
observable nodes, enhancing its overall efficiency and effectiveness.
This section highlights the importance of classifying observable nodes by their level of
interest, providing a foundation for targeted observation and analysis within the ROBUST
72Network. By prioritizing nodes based on their significance, the network can more effectively
manage its resources, adapt to changing conditions, and achieve its operational goals.
3.4.7 Observational Myopia in Observable Nodes
Observational myopia within the ROBUST Network refers to the potential perceptual lim-
itations of observable nodes, contingent on their capacity to sense and respond to their
environment. This concept is particularly relevant in scenarios where observable nodes pos-
sess some form of ”sight” or sensing mechanism, allowing them to perceive and consequently
react to the presence or actions of observer nodes or other environmental stimuli.
Conditional Sensing and Response: Notallobservablenodesareendowedwithsensing
capabilities; however, for those that are, their interaction with the environment and observer
nodes may be influenced by their sensory range and acuity. This sensory perception, akin to
myopia, can dictate:
• Behavioral Adaptations: Observable nodes with sensory capabilities might adapt
their behavior based on their perception of the environment, including the presence
of observer nodes. These adaptations could range from evasive maneuvers to mitigate
detection to alterations in their operational state in response to perceived stimuli.
• Perceptual Limitations: The extent and clarity of these nodes’ sensory perception
can significantly impact their detectability and the strategies observer nodes must
employ to monitor them effectively. Knowing the myopic range of observable nodes
helps in strategizing observation to avoid detection or to ensure visibility without
eliciting reactive behaviors.
Strategic Implications for Observer Nodes: Observerable nodes may also have ob-
servational properties that the observers nodes should consider in certain scenarios. Under-
standing the observational myopia of observable nodes is pivotal for the ROBUST Network’s
73strategy in two key areas:
• Stealth and Detection Avoidance: In cases where it is crucial for observer nodes
to remain undetected to avoid influencing the behavior of observable nodes, knowing
their myopic limitations allows observer nodes to maintain surveillance from beyond
the “observational threshold” of the observable nodes.
• Predictive Behavior Modeling: By anticipating the reactions of observable nodes
to their environment or direct observation, the network can refine its predictive mod-
els to account for potential behavioral changes. This enhances the accuracy of data
analysis and the efficacy of the network’s adaptive responses.
This nuanced understanding of observational myopia in observable nodes enriches
the ROBUST Network’s operational dynamics, facilitating a more informed and strategic
approach to observation and interaction within its domain.
3.4.8 Observation Status of Observable Nodes
The observation status of observable nodes within the ROBUST Network plays a crucial role
in the network’s data collection and analysis efforts. This status, which indicates whether
nodes are currently under observation or remain unobserved, directly impacts the network’s
ability to gather comprehensive and accurate data.
Actively Observed Nodes: Observablenodesthatareactivelyobservedbythenetwork’s
observer nodes contribute significantly to the network’s data repository. These nodes are
monitored through various observation techniques, allowing the network to capture real-
time or near-real-time data about their states, behaviors, and interactions. The continuous
or periodic observation of these nodes facilitates a deeper understanding of the network’s
operationalenvironment,enablingmoreinformeddecision-makingandstrategydevelopment.
74Unobserved Nodes: Conversely, nodes that remain unobserved pose a challenge to the
network’s objective of achieving comprehensive surveillance. Unobserved nodes can result
from various factors, including limitations in the network’s observational capabilities, strate-
gicdecisionstoprioritizecertainnodesoverothers, orthetransientnatureofsomeobservable
nodes that eludes detection. The absence of data from these nodes creates gaps in the net-
work’s understanding, potentially impacting the accuracy and effectiveness of its analyses
and responses.
Implications for Network Strategy: The observation status of observable nodes neces-
sitates strategic planning and resource allocation within the ROBUST Network to optimize
observation coverage and data collection:
• Enhancing Observational Capabilities: To minimize the number of unobserved
nodes, the network may invest in expanding its observational infrastructure, deploying
additional observer nodes, or integrating advanced sensing technologies to extend its
reach and sensitivity.
• Dynamic Prioritization: Thenetworkcanemploydynamicprioritizationalgorithms
to adjust its observational focus in real-time, based on changing conditions, emerging
priorities, or newly detected nodes, ensuring that critical data is not overlooked.
• Data Analysis and Modeling: Leveraging advanced data analysis and predictive
modeling techniques can help compensate for the absence of direct observations, infer-
ring the states and behaviors of unobserved nodes from the available data and known
patterns.
Enhancing Observational Coverage: Addressing the challenge of unobserved nodes
and maximizing the comprehensiveness of data collection are essential for the ROBUST
Network’seffectiveness. Bycontinuouslyassessingandadjustingitsobservationstatusacross
75the spectrum of observable nodes, the network can enhance its operational intelligence,
adaptability, and overall performance.
3.4.9 Inter-node Communication Dynamics among Observable Nodes
The dynamics of communication between observable nodes within the ROBUST Network
are pivotal in shaping the network’s understanding of collective behaviors and interaction
outcomes. This communication, inherently dependent on the proximity and connectivity
between nodes, dictates the flow of information, and enables nodes to potentially coordinate
actions, share state information, or collectively respond to environmental stimuli.
Communication Range and Capabilities: Observable nodes’ ability to communicate
is fundamentally influenced by their range of communication—determined by their physical
or digital proximity and the medium of interaction. This range defines the nodes’ capacity
to establish connections with one another, directly affecting the network’s insight into their
collective dynamics.
• Direct Communication: In scenarios where nodes are within direct communication
range of each other, they can exchange information seamlessly, leading to synchronized
or coordinated behaviors that might influence the network’s operational environment.
• Indirect Communication: Observable nodes might also engage in indirect commu-
nication, mediatedthroughenvironmentalmodificationsorbyinfluencingintermediary
nodes, extending their influence beyond immediate proximity.
Influence on Collective Behaviors: The inter-node communication capabilities of ob-
servable nodes play a critical role in the emergence of collective behaviors. These behaviors,
ranging from group movements to distributed processing tasks, can significantly impact the
network’s data collection and analysis strategies by altering the nodes’ observable character-
istics.
76Observational Myopia and Communication: Observational myopia, or the limited
perceptual range of observable nodes, may also affect their communication dynamics. Nodes
with restricted sensory capabilities may only communicate with or respond to neighboring
nodes within their perceptual threshold, potentially leading to localized rather than global
collective behaviors.
Strategic Implications for the Network: Understanding the communication dynamics
amongobservablenodesiscrucialfortheROBUSTNetworktoaccuratelyinterpretcollective
behaviors and adapt its observation strategies accordingly. By analyzing these dynamics,
the network can anticipate changes in the operational environment, optimize its observation
efforts, and potentially influence node behaviors through strategic interventions.
This focus on inter-node communication dynamics underscores the importance of
considering not only the individual characteristics of observable nodes but also the complex
interactions that occur among them. Such an approach enhances the network’s ability to
navigate its operational domain effectively, ensuring a comprehensive and nuanced under-
standing of observable phenomena.
3.4.10 Adaptability to Environmental Changes in Observable Nodes
TheadaptabilityofobservablenodestoenvironmentalchangeswithintheROBUSTNetwork
is a critical aspect of their role and functionality. This adaptability reflects the capacity of
these nodes to modify their behavior or state in response to external stimuli or shifts in their
operational environment. Such changes can significantly influence both the observability of
these nodes and the overall adaptability of the network.
Natural Responses to Environmental Shifts: Observable nodes may exhibit natural
responses to environmental changes, altering their behavior or physical states in ways that
can either facilitate or hinder their detection by observer nodes. These responses might
include:
77• Behavioral Adjustments: Changes in activity patterns, movement behaviors, or
interaction with other nodes in response to environmental stimuli.
• State Transitions: Modifications in physical or digital states that reflect adaptation
to new environmental conditions.
Sensory-Driven Adaptations: For observable nodes equipped with sensory capabilities,
their adaptability can also be influenced by their sensory perceptions, which are subject
to observational myopia. This myopia can limit the nodes’ ability to fully perceive their
surroundings, potentially affecting their adaptive responses:
• Limited Sensory Range: Nodes with restricted sensory perception may react to a
narrowersetofenvironmentalcues,leadingtoadaptationsthatarebasedonincomplete
information about the environment.
• Response to Perceived Stimuli: Adaptive behaviors or state changes in response
to perceived stimuli, influenced by the nodes’ myopic view of their surroundings.
Implications for Network Observability and Adaptability: The adaptive responses
of observable nodes to environmental changes pose both challenges and opportunities for the
ROBUST Network:
• Enhanced Observability: Adaptive behaviors may make certain nodes more de-
tectable or provide new data points for observation, enhancing the network’s ability to
monitor and analyze the operational environment.
• Adaptability Challenges: Conversely, rapid or unpredictable adaptations can chal-
lenge the network’s current observational strategies, requiring adjustments to maintain
effective coverage and data accuracy.
78Strategic Considerations for Observational Strategies: Understanding and antici-
pating the adaptability of observable nodes to environmental changes is essential for devel-
oping robust observational strategies. This includes employing adaptive observation tech-
nologies and methodologies capable of capturing the dynamic nature of observable nodes, as
well as integrating predictive models to forecast potential adaptations and their impacts on
observability.
This subsection underscores the importance of considering the adaptability of observ-
able nodes within the context of the ROBUST Network’s operational planning and strategy
development. By accounting for the dynamic interplay between observable nodes and their
environment,thenetworkenhancesitsresilienceandeffectivenessinachievingcomprehensive
situational awareness.
3.5 Ranged Edges and Spatial-Temporal Constraints
in ROBUST Network
3.5.1 Introduction to Ranged Edges
Ranged edges within the ROBUST Network signify the sensor view connections between ob-
server and observable nodes, influenced significantly by the observer nodes’ myopia. These
edges are not only spatial but also temporal, bridging the gap between observer and ob-
servable nodes across different time frames. Unlike traditional network edges designed for
pathfinding or direct communication, ranged edges facilitate sensor view clustering or group-
ing, playing a pivotal role in the network’s ability to dynamically adapt to both spatial
constraints and temporal changes.
793.5.2 Proximal Recurrence: A Spatial-Temporal Clustering Tech-
nique
The ROBUST Network implements Proximal Recurrence, an innovative clustering tech-
nique that dynamically adjusts to the spatial constraints and myopia of observer nodes
while also considering the temporal dynamics of the network. This technique ensures the
optimal placement of observer nodes relative to observable nodes across both space and time,
thereby enhancing the network’s efficacy in monitoring and data collection. Proximal Re-
currence leverages both p-hops and distances to define the spatial division and movement,
and incorporates temporal adjustments to accommodate the unique needs of the network’s
operational environment.
3.5.3 Influence of Observer Myopia
The effective range of these edges is predominantly determined by the myopia inherent to the
observernodes. Myopia, inthiscontext, referstothelimitedsensingrangeofobservernodes,
affecting their ability to detect and interact with observable nodes within the environment.
The ROBUST Network’s architecture and algorithms take into consideration the observer
myopia to dynamically adjust the sensor view clustering, ensuring comprehensive coverage
and responsiveness despite the spatial, perceptual, and temporal limitations.
3.5.4 Strategic Importance of Ranged Edges
Ranged edges and the Proximal Recurrence technique are fundamental to the ROBUST Net-
work’s strategy for overcoming spatial constraints and optimizing observer node deployment.
By accounting for observer myopia, leveraging dynamic clustering, and adapting to temporal
changes, the network achieves a balanced and effective distribution of observational capabili-
ties. Thisapproachnotonlymaximizestheefficiencyofthenetwork’sresourceallocationbut
also enhances its adaptability and performance in varied and challenging operational con-
80texts, ensuring that critical areas within the environment are adequately monitored across
time.
3.6 Bipartite Analysis in ROBUST Network
3.6.1 Introduction
Introduced in Chapter A, Bipartite Analysis leverages the theoretical foundation of bipar-
tite networks to evaluate the performance and interaction between observer nodes (O) and
observable nodes (E) within the ROBUST Network. This approach models the two distinct
sets of nodes and their connections, focusing on assessing the coverage of observable events
by observer nodes.
3.6.2 Objectives of Bipartite Analysis
The primary goals of Bipartite Analysis include:
1. Optimizing the current network’s observability by improving the placement and effec-
tiveness of observer nodes.
2. Assessing the network’s configuration to distinguish between observed and unobserved
events, thereby identifying coverage gaps.
3. Informing strategic decisions to enhance network performance and coverage through
data-driven insights.
3.6.3 Methodology
The methodology encompasses constructing a bipartite graph, wherein edges denote poten-
tial observational links between observer and observable nodes. This facilitates:
81• Distance Matrix Computation: Assessing spatial and temporal distances to un-
derstand potential interactions.
• Observability Assessment: Evaluating observer node centrality and classifying
events by observability.
• Strategic Network Optimization: Applying analysis results to guide observer node
deployment and network adjustments.
3.6.4 Rationale
The Bipartite Analysis is named for its foundational structure, which distinctly separates
observer nodes and observable events into two interconnected sets. This separation allows
for a focused analysis of the observational relationships and the efficiency of the network’s
design in capturing observable phenomena.
3.7 Unipartite Analysis in ROBUST Network
3.7.1 Introduction
Building on the concepts introduced in Chapter A and expanding upon the Bipartite Anal-
ysis, Unipartite Analysis focuses on the network’s expansion by targeting unobserved events
(E ). This analysis specifically addresses clusters of these events, aiming to strategi-
unobserved
cally place new observer nodes to mitigate observable coverage gaps previously identified.
3.7.2 Objectives
The Unipartite Analysis pursues several critical objectives to enhance the ROBUST Net-
work’s efficiency and coverage:
1. To identify clusters of unobserved events within the network, as delineated in Chapter
A’s discussion on network structures.
822. To develop strategic placement plans for new observer nodes, enhancing coverage and
observability of the network.
3. To align network expansions with the overarching goal of maximizing the network’s
observability and performance.
3.7.3 Methodology
Unipartite Analysis employs spatial clustering techniques to group unobserved events based
on their proximity and the likelihood of being collectively observed by new observer place-
ments. This process involves:
• Spatial Clustering: Identifying dense clusters of unobserved events using spatial
analysis techniques.
• Observer Placement Strategy: Developing strategies for the placement of new
observer nodes based on cluster locations to maximize their observational impact on
unobserved events.
• Performance Forecasting: Estimating the potential increase in network observabil-
ity and efficiency from the proposed expansions.
3.7.4 Rationale
The Unipartite Analysis directly addresses the need for network expansion by focusing solely
on the set of unobserved events, unlike the Bipartite Analysis, which considers the relation-
ships between observer nodes and all events. This targeted approach ensures that network
expansions are strategically aligned with enhancing overall network performance.
833.8 Novelty of ROBUST Network
3.8.1 Innovative Approach to Network Analysis
The ROBUST Network embodies a groundbreaking approach to network analysis, uniquely
combining bipartite and unipartite analyses. This dual methodology provides a holistic
assessment of the network’s performance, focusing on optimizing the deployment and effec-
tiveness of observer nodes vis-a`-vis observable events. The innovation lies in dynamically
transitioningbetweenbipartiteandunipartitegroupings, enablingdetailedinsightsintoboth
the current state of the observer network and potential for spatiotemporal enhancements.
3.8.2 Alignment with Research Hypotheses
This novel approach directly addresses the research hypotheses established in Chapter 1:
1. H1: The dual analysis framework enhances precision and actionable insights beyond
conventional models, fulfilling the hypothesis of ROBUST networks’ superior perfor-
mance in spatiotemporal data analysis.
2. H2: By optimizing resource allocation and strategic responsiveness through targeted
observer node placements, the ROBUST network demonstrates the efficiency and
adaptability hypothesized to surpass alternative models.
3. H3: The integration of spatial-temporal graph analysis, intrinsic to the ROBUST
framework, supports the hypothesis of improved optimization and network efficiency,
enabling effective observer node placement and network expansion.
3.8.3 Strategic Implications
The incorporation of bipartite and unipartite analyses into ROBUST’s analytical framework
offers:
84• A comprehensive evaluation of the observer network’s current state, examining both
observed and unobserved events to determine effectiveness and identify coverage gaps.
• Data-drivenidentificationofstrategicexpansionlocations, informedbyunipartiteanal-
ysis of unobserved event clusters.
• The formulation of strategic observer node placements, maximizing performance and
enhancing network observability based on bipartite analysis insights.
3.8.4 Conclusion
ThenovelapplicationofbothbipartiteandunipartiteanalyseswithintheROBUSTNetwork
signifies a significant advancement in network analysis methodologies. By leveraging these
dual perspectives, ROBUST effectively evaluates and adapts to the dynamic requirements
of its operational environment, ensuring targeted and efficient network expansions. This
approach not only maximizes observational capabilities but also aligns with the foundational
research hypotheses, demonstrating the network’s innovative potential in spatiotemporal
data analysis.
85Chapter 4
ROBUST Measures and Analysis
In this chapter, we introduce novel graph-based measures for ROBUST network analysis,
focusingonspatialmetricsandstructuralinsightsthathighlighttheuniqueinterplaybetween
nodes. Thesemeasures, emergingfromtheinherentROBUSTnatureofnetworkconnections,
offer a fresh perspective on network resilience, connectivity, and spatial properties. Our
approach enriches the understanding of network dynamics, paving the way for optimized
strategies in network design and management.
4.1 Spatial Metrics for Node Analysis
Adapting traditional network metrics to incorporate spatial elements is essential in analyzing
spatial networks. The following are key aspects of this adaptation, specifically focused on
individual nodes:
4.1.1 Myopic Degree:
Measuresanode’sconnectivitywithinaspecificspatialrange, focusingonthelocalneighbor-
hood density of a node. This metric quantifies the number of connections a node has within
a defined range, emphasizing the immediate spatial neighborhood. This metric extends that
86of the traditional concept of degree centrality Newman [2018], Wasserman and Faust [1994],
which quantifies the number of connections a node has to measure its influence. Unlike
traditional degree centrality, which considers all connections regardless of distance, Myopic
Degree focuses on connections within a defined spatial range. This is particularly important
in spatial networks where the proximity of nodes significantly impacts their interactions and
influence.
The mathematical representation is:
Spatial Degree(v ) = |{v ∈ V : d(P(v ),P(v )) ≤ θ}| (4.1)
i j i j
where θ is a threshold distance for considering an edge to exist.
4
3 1 2
Figure 4.1: Spatial centrality of a node in a network.
In figure 4.1 Node 1 has a spatial centrality of 2, being close to Nodes 2 and 4 within
a certain range.
4.1.2 Spatial Closeness Centrality:
Assesses a node’s centrality based on its spatial distance to all other nodes in the network,
similar to the concept of closeness centrality in traditional network analysis Freeman [1977],
Sabidussi [1966]. It calculates how central a node is in the network, considering the spatial
87distances. The formula is:
 −1
(cid:88)
C closeness(v i) =  d(P(v i),P(v j)) (4.2)
vj∈V,vj̸=vi
This measure provides a global view of the node’s position and influence within the
network’s spatial structure, taking into account its average distance to all other nodes.
5
7
3 1 2
6
4
Figure 4.2: Illustration of spatial closeness centrality.
In Figure 4.2 illustrates the spatial closeness centrality of Node 1 in a network. Nodes
within varying orbits indicate their distance to the central node: green (close), gold (medium
distance), and red (far).
4.2 Edge-Based Spatial Metrics
4.2.1 Spatial Edge Density
Spatial edge density is a global-based measure that evaluates how close a network is to being
maximally connected within its spatial constraints. It assesses the overall concentration of
edges across the entire network, considering the spatial arrangement and constraints such
88as physical distance, geographical barriers, or range-based limitations. Unlike traditional
edge density, which simply counts the ratio of existing edges to the maximum possible in a
complete graph Diestel [2017], Bollob´as [1998], this metric adapts the denominator to reflect
the maximum feasible edges under spatial constraints.
The formula can be expressed as:
Number of Actual Edges
Spatial Edge Density = (4.3)
Maximum Feasible Edges under Spatial Constraints
This measure differs from individual edge metrics, as it does not focus on the prop-
erties or importance of specific edges but rather evaluates the network’s connectivity as a
whole.
B B
A C A C
Maximally Connected Network Less Connected Network
Figure 4.3: Comparison of Network Connectivity
Figure 4.3 contrasts two network configurations. On the left, the Maximally Con-
nected Network includes edges A-B and B-C, showing nodes A, B, and C are within range
of one another, indicated by dashed circles. Node A and C are not connected, highlighting
their out-of-range position. The right side illustrates a Less Connected Network with the
same nodes and range constraints but fewer edges, emphasizing the network’s reduced con-
nectivity. The edge density is computed as the actual to possible edges ratio, here (1 actual
edge / 2 possible edges), resulting in a density of 0.5.
894.2.2 Edge Length Proportion
TheEdgeLengthProportionisaspatialmetricthatquantifiestheproportionofanindividual
edge’s length relative to the total length of all edges in the network. For a given edge e, it
is calculated as the edge’s length divided by the sum of the lengths of all edges within the
network. This can be mathematically represented as:
Length of edge e
Edge Length Proportion (of edge e) = (4.4)
(cid:80)
Length of edge e′
alledgese′∈E
Thisratioisparticularlyusefulinspatialnetworksforevaluatingthescaleofanedge’s
contribution to the network’s total length, offering insights into infrastructure planning,
network robustness and resilience, as discussed in research on network vulnerability and
disruption Ellens and Kooij [2013], Schneider et al. [2013], Gao et al. [2016], Sydney et al.
[2008]
This definition makes it clear that the measure is an edge-specific metric that relates
its length to the aggregate of all edge lengths in the network, thus providing a perspective
on the edge’s contribution to the overall structure and connectivity of the spatial network.
B D
1 1 5
2
A C
Figure 4.4: Illustration of Edge Length Proportion in a Spatial Network
Figure 4.4 demonstrates the concept of Edge Length Proportion in a spatial network.
The network consists of four nodes labeled A, B, C, and D. The edges between these nodes
are marked with their respective lengths. Specifically, edge A-B has a length of 1, A-C is
2, B-C is 1, and C-D is the longest edge with a length of 5. To compute the Edge Length
Proportion for the edge C-D, we calculate it as the length of edge C-D divided by the total
length of all edges in the network. The total length of all edges is 1+2+1+5 = 9, and thus
90the Edge Length Proportion for edge C-D is 5 ≈ 0.56, indicating that this edge constitutes
9
approximately 56% of the total length of all edges in this network.
4.3 Spatial Properties and Network Structures
This subsection examines the impact of spatial characteristics on the structure of networks.
It focuses on how the physical positioning of nodes and the distances between them shape
the network’s topology, leading to unique emergent patterns and dynamics.
4.3.1 Spatial Clustering Coefficient
An adaptation of the clustering coefficient, a fundamental concept in network theory Watts
andStrogatz[1998],Newman[2003], forspatialnetworkswouldconsidernotonlythenumber
of closed triplets but also the compactness of these triplets in space. This Spatial Clustering
Coefficient provides insight into the tendency of nodes to form tightly-knit communities that
are also geographically proximal.
Number of closed triplets involving v
Spatial Clustering Coefficient(v) =
Number of all possible spatially close triplets involving v
(4.5)
Figure 4.5 showcases a spatial network graph emphasizing the spatial clustering co-
efficient concept. Nodes forming triangles within a given radius are colored green, and the
edges connecting these nodes are thickened and colored blue, signifying their contribution
to the spatial clustering coefficient. Nodes that form triangular connections but lie outside
the specified proximity threshold are colored red with standard edges, illustrating that they
do not contribute to the coefficient. This figure visually underscores the significance of geo-
graphical proximity in the formation of tightly-knit node communities in spatial networks.
91Figure 4.5: Illustration of Pearson Correlation in Spatial Networks
92Algorithm 17: Creation of a Spatial Network with Spatial Clustering Coefficient
Input: Number of nodes num nodes, connection radius radius, threshold distance
threshold distance
Output: Spatial network graph G, positions pos, spatial triangles spatial triangles
begin
1
G ← random geometric graph with num nodes and radius;
2
pos ← get node positions from G;
3
spatial triangles ← empty list;
4
for each node node in G do
5
neighbors ← list of neighbors of node;
6
for each pair (u,v) in combinations of neighbors do
7
if G has edge (u,v) then
8
if distance between node and u < threshold distance and distance
9
between node and v < threshold distance and distance between u
and v < threshold distance then
append (node,u,v) to spatial triangles;
10
return G, pos, spatial triangles;
11
The algorithm delineates the construction of a spatial network and the identifica-
tion of spatial triangles that contribute to the spatial clustering coefficient. It begins by
generating a random geometric graph G representing the spatial network, with nodes dis-
tributed within a given connection radius. Positions pos of these nodes are then recorded.
The algorithm proceeds to identify all triangles in the network where each edge is below
the threshold distance, indicative of spatial proximity. These triangles are stored in a list
spatial triangles. The output is the spatial network graph G, the positions of the nodes
pos, and the list of spatial triangles spatial triangles, which are used to compute the spatial
clustering coefficient.
4.3.2 Resilience in Spatial Networks
Resilience in spatial networks goes beyond the traditional concept of maintaining connec-
tivity, aligning with broader research on network robustness and resilience Ellens and Kooij
[2013], Schneider et al. [2013], Gao et al. [2016]. It involves preserving the integrity of spa-
tial segments—distinct areas that are effectively controlled or influenced by nodes. This
approach is analogous to ensuring service coverage or operational influence in real-world
93spatial systems.
The spatial resilience of a network, denoted by R , is quantified by the proportion of
s
the network’s spatial segments that remain intact after disruptions:
1 (cid:88)
R = ⊮ (S(v )) (4.6)
s intact i
|V|
vi∈V
Inthisequation, |V|isthetotalnumberofnodes, S(v )representsthespatialsegment
i
associated with node v , and ⊮ is the indicator function that returns 1 if the segment is
i intact
intact and 0 otherwise after a disruption. This measure captures the robustness of a network
in terms of spatial coverage and influence, which is critical in applications like territorial
management, emergency services deployment, and infrastructure maintenance.
Figure 4.6: Spatial Resilience
Figure4.6 visualizesthe concept ofspatial resilienceinnetworkstructures, portraying
how space is segmented and influenced by nodes before and after a disruption. The color-
coded heatmap emphasizes the size of each segment: smaller segments are marked in yellow,
denoting a preferable, tighter scope of influence, while larger segments are in red, indicating
a broader, less ideal influence. Notably, the largest segments are depicted in dark red,
94signifying the most substantial loss of control. The left panel shows the original network
with its segmented spatial domain, while the right panel reveals the network’s altered spatial
configuration following the removal of a node. The deepening of colors towards dark red in
the right panel underscores an increased strain on the remaining nodes, illustrating the
network’s diminished spatial resilience.
95Chapter 5
ROBUST and Static Observers
This chapter details how to analyze and optimize static observer networks through bipartite
and unipartite analysis within ROBUST networks. The first section, Bipartite Dynamics,
evaluatesthecurrentobservernodes’performanceinmonitoringthenetwork’scriticalevents.
It identifies well-covered areas, coverage gaps, and weaknesses in observer placement.
Followingthis,UnipartiteDynamicsusestheseinsightstooptimizeobserverlocations.
It addresses uncovered events and aims to fill in data gaps by strategically positioning new
observers.
The primary objectives are to enhance network coverage with existing resources, uti-
lize spatial and range analysis for better scalability and performance, and apply temporality
to improve Proximal Recurrence (PR) clustering. These efforts aim to fortify the static
observer network against evolving challenges.
I. Bipartite Dynamics: Observer Network Analysis
This section presents a comprehensive analysis of observer network efficacy and coverage.
A Bipartite pairing is employed to systematically examine the spatial relationships between
stationary observer nodes and events over time. Temporal aggregation is particularly per-
tinent, as it allows for identifying spatial densities and patterns from accumulated data,
96taking advantage of the static nature of observer nodes. The approach incorporates a se-
quence of computational steps outlined in the algorithm below, which collectively address
the challenges of scalable spatiotemporal data assessment.
Figure 5.1: Bipartite Dynamics between Observers and Events
Algorithm Overview:
The algorithm proceeds through the following steps to analyze observer networks:
Figure 5.2: Flowchart of Analysis using Bipartite Dynamics
1. Myopic Filtering: Confines analysis to the immediate range of each observer, mini-
mizing complexity.
2. Link Generation: Connects observers to events within a defined proximity, estab-
lishing a network graph.
3. Centrality Ranking: Assessesobserverinfluencewithinthenetworktolocatepivotal
nodes and highlight constraints.
4. Event Classification: Separates events into observed and non-observed categories,
based on their links to observer nodes.
975.1 Myopic Filtering
ThissectionintroducesMyopicFiltering, anapproachtoenhancecomputationalefficiencyin
analyzing static observer networks. Instead of evaluating the entire network, the algorithm
employs a radius-based method focusing on the most relevant spatial segments around each
observer node.
5.1.1 Vectorized Approach
Using broadcasting in array operations, the algorithm calculates distances between observer
nodes and event points, but only within a specified coverage radius. This approach sig-
nificantly lowers the computational load by avoiding the evaluation of events outside this
radius.
Spatial Indexing for Efficient Distance Computations
The algorithm incorporates spatial indexing to streamline the distance computation process
between observers and events:
• Spatial Data Structure: A spatial index, like an R-tree Guttman [1984] or a grid-
based hash Samet [2005], organizes event locations for efficient access.
• Event Indexing: All events are indexed in this structure, facilitating quick retrieval
based on their spatial coordinates.
• Efficient Querying: Observers query the spatial index to identify nearby events
within their coverage radius, bypassing distant events to only compute distances for
relevant, proximate events.
• Selective Distance Calculation: Distances are computed solely between each ob-
server and the nearby events identified, reducing the volume of distance calculations.
98GPU-Accelerated Computation
GPU acceleration, leveraging technologies like CUDA and parallel processing architectures
Nickolls et al. [2008], Kirk and Hwu [2010], enables the algorithm to process extensive
datasets rapidly. By harnessing the parallel processing capabilities of GPUs, Myopic Fil-
tering can handle a substantial number of observer nodes and event points with increased
speed and efficiency.
5.1.2 Visualization of Myopic Filtering
The visualization illustrates the concept of Myopic Filtering by depicting observer nodes
within their coverage areas and the distribution of event points.
Figure 5.3: Myopic Filtering using Bipartite Dynamics
995.2 Link Generation
FollowingthemyopticfilteringofeventpointswithinobservercoverageareasthroughMyopic
Filtering, the next step is Link Generation. This process involves creating connections, or
links, between observer nodes and event nodes to enable detailed network analysis.
5.2.1 Unweighted Links
Initially, links are established on a binary basis: an unweighted link is formed if an event
falls within an observer’s coverage radius. This preliminary step lays the groundwork for
introducing more sophisticated, weighted links.
5.2.2 Weighted Links
The transition from unweighted to weighted links is guided by the following criteria, aligning
with principles of weighted network analysis Barrat et al. [2004], Opsahl et al. [2010], which
add depth and specificity to the network analysis:
• Spatial Proximity: Weights are inversely proportional to the distance between ob-
servers and events, reflecting the concept of spatial decay for sensing capabilities
Barthelemy [2022]. Closer interactions are emphasized, implying that events within
a shorter distance to an observer node are of greater value.
• Temporal Relevance: Time is integrated into the weighting, with more recent events
potentially receiving higher priority, similar to temporal weighting schemes used in
dynamic network analysis Holme and Saramaki [2012]. This temporal weighting can
be critical for dynamic environments where recent data may be more indicative of the
current state of the network.
• Imperfect Knowledge: Acknowledging the inherent uncertainty in data, a proba-
bilistic weight is applied to each event, incorporating aspects of uncertainty modeling
100into the network representation Berger [1985]. This factor considers the likelihood
of occurrence or detection accuracy, thus incorporating uncertainty into the network
model.
5.2.3 Visualization of Link Generation
ThevisualizationdemonstratestheLinkGenerationprocess, showcasinghowconnectionsare
established between observer nodes and event points within their coverage areas. Blue lines
represent the links from observers to events, distinguishing between viewed events within
the coverage radius and hidden events outside of it.
Figure 5.4: Link Generation using Bipartite Dynamics
1015.3 Centrality Ranking
After establishing links between observer nodes and event nodes through Myopic Filtering
and Link Generation, the subsequent analytic phase is Centrality Ranking. This process
quantifies the importance or ‘centrality’ of each observer within the network, aligning with
establishedconceptsinnetworkanalysisforassessingnodeinfluenceandimportanceFreeman
[1977], Bonacich [1987]. Centrality is based on their connectivity to event nodes.
5.3.1 Unweighted Centrality
Initially, centrality is measured in an unweighted manner, utilizing the concept of degree
centrality Opsahl et al. [2010] to account for the sheer number of direct connections an
observer node maintains with event nodes.
• Centrality Definition: Unweighted centrality is defined as the count of an observer’s
unique links to events, reflecting the scope of their monitoring capabilities.
• Coverage Breadth: This metric assesses an observer’s range of coverage, seeking to
ensure that event observation is widespread and unique, avoiding redundant coverage
which could skew the centrality measure.
5.3.2 Weighted Centrality
To capture the nuanced dynamics of observer influence, centrality metrics are extended
beyondmerecountstoincludetheweightofeachlink,similartoweightedcentralitymeasures
used in network analysis Brandes [2001], Newman [2004].
• Weighted Centrality Definition: Incorporates the strength or significance of each
observer-eventlink, whichiscalculatedbysummingtheweightsofallconnectingedges.
• Application of Weighted Centrality: This measure evaluates an observer’s influ-
encebyconsideringnotjustthecountofconnectionsbutalsotheirquality—determined
102by spatial proximity, temporal relevance, and the certainty associated with each ob-
served event.
5.3.3 Considerations for Centrality
The computation of centrality involves critical considerations to refine its accuracy and
applicability:
• Unique Assignment of Events: Where feasible, events are preferentially assigned
to a single observer to maintain the integrity of centrality scores by minimizing overlap
and ensuring clear responsibility and observation demarcation.
• Quantitative Analysis: The centrality score serves as a quantitative indicator of
an observer’s prominence in the network, guiding resource allocation and strategic
planning within the observational framework.
5.3.4 Visualization of Centrality Ranking
The visualization displays centrality rankings within a network by numbering observer
nodes—connected by blue lines to events they cover.
103Figure 5.5: Centrality Ranking using Bipartite Dynamics
1045.4 Event Classifier
The Event Classifier systematically categorizes events into distinct states based on their
detection by observer nodes, aligning with research on event detection and classification
techniques in temporal networks Kovanen et al. [2011a].
5.4.1 Binary Classification
Initially, the classifier employs a binary distinction:
• Viewed Events: These events are directly linked to at least one observer node, indi-
cating successful observation and coverage.
• Hidden Events: Events lacking direct connections to observer nodes, revealing po-
tential coverage gaps within the network.
5.4.2 Weighted Classification
The weighted classifier leverages a more diverse set, assessing events not simply as ‘viewed’
or ‘hidden’ but across a continuum based on detailed quality and contextual observations,
similartoweightedclassificationschemesusedinvariousdataanalysisapplicationsAggarwal
[2014].
• Criteria for Weight Assignment: Weights may be dynamically determined by
factors including:
– Spatial Proximity: This considers the physical closeness of events to observers,
often modeled using spatial decay functions that capture the diminishing impor-
tance of events as distance increases Barthelemy [2022].
– Temporal Relevance: This distinguishes events based on their recency, reflecting
the idea that recent events may hold greater significance in dynamic networks
Holme and Saramaki [2012].
105– Probability of Event Occurrence: This incorporates the likelihood or reliability of
events, aligning with methods of uncertainty modeling in data analysis to account
for potential errors or incomplete information Berger [1985].
• Event Valuation Spectrum:
– Likely vs. Unlikely: Eventsareassessedonaspectrum, withthosedetectedwithin
close proximity and with high probability metrics considered ’likely’ and assigned
greater significance.
– Recent vs. Historical: Events are also classified as ’recent’ or ’historical’ to reflect
their temporal significance, with recent events prioritized based on their immedi-
ate relevance to the network’s current status.
– Near vs. Far: Events are also classified as ’near’ or ’far’ to reflect their spatial
significance, with near events prioritized based on their closeness.
• Multiple Case Classification: This approach allows for a nuanced evaluation of
events, enabling the network to prioritize events based on a combination of observed
characteristics and their potential impact on network operations.
5.4.3 Visualization of Event Classification
Thevisualizationdisplayseventclassificationwithinanetworkwherebluenodesareobserved
and red are hidden.
5.5 Coverage Analysis
This section delves into quantitatively assessing the effectiveness of observer nodes in mon-
itoring event nodes throughout the network, aligning with research on network coverage
problems and optimization techniques Meguerdichian et al. [2001]. This analysis quantifies
106Figure 5.6: Event Classifier using Bipartite Dynamics
the reach and limitations of the current observer deployment and for guiding improvements
in network design.
5.5.1 Overview of Coverage Metrics
Coverage analysis hinges on several key metrics that collectively describe the performance
and efficiency of the observer network:
1. Total Coverage: This metric quantifies the proportion of event nodes that are ob-
served by at least one observer across the entire network. For instance, a Total Cover-
age Score of 13.1% would indicate that 13.1% of all events are monitored by at least
one observer, reflecting the overall effectiveness of the network, a key consideration in
107sensor placement optimization Huang and Tseng [2005].
2. Average Coverage per Observer: Reflecting the efficiency and value of each ob-
server node, this score averages the number of event nodes each observer covers. An
example score of 10.92 suggests that, on average, each observer monitors nearly 11
events, highlighting the individual contribution of observers to network coverage and
the importance of resource allocation in sensor networks Zou and Chakrabarty [2003].
3. Distribution of Degrees: This analysis examines the number of connections each
observer has with event nodes, shedding light on the network’s connectivity and its
impact on information flow and resilience Albert and Baraba´si [2002]. By identifying
observers with high connectivity (hubs) and those with few links, this insight assists
in strategic network adjustments.
5.5.2 Strategic Implications
The insights gained from the coverage analysis play a critical role in network optimization:
• Optimizing Observer Placement: By understanding the existing coverage and
connectivity, strategic decisions can be made to either reposition existing observers or
to add new ones in areas where event nodes are currently under-monitored, aligning
with principles of sensor placement optimization Krause et al. [2008].
• Enhancing Network Efficiency: Adjustments based on the Average Coverage per
Observer can lead to improved efficiency, ensuring that resources are allocated where
they yield the highest coverage impact, contributing to overall network optimization
and performance enhancement Tripathi et al. [2018].
1085.5.3 Visualization of Coverage Metrics
This visualization highlights the distribution of observer effectiveness and identifies both
highly effective and underperforming areas of the network.
Figure 5.7: Centrality Analysis using Bipartite Dynamics
109II. Unipartite Dynamics: Optimize Node Placements
Building upon the insights gained from the Bipartite Dynamics section, this section shifts
focus towards optimizing node placements within the observer network. The Unipartite
Dynamics approach applies advanced spatial analysis techniques to maximize coverage effi-
ciently with a finite set of resources.
Figure 5.8: Unipartite Dynamics between Unobserved Events
5.5.4 Unipartite Dynamics: Parameters and Outputs
Figure 5.9: Unipartite Input Parameters and Outputs
Input Parameters
• Events: The list of spatial events that are yet to be observed by the network, serving
as the target points for coverage optimization.
• Grid Size: The scale of the computational matrix which defines the spatial resolution
of analysis—larger grids allow for a more granular examination.
110• Circle Radius: Represents the reach or the effective coverage range of each observer
node, crucial for calculating influence over the event points.
• Max Circles: This constraint sets the upper limit on the number of observer nodes
to deploy, aligning with resource availability and strategic considerations.
Expected Outputs
• Optimal Locations: A set of coordinates pinpointing the strategic placement of
observer nodes to maximize event coverage and network efficiency.
• Coverage Counts: A tally of events within the radius of influence of each placed
observer node, providing a quantitative measure of the network’s improved observation
capacity.
Algorithm Overview:
This step-by-step process designed to optimize the placement of resources based on advanced
spatial analysis:
Figure 5.10: Flowchart of Analysis using Unipartite Dynamics
1111. Heatmap Generation: Initially, create a matrix representing the density of event
points across the network. This heatmap simplifies the problem space, providing a
visual representation of areas that require increased coverage.
2. Kernel Convolution: Apply a circular kernel to the heatmap to effectively map
out potential coverage zones. This technique uses spatial convolution to simulate the
range of coverage each observer node could provide, optimizing placements based on
the spatial overlap of these zones.
3. Centroid Identification: Utilizeaniterativeprocesstoidentifythecentroidsofthese
coverage zones. By strategically placing observer nodes at these centroids, the network
can maximize the area each node covers.
4. Iterative Optimization: Continuously refine node placements by removing points
already covered from further consideration. This step helps to eliminate redundancy
and ensures each observer is utilized to its fullest potential.
5.5.5 Visualization of Initial Unobserved Events
This visualization represents the aggregated positions of the initial set of unobserved events.
The following sections will apply the defined methods to this demo to illustrate the applica-
bility.
112Figure 5.11: Initial set of Aggregated Unobserved Events
1135.6 Point Density Heatmap
5.6.1 Introduction to Heatmap Utilization
A point density heatmap is a matrix representation that leverages the principles of kernel
density estimation Silverman [1986], Wand and Jones [1995] to capture the frequency of
events in a location. This section delves into the construction and application of heatmaps
to distill complex spatial relationships into actionable data.
5.6.2 Constructing the Point Density Matrix
The construction of a point density heatmap involves categorizing spatial data into a grid us-
ing spatial binning techniques Bailey and Gatrell [1995], Cressie and Wikle [2012], with each
cell representing a specific area’s event density. This process simplifies the computational
task from analyzing individual points to evaluating discrete grid areas.
1. Spatial Binning Process: Points are assigned to bins based on their coordinates,
transformingthecontinuousspatialfieldintoadiscretesetofbins. Eachbinaggregates
thedensityofpointswithinitsbounds,reducingthegranularitybutpreservingessential
spatial information. The bins represent the boundaries for defining if points are at the
“same” position.
2. Matrix Representation: The resulting bins are then arranged into a matrix, where
each cell’s value corresponds to the density of points within that bin’s area. This
matrix acts as a heatmap,representing areas of high and low event concentrations.
5.6.3 Methodological Approach
The methodology for creating a point density heatmap emphasizes computational efficiency,
particularly for large datasets where direct point-to-point comparisons are impractical due
to their quadratic complexity.
1141. Algorithmic Efficiency: By aggregating points into bins, the computational com-
plexity is dramatically reduced. This efficiency gain allows for rapid assessment of
point distribution and density without the need for pairwise distance calculations.
2. Computational Acceleration: Modern computational tools such as CUDA Nickolls
et al. [2008] provide the necessary acceleration to handle extensive spatial datasets.
This utilization of advanced computational resources ensures that the heatmap gener-
ation process remains scalable and time-efficient.
5.6.4 Visualization
This a visualization of applying a point density heatmap with resolution as 50x50 to the
initial set of unobserved nodes. Cells that are brighter have a higher density of events.
115Figure 5.12: Point Density Heatmap using Unipartite Dynamics
1165.7 Kernel Convolution
5.7.1 Theoretical Foundation of Kernel Convolution
Kernel convolution, an operation adapted from image processing and computer vision Gon-
zalez and Woods [2018], Szeliski [2010], involves superimposing a defined kernel shape, such
as a circle or square, over a matrix to identify regions of interest within the data. In the
context of coverage mapping, this technique is employed to determine the areas with the
highest density of events that fall within a given range or influence zone of an observer node.
5.7.2 Operationalizing Convolution in Spatial Analysis
The kernel convolution process is articulated through the following steps:
1. Kernel Overlay: A kernel, representing the coverage radius of a potential observer
node, is applied to each point on the heatmap. This step simulates the coverage area
of the observer.
2. Convolution Mechanics: As the kernel moves across the heatmap, it aggregates the
values of the points that fall under it, performing a convolution operation Gonzalez
and Woods [2018] that is akin to a sliding window that computes the sum of covered
event densities.
3. Coverage Potential Identification: Through this process, the algorithm highlights
regions where the kernel encompasses a high concentration of neighboring events.
5.7.3 Convolution Process in Detail
The convolution mechanism can be mathematically formalized as follows:
• Let H be the heatmap matrix where H represents the density of events at grid cell
ij
(i,j).
117• Let K be the kernel matrix with a predefined shape and size, where K represents the
ab
weight or influence of the kernel at position (a,b) relative to its center.
• The convolution C at a particular point (i,j) on the heatmap is calculated as:
(cid:88)
C = H ·K
ij i+a,j+b ab
a,b
• The points (i,j) where C is maximized are identified as candidate locations for ob-
ij
server placement.
5.7.4 Scalability and Computational Efficiency
The scalable nature of this approach allows it to efficiently handle large datasets:
• The reduction from a direct point-to-point analysis to a manageable convolution op-
eration significantly lowers computational time Cormen et al. [2009].
• UtilizationofcomputationalacceleratorslikeGPUs, usinglibrariessuchasCUDAKirk
and Hwu [2010], enables the handling of extensive data grids, enhancing the method’s
applicability to larger networks.
5.7.5 Visualization
This a visualization of applying a kernel convolution on the point density heatmap. Cells
that are brighter have a higher density while also considering neighboring influences.
118Figure 5.13: Kernel Convolution using Unipartite Dynamics
1195.8 Centroid Identification and Iterative Optimization
5.8.1 Objective and Methodology
Theobjectiveistolocatethefocalpoints—centroids—ofeachcoverageareatoplaceobserver
nodes most effectively. The process uses the output from kernel convolution to guide the
placement of these centroids.
5.8.2 Iterative Centroid Selection Process
This process involves a series of steps to ensure each centroid’s location maximizes the
coverage of event points:
1. Initial Centroid Location: The algorithm begins by identifying the peak value
within the coverage map, which indicates the area with the highest cumulative event
density and potential for coverage. This peak serves as the first centroid.
2. Coverage Area Neutralization: Oncethefirstcentroidisplaced, itscoverageradius
is projected onto the heatmap, and the densities of all points within this radius are
reduced to zero. This prevents these points from influencing the location of subsequent
centroids.
3. Subsequent Centroids: The selection process repeats, each time identifying the
next highest value on the updated coverage map and neutralizing the corresponding
coverage area. This iterative approach continues until all centroids are placed or the
remaining points on the heatmap do not justify additional coverage.
5.8.3 Resultant Coverage Optimization
The outcome of this process is a set of strategically placed centroids that collectively max-
imize the coverage of event points. Each centroid’s placement is optimized to extend the
120observer network’s reach while avoiding redundancy, ensuring that each resource contributes
effectively to the overall network performance.
5.8.4 Visualization
This shows where the top ten positions for observers should be placed.
Figure 5.14: Centroid Identification using Unipartite Dynamics
121Chapter 6
ROBUST and Mobile Observers
6.1 Introduction
Building on the foundational principles of the ROBUST Network, this chapter delves into
the application of dynamic sensor placements, a critical aspect in scenarios demanding real-
time adaptability and responsiveness. The process for dynamically placing sensors in the
ROBUST Network is divided into three distinct phases. Each phase plays a vital role in
ensuring the network’s effectiveness.
The first phase involves the Proximal Recurrent Event Partition (PREP) Mapper
which extends from the ROBUST Network. This phase focuses on mapping a network of
potential waypoints, which are crucial positions or areas the sensors might occupy. The
Mapper’s role is to lay out these strategic points.
In the second phase, the TED (Temporal Event Dynamics) Predictor comes into
play. This phase is dedicated to predicting which waypoints will be active at any given time
frame. For the purpose of this research, the TED Predictor operates under the assumption of
perfectknowledge,enablingittomakeaccurateandinformedpredictionsaboutthenetwork’s
dynamics.
The final phase involves the WAITR (Weighted Aggregate Intra-Temporal Reward)
122Planner. This component is responsible for computing the optimal paths for sensor move-
ments by ensuring that sensors are positioned effectively for each time frame. The WAITR
Planner takes into account various factors to determine the most advantageous routes for
the sensors, maximizing observational efficiency and coverage.
Throughthesethreephases–thePREPMapper, theTEDPredictor, andtheWAITR
Planner–theROBUSTNetworkachievesahighlevelofdynamismandadaptability,essential
for real-time monitoring and response in complex environments.
The algorithms presented in this chapter refers to the implementation details used
for benchmarking in Chapter 11: Benchmarking Results.
6.2 Phase 1: PREP Mapper
The Proximal Recurrent Event Partition (PREP) Mapper forms the first phase in the dy-
namic sensor placement process within the ROBUST Network. Its primary function is to
map out potential waypoints based on points of interest. These waypoints are strategically
vital positions or areas that sensors might occupy for optimal observational coverage.
InputData NodeGeneration LinkGeneration WaypointNetwork
UnobservedDis-
GetObservables
tanceMatrix
LinkClosestNodes
GetObservers
byMoveThreshold
AddBridge
FilterforUnobserved
Nodesifneeded
1236.2.1 Node Generation
Algorithm Overview:
The Node Generation algorithm in the PREP Mapper is designed to identify waypoints
based on heatmap data representing event occurrences. The process involves analyzing the
spatial distribution of events and determining key locations that would serve as effective
waypoints for sensor deployment.
Notations:
• H: Heatmap matrix representing event intensity over the monitored area.
• WP: Set of Waypoint nodes, initially empty.
• r: Radius threshold for waypoint effectiveness.
1. Extract event locations.
2. Filter observed events.
3. Select waypoints based on effectiveness and spatial distribution.
1. Extract Event Locations:
E = get events(H,threshold)
Where E represents the set of event locations extracted from the heatmap data H.
Get Events (get events)
To express the get events function in terms of matrices and vector operations, we represent
it using mathematical notations that correspond to the operations performed in the code.
The function identifies cells in a heatmap where the event intensity exceeds a specified
threshold.
124Heatmap Matrix H: Represent the heatmap as a matrix H where each element
H corresponds to the intensity value at the cell located at row i and column j.
ij
Thresholding Operation: Apply a thresholding operation to identify cells where
the intensity exceeds the threshold. This can be represented as a function T(H,θ) that
returns a binary matrix M of the same dimensions as H, where each element is determined
by:


 1 if H
ij
≥ θ
M =
ij

 0 otherwise
Here, θ is the threshold (e.g., 0.9 in your code).
Reduction Across Time Dimension: The event occurrence is determined by
applying a maximum operation across the time dimension of the heatmap. This operation
identifies if an event has occurred at least once at each spatial location throughout the
dataset.
Event Locations Extraction: The function get events identifies the indices of
cells where events occurred, which corresponds to finding the row and column indices of the
matrix M where the value is 1.
Event Locations Matrix E: Represent the set of event locations as a matrix E,
where each row corresponds to the coordinates of an event. The coordinates are extracted
from the matrix M as follows:
E = {(i,j) | M = 1}
ij
The coordinates (i,j) represent the spatial locations of the events.
Bringingitalltogether,themathematicalexpressioncorrespondingtotheget events
function can be:
Extract Event Locations:
E = {(i,j) | M = 1} where M = T(H,θ)
ij
1252. Filter Observed Events (init robust net):
The init robust net function filters observed events from unobserved ones by evaluating
the proximity of sensor nodes to event nodes. This is crucial for identifying areas where
events are effectively observed and areas needing additional sensor coverage.
Function Overview:
Observed,Unobserved = init robust net(S,E,r)
This function classifies events as observed or unobserved based on their proximity to sensor
nodes, using a distance matrix and a radius threshold.
Notations:
• S: Matrix representing sensor nodes, where each row is a node with coordinates.
• E: Matrix representing event nodes, where each row is a node with coordinates.
• r: Radius threshold for determining observation effectiveness.
• DM: Distance matrix between sensor nodes and event nodes.
Distance Calculation Between Sensors and Events: The first step in the func-
tion is to calculate the distances between each sensor node and event node.
(cid:113)
DM = (S −E )2 +(S −E )2
i,j i,x j,x i,y j,y
for each pair of sensor node i and event node j, where S and S are the coordinates of
i,x i,y
the sensor node, and E and E are the coordinates of the event node.
j,x j,y
Classification of Observed and Unobserved Events: Based on the distances
calculated in the matrix DM and the specified radius r, the function then classifies events
as observed or unobserved. Events within the radius of any sensor node are considered
observed, while those outside are considered unobserved.
1263. Select Waypoints (next observer nodes):
The next observer nodes function is designed to identify optimal waypoints based on the
spatial distribution and density of unobserved events. This involves analyzing distances
among unobserved event nodes and clustering them to determine the most effective locations
for sensor placement.
Function Overview:
WP = next observer nodes(DM,r)
This function clusters unobserved event nodes based on their proximity, using a precom-
puted distance matrix and a radius threshold, to identify dense clusters that are optimal for
waypoint selection.
Notations:
• U: Matrix representing unobserved event nodes.
• r: Radius threshold for clustering.
• DM: Distance matrix among unobserved event nodes.
• WP: Set of Waypoint nodes, determined by clustering.
Distance Calculation Among Unobserved Events: Thefirststepinthefunction
is to calculate the distances between each pair of unobserved event nodes.
(cid:113)
DM = (U −U )2 +(U −U )2
i,j i,x j,x i,y j,y
for each pair of unobserved event node i and event node j, where U and U are the
i,x i,y
coordinates of the unobserved event nodes.
Clustering Unobserved Events: Using the distance matrix DM, the function
clusters unobserved event nodes based on their proximity, defined by the radius r. This step
127involves identifying all unobserved nodes within radius r of each centroid node and grouping
them into clusters.
Selecting Densest Clusters: Clusters are sorted based on their density, and the
densest clusters are selected as waypoints. This is achieved by:
WP = get densest clusters(DM,U,r)
where the function get densest clusters identifies clusters of unobserved event nodes within
radius r and selects the densest ones as waypoints.
Figure 6.1: Grid with Heat-mapped Events Figure 6.2: Waypoint Nodes with PREP Mapper
Node Generation Visualization
The figure consists of two panels, side-by-side, that illustrate the initial steps in developing a
waypoint network for mobile sensors. The left panel (Figure 6.1) shows am example heatmap
visualization, where each cell’s color represents the level of interest within that region. Bluer
128colors indicate less interesting areas, while red colors represent ”hot zones” with a higher
concentration of events of interest.
The right panel (Figure 6.2) depicts the placement of waypoint nodes which represent
potential locations for mobile sensors to visit. The goal is to optimize the placement of these
waypoints to maximize mobile sensor coverage of the most important areas (hot zones)
identified in the heatmap.
6.2.2 Link Generation
The Link Generation phase in the PREP Mapper aims to establish connections between
identified waypoints. This involves calculating distances between waypoints and generating
links based on proximity.
Notations:
• WP: Matrix representing Waypoint nodes, where each row is a node with coordinates.
• DM: Distance matrix among waypoint nodes.
• L: Set of Links between waypoints.
Distance Calculation Among Waypoints: To calculate the distances among
waypoint nodes, we represent the waypoints as a matrix WP and compute the distance
matrix DM as follows:
(cid:113)
DM = (WP −WP )2 +(WP −WP )2
i,j i,x j,x i,y j,y
for each pair of waypoint nodes i and j, where WP and WP are the coordinates of the
i,x i,y
waypoint nodes.
Generating Proximity-Based Links: The process of creating links between way-
points is based proximity. This involves identifying the nodes closest to each waypoint and
forming links accordingly. The mathematical operations are as follows:
129Notations:
• DM: Distance matrix among waypoint nodes.
• n: Number of links to be generated for each waypoint.
• L: Set of proximity-based links between waypoints.
Exclude Self-Links: First, self-links are excluded by setting the diagonal elements
of the distance matrix DM to infinity:
DM = ∞ for all i
ii
Sort Distances and Identify Closest Nodes: For each waypoint node, identify
thenclosestothernodesbasedonthedistancesinDM. Thisisdonebysortingthedistances
for each node and selecting the top n indices:
Indices = argsort(DM )[0 : n]
i i,:
Create Link Tuples: Links are then formed as tuples of node indices and their
corresponding distances. Each link connects a waypoint to one of its n closest nodes:
num nodes
(cid:91)
L = {(i,Indices ,DM ) : j = 1,...,n}
i,j i,Indicesi,j
i=1
where num nodes is the total number of waypoint nodes and Indices is the j-th closest
i,j
node to waypoint i.
Unique Edge Identification: After generating the links, it’s crucial to ensure the
uniqueness of these links and avoid redundancy. This process involves organizing the edges,
sorting them lexicographically, and filtering out duplicates. The mathematical operations
for this process are as follows:
Notations:
130• L: Initial set of links (edges) between waypoints.
• L : Final set of unique links between waypoints.
unique
Organizing Edge Columns: First, reorganize each edge such that the smaller node
index appears first. This is done by comparing the node indices in each edge and swapping
them if necessary:


 (i,j) if i < j
for each (i,j,d) ∈ L, (i′,j′) =

 (j,i) if i > j
where d is the distance between nodes i and j, and (i′,j′) are the reorganized node indices.
Lexicographical Sorting: Sort the edges lexicographically based on the organized
node indices. This can be represented as:
L = sort lexicographically(L)
sorted
where L is the sorted set of edges.
sorted
Filtering Unique Edges: Finally, filter out duplicate edges to retain only unique
connections. This involves comparing adjacent edges in the sorted list and selecting edges
that are not duplicates:
L = unique(L )
unique sorted
where L represents the set of unique edges.
unique
Link Generation Visualization
This Figure 6.3 illustrates link generation, building upon the waypoint nodes. Edges are
formed between waypoint nodes based on proximity-based thresholds. Waypoints within a
defined radius of each other are connected by edges. These edges serve as potential nav-
igation routes for the mobile sensors, ensuring connectivity within the network. The goal
131is to optimize the generation of edges to ensure effective routes that enable comprehensive
coverage by the mobile sensors.
Figure 6.3: Waypoint Links with PREP mapper
1326.3 Phase 2: TED Predictor
Overview The TED (Temporal Event Dynamics) Predictor represents a pivotal element
in the ROBUST Network, tasked with the critical function of determining active waypoints
in dynamic environments. It operates by analyzing spatiotemporal data, primarily focusing
on the intensity and distribution of events as captured by heatmaps. This phase is central
to the network’s adaptability, enabling it to respond effectively to changing conditions and
requirements.
WaypointNetwork TEDPredictor SortedWaypointsList
GetTimeFrame
GetActiveNodes
RankActiveNodes
Figure 6.4: Process flow from Waypoint Network to Ranked Active Nodes.
6.3.1 Perfect Knowledge vs Imperfect Knowledge
The TED Predictor operates under two distinct scenarios: Perfect Knowledge and Imperfect
Knowledge, each with its implications for the network’s functionality and accuracy.
Perfect Knowledge Scenario
In Perfect Knowledge, active waypoints are identified directly from heatmaps, eliminating
forecasting errors. This process involves analyzing the concentration and positioning of
high-intensity events in the heatmaps.
133Imperfect Knowledge Scenario
Imperfect Knowledge involves making predictions about event occurrences, potentially lead-
ing to discrepancies with actual data. This is significant in real-world scenarios where future
events are forecasted based on historical or probabilistic data.
Error Computation
Error measurement quantifies the discrepancy between outcomes in Perfect and Imperfect
Knowledge scenarios. This evaluates the precision of predictions and guides future planning
strategies.
Mathematical Expressions
• Heatmap Data Representation: H : Heatmap matrix at time t, showing event
t
intensities. θ: Threshold for significant event intensity.
• Identifying Active Waypoints: For each timeframe t, active waypoints are identi-
fied using H and densest clusters. A : Set of active waypoints at time t.
t t
A = get active nodes using clusters(H ,Densest Clusters,θ)
t t
• Sorting Active Waypoints: Waypoints are sorted based on the number of unique
high-intensity events they observe. A : Organized array of active waypoints at
t,sorted
time t.
• Perfect vs Imperfect Knowledge: Compares active waypoints determined under
Perfect Knowledge with forecasts under Imperfect Knowledge. Error: Variation in
number or location of active waypoints between scenarios.
Error = |A −A |
t,perfect t,imperfect
134Analytical Breakdown of Waypoint Activation Process
• Event Intensity Thresholding: Implementing a threshold to the heatmap to dis-
tinguish significant events.


 1 if H
t,ij
≥ θ
M =
ij

 0 otherwise
• Activation Assessment for Waypoints: Evaluating whether waypoints cover high-
intensity events and marking them as active for the corresponding timeframe.
• Prioritization of Waypoints: Waypoints are ranked based on the count of unique
events they cover, focusing on those with a wider event coverage.
Concluding Note Errors in the prediction phase can lead to ’regret’ in the planning
phase. This regret represents the discrepancy in effectiveness of sensor placements evaluated
against the outcomes from the prediction phase. This understanding is vital for enhancing
both prediction and planning approaches within the ROBUST Network.
This section details the TED Predictor’s methodology, aligning with the principles of
selecting and appraising active waypoints in a comprehensive and mathematical manner.
Visualization of TED Predictors
This figure depicts the activity of a waypoint network across two timesteps. The left panel
shows the network at timestep 0 (Heatmaps-Timestep: 0) and the right panel shows the
network at timestep 1 (Heatmaps-Timestep: 1). The waypoints represent potential locations
for mobile sensors, and their colors indicate their activity levels.
Node Colors:
• Gray: Inactive waypoints at the current timestep.
• Lime Green: Active waypoints at the current timestep.
135• Gold: Highly active waypoints, in range of the most significant event at the current
timestep (Top 5).
Top Panel (Timestep 0): The Top panel 6.5 displays the initial state of the waypoint
network. It shows the distribution of active and inactive waypoints at timestep 0, along
with any highly active waypoints in proximity to the top 5 most significant events at that
timestep.
Bottom Panel (Timestep 1): The bottom panel 6.5 illustrates the evolution of waypoint
activity between timestep 0 and timestep 1. The colors of the waypoints reflect their activity
levels at timestep 1, again indicating inactive, active, and highly active waypoints based on
their proximity to the top 5 most significant events at that timestep.
By comparing the two panels, we can observe the changes in waypoint activity over
time and identify how the network adapts to the evolving distribution of significant events.
136Figure 6.5: TED Predictor results over two timesteps. Top: time 0 showing best nodes
(gold) and active nodes (lime) with perfect knowledge. Bottom: time 1 showing best nodes
(gold) and active nodes (lime) with perfect knowledge.
1376.4 Phase 3: WAITR Planner (Perfect Knowledge)
Overview
The WAITR (Weighted Aggregate Inter-Temporal Reward) Planner is the final phase in the
ROBUST Network for mobile sensors. It focuses on calculating optimal sensor paths and
positions based on event dynamics and network constraints.
Reward Weight Piece-wise Temporal Path
Input Path Selection Best Paths
Initialization Pathlets Generator
Event Count Waypoint Rank Paths
TED Output Initialize Path
as Weights Graph by Reward
Shortest Path Get Node from Get No
up to hop limit Lookup Table Overlap Paths
Lookup Table
Sum Rewards
for pathlets
Append
Frame Paths
Figure 6.6: Flow chart representation of the process from input to best paths selection.
6.4.1 Weight Initialization
In the weight initialization process, we assign weights to waypoint nodes based on the event
counts. The weights are indicative of the number of events covered by each waypoint node
at different timeframes.
138Mathematical Representation
Let’s define the following notations:
• W: A matrix representing the weights of waypoint nodes across different timeframes.
• E: A matrix representing the event counts for each waypoint node across different
timeframes, with missing counts represented as null or a specific placeholder (like
NaN).
• N: The number of waypoint nodes.
• T: The number of timeframes.
The initialization of node weights can be mathematically expressed as:


 E
t,n
if an event count is available for node n at timeframe t,
W =
t,n

 0 otherwise (if event count is missing or null).
for each t from 1 to T and each n from 1 to N.
In this expression, W denotes the weight assigned to the n-th waypoint node at the
t,n
t-th timeframe. If E is available (i.e., not null or missing), W is set to E . Otherwise,
t,n t,n t,n
W is set to zero. This ensures that all waypoint nodes have a defined weight, either based
t,n
on actual event counts or defaulting to zero where data is unavailable.
6.4.2 Generate Piecewise Pathlets
Thegenerationofpiecewisepathletsinvolvesconstructingagraph-basednetworkofpotential
routes or ’pathlets’ between nodes, taking into account a maximum number of hops. This
methodology is integral to efficient sensor movement planning in the WAITR Planner.
139Mathematical Representation using Graph Theory
Let’s define the following notations:
• G(V,E): A graph where V represents the set of nodes (waypoint nodes) and E repre-
sents the set of edges (unique links between nodes).
• H : The maximum number of hops allowed for paths between nodes.
max
• P: A lookup table for storing the shortest pathlets between nodes in G.
The process of generating piecewise pathlets can be described as follows:
1. Graph Construction: Formulate a graph G(V,E) using the waypoints as nodes V
and the unique links as edges E.
2. Pathlet Calculation: For each node v ∈ V, calculate the shortest pathlets to other
nodes within H hops using an algorithm like Dijkstra’s.
max
3. Lookup Table for Pathlets: Populate the lookup table P with these pathlets, where
P[v] contains all the pathlets originating from node v within the hop limit H .
max
P[v] = {pathlets from node v to other nodes within H hops in G}
max
6.4.3 Temporal Path Generation
The Temporal Path Generation process in the WAITR Planner is crucial for extending paths
acrossdifferenttimeframeswhileaccumulatingrewards. Thissubsectionwillmathematically
detail this process.
Notations:
• G(V,E): Graph representing the network of waypoint nodes.
140• P: Lookup table for storing paths between nodes in G.
• W: Matrix of node weights (rewards) across different timeframes.
• T: Number of timeframes.
• R: Reward value associated with each node.
• NP: New paths generated across timeframes.
• OP: Optimal paths selected considering the number of sensors.
Temporal Path Append
1. Initialize Current Paths: At the start, for each node v at timeframe t , create initial
0
paths:
NP[v,0] = [v]
2. Extend Paths Across Timeframes: Foreachsubsequenttimeframet, foreachnode
v in G:
• Retrieve possible next nodes from P[v].
• Calculate the new accumulated weight (reward) for reaching each next node.
• Update NP by appending these next nodes and their corresponding accumulated
rewards.
Represented as:
(cid:91)
NP[v,t] = {(next v,R[next v]+NP[v,t−1]) : for next v ∈ P[v]}
6.4.4 Path Selection
The Path Selection process in the WAITR Planner is critical for choosing the most rewarding
paths. This subsection will mathematically detail this process.
141Notations:
• TS: Temporal scores, a set of tuples (weight, path) representing the reward and cor-
responding path.
• N : Number of sensors.
S
• OP: Optimal paths selected based on rewards and constraints.
• UN: Set of used nodes to avoid overlaps in path selection.
Optimal Path Selection
1. Flatten Temporal Scores: Convert TS into a list of tuples (weight, path) and sort
them by weight in descending order.
All Paths = sort({(w,p) : (w,p) ∈ TS},by w,descending)
2. Select Paths: Iterate through the sorted paths and select paths avoiding overlaps:
• Initialize OP as an empty set and UN as an empty set.
• For each path p in All Paths:
(a) Check for overlap: if any node in p is already in UN, skip to the next path.
(b) Otherwise, add p to OP and add its nodes to UN.
(c) If the size of OP equals N , break the loop.
S
Expressed as:
OP = {p : p ∈ All Paths,no overlap with UN,up to N paths}
S
142WAITR Visualization
Thisfigureconsistsoftwopanels, side-by-side, thatillustratetheplacementofmobilesensors
using WAITR at two distinct timesteps. The top panel (Figure 6.7) depicts the initial
sensor configuration at timestep 0, while the bottom panel (Figure 6.7) shows the sensor
arrangement at timestep 1.
Sensor Representation:
• Yellow Stars: These yellow stars represent the mobile sensors deployed in the simula-
tion environment. Their placement adheres to specific constraints, such as a maximum
movement range of two hops (denoting the number of neighboring waypoints a sensor
can move to in a single step).
Node Colors:
• Gray: Inactive waypoints at the current timestep.
• Lime Green: Active waypoints at the current timestep.
• Gold: Highly active waypoints, in range of the most significant event at the current
timestep (Top 5).
Timestep Differentiation: The key takeaway from this visualization is the difference in
sensor placement between the two timesteps. By comparing the left and right panels, we
can observe how the WAITR system strategically repositions its mobile sensors across the
environmenttopotentiallygathermorevaluableinformationoradapttochangingconditions.
Overall, this figure serves as a visual representation of the dynamic sensor planning
process within the WAITR simulation.
143Figure 6.7: Sensor placements in WAITR Planner over two frames. Top: time 0. Bottom:
time 1. Yellow stars are sensors with 2-hop movements. Best nodes in gold, Active nodes in
lime, Inactive in gray.
1446.5 Phase 3: WAITR Planner (Imperfect Knowledge)
Overview The WAITR (Weighted Aggregate Inter-Temporal Reward) Planner under Im-
perfect Knowledge involves complex decision-making processes, incorporating estimations
and predictions about future events. This phase adapts to the inherent uncertainty of dy-
namic environments, aiming to optimize sensor paths and positions in the face of incomplete
or uncertain data.
6.5.1 Conceptualizing Reward in Observer Node Dynamics
• Under Imperfect Knowledge, the concept of ’reward’ in observer node dynamics takes
on a probabilistic aspect, factoring in the likelihood of event occurrences and their
potential impact.
• Thisinvolvesestimatingtheprobabilityofeventsatvariousnodesandadjustingreward
calculations accordingly.
6.5.2 Conceptualizing Regret in Observer Node Dynamics
• ’Regret’ in this context refers to the measure of missed opportunities or suboptimal
decisions due to imperfect predictions.
• This involves assessing the difference between the outcomes of decisions made under
uncertainty and those that would have been made with perfect information.
6.5.3 Toward Spatiotemporal Regret Assessment
• The assessment of regret in spatiotemporal dynamics includes evaluating the temporal
and spatial aspects of decision-making under uncertainty.
• This involves mapping regret over time and space, to understand where and when
suboptimal decisions are likely to occur.
1456.5.4 Risk Aversion in Observer Node Strategy
• Strategies under Imperfect Knowledge often incorporate elements of risk aversion, pri-
oritizing decisions that minimize potential negative outcomes.
• This involves weighting decisions based on their associated risks and potential rewards,
considering the uncertainty of predictions.
6.5.5 Cost-Benefit Analysis
• Cost-benefit analysis in this phase weighs the potential benefits of certain sensor place-
ments against their costs, including the risk of inaccurate predictions.
• This involves a thorough assessment of potential outcomes and their respective prob-
abilities.
6.5.6 Imperfect Knowledge Visualization
This subsection presents a visualization from the benchmarking dataset that highlights the
challenges associated with imperfect knowledge, data acquisition, and information decay in a
scenario with mobile sensors. The image depicts a grid-like environment with twenty frames,
representing different timesteps.
Imperfect Knowledge:
• Limited View: Three mobile sensors are depicted, each with a limited field of view
represented by the colorful cells surrounding them. This limited view restricts the
sensors’ ability to perceive the entire environment at once, forcing them to explore
and gather information incrementally. The white cells surrounding the colored areas
represent the unknown portions of the environment that the sensors haven’t explored
yet.
146• Data Acquisition: As the sensors move through the environment, they discover new
information and update their understanding of the world. This process of uncovering
the unknown (white cells) and populating them with colors signifies data acquisition.
Information Decay (Outdated Information):
• Faded Cells: The visualization also includes faded colored cells, which can be inter-
preted as outdated information. Since the environment might be dynamic, these faded
cells could represent previously observed states that are no longer accurate. This high-
lights the challenge of information decay, where previously acquired knowledge may
become irrelevant over time.
Overall, this visualization effectively showcases how imperfect knowledge, data acqui-
sition, and information decay can impact the performance of mobile sensors in an unknown
environment.
Key Points:
• The sensors have a limited view of the environment.
• Sensors actively acquire data by exploring and uncovering the unknown.
• Faded colors represent potentially outdated information.
147Imperfect Knowledge - Frame 0 Imperfect Knowledge - Frame 1
Imperfect Knowledge - Frame 2 Imperfect Knowledge - Frame 3
148Imperfect Knowledge - Frame 4 Imperfect Knowledge - Frame 5
Imperfect Knowledge - Frame 6 Imperfect Knowledge - Frame 7
149Imperfect Knowledge - Frame 8 Imperfect Knowledge - Frame 9
Imperfect Knowledge - Frame 10 Imperfect Knowledge - Frame 11
150Imperfect Knowledge - Frame 12 Imperfect Knowledge - Frame 13
Imperfect Knowledge - Frame 14 Imperfect Knowledge - Frame 15
151Imperfect Knowledge - Frame 16 Imperfect Knowledge - Frame 17
Imperfect Knowledge - Frame 18
1526.6 Scalability of the ROBUST Network
6.6.1 Introduction to Scalability in the ROBUST Network
The design and operational efficiency of the ROBUST Network are critically hinged on its
scalability. Scalability, in the context of this network, refers to the ability to efficiently
adapt and perform under varying scales of operation, ranging from small, localized events to
large-scale,complexscenarios. Thischapterdelvesintothemultifacetedaspectsofscalability
withintheROBUSTNetwork, examininghowitsarchitectureandalgorithmscatertodiverse
and expanding operational needs.
6.6.2 Matrix and Vector-Based Operations
A core aspect of the ROBUST Network’s scalability lies in its extensive use of matrix and
vector-based operations. These mathematical structures provide a robust framework for
representing complex data and relationships in a compact and computationally efficient
manner. By leveraging linear algebraic constructs, the network achieves a high degree of
flexibility and efficiency in processing large datasets, which is essential for scalability.
Efficient Data Handling
Matrix and vector operations allow for efficient handling and manipulation of large volumes
of data. This efficiency is pivotal in scenarios where the network has to process extensive
spatiotemporal data, such as large-scale event heatmaps or intricate sensor network layouts.
The ability to perform bulk operations on matrices and vectors significantly reduces com-
putational overhead, enabling the network to scale up operations without a proportional
increase in processing time or resource utilization.
153Algorithmic Scalability
The algorithms employed in the ROBUST Network, including those for waypoint identifica-
tion, path generation, and sensor placement, are inherently scalable due to their matrix and
vector-based nature. These algorithms can seamlessly adapt to varying sizes of input data,
maintaining their effectiveness and efficiency. Whether it’s processing a small set of nodes or
accommodating an extensive network of sensors and waypoints, the underlying matrix and
vector operations ensure consistent performance.
6.6.3 Dynamic Adaptation to Network Size
The ROBUST Network’s architecture is designed to dynamically adapt to the size of the
operational environment. This adaptability is crucial in ensuring scalability, as it allows the
network to maintain optimal performance irrespective of the scale of deployment.
Modular Design
The ROBUST Network’s modular design is exemplified in its distinct phases: the Map-
per, Predictor, and Planner. Each of these phases represents a core module with specific
operational responsibilities, tailored to address different aspects of network functionality.
-TheMapper Moduleisresponsibleforgeneratingandupdatingthenetwork’sspa-
tial layout, identifying key waypoints and establishing links between them based on real-time
data. - The Predictor Module, as the name suggests, focuses on forecasting and deter-
mining active waypoints, using both Perfect and Imperfect Knowledge scenarios to enhance
decision-making accuracy. - The Planner Module is tasked with the strategic allocation of
resources and sensors based on the insights provided by the Mapper and Predictor modules.
This division into distinct yet interdependent modules allows each part of the network
tobescaledandadaptedindependently, accordingtotheevolvingneedsandchallengesofthe
operational environment. Such a modular approach not only augments the network’s flexi-
bility but also ensures that resources are allocated efficiently, optimizing overall performance
154across various scales of operation.
6.6.4 Conclusion
In conclusion, the scalability of the ROBUST Network is a fundamental attribute that un-
derpinsitseffectivenessacrossdiverseoperationalcontexts. Thenetwork’sdesign, leveraging
matrix and vector-based operations, equips it with dynamic adaptation capabilities and an
efficient approach to managing large-scale scenarios. This scalability is especially critical in
temporal-based problems, where the sequential nature of time can lead to a combinatorial
explosion in possible outcomes.
6.7 ROBUST and Continuous Sampling
6.7.1 Introduction
ThischapterdelvesintotheadaptationoftheROBUSTNetworktoaccommodatecontinuous
dynamic sensor placements. In contrast to previous models that focused on the weight from
thelastnode, thisapproachtakesintoaccountthecumulativeweightofentirepathsegments.
This is particularly relevant in scenarios where sensors have the capacity to traverse more
than one position per timeframe.
6.7.2 Phase 3: WAITR Planner (Perfect Knowledge)
Overview Under the paradigm of Perfect Knowledge, the WAITR (Weighted Aggregate
Inter-Temporal Reward) Planner plays a critical role in the network. Its goal is to compute
optimal sensor paths and positions based on the total reward of entire path segments.
1. Reward Weights Initialization
2. Generation of Piecewise Pathlets
1553. Temporal Path Generation with Path Segment Weights
4. Selection of Optimal Paths Considering Path Segment Rewards
6.7.3 Weight Initialization
This process involves assigning weights to waypoint nodes based on the event counts at
different timeframes, similar to the previous method.
Generation of Piecewise Pathlets
Constructing a graph-based network of ‘pathlets’ between nodes, this step considers the
maximum number of hops possible, which is essential for planning sensor movements.
Temporal Path Generation with Path Segment Weights
This section deviates from the previous approach by extending paths across timeframes and
accumulating the rewards for entire path segments.
Temporal Path Append with Path Segment Weights
In this approach, paths are extended across timeframes by considering the total rewards of
path segments, rather than just focusing on the last node.
6.7.4 Path Selections Considering Path Segment Rewards
During the Path selection stage this adaptation is consistent with the previous approach
as it gives priority to paths based on their accumulated rewards across all nodes traversed,
ensuring efficient sensor coverage and utility.
156Chapter 7
Case Study I: Oceanographic
Monitoring
7.1 Introduction
The Gulf of Mexico (GoM) is environmentally and economically vital to the US. Its coastline
extends across five U.S. states: Texas, Louisiana, Mississippi, Alabama, and Florida. It
hosts multiple major ports and transportation waterways which provide the US with many
critical resources: oil, gas, wind, waves, and seafood Association [2017]. A diverse group
of commercial, academic, federal, and local organizations jointly support operations in the
GoM to observe, measure, and study the region. However, the GoM is vast, with over
17,000 miles of shoreline, and its basin encompasses 600,000 square miles. Despite the
concerted effort between organizations to build a shared sensor array, the current number of
sensors only observes a sparse fraction of the GoM Association [2018]. It is critical to supply
these institutions with guidance on where optimal new sensor placements may go to best
contribute to the sensor array. When considering that the GoM continuously changes states,
this problem becomes even more challenging. Unlike land terrain which remains relatively
stable, water bodies are dynamic systems National Academies of Sciences, Engineering, and
157Medicine [2018]. Network models and analysis provide key insights into where to place new
GCOOS sensors.
7.2 Background
Various ongoing initiatives are engaged in monitoring and reporting both historical and real-
time states of the GoM. This paper focuses on two: The Gulf of Mexico Coastal Ocean
Observing System (GCOOS) and HYbrid Coordinate Ocean Model (HYCOM).
7.2.1 GCOOS
The GCOOS is the Gulf of Mexico regional component of the U.S. Integrated Ocean Observ-
ing System (IOOS). It is the only certified comprehensive data collection and dissemination
center for coastal and ocean data in the Gulf. GCOOS collects data from 1,655 sensors
located at 163 non-federal and 159 federal stations Association [2018].
7.2.2 HYCOM
HYCOM is a real-time three-dimensional grid mesh ocean model with 1/25° horizontal res-
olution that provides eddy-resolving hindcast, nowcast, and forecast as numerical states of
the GoM. HYCOM assimilates data from various sensors, including satellites, buoys, ARGO
floats, and autonomous underwater gliders (AUGs). The forecast system is the Navy Cou-
pled Ocean Data Assimilation (NCODA); a multivariate optimal interpolation scheme that
assimilates surface observations. By combining these observations via data assimilation and
using the dynamical interpolation skill of the model, a three-dimensional ocean state can be
more accurately nowcast and forecast Chassignet et al. [2007b].
1587.3 Objective
This research aims to construct a ROBUST network using HYCOM and the observational
sensor data from GCOOS. This ROBUST network aims to identify regions of interest within
the HYCOM model to recommend how best to utilize the sensor array of GCOOS and
provide guidance on where to expand it.
7.4 Motivation
LocalizedregionsoftemporalvariabilitywithinHYCOMhindertheaccuracyofitsnowcast/-
forecast. A region of temporal variability occurs where significant changes in a numerical
propertyexistwithinthesamecoordinatebetweentwoconsecutivetemporalframesHolmberg
[2014a]. HYCOM produces nowcasts and forecasts by combining its real-time observations
and prior historical data. The forecasting error rate generally increases as the values between
snapshots differ Holmberg [2014a]. The best approach to mitigate such regions of temporal
variability is to acquire new observations to feed into HYCOM Holmberg [2014a]. The next
set of nowcasts and forecasts will then use the most up-to-date measures and ensure the er-
ror rate is as minimal as possible. By placing instruments into the regions of interest (RoI),
GCOOS can get the data needed to maximize the accuracy rate in the HYCOM nowcast-
ing and forecasting model. However, the number of sensors is limited and proper planning
should maximize their effectiveness in improving the nowcasting and forecasting model.
7.5 Approach
By modeling a ROBUST network composed of a set of observable nodes representing the
RoI within the GoM and a set of observer nodes representing the GCOOS sensors. An RoI is
identified by taking a set of temporal snapshots from HYCOM and computing the residuals
over time, where the residual is the magnitude difference between snapshots. The nodes
159representing the GCOOS sensors have attributes consistent with that particular instrument,
such as its operational status, geo-coordinates, current data readings, mobility speed, and
institutional membership. The ROBUST network establishes a link between the sensor
nodes to all potential nearby RoI nodes. It facilitates the decision-making to assess which
location to recommend planning for new installations for sensors, for relocation, or when to
perform maintenance. Other decisions involving the sensor array might be when and where
to grow the sensor network. Monte Carlo simulations identify optimal sensor placements by
attempting to add a GCOOS node to the ROBUST network randomly, and its effectiveness
is then subsequently evaluated.
7.6 Methods
This is a stochastic problem, therefore there is no deterministic solution. Consequently, it is
best to rely on random samplings to construct temporal graph representations by evaluating
potential outcomes between GCOOS sensor placements and RoI positions. Graph analysis
identifiesandselectstheoptimalpositionstomaximizetheGCOOScoverageanditscoverage
robustness.
7.6.1 Temporal Graph Representation
ROBUST network is a type of temporal graph. A temporal network is an ordered set of
static graphs. The ordering is the static network’s temporal occurrence or ”snapshot” at a
particular timestamp.
(cid:16) (cid:17)
TG = G , G , ..., G (7.1)
t0 t1 tn
where a Graph is a set of Nodes and a set of Edges.
(cid:16) (cid:17)
G = N, E (7.2)
1607.6.2 ROBUST Network Model
A geo-spatiotemporal network comprises a set of geo-spatiotemporal nodes and a set of
geo-spatiotemporal edges. A geo-spatiotemporal node has a geographical longitude/latitude
coordinate and may occur at select times or be persistent across all times. It may also move
over time or remain stationary. A geo-spatiotemporal edge connects two nodes and may
occur just once, at multiple times, or across all times. Geo-spatiotemporal edges have a
numerical weight representing the geodesic distance between the linked nodes. This graph
model assumes a bipartite network structure, ideal for mapping relations between two sets
of nodes Bondy and Murty [1976].
ROBUST Nodes
Since this is a bipartite network, there are two types of nodes, observers and observables.
Both types of nodes in this ROBUST network represent geospatial coordinate points within
the GoM, but they differ in the following ways, as outlined in this section.
GCOOS Sensors (static)
GCOOS sensor nodes are observer types. GCOOS sensor nodes are modeled as static or
stationary, which means their geolocation is persistent across all time frames. The properties
of each GCOOS node are in Table 1.
HYCOM RoI Events (temporal)
HYCOM RoI nodes are observable types. HYCOM RoI nodes represent locations between
consecutive snapshots where a significant change occurred in an observation. The proper-
ties for each RoI node are in Table II and Table III. The residual formula quantifies the
161Table 7.1: (GCOOS) Observer Node Properties
Label Description
id Unique identifier number for each node
membership Federal asset or local data node (ldn) asset
data source Institution that operates the GCOOS sensor
platform Name of observatory platform
mobility Stationary or mobile
geolocation Latitude and Longitude of platform
operational status Active or Inactive
observationsa Types of measures sampled by this platform
aObservationswerelimitedtothoseusedbytheHYCOMforecastingmodel,whicharetemperature,salinity,
and ocean current velocities.
significance of the change between snapshots.
Table 7.2: (HYCOM RoI) Event Node Properties
Label Description
id Unique identifier number for each node
geolocation Latitude and Longitude of platform
RoI snapshots Temporal dictionary with corresponding ROI data
(see: Table III)
i) Residual formula
In this paper, a residual is the squared difference between a given value from the same
geospatial coordinate at two different times. Squaring the difference serves dual purposes.
The first purpose is to ensure that the residual is always positive between the two times. The
second purpose is to boost or diminish the residual based on the magnitude of its difference.
If the difference is less than 1, it is diminished; if it is greater than 1, it is boosted. See Fig.
1 for a visualization of the residuals between two frames.
(cid:0) (cid:1)2
residual = value −value (7.3)
tn+1 tn
162Table 7.3: RoI Snapshot Properties
Label Description
snapshots Nested Dictionary, outer keys are timestamps,
inner keys are HYCOM observations.
The value is the residual score (real number)
Figure 7.1: Computing residuals between time frames
In Fig. 7.1, the top and middle images are colormaps of the water temperature from
the HYCOM model separated by a 24-hour period. The bottom image is a colormap illus-
trating the residual difference between the two frames. These brighter locations within the
bottom image depict the regions of interest for water temperature.
ii) RoI formula
The RoI is computed as the sum of residual values across all observations between time t
n
and t . The resulting value is then compared to a thresholding value to determine if it is
n+1
163an RoI or ignored. The threshold value in Fig. 2 and Fig. 3 is 0.5.
 
(cid:88)   residual(v) ≥ threshold  
RoI = (7.4)
v∈observations  otherwise 0  
ROBUST Edges
ROBUST edges link GCOOS nodes and HYCOM nodes. Edge generation starts with an
RoI Node and pairs with a GCOOS Node based on the shortest geodesic distance from the
RoI node to the closest GCOOS node. The geodesic distance, in this case, is the spherical
distance between two points, otherwise known as the ”great circle distance” or “haversine”
distance.
dx = sinθ ·sinθ
LAT1 LAT2
dy = cosθ ·cosθ ·cos(θ −θ ) (7.5)
LAT1 LAT2 LON1 LON2
distance = arccos(dx+dy)·R
Note:
distance = distance between two coordinates.
R = radius of Earth (approximately 6371.0090667KM)
θ = Latitude of the first coordinate in radians
LAT1
θ = Latitude of the second coordinate in radians
LAT2
θ = Longitude of the first coordinate in radians
LON1
θ = Longitude of the second coordinate in radians
LON2
164ROBUST Realizations
In Fig. 7.2, the GCOOS sensor nodes are colored red and remain stationary. In contrast, the
HYCOM RoI nodes are grayscale with coloring relative to the strength of the residual and dynamic
between frames. In Fig. 7.3, the zoom window is the same position but each snapshot differs as the
set of RoI nodes varies, illustrating the inherent stochastic problem of selecting optimal placements
for new sensors.
Figure 7.2: A snapshot of ROBUST Network at time t . (Global view)
0
Figure 7.3: Two temporal snapshots of the ROBUST network at times t and t from same
0 2
region. (Zoom view)
7.7 Analysis
ThegoaloftheROBUSTnetworkistomeasuresensorplacementstrategies. CoverageandCoverage
Robustness are the primary and secondary considerations used to measure the effectiveness of the
165spatial configuration of the ROBUST network sensor nodes. These measures are defined in the
subsections below.
7.7.1 Coverage measure
This measure quantifies the coverage of the GCOOS sensor nodes to the HYCOM RoI nodes across
all snapshots in the ROBUST network. A maximal coverage would result in a GCOOS sensor node
typically being close to an HYCOM RoI node. A suboptimal coverage could result in GCOOS
sensor nodes being out of range from the HYCOM RoI nodes.
Static Coverage
The static network coverage may be numerically computed as the sum of edge weights across all
edges for a single discrete time step. This ROBUST Network encodes the geospatial distance
between the closest GCOOS sensor node and an HYCOM RoI node as the edge weight. Given a
set of weights, the formula below provides the coverage score for that timestep.
(cid:88)
coverage = edge weights (7.6)
Temporal Coverage
There are two approaches for measuring temporal network coverage by expanding the above defi-
nition for the static coverage measure:
Sum of Static Coverage Scores
The total temporal coverage is the sum of the static coverages across all timesteps within the
ROBUST Network.
166(cid:88)
total temporal coverage = coverage(t) (7.7)
t∈Timesteps
This approach may be unduly influenced by the presence of a bimodal distribution of cov-
erage scores across the ROBUST Network timesteps. One poor performance in a timestep heavily
penalizes the total temporal coverage, or one positive performance greatly benefits it.
Average of Static Coverage Scores
The average temporal coverage score better represents the expected coverage for any given time
step within the ROBUST Network by using the quotient between the total temporal coverage and
the total number of time steps. The Average Temporal Coverage is the primary measure used to
rank the performance of the ROBUST Network configurations in this paper.
total temporal coverage
average temporal coverage = (7.8)
number of timesteps
7.7.2 Coverage Robustness measure
This measure quantifies the robustness of the GCOOS sensor nodes in its ability to cover the HY-
COM RoI nodes adequately. Maximal robustness results in a network configuration whereby the
coverage would be minimally affected by removing a critical sensor node. With minimal robust-
ness, removing a sensor node may substantially penalize the coverage score. Nodal centrality is
a useful measure for determining the most critical sensor positions. To maximize robustness, the
distribution of degree centrality should spread across multiple nodes instead of residing in only a
few select critical nodes.
Static Degree Centrality
The static network degree centrality computes the distribution of edges across the GCOOS sensor
167nodes within the network. The distribution is the count of edges per node against the degree fre-
quency across all nodes.
Temporal Degree Centrality
There are two approaches to measuring the temporal network degree centrality.
Overall Centrality
The sum of all connections each node has through time over the entire temporal sequence Nicosia
et al. [2013c].
Per-Timestep Centrality
The sum of all connections each node has through time per time point Nicosia et al. [2013c].
Viasimulations,thenetworkrobustnessisevaluatedbyremovingthenodeswiththehighest
nodal degree and recomputing the new network edges based on the revised distances to derive the
new coverage score. If the coverage score increases significantly, the network is fragile to the loss
of sensor nodes. If the coverage score remains relatively stable, the network is robust to the loss of
sensor nodes.
7.8 Optimizing Placements of New Sensor Nodes
Identifying the optimal placements for new sensor nodes must start from the initial GCOOS sensor
configuration. Given the stochastic nature of the HYCOM RoI nodes, a Monte Carlo simulation
strategy determines the best locations for new GCOOS sensor nodes. The goal is to identify a
nodal configuration that both distributes centrality and minimizes edge distances.
1687.8.1 Monte Carlo Simulation
A Monte Carlo simulation is helpful to identify the probability of different outcomes in a non-
deterministic environment due to the intervention of random variables Mooney [1997]. In the case
of this ROBUST network, it is the HYCOM RoI node placements per timestep that are random.
The Monte Carlo simulation begins by selecting a random coordinate within the spatial
domainoftheROBUSTnetwork. ThatcoordinateisthenusedtoinsertanewGCOOSsensornode
into the ROBUST network and recompute all of the edges. The updated edge list produces a new
average temporal coverage score. That new coverage score compares against the current optimal
placement’scoveragescore. Ifthenewscoreislessthanthecurrentoptimalscore,thenthatrandom
coordinate is saved at its optimal position. Repeating this process a suitably high number of times
to exhaustively search the spatial space identifies the best location, which maximizes coverage
across all timesteps in the testing dataset.
An advantage of the Monte Carlo approach is that it is a distributed process at its core
sinceeachsimulationisindependentoftheothers. Toidentifyoptimalpositionsformultiplesensors
within the ROBUST network, perform this process sequentially, one node at a time.
7.9 Case Study Results
All results use the Average Total Coverage measure. The score for the initial GCOOS sensor
configuration is below.
7.9.1 Initial Sensors
coverage score: 180222.806856
169Figure 7.4: Sequence of Temporal Snapshots of the ROBUST network with the initial
GCOOS sensor configuration
7.9.2 First New Sensor
The Monte Carlo simulation with 1,000 trials.
longitude: -78.7403109976445
latitude: 24.385624429875215
coverage score: 160873.88100
170Figure 7.5: Sequence of Temporal Snapshots of the ROBUST network with the suggested
position for a new sensor represented as a green star
7.9.3 Second New Sensor
The Monte Carlo simulation with 1,000 trials.
longitude: -85.81532374804107
latitude: 22.561994782989117
coverage score: 147411.742470
171Figure 7.6: Sequence of Temporal Snapshots of the ROBUST network with the suggested
position for a 2nd sensor represented as a yellow star
1727.10 Discussion
The results illustrate how this approach uses a bipartite network model to capture the coverage
performance between persistent observers and observable stochastic events within a spatial envi-
ronment and successfully identify near-optimal locations to expand the observer array.
As seen in the Results section, the coverage score significantly decreases with the insertion
of both the first and second new nodes. Notice that the placement of each new node maximizes its
coverage across all times.
The results identified through this process would then support any management decisions
fromtheplatform/stationoperators/ownerswhentheyintendtoaddnewobservationalequipment.
We can expand the guidance provided with even more information by performing commu-
nity clustering on the observer or the observable nodes. For example, we can cluster the GCOOS
platform nodes into different communities based on their platform ownership status. Alternatively,
the HYCOM RoI nodes can be clustered together in communities based on their observation type.
The Robust network can model such constraints; however, these levels of fine detail and consider-
ation are omitted from the scope of this paper.
173Chapter 8
Case Study II: Urban Safety
8.1 Introduction
In response to escalating crime and a diminished police presence Simerman and Adelson [2022],
New Orleans—besieged by over 250,000 Calls for Service (CFS) in 2022, of which over 13,000 were
violent—hasadoptedReal-TimeCrimeCamera(RTCC)systemsasastrategiccountermeasureCity
of New Orleans [2022]. The RTCC, with 965 cameras saved over 2,000 hours of investigative work
in its inaugural yearGenetec Inc [2019]. However, a significant challenge persists: optimizing these
systems to maximize their efficacy and coverage amidst the city’s staggering crime rate.
This research focuses on the mathematical model of this issue through the lens of graph
theory, exploring ROBUST networks. While the immediate application is crime surveillance, the
principles and methodologies developed herein apply to various observer-type networks, including
environmental monitoring systems.
The objectives are threefold: identify the most influential nodes, evaluate network effi-
cacy, and enhance network performance through targeted node insertions. Employing a central-
ity measure, the methodology optimizes observer node placements in a spatial bipartite network.
Throughmodelingrelationshipsbetweenservicecalls, violentevents, andcrimecameralocationsin
New Orleans using knowledge graphs, the research contrasts our Spatiotemporal Ranged Observer-
Observable clustering technique with alternative approaches, such as KmeansWu [2021], DBSCAN
174Schubert et al. [2017], and time series analysis via statistical mode Hastie et al. [2001]. Addition-
ally, our approach, focusing on GPU-accelerated computation, ensures scalable and efficient data
processing across large datasets RAPIDS [2023].
8.2 Background
This section outlines the key datasets and mathematical concepts foundational to our exploration
of spatiotemporal clustering in crime and surveillance data.
8.2.1 Dataset: Crime Dynamics and Surveillance in NOLA
This subsection introduces two datasets used to construct the ROBUST network.
Real-Time Crime Camera (RTCC) Systems
The RTCC system, set up by the New Orleans Office of Homeland Security in 2017, uses 965
cameras to monitor, respond to, and investigate criminal activity in the city. Of these cameras,
555 are owned by the city and 420 are privately owned Stein et al. [2021].
Calls for Service (CFS)
TheNewOrleansPoliceDepartment’s(NOPD)Computer-AidedDispatch(CAD)systemlogsCalls
for Service (CFS). These include all requests for NOPD services and cover both calls initiated by
citizens and officers City of New Orleans [2022].
8.2.2 Mathematical Background
Utilizing the datasets introduced, our analysis hinges upon several mathematical and network
principles, each playing a crucial role in interpreting the spatial and temporal dynamics of crime
and surveillance in NOLA.
175Bipartite Networks
Bipartite networks consist of two discrete sets of nodes with edges connecting nodes from separate
sets. Theyeffectivelyportrayobserver-observablerelationshipsbydefiningtherelationshipbetween
the two types. Mathematically, a bipartite graph (or network) G = (U,V,E) is defined by two
disjoint sets of vertices U and V, and a set of edges E such that each edge connects a vertex in U
with a vertex in V. Formally, if e = (u,v) is an edge in E, then u ∈ U and v ∈ V. This ensures
that nodes within the same set are not adjacent and that edges only connect vertices from different
sets Asratian et al. [1998].
Centrality
Degree Centrality measures a node’s influence based on its edge count and is crucial for identifying
critical nodes within a network Nicosia et al. [2013b]. In bipartite networks, such as those modeling
interactions between surveillance cameras (observers) and crime incidents (observables), centrality
is vital for evaluating and optimizing camera positioning to ensure effective incident monitoring.
Consequently, the degree centrality of the observer nodes is of particular concern.
Spatiotemporal Networks
Spatiotemporal networks (STNs) model entities and interactions that are both spatially and tem-
porally situated. These networks can effectively represent geolocated events and observers by
establishing connections based on spatiotemporal conditions.
A Spatiotemporal Network (STN) is defined as a sequence of graphs representing spatial
relationships among objects at discrete time points:
(cid:16) (cid:17)
STN = G , G , ..., G (8.1)
t1 t2 tn
where each graph G is defined as:
(cid:16) (cid:17)
G = N , E (8.2)
ti ti ti
and represents the network at time t with N and E denoting the set of nodes and edges at that
i ti ti
176time, respectively. Holme and Saramaki [2012]
Inthecontextofthisresearch, STNsareutilizedtomodelrelationshipsbetweencrimecam-
eras (observer nodes) and violent events (observable nodes) across New Orleans. Nodes represent
objects,whereasedgesdepictspatiotemporalrelationships,connectingobservernodestoobservable
nodes based on spatial proximity and temporal occurrence. The analysis of STNs allows for the
extractionofinsightfulpatterns, aidinginunderstandingandpotentiallymitigatingtheprogression
and spread of events throughout space and time.
Spatiotemporal Clustering
Spatiotemporal clustering groups spatially and temporally proximate nodes to identify regions
and periods of significant activity within a network. In the context of spatiotemporal networks,
clustersmightrevealhotspotsofactivityorperiodsofunusualeventconcentration. Holmbergetal.
[2022]Techniquesforspatiotemporalclusteringmustconsiderbothspatialandtemporalproximity,
ensuring that nodes are similar in both their location and their time of occurrence.
8.3 Related Work
Building upon the mathematical principles introduced, this section evaluates existing clustering
techniques, highlighting their limitations when applied to bipartite networks and, particularly, in
thecontextofourapplication. Thisexplorationaccentuatesthechallengesfacedinutilizingconven-
tional methods for optimizing bipartite networks and underscores the potential and necessity of the
novelmethodologyproposedinthisresearch. Intheresultssection,wewillpresentacomprehensive
comparative analysis of the aforementioned methods against our proposed methodology, providing
a robust evaluation and benchmarking in various scenarios relevant to bipartite spatiotemporal
networks.
8.3.1 K-means Clustering
K-means clustering partitions datasets into k distinct clusters by minimizing intra-cluster vari-
ances.Wu [2021] Despite its popularity, K-means exhibits several limitations when applied to spa-
177tiotemporal data. Firstly, it mandates the pre-specification of k, which can be non-intuitive in
real-world scenarios. Secondly, K-means insists on assigning every data point to a cluster, poten-
tiallyobscuringsubtleyetcrucialspatial-temporalpatternsinthedata. Thisrigidityinassignment
canleadtomisrepresentationsofthetrueunderlyingstructureswithintheobserver-observablenet-
works, thereby limiting the utility and accuracy of the clusters for strategic node insertions. Criti-
cally, K-means does not accommodate the observational range of entities within the network, such
as surveillance cameras, due to its inability to define a maximum radius or diameter for clusters
Dorabiala et al. [2022a]. This shortcoming hampers its applicability in scenarios where the spatial
reach of items is a vital factor, prompting the need for alternative clustering methodologies that
inherently incorporate spatial constraints.
8.3.2 DBSCAN
DBSCAN, which stands for Density-Based Spatial Clustering of Applications with Noise, identifies
clusters by assessing density proximity. It begins from an arbitrary point and iteratively explores
neighboringpointstoascertainalldirectlyorindirectlyreachablepointsthatfulfillapredetermined
density condition. Schubert et al. [2017], Birant and Kut [2007a] While DBSCAN offers certain
advantages, such as the ability to form clusters without pre-specifying their number and to exclude
points from clustering, its application to bipartite spatiotemporal networks exposes several limita-
tions. Notably, its tendency to merge adjacent clusters may create larger, potentially less dense
clusters, which could misrepresent genuine spatial-temporal patterns in the data. This merging ap-
proach also implies that DBSCAN does not inherently consider the observational range of entities
in the network, a crucial factor in scenarios where the spatial influence of entities is vital for model-
ing and analyzing spatial networks. Furthermore, the absence of generated centroid points for the
clusters formed by DBSCAN hampers its applicability for strategizing node insertions, especially
in spatial-temporal contexts where centroids can serve as logical and efficient insertion candidates.
1788.3.3 Frequency Clustering
The statistical frequency discerns the most frequent value within a dataset, offering a spotlight on
singular,recurrentinstancesandprovidinganon-spatialmeasureofdatadensityHastieetal.[2001].
While it excels in identifying dominant occurrences in a dataset, its glaring limitation is the neglect
of spatial relationships among data points. In the context of optimizing bipartite spatiotemporal
networks, this neglect poses a significant challenge. A technique that solely hinges on frequency
overlooksthecriticalspatialdimensionofthedata,potentiallybypassingspatialclustersthat,while
perhaps not housing the most frequent events, may nevertheless represent crucial hubs or hotspots
in the network. This could lead to suboptimal strategies for node insertions, failing to fully harness
the spatial-temporal patterns within the data.
8.4 Approach
8.4.1 Problem Definition
LetmatricesrepresentingobservernodesOandobservableeventsE bedefined,withtheirrespective
longitudinal (O ,E ) and latitudinal (O ,E ) coordinates. The objective is to formulate a
lon lon lat lat
framework that:
• Computes distances between observers and events.
• Assesses the centrality of observer nodes.
• Classifies events according to their observability.
• Clusters unobserved points utilizing spatial proximity.
• Adds new observers to improve network performance.
8.4.2 Objectives
1. Maximize Current Network Observability: Optimize the placement or utilization of
existing observer nodes to ensure a maximum number of events are observed.
1792. Identify and Target Key Unobserved Clusters: Analyze unobserved events to iden-
tify significant clusters and understand their characteristics to inform future observer node
placements.
3. Strategize Future Observer Node Placement: Develop strategies for placing new ob-
server nodes to address unobserved clusters and prevent similar clusters from forming in the
future.
8.4.3 Rationale
The limitations identified within existing methodologies, as discussed in the Related Work section,
underscoretheneedforaninnovativeapproachtooptimizingbipartitenetworks, particularlyinthe
context of spatiotemporal data. Traditional clustering methodologies, such as K-means and DB-
SCAN, present challenges in terms of accommodating spatial constraints, managing computational
complexity, and providing actionable insights for node insertions. Whereas non-spatial methods
like statistical mode lack the capacity to truly harness the spatial-temporal patterns within the
data, often leading to suboptimal strategies for node insertions.
Therefore, our approach hinges on creating a bipartite distance matrix to systematically
evaluate the spatial relationships between observer nodes and events. Following this, clustering
algorithmsareimplementedtogroupdisconnectedpoints,providinganunderstandingofthespatial
dimensions of our data. This methodology evaluates the existing observer network and delivers
strategic, data-driven insights to enhance future network configurations.
• Distance Matrix Calculation: Utilizing geographical data to calculate distances between
observer nodes and events, with particular attention to ensuring all possible combinations of
nodes and events are considered, is paramount to understanding spatial relationships within
the network.
• Effectiveness Evaluation: The centrality and effectiveness of observer nodes are crucial
metrics that inform us about the current status of the network in terms of its observational
capabilities.
180• Event Classification: Classifying events into observed and unobserved categories helps
in understanding the coverage of the observer network and identifying potential areas of
improvement.
• Clustering of Unobserved Points: Identifyingclustersamongstunobservedpointsguides
the strategic placement of new observer nodes, ensuring they are positioned where they can
maximize their observational impact.
8.4.4 Challenges
• Computational Complexity: Given the potentially large number of observer nodes and
events, computational complexity is a pertinent challenge, especially when calculating the
bipartite distance matrix and implementing clustering algorithms.
• Spatial Constraints: Ensuring that the placement of new observer nodes adheres to ge-
ographical and logistical constraints while still maximizing their observational impact. The
range of each observer node is a major consideration for any event clustering.
• Temporal Dynamics: Accounting for the temporal dynamics within the data, ensuring
that the models and algorithms are robust enough to handle variations and fluctuations in
the event occurrences over time.
8.5 Methods
This section provides a detailed account of the approaches and algorithms used to establish spa-
tiotemporal relationships between observer nodes and observable events. The ensuing subsections
systematically unfold the mathematical and algorithmic strategies employed in various processes:
calculating distances using the Haversine formula, determining centrality and generating links,
constructing bipartite and unipartite distance matrices, classifying events, initializing ROBUST
network, and clustering disconnected events. Each subsection introduces relevant notations, ex-
plains the method through mathematical expressions, and outlines the procedural steps of the
respective algorithm.
181Bipartite Distance Matrix
Constructing a bipartite distance matrix is pivotal in capturing the spatial relationships between
observer nodes and events.
Notations:
• O: Matrix representing observer nodes with coordinates as its elements, where O denotes
ij
the j-th coordinate of the i-th observer. Example:
 
x y
1 1
 
 
O = x y 
 2 2
 . . 
. .
. .
• E: Matrixrepresentingobservableeventswithcoordinatesasitselements, whereE denotes
ij
the j-th coordinate of the i-th event. Example:
 
x′ y′
1 1
 
 
E = x′ y′
 2 2
 . . 
. .
. .
• DM: Distance Matrix, where DM represents the distance between the i-th observer and
ij
the j-th event. Assuming there are m observers and n events, DM will be an m×n matrix.
Example:
 
d d ... d
11 12 1n
 
 
d 21 d 22 ... d 2n
DM =  
  . . . . . . ... . . .  
 
 
d d ... d
m1 m2 mn
where each element d represents the distance between the coordinates of the i-th observer
ij
182and the j-th event.
Methodology:
1. Haversine Distance Calculation: Compute the Haversine distances for all combinations of
observer-event pairs, populating the distance matrix DM. Specifically,
DM = haversine(O ,E )
ij i j
where O and E are the coordinates of the i-th observer and j-th event. The Haversine
i j
formula calculates the shortest distance between two points on the surface of a sphere, given
theirlatitudeandlongitude. TheresultingdistancesinDM aregiveninkilometers,assuming
the Earth’s mean radius to be 6371 km.
2. Centrality Calculation: The centrality of each observer is calculated as the count of events
within a specified radius r. This is mathematically expressed as:
(cid:88)
Centrality(o) = I(DM ≤ r)
oe
e∈E
In this equation, I represents the indicator function, which is defined as:


 1 if P is true
I(P) =

 0 if P is false
Hence, I(DM ≤ r) is 1 if the distance between observer o and event e, denoted as DM , is
oe oe
less than or equal to r, and 0 otherwise. The centrality thus provides a count of events that
are within the radius r of each observer.
3. Link Generation: Identifyandcreatelinksbetweenobserversandobservablesthatarewithin
radius r of each other, forming a set L of pairs (o,e) such that
L = {(o,e)|DM ≤ r}
oe
183where each pair represents a link connecting observer o and event e in the bipartite graph,
constrained by the specified radius.
Algorithm:
1. Step 1: Compute Haversine Distances Calculate the Haversine distances between all pairs
of observer-event coordinates, and store them in the distance matrix DM. Utilize the co-
ordinates from matrices O and E, and apply the Haversine formula to calculate distances,
ensuring they are represented in kilometers.
2. Step 2: Determine Observer Centrality Calculate the centrality of each observer, which is
defined as the count of events that are within a specified radius r. Use the indicator function
to identify and sum the events that satisfy the distance criterion for each observer.
3. Step 3: Generate Links Identify and create links between observers and events that are
within radius r of each other. Form a set L of pairs (o,e) satisfying the distance constraint,
representing the edges in the bipartite graph.
Event Classifier
Notations:
• E: Matrix representing events, as defined in the ”Bipartite Distance Matrix” section.
• DM: Distance Matrix, as defined in the ”Bipartite Distance Matrix” section.
• r: Radius threshold.
• OE and UE: Sets of indices of observed and unobserved events.
Methodology:
1. Number of Observations Calculation: Calculate the number of observations for each event.
|O|
(cid:88)
num (e) = I(DM ≤ r)∀e ∈ E
observations ie
i=1
184where I is the indicator function that is 1 if the condition inside is true and 0 otherwise, and
|O| is the number of observers.
2. Determine Observed and Unobserved Points: Classify the events into observed and unob-
served based on the number of observations.
OE = {e|num (e) > 0, e ∈ E}
observations
UE = {e|num (e) = 0, e ∈ E}
observations
Algorithm:
1. Step 1: Calculate Observations - Compute the number of observations for each event by
summing the applicable entries within the radius r from the distance matrix DM.
2. Step 2: Classify Events - Categorize the events into observed and unobserved by utilizing the
number of observations for each event, creating sets OE and UE which denote the indices of
observed and unobserved events, respectively.
Initialize ROBUST net
Notations:
• O and E: Sets of RTCC (observers) and CFS (events).
• L: Set of Links between observers and events.
• r: Radius threshold, consistent with prior sections.
• OE and UE: Sets of indices of observed and unobserved events, maintaining consistency
with the ”Event Classifier” section.
Methodology:
1851. Bipartite Distance Calculation: Compute the distances among RTCC nodes and CFS nodes.
DM,L = Bipartite Distance Matrix(O,E,r)
2. Determine Observed and Unobserved Points: Identify which events are observed and which
are not.
OE,UE = Event Classifier(E,DM,r)
Algorithm:
1. Step 1: Calculate Distances Compute the effectiveness and distances among RTCC nodes
and CFS nodes, utilizing O, E, and r as inputs.
2. Step 2: Classify Events Determine which events are observed and unobserved, using E, DM,
and r for the calculation.
Unipartite Distance Matrix
Notations:
• UE = {e ,e ,...,e } be a set of unobserved event nodes.
1 2 m
• DM is a distance matrix, where DM represents the distance between nodes e and e .
ij i j
• r is a radius threshold.
Methodology:
1. Point Extraction: Extract the longitudinal (x) and latitudinal (y) coordinates of unobserved
nodes.
P = {x ,x ,...,x }, P = {y ,y ,...,y }
x 1 2 m y 1 2 m
1862. Combination of Nodes: Compute all possible combinations of nodes from UE.
C = {(e ,e ) : e ,e ∈ UE,i ̸= j}
i j i j
3. Haversine Distance Calculation: Compute the haversine distance for each combination of
nodes in C and construct the distance matrix DM.
DM = haversine(e ,e ) ∀(e ,e ) ∈ C
ij i j i j
where haversine(e ,e ) calculates the haversine distance between nodes e and e .
i j i j
4. Distance Matrix Construction: Create a matrix, DM, of size m×m, where each element,
DM , represents the haversine distance between nodes e and e .
ij i j
Algorithm:
1. Step 1: Extract the x and y coordinates of unobserved nodes.
2. Step 2: Compute all possible combinations of nodes.
3. Step 3: Calculate the haversine distance between all combinations of nodes.
4. Step 4: Construct a distance matrix that contains the distances between all pairs of nodes.
Cluster Disconnected Events
Notations:
• UE = {e ,e ,...,e } be a set of unobserved event nodes.
1 2 m
• DM is a distance matrix, where DM represents the distance between nodes e and e .
ij i j
• r is a radius threshold.
• n is the desired number of densest clusters to return.
187Methodology:
1. Identifying Nodes within Radius: Determine the nodes within radius r of each other using
the distance matrix DM.
N(i) = {j : DM ≤ r}
ij
2. Creating Clusters: Form clusters, C, based on the proximity defined above.
C = {e : j ∈ N(i)}
i j
3. Sorting Clusters by Density: Sort clusters based on their size (density) in ascending order.
C = sort(C,key = |C |)
sorted i
4. Identifying Densest Clusters: Identify the densest clusters, ensuring that a denser cluster
does not contain the centroid of a less dense cluster. Let D be the set of densest clusters:
C
D = {C ∈ C : C is maximal dense}
C i sorted i
where ”maximal dense” means that there is no denser cluster that contains the centroid of
C .
i
5. Selecting Top n Clusters: Select the top n clusters from D .
C
Algorithm:
1. Step 1: Identify nodes within a specified radius (r) of each other using the precomputed
distance matrix.
2. Step 2: Form clusters by grouping nodes that are within radius r of a given node.
3. Step 3: Sort the clusters based on their density (number of nodes).
4. Step 4: Identify the densest clusters ensuring a denser cluster does not contain the centroid
of a less dense cluster.
1885. Step 5: Select the top n densest clusters.
Add New Observers
Notations:
• UE: Set of unobserved event nodes.
• r: Radius threshold, consistent with prior sections.
• n: Number of clusters to identify.
• DM: Distance matrix among unobserved nodes.
• C: Set representing the densest clusters.
Methodology:
1. Unobserved Distances: Compute the pairwise distances among all unobserved event nodes
within a given radius r and represent them in a distance matrix DM.
DM = unipartite distance matrix(UE,r)
whereunipartite distance matrix(·,·)isafunctionthatreturnsadistancematrix, calculating
the pairwise distances between all points in set UE within radius r.
2. Retrieve Densest Clusters: Identify the n densest clusters among the unobserved event nodes
UE, utilizing the precomputed distance matrix DM and within the radius r.
C = cluster disconnected(DM,UE,r,n)
where cluster disconnected(·,·,·,·) is a function that returns the n densest clusters from the
unobserved events nodes UE, using the precomputed distance matrix DM and within radius
r.
189Algorithm:
1. Step 1: Compute Unobserved Event Distances - Calculate the distance matrix DM for all
unobserved event nodes within a specified radius r.
2. Step 2: Identify Clusters -DeterminethenclustersusingthecomputeddistancematrixDM
and consider nodes within the specified radius r.
8.6 Datasets
This research revolves around constructing a ROBUST network to model relationships between
eventsfromCFSthatareviolent,andthelocationofcrimecamerasinNewOrleans. ThisROBUST
network comprises observer nodes (symbolizing crime cameras) and observable nodes (representing
violent event locations). Edges in the ROBUST network are created by pairing each CFS event
node with the closest crime camera node based on spatial range.
8.6.1 Observer Node Set
The observer node set comprises RTCC camera nodes utilized to monitor events in New Orleans.
Thesenodesareeitherstationaryordiscretelymobile,meaningtheirlocationmightinstantaneously
change between snapshots. Properties characterizing each observer node include:
Table 8.1: (RTCC) Observer Node Properties
Label Description
id Unique identifier number for each node
membership City-owned asset or Private-owned asset
data source Entity that operates the RTCC camera
mobility Stationary or mobile
address Street Address of RTCC Camera
geolocation Latitude and Longitude of platform
x,y Location in EPSG: 3452
190Figure 8.1: RTCC Cameras. Locations of the RTCC cameras
8.6.2 Observable Node Set
CFS events serve as observable nodes in the ROBUST network, symbolizing violent event locations
reported to the NOPD. Properties of each CFS event node include:
To pinpoint pertinent observable events, CFS events undergo filtering based on type and
location. Only specific types within a designated police zone are taken into account. This filtering
ensures that observable events of interest (violent events) occur within the targeted region.
Violent Types
The violent events considered in this research encompass homicides, non-fatal shootings, armed
robberies, and aggravated assaults. By integrating both type and location filters, the resulting
locations for observable nodes are derived.
191Table 8.2: (CFS) Event Node Properties
Label Description
NOPD Item Unique item number for the incident.
Type The type associated with the CFS.
Type Text TypeText associated with the CFS.
Priority The priority associated with the CFS.
3-highest, 2-emergency, 1-nonemergency, 0-none
InitialType InitialType associated with the CFS.
InitialTypeText The description associated with the CFS.
Initial Priority The initial priority associated with the CFS.
MapX The X coordinate for CFS in state plane.
MapY The Y coordinate for CFS in state plane.
Time Create Creation time of the incident in the CAD.
Time Dispatch Dispatch time by NOPD to the incident.
Time Arrive Arrival time by NOPD to the incident.
Time Closed Time the incident was closed in the CAD.
Disposition The disposition associated with the CFS.
DispositionText Text associated with the CFS.
Self-Initiated If the Officer generates the CFS.
Beat The area in Parish where occurred.
The first number is District, the letter is the zone,
and the numbers are the subzone.
Block Address The BLOCK unique address number for CFS
Zip The NOPD Zip associated with the CFS.
Police District The NOPD Police District associated with CFS.
Geolocation Latitude and Longitude
192Figure 8.2: Orleans Parish Inclusion Zone Polygon
Table 8.3: CFS Violent Types
Violent Type Description
30, 30-C, 30-S Homicide - (C)Cutting, (S)Shooting
34, 34-C, 34-S Aggravated Battery - (C)Cutting, (S)Shooting
35 Simple Battery
37 Aggravated Assault
38 Simple Assault
55 Aggravated criminal damage to property
60 Aggravated burglary
64, 64-G, 64-J, 64-K Armed robbery - (G)un, car(J)Jacking, (K)nife
65, 65-J, 65-P Simple robbery
ASLT, ASLTI, ASLTWP Simple Assault, (I) Injury, (WP) Weapon
MURDERST Murder by Shooting
ROB, ROBCJ, ROBW Robbery, (CJ) Carjacking, (W) Weapon
SHOTP Assault with Weapon - Shooting
STABP Assault with Weapon - Stabbing
STFIRED Shots Fired
1938.7 Experimental Setup
Reproducibility and accessibility are paramount in our experimental approach. Thus, experiments
were conducted on Google Colaboratory, chosen for its combination of reproducibility—via easily
shareable, browser-based Python notebooks—and computational robustness through GPU access,
particularly employing a Tesla T4 GPU to leverage CUDA-compliant libraries. The software en-
vironment, anchored in Ubuntu 20.04 LTS and Python 3.10, utilized modules such as cuDF, Dask
cuDF,cuML,cuGraph, cuSpatial, andCuPytoensurecomputationswerenotonlyGPU-optimized
but also efficient. The availability of code and results is ensured through the platform, promoting
transparent and repeatable research practices.
8.8 Results
The insights from the research, visualized through graphs, heatmaps, and network diagrams, de-
lineate the foundational attributes and effectiveness of the ROBUSt network, providing a baseline
for analyses and comparison with state-of-the-art approaches.
8.8.1 Initial ROBUST network
The initial state of the ROBUST network, before any methods were applied, is characterized using
various visualization techniques as described below.
194Figure 8.3: Histogram of effectiveness scores (node degrees) for observer nodes in the initial
ROBUTSnetwork, demonstratingapower-lawdistribution. Thex-axisrepresentsthedegree
count, signifying the ability of an observer node to detect events within a specified radius,
while the y-axis shows the count of nodes for each degree.
195Figure 8.4: Heatmap of observer node effectiveness scores in the initial ROBUST network.
Node spatial locations are plotted with color intensity indicating degree centrality and a
gradient from blue (low effectiveness) to red (high effectiveness).
196Figure 8.5: Spatial distribution and observational coverage of events in the initial ROBUST
network. Event locations are color-coded to indicate observational coverage: deep green for
multiple observers, green for a single observer, varied colors for near-observers, and red for
unobserved events.
1978.8.2 Proposed Method Results: Proximal Recurrence
Theintegrationof100newnodesintotheROBUSTnetworkusingtheproximalrecurrencestrategy
(with a specified radius of 0.2) produced both visual and quantitative outcomes, which are depicted
and summarized in the following figures.
Figure8.6: ROBUSTnetworkvisualizationpostproximalrecurrenceintegration. Newnodes
are represented in blue, directly observed nodes in green, and unobserved nodes in red, with
edges indicating observational relationships.
8.8.3 Comparison with Existing Methods
This subsection presents the results of other techniques like k-means, mode, average, binning, and
DBSCAN.
198Figure 8.7: Histogram of node degree distribution for the new nodes introduced through the
proximal recurrence strategy. Axes represent degree and node count, respectively.
Figure 8.8: Aggregate node degree distribution of the updated ROBUST network, with
original nodes in blue and new nodes superimposed in red.
199DBScan
The DBScan clustering approach and its resultant effectiveness are visualized and analyzed below
through various graphical representations and histograms.
Figure 8.9: Centroids and associated events determined using DBSCAN clustering on unwit-
nessed events within the ROBUST network. Centroids (blue), clustered nodes (green), and
unclustered nodes (red) are depicted, with edges connecting centroids and respective nodes.
K-means
The effectiveness of the K-means clustering method is illustrated through a series of visualizations
and histograms.
200Figure 8.10: Node insertions based on DBSCAN clustering, emphasizing new DBSCAN
nodes and filtering out events and nodes not within the centroid’s spatial range.
Mode Clustering
8.9 Case Study Discussion
8.9.1 Evaluating Effectiveness
Degree Centrality
Utilizing a bipartite behavior, the network connects observers to observable events through edges.
Thecentralityofanodequantifiesitsefficacyinwitnessingevents. Thedistributionofnodedegrees
provides insights into the network’s capability to capture events through its observers.
201Figure 8.11: Distribution of node degrees for new nodes in the ROBUST network via the
DBScan algorithm, with axes representing degree and node quantity.
Figure 8.12: Overall node degree distribution in the updated ROBUST network, showcasing
the original distribution (blue) and the new DBScan nodes (red).
202Figure 8.13: Visualization using K-means clustering on unwitnessed events within the RO-
BUST network. Centroids are in blue, clustered nodes in green, and they are interconnected
with edges.
Desired Transformations in Degree Centrality Distributions
The network initially exhibits a power-law distribution in degree centrality, where few nodes are
highly effective and most are not. An objective is to shift this to a skewed Gaussian distribution
by introducing new nodes, thereby redistributing node effectiveness and enhancing network perfor-
mance. The combined histogram of original and new node centrality acts as a metric for evaluating
this shift. A rightward histogram shift, visible in the results, indicates enhanced network perfor-
mance due to the inclusion of new nodes with higher degree centrality. This transformation and
the resulting outcomes set a benchmark for evaluating different clustering strategies in subsequent
sections.
203Figure8.14: Centroid-basednodeinsertionsusingK-meansclustering, focusingonnewnodes
while filtering those out of the spatial range of the centroid.
8.9.2 Comparative Analysis of Clustering Approaches
Limitations of Conventional Clustering Strategies
Conventional strategies like k-means and DBSCAN manifest limitations in controlling cluster di-
ameterandcentroidassignment, whichcanobscuregenuinedatapatternsandhinderthetransition
from a power-law to a skewed Gaussian distribution upon the addition of new nodes. The prox-
imal recurrence approach offers improved control and contextually relevant centroid assignment,
addressing these issues.
204Figure 8.15: Histogram showing the distribution of node degrees for nodes added through
the K-means method.
Figure 8.16: Combined histogram indicating the node degree distribution in the updated
ROBUST network, distinguishing between original (blue) and K-means added nodes (red).
205Figure 8.17: ROBUST network utilizing the Mode-adjusted variant of K-means approach,
featuringnewnodes(blue), directlyobservednodes(green), andremainingunobservednodes
(red).
The Challenge of Centroid Averaging
In domains such as crime analysis, centroid averaging, or calculating a point that represents the
meanpositionofallclusterpoints, canmisrepresentactualincidentlocationsinspatiallysignificant
contexts. Traditional centroid assignment can produce misplaced centroids, leading to inaccurate
analyses and strategies, such as incorrectly identifying crime hot spots. The proximal recurrence
method ensures accurate data representation by managing centroid assignments and controlling
cluster diameters, particularly in contexts requiring precise spatial data point accuracy.
206Figure 8.18: Histogram indicating the distribution of node degrees for nodes added via the
Standard Mode strategy.
Figure 8.19: Histogram of node degree distribution in the ROBUST network, illustrating
both original (blue) and Standard Mode added nodes (red).
2078.9.3 Inadequacies of Mode-Based Analysis
Neglect of Spatial Clustering
Mode-based analysis effectively identifies high-recurrence points but neglects the spatial clustering
ofnearbyvalues. Thisoversightcanmissopportunitiestoplaceobservernodesinlocationswherea
cluster of neighboring points within a specific range might yield higher effectiveness than a singular
high-incidence point.
Lack of Comprehensive Insights
While mode-based analysis hones in on recurrence, it disregards insights from considering spa-
tial and neighboring data, identifying locations with high incidents but failing to define a cluster
shape. Consequently, it misses locations near points of interest, potentially omitting optimal node
identification. The approach discussed counters some of these deficiencies by incorporating both
recurrence and proximate incidents into its analysis, offering a more balanced view.
8.9.4 Advantages of Proximal Recurrence Approach
Harmonizing Recurrence and Spatiality
The proximal recurrence approach integrates incident recurrence and spatial analysis, ensuring a
comprehensive data perspective. It does not only identify high-incident locations but also accounts
for spatial contexts and neighboring events, safeguarding against isolated data interpretation and
enhancing the analysis’s comprehensiveness.
A Middle Ground: Specificity vs. Generalization
The approach balances specificity and generalization by identifying incident points and considering
their spatial contexts. It prevents the dilution of specific data points in generalized clustering and
avoids omitting relevant neighboring data in specific point analysis. It thereby ensures the analysis
remains accurate and prevents omission of pivotal data points.
208Defined Constraints for Enhanced Performance
The integration of defined constraints, such as a predetermined cluster diameter, optimizes perfor-
mance and ensures contextually relevant insights. By adhering to predefined limits, the approach
maintains a balanced analysis, ensuring insights are precise and applicable to real-world scenarios.
8.9.5 Comparison with Histogram Approach
Hyperparameter Tuning and Large Datasets
Histograms require tuning of the bin number, a task that can be particularly intricate for large
datasets due to its impact on analysis and result quality. Conversely, the proximal recurrence
approach demands no hyperparameter tuning, providing straightforward applicability without it-
erative refinement.
Accuracy, Precision, and Flexibility
Histograms may lose fine data structures by aggregating data into bins. In contrast, the proximal
recurrence approach evaluates points on actual distances, capturing accurate clustering patterns
and enabling identification of non-rectangular clusters, thereby providing a more realistic data
pattern representation.
Adaptability and Relationship Consideration
While histograms use uniform bin sizes, potentially misrepresenting datasets with varied density
regions, the proximal recurrence approach adapts to different densities by evaluating proximity,
not a fixed grid, and utilizes explicit pairwise distances, ensuring direct measurement of point
relationships.
Customizability and Consistency
While histograms offer bin size as the primary customizable parameter, the proximal recurrence
approach provides parameters, such as distance thresholds, for tuning based on data and problem
specifics, and ensures consistent results, unaffected by alignment considerations.
2098.10 Case Study Conclusion
The exploration of ROBUST network, through various strategic node insertions and clustering
methodologies, has yielded insights into the potential and limitations of different strategies in
enhancingnetworkperformance, specifically in therealm ofobservernodeeffectivenessin detecting
events. The initial state of the ROBUST network was characterized by a power-law distribution
in node degree centrality, prompting a need for improved uniformity and elevated effectiveness in
event detection across the network.
8.10.1 Key Findings
1. Shift in Degree Centrality Distribution: The integration of new nodes, utilizing various
methodologies, influenced a shift towards a skewed Gaussian distribution in node degree cen-
trality, reflecting an enhanced effectiveness in event detection across the ROBUST network.
This is a pivotal step in optimizing the network’s observational capabilities.
2. Comparative Efficacy of Clustering Approaches: Whiletraditionalclusteringmethods
like k-means and DBSCAN revealed certain limitations in centroid assignment and cluster
diameter control, the proximal recurrence approach demonstrated a noteworthy capability
in managing these aspects, thereby enhancing context-relevant centroid assignment and op-
timizing cluster sizes.
3. Mode-Based Analysis: The standard mode approach, despite its effectiveness in identi-
fying high-recurrence points, revealed inadequacies in considering spatial clustering, often
bypassing optimal node insertion points.
4. Proximal Recurrence Approach: Balancing specificity and generalization, the proximal
recurrence approach not only identified high-incident points but also considered the spatial
context,thuspreventingdatainterpretationinisolationandenhancingthecomprehensiveness
and applicability of the analysis.
2108.10.2 Implications
The findings underscore the necessity of selecting an appropriate clustering strategy, one that not
only identifies optimal node insertion points but also considers the spatial context and underlying
distribution of data points in the network. Furthermore, these strategies should ensure accurate
andcontextuallyrelevantdatarepresentation,especiallyindomainsrequiringstringentspatialdata
accuracy.
8.10.3 Future Directions
While the proximal recurrence approach shows promise, future research could explore:
• Algorithm Optimization: Refining algorithms for varied use-cases and exploring the scal-
ability of these strategies in larger, more complex networks.
• Real-World Application: Implementing these strategies in real-world scenarios, such as
environmental monitoring systems, to validate and further refine them based on practical
outcomes.
• Additional Metrics: Investigating additional metrics for network optimization and evalu-
ating their impact on the network’s observational capabilities.
• Integration with Machine Learning: Exploring how machine learning algorithms could
further optimize node placement and network effectiveness.
8.10.4 Closing Remarks for Case Study
The journey through varied clustering strategies and their respective impacts on ROBUST net-
work’s observational capabilities has shed light on not only the potential for optimization but also
the intrinsic complexities and considerations pivotal to network enhancement. Balancing the need
for specificity, spatial accuracy, and data representation accuracy remains paramount in optimizing
such networks for enhanced, comprehensive event detection and observational capabilities.
211Chapter 9
Case Study III: Multiagent Planning
Multiagent Spatiotemporal Planning Strategies for AUVs with ROBUST Network. This research
introduces an approach for optimizing a fleet of Autonomous Underwater Gliders (AUVs) using
the principles of the ROBUST (Ranged Observer Bipartite-Unipartite SpatioTemporal) network,
applied to the dynamic environment of the Gulf of Mexico. Leveraging the HYCOM oceanographic
dataset,regionsofhightemporalvariabilityinparameterssuchastemperature,watercurrents,and
salinity are identified. A proximal recurrence clustering technique generates temporal waypoints
that capture these variabilities. The uniqueness of the ROBUST network lies in its Bipartite-
Unipartiteness grouping, allowing for an evaluation of current sensor placements. This facilitates
the filtering and identification of unobserved regions, from which a waypoint network is built. The
integration of these waypoints within the ROBUST network framework enables the multiagent
system of AUVs to plan optimal paths, considering the spatiotemporal dynamics of the ocean and
the coordination between multiple AUVs for maximal data collection efficiency.
9.1 Introduction
Effective deployment and coordination of Autonomous Underwater Gliders (AUVs) in the Gulf of
Mexico’s dynamic environment pose a complex spatiotemporal challenge. This research seeks to
optimize path planning for AUV fleets, pioneering a long-term planning approach over traditional
short-term, immediate-reward strategies. The primary objective is to maximize overall sampling
212efficiency across the entire mission, considering spatial constraints, such as observational range and
movement speed, while minimizing redundant data collection. Although some placements might
be sub-optimal at specific times, the strategy is designed for optimal overall mission outcomes.
Strategic waypoint nodes are defined in a ROBUST network, focusing on areas of high temporal
variability, with the goal of enhancing HYCOM model forecasts. This enhancement is achieved by
utilizing the data collected by AUVs to improve the model’s current state, leading to more precise
predictions. Holmberg [2014b]
9.2 Background
9.2.1 HYCOM
HYCOM (Hybrid Coordinate Ocean Model) is a three-dimensional, gridded marine model with
hindcasting, nowcasting, and forecasting capabilities. It provides both a high-resolution global
viewandzoomedregionalviewssuchastheGulfofMexico. HYCOMassimilatesdatafromvarious
sources, including satellites, buoys, and AUVs, using the Navy Coupled Ocean Data Assimilation
(NCODA) system Chassignet et al. [2007a]. This data assimilation phase establishes a feedback
loop with the sensor operators, to encourage strategic sensor relocation into better locations that
improve the present state of HYCOM. This research uses HYCOM’s regions of high temporal
variability to target sensor deployment to improve data collection for those points. Holmberg et al.
[2022]
9.2.2 Underwater Autonomous Gliders
Gliders are inexpensive AUVs that navigate water using buoyancy changes and wings. Designed
for extended missions, they can follow either pre-set or adjusted routes, making them well-suited
for long-term data collection. They move slowly, at about 0.5 knots, and while their low power
consumption and durability are advantageous for sustained operations, they do face challenges
in strong currents. These gliders collect temperature, salinity, and water current measurements,
transmitting the data via satellite for rapid ocean monitoring. Rudnick [2015]
2139.3 Related Work
9.3.1 Proximal Recurrence Clustering
Proximal Recurrence, a spatiotemporal clustering method, identifies clusters by analyzing both
the frequency of occurrences and the spatial proximity of neighboring points, with parameters
controlling clustering ranges. Holmberg et al. [2023]
This technique scans data points, considering their spatial coordinates and occurrence fre-
quency. Itidentifies points of highrecurrence and evaluates their spatial groupingswithin a defined
range of influence. Points are then assigned to the densest cluster they belong to. A key feature
to this method is that it allows points to remain unclustered, instead prioritizing consistency in
cluster diameters.
Its effectiveness compared to other clustering methods like k-means or DBSCAN in specific
spatiotemporal scenarios suggests its potential use in this study for the purpose of identifying way-
point locations. However, originally proposed for binary classification of observed and unobserved
events, for use in crime camera efficiency analysis, adapting Proximal Recurrence to gradient-based
data like the severity of temporal variability poses a unique challenge.
9.3.2 STROOB Networks
SpatioTemporal Ranged Observer-Observable Bipartite (STROOB) networks model the interac-
tion between sensors (observers) and events (observables) in a network format. These networks
apply graph theory to assess sensor effectiveness on specific events. This assessment guides the
optimization of new sensor node placements within the network. Holmberg et al. [2023]
STROOB networks were initially developed for optimizing the placement of static sensors,
offering a foundation for evaluating sensor effectiveness in designated areas. However, their orig-
inal design did not encompass spatiotemporal path planning. This limitation presents a unique
opportunity to extend STROOB network principles to the domain of multi-agent path planning,
allowing for a more versatile application in varying operational contexts.
2149.3.3 Pathing Strategies
Dijkstra’s Shortest Path
Dijkstra’s algorithm is a straightforward technique for finding the shortest path in graphs, and it
serves as the initial framework for exploring pathing strategies in this research. Traditionally, the
algorithm iteratively determines the shortest path from a starting node to all other nodes within
a static graph. However, this approach lacks temporal considerations. Wu et al. [2014] To address
this, thestudyadaptsDijkstra’smethodtoincorporatetemporalfactors, layingthegroundworkfor
developing a more sophisticated, temporally aware algorithm suitable for dynamic environments.
9.3.4 Temporal Greedy Strategy with Look-Ahead
The temporal greedy approach with look-ahead represents a short-term planning strategy that
seeks immediate rewards while incorporating a degree of future reward-seeking. This method aims
to maximize gains in the current timeframe, yet it differs from traditional greedy algorithms by
considering imminent future events. Rigas et al. [2020]
Algorithm: The key steps in the algorithm are as follows:
1. For each timestep, iterate through each sensor.
2. Check if the current timestep offers an optimal point.
2.a. If no optimal point is present, look ahead to the next timestep.
2.b. Plan a move towards a point of interest in the next frame.
3. If an optimal point is present, select the next point with the maximum immediate reward.
4. Update the path and covered points for the sensor.
9.4 Approach
This research adopts a comprehensive strategy to optimize the paths of AUVs in the GoM. The
focusisondynamicallyidentifyingandrespondingtosignificanttemporalevents,throughanetwork
system. The strategy involves:
2151. Event Identification: Leveraging temporal variability in HYCOM to pinpoint areas of
significant change.
2. Waypoint Network Development: Crafting a network that adapts to these identified
events, into waypoints nodes, constrained by the AUV movement and viewing properties.
3. SpatioTemporal Path Planning: Integrating predictive models and planning tools to
ensure efficient, responsive navigation of multiple AUVs.
Each phase is designed to build upon the other, resulting in a framework for adaptive
multi-agent path planning in complex environments.
9.5 Methods
9.5.1 Weighted Proximal Recurrence Clustering
The Weighted Proximal Recurrence (WPR) method in this implementation extends the proximal
recurrence concept to continuous data evaluation. It calculates the squared temporal differences
within a specified radius around each data point, which magnifies the significant differences and
diminishes the insignificant ones.
Algorithm The key steps in the algorithm are as follows:
1. Calculate the squared temporal difference between values from two consecutive time frames.
2. Create a land mask and apply a buffer to exclude coastal areas.
3. Apply the land mask to the squared difference data.
4. Filter insignificant differences based on a threshold.
5. Create a fine grid for circle placement.
6. Compute the overlap grid, which represents the weighted sum of temperature differences within each
circle’s radius.
7. Parallelize the circle placement operation using GPU methods, as each GPU thread can work on
placing a circle independently.
8. After all circle placements are complete, sort the results based on a specified criteria, such as density
score or cluster size.
216Figure 9.1: Shows densest cluster identifications for frame 1
9.5.2 ROBUST Network Construction
TheconstructionprocessfortheRangedObserverBipartite-UnipartiteSpatioTemporal(ROBUST)
Networkinvolvestwokeysteps: nodegenerationandedgecreationwithintheaggregatedspatiotem-
poral network.
Node Generation
Utilizing the WPR methodology, the ROBUST Network identifies optimal locations for waypoints.
WPR clusters spatiotemporal data to pinpoint areas of high activity, marking them as waypoints.
These waypoints serve as potential sensor positions or nodes in the network, chosen for their
significance in the temporal domain.
Edge Generation
Once the network nodes have been established, the next step involves generating edges that rep-
resent potential paths between waypoints. These edges are determined based on spatial proximity
and environmental constraints, which collectively create a connected framework for dynamic sensor
movement planning. It’s important to note that these edges span across different time steps and
217do not connect waypoints that exist within the same timestep.
Figure 9.2: ROBUSTnet, Aggregated Spatiotemporal Graph
9.5.3 TED Predictor
The TED (Temporal Event Dynamics) Predictor is a critical addition to the ROBUST Network in
support of temporal path planning by focusing on the dynamic aspects of the environment. This
predictor analyzes the Aggregated SpatioTemporal Network of waypoints, identifying active nodes
for each timeframe. It assesses the influence of each node based on the quantity and significance of
events it covers. This research uses the differences in the HYCOM forecasting for that period to
predict points of interests.
Node Activation and Influence For each timeframe, the TED Predictor determines which
nodes are active and evaluates their influence. This is achieved by analyzing event intensities and
distributions, thus enabling the predictor to ascertain the most impactful nodes in the network for
that time.
218Figure 9.3: TED predictor shows node activations for frame 1
9.5.4 WAITR Planner
The Weighted Aggregate Inter-Temporal Reward (WAITR) Planner is the multi-agent path plan-
ning framework. Its design focuses on optimizing sensor paths and positions by taking into account
the dynamic nature of events and constraints within the network.
Process Outline The WAITR Planner consists of several key phases:
1. Weight Initialization: Assigning weights to waypoint nodes based on event counts to reflect
their importance over different timeframes.
2. Piecewise Pathlets Generation: Constructing a network of potential routes between nodes,
considering a maximum number of hops for efficient sensor movement.
3. Temporal Path Generation: Extending paths across different timeframes to accumulate re-
wards, adapting to the changing environmental conditions.
4. Path Selection: Choosing the most rewarding paths, factoring in the number of sensors and
avoiding overlaps in their trajectories.
219Technical Implementation The WAITR Planner initializes node weights based on event
data, generates graph-based pathlets using Dijkstra’s algorithm, and extends these pathlets tem-
porally to optimize for cumulative rewards. The final step involves a sorted selection of paths that
maximize the density coverage, while adhering to operational constraints of the AUV fleet.
220(a) Frame 0
(b) Frame 1
(c) Frame 2
Figure 9.4: Sequential visualization of ROBUST-network path planning for three AUVs
across Frames 0, 1, and 2.
221Visualisation Figure 9.4 displays heatmaps illustrating the temporal variability for tempera-
ture in the Gulf of Mexico. Dark green nodes represent aggregated waypoints, calculated by the
WPR clustering method. Lime green nodes highlight the active waypoints selected based on their
temporal significance and sensor coverage using the TED predictor. Golden stars represent opti-
mal sensor locations determined by the WAITR strategy for efficient data collection. This visual
summary illustrates the ROBUST network’s ability to enhance AUV navigational planning for
maximizing coverage.
9.6 Analysis
This section introduces metrics developed for assessing the effectiveness of the ROBUST network
for the generated multi-agent spatiotemporal paths. These metrics aim to quantify the efficiency
and coverage of the planned paths.
9.6.1 Event Coverage Ratio (ECR)
The Event Coverage Ratio (ECR) measures the proportion of significant environmental events that
are within the range of the AUVs’ sensors. It is calculated as:
Number of Covered Events
ECR =
Total Number of Significant Events
9.7 Results
Cluster Approach Top 1 Top 5 Top 10 Top 20
Aggregated WPR Counts 1256 4726 7308 10378
WPR% (total=14273) 8.8% 33.11% 51.2% 72.7%
Table 9.1: Coverage comparisons using WPR clustering with a range=0.5.
222Timestep WAITR Planner (%) Greedy Planner (%)
Frame 0 476 1463
Frame 1 18 116
Frame 2 1236 674
Frame 3 14 5
Frame 4 305 0
Frame 5 430 0
Frame 6 332 187
Total (10378) 2811 (27.1%) 2445 (23.56%)
Table 9.2: Efficiency comparison of WAITR and Greedy planning strategies for different
numbers of gliders.
9.8 Discussion
9.8.1 Coverage of WPR Clustering Techniques
Table 9.1 highlights the WPR method’s efficiency in identifying high temporal variability regions.
Coverage significantly increases with more waypoints: from 8.8% with the top waypoint to 72.7%
using the top 20. This ascending trend indicates WPR’s potential for extensive area coverage and
establishes an upper limit on achievable coverage, accessible for multi-agent path planning strategy
development.
9.8.2 Efficiency of Multiagent Path Planning
Table 9.2 shows that the WAITR planner consistently outperforms the Greedy planner in terms of
overall coverage, achieving a total of 27.1% coverage compared to 23.56% by the Greedy planner.
Notably, the WAITR planner demonstrates a broader spread of samples across all timesteps, in-
dicating its effectiveness in adapting to the dynamic changes in the environment. In contrast, the
Greedy planner’s performance is less consistent, with a significant drop in coverage in later frames.
2239.9 Conclusion
This research lays the foundation for the effective optimization of AUVs plans by adapting the
ROBUST network for path-planning tasks. The WPR clustering technique proves effective in
identifying areas of high temporal variability, thus enhancing the potential effectiveness of AUV
deployments. The development of the WAITR Planner and TED Predictor for the ROBUST
network is key in planning efficient spatiotemporal paths.
9.9.1 Future Work
Future efforts will aim to integrate u-v vector fields into our models to account for water currents,
enhancing the accuracy of AUV trajectory planning and better addressing the challenges posed
by underwater currents. Future developments will explore more advanced pathfinding algorithms,
like D*, to enhance navigation in marine environments. Such improvements are anticipated to
significantly boost the efficiency and flexibility of AUV path planning, thus contributing to more
effective and reliable oceanographic data collection.
224Chapter 10
Benchmarking Approach
10.1 Introduction
This chapter presents benchmarking approach obtained using a synthetic spatiotemporal dataset
designed to evaluate the approaches introduced in Chapter 2: Literature Review and Chapter 3:
Robust Network Theory. The dataset, along with the benchmarking framework, are detailed in
Chapter F: Benchmarking Environment. This framework provides a standardized platform for
comparing and analyzing the performance of these approaches.
Our benchmarking focuses on two distinct challenges within spatiotemporal environments:
1. Static placements: This presents a clustering challenge.
2. Mobile placements: This constitutes a planning problem.
10.2 Perfect Knowledge
In this benchmarking process, we intentionally isolate the clustering and planning challenges from
the complexities of prediction. To achieve this, we assume perfect knowledge for all approaches. In
ourcontext,perfectknowledgeimpliescompleteandaccurateinformationaboutthespatiotemporal
environment, including future conditions and potential events.
22510.2.1 Rationale
Employing the assumption of perfect knowledge serves several purposes:
• Performance Baseline: It helps establish a theoretical baseline against which to mea-
sure the efficiency and potential performance of our clustering and planning methods under
optimal conditions.
• Methodological Focus: This assumption allows us to identify the inherent strengths and
limitations of the approaches themselves, disentangled from the complexities of imperfect
information.
10.2.2 Limitations
While the assumption of perfect knowledge is a valuable theoretical tool, it’s important to ac-
knowledge its limitations. In real-world scenarios, perfect knowledge is rarely attainable. This
simplification helps us establish a benchmark for ideal performance.
10.2.3 Future Work
A crucial area for further exploration is examining the impact of imperfect knowledge on the
robustness and adaptability of these methods. Understanding how they perform under uncertain
or incomplete information is essential for their real-world application.
10.3 Static Sensor Placement:
10.3.1 A Clustering Challenge
In spatiotemporal environments, optimal placement of static sensors is the goal. Clustering tech-
niquescanbeusedtoidentifygroupsoflocationswithsimilarpatternsortemporalbehaviors. This
information aids in sensor placement strategies that maximize coverage, target areas of interest, or
balance redundancy for resilience.
226The following clustering approaches, introduced in detail in Chapter 2: Literature Review
and Chapter 5:ROBUST and Static Observers, will be benchmarked in this section:
1. Frequency Clustering: Forms clusters solely based on the frequency of point occurrence.
2. K-means Clustering: Groups points by their proximity to cluster centroids, minimizing
distances within each cluster.
3. Improved K-means Clustering (Frequency-biased): Adapts K-means by filtering out
infrequent points, emphasizing recurring patterns.
4. DBSCAN Clustering: Identifies dense regions of points, separating them from less dense
areas (noise).
5. Improved DBSCAN Clustering (Frequency-biased): Extends DBSCAN by filtering
out infrequent points, focusing on recurring spatial patterns.
6. Mixed Integer Linear Programming (MILP) Clustering: Formulates clustering as an
optimization problem, subject to user-defined constraints.
7. ROBUST with PREP Clustering: Identifies clusters based on the recurrence of point
proximities over time, using the PREP algorithm.
10.4 Mobile Sensor Placement
10.4.1 A Planning Challenge
Mobile sensor placement in spatiotemporal environments presents a complex, multi-agent planning
problem. Due to mobility constraints, such as limited speed and sensor range, these systems
require strategies that optimize observation coverage across space and time. Effective planning
must anticipate dynamic environmental changes and coordinate the movement of multiple sensors.
This section benchmarks three distinct planning approaches:
1. Greedy Planning: Prioritizesimmediaterewardswithinalimitedtimehorizon, potentially
sacrificing long-term gains. (Chapter 2)
2. Graph Signal Sampling: Employsonlinelearningforadaptive,long-termplanning. Lever-
227ages graph theory to optimize sensor placement based on signal dynamics and network struc-
ture. (Chapter 2)
3. ROBUST with WAITR: Employs the WAITR Planner to compute temporally optimized
sensor paths, maximizing observation coverage. Leverages knowledge about predicted event
dynamics and network structure. (Chapter 6)
10.5 Benchmarking Objectives
This benchmarking study aims to evaluate the coverage of points of interest (POIs) across all time
frames within a spatiotemporal environment. Specific objectives include:
• Assessing the ability of different sensor placement strategies to maximize POI observation
throughout the monitoring period.
• Evaluating the trade-off between maximizing the number of POIs observed at any given time
and ensuring consistent observation coverage across all time frames.
• Benchmarking the robustness of sensor placement strategies to environmental changes or
unexpected POI behavior by analyzing the consistency of coverage across all time frames.
10.5.1 Metrics for Evaluation:
• Average POI Coverage: Measures the average number of POIs observed across all time
frames.
• MinimumPOICoverage: IdentifiesthetimeframewiththelowestPOIobservationcount,
highlighting potential gaps.
• Temporal Continuity of Coverage: Evaluates the consistency of POI tracking over time
by analyzing observation gaps.
• Information Gain: MeasurestheamountofvaluableinformationcollectedabouteachPOI,
especially when POIs have varying significance.
22810.6 Synthetic Dynamic Heatmap
Chapter F: Benchmarking Environment describes the rationale for using synthetic data to evaluate
and compare algorithm performance in a controlled setting. This section outlines the features of
the selected synthetic dynamic heatmap dataset:
• Spatiotemporal Dynamics: The dataset simulates various spatiotemporal behaviors, mir-
roring the dynamics observed in real-world environments. These behaviors could include
evolutionary patterns, stochastic changes, or event-driven shifts in hot zones.
• Customizable Parameters: Thedatasetgenerationprocessallowsfortailoringparameters
such as grid size, intensity metrics, time steps, and the frequency of hot zone events. This
enables the creation of diverse scenarios for algorithm testing.
• Benchmarking Focus: The dataset is designed specifically for benchmarking the perfor-
mance of algorithms in identifying, tracking, and responding to evolving hot zones within
spatiotemporal environments.
10.6.1 Dimensionality
The dynamic heatmap captures both spatial and temporal properties:
• Spatial Dimensions: A 50x50 grid (50 rows, 50 columns).
• Temporal Dimension: 20 uniform time frames.
• Dataset Shape: (20, 50, 50)
10.6.2 Points of Interest
The dynamic heatmap is an abstract representation of spatiotemporal behaviors. Values within
the heatmap are normalized between 0 and 1:
• Hot Cells: Values of 1 represent the locations of interest for benchmarking.
• Graded Intensity: Values below 1 indicate varying levels of warmth, coolness, or decreased
intensity.
22910.6.3 Evolutionary Behavior
The dataset exhibits evolutionary dynamics, where each state is directly influenced by prior states.
This evolutionary focus emphasizes temporal variability and how hot cells change locations over
time.
10.6.4 Additional Considerations:
• Flexibility: While abstract, it’s implied that this dataset could model behaviors relevant to
diverse domains.
• Algorithmic Focus: The dataset is specifically tailored for benchmarking algorithms de-
signed to locate, track, and potentially respond to evolving hot zones.
10.6.5 Visualization: Initial Heatmap
This subsection presents a visualization for all twenty frames of the benchmarking dataset.
Heatmap - Frame 0 Heatmap - Frame 1
230Heatmap - Frame 2 Heatmap - Frame 3
Heatmap - Frame 4 Heatmap - Frame 5
231Heatmap - Frame 6 Heatmap - Frame 7
Heatmap - Frame 8 Heatmap - Frame 9
232Heatmap - Frame 10 Heatmap - Frame 11
Heatmap - Frame 12 Heatmap - Frame 13
233Heatmap - Frame 14 Heatmap - Frame 15
Heatmap - Frame 16 Heatmap - Frame 17
234Heatmap - Frame 18 Heatmap - Frame 19
235Chapter 11
Benchmarking Results
This chapter presents the detailed results of the benchmarking process outlined in Chapter 10:
Benchmarking Approach. Quantitative performance metrics and visualizations are used to evaluate
and compare the effectiveness of different static and mobile sensor placement strategies within a
simulated spatiotemporal environment.
11.1 Static Placements
This section details benchmarking results for static sensor placement strategies within a spatiotem-
poral environment that, while dynamic, interacts with non-mobile sensors. The experimental pa-
rameters set forth for all static placement strategies are as follows:
• Number of Static Sensors: Ten (10)
• Placement:
– Static Positioning: Sensors are positioned without mobility, remaining at fixed loca-
tions throughout the observation period.
– Sensor Range: Each sensor has a view radius of three (in cell units), determined by
the Euclidean distance formula, indicating the extent of the direct observation field.
236• Environment: The spatiotemporal heatmap dataset described in Chapter 10: Benchmark-
ing Approach, which is used to provide a consistent and repeatable context for evaluation.
• Performance Metrics: Employing the benchmarks introduced in Chapter 10: Benchmark-
ing Approach
– Overall POI Coverage: The cumulative number of Points of Interest (POI) observed
by all sensors throughout the benchmarking period.
– Overall POI Coverage Ratio: The proportion of POI observed relative to the total
available POI during the entire set of time steps.
11.1.1 Frequency Clustering
BenchmarkingresultsforFrequencyClusteringindicateitsperformanceinidentifyingclustersbased
solely on point frequency
Visualization:
This visualization presents a snapshot of a sensor network within a dynamic spatiotemporal en-
vironment. The heatmap is color-coded, with blue tones indicating cooler regions and red tones
representing hotter regions. Areas of particular interest, which are the focus for sensor observation,
are highlighted by dark red cells.
• Sensor Locations: The green dots mark the current locations of the sensors within the
environment. Inscribed within each dot is a number, indicating the total number of events
that have occurred at that specific location.
237Frequency clustering - Frame 0 Frequency clustering - Frame 1
Frequency clustering - Frame 2 Frequency clustering - Frame 3
238Frequency clustering - Frame 4 Frequency clustering - Frame 5
Frequency clustering - Frame 6 Frequency clustering - Frame 7
239Frequency clustering - Frame 8 Frequency clustering - Frame 9
Frequency clustering - Frame 10 Frequency clustering - Frame 11
240Frequency clustering - Frame 12 Frequency clustering - Frame 13
Frequency clustering - Frame 14 Frequency clustering - Frame 15
241Frequency clustering - Frame 16 Frequency clustering - Frame 17
Frequency clustering - Frame 18 Frequency clustering - Frame 19
24211.1.2 K-means Clustering
Benchmarking results for K-means Clustering demonstrate its ability to group points based on
spatial proximity.
Visualization:
The color-coded heatmap background ranges from cool blue to warm red tones, with the most
critical regions of interest highlighted in dark red.
• Event Aggregation: The green dots distributed across the map represent the aggregated
points of events, signifying the distribution of occurrences across all time steps within the
environment.
• Sensor Positions: The red dots denote the current locations of sensors, which have been
strategically placed based on the centroid placements derived from k-means clustering.
K-means clustering - Frame 0 K-means clustering - Frame 1
243K-means clustering - Frame 2 K-means clustering - Frame 3
K-means clustering - Frame 4 K-means clustering - Frame 5
244K-means clustering - Frame 6 K-means clustering - Frame 7
K-means clustering - Frame 8 K-means clustering - Frame 9
245K-means clustering - Frame 10 K-means clustering - Frame 11
K-means clustering - Frame 12 K-means clustering - Frame 13
246K-means clustering - Frame 14 K-means clustering - Frame 15
K-means clustering - Frame 16 K-means clustering - Frame 17
247K-means clustering - Frame 18 K-means clustering - Frame 19
24811.1.3 Improved K-means Clustering
Benchmarking results for Improved K-means Clustering highlight the impact of frequency-based
filtering on cluster formation. This approach filters any non-recurring events from the k-means
clustering.
Visualization:
This visualization showcases the results of an improved k-means clustering approach for sensor
placement across a cumulative time frame, encompassing all 20 time steps. The heatmap in the
background transitions from cool blue to warm red hues, with the most crucial areas of interest
marked by dark red.
• EventAggregation: Thegreendotsacrossthemapindicatethelocationswhereeventshave
repeatedly occurred, highlighting the frequency of activity within specific regions over the
entireperiodofobservation. Thisaggregationhelpsidentifyzonesofpersistentenvironmental
interest.
• Sensor Positions: The red dots illustrate the optimal sensor locations as determined by
an advanced k-means clustering algorithm. This method has been refined to disregard non-
recurring events, focusing the placement of sensors on areas with consistent activity in an
attempt to enhance monitoring efficiency.
249Improved K-means clustering - Frame 0 Improved K-means clustering - Frame 1
Improved K-means clustering - Frame 2 Improved K-means clustering - Frame 3
250Improved K-means clustering - Frame 4 Improved K-means clustering - Frame 5
Improved K-means clustering - Frame 6 Improved K-means clustering - Frame 7
251Improved K-means clustering - Frame 8 Improved K-means clustering - Frame 9
Improved K-means clustering - Frame 10 Improved K-means clustering - Frame 11
252Improved K-means clustering - Frame 12 Improved K-means clustering - Frame 13
Improved K-means clustering - Frame 14 Improved K-means clustering - Frame 15
253Improved K-means clustering - Frame 16 Improved K-means clustering - Frame 17
Improved K-means clustering - Frame 18 Improved K-means clustering - Frame 19
25411.1.4 DBSCAN Clustering
Benchmarking results for DBSCAN Clustering reveal its effectiveness in detecting dense regions
within the spatiotemporal data.
Visualization:
This visualization presents the outcome of a DBSCAN clustering method for sensor placement,
integrating data across all 20 time steps. The background heatmap displays a spectrum of temper-
atures, shifting from cooler blue to warmer red areas, with the most significant regions of interest
denoted in dark red.
• Event Aggregation: The green dots scattered across the heatmap represent the accumu-
lative points where events have occurred, reflecting the overall pattern of activity within
the environment through the entire observation span. This comprehensive event aggregation
underscores regions with a high incidence of environmental phenomena.
• Sensor Positions: The red dots pinpoint the finalized sensor placements, which are the re-
sult of the DBSCAN clustering process. This technique accounts for all events, ensuring that
the sensor locations correspond to areas of frequent and significant environmental activity,
thus providing a thorough and effective monitoring network.
255DBSCAN clustering - Frame 0 DBSCAN clustering - Frame 1
DBSCAN clustering - Frame 2 DBSCAN clustering - Frame 3
256DBSCAN clustering - Frame 4 DBSCAN clustering - Frame 5
DBSCAN clustering - Frame 6 DBSCAN clustering - Frame 7
257DBSCAN clustering - Frame 8 DBSCAN clustering - Frame 9
DBSCAN clustering - Frame 10 DBSCAN clustering - Frame 11
258DBSCAN clustering - Frame 12 DBSCAN clustering - Frame 13
DBSCAN clustering - Frame 14 DBSCAN clustering - Frame 15
259DBSCAN clustering - Frame 16 DBSCAN clustering - Frame 17
DBSCAN clustering - Frame 18 DBSCAN clustering - Frame 19
26011.1.5 Improved DBSCAN Clustering
Benchmarking results for Improved DBSCAN Clustering illustrate the effect of frequency-based
filtering on its density-based cluster identification.
Visualization:
ThisvisualizationdemonstratestheresultsofanenhancedDBSCANclusteringapproachforsensor
placement, consolidating data from all 20 time steps. The heatmap background gradates from cool
blue to warm red hues, with the most pertinent areas of interest highlighted in dark red.
• Event Aggregation: The green dots distributed across the map indicate the locations of
recurring events, showing the frequency and consistency of activity within certain regions
over the total duration of the observation. This selective event aggregation serves to identify
zones of sustained environmental importance.
• Sensor Positions: The red dots mark the optimized locations of sensors, determined by a
refined DBSCAN clustering algorithm that filters out non-recurring events. This approach
focuses sensor placement on areas exhibiting persistent activity, aiming to optimize the effi-
ciency and effectiveness of the environmental monitoring framework.
261Improved DBSCAN clustering - Frame 0 Improved DBSCAN clustering - Frame 1
Improved DBSCAN clustering - Frame 2 Improved DBSCAN clustering - Frame 3
262Improved DBSCAN clustering - Frame 4 Improved DBSCAN clustering - Frame 5
Improved DBSCAN clustering - Frame 6 Improved DBSCAN clustering - Frame 7
263Improved DBSCAN clustering - Frame 8 Improved DBSCAN clustering - Frame 9
Improved DBSCAN clustering - Frame 10 Improved DBSCAN clustering - Frame 11
264Improved DBSCAN clustering - Frame 12 Improved DBSCAN clustering - Frame 13
Improved DBSCAN clustering - Frame 14 Improved DBSCAN clustering - Frame 15
265Improved DBSCAN clustering - Frame 16 Improved DBSCAN clustering - Frame 17
Improved DBSCAN clustering - Frame 18 Improved DBSCAN clustering - Frame 19
26611.1.6 Mixed Integer Linear Programming (MILP)
BenchmarkingresultsforMILPClusteringshowcaseitsperformanceinoptimizingclusterformation
subject to user-defined constraints.
Visualization:
ThisvisualizationportraystheapplicationofaMixedIntegerLinearProgramming(MILP)method
for strategic sensor placement, utilizing data accumulated over all 20 time steps. The heatmap
serves as the foundation, showcasing a temperature scale that transitions from a calm blue to a
warmer red, with especially critical areas accentuated in dark red.
• Event Aggregation: The black dots scattered throughout the heatmap represent all ag-
gregated hot cells—zones of high temperature—across the entire observational period. This
comprehensive data reflects the intensity and distribution of thermal events in the environ-
ment.
• Sensor Influence: The green dots depict the aggregated hot cells that fall within the
sensors’ field of view, illustrating the effective coverage area of the deployed sensors and the
frequency of detected thermal events within these zones.
• Sensor Locations: The red dots indicate the final sensor placements as determined by the
MILPoptimizationprocess. Theselocationshavebeencomputedtomaximizethemonitoring
potential.
267MILP clustering - Frame 0 MILP clustering - Frame 1
MILP clustering - Frame 2 MILP clustering - Frame 3
268MILP clustering - Frame 4 MILP clustering - Frame 5
MILP clustering - Frame 6 MILP clustering - Frame 7
269MILP clustering - Frame 8 MILP clustering - Frame 9
MILP clustering - Frame 10 MILP clustering - Frame 11
270MILP clustering - Frame 12 MILP clustering - Frame 13
MILP clustering - Frame 14 MILP clustering - Frame 15
271MILP clustering - Frame 16 MILP clustering - Frame 17
MILP clustering - Frame 18 MILP clustering - Frame 19
27211.1.7 ROBUST with PREP Clustering
Benchmarking results for ROBUST with PREP Clustering evaluate its ability to identify clusters
based on recurring spatiotemporal proximities.
Visualization:
This visualization showcases the PREP clustering method for sensor placement as defined in Chap-
ter 5: ROBUST and Static Observers. The underlying heatmap gradients from cool blues to warm
reds, indicating temperature variations, with dark red spots marking regions of high importance or
activity.
• Sensor Locations: The green dots are strategically placed sensors within the environment.
These locations were chosen based on the PREP clustering algorithm.
• Sensor View Range: Each sensor is encircled by a lime green line defining its view range,
which visually represents the area that each sensor can effectively monitor.
PREP clustering - Frame 0 PREP clustering - Frame 1
273PREP clustering - Frame 2 PREP clustering - Frame 3
PREP clustering - Frame 4 PREP clustering - Frame 5
274PREP clustering - Frame 6 PREP clustering - Frame 7
PREP clustering - Frame 8 PREP clustering - Frame 9
275PREP clustering - Frame 10 PREP clustering - Frame 11
PREP clustering - Frame 12 PREP clustering - Frame 13
276PREP clustering - Frame 14 PREP clustering - Frame 15
PREP clustering - Frame 16 PREP clustering - Frame 17
277PREP clustering - Frame 18 PREP clustering - Frame 19
27811.2 Mobile Placements
Thissectionpresentsbenchmarkingresultsformobilesensorplacementstrategieswithinadynamic
spatiotemporalenvironment. Thefollowingexperimentalparameterswereusedacrossallevaluated
approaches:
• Number of Mobile Sensors Three (3)
• Mobility:
– Movement Speed: Up to 2 hops per time step (hop-based).
– Sensor Range: A view radius of two (in cell units), calculated using the Euclidean
distance formula, defines each sensor’s immediate observation area.
• Environment: The dynamic heatmap dataset introduced in Chapter 10: Benchmarking
Approach, providing a controlled and replicable testing ground.
• Performance Metrics: As outlined in Chapter 10: Benchmarking Approach
– Overall POI Coverage: sum of POI observed across all time steps for each agent.
– Overall POI Coverage Ratio: ratio of all observed points compared to total POI
across all time steps.
11.2.1 Greedy Planning
BenchmarkingresultsforGreedyPlanningassessitseffectivenessinachievingshort-termgainsand
its potential trade-offs in long-term optimization.
Visualization:
These visualizations depict the snapshots of a mobile sensor network within a dynamic spatiotem-
poral environment. The underlying heatmap displays a color gradient, with blue tones indicating
cooler areas and red tones signifying hotter areas. The dark red cells represent areas of interest
within the environment.
279• Network: The network of circles and lines illustrates the waypoint network and their con-
nections. This network is generated using the PREP clustering algorithm from chapter 6,:
ROBUST and Mobile Observers.
• Sensor Activity: The dots are color-coded to indicate sensor activity.
– Lime green nodes: These represent active sensors that are currently within range of
a hot cell (red area) in the heatmap.
– Dark gray nodes: These represent inactive sensors that are currently outside the
range of any hot cell.
• Sensor Range: The light green circles surrounding the active lime green nodes depict the
sensor’s possible view radius. This indicates the area that each sensor could observe from
that waypoint.
• Sensor Locations: The yellow stars pinpoint the current locations of the mobile sensors
within the environment.
Greedy Planner - Frame 0 Greedy Planner - Frame 1
280Greedy Planner - Frame 2 Greedy Planner - Frame 3
Greedy Planner - Frame 4 Greedy Planner - Frame 5
281Greedy Planner - Frame 6 Greedy Planner - Frame 7
Greedy Planner - Frame 8 Greedy Planner - Frame 9
282Greedy Planner - Frame 10 Greedy Planner - Frame 11
Greedy Planner - Frame 12 Greedy Planner - Frame 13
283Greedy Planner - Frame 14 Greedy Planner - Frame 15
Greedy Planner - Frame 16 Greedy Planner - Frame 17
284Greedy Planner - Frame 18 Greedy Planner - Frame 19
28511.2.2 Graph Signal Sampling Planner
Benchmarking results for Graph Signal Sampling analyze its adaptive capabilities in sensor place-
ment optimization, leveraging graph theory and online learning.
Visualization:
The underlying heatmap displays a continuum of temperature, with cool zones represented by
blue tones and warmer zones denoted by red tones. The most intense red cells highlight the most
significant areas within the environment, which represent the points of interest.
• Network: This waypoint network is generated using the Graph Signal Sampling approach,
as detailed in chapter 2, titled Literature Review.
• WaypointNodes: Allnodesinthisvisualizationarecoloredlimegreenregardlessofactivity
status.
• Sensor Locations: Theyellowstarsmarkthecurrentpositionsofthemobilesensorswithin
the network.
Graph Signal Sampling - Frame 0 Graph Signal Sampling - Frame 1
286Graph Signal Sampling - Frame 2 Graph Signal Sampling - Frame 3
Graph Signal Sampling - Frame 4 Graph Signal Sampling - Frame 5
287Graph Signal Sampling - Frame 6 Graph Signal Sampling - Frame 7
Graph Signal Sampling - Frame 8 Graph Signal Sampling - Frame 9
288Graph Signal Sampling - Frame 10 Graph Signal Sampling - Frame 11
Graph Signal Sampling - Frame 12 Graph Signal Sampling - Frame 13
289Graph Signal Sampling - Frame 14 Graph Signal Sampling - Frame 15
Graph Signal Sampling - Frame 16 Graph Signal Sampling - Frame 17
290Graph Signal Sampling - Frame 18 Graph Signal Sampling - Frame 19
29111.2.3 ROBUST with WAITR Planner
Benchmarking results for ROBUST with WAITR examine its performance in maximizing observa-
tion coverage using predicted event dynamics and the WAITR Planner.
Visualization:
These visualizations depict the snapshots of a mobile sensor network within a dynamic spatiotem-
poral environment. The underlying heatmap displays a color gradient, with blue tones indicating
cooler areas and red tones signifying hotter areas. The dark red cells represent areas of interest
within the environment.
• Network: The network of circles and lines illustrates the waypoint network and their con-
nections. This network is generated using the PREP clustering algorithm from chapter 6,:
ROBUST and Mobile Observers.
• Sensor Activity: The dots are color-coded to indicate sensor activity.
– Lime green nodes: These represent active sensors that are currently within range of
a hot cell (red area) in the heatmap.
– Dark gray nodes: These represent inactive sensors that are currently outside the
range of any hot cell.
• Sensor Range: The light green circles surrounding the active lime green nodes depict the
sensor’s possible view radius. This indicates the area that each sensor could observe from
that waypoint.
• Sensor Locations: The yellow stars pinpoint the current locations of the mobile sensors
within the environment.
292ROBUST with WAITR - Frame 0 ROBUST with WAITR - Frame 1
ROBUST with WAITR - Frame 2 ROBUST with WAITR - Frame 3
293ROBUST with WAITR - Frame 4 ROBUST with WAITR - Frame 5
ROBUST with WAITR - Frame 6 ROBUST with WAITR - Frame 7
294ROBUST with WAITR - Frame 8 ROBUST with WAITR - Frame 9
ROBUST with WAITR - Frame 10 ROBUST with WAITR - Frame 11
295ROBUST with WAITR - Frame 12 ROBUST with WAITR - Frame 13
ROBUST with WAITR - Frame 14 ROBUST with WAITR - Frame 15
296ROBUST with WAITR - Frame 16 ROBUST with WAITR - Frame 17
ROBUST with WAITR - Frame 18 ROBUST with WAITR - Frame 19
297Chapter 12
Benchmarking Analysis
12.1 Static Placements
12.1.1 Introduction
This section analyzes the performance of static sensor placement strategies based on the metrics
outlined in Chapter 11: Benchmarking Results. Table 12.1 summarizes the results, comparing
the total number of potential hot points present in the environment to the number of hot points
successfully observed by each method.
Method Total Hot Points Observed Hot Points Coverage Score
ROBUST with PREP 1456 406 0.2788
MILP 1456 396 0.2720
Improved DBSCAN 1456 155 0.1065
DBSCAN 1456 118 0.0810
Improved Kmeans 1456 270 0.1854
Kmeans 1456 178 0.1223
Frequency 1456 282 0.1937
Table 12.1: Comparison of Sensor Placement Strategies
29812.1.2 Summary of Table 12.1
This table compares the effectiveness of different clustering techniques for identifying potential
sensor placement locations in a dynamic heatmap. Each row represents a clustering method.
All techniques used the same dynamic heatmap for consistent comparison. Columns include the
total number of Points of Interest (POI), the number of POI successfully observed with sensors
placed based on clustering results (using perfect knowledge), and the overall ‘Coverage Score’. The
‘Coverage Score’ represents the ratio of observed POI to total POI, with higher scores indicating
better sensor placement effectiveness.
12.1.3 Comparative Analysis:
PREP and MILP demonstrate the highest Coverage Scores, indicating their superior ability to
locatesensorsnearhotpoints. HoweverPREPwithitsvectorizedapproachscalesmuchbetterthan
MILP. Frequency, K-means, and their improved variants perform moderately well, while standard
DBSCAN exhibits the lowest coverage. The results highlight how critical recurrence (temporal
clustering) is in addition to spatial clustering algorithms in observing the maximum number of hot
spots.
Filtering Impact:
FilteringoutnoisyeventsimprovesK-meansandDBSCANperformance,suggestingthatinfrequent
points can distort cluster formation in these algorithms.
Cluster Diameter Limitations:
Traditional K-means and DBSCAN focus on spatial proximity or density but may not prioritize
clusters with restricted diameters. This mismatch, especially when the cluster diameter should
ideally align with the sensor’s range, limits the direct correlation between optimal cluster centroids
and ideal sensor locations.
299Frequency’s Strength:
The surprisingly good performance of simple frequency clustering highlights that in this scenario,
areas with frequent events naturally tend to be denser, making them easier to identify.
Synthetic Datasets
The flexibility of the synthetic heatmap generator provides an opportunity to systematically test
how these sensor placement strategies perform under a variety of dataset conditions. By manipu-
lating parameters such as the frequency, intensity, and evolutionary behavior of hot zones, we could
gain even deeper insights into the strengths and limitations of each approach.
12.2 Mobile Placements
12.2.1 Introduction
This section evaluates mobile sensor placement strategies in a dynamic environment. Table 12.2
presents the coverage achieved by each sensor individually and their overall combined Coverage
Score.
Table 12.2: Sensor Coverage Analysis
Method Sensor 0 Sensor 1 Sensor 2 Sum Score
ROBUST with WAITR 64 60 49 173 0.11882
Greedy 34 41 40 115 0.07898
Graph Signal 55 50 50 155 0.10646
12.2.2 Summary of Table 12.2
This table analyzes the performance of different multi-agent planning strategies in a dynamic
environment with a shared heatmap. Each row represents a strategy’s outcomes with three mobile
sensors(agent0,agent1,agent2). Thecolumnsdepictindividualsensorcoverage(‘Sensor0’,‘Sensor
1’, ‘Sensor 2’), the total team coverage (‘Sum’), and the overall ‘Coverage Score’. The ‘Coverage
Score’ represents the ratio of successfully observed Points of Interest (POI) to the total number of
POI that occurred during the mission, with higher scores indicating better performance.
30012.2.3 Comparative Analysis:
The WAITR planner demonstrates the highest overall coverage, suggesting its effectiveness in opti-
mizing sensor paths over time. Graph Signal Sampling performs comparably to WAITR, indicating
its ability to adapt to changing conditions. Greedy planning achieves the lowest coverage, high-
lighting potential limitations when prioritizing short-term gains in dynamic scenarios.
12.2.4 Challenges of Imperfect Knowledge
WAITR’srelianceonWeightedAggregateInter-TemporalRewards(WAITR)providesflexibilityin
how predictions are incorporated. While the perfect knowledge scenario used a uniform weighting
scheme,real-worldapplicationscanleverageconfidencelevelsandriskassessmentstoinfluencepath
calculation.
WAITR’s Risk-Reward Flexibility
Incontrasttotheuniformweightingunderperfectknowledge,real-worldscenariosnecessitatearisk-
aware approach where Sensors could prioritize routes with higher confidence hot cell predictions,
demonstrating a risk-averse approach. Alternatively, a risk-tolerant strategy might prioritize paths
even with greater uncertainty, focusing on areas with high potential rewards (e.g., denser clusters
of hot cells). This trade-off between certainty and potential payoff highlights the importance
of tailoring WAITR’s weighting strategy to the specific application’s risk tolerance. The graph-
theoretic representation within the ROBUST network could facilitate the modeling of uncertainty
alongside spatial relationships, allowing for richer risk analysis in WAITR’s path calculation.
Regret Scoring:
Incorporating risk and confidence-based weighting enables the calculation of ’regret scores’, provid-
ing valuable insights into the trade-offs between risk-averse and risk-seeking sensor paths. These
scores could inform dynamic adjustments to WAITR’s behavior, potentially triggering replanning
or switching between risk profiles based on real-time performance evaluations.
301Incorporating Real-Time Feedback into WAITR:
In practical use, reliance on deep forecasting may introduce vulnerability if the dynamics of the
environment become highly unpredictable. This could be mitigated with the following considera-
tions:
• Replanning Triggers: Suggest incorporating a mechanism to trigger recalculation of the
sensor path under specific conditions. These could be:
• Significant Deviation from Predictions: Measure the divergence between the predicted
hot spot locations and the actual observations. If they exceed a certain threshold, initiate
replanning.
• Time-based Intervals: Replan paths at regular intervals to account for potential environ-
mental changes, balancing proactivity with computational cost.
12.2.5 WAITR’s Role in Benchmarking
Theoretical Benchmark:
WAITRrepresentsthetheoreticalupperboundonachievablecoverageundertheperfectknowledge
assumption. This highlights its value in understanding the limits of performance in this specific
scenario. Due to its reliance on viewing and movement constraints, as well as limited resources,
WAITRprovidesamaximinoutcomeformulti-agenttemporalpathplanningunderidealconditions
while avoiding redundant sampling.
Comparative Tool:
WAITR’s optimal path serves as a powerful baseline for evaluating other sensor placement ap-
proaches. By comparing results to WAITR, we gain valuable insights into the impact of real-world
constraints like imperfect predictions, limited sensor resources, or unpredictable environments.
This comparison highlights the gap between theoretical optimality and the necessary adaptations
required for practical implementation.
302Chapter 13
Conclusions and Future Work
13.1 Summary of Findings
This dissertation introduced novel spatial metrics that advance the field of ROBUST network
analysis. Thesemetricsoutperformedtraditionalmethods,providinggreaterprecisionandenabling
more actionable insights, thereby validating Hypothesis 1. The foundation of this innovation lies
in the novel graph-based measures introduced and explored within this study.
13.1.1 Novel Graph-Based Measures
This study has introduced and explored novel graph-based measures for ROBUST network analy-
sis, emphasizing the integration of spatial metrics and structural insights to unravel the complex
interplay between nodes within a network.
13.1.2 Demonstrates ROBUST Under Perfect Knowledge
Our methodological approach assumes perfect knowledge of the network. This allows us to clearly
demonstrate the capabilities of ROBUST networks for analyzing dynamic behaviors, evaluating
network configurations, and identifying optimization strategies. By establishing a baseline under
ideal conditions, we gain valuable insights into the potential of the ROBUST framework.
30313.1.3 Versatility Across Domains
Particularly, our analysis has proven adept at examining observer-observable patterns, thereby fa-
cilitating the optimization of stationary nodes and planning paths in multi-agent systems. This
success in optimizing resource allocation highlights the potential for ROBUST networks to outper-
form alternative models, as proposed in Hypothesis 2.
13.2 Contributions to the Field
13.2.1 Extending Spatiotemporal Measures with ROBUST
Our work makes contributions to the field of spatiotemporal network analysis. First, by developing
asuiteofspatialmetricstailoredforrobustnetworkanalysis,weofferafreshlensthroughwhichthe
resilience,connectivity,andspatialpropertiesofnetworkscanbeexamined. Theintegrationofthese
measures within the ROBUST framework directly contributed to the optimization improvements
observedacrossvariouscasestudies. Thisdemonstratesthevalueofthismethodologicalinnovation,
validating Hypothesis 3.
13.2.2 Extending Spatiotemporal Dynamics with ROBUST
The ROBUST framework offers a methodological innovation in network analysis, enhancing our
understanding of spatiotemporal dynamics and the intricacies of bipartite interactions. It offers
a novel perspective on the interaction of entities within networks, illuminating factors that in-
fluence network efficiency and resilience. ROBUST integrates an understanding of the roles and
relationships inherent in observer-observable bipartite structures. This allows for the definition of
optimality within observational and exploratory networks. Case studies validate the framework’s
effectiveness and adaptability across various real-world scenarios.
30413.3 Directions for Future Research
13.3.1 Incorporating Imperfect Knowledge
Firstly, acknowledging the limitations of assuming perfect knowledge, there is a compelling need
to explore models that incorporate imperfect knowledge. By integrating probabilistic modeling
to represent imperfect knowledge, we can evaluate regret scores associated with decision-making,
thereby enhancing the robustness of networks against unforeseen changes and uncertainties.
13.3.2 Refinement of Temporal Pathing Methodologies
Secondly, we intend to refine our methodologies for temporal pathing. Although the Dijkstra’s
approach has served well, the potential for optimization through alternative algorithms, such as A*
pathfinding, warrants investigation. Such advancements could significantly improve the real-time
adaptability of our models, especially in continuous sampling scenarios.
13.3.3 Expanding the Scope of Case Studies
Moreover, expanding the scope of our case studies to include a wider array of bipartite dynam-
ics—such as collaborative versus competitive interactions—will be crucial. By modeling subcat-
egories like invaders and defenders or hiders and seekers, we can gain deeper insights into the
nuanced relationships that govern network behavior and efficiency.
13.3.4 Concluding Remarks
ThisdissertationnotonlyvalidateskeyhypothesesthatunderpintheROBUSTframeworkbutalso
expands on the traditional boundaries in network analysis through the introduction of novel spatial
metrics. Our findings pave the way for a deeper understanding of observational network dynamics,
offeringmethodologicalandtheoreticaladvancementsthatpromisesignificantimplicationsforboth
academic research and practical applications. The journey embarked upon in this study, while
laying a solid foundation, unveils a spectrum of opportunities for future exploration. The outlined
directions for future research are not mere continuations but strategic extensions that seek to
305address the complexities and uncertainties inherent in real-world networks. As we advance, the
ROBUST framework stands as an innovative approach with the potential to enhance network
resilience and functionality across diverse domains.
306References
Charu C. Aggarwal, editor. Data Classification Algorithms and Applications. Chapman and Hal-
l/CRC, 1 edition, 2014. ISBN 9780429102639. doi: 10.1201/b17320. URL https://doi.org/
10.1201/b17320.
R´eka Albert and Albert-L´aszl´o Barab´asi. Statistical mechanics of complex networks. Reviews of
Modern Physics, 74(1):47, 2002. doi: 10.1103/RevModPhys.74.47.
A.S. Asratian, T.M.J. Denley, and R. H¨aggkvist. Bipartite Graphs and their Applications, vol-
ume 131 of Cambridge Tracts in Mathematics. Cambridge University Press, 1998. ISBN
9780521593458.
GCOOS Regional Association. Gulf of mexico coastal ocean observing system (gcoos): Data man-
agement system plan, 2017.
GCOOS Regional Association. A sustained, integrated ocean observing system for the gulf of
mexico (gcoos): Infrastructure for decision-making, 2018.
BoranEkinAydin,HugoHagedooren,MartineM.Rutten,JoostDelsman,GualbertH.P.OudeEs-
sink, Nick van de Giesen, and Edo Abraham. A greedy algorithm for optimal sensor place-
ment to estimate salinity in polder networks. Water, 11(5), 2019. ISSN 2073-4441. doi:
10.3390/w11051101. URL https://doi.org/10.3390/w11051101.
Thomas Aynaud and Jean-Loup Guillaume. Static community detection algorithms for evolv-
ing networks. In WiOpt’10: Modeling and Optimization in Mobile, Ad Hoc, and Wireless
Networks, pages 508–514, Avignon, France, May 2010. URL https://inria.hal.science/
inria-00492058.
307Trevor C. Bailey and Anthony C. Gatrell. Interactive Spatial Data Analysis. Longman Scientific
& Technical; J. Wiley, Harlow Essex, England; New York, NY, 1995. ISBN 9780582244931,
9780470235027, 0582244935, 0470235020.
Albert-Laszlo Barabasi. Linked: How Everything is Connected to Everything Else and What it
Means for Business, Science and Everyday Life. Plume, 2003. ISBN 978-0-452-28439-5.
A. Barrat, M. Barth´elemy, R. Pastor-Satorras, and A. Vespignani. The architecture of complex
weighted networks. Proceedings of the National Academy of Sciences, 101(11):3747–3752, March
2004. ISSN 1091-6490. doi: 10.1073/pnas.0400087101. URL http://dx.doi.org/10.1073/
pnas.0400087101.
Marc Barthelemy. Spatial Networks: A Complete Introduction: From Graph Theory and Statistical
Physics to Real-World Applications. Springer Nature, Switzerland, 2022. ISBN 978-3-030-94106-
2. doi: 10.1007/978-3-030-94106-2.
M. Barth´elemy. Crossover from scale-free to spatial networks. Europhysics Letters, 63(6):
915, sep 2003. doi: 10.1209/epl/i2003-00600-6. URL https://dx.doi.org/10.1209/epl/
i2003-00600-6.
Vladimir Batagelj and Selena Praprotnik. An algebraic approach to temporal network anal-
ysis based on temporal quantities. Social Network Analysis and Mining, 6(1), May 2016.
ISSN 1869-5469. doi: 10.1007/s13278-016-0330-4. URL http://dx.doi.org/10.1007/
s13278-016-0330-4.
Vladimir Batagelj, Patrick Doreian, Anusk˘a Ferligoj, and Natas˘a Kejz˘ar, editors. Understanding
Large Temporal Networks and Spatial Networks: Exploration, Pattern Searching, Visualization
and Network Evolution. John Wiley & Sons, Ltd, oct 2014. ISBN 978-0-470-71452-2. doi:
10.1002/9781118915370. URL http://dx.doi.org/10.1002/9781118915370.
James O. Berger. Statistical Decision Theory and Bayesian Analysis. Springer Series in Statis-
tics. Springer New York, NY, 2 edition, 1985. ISBN 978-0-387-96098-2. doi: 10.1007/
308978-1-4757-4286-2. URL https://doi.org/10.1007/978-1-4757-4286-2. Originally pub-
lished with the title: Statistical Decision Theory.
D. Birant and A. Kut. St-dbscan: An algorithm for clustering spatial–temporal data. Data &
Knowledge Engineering, 60(1):208–221, 2007a.
Derya Birant and Alp Kut. St-dbscan: An algorithm for clustering spatial–temporal data. Data
& Knowledge Engineering, 60(1):208–221, 2007b. ISSN 0169-023X. doi: https://doi.org/
10.1016/j.datak.2006.01.013. URL https://www.sciencedirect.com/science/article/pii/
S0169023X06000218. Intelligent Data Mining.
VincentDBlondel,Jean-LoupGuillaume,RenaudLambiotte,andEtienneLefebvre. Fastunfolding
ofcommunitiesinlargenetworks. Journal of Statistical Mechanics: Theory and Experiment,2008
(10):P10008, October 2008. ISSN 1742-5468. doi: 10.1088/1742-5468/2008/10/p10008. URL
http://dx.doi.org/10.1088/1742-5468/2008/10/P10008.
Benjamin Blonder, Tina W. Wey, Anna Dornhaus, Richard James, and Andrew Sih. Tem-
poral dynamics and network analysis. Methods in Ecology and Evolution, 3(6):958–972,
2012. doi: https://doi.org/10.1111/j.2041-210X.2012.00236.x. URL https://besjournals.
onlinelibrary.wiley.com/doi/abs/10.1111/j.2041-210X.2012.00236.x.
B´ela Bollob´as. Modern Graph Theory. Graduate Texts in Mathematics. Springer New York, NY,
1 edition, 7 1998. ISBN 978-0-387-98488-9. doi: 10.1007/978-1-4612-0619-4. URL https:
//doi.org/10.1007/978-1-4612-0619-4. XIV, 394 pages, 3 b/w illustrations.
Phillip Bonacich. Power and centrality: A family of measures. American Journal of Sociology, 92
(5):1170–1182, 1987. ISSN 00029602, 15375390. doi: 10.1086/228631. URL http://dx.doi.
org/10.1086/228631.
J. A. Bondy and U. S. R. Murty. Graph theory with applications, volume 290. Citeseer, 1976.
Ulrik Brandes. A faster algorithm for betweenness centrality. Journal of Mathematical Sociol-
ogy, 25:163–177, 2001. doi: 10.1080/0022250X.2001.9990249. URL https://doi.org/10.1080/
0022250X.2001.9990249.
309Arnaud Casteigts, Paola Flocchini, Walter Quattrociocchi, and Nicola Santoro. Time-varying
graphs and dynamic networks, 2012. URL https://doi.org/10.48550/arXiv.1012.0009.
E.P. Chassignet, H.E. Hurlburt, O.M. Smedstad, G.R. Halliwell, P.J. Hogan, A.J. Wallcraft,
R. Baraille, and R. Bleck. The hycom (hybrid coordinate ocean model) data assimilative
system. J. Mar. Syst., 65:60–83, 2007a. doi: 10.1016/j.jmarsys.2005.09.016. URL https:
//doi.org/10.1016/j.jmarsys.2005.09.016.
E.P. Chassignet, H.E. Hurlburt, O.M. Smedstad, G.R. Halliwell, P.J. Hogan, A.J. Wallcraft,
R. Baraille, and R. Bleck. The hycom (hybrid coordinate ocean model) data assimilative
system. J. Mar. Syst., 65:60–83, 2007b. doi: 10.1016/j.jmarsys.2005.09.016. URL http:
//dx.doi.org/10.1016/j.jmarsys.2005.09.016.
M.Chung,R.Wilson,R.Ladner,T.Lovitt,M.Cobb,M.Abdelguerfi,andK.Shaw. Thegeospatial
information distribution system (gids). In Akmal B. Chaudhri, editor, Succeeding with Object
Databases. John Wiley & Sons, 2001.
City of New Orleans. Calls for service 2022. City of New Orleans Open Data, 2022. URL
https://data.nola.gov/Public-Safety-and-Preparedness/Calls-for-Service-2022/
nci8-thrr/data. Accessed: 2024-03-01.
Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. Introduction
to Algorithms, Third Edition. The MIT Press, 3rd edition, 2009. ISBN 0262033844. doi:
10.5555/1614191. URL https://dl.acm.org/doi/book/10.5555/1614191.
Noel Cressie and Christopher K. Wikle. Statistics for spatio-temporal data. Geographical Analysis,
44(4), October 2012. doi: 10.1111/j.1538-4632.2012.00859.x. URL https://doi.org/10.1111/
j.1538-4632.2012.00859.x. Hoboken, NJ: Wiley, 2011, 624 pp.
Daniel Delling and Dorothea Wagner. Time-Dependent Route Planning, pages 207–230. Springer
Berlin Heidelberg, Berlin, Heidelberg, 2009. ISBN 978-3-642-05465-5. doi: 10.1007/
978-3-642-05465-5 8. URL https://doi.org/10.1007/978-3-642-05465-5_8.
310Reinhard Diestel. Graph Theory. Springer Publishing Company, Incorporated, 5th edition, 2017.
ISBN 3662536218. URL https://dl.acm.org/doi/10.5555/3134208.
E. W. Dijkstra. A note on two problems in connexion with graphs. Numerische Mathematik, 1:
269–271, 1959. doi: 10.1007/BF01386390.
O. Dorabiala, J. Webster, J. N. Kutz, and A. Aravkin. Spatiotemporal k-means. Technical report,
Department of Applied Mathematics and Department of Electrical and Computer Engineering,
University of Washington, and AWS Central Economics Team, Seattle, WA, USA, Nov 2022a.
November 11, 2022.
Olga Dorabiala, Jennifer Webster, Nathan Kutz, and Aleksandr Aravkin. Spatiotemporal k-means,
2022b. URL https://doi.org/10.48550/arXiv.2211.05337.
DavidA.EasleyandJonM.Kleinberg. Networks, Crowds, and Markets - Reasoning About a Highly
Connected World. Cambridge University Press, 2010. ISBN 978-0-521-19533-1.
W. Ellens and R. E. Kooij. Graph measures and network robustness, 2013. URL https://doi.
org/10.48550/arXiv.1311.5064.
Martin Ester, Hans-Peter Kriegel, J¨org Sander, and Xiaowei Xu. A density-based algorithm for
discovering clusters in large spatial databases with noise. In Proceedings of the Second Inter-
national Conference on Knowledge Discovery and Data Mining, KDD’96, page 226–231. AAAI
Press,1996. doi: 10.5555/3001460.3001507. URLhttps://dl.acm.org/doi/10.5555/3001460.
3001507.
Leonardo N. Ferreira, Didier A. Vega-Oliveros, Mosh´e Cotacallapa, Manoel F. Cardoso, Marcos G.
Quiles, Liang Zhao, and Elbert E. N. Macau. Spatiotemporal data analysis with chronological
networks. Nature Communications, 11(1):4036, Aug 2020. ISSN 2041-1723. doi: 10.1038/
s41467-020-17634-2. URL https://doi.org/10.1038/s41467-020-17634-2.
Santo Fortunato. Community detection in graphs. Physics Reports, 486(3–5):75–174, February
2010. ISSN0370-1573. doi: 10.1016/j.physrep.2009.11.002. URLhttp://dx.doi.org/10.1016/
j.physrep.2009.11.002.
311Linton C. Freeman. A set of measures of centrality based on betweenness. Sociometry, 40(1):35–41,
1977. doi: 10.2307/3033543.
Alessia Galdeman, Matteo Zignani, and Sabrina Gaito. Unfolding temporal networks through
statistically significant graph evolution rules. In 2023 IEEE 10th International Conference on
Data Science and Advanced Analytics (DSAA), pages 1–10, 2023. doi: 10.1109/DSAA60987.
2023.10302496. URL https://ieeexplore.ieee.org/document/10302496.
Jianxi Gao, Baruch Barzel, and Albert-L´aszl´o Barab´asi. Universal resilience patterns in complex
networks. Nature, 530(7590):307–312, 2016. ISSN 1476-4687. doi: 10.1038/nature16948. URL
https://doi.org/10.1038/nature16948.
MichaelT.GastnerandM.E.J.Newman. Optimaldesignofspatialdistributionnetworks. Physical
Review E, 74(1), July 2006. ISSN 1550-2376. doi: 10.1103/physreve.74.016117. URL http:
//dx.doi.org/10.1103/PhysRevE.74.016117.
Deepak Kumar Gautam, Prashant Kotecha, and Saraschandradra Subbiah. Efficient k-means clus-
tering and greedy selection-based reduction of nodal search space for optimization of sensor
placement in the water distribution networks. Water Research, 220:118666, Jul 2022. doi:
10.1016/j.watres.2022.118666. URL https://doi.org/10.1016/j.watres.2022.118666.
Genetec Inc. New orleans homeland security and emergency preparedness (nohsep). Genetec,
2019. URL https://www.genetec.com/binaries/content/assets/genetec/case-studies/
en-genetec-new-orleans-real-time-crime-center-case-study.pdf. Accessed: Nov. 28,
2022.
BetsyGeorgeandSanghoKim.Spatio-temporalNetworks: ModelingandAlgorithms.SpringerBriefs
in Computer Science. Springer New York, NY, 1 edition, 2012. ISBN 978-1-4614-4917-1. doi:
10.1007/978-1-4614-4918-8. URL http://dx.doi.org/10.1007/978-1-4614-4918-8.
BetsyGeorgeandShashiShekhar. Time-AggregatedGraphsforModelingSpatio-temporalNetworks,
pages 191–212. Springer Berlin Heidelberg, Berlin, Heidelberg, 2008. ISBN 978-3-540-92148-6.
doi: 10.1007/978-3-540-92148-6 7. URL https://doi.org/10.1007/978-3-540-92148-6_7.
312Betsy George, Sangho Kim, and Shashi Shekhar. Spatio-temporal network databases and routing
algorithms: A summary of results. In Dimitris Papadias, Donghui Zhang, and George Kollios,
editors, Advances in Spatial and Temporal Databases, pages 460–477, Berlin, Heidelberg, 2007.
Springer Berlin Heidelberg. ISBN 978-3-540-73540-3.
S. Gholizadeh-Tayyar, R.B. Bachouch, Y. Fousseret, Y. Parmantier, and N. Ramdani. Optimal
sensor deployment according to a new approach for target tracking in smart homes. IRBM,
41(6):321–330, 2020. ISSN 1959-0318. doi: https://doi.org/10.1016/j.irbm.2020.06.009. URL
https://www.sciencedirect.com/science/article/pii/S1959031820301135.
Michelle Girvan and M. E. J. Newman. Community structure in social and biological networks.
Proceedings of the National Academy of Sciences, 99(12):7821–7826, 2002. doi: 10.1073/pnas.
122653799.
Olivier Goldschmidt, Patrick Jaillet, and Richard LaSota. On reliability of graphs with node
failures. NETWORKS, 24(4):251–259, 1994. doi: 10.1002/net.3230240406. URL https://web.
mit.edu/jaillet/www/general/networks-pj-94.pdf.
Rafael C. Gonzalez and Richard E. Woods. Digital Image Processing. Pearson, 4 edition, 2018.
ISBN 9780133356724. 4th edition.
Palash Goyal, Sujit Rokka Chhetri, and Arquimedes Canedo. dyngraph2vec: Capturing network
dynamics using dynamic graph representation learning. Knowledge-Based Systems, 187:104816,
January 2020. ISSN 0950-7051. doi: 10.1016/j.knosys.2019.06.024. URL http://dx.doi.org/
10.1016/j.knosys.2019.06.024.
GeoffreyRGrimmettandDavidRStirzaker. Probability and Random Processes. OxfordUniversity
Press, 05 2001. ISBN 9780198572237. doi: 10.1093/oso/9780198572237.001.0001. URL https:
//doi.org/10.1093/oso/9780198572237.001.0001.
Darij Grinberg. An introduction to graph theory, 2023. URL https://doi.org/10.48550/arXiv.
2308.04512. arXiv preprint.
313Antonin Guttman. R-trees: a dynamic index structure for spatial searching. In Proceedings of
the 1984 ACM SIGMOD International Conference on Management of Data, SIGMOD ’84, page
47–57, New York, NY, USA, 1984. Association for Computing Machinery. ISBN 0897911288.
doi: 10.1145/602259.602266. URL https://doi.org/10.1145/602259.602266.
Ali Hamdi, Khaled Shaban, Abdelkarim Erradi, Amr Mohamed, Shakila Khan Rumi, and Flora D.
Salim. Spatiotemporal data mining: a survey on challenges and open problems. Artifi-
cial Intelligence Review, 55(2):1441–1488, February 2022. ISSN 1573-7462. doi: 10.1007/
s10462-021-09994-y. URL https://doi.org/10.1007/s10462-021-09994-y.
William L. Hamilton, Rex Ying, and Jure Leskovec. Representation learning on graphs: Methods
and applications, 2018. URL https://doi.org/10.48550/arXiv.1709.05584.
P. Harish and P. J. Narayanan. Accelerating large graph algorithms on the gpu using cuda. In
High Performance Computing - HiPC 2007, volume 4873 of Lecture Notes in Computer Science.
Springer, Berlin, Heidelberg, 2007. ISBN978-3-540-77219-4. doi: 10.1007/978-3-540-77220-0 21.
URL https://doi.org/10.1007/978-3-540-77220-0_21.
T. Hastie, R. Tibshirani, and J. Friedman. The Elements of Statistical Learning: Data Mining,
Inference, and Prediction. Springer, 2001. ISBN 1489905197.
John H. Holland. Adaptation in Natural and Artificial Systems. University of Michigan Press, Ann
Arbor, MI, 1975. ISBN 9780262581110. second edition, 1992.
T. Holmberg. Data visualization to evaluate and facilitate targeted data acquisitions in support
of a real-time ocean forecasting system. Theses and dissertations, University of New Orleans,
2014a. URL https://scholarworks.uno.edu/td/1873.
T. Holmberg, E. Ioup, and M. Abdelguerfi. A stochastic geo-spatiotemporal bipartite net-
work to optimize gcoos sensor placement strategies. In Second Workshop on Knowledge
Graphs and Big Data in Conjunction with 2022 IEEE Conference on Big Data, Dec 2022.
doi: 10.1109/BigData55660.2022.10020928.URLhttp://dx.doi.org/10.1109/BigData55660.
2022.10020928.
314T. E. Holmberg. Data visualization to evaluate and facilitate targeted data acquisitions in support
of a real-time ocean forecasting system. Theses and dissertations, University of New Orleans,
2014b. URL https://scholarworks.uno.edu/td/1873.
T.E.Holmberg, M.Abdelguerfi, andE.Ioup. Stroobnetoptimizationviagpu-acceleratedproximal
recurrence strategies. In 2023 IEEE International Conference on Big Data (Big Data), pages
2920–2929, 2023. doi: 10.1109/BigData59044.2023.10386774. URL http://dx.doi.org/10.
1109/BigData59044.2023.10386774.
P. Holme and J. Saramaki. Temporal networks. Physics Reports, 519(3):97–125, Oct 2012. doi:
10.1016/j.physrep.2012.03.001. URL http://dx.doi.org/10.1016/j.physrep.2012.03.001.
Petter Holme and Jari Saram¨aki. Temporal networks. Physics Reports, 519(3):97–125, October
2012. ISSN0370-1573. doi: 10.1016/j.physrep.2012.03.001. URLhttp://dx.doi.org/10.1016/
j.physrep.2012.03.001.
Petter Holme and Jari Saram¨aki. Temporal networks as a modeling framework, 2021. URL https:
//doi.org/10.48550/arXiv.2103.13586.
Chi-FuHuangandYu-CheeTseng. Thecoverageprobleminawirelesssensornetwork. Mobile Net-
works and Applications, 10(4):519–528, 2005. ISSN 1572-8153. doi: 10.1007/s11036-005-1564-y.
URL https://doi.org/10.1007/s11036-005-1564-y.
Anil K. Jain. Data clustering: 50 years beyond k-means. Pattern Recognition Letters, 31(8):651–
666, 2010. ISSN 0167-8655. doi: https://doi.org/10.1016/j.patrec.2009.09.011. URL https://
www.sciencedirect.com/science/article/pii/S0167865509002323. Award winning papers
from the 19th International Conference on Pattern Recognition (ICPR).
Xiangjian Jiang and Yanyi Pu. Exploring time granularity on temporal graphs for dynamic link
prediction in real-world networks, 2023. URL https://doi.org/10.48550/arXiv.2311.12255.
Yirui Jiang, Hongwei Li, Binbin Feng, Zekang Wu, Shan Zhao, and Zhaohui Wang. Street patrol
routingoptimizationinsmartcitymanagementbasedongeneticalgorithm: Acaseinzhengzhou,
315china. ISPRS International Journal of Geo-Information, 11(3), 2022. ISSN 2220-9964. doi:
10.3390/ijgi11030171. URL https://www.mdpi.com/2220-9964/11/3/171.
Dieter Jungnickel. The Greedy Algorithm, pages 129–153. Springer Berlin Heidelberg, Berlin,
Heidelberg, 1999. ISBN 978-3-662-03822-2. doi: 10.1007/978-3-662-03822-2 5. URL https:
//doi.org/10.1007/978-3-662-03822-2_5.
David B. Kirk and Wen-mei W. Hwu. Programming Massively Parallel Processors: A Hands-on
Approach. Morgan Kaufmann Publishers Inc., San Francisco, CA, USA, 1st edition, 2010. ISBN
0123814723.
Mikko Kivel¨a, Alex Arenas, Marc Barthelemy, James P. Gleeson, Yamir Moreno, and Mason A.
Porter. Multilayer networks. Journal of Complex Networks, 2(3):203–271, 07 2014. ISSN 2051-
1310. doi: 10.1093/comnet/cnu016. URL https://doi.org/10.1093/comnet/cnu016.
Katherine A. Klise, Bethany L. Nicholson, Carl D. Laird, Arvind P. Ravikumar, and Adam R.
Brandt. Sensor placement optimization software applied to site-scale methane-emissions moni-
toring. Journal of Environmental Engineering, 146(7):04020054, 2020. doi: 10.1061/(ASCE)
EE.1943-7870.0001737. URL https://ascelibrary.org/doi/abs/10.1061/%28ASCE%29EE.
1943-7870.0001737.
Nina Klobas, George B. Mertzios, and Paul G. Spirakis. Sliding into the future: Investigat-
ing sliding windows in temporal graphs. In 48th International Symposium on Mathemati-
cal Foundations of Computer Science (MFCS 2023), pages 5:1–5:12, Bordeaux, France, 2023.
Schloss Dagstuhl–Leibniz-Zentrum fu¨r Informatik. doi: 10.4230/LIPIcs.MFCS.2023.5. URL
https://durham-repository.worktribe.com/output/1897839.
Lauri Kovanen, M´arton Karsai, Kimmo Kaski, J´anos Kert´esz, and Jari Saram¨aki. Temporal motifs
in time-dependent networks. Journal of Statistical Mechanics: Theory and Experiment, 2011
(11):P11005, nov 2011a. doi: 10.1088/1742-5468/2011/11/P11005. URL https://dx.doi.org/
10.1088/1742-5468/2011/11/P11005.
Lauri Kovanen, M´arton Karsai, Kimmo Kaski, J´anos Kert´esz, and Jari Saram¨aki. Temporal motifs
316in time-dependent networks. Journal of Statistical Mechanics: Theory and Experiment, 2011
(11):P11005, November 2011b. ISSN 1742-5468. doi: 10.1088/1742-5468/2011/11/p11005. URL
http://dx.doi.org/10.1088/1742-5468/2011/11/P11005.
Oliver Kramer. Genetic Algorithm Essentials. Studies in Computational Intelligence. Springer
Cham, 1 edition, 2017. ISBN 978-3-319-52155-8. doi: 10.1007/978-3-319-52156-5. URL https:
//doi.org/10.1007/978-3-319-52156-5. CC BY.
Andreas Krause, Ajit Singh, and Carlos Guestrin. Near-optimal sensor placements in gaussian
processes: Theory, efficient algorithms and empirical studies. J. Mach. Learn. Res., 9:235–284,
jun 2008. ISSN 1532-4435. doi: 10.5555/1390681.1390689. URL https://dl.acm.org/doi/10.
5555/1390681.1390689.
Richard E. Ladner, Kurt Shaw, and Mahdi Abdelguerfi. Mining Spatio-Temporal Information
Systems. Springer Science & Business Media, 2002.
Jon Lee and Sven Leyffer. Mixed Integer Nonlinear Programming. The IMA Volumes in Math-
ematics and its Applications. Springer New York, NY, 1 edition, 2012. ISBN 978-1-4614-
1926-6. doi: https://doi.org/10.1007/978-1-4614-1927-3. URL https://doi.org/10.1007/
978-1-4614-1927-3.
Hang Li, Bowen Li, Hong Li, Yu Song, and Zhongrong Liu. Three-way k-means model: Dynamic
optimal sensor placement for efficient environment monitoring in pig house. Animals, 14(3):485,
Feb 2024. doi: 10.3390/ani14030485. URL https://doi.org/10.3390/ani14030485.
W. Li, Y. Liu, and S. Wang. Real-time gis programming and geocomputation. The Geographic
Information Science & Technology Body of Knowledge, 2022. doi: 10.22224/gistbok/2022.1.3.
URL https://doi.org/10.22224/gistbok/2022.1.3.
AnnaLittle,DanielMcKenzie,andJamesMurphy. Balancinggeometryanddensity: Pathdistances
on high-dimensional data, 2021. URL https://arxiv.org/abs/2012.09385. arXiv preprint.
Linyuan Lu¨ and Tao Zhou. Link prediction in complex networks: A survey. Physica A: Statistical
317Mechanics and its Applications, 390(6):1150–1170, March 2011. ISSN 0378-4371. doi: 10.1016/
j.physa.2010.11.027. URL http://dx.doi.org/10.1016/j.physa.2010.11.027.
J. B. MacQueen. Some methods for classification and analysis of multivariate observations. In
L. M. Le Cam and J. Neyman, editors, Proc. of the fifth Berkeley Symposium on Mathematical
Statistics and Probability, volume 1, pages 281–297. University of California Press, 1967.
Naoki Masuda and Petter Holme. Detecting sequences of system states in temporal networks.
Scientific Reports, 9(1):795, 2019. ISSN 2045-2322. doi: 10.1038/s41598-018-37534-2. URL
https://doi.org/10.1038/s41598-018-37534-2.
Naoki Masuda and Renaud Lambiotte. A Guide to Temporal Networks. Complexity Science.
World Scientific publishing, September 2016. ISBN 978-1-78634-114-3. doi: 10.1142/q0033.
URL https://doi.org/10.1142/q0033.
S. Meguerdichian, F. Koushanfar, M. Potkonjak, and M.B. Srivastava. Coverage problems
in wireless ad-hoc sensor networks. In Proceedings IEEE INFOCOM 2001. Conference on
Computer Communications. Twentieth Annual Joint Conference of the IEEE Computer and
Communications Society (Cat. No.01CH37213), volume 3, pages 1380–1387 vol.3, 2001. doi:
10.1109/INFCOM.2001.916633.
MehranMesbahiandMagnusEgerstedt. Graph Theoretic Methods in Multiagent Networks. Prince-
ton University Press, 2010. ISBN 9780691140612. URL http://www.jstor.org/stable/j.
ctt1287k9b.
V. Mhatre and C. Rosenberg. Homogeneous vs heterogeneous clustered sensor networks: a
comparative study. In 2004 IEEE International Conference on Communications (IEEE Cat.
No.04CH37577), volume 6, pages 3646–3651 Vol.6, 2004. doi: 10.1109/ICC.2004.1313223. URL
https://ieeexplore.ieee.org/document/1313223.
Othon Michail. An introduction to temporal graphs: An algorithmic perspective, 2015. URL
https://doi.org/10.48550/arXiv.1503.00278.
Christopher Z. Mooney. Monte Carlo Simulation. Sage Publications, Thousand Oaks, Calif., 1997.
318National Academies of Sciences, Engineering, and Medicine. Understanding and predicting the Gulf
of Mexico loop current: critical gaps and recommendations. National Academies Press, 2018.
GeorgeL.NemhauserandLaurenceA.Wolsey.Integerandcombinatorialoptimization.WileySeries
in Discrete Mathematics and Optimization. Wiley-Interscience, USA, 1988. ISBN 047182819X.
M. E. J. Newman. The structure and function of complex networks. SIAM Review, 45(2):167–256,
January 2003. ISSN 1095-7200. doi: 10.1137/s003614450342480. URL http://dx.doi.org/10.
1137/S003614450342480.
Mark Newman. Networks. Oxford University Press, 07 2018. ISBN 9780198805090. doi:
10.1093/oso/9780198805090.001.0001. URL https://doi.org/10.1093/oso/9780198805090.
001.0001.
Mark E. J. Newman. Analysis of weighted networks. Physical review. E, Statistical, nonlinear,
and soft matter physics, 70 5 Pt 2:056131, 2004. doi: 10.1103/PhysRevE.70.056131. URL
https://api.semanticscholar.org/CorpusID:1054844.
MarkE.J.Newman, Albert-L´aszl´oBarab´asi, andDuncanJ.Watts. The Structure and Dynamics of
Networks, volume 12 of Princeton Studies in Complexity. Princeton University Press, illustrated
edition, 2006. ISBN 9780691113579. URL http://www.jstor.org/stable/j.ctt7ssgv.
William I. Newman. Emergence of patterns in random processes. ii. stochastic structure in random
events. Phys. Rev. E, 89:062113, Jun 2014. doi: 10.1103/PhysRevE.89.062113. URL https:
//link.aps.org/doi/10.1103/PhysRevE.89.062113.
J. Neyman. Frequentist probability and frequentist statistics. Synthese, 36(1):97–131, 1977. ISSN
00397857, 15730964. URL http://www.jstor.org/stable/20115217.
Bach Long Nguyen, Anh-Dzung Doan, Tat-Jun Chin, Christophe Guettier, Surabhi Gupta, Estelle
Parra, Ian Reid, and Markus Wagner. Sensor allocation and online-learning-based path planning
for maritime situational awareness enhancement: A multi-agent approach, 2023. URL https:
//doi.org/10.48550/arXiv.2307.02790.
319John Nickolls, Ian Buck, Michael Garland, and Kevin Skadron. Scalable parallel programming
with cuda. In ACM SIGGRAPH 2008 Classes, SIGGRAPH ’08, New York, NY, USA, 2008.
Association for Computing Machinery. ISBN 9781450378451. doi: 10.1145/1401132.1401152.
URL https://doi.org/10.1145/1401132.1401152.
Vincenzo Nicosia, John Tang, Mirco Musolesi, Giovanni Russo, Cecilia Mascolo, and Vito Latora.
Components in time-varying graphs. Chaos: An Interdisciplinary Journal of Nonlinear Science,
22(2), April 2012. ISSN 1089-7682. doi: 10.1063/1.3697996. URL http://dx.doi.org/10.
1063/1.3697996.
Vincenzo Nicosia, John Tang, Cecilia Mascolo, Mirco Musolesi, Giovanni Russo, and Vito La-
tora. Graph Metrics for Temporal Networks, page 15–40. Springer Berlin Heidelberg, 2013a.
ISBN 9783642364617. doi: 10.1007/978-3-642-36461-7 2. URL http://dx.doi.org/10.1007/
978-3-642-36461-7_2.
Vincenzo Nicosia, John Tang, Cecilia Mascolo, Mirco Musolesi, Giovanni Russo, and Vito La-
tora. Graph Metrics for Temporal Networks, pages 15–40. Springer Berlin Heidelberg, Berlin,
Heidelberg, 2013b.
Vincenzo Nicosia, John Tang, Cecilia Mascolo, Mirco Musolesi, Giovanni Russo, and Vito La-
tora. Graph Metrics for Temporal Networks, pages 15–40. Springer Berlin Heidelberg, Berlin,
Heidelberg, 2013c.
SakiNomura, JunyaHara, andYuichiTanaka. Dynamicsensorplacementbasedongraphsampling
theory, 2022. URL https://doi.org/10.48550/arXiv.2211.04019.
Tore Opsahl, Filip Agneessens, and John Skvoretz. Node centrality in weighted networks: Gener-
alizing degree and shortest paths. Social Networks, 32(3):245–251, 2010. doi: 10.1016/j.socnet.
2010.03.006. URL https://doi.org/10.1016/j.socnet.2010.03.006.
RajKumarPanandJariSaram¨aki. Pathlengths,correlations,andcentralityintemporalnetworks.
Physical Review E, 84(1), July 2011. ISSN 1550-2376. doi: 10.1103/physreve.84.016105. URL
http://dx.doi.org/10.1103/PhysRevE.84.016105.
320Dehua Peng, Zhipeng Gui, and Huayi Wu. Interpreting the curse of dimensionality from distance
concentration and manifold effect, 2024. URL https://arxiv.org/abs/2401.00422. arXiv
preprint.
Mason A. Porter and James P. Gleeson. Dynamical systems on networks: A tutorial, 2015. URL
https://doi.org/10.48550/arXiv.1403.7663.
StephenRanshous,ShitianShen,DanaiKoutra,SteveHarenberg,ChristosFaloutsos,andNagizaF.
Samatova. Anomaly detection in dynamic networks: a survey. WIREs Comput. Stat., 7(3):
223–247, may 2015. ISSN 1939-5108. doi: 10.1002/wics.1347. URL https://doi.org/10.1002/
wics.1347.
RAPIDS. Rapids: Open-source software library. https://rapids.ai, 2023. Retrieved from
https://rapids.ai.
E. S. Rigas, P. Kolios, and G. Ellinas. Extending the multiple traveling salesman problem for
scheduling a fleet of drones performing monitoring missions. In 2020 IEEE 23rd Interna-
tional Conference on Intelligent Transportation Systems (ITSC), Rhodes, Greece, 20-23 Septem-
ber 2020. IEEE. doi: 10.1109/ITSC45102.2020.9294568. URL https://doi.org/10.1109/
ITSC45102.2020.9294568.
D. L. Rudnick. Ocean research enabled by underwater gliders. Annual Review of Marine Sci-
ence,8(1),2015. doi: 0.1146/annurev-marine-122414-033913. URLhttps://doi.org/10.1146/
annurev-marine-122414-033913.
Gert Sabidussi. The centrality index of a graph. Psychometrika, 31(4):581–603, 12 1966. ISSN
1860-0980. doi: 10.1007/BF02289527. URL https://doi.org/10.1007/BF02289527.
Mina G. Sadek, Ahmed M. El-Garhy, and Amr E. Mohamed. A dynamic cooperative multi-agent
online coverage path planning algorithm. In 2021 16th International Conference on Computer
Engineering and Systems (ICCES), pages 1–9, 2021. doi: 10.1109/ICCES54031.2021.9686104.
URL https://doi.org/10.1109/ICCES54031.2021.9686104.
321Hanan Samet. Foundations of Multidimensional and Metric Data Structures (The Morgan Kauf-
mann Series in Computer Graphics and Geometric Modeling). Morgan Kaufmann Publishers
Inc., San Francisco, CA, USA, 2005. ISBN 0123694469.
ChristianM.Schneider, NuriYazdani, NunoA.M. Arau´jo, Shlomo Havlin, andHansJ.Herrmann.
Towardsdesigningrobustcouplednetworks. Scientific Reports, 3(1):1969, 2013. ISSN2045-2322.
doi: 10.1038/srep01969. URL https://doi.org/10.1038/srep01969.
Ingo Scholtes, Nicolas Wider, and Antonios Garas. Higher-order aggregate networks in the analysis
of temporal networks: path structures and centralities. The European Physical Journal B, 89(3),
March 2016. ISSN 1434-6036. doi: 10.1140/epjb/e2016-60663-0. URL http://dx.doi.org/10.
1140/epjb/e2016-60663-0.
Alexander Schrijver. Theory of Linear and Integer Programming. Wiley Series in Discrete Math-
ematics & Optimization. John Wiley & Sons, reprint, revised edition, 1998. ISBN 0471982326,
9780471982326.
E. Schubert, J. Sander, M. Ester, H.-P. Kriegel, and X. Xu. Dbscan revisited, revisited: Why and
how you should (still) use dbscan. ACM Transactions on Database Systems, 42(3):Article 19,
2017.
Shashi Shekhar, Zhe Jiang, Reem Y. Ali, Emre Eftelioglu, Xun Tang, Venkata M. V. Gunturi, and
Xun Zhou. Spatiotemporal data mining: A computational perspective. ISPRS International
Journal of Geo-Information, 4(4):2306–2338, 2015. ISSN 2220-9964. doi: 10.3390/ijgi4042306.
URL https://www.mdpi.com/2220-9964/4/4/2306.
Anzhi Sheng, Aming Li, and Long Wang. Evolutionary dynamics on sequential temporal networks.
PLOS Computational Biology, 19(8):1–19, 08 2023. doi: 10.1371/journal.pcbi.1011333. URL
https://doi.org/10.1371/journal.pcbi.1011333.
Sandipan Sikdar, Niloy Ganguly, and Animesh Mukherjee. Time series analysis of temporal
networks. The European Physical Journal B, 89(1), January 2016. ISSN 1434-6036. doi:
10.1140/epjb/e2015-60654-7. URL http://dx.doi.org/10.1140/epjb/e2015-60654-7.
322B.W. Silverman. Density Estimation for Statistics and Data Analysis. Chapman & Hall,
London, 1986. doi: 10.1007/978-1-4899-3324-9. URL http://dx.doi.org/10.1007/
978-1-4899-3324-9.
J. Simerman and J. Adelson. A declining force: Nopd hampered by retirements, officers seeking
greener pastures. The Times-Picayune/The New Orleans Advocate, Feb 2022. URL http:
//www.nola.com. Accessed: Nov. 28, 2022.
Simon Simonsson, Fl´avia Dias Casagrande, and Evi Zouganeli. Use of clustering algorithms for
sensor placement and activity recognition in smart homes. IEEE Access, 11:9415–9430, 2023.
doi: 10.1109/ACCESS.2023.3239265. URL https://doi.org/10.1109/ACCESS.2023.3239265.
Michael Isaac Stein, Caroline Sinders, and Winnie Yoe. Neighborhoods watched: The rise of
urban mass surveillance. The Lens New Orleans, Oct 2021. URL https://surveillance.
thelensnola.org/. Accessed: Nov. 28, 2022.
Michael Steinbach, Levent Ert¨oz, and Vipin Kumar. The Challenges of Clustering High Di-
mensional Data, pages 273–309. Springer Berlin Heidelberg, Berlin, Heidelberg, 2004. ISBN
978-3-662-08968-2. doi: 10.1007/978-3-662-08968-2 16. URL https://doi.org/10.1007/
978-3-662-08968-2_16.
Deborah Sulem, Henry Kenlay, Mihai Cucuringu, and Xiaowen Dong. Graph similarity learning for
change-point detection in dynamic networks, 2022. URL https://doi.org/10.48550/arXiv.
2203.15470.
Ali Sydney, Caterina Scoglio, Mina Youssef, and Phillip Schumm. Characterizing the robustness
of complex networks. International Journal of Internet Technology and Secured Transactions, 2,
11 2008. doi: 10.1504/IJITST.2010.037406.
Richard Szeliski. Computer Vision: Algorithms and Applications. Springer-Verlag, Berlin, Heidel-
berg, 1st edition, 2010. ISBN 1848829345. doi: 10.5555/1941882. URL https://dl.acm.org/
doi/10.5555/1941882.
323Abhishek Tripathi, Hari Prabhat Gupta, Tanima Dutta, and Somporn Jit. Coverage and connec-
tivity in wsns: A survey, research issues and challenges. IEEE Access, 6:26971–26992, 2018. doi:
10.1109/ACCESS.2018.2833632. URL https://ieeexplore.ieee.org/document/8336322.
Maarten Van Steen. Graph theory and complex networks. An introduction, 144:1–287, 2010.
M.P. Wand and M.C. Jones. Kernel Smoothing. Chapman & Hall, London, 1995. doi: 10.1007/
978-1-4899-4493-1. URL http://dx.doi.org/10.1007/978-1-4899-4493-1.
ShiruiWang,SaraMalvar,LeonardoNunes,KimWhitehall,YagnaOruganti,YazeedAlaudah,and
Anirudh Badam. Unsupervised machine learning framework for sensor placement optimization:
analyzing methane leaks. In NeurIPS 2021 Workshop Tackling Climate Change with Machine
Learning, December2021. URLhttps://www.microsoft.com/en-us/research/publication/
unsupervised-machine-learning-framework-for-sensor-placement-optimization-analyzing-methane-leaks/.
Stanley Wasserman and Katherine Faust. Social Network Analysis: Methods and Appli-
cations. Structural Analysis in the Social Sciences. Cambridge University Press, 1994.
ISBN 9780511815478. doi: 10.1017/CBO9780511815478. URL https://doi.org/10.1017/
CBO9780511815478.
Duncan J. Watts and Steven H. Strogatz. Collective dynamics of ‘small-world’ networks. Nature,
393(6684):440–442, 1998. ISSN 1476-4687. doi: 10.1038/30918. URL https://doi.org/10.
1038/30918.
Darrell Whitley. A genetic algorithm tutorial. Statistics and Computing, 4(2):65–85, June 1994.
ISSN 1573-1375. doi: 10.1007/BF00175354. URL https://doi.org/10.1007/BF00175354.
RuthWilson, MariaCobb, FrankMcCreedy, RoyLadner, DavidOlivier, ToddLovitt, KevinShaw,
Fred Petry, and Mahdi Abdelguerfi. Chapter 13: Geographical data interchange using xml-
enabled technology within the gidb system. In Akmal B. Chaudhri, Awais Rashid, and Roberto
Zicari, editors, XML Data Management: Native XML and XML-Enabled Database Systems.
Addison-Wesley Professional, March 2003. ISBN 0201844524. URL https://www.oreilly.
com/library/view/xml-data-management/0201844524/0201844524_ch13.html.
324B. Wu. K-means clustering algorithm and python implementation. In 2021 IEEE International
Conference on Computer Science, Artificial Intelligence and Electronic Engineering (CSAIEE),
pages 55–59, SC, USA, 2021. doi: 10.1109/CSAIEE54046.2021.9543260.
H. Wu, J. Cheng, S. Huang, Y. Ke, Y. Lu, and Y. Xu. Path problems in temporal graphs.
Proceedings of the VLDB Endowment, 7(9):721–732, 2014. doi: 10.14778/2732939.2732945. URL
https://doi.org/10.14778/2732939.2732945.
Duwaraka Yoganathan, Sekhar Kondepudi, Balaji Kalluri, and Sumanth Manthapuri. Optimal
sensor placement strategy for office buildings using clustering algorithms. Energy and Buildings,
158:1206–1225, 2018. ISSN 0378-7788. doi: https://doi.org/10.1016/j.enbuild.2017.10.074. URL
https://www.sciencedirect.com/science/article/pii/S0378778817304723.
Yi Zou and Krishnendu Chakrabarty. Sensor deployment and target localization based on virtual
forces. In Proceedings - IEEE INFOCOM, volume 2, pages 1293–1303. IEEE, 2003. doi: 10.
1109/INFCOM.2003.1208965. URL https://ieeexplore.ieee.org/document/1208965.
325Appendix A
Theoretical Foundations
A.1 Transition to Graph-Based Approaches
Although the approaches presented in Chapter 2 offer comprehensive solutions for sensor place-
ment, complexity and scalability challenges require more efficient methodologies in handling intri-
cate network relationships and spatial constraints. This paves the way for exploring graph-based
approaches. Graph theory, with its ability to model complex interactions and constraints in a
networked environment, offers promising alternatives. These approaches can efficiently manage the
spatial and temporal dimensions inherent in sensor networks, making them suitable for extending
the principles of combinatorial optimization via vectorization to more scalable applications. This
chapter focuses on establishing the underlying theoretical foundations for defining and analyzing
Spatiotemporal Networks.
A.2 Static Networks
A.2.1 Network Basics in Graph Theory
Networksingraphtheoryareabstractconstructsusedtomodelcomplexsystems. Theyaredefined
as a collection of nodes and a collection of edges, where the spatial arrangement is not the primary
concern. The abstract nature of graph theory allows for the analysis of the relational structure of
326networks, independent of their visual representation. Diestel [2017]
A network can be mathematically represented as a graph G = (V,E), where:
• V is the set of nodes (or vertices), V = {v ,v ,...,v }, representing the individual entities
1 2 n
within the network.
• E is the set of edges, E ⊆ {(v ,v ) | v ,v ∈ V,i ̸= j}, representing the connections or
i j i j
interactions between pairs of nodes.
e
v 1 v v
1 2 3
e
e e 4 e
2 3 5
v v
4 5
Figure A.1: Sample network representation in graph theory
Nodes (Vertices)
Conceptually, nodes in a network represent the fundamental units, such as individuals in a social
network, computers in a network, or stations in a transportation system. In mathematical terms,
a node v is an element of the set V in the graph G. Diestel [2017].
i
v
1
Figure A.2: Example of a node in a network
Edges (Links)
Edges in a network signify the relationships or interactions between nodes. An edge is conceptually
understood as the connection between two nodes. Mathematically, an edge (v ,v ) is an ordered
i j
or unordered pair of nodes, indicating a connection between nodes v and v in the set E. Diestel
i j
[2017].
e
v 1 v
1 2
Figure A.3: Example of an edge connecting two nodes
327Comparing Networks
In graph theory, the spatial positioning of nodes and edges is abstracted away. Two graphs may
be considered isomorphic (similar) based on their sets of nodes and edges, regardless of their
visual layout or geometric arrangement. This abstraction focuses on the relational and structural
properties of the network, rather than its physical representation. Diestel [2017]
a 3 b 2 b 4
a a
2 4
b b
1 5
a 1 a 5 b 3
Figure A.4: Two isomorphic networks with different spatial arrangements
A.2.2 Types of Networks
Undirected vs. Directed Networks
Networks can be categorized based on the nature of the relationships they represent. These rela-
tionships can be undirected or directed.
Undirected Networks: In undirected networks, the edges represent bidirectional relation-
ships. Mathematically, an undirected edge is an unordered pair of nodes. If v and v are two nodes
i j
in an undirected network, the edge connecting them is represented as {v ,v } and is inherently
i j
bidirectional. Grinberg [2023]
v
3
v v
1 2
Figure A.5: An example of an undirected network.
Directed Networks: Conversely, in directed networks, the edges represent unidirectional rela-
tionships. These are mathematically represented as ordered pairs of nodes. An edge in a directed
328network from node v to node v is denoted as (v ,v ), indicating a direction from v to v . This
i j i j i j
directionality is crucial in systems where the relationship is asymmetrical, such as in a follower-
followingrelationshiponsocialmediaplatformsorcause-effectrelationshipsfortemporalmodeling.
Grinberg [2023]
v
3
v v
1 2
Figure A.6: An example of a directed network.
Weighted vs. Unweighted Networks
Networks can also be differentiated based on whether their edges carry weights.
Unweighted Networks: In unweighted networks, edges do not have any weights associated
with them. Relationships are simply represented as connections without any indication of their
strength or capacity. Mathematically, an unweighted edge is just a pair of nodes without any
additional information. Van Steen [2010]
v
3
v v
1 2
Figure A.7: An example of an unweighted network.
Weighted Networks: In contrast, weighted networks assign a numerical value (weight) to
each edge, representing the strength or capacity of the connection. This is expressed as a triplet
(v ,v ,w ), where v and v are the nodes connected by the edge, and w is the weight of the edge.
i j ij i j ij
Weighted networks are essential in scenarios where the intensity or capacity of connections varies,
such as in networks representing costs, where the edge weights could represent either the distance
or time taken to travel between edges. Van Steen [2010]
329v
3
1 3
v v
1 2
2
Figure A.8: An example of a weighted network with weights on edges.
A.2.3 Network Topology and Structure
Degree Distribution
Degree distribution in a network is a fundamental characteristic that describes how the number of
connections (degree) per node varies across the network.
Degree of aNode: Ingraphtheory,thedegreeofanodeisdefinedbythenumberofconnections
it has. For a node v , its degree is denoted as deg(v ). In an undirected network, deg(v ) is the
i i i
number of edges incident to v , while in a directed network, we may distinguish between in-degree
i
and out-degree, depending on the direction of the edges. Grinberg [2023]
In-degree Out-degree
v i In-degree v i Out-degree
deg(v)=3 In-degree
i
Figure A.9: Illustration of node degree: undirected (left) with degree 3, and directed (right)
with in-degree 3 and out-degree 2.
Degree Distribution: The degree distribution of a network is the probability distribution of
these degrees over the whole network. It is denoted as P(k), where P(k) is the probability that a
randomly selected node has degree k. This distribution is crucial for understanding the network’s
structure and dynamics. For instance, in scale-free networks, the degree distribution follows a
power law, indicating the presence of a few highly connected nodes (hubs) as well as many nodes
with few connections. Newman [2018], Barabasi [2003]
3301
Power-law
Gaussian
0.8
Uniform
0.6
0.4
0.2
0
0 2 4 6 8 10
Degree (k)
Figure A.10: Comparison of different degree distributions.
Clustering Coefficient
The clustering coefficient of a network provides insight into the tendency of nodes to cluster to-
gether, forming tightly knit groups within the network.
Local Clustering Coefficient: The local clustering coefficient of a node measures how close
itsneighborsaretobeingacompletegraph(orclique). Foranodev , thelocalclusteringcoefficient
i
C is defined as:
i
2|E |
C =
vi
i
deg(v )(deg(v )−1)
i i
where |E | is the number of edges among the neighbors of v . This coefficient ranges from
vi i
0 (no connections among the neighbors) to 1 (every neighbor is connected to every other neighbor).
Newman [2018]
331
)k(P
ytilibaborPv6
v5
v4 v1
v2
v3
Figure A.11: Example of a network with a highlighted local cluster around node v . The
1
thick red edges represent |E |.
vi
Global Clustering Coefficient: The global clustering coefficient is the average of the local
clustering coefficients over all the nodes in the network. Alternatively, it can be defined by the
ratio of the number of closed triplets (triangles) to the total number of triplets (closed and open)
in the network. Newman [2018]
2 5
1 3 6
4 7
Figure A.12: Example of a network showing closed triplets (in red) and an open triplet (in
blue). The global clustering coefficient is calculated based on these.
A.2.4 Path Analysis in Networks
Shortest Paths and Network Distance
Understanding the concept of shortest paths and network distance is crucial in analyzing the effi-
ciency and connectivity of a network.
332Shortest Path: The shortest path between two nodes in a network is the path that has the
minimum length (or distance) among all possible paths connecting them. The length of a path is
typically defined as the number of edges it contains (in unweighted networks) or the sum of the
weights of its edges (in weighted networks). Newman [2018]
For any two nodes v and v in an unweighted network, the shortest path is the smallest
i j
number of edges that must be traversed to travel from v to v .
i j
2
1 6 1 6
3
2 2
2
3 5 3 1 5
4
5
4 4
Figure A.13: Unweighted network with the Figure A.14: Weighted network with the
shortest path based on hops. shortest path based on edge weights.
Network Distance: Network distance measures the efficiency of information or resource trans-
fer in the network. It is often quantified using the average shortest path length between all pairs
of nodes.
Betweenness Centrality
Betweenness centrality quantifies the importance of nodes based on their role as intermediaries
along the shortest paths between other nodes in the network.
Definition: For a node v, its betweenness centrality C (v) is calculated as:
B
(cid:88) σ st(v)
C (v) =
B
σ
st
s̸=v̸=t
where σ is the total number of shortest paths from node s to node t and σ (v) is the
st st
number of those paths that pass through v. This measure reflects how often a node acts as a bridge
333
6 1along the shortest paths between other nodes. Newman [2018]
c
a b
v
s t
Figure A.15: Visualization of Betweenness Centrality
Figure A.15 illustrates the concept of betweenness centrality. The central node v is a
key connector, significantly influencing the shortest paths between the other nodes (s,t,a,b,c),
highlighted by its unique position and connectivity. The computed betweenness centrality for node
v is C (v) = 3.
B
Community Structure
Communitystructureinnetworksreferstothedivisionofthenetworkintoclusters,orcommunities,
where nodes within the same community are more densely connected to each other than to nodes
in other communities. Fortunato [2010]
c f
a b d e
Figure A.16: Illustration of Community Structure in a Network
Figure A.16 illustrates a network with two distinct communities. Community 1, in blue,
includesnodesa,b,andc,whileCommunity2,inred,consistsofnodesd,e,andf. Eachcommunity
exhibits dense connections among its nodes, indicative of strong intra-community ties. The edge
betweennodebofCommunity1andnodef ofCommunity2highlightsthesparserinter-community
interactions, emphasizing the network’s modular structure.
Modularity: A common measure of community structure is modularity, which quantifies the
strength of the division of a network into communities. High modularity indicates a strong division
into communities with dense connections internally and sparser connections between communities.
334Identifying the community structure in networks reveals how sub-groups within the network are
interconnected.
Mathematically, modularity Q is defined as:
(cid:20) (cid:21)
1 (cid:88) k ik j
Q = A − δ(c ,c )
ij i j
2m 2m
ij
where A represents the edge weight between nodes i and j, k and k are the degrees of
ij i j
nodes i and j, m is the total number of edges in the network, and δ(c ,c ) is 1 if nodes i and j are
i j
in the same community and 0 otherwise. Fortunato [2010]
Modularity Example: The application of the modularity formula to the network shown in
Figure A.16 yields a modularity score Q of approximately 0.357. This value suggests a moderate
level of community structure within the network. It is composed of two distinct communities,
however, the modularity score is reduced due to the existence of an edge linking nodes b and f
from different communities. This inter-community edge indicates a degree of interaction across the
community boundaries, thus impacting the overall modularity.
A.2.5 Graph Theory Algorithms
Algorithmic Analysis
Various algorithms in graph theory are pivotal for network analysis,by addressing tasks such as
finding shortest paths and identifying communities.
Shortest Path Algorithms: Dijkstra’s algorithm is used to find the shortest path in a
network and is defined as follows:
Given a graph G = (V,E) with source node s, Dijkstra’s algorithm computes the shortest
path distance from s to every other node in the graph. The algorithm maintains a set S of nodes
whose shortest distance from the source is known and repeatedly selects the node u ∈/ S with the
smallest distance estimate, adding u to S and relaxing all edges leaving u. Dijkstra [1959]
335Algorithm 18: Dijkstra’s Algorithm for Shortest Path
Input: Graph G with vertices V and edges E, source vertex s
Output: Shortest path length from s to all other vertices
1 begin
2 Initialize a set Q to contain all vertices in V;
3 Set distance to s as 0 and to all other vertices as infinity;
4 while Q is not empty do
5 u ← vertex in Q with the smallest distance;
6 Remove u from Q;
7 foreach neighbor v of u do
8 if v is in Q then
9 alt ← distance[u] + length(u, v);
10 if alt < distance[v] then
11 distance[v] ← alt;
12 previous[v] ← u;
13 return distance[], previous[];
Community Detection Algorithms: The Girvan-Newman method is used to identify
communities within networks. The Girvan-Newman algorithm repeatedly removes edges from the
network that have the highest betweenness centrality, which separates the network into communi-
ties. Girvan and Newman [2002]
Algorithm 19: Girvan-Newman Algorithm for Community Detection
Input: Graph G with vertices V and edges E
Output: Division of G into communities
1 begin
2 Calculate the betweenness centrality for all edges in E;
3 while Graph G is not divided into communities do
4 Identify the edge e with the highest betweenness centrality;
5 Remove edge e from G;
6 Recalculate betweenness centralities for all edges affected by the removal of e;
7 if removal of e results in G being divided into more components then
8 Label each component as a separate community;
9 return Communities in G;
Computational Complexity
The analysis of large networks poses significant computational challenges, particularly concerning
time complexity and memory requirements.
Scalability Issues: As the size of the network grows, the time and memory needed to
process the network using standard algorithms can increase exponentially. For instance, Dijkstra’s
336algorithm has a time complexity of O(V2) in its basic form, where V is the number of vertices,
making it less efficient for very large graphs. Cormen et al. [2009]
Approximation and Heuristics: To address these challenges, approximation algorithms
and heuristic methods are often used. These methods provide solutions that are close to optimal
and require significantly less computational time. For example, in community detection, heuris-
tic methods like Louvain’s algorithm are popular for their ability to handle large networks more
efficiently. Blondel et al. [2008]
Distributed and Parallel Computing: Another approach to mitigating computational
challenges in large networks is the use of distributed and parallel computing techniques. These
techniques involve dividing the computational tasks among multiple processors or machines, sig-
nificantly reducing the processing time. Harish and Narayanan [2007]
A.2.6 Graph Representations
For computational analysis and efficient handling of networks, graph representations like adjacency
matrices and lists are widely used. These data structures provide different ways to model the
relationships and structures within a network.
Adjacency Matrix
The adjacency matrix is a common way to represent a graph in a matrix format, where each cell
indicates whether a pair of nodes is connected.
Definition: Given a graph G = (V,E) with n nodes, the adjacency matrix A is an n×n
matrix where each element A represents the presence or absence of an edge between nodes i and
ij
j. For an unweighted graph, A is 1 if there is an edge between i and j, and 0 otherwise. In a
ij
weighted graph, A equals the weight of the edge. Newman [2018]
ij
337Mathematical Representation:


1 if (i,j) ∈ E (for unweighted graphs)





A ij = w ij if (i,j) ∈ E (for weighted graphs)





 0 if (i,j) ∈/ E
Usage: Theadjacencymatrixisparticularlyusefulinalgorithmsthatrequirefrequentchecking
of whether an edge exists between two nodes. However, it can be memory-intensive for large
networks since its size is proportional to the square of the number of nodes.
a b c d e
b e
a 0 1 0 0 0
a c b 1 0 1 1 0
c 0 1 0 1 1
d 0 1 1 0 0
d
e 0 0 1 0 0
Figure A.17: Graph and its Adjacency Matrix
Adjacency List
An adjacency list is another way to represent a graph, and is particularly useful for sparse graphs
where the number of edges is much less than the square of the number of nodes.
Definition: For each node i in the graph G = (V,E), the adjacency list maintains a list of all
the nodes that are adjacent to i. This can be implemented as an array or a list of lists, where each
sublist corresponds to a node and contains the nodes to which it is connected. Newman [2018]
Mathematical Representation: For a graph G = (V,E), the adjacency list L can be
represented as:
L = {j | (i,j) ∈ E} for each node i ∈ V
i
Usage: Adjacency lists are efficient in terms of space, especially for large networks with
relatively few edges, as they only store actual connections. They are preferred for algorithms that
338need to iterate over the neighbors of a node.
Node Adjacent Nodes
b e
a b
a c b a, c, d
c b, d, e
d b, c
d
e c
Figure A.18: Graph and its Adjacency List
Usage Considerations: Storage versus Time
The choice between an adjacency matrix and an adjacency list for graph representation depends
on the network’s size, density, and the operations to be performed.
A.2.7 Network Resilience and Robustness
Thissectionexaminestheresponseofanetworktofailuresandassessesitsresilienceandrobustness.
Thefocusisonhowthestructuralpropertiesofanetworkdetermineitscapacitytoendurefailures.
Resilience to Failures
Network resilience refers to the ability of a network to maintain its overall structure and function-
ality despite the failure of one or more of its components (nodes or edges).
Node Failure: The failure of a node in a network can be represented by the removal of
the node and its associated edges. Mathematically, if node v fails in a graph G = (V,E), the
i
resulting graph G′ is defined as G′ = (V −{v },E−{(v ,v ) | v ∈ V}). The impact of this failure
i i j j
depends on the node’s role and position within the network. For instance, the failure of a highly
connected node (hub) in a scale-free network can have a more significant impact than the failure
of a less connected node. Albert and Barab´asi [2002], Newman [2018], Ellens and Kooij [2013],
Goldschmidt et al. [1994]
339b e e
a c a c
d d
(a) Original Graph (b) Graph After Node b
Failure
Figure A.19: Illustration of Node Failure in a Graph
Edge Failure: Similarly, edge failure involves the removal of an edge from the graph. If edge
(v ,v ) fails, the resulting graph G′ is G′ = (V,E −{(v ,v )}). The network’s ability to withstand
i j i j
edge failures depends on its redundancy and alternative paths between nodes. Albert and Barab´asi
[2002], Newman [2018], Ellens and Kooij [2013]
b e b e
a c a c
d d
(a) Original Graph (b) Graph After Edge
(b,c) Failure
Figure A.20: Illustration of Edge Failure in a Graph
Network Connectivity: The resilience of a network is often measured by its connectivity, or
the ability to find alternative paths between nodes after failures. A key metric is the size of the
Largest Connected Component (LCC) or subgraph in the network after removing nodes or edges.
Mathematically, this can be represented as follows:
LCC(G′) = max{|C| : C is a connected component of G′}
Where,
• G′ = (V′,E′) represents the resulting graph after failures.
• V′ ⊆ V and E′ ⊆ E indicate that the sets of vertices and edges in G′ are subsets of those in
340the original graph G.
• max{|C|} denotes the cardinality (size) of the largest connected component in G′.
intheexampleshowninFigureA.19, afterthefailureofnodeb, thesizeoftheLargestCon-
nected Component (LCC) in the resulting graph is 3, because the largest group of interconnected
nodes consists of nodes c, d, and e.
Impact of Network Topology
Different network topologies exhibit varying degrees of resilience:
Random Networks: In random networks, failures are less likely to disrupt the network signif-
icantly due to the uniform distribution of connections. These networks are typically more resilient
to random node failures.
b e e
a c a c
d d
(a) Original Random (b) Random Network
Network After Node Failure
Figure A.21: Impact of Node Failure on a Random Network
Scale-Free Networks: Scale-free networks, characterized by a few highly connected hubs and
manynodeswithfewerconnections,aremorevulnerabletotargetedattacksontheirhubs. However,
they are relatively resilient to random failures.
Small-World Networks: Small-world networks are known for their short path lengths and
high clustering. They can maintain their overall structure even after the failure of several nodes
due to their high clustering coefficient and redundant pathways.
341b e e
a c a c
d d
(a) Original Scale-Free (b) Scale-Free Network
Network AfterCriticalNodeFail-
ure
Figure A.22: Impact of Critical Node Failure on a Scale-Free Network
b e b
a c a c
d d
(a) Original Small (b) Small World
World Network Network After
Node Failure
Figure A.23: Impact of Node Failure on a Small World Network
Topology Considerations The resilience and robustness of a network to failures are closely
tied to its structure and topology. Understanding how different network models respond to such
disruptions is key to designing and maintaining resilient systems in various domains.
A.2.8 Unipartite vs. Bipartite Networks
This section explores the fundamental differences between unipartite networks, where all nodes are
ofasingletype, andbipartitenetworks, whichconsistoftwodistinctsetsofnodeswithconnections
only between these different sets.
N2 N3 A1 A2
N1 B1 B2 B3
Figure A.24: Example of a Unipartite Figure A.25: Example of a Bipartite Net-
Network work
342Unipartite Networks
Unipartite networks represent a fundamental type of graph where all nodes belong to a single type
and can potentially connect with any other node.
Definition: Mathematically, a unipartite graph G = (V,E) consists of a set of nodes V and
a set of edges E where each edge (v ,v ) connects nodes v and v that belong to the same set V.
i j i j
Diestel [2017]
Characteristics: In these networks, edges symbolize interactions or relationships between
entities of a similar type.
Bipartite Networks
Bipartite networks, or two-mode networks, are characterized by having two distinct sets of nodes,
with edges connecting only nodes from different sets.
Definition: A bipartite graph G = (V ,V ,E) consists of two distinct sets of nodes, V and
1 2 1
V , and a set of edges E, where each edge (v ,v ) connects a node v from set V to a node v from
2 i j i 1 j
set V . Diestel [2017]
2
Characteristics: This structure is definitive in scenarios involving two different types of
entities.
Analytical Implications: The analysis of bipartite networks differs significantly from
unipartite networks. Key aspects such as degree distribution, centrality measures, and clustering
coefficients have to be redefined or adapted to account for the two distinct sets of nodes.
A.2.9 Edge-based Measures
Edge Density
Edge density is a fundamental measure in graph theory that quantifies how close a network is to
being fully connected. It is defined as the ratio of the number of actual edges in the network to the
343maximum possible number of edges. For a network with n nodes, the maximum number of edges
n(n−1)
in an undirected graph is . The edge density formula is expressed as:
2
Number of Actual Edges
Edge Density = (A.1)
n(n−1)
2
This measure provides insight into the overall connectivity of the network, with higher
values indicating a more densely connected graph. Easley and Kleinberg [2010], Diestel [2017]
B B
A C A C
D E D E
Maximally Connected Network Less Connected Network
Figure A.26: Comparison of Edge Density
Figure A.26 illustrates a comparison of edge density between two network configurations.
On the left, the Maximally Connected Network represents a fully connected graph with each node
linkedtoeveryothernode, indicatingthemaximumedgedensityachievable. Ontheright, theLess
Connected Network shows a sparser connectivity with fewer edges, signifying a lower edge density.
The edge density is computed as the ratio of the number of actual edges to the number of possible
edges, which for the Less Connected Network is (5 actual edges / 10 possible edges), resulting in
an edge density of 0.5.
Edge Betweenness Centrality
Edgecentralitymeasuresthe importance ofedgesin anetwork. It is oftenusedto identifythemost
crucial connections within the network that, if removed, would significantly impact the network’s
structure and efficiency. One common form of edge centrality is betweenness centrality, which is
calculated as the number of shortest paths that pass through an edge, normalized by the total
number of shortest paths in the network. The formula for edge betweenness centrality for an edge
e is:
344(cid:88) σ st(e)
Edge Betweenness Centrality (of edge e) = (A.2)
σ
st
s,t∈V
Here, σ is the total number of shortest paths from node s to node t, and σ (e) is the
st st
number of those paths passing through edge e. Edge centrality highlights the role of individual
edges in facilitating communication and connectivity within the network. Freeman [1977], Newman
[2018]
A
12 10
B C
1
Figure A.27: Example for Edge Centrality where B-C is influential
Figure A.27 illustrates an example of edge centrality in a simple network. The edge cen-
trality score for B-C can be computed based on the number of shortest paths that pass through
it.
Considering the shortest paths:
• From A to C: The shortest path is A-C, and it does not pass through edge B-C.
• From A to B: The shortest path is A-C-B, which passes through edge B-C.
• From B to C: The shortest path is B-C, which is the edge itself.
Thus, the edge betweenness centrality for edge B-C is calculated as follows:
1 2
Edge Betweenness Centrality (of edge B-C) = (0+1+1) = (A.3)
3 3
This value of 2 reflects the high importance of edge B-C in the network’s connectivity, as
3
it is involved in two out of the three shortest paths.
Figure A.28 displays an example of edge betweenness centrality in a unweighted network
comprising nodes A, B, C, D, E, and F. The edge C-D is highlighted, indicating its high centrality
score due to its critical role in connecting multiple node pairs.
345A E
C D
B F
Figure A.28: Example of Edge Betweenness Centrality with High Centrality Score for Edge
C-D
Considering the shortest paths:
• From A to D, E, and F: The shortest paths pass through edge C-D.
• From B to D, E, and F: The shortest paths pass through edge C-D.
• From E to A, B, and C: The shortest paths pass through edge C-D.
• From F to A, B, and C: The shortest paths pass through edge C-D.
6×(6−1)
Giventhatthereare6nodesinthenetwork, thereareatotalof = 15pairsofnodes.
2
Considering the shortest paths listed above, edge C-D is involved in the shortest path of 12 out of
these 15 pairs (excluding pairs A-B, B-A, and C-D).
Therefore, the edge betweenness centrality for edge C-D is:
12
Edge Betweenness Centrality (of edge C-D) = = 0.8 (A.4)
15
This value of 0.8 reflects the high importance of edge C-D in the network’s connectivity, as
it is a part of the shortest paths for most pairs of nodes in the network.
Edge Closeness Centrality Edgeclosenesscentralitycouldbedefinedasameasurereflecting
the collective closeness of the two nodes an edge connects, in relation to the rest of the network.
This measure assesses the edge’s importance based on the premise that edges connecting nodes
with high closeness centrality are strategically significant for efficient network communication.
For an edge e connecting nodes u and v, the edge closeness centrality C (e) could be
C
formulated as:
346C (u)+C (v)
C C
C (e) = (A.5)
C
2
where C (u) and C (v) are the closeness centralities of nodes u and v respectively. This
C C
formulaaveragestheclosenesscentralitiesofthetwonodesconnectedbytheedge,therebycapturing
the edge’s role in connecting parts of the network that are, on average, closer to all other nodes.
Freeman [1977], Newman [2018]
This conceptualization of edge closeness centrality provides a unique perspective on the
significance of an edge, not just as a link between two nodes, but as a connection between two
critical points in the network that collectively enhance the overall network connectivity.
A C
U V
B D
Figure A.29: Network with Central Nodes U and V Connected by an Edge and Surrounded
by Nodes A, B, C, D
A.3 Static Spatial Networks
This section delves into graphs that include space in their representation, examining the impacts
on graph structure, node attributes, edge properties, isomorphic mappings, clustering, and network
resilience.
347A.3.1 Definition of Spatial Networks
Contrast with Traditional Graphs
In traditional graphs, space is an abstract concept without quantifiable dimensions, and there is no
definitive spatial orientation. The concept of neighboring nodes in these graphs is based solely on
the connections specified by the set of edges. In contrast, spatial graphs introduce a well-defined
spatial dimension, making the physical placement of nodes as integral to the network’s structure
as the nodes and edges themselves. This spatial aspect allows for an additional layer in evaluating
relationships between nodes, extending beyond mere link-based connectivity. Barthelemy [2022]
Y
5 1
4 2
3
2 3
1 4
1 2 3 4 5 X
Figure A.30: Example of a Static Spatial Network. Nodes are embedded in a spatial coor-
dinate system.
Mathematical Definition
Spatial networks are characterized by the integration of a spatial dimension into network topology.
Mathematically, a spatial network can be represented as: Barthelemy [2022]
G = (V,E,P) (A.6)
s
where:
• V represents the set of nodes.
348• E denotes the set of edges.
• P represents the set of positions for each node.
A.3.2 Spatial Properties and Nodes
In spatial networks, nodes are not just abstract entities but are defined by their specific locations
in space, which significantly influences their interaction and functionality within the network.
3
1
2
Figure A.31: Spatial network with meaningful node placement. Nodes are positioned ac-
cording to spatial coordinates.
Spatial Embedding of Nodes
Spatial coordinates provide a physical or geometric dimension to nodes in a network. This can be
mathematically represented as:
P : V → Rn (A.7)
where P(v) denotes the spatial position of node v in an n-dimensional space, and V is
the set of nodes. This spatial embedding is crucial for understanding the network’s structure and
dynamics. Barthelemy [2022]
Table A.1: Sample Spatial Embedding of Nodes in a Network
Node (V) Spatial Position (P)
A (x , y , z )
1 1 1
B (x , y , z )
2 2 2
C (x , y , z )
3 3 3
... ...
349The table above (Table A.1) provides an example of how nodes (V) in a spatial network
are associated with specific coordinates (P) in a given space. Each node is assigned a unique set of
coordinates, representing its position in a potentially multidimensional space.
Curse of Dimensionality
The dimensionality of the spatial embedding in networks, whether 2D, 3D, or higher dimensions,
significantly influences the representation and analysis of nodes. For example, nodes in a 3D space
can exhibit complex layers of interaction and connectivity, offering a stark contrast to the more
straightforward interactions in 2D spaces. Each added dimension in spatial embedding can expo-
nentially increase the computational cost for algorithms used in clustering, pathfinding, and other
forms of network analysis. This scenario is commonly referred to as the “curse of dimensionality.”
Peng et al. [2024], Little et al. [2021], Steinbach et al. [2004]
Figure A.32: Comparison of 2D and 3D point mappings.
InFigureA.32Theleftsideshowsa2Dmappingofpointsonanx-yaxis,whiletherightside
depicts a 3D point cloud on x-y-z axes, highlighting the increased complexity in higher dimensions.
Spatial Heterogeneity
Spatial heterogeneity in networks refers to the variation in spatial attributes among nodes, such as
location,distancetoothernodes,anddistributionwithinthenetworkspace. Thepositionsofnodes
350in a spatial network influence not only their physical locations but also their roles and interactions
within the network.
For example, nodes in densely clustered areas may exhibit different connectivity patterns
compared to those in more sparsely populated regions. Nodes positioned at strategic locations, like
network centers, might assume critical roles in processes like information dissemination, resource
distribution, or contributing to network resilience. Understanding spatial attributes helps in iden-
tifying key nodes, predicting interaction patterns, and assessing the network’s structural properties
and resilience in the face of disruptions or changes in spatial configurations. Barthelemy [2022],
Mhatre and Rosenberg [2004]
Figure A.33: Comparison of Spatial Node Distributions. Left: Evenly Spaced Nodes. Right:
Clustered Nodes.
FigureA.33depictstwodifferentspatialdistributions. Theleftcolumnshowsevenlyspaced
nodes, while the right column displays nodes that are clustered into groups.
A.3.3 Spatial Properties and Edges
In spatial networks, edges are deeply influenced by the spatial properties of the nodes they connect.
This subsection explores the theoretical aspects and dynamics of edge formation and properties in
the context of spatial networks.
351Role of Spatial Proximity in Edge Formation
Spatial proximity is a key factor in determining edge formation between nodes in spatial networks.
The probability of an edge existing between two nodes typically decreases as the spatial distance
between them increases. Mathematically, this relationship can be expressed as:
P((v ,v ) ∈ E) = f(d(P(v ),P(v ))) (A.8)
i j i j
where E is the set of edges, d represents a distance metric, and f is a function that models
the relationship between distance and edge formation. Barthelemy [2022], Barth´elemy [2003]
4
1 2
3
Figure A.34: Edge formation influenced by spatial relationships.
Figure A.34 illustrates edge formation in a spatial network based on proximity. Edges
are formed between nodes that are within a certain range, indicated by the dashed circle. Nodes
connected by green edges fall within this range, signifying established connections due to their
proximity. Conversely, potential connections to nodes outside this range, beyond the dashed circle,
are not established and are represented by red nodes.
Edges and Spatial Distances
The spatial characteristics of edges are primarily shaped by the physical or geometric distance
between the nodes they connect. This distance is a central factor in determining the nature of the
edges, particularly in how they are represented in weighted and unweighted networks.
Inweightedspatialnetworks,thephysicaldistancebetweennodesisoftendirectlytranslated
into edge weights. This approach acknowledges that longer distances might entail greater resource
investment, energy consumption, or time duration for traversal or communication. Gastner and
Newman [2006]
352On the other hand, unweighted spatial networks tend to abstract away the physical dis-
tances, focusinginsteadonthemereexistenceofconnections. Inthesenetworks, edgesaretypically
conceptualized as hops, emphasizing the presence of a connection over its spatial characteristics.
This model is particularly relevant in scenarios where the exact distances are less critical to the
network’s function or where connections are uniform in nature. Gastner and Newman [2006]
Y Y
d g h i
2 f
2
e 1 d e f
3
1 c
3
a b a b c
1
X X
Weighted Network Unweighted Network
Figure A.35: Comparison of Weighted and Unweighted Spatial Networks
Figure A.35 contrasts weighted and unweighted spatial networks. The left side shows a
weighted network where edge weights reflect physical distances between nodes. The right side
illustrates an unweighted network with uniform node distances supporting single spatial hops.
Edges and Spatial Constraints
Spatial constraints play a critical role in shaping both the formation of edges and the overall
connectivity of a network. These constraints encompass a variety of factors, including physical
barriers, limitations in distance, or specific rules for connectivity that are unique to certain regions.
In the context of spatial networks, terrain features such as mountains, valleys, bodies of water, or
urban structures can significantly influence edge properties. For example, a mountain range may
act as a barrier, preventing edge formation, or it might increase the ’cost’ associated with an edge
in a weighted network, reflecting the additional effort or resources needed to traverse such terrain.
Mathematically, theadjacencymatrixofanetwork, denotedbyA, canbeadaptedtoreflect
these spatial constraints:
353

 1, if d(P(v i),P(v j)) ≤ θ and other constraints, such as terrain, are met
A = (A.9)
ij

 0, otherwise
This equation represents how spatial constraints, including terrain, influence the likelihood
of edge existence and characteristics within the network.
E Adjacency Matrix of Spatial Constraints
Nodes A B C D E
C D A 0 1 0 1 0
B 1 0 1 0 1
C 0 1 0 1 0
A B D 1 0 1 0 1
E 0 1 0 1 0
Realized Network
Figure A.36: Example of Edge-based Spatial Constraints
Figure A.36 illustrates a realized network with five nodes labeled A to E, connected by
edges. Red rectangles are placed between certain nodes to signify spatial constraints or obstacles,
indicating the absence of direct edges between these node pairs due to these constraints. The ac-
companying table shows the corresponding adjacency matrix, reflecting these spatially constrained
relationships.
Planarity in Spatial Networks
Planarity is a concept that relates to the network’s ability to be drawn on a plane without edge
crossings. In spatial networks, particularly waypoint networks or pathways, planarity of edges is
important consideration for avoiding potential collision points, as edges represent movement flow.
A planar layout is therefore key for safe, efficient navigation, minimizing the risks and complexities
of intersecting paths between nodes. Barthelemy [2022]
A network is considered planar if:
354∀e ,e ∈ E, e ∩e = ∅ or e ∩e = {v}, v ∈ V (A.10)
1 2 1 2 1 2
This equation asserts that for every pair of edges e and e in the edge set E, the edges
1 2
either do not intersect at all (e ∩e = ∅) or only intersect at a common vertex (e ∩e = {v},
1 2 1 2
where v is a node in the vertex set V).
Y Y
g h i g h i
d e f d e f
a b c a b c
X X
Planar Network Non-Planar Network
Figure A.37: Comparison of Planarity in Spatial Networks
Figure A.37 presents a side-by-side comparison of planar and non-planar networks. On
the left, the Planar Network showcases nodes connected without any edge crossings, illustrating
a planar graph layout. On the right, the Non-Planar Network displays overlapping edges among
nodes, representing a non-planar structure.
A.3.4 Spatial Properties and Network Structures
This subsection examines the impact of spatial characteristics on the structure of networks. It fo-
cuses on how the physical positioning of nodes and the distances between them shape the network’s
topology, leading to unique emergent patterns and dynamics.
Spatial Segmentation: Clustering Space in Networks
Spatial segmentation in networks applies clustering analysis to the spatial domain, focusing on the
division of space around nodes based on their spatial attributes and proximities. This results in a
355unique cluster space for each node.
VoronoiTessellationisutilizedforspatialsegmentation. Itmathematicallyallocatesregions
based on the proximity to the nearest node, formalized as:
Voronoi(v) = {x ∈ Rn | ∀u ∈ V \{v},d(x,P(v)) < d(x,P(u))} (A.11)
Here, Voronoi(v) signifies the spatial region closest to node v, where P(v) indicates v’s
location and d is the distance function. This segmentation is crucial for understanding the spatial
influence of nodes within the network.
Figure A.38: Voronoi Tessellation in Spatial Networks
Figure A.38 demonstrates Voronoi tessellation in a spatial network. Ten nodes (black dots)
are segmented into distinct regions (orange outlines), each closest to a single node, showcasing
spatial segmentation.
Correlation Analysis in Spatial Networks
The Pearson correlation coefficient, a widely accepted statistical measure, quantifies the linear
relationships between spatial and network metrics.
Given two variables, X and Y, which could represent any spatial or network metric, the
Pearson correlation coefficient is defined as:
356cov(X,Y)
ρ = (A.12)
X,Y
σ σ
X Y
Here, cov(X,Y) represents the covariance between the variables X and Y, while σ and σ
X Y
denotethestandarddeviationsofX andY, respectively. Thiscoefficientrangesfrom-1to1, where
1 indicates a perfect positive linear relationship, -1 indicates a perfect negative linear relationship,
and 0 signifies no linear correlation. Newman [2018]
In the context of spatial networks, X and Y could represent various aspects, such as the
physical distance between nodes (a spatial metric) and the number of connections (a network
metric). By applying this correlation analysis, researchers can uncover significant patterns and
dependencies. For instance, one might investigate whether nodes that are closer in space tend to
have more connections or whether longer distances correlate with specific network behaviors.
Figure A.39: Illustration of Pearson Correlation in Spatial Networks
Figure A.39 shows a spatial network where nodes are connected based on proximity, visu-
alized with larger nodes and white labels for clarity. The accompanying scatter plot demonstrates
a negative Pearson Correlation Coefficient between node degrees and their average distances, sug-
gesting that highly connected nodes tend to be closer to each other. This pattern highlights the
role of spatial proximity in network connectivity and has significant implications for the analysis
357and design of spatial networks in practical fields.
A.3.5 Spatial Properties and Isomorphism
The concept of isomorphism in spatial networks introduces unique considerations compared to
traditional graph theory. Spatial isomorphism considers not only the structure of the network but
also the spatial positioning of nodes.
Theoretical Definition of Spatial Isomorphism
SpatialisomorphismbetweentwospatialnetworksG = (V ,E ,P )andG = (V ,E ,P )occurs
s1 1 1 1 s2 2 2 2
when there is a bijection f : V → V such that:
1 2
(v ,v ) ∈ E ⇔ (f(v ),f(v )) ∈ E and P (v ) = P (f(v )) ∀v ∈ V (A.13)
i j 1 i j 2 1 i 2 i i 1
Thisdefinitionimpliesthatcorrespondingnodesandedgesinthetwonetworksarenotonly
connected in the same way but also have the same spatial coordinates.
2 B 1 3
= ̸=
1 3 A C 2
Figure A.40: G is a Figure A.41: G & G Figure A.42: G is not
1 2 1 3
Spatial network are isomorphic isomorphic to G & G
1 2
Distinctions Between Spatial and Traditional Graph Isomorphism
Unlike traditional graph isomorphism, which focuses solely on the preservation of adjacency re-
lationships between nodes, spatial isomorphism requires the preservation of node locations. This
additional spatial constraint means that spatially isomorphic networks are more strictly defined
than their non-spatial counterparts.
358Theoretical Implications of Spatial Isomorphism
Spatial isomorphism has several theoretical implications:
• Network Equivalence: Spatialisomorphismimpliesastrongerformofequivalencebetween
networks, considering both their structure and spatial arrangement.
• Pattern Recognition: It is crucial in the analysis of spatial patterns and structures within
networks, as it helps identify similar spatial configurations.
A.4 Dynamic Networks
A.4.1 Static vs. Dynamic Networks
Dynamicnetworksrepresentasignificantshiftfromstaticnetworkmodels,accommodatingchanges
in structure or attributes. This section explores the foundational concepts of dynamic networks,
contrasting them with static networks
Static Networks: Defined as a graph G = (V,E), a static network’s topology, consisting of
nodesV andedgesE,remainsconstant. Suchnetworksareidealforsystemswithstableinteractions
or scenarios where the evolution of network connections is not a focus.
Dynamic Networks: Dynamic networks are distinguished by their flexibility, showing vari-
ations in their architecture and attributes as they respond to different conditions or contexts.
Mathematically, these networks can be denoted as:
G = (V ,E ), i = 1,2,...,N
i i i
where V and E denote the nodes and edges in the i-th configuration, and N represents
i i
the total number of unique configurations of the network. In essence, a single graph can take
on multiple configurations, each adapting to a set of parameters that may be influenced by time,
specific features, or particular situational variables. Mesbahi and Egerstedt [2010]
3591 2
v v v v
1i 2i 1j 2j
∅
3 2 5
v v
3i 3j
Figure A.43: State i of dynamic network Figure A.44: State j of dynamic network
A.4.2 Variability in Dynamic Networks:
Dynamic networks may occur due to changes influenced by a wide array of factors not confined
to temporal shifts. For instance, alterations in network topology could be driven by feature-
based changes in nodes or edges, decision-making processes, interaction dynamics, or external
environmentalconditions. Thisaspecthighlightstheversatilityofdynamicnetworksinrepresenting
a single underlying graph through multiple realizations, each tailored to specific conditions or
influences. Mesbahi and Egerstedt [2010]
A.4.3 Transition from Static to Dynamic Models
The progression from static to dynamic network models represents a shift towards a more holistic
perspective, where networks are not just snapshots of interactions but are capable of reflecting a
spectrum of changes. This broader view is crucial in understanding systems that exhibit varied be-
haviorsoradaptationsindifferentscenarios, makingdynamicnetworksapowerfultoolincapturing
the complexity of real-world systems. Kivel¨a et al. [2014]
A.4.4 Example Dynamic Network: Adaptive Pathing Algorithm
To illustrate the concept of a dynamic network, consider an adaptive pathing algorithm used for
navigation using a set of waypoint nodes. This example showcases the network’s adaptability not
only in terms of the paths (edges) available based on various factors but also in the mobility and
adjustability of the waypoints (nodes) themselves.
360Dynamic Edges: In this network, the edges represent potential paths between waypoints, and
their characteristics can vary depending on the agent’s requirements and environmental factors,
such as:
• Risk-Aversion: Paths can be safer or riskier, depending on the agent’s tolerance for risk.
• Movement Mode: Differentmodesofmovement(walking, driving, flying)necessitatevary-
ing path options and constraints.
• Fuel-Cost: Paths may be optimized for fuel efficiency.
• Environmental Constraints: The paths chosen can vary based on weather conditions or
terrain.
Edge Risk Level Fuel Cost Speed Active (Min Risk) Active (Min Fuel) Active (Max Speed)
A-B Low High Fast Yes No Yes
A-C High Low Slow No Yes No
B-C Medium Medium Medium Yes Yes Maybe
C-D Low High Slow Yes No No
D-A High Low Fast No Yes Yes
Table A.2: Edge Characteristics in the Adaptive Pathing Algorithm
B B B
A C A C A C
D D D
Minimizing Risk Minimizing Fuel Maximizing Speed
Figure A.45: Dynamic Edges in Adaptive Pathing Network under Different Conditions
Dynamic Nodes: Moreover, the waypoints themselves are dynamic. Their position or avail-
abilitycanchangebasedonfactorslikethespeedoftheagentorpowerusage. Thisdynamicaspect
includes:
• In high-speed scenarios, waypoints might be placed farther apart.
361• For energy-efficient navigation, waypoints could be positioned to minimize energy consump-
tion.
• terrainorenvironmentalfactorsmayinfluencehowwaypointsmaybeplaced,suchasground-
based vs air-based movement.
Node Standard Position High Speed Energy Efficient Ground Access Air Access
A (0,0) (0,0) (0,0) Yes Yes
B (2,2) (4,4) (1,1) No Yes
C (4,0) (8,0) (2,0) Yes Yes
D (2,-2) (4,-4) (1,-1) Yes No
Table A.3: Dynamic Node Positions in Different Scenarios
Ground Access Node Positions Air Access Node Positions
Standard
A A A C C C B
High Speed
Energy Efficient
D B
D B
D A A A C C C
Figure A.46: Comparative Dynamic Nodes in Adaptive Pathing Network
Adaptive Network Characteristics: Thispathingalgorithmexemplifiesadynamicnetwork
where both the nodes (waypoints) and edges (paths) are variable. The network adapts to the
agent’s specific characteristics and environmental conditions, offering a range of possible paths and
waypoint configurations. This adaptability makes the network ideal for applications in fields like
robotics, autonomous vehicle navigation, and adaptive logistics systems.
A.5 Temporal Networks
A.5.1 Temporal Networks are Dynamic
Temporal networks represent a specialized category within the broader spectrum of dynamic net-
works, distinguished primarily by their explicit incorporation of the temporal dimension into net-
362work structure and analysis. This section introduces temporal networks, differentiates them from
general dynamic networks, and underscores the significance of the temporal aspect in network
studies.
Definition and Differentiation Temporal networks are defined by the connections between
nodes that are not only defined by their existence but also by the time at which these connections
occur. The explicit consideration of the timing and order of interactions distinguishes temporal
networks from other types of dynamic networks, which may involve changes in network structure
or attributes that are not inherently time-ordered. Holme and Saram¨aki [2012]
t=0 t=1 t=2 t=3
Figure A.47: Temporal evolution of the network
A.5.2 Importance of Temporal Dimension
The temporal dimension introduces a critical layer of complexity to network analysis. In tempo-
ral networks, the direction and timing of edge formations and dissolutions significantly influence
network properties such as connectivity and path lengths. This aspect allows for a detailed repre-
sentation of real-world systems where interactions are time-dependent.
Unlike undirected dynamic networks, temporal networks often necessitate treating the se-
quence of state changes as an ordered set. Holme and Saram¨aki [2012]
DirectedDynamicNetworks Temporalnetworksencapsulatetheconceptofcausality,wherein
time is perceived as flowing from previous states to subsequent states. This causality underpins the
representation of a temporal network as a series of temporal states, each directed from one to the
next in an irreversible relationship. Such a characteristic distinctly positions temporal networks as
363a special case of directed dynamic networks, emphasizing the sequential nature of time-dependent
interactions. Nicosia et al. [2013a], Michail [2015]
Figure A.48: Illustration of Directed Dynamic Networks showcasing the progression and
directedness of network changes. Each graph represents a different state with varying edge
activations.
A.5.3 Mathematical Representations of Temporal Networks
Two common approaches to representing these networks are event-based representation and snap-
shot representation.
Event-Based Representation
In an event-based representation, a temporal network is described by a series of events, each rep-
resenting an interaction between a pair of nodes at a specific time. This can be mathematically
formulated as a set of triples:
E = {(u,v,t)|u,v ∈ V,t ∈ T}
event
where (u,v) represents an edge between nodes u and v at time t, and T is the set of all time
points at which events occur. This representation is particularly useful for capturing the precise
timing of interactions. Masuda and Lambiotte [2016]
Table A.4 demonstrates an example of an event-based graph, where the table records the
time intervals during which each edge is active, capturing the dynamic nature of temporal network
interactions, including instances of reactivation as seen with the edge (A, B).
Snapshot Representation
Alternatively, in snapshot representation, the temporal network is divided into a sequence of static
graphs (snapshots), each representing the network at a particular time interval. This can be
364Table A.4: Example: Event-based graph log with activation and deactivation times
Edge Activation Time Deactivation Time
(A, B) t=1 t=2
(B, C) t=2 t=3
(C, D) t=3 t=5
(A, D) t=4 t=6
(B, D) t=5 t=7
(C, A) t=6 t=8
(A, B) t=9 t=10
expressed as:
G(t) = (V(t),E(t)), t = 1,2,...,T
where:
• V(t) is the set of nodes at time t,
• E(t) is the set of edges present during the time interval t,
• T is the total number of discrete time intervals.
Table A.5: Example: Snapshot representation of a temporal network
Time Interval Active Edges
t=1 (A, B)
t=2 (B, C)
t=3 (C, D)
t=4 (A, D), (C, D)
t=5 (A, D), (B, D), (C, D)
t=6 (B, D), (C, A), (C, D)
t=7 (B, D), (C, A)
t=8 (C, A)
t=9 (A, B)
t=10
In contrast to the event-based representation, the snapshot representation provides a se-
quential view of the network’s state at discrete time intervals. This approach is advantageous for
understanding the network’s structure at specific moments in time Masuda and Lambiotte [2016].
365Table A.5 illustrates the snapshot representation of the same temporal network, where each row
corresponds to a different time interval, indicating which edges are active at that specific time.
Choice of Representation
Thechoicebetweenevent-basedandsnapshotrepresentationsdependsonthenatureofthetemporal
data and the specific analysis goals. Event-based representation is more granular and suitable for
data with precise time stamps, while snapshot representation simplifies the network into discrete
intervals, which can be advantageous for certain types of analysis. Blonder et al. [2012]
Event Time (Continuous)
A
B
C
D
E
F
Figure A.49: Event-based versus Snapshot-based
FigureA.49illustratesthetwoprincipalmethodsofrepresentingtemporalnetworks: event-
based and snapshot-based. On the left, the event-based approach is depicted, where interactions
are represented as a continuous stream, with edges drawn at the exact times of occurrence. Each
horizontal line corresponds to a node, and the directed edges represent interactions occurring over
time, marked by their temporal order. On the right, the snapshot-based method is visualized
by segmenting the timeline into discrete frames, each encapsulating the network’s state within a
specific time interval.
A.5.4 General Dynamics in Temporal Networks
This section delves into the intricate dynamics of temporal networks, focusing on the distinct
characteristics and implications of Markovian random, Bayesian random, and Uniform random
behaviors. Porter and Gleeson [2015]
366Evolutionary Dynamics
Definition: Markovian random dynamics in temporal networks refer to situations where the
current state of the network is influenced by its previous states. This type of dynamics is char-
acterized by a dependency on the history of the network. Sheng et al. [2023], Galdeman et al.
[2023]
Mathematical Representation: Markovian random dynamics can be mathematically
represented by incorporating historical dependency into the network model. For instance:
G(t) = f(G(t−1),G(t−2),...,G(t−k))
where G(t) is the state of the network at time t, and f is a function that determines the
current state based on k previous states.
Significance: In Markovian random temporal networks, patterns and structures evolve in a
more predictable manner, following the network’s historical trends. This predictability is essential
in scenarios where past interactions influence future connections.
Table A.6: Markvoian Random Dynamics in a Temporal Network
Time Active Edges
t=1 A-B
t=2 B-C
t=3 C-D
t=4 D-E
t=5 E-F
t=6 F-A
Table A.6 illustrates a network that evolves through a sequence of edge activations over
time. At each time step, a new edge forms, creating a chain of connections that demonstrate
the influence of prior states on subsequent ones. This pattern of edge activations showcases an
evolutionary-like nature of the network, where each state is a progression from the previous one,
leading to a cyclical connection pattern that completes at time t = 6 with the edge F-A.
367Bayesian Random Dynamics
Definition: Bayesian Random dynamics in temporal networks describe scenarios where the
current state of the network is estimated by the aggregate of prior states in a probabilistic manner.
While there is no direct dependency, as seen in Markovian Random networks, past states inform
the likelihood or probability of various future events or states occurring. Newman [2014]
Mathematical Representation: The stochastic nature of such networks can be mathe-
matically represented as:
G(t) = f(P(G(t−1)),P(G(t−2)),...,P(G(t−k)))
Here, G(t) denotes the state of the network at time t, and f is a function that integrates
the probabilities P associated with k previous states to determine the likely state at t.
Significance: Bayesian dynamics model systems where prior states increase or decrease
the likelihood of future occurrences without dictating them. This approach is especially useful in
fields where historical trends impact, but do not fully determine, future outcomes. Grimmett and
Stirzaker [2001]
Table A.7: Bayesian Stochastic Dynamics in a Temporal Network
Time Active Edges
t=1 A-B
t=2 A-B
t=3 C-E
t=4 A-B
t=5 F-D
t=6 A-B
Table A.7 presents an example of Bayesian dynamics in a temporal network. The table
illustrates a sequence of active edges over different time intervals. While some edges, like A-B,
recur at multiple time steps, others, such as C-E and F-D, appear sporadically. This pattern
reflects the probabilistic nature of stochastic dynamics, where past states influence the likelihood
of future states but do not determine them with certainty. The randomness embedded in the
368occurrence of edges like C-E and F-D contrasts with the more predictable reoccurrence of the A-B
edge, showcasing the Bayesian behavior of the network.
Uniform Random Dynamics
Definition: Uniform Random dynamics in temporal networks imply that the state of the
network at any given time is independent of its past states. These dynamics are often modeled as
stochastic processes. Newman et al. [2006]
Mathematical Representation: A uniform random dynamic temporal network can be
represented as:
G(t) = f(ϵ )
t
where ϵ is a random variable or a stochastic process that influences the network state at
t
time t independently of previous states.
Significance: UniformRandomdynamicsmodelsystemswhereinteractionsaresporadicand
unpredictable. The independence from historical data makes these models suitable for scenarios
where future states are not influenced by the past. Newman et al. [2006]
Table A.8: Uniform Random Dynamics in a Temporal Network
Time Active Edges
t=1 C-D
t=2 E-F
t=3 A-C
t=4 B-D
t=5 E-A
t=6 F-B
As illustrated in Table A.8, random dynamics within temporal networks are characterized
by the lack of dependency between the network’s states over time. Each time interval reveals a
set of active edges that do not follow a predictable pattern or historical influence, emphasizing the
network’s non-deterministic and independent nature at each time step.
369A.5.5 Analytical Challenges in Temporal Networks
Temporal networks pose unique challenges due to their time-ordered nature and the computa-
tional complexities involved. This subsection addresses these challenges and introduces methods
for effective analysis.
Challenges with Time-Ordered Data
Complexity of Time-Ordered Interactions: Theprimarychallengeinanalyzingtemporal
networks lies in the need to account for the time ordering of interactions. This temporal aspect
can significantly influence network dynamics and requires careful handling to accurately capture
the network’s evolution. Michail [2015]
ComputationalComplexity: Temporalnetworksofteninvolvelargedatasetswithfine-grained
time stamps, leading to high computational complexity. Efficient data structures and algorithms
are needed to manage and process this time-ordered data effectively. Michail [2015]
Methods for Managing Time-ordered Data
Time-Aggregation: One approach to simplifying the analysis of temporal networks is time-
aggregation, where interactions over a specified time period are aggregated into a single network
snapshot. Mathematically, this can be represented as:
T
(cid:91)
G (T) = G(t)
agg
t=1
where G (T) represents the aggregated network over the time interval T, and G(t) is the
agg
network state at each time step t. This method reduces the complexity of the network but can
also lead to the loss of fine-grained temporal information. Holme and Saram¨aki [2021], George and
Shekhar [2008], Nicosia et al. [2012]
370∆t ∆t ∆t ∆t
0 1 2 3
Figure A.50: Time-varying Graph Figure A.51: Time-Aggregated Graph
Window-Based Analysis: Another method is window-based analysis, where the network is
analyzed over time using specific windows. Each window captures a subset of the temporal data.
Masuda and Holme [2019] Depending on the analysis objectives, these windows can be:
• Overlapping Windows (Rolling Windows): These provide an evolutionary view of
network dynamics, ensuring continuity in the network’s edges across consecutive windows.
This approach facilitates the observation of gradual changes and trends over time. Klobas
et al. [2023] Additionally, this approach is prime for ARIMA (AutoRegressive Integrated
Moving Average) time series forecasting Sikdar et al. [2016].
• Discrete Windows: They offer distinct and clear segmentation of the network’s state at
specific time intervals. This approach is useful for analyzing changes that occur between
separate, non-overlapping periods. Batagelj and Praprotnik [2016]
Mathematical Representation:
The general approach of window-based analysis can be mathematically expressed as:
t+w
(cid:91)
G (t,w) = G(τ)
window
τ=t
where G (t,w) represents the network within the window starting at time t and span-
window
ning w time units. This method offers a versatile approach to capturing temporal dynamics while
managing computational feasibility. Batagelj and Praprotnik [2016]
Figure A.52 illustrates the concept of window-based analysis applied to a stream of network
interactions over continuous time. The set of four blue frames on the left demonstrates overlapping
371Stream of Interactions
1
2
3
4
5
6
Continuous Time start end start end
∆t ∆t ∆t ∆t ∆t ∆t
1 2 3 4 1 2
Figure A.52: Time Windowed Graphs
windows(∆t to∆t ),whereeachwindowcapturesasegmentofthenetworkthatpartiallyoverlaps
1 4
with the next, providing a rolling analysis of network changes. The two blue frames on the right
represent discrete windows (∆t and ∆t ), which showcase non-overlapping segments for a more
1 2
segmentedanalysis. Thisvisualizationaidsincomprehendingtheevolutionofnetworkconnectivity
as it changes over time within both types of windowed segments.
Implications for Temporal Network Analysis
The choice of method—time-aggregation or window-based analysis—depends on the specific goals
of the analysis and the nature of the temporal data. While time-aggregation is suitable for under-
standing overall trends and patterns, window-based analysis provides insights into the evolution of
network dynamics over time. Jiang and Pu [2023]
372A.5.6 Key Concepts in Temporal Network Analysis
Temporal network analysis examines the dynamics of time-ordered structures and this subsection
introduces its fundamental concepts and their relevance.
Temporal Distances and Time-Ordered Paths
Definition: A temporal path in a network is a sequence of edges where each edge’s activation
time is after the previous edge in the sequence. The temporal distance between two nodes is the
minimum time required to travel from one node to the other following temporal paths. Delling and
Wagner [2009]
Mathematical Representation: If P represents a path in a temporal network, and t(P)
represents the time taken to traverse this path, the temporal distance D(u,v) between nodes u and
v is given by:
D(u,v) = min{t(P)|P is a path from u to v}
Significance: Temporalpathsanddistancesarefundamentalforunderstandingtheefficiency
and speed of information or process flow in a network, which can be drastically different from their
static counterparts. Scholtes et al. [2016], George et al. [2007]
( 1 , 3 ) C
B
(
0
,
2
) 0
A
3 3
D
1
E
t t t t
0 1 2 3 2
0
F
Figure A.53: Time-varying Path & Time-Aggregated Path
Figure A.53 illustrates the concept of temporal paths within a network and presents an
373aggregated view of the network over time. On the left, a sequence of frames represents the network
at different time steps (t to t ), with each frame showing the active edges for that time slice. The
0 3
green node signifies the starting node for each timeframe, while the red node marks the end of the
active timeframe. On the right, the Time-Aggregated Path compiles the temporal activity into a
single static graph. This graph depicts the potential paths from the start node (E) to the end node
(C) across the entire observation period. The red edges on the right-hand side graph represent the
sequence of edges taken from node E to node C, with the edge labels indicating the time frames
when each edge is available. This visual representation emphasizes the temporal distance concept,
which accounts for the sequence and timing of edge activations necessary to traverse from node E
to node C.
Temporal Components
Dynamic Connected Components: Connected components in a temporal network can
change over time as edges appear and disappear. Analyzing these components helps in under-
standing the evolving connectivity of the network.
Mathematical Representation: A temporal component at time t can be represented as a
subgraph C(t) ⊆ G(t), where each node in C(t) can reach every other node following temporal
paths within C(t). Casteigts et al. [2012]
Centrality Measures
Time-Independent vs. Time-Dependent Centrality: In temporal networks, centrality
measurescanbetime-independent(measuringcentralityovertheentirenetwork)ortime-dependent
(varying with time). Holme and Saram¨aki [2012]
Example of Time-Dependent Centrality: A simple time-dependent centrality measure
could be the count of a node’s active edges at each time step: Pan and Saram¨aki [2011]
C (v) = |{e ∈ E(t)|v ∈ e}|
t
374Temporal Motifs and Correlation
Temporal Motifs: Motifsintemporalnetworksarerecurringpatternsofinteractionsovertime.
They are critical for understanding repeated structures and behaviors in the network. Kovanen
et al. [2011b]
Temporal Correlation Analysis: This involves studying the dependencies and correlations
between events in the network, crucial for understanding the causality and influence patterns.
Kovanen et al. [2011b]
Community Detection and Dynamics
Evolving Communities: Communitiesintemporalnetworksaregroupsofnodesthatinteract
morefrequentlywitheachotherthanwiththerestofthenetwork,andthesecommunitiescanevolve
over time. Aynaud and Guillaume [2010]
Detection Methods: Methods for detecting communities in temporal networks often involve
adapting static community detection algorithms to consider the temporal dimension, allowing for
the tracking of community evolution. Aynaud and Guillaume [2010]
A.5.7 Detecting Edge Patterns in Temporal Networks
Understanding the patterns and dynamics of edges in temporal networks is crucial for analyzing
how interactions evolve over time. This subsection focuses on the statistical analysis of event times
and the methodologies for link prediction.
Statistical Analysis of Event Times
Inter-Event Times: In temporal networks, the time intervals between consecutive events
(inter-event times) reveal critical information about the network’s dynamics.
375Mathematical Analysis: Theinter-eventtime∆t forthei-theventismathematicallydefined
i
as:
∆t = t −t
i i+1 i
where t denotes the time of the i-th event. Analyzing the set {∆t } helps in identifying patterns
i i
such as periodicity, burstiness, or irregularities in interactions, providing insights into underlying
processes. Holme and Saram¨aki [2012]
Link Prediction
Predicting Future Connections: Link prediction in temporal networks involves forecasting
which connections (edges) are likely to occur in the future based on historical data.
Mathematical Approaches: Variousalgorithmsandmodelsareemployedforlinkprediction.
One common approach is to calculate a probability score for the formation of an edge between two
nodes, based on factors like previous interactions, node similarity, and network topology. For
instance, the probability of an edge forming between nodes u and v at time t can be represented
as:
P (t) = f(historical data,node features,network structure)
uv
where P (t) is the probability of an edge forming between u and v at time t, and f is a function
uv
that incorporates various predictive factors.
Byanalyzingedgepatternsthroughstatisticalmethodsandpredictivemodeling,researchers
can gain a deeper understanding of the temporal dynamics in networks. This insight is vital for
applicationsrangingfromsocialnetworkanalysistopredictivemaintenanceinengineeringsystems.
Lu¨ and Zhou [2011]
A.5.8 Detecting Node Patterns in Temporal Networks
The analysis of node patterns in temporal networks is key to understanding individual behaviors
and roles within the network’s evolving structure. This subsection focuses on network embedding
techniques and anomaly analysis to detect and interpret unusual node behaviors and patterns.
376Network Embedding
Purpose and Techniques: Network embedding in temporal networks aims to map nodes into
a low-dimensional space while preserving temporal dynamics and relationships. This technique
facilitates tasks like visualization, clustering, and machine learning on network data. Hamilton
et al. [2018]
Mathematical Representation: An embedding can be mathematically represented by a
function ϕ that maps each node v to a vector in a d-dimensional space:
ϕ(v) ∈ Rd
The goal is to ensure that the embedding ϕ(v) captures the temporal dynamics and relationships
of node v in the network. Goyal et al. [2020]
Anomaly Analysis
Detecting Unusual Node Behaviors: Anomalyanalysisintemporalnetworksinvolvesiden-
tifying nodes that exhibit behaviors deviating significantly from the norm. This can indicate po-
tential errors, fraud, or significant events. Ranshous et al. [2015]
Mathematical Techniques: Statisticaltestsormachinelearningalgorithmsareusedtodetect
anomalies. For example, a node’s behavior can be modeled as a time series, and anomalies can be
detected based on deviations from predicted patterns:
Anomaly (t) = Detect({v(t′)|t′ < t})
v
where Anomaly (t) indicates whether node v exhibits anomalous behavior at time t, based on its
v
past behaviors. Ranshous et al. [2015]
377A.5.9 Detecting Structural Patterns in Temporal Networks
Analyzingstructuralpatternsintemporalnetworksinvolvesunderstandinghowtheoverallnetwork
structurechangesovertime. Thissubsectionfocusesontemporalcorrelationandhypothesistesting,
as well as change point detection, to identify significant structural changes in the network. Holme
and Saram¨aki [2012]
Temporal Correlation and Hypothesis Testing
Analyzing Correlation Patterns: Temporal correlation analysis involves examining the re-
lationshipsbetweendifferenteventsorinteractionsovertime,helpingtoidentifyunderlyingpatterns
and dependencies in the network structure. Nicosia et al. [2013a]
Null Models for Hypothesis Testing: Null models are used to test hypotheses about
network structures by comparing observed patterns to those expected under random conditions.
Mathematical Representation of Null Models: A null model in a temporal network can
be represented as a randomized version of the network, denoted as G . This model is used to
null
assess the significance of observed structural patterns:
G = Randomize(G )
null observed
where G is the observed temporal network, and G is the randomized version for compar-
observed null
ison.
Change Point Detection
Identifying Structural Changes: Change point detection in temporal networks is the pro-
cess of identifying times at which the network structure undergoes significant changes. This is
important for understanding transitions in network dynamics and for detecting events that lead to
these changes. Sulem et al. [2022]
378Mathematical Techniques for Change Point Detection: Change point detection often
involves statistical methods that identify times when the network’s structural properties, such as
connectivity or centrality measures, change significantly. This can be represented as:
ChangePoint(t) = Detect({G(t′)|t′ ≤ t})
where ChangePoint(t) indicates a significant structural change at time t based on the history of
the network up to that point. Sulem et al. [2022]
A.6 Spatiotemporal Networks
A.6.1 Introduction to Spatiotemporal Networks
Spatiotemporal networks represent a sophisticated integration of spatial and temporal dimensions
in network theory. They are characterized by their ability to model complex systems where both
spatial positioning and temporal evolution play critical roles.
∆t ∆t ∆t ∆t
0 1 2 3
Figure A.54: SpatioTemporal evolution of the network
Defining Spatiotemporal Networks
Aspatiotemporalnetworkcanbedefinedasanetworkwhereboththespatialandtemporalaspects
are essential to its structure and function. This type of network is denoted as:
G = (V,E,P,T) (A.14)
st
379where:
• V is the set of all nodes that may appear at any time in T.
• E represents the set of all edges that appear between nodes in V at any time in T.
• P : V ×T → Rn is a function defining the spatial position of nodes over time.
• T is the temporal domain over which the network is defined.
• V(t) ⊆ V is a function that returns the set of nodes active at time t.
• E(t) ⊆ E is a function that returns the set of edges active between nodes in V(t) at time t.
This definition encapsulates the dual nature of spatiotemporal networks, where both the
spatial location of nodes and their temporal dynamics are fundamental. George and Kim [2012],
Batagelj et al. [2014]
Modeling Systems with Spatial and Temporal Dimensions
Spatiotemporal networks are particularly adept at modeling systems where changes in spatial rela-
tionshipsoccurovertime. Thesignificanceofthesenetworksliesintheirabilitytocapturedynamic
interactions and transformations within the network, offering a more comprehensive understanding
of complex systems.
Complexity and Richness of Spatiotemporal Networks
The integration of spatial and temporal dynamics in spatiotemporal networks introduces a level of
complexity and richness not present in networks considering only one of these dimensions. This
complexity ismanifest inthe network’sevolvingtopology, thechanging spatialrelationships among
nodes, and the temporal variation in network properties.
A.6.2 Mathematical Representation of Spatiotemporal Networks
Whilethefoundationalmodelofspatiotemporalnetworkshasbeenintroduced,adeeperexploration
into the mathematical representation reveals the dynamic nature of these networks. This section
focusesontherepresentationofnodesandedges,highlightingtheirtemporalandspatialvariability.
380Temporal Evolution of Node Attributes
In spatiotemporal networks, nodes can have attributes that change over time. These changes can
be represented as functions of time:
A : V ×T → A (A.15)
V
whereA representsafunctionassigningattributesfromasetAtoeachnodeinV atdiffer-
V
ent times in T. This can include changes in node status, capacity, or other relevant characteristics.
Holme and Saram¨aki [2012]
Dynamic Edges in Spatiotemporal Context
Edges in spatiotemporal networks may also have attributes that vary over time, reflecting the
evolving nature of the relationships between nodes:
A : E ×T → B (A.16)
E
where A is a function that maps each edge in E to a set of attributes B over the tem-
E
poral domain T. This allows the representation of temporal variations in edge properties, such as
connectivity strength or transmission capacity. Holme and Saram¨aki [2012]
Modeling Spatiotemporal Dynamics
The spatiotemporal dynamics of the network can be represented by combining the spatial position-
ing function with the temporal attribute functions:
G = (V,E,P,A ,A ,T) (A.17)
st V E
In this expanded model, A and A add layers of temporal dynamics to the spatial frame-
V E
work defined by P, providing a more comprehensive understanding of the network’s evolution over
time.
381Handling Complexity in Representation
While this mathematical representation provides a detailed view of spatiotemporal networks, it
also underscores the complexity involved in modeling such networks. Each element v in V and
each edge e in E can have a multitude of states or properties that evolve, making the analysis and
computation more challenging.
A.6.3 Dynamics of Spatiotemporal Networks
Spatiotemporal networks are characterized by their dynamic nature, where both spatial and tem-
poral dimensions play a crucial role in shaping the network’s evolution and behavior. This section
explores the key aspects of these dynamics.
Evolution of Network Topology Over Time
In spatiotemporal networks, the topology is not static but evolves over time. This evolution can
be represented by a time-dependent adjacency matrix:


 1, if there is an edge between v
i
and v
j
at time t
A(t) = [a (t)] where a (t) = (A.18)
ij ij

 0, otherwise
Thetemporaldimensionallowsforthemodelingofdynamicprocessessuchastheformation
and dissolution of edges and the emergence or disappearance of nodes.
Temporal Changes in Spatial Relationships
The spatial relationships among nodes in spatiotemporal networks can change over time, affecting
how nodes interact and connect. These changes can be quantified by a time-dependent spatial
positioning function:
P(v ,t) denoting the position of node v at time t (A.19)
i i
382This function allows for the analysis of how the movement or changing spatial proximity of
nodes influences the network structure.
Impact on Network Analysis
The interplay of spatial and temporal dimensions significantly impacts network analysis:
• Time-Dependent Network Measures: Traditional network metrics like centrality, clus-
tering coefficient, and path lengths become time-dependent, requiring temporal data for
accurate analysis.
• Modeling Network Dynamics: Understanding the dynamics of spatiotemporal networks
is crucial for predicting future states and behaviors, particularly in systems where spatial
and temporal factors are closely intertwined.
A.6.4 Computational and Analytical Complexity
The integration of both spatial and temporal dimensions in spatiotemporal networks introduces
significant computational and analytical complexities. This section discusses the nature of these
challenges and the methodologies employed to address them.
Increased Computational Complexity
The complexity of spatiotemporal networks arises from the dynamic nature of their components.
Each node and edge can change over time, leading to a constantly evolving network structure. This
dynamic nature can be represented as:
G (t) = (V(t),E(t),P(t),T) (A.20)
st
where V(t) and E(t) represent the sets of nodes and edges at time t, and P(t) denotes the
spatial positions of nodes at time t. This time-dependent representation implies that traditional
static network analysis techniques are insufficient, as they must be adapted to handle temporal
changes.
383Challenges in Analyzing Spatiotemporal Networks
The primary challenges in analyzing spatiotemporal networks include:
• Data Volume and Variety: The volume of data in spatiotemporal networks is typically
large, especially when considering fine-grained temporal changes.
• Dynamic Topology: The evolving nature of the network topology requires algorithms that
can adapt to changes over time.
• Spatial-Temporal Interdependencies: The interplay between spatial and temporal fac-
tors complicates the analysis, as changes in one dimension can significantly impact the other.
Strategies for Addressing Computational Challenges
To address these challenges, several strategies and methodologies are employed:
• Time-Slicing Techniques: Analyzing the network at discrete time intervals can simplify
the dynamics, allowing for the application of static network analysis techniques at each time
slice.
• Parallel Computing: Leveraging parallel computing architectures to handle the computa-
tional load of processing large spatiotemporal datasets.
• Algorithmic Adaptations: Modifying existing algorithms or developing new ones to ac-
count for the temporal dynamics and spatial dependencies in the network.
A.6.5 Conclusion and Transition to ROBUST Networks
Thissectionconcludesourexplorationofspatiotemporalnetworksandsetsthestageforintroducing
the concept of ROBUST networks. The key points of spatiotemporal networks and their relevance
are summarized, highlighting the complexity and sophistication that the integration of spatial and
temporal dimensions brings to network analysis.
384Summary of Spatiotemporal Networks
Spatiotemporal networks, as a fusion of spatial and temporal dynamics, offer a comprehensive
framework for understanding systems that evolve over time and space. Key points include:
• Hybrid Nature: The integration of spatial layouts with temporal changes, encapsulating
the dynamics of real-world systems.
• MathematicalComplexity: Theintricaterepresentationthatcombinesspatialpositioning
with temporal attributes, reflecting the evolving nature of the networks.
• Computational Challenges: Addressing the increased complexity in analyzing these net-
works, due to the dual aspects of space and time.
Importance in Understanding ROBUST Networks
Understanding the principles of spatiotemporal networks is crucial for delving into the study of
ROBUST networks:
• Foundation for Advanced Concepts: The concepts and methodologies developed in the
context of spatiotemporal networks lay the groundwork for understanding the more nuanced
and specialized ROBUST networks.
• Complexity and Dynamics: The insights gained from spatiotemporal networks about
handlingcomplexityanddynamicchangesaredirectlyapplicabletotheanalysisofROBUST
networks.
Transition to ROBUST Networks
As we transition to the discussion of ROBUST networks, it is evident that the thorough under-
standing of spatiotemporal networks provides a solid foundation for appreciating the intricacies
involved in ROBUST networks. The subsequent sections will delve into the unique characteris-
tics of ROBUST networks, building upon the theoretical framework established in the context of
spatiotemporal networks.
385Appendix B
ROBUST Dynamics
In the ROBUST Network, entities are grouped into two distinct sets, embodying the classic
observer-observable pattern. However, upon deeper inspection, these asymmetrical relationships
betweennodesetsmayvarysignificantly,leadingtotheidentificationofseveralsubcategories. Each
subcategory is defined by its specific bipartite dynamics, which impacts the node interactions, link
generation,andnodeplacement. Thissectionaimstodissectthesesubcategoriesindepth,assessing
their influence on the network’s design and operational strategies, thereby laying the foundation
for a thorough exploration of differing observer-observable analytics and considerations.
Observables Observers
event 1 sensor 1
?
event 2 sensor 2
. .
. .
. .
event M sensor N
Figure B.1: Identifying the Various Bipartite Relationships
B.1 Observer-Observable Dynamics
The observer-observable relationship forms the foundational dynamic of the ROBUST Network. In
this interaction, observer nodes are tasked with the crucial role of monitoring and collecting data
from the observable events. Key elements of this relationship include:
386• Spatial and Temporal Proximity: The effectiveness of observation is heavily influenced
by the spatial and temporal proximity of the observers to the events. Observers must be
strategically placed and timed to capture relevant data accurately.
Event
Sensor
Figure B.2: Sensor and events in and out of range across three timesteps.
• Adaptability and Continuous Observation: Observers are required to continuously
monitor their environment. Additionally, they must be adaptable and capable of adjusting
in response to changes in the observable landscape. This ongoing observation is to track
dynamic events or changes over time. This ongoing observation is key to identifying long-
term patterns and trends and the adaptability for maximizing the relevance of the data
collected.
Event
Sensor
Figure B.3: Sensor adapts position for events across three frames.
• Data Processing and Analysis: Beyond mere observation, the observer nodes are also
responsible for the initial processing and analysis of the collected data. This step is vital for
transforming raw observational data into actionable insights.
387Observe
Adapt Process
Analyze
Figure B.4: Finite State Machine for the Responsive Observer Cycle.
The observer-observable relationship drives the network’s functionality and forms the basis
of its various applications. These are common properties that are shared among all subcategories.
B.2 Identifying Subcategories by Behavior
The ROBUST network framework uniquely addresses the complexities of multiagent systems by
focusing on the intricate dynamics between observers and observables. This chapter explores the
nuances of agent interactions—ranging from the selfish to collaborative behaviors within unipartite
dynamics, and in bipartite dynamics, the interplay of between different nodes ranging from the
competitivetothecooperative. Byexaminingthedynamicsbetweennodes,wecanapplyROBUST
to a variety of domains, from biological to physical to virtual.
B.3 Unipartite Relationships
Unipartite relationships within the ROBUST network framework delve into the interactions among
similar nodes—either observers or observables—within the same partition. These relationships
are pivotal in shaping the network’s dynamics, influencing its stability, efficiency, and overall be-
havior. By understanding the inherent motivations and behaviors of nodes, architects can design
and manage networks more effectively, preventing destructive patterns and fostering constructive
interactions.
388B.3.1 Selfish Dynamics
Inscenarioswhereindividualagents(nodes)actintheirself-interest, thenetworkfacesauniqueset
of challenges. Selfish dynamics emerge within partitions where nodes of the same type prioritize
their own utility above the collective well-being of the network. This behavior is particularly
prevalent in competitive settings or when resources are limited, and it directly impacts how nodes
within the same group interact.
Example: Clients in a Restaurant
Clients are inherently selfish, prioritizing their own dining experience. They expect prompt service,
desirable tables, and may exhibit impatience or demanding behavior. This focus on individual
needs can lead them to overlook the impact their actions (like lingering after a meal) have on wait
times for others and the overall strain on waiters.
Selfish dynamics often manifest as:
• Resource Hoarding: Nodes may accumulate or over-consume shared resources, depriving
others within their partition.
• Strategic Non-cooperation: Nodesmightwithholdinformation,support,orparticipation,
hindering collective efforts and overall network performance.
Consequences
Unchecked selfish dynamics can destabilize the network, leading to inefficiencies, conflicts, and a
decline in the system’s overall health.
ROBUST Design
Understanding these dynamics is crucial for network architects. By recognizing the potential for
selfish behavior within node partitions, systems can be designed with mechanisms to mitigate
negative impacts and promote healthier long-term outcomes
389B.3.2 Collaborative Dynamics
Collaborative dynamics emerge within partitions where agents (nodes) of the same type work
together towards shared goals, often leading to greater success than if they acted individually.
This behavior fosters a supportive network environment, enhancing efficiency, resilience, and the
system’s overall well-being. Collaborative dynamics are particularly common when success hinges
on collective efforts or where resources are best utilized through sharing.
Example: Waiters in a Restaurant
Waitersoftenexhibitcollaborativedynamicstoensureasmoothdiningexperienceforallcustomers.
They may:
• Share Workload: Communicate effectively, cover for each other during busy periods, and
balance table assignments fairly.
• Pool Resources: Share information about table availability, customer preferences, or po-
tential issues that could affect service.
Collaborative dynamics often manifest as:
• Resource Sharing: Nodes pool resources, knowledge, or skills, benefiting the entire group
and expanding what’s individually achievable.
• Joint Problem-Solving: Nodes work together to overcome complex challenges, often lead-
ing to more innovative and effective solutions than any individual could achieve.
Benefits
Collaborative dynamics promote efficiency, fairness, and positive experiences within the network.
In the restaurant context, this translates to happy customers, smoother operations, and greater
overall success for the establishment.
390ROBUST Design
Network architects can encourage collaborative dynamics. This is particularly important when
selfish tendencies may be present, emphasizing the long-term benefits outweigh potential short-
term sacrifices. Strategies include:
• Communication Protocols: Facilitateinformationsharingandcoordinationamongnodes,
reducing misunderstandings and building trust.
• Incentive Structures: Reward collective achievements or tie individual success to the well-
being of the network, fostering an “all for one” mentality.
B.4 Bipartite Relationships
In the ROBUST network framework, bipartite relationships form the core of interactions between
distinct node partitions—observers and observables. These relationships are pivotal, shaping how
the network functions, evolves, and adapts to challenges. Within this context, bipartite dynamics
can be broadly classified into neutral, cooperative, or competitive, each influencing the network’s
structure and behavior in unique ways. This section provides an overview of cooperative and
competitive dynamics, setting the stage for a deeper exploration in subsequent chapters.
B.4.1 Cooperative Dynamics
Cooperative dynamics in bipartite relationships occur when agents from different groups work
together towards shared goals, leading to mutually beneficial outcomes. This form of interaction is
characterized by a symbiotic relationship where the success of one agent directly contributes to the
success of the other. Cooperation can manifest in various forms, including resource sharing, joint
problem-solving, and collaborative innovation.
In cooperative dynamics, observers and observables engage in a positive-sum game where
the combined effort results in greater achievements than what could be accomplished individually.
For instance, in a client-server model, the server (observer) provides services or data that the client
(observable) needs, enhancing the user experience and creating value for both parties.
391Example: Waiter - Client Relationship
Inarestaurantsetting,whileclientsmayexhibitselfishbehaviortowardsotherclientsbyprioritizing
theirowndiningexperience,theyestablishacooperativerelationshipwithwaitersthatsignificantly
enhances the dining process for all parties involved. Clients demonstrate patience by waiting to be
seated and served, adhere to the restaurant’s operational protocols such as making reservations,
and communicate their needs clearly to facilitate efficient service. Waiters are cooperative with
clients by being attentive and responsive, tailoring their service to meet the specific needs and
preferences of each client. This reciprocal understanding between clients and waiters leads to a
mutual coordination where clients respect the waiters’ efforts contributing to a more efficient and
pleasant dining experience overall.
B.4.2 Competitive Dynamics
Competitive dynamics describe scenarios where the relationship between observers and observables
is characterized by rivalry, opposition, or conflict. In these dynamics, the parties may compete for
resources, influence, or dominance within the network. Unlike cooperative dynamics, competitive
interactions often resemble a zero-sum game, where the gain of one party equates to the loss of
another.
Competition can drive innovation, efficiency, and evolution within the network as agents
strive to outperform their rivals. However, unchecked competition can also lead to conflicts, in-
efficiencies, and the potential for destructive behaviors. Recognizing and managing competitive
dynamics is crucial for maintaining balance and ensuring the network’s long-term viability and
growth.
In appendix chapters, we will explore competitive dynamics in depth, examining how they
manifest across different scenarios and strategies for mitigating negative impacts while harnessing
competition’s positive aspects for network improvement.
392Example: Predator-Prey Relationship
In a natural ecosystem, predators (observers) and prey (observables) exhibit a fundamentally ad-
versarial relationship driven by survival. Prey animals prioritize their survival, employing tactics
to evade. Predators, focused on obtaining food, actively seek and pursue prey, refining their hunt-
ing strategies to increase their chances of success. This dynamic is inherently competitive, as the
survival of one type of agent (predator) directly depends on the failure of the other (prey).
B.4.3 Conclusion
Through understanding both cooperative and competitive bipartite dynamics, the ROBUST net-
work framework is flexible to design and steer multiagent systems toward desired outcomes. See
Appendix for more bipartite dynamics.
393Appendix C
Collaborative Bipartite Dynamics
Thischapterexploresthecollaborativedynamicsexhibitedbymorespecializedsubcategoriesofthe
base observer-observable model and highlights how varied bipartite relationships manifest within
the ROBUST network. This chapter details interactions between roles: Client-Server, Waiter-
Client, Manager-Worker and Guard-Citizen relationships.
C.1 Server-Client Dynamics
This subsection explores the server-client model within the ROBUST Network, advancing from
the basic observer-observable relationship. The client-initiated request-response cycle reshapes
networkconfigurationandoptimization, fundamentallyalteringnetworkanalysismethods. Finally,
identifying server-client interactions influences the broader network properties.
Definition of a Server A server is an entity designed to respond to requests from clients. It
operates as an observer by waiting to process and execute incoming requests, and subsequently
deliver services or responses. Servers function within operational constraints, such as handling a
maximum number of concurrent clients. Their effectiveness and efficiency in service delivery are
significantly influenced by their strategic spatiotemporal placement within the network.
394Definition of a Client A client acts as an initiator in the system, generating requests directed
towards servers. Reflecting the characteristics of observables, clients articulate their service or
information needs to trigger the servers’ response mechanisms.
C.1.1 Examples of Server-Client Relationships
To illustrate the server-client dynamics in various contexts, this subsection presents real-world and
digital examples.
Grocery Store Example In a grocery store, employees act as servers, and shoppers act as
clients. Shoppers initiate requests for assistance, information, or services, triggering employees to
respondaccordingly. Thisinteractionexemplifiestheserver-clientdynamicwithinaphysicalspace.
Importantly, certain sections of the store, like the deli, bakery, or checkout lines, often experience
higher demand for service. Moreover, demand varies significantly throughout the day, with peak
times such asevenings or weekends requiringmore staff tomanage the influx of shoppers efficiently.
Thisunevendistributionofrequestsandtemporalvariationinshopperactivityhighlightthecritical
need for strategic server placement and the dynamic scheduling of resources (employees) to ensure
service efficiency and shopper satisfaction at all times.
Object-Oriented Programming Example Inobject-orientedprogramming, theconceptof
servers and clients is mirrored through objects interacting within a software system. Here, ‘servers’
are objects that offer functionalities or services, and ‘clients’ are objects that request these services.
This interaction creates a server-client dynamic that is fundamental to the system’s architecture,
similar to relationships seen in broader network models.
Spatial considerations emerge from how these objects are interdependent, influencing the
ease with which a client object can utilize a server’s services. The term ”distance” metaphorically
describes the number of steps or the complexity a client object must overcome to reach a server
object, directly affecting the system’s design for modularity, efficiency, and maintainability. To
minimize the need for clients to understand complex dependencies — effectively bringing servers
“closer” to clients — software engineers often utilize design principles such as the Factory pattern.
395This approach strategically positions a new ’server’ within the architecture to simplify access to
services, analogous to optimizing the layout of a network for better service reachability. This
method underlines the importance of spatial and temporal planning even in abstract, non-physical
environments, ensuring that systems remain adaptable and maintainable while meeting clients’
needs efficiently.
C.1.2 Node Interactions: Request-Response Cycle
The client-driven request-response cycle, as shown in Figure C.1, highlights the server-client node
interaction, requiring network configurations that enable quick and dependable service exchanges.
In such a relationship, servers should be positioned in locations to maximize their engagement with
clients at the times of requests. This strategic positioning directly impacts the efficiency of service
delivery and the network’s overall performance.
Request
Client Server
(observable) (observer)
Response
Figure C.1: Finite State Machine showing the request-response cycle.
Thecycleisinitiatedwitharequestfromtheclient(observables), withtheserver(observer)
processing and satisfying the request, reflecting the observer’s role in responding to observables.
This server-client exchange introduces a bottleneck regarding the number of clients a server can
handle at any given time. It underscores the importance of network optimization strategies that
include load balancing, prioritization of requests, and dynamic resource allocation to mitigate the
effects of this bottleneck. Efficient handling of this cycle, characterized by minimal response times
and high-quality responses, directly contributes to enhanced service delivery, client satisfaction,
and network efficiency.
396C.1.3 Link Generation and Constraints
In the server-client model, link generation between servers and clients is influenced by two crit-
ical factors: the server’s maximum degree (max degree) and the temporal nature of links. The
max degree of a server node represents the maximum number of concurrent client connections it
can handle, a constraint that directly impacts network topology and service delivery strategies.
Server Max Degree The concept of max degree introduces a capacity limitation for servers,
necessitating network optimization techniques that ensure an equitable and efficient distribution of
service requests across the network. This constraint requires:
• Load Balancing: Distributing client requests evenly across servers to prevent overloading
and ensure timely responses.
• Priority Queuing: Implementing prioritization mechanisms for handling requests based on
criteria such as urgency, client importance, or request complexity.
Temporal Nature of Links Links in the server-client model are inherently temporal, existing
for the duration required to complete the request-response cycle. This transient characteristic of
links emphasizes the network’s dynamic adaptability, with connections being formed and dissolved
based on real-time service demands. Implications include:
• Dynamic Network Topology: The network’s structure continuously evolves, reflecting
the changing patterns of client-server interactions over time.
• Resource Allocation Strategies: Adaptive resource allocation becomes essential, with
servers dynamically adjusting their available capacity to accommodate incoming requests
efficiently.
C.1.4 Implications for Network Optimization and Analysis
The max degree limitation and the temporal nature of links necessitate sophisticated network op-
timization and analysis approaches. Strategies must account for these dynamic and constrained
aspects of the network, focusing on:
397• Optimizing Server Utilization: Ensuring servers operate within their capacity limits
while minimizing response times and maximizing service quality.
• Analyzing Temporal Patterns: Understanding the temporal dynamics of client requests
to forecast demand and adjust server configurations preemptively.
Incorporating considerations of server max degree and the temporal characteristics of links
enriches the network’s design and operational framework. These factors underscore the complexity
of managing server-client interactions within the ROBUST Network, highlighting the need for
adaptive and responsive network strategies that can accommodate the dynamic nature of service
requests and delivery.
C.1.5 Network Optimization
Optimization focuses on enhancing request-response efficiency, leveraging spatiotemporal consider-
ations to ensure optimal server positioning and timing to meet client demands. Strategies include
strategic server placement and adaptive service provision, aiming to minimize response times and
adapt to client request patterns.
C.1.6 Spatiotemporal Considerations
The strategic placement and scheduling of servers are crucial for optimizing service delivery, guided
by the following considerations:
• Spatial Domain: Ensuring service interactions occur within minimized distances or laten-
cies to enhance service immediacy and accessibility for clients.
• Temporal Blocks: Allocating service provisions into defined time blocks, allowing for the
agile reallocation of server resources in response to fluctuating demand and availability.
398C.1.7 Efficiency Metrics
Service delivery efficiency is quantitatively assessed through metrics designed to capture the net-
work’s performance:
Efficiency = f(Coverage Ratio,Average Response Time,Load Distribution) (C.1)
Key metrics include:
• Coverage Ratio: The fraction of clients that are within optimal reach of server services.
• Average Response Time: The mean duration from client request initiation to server
response.
• Load Distribution: The equitable distribution of service demands across the available
server resources.
C.1.8 Server Placement Strategies
In optimizing the server-client dynamic within the network, traditional considerations of client
density are expanded to include the activity levels of clients and the potential influence of certain
regions on generating service requests. This nuanced approach to server placement emphasizes not
just physical proximity to a large number of clients but strategic proximity to highly active or
influential client clusters.
Identifying High-Activity and Influential Regions The network’s optimization strate-
gies incorporate advanced analytics to:
• Identify clients or regions with high service request rates, indicating areas where servers can
be most impactful in terms of response efficiency and satisfaction.
• Analyze patterns of service requests to determine regions that, due to various factors, might
influence an increase in service requests, allowing for proactive server placement to manage
anticipated demand.
399C.2 Waiter-Client Dynamics
This subsection introduces the waiter-client model. In this relationship, the waiter initiates inter-
actions in a prompt-response cycle. Such a dynamic impacts the waiter nodes’ ability to interact
with clients, which must be accounted for when determining optimal spatiotemporal placements in
a ROBUST network.
Definition of a Waiter A waiter represents a specialized observer-type who initiates inter-
actions with a recipient to offer services, recommendations, or assistance. This role is defined by
ongoing engagement, where the provider checks on the needs of the assigned recipient. The ef-
fectiveness of a waiter is measured by their expediency in providing for recipients and managing
multipleinteractionsacrossmultipleclientsefficiently. Theirabilitytoreducelagordelayinservice
is dependent on spatiotemporal planning.
Definition of a Client A client represents a specialized observable-type who waits for the
waiter to prompt them before making any requests. Clients are decision-making agents based on
options the waiter provides and have some terminating goal or task that leads to their ending the
interaction.
C.2.1 Examples of Waiter-Client Relationships
Restaurant Example In a restaurant, waiters are assigned to specific zones or tables, mir-
roring the spatial partitioning essential for ROBUST modeling. Clients enter this environment
seeking service. The relationship initiates with the waiter, once the client enters by prompting
them where to sit and maintains this engagement throughout the dining experience. The contin-
uous interaction of the waiter-client dynamic distinguishes it from the transactional server-client
model, with the waiter’s capacity to serve effectively constrained by the number of clients they
can attentively monitor. This introduces a critical bottleneck, emphasizing the need for strategic
waiter allocation and scheduling based on client flow and dining peak times. Additionally, for large
groups, multiple waiters may need to be flexed onto a single table to ensure efficient service deliv-
ery without compromising quality. Optimizing this distribution involves both spatial (zoning) and
400temporal (scheduling) considerations to ensure each waiter maximizes their effectiveness without
compromising service quality.
C.2.2 Node Interactions: Prompt-Response Cycle
The prompt-response cycle defines the waiter-client relationship, with waiters (observers) initiating
interactions with clients (observables) through prompting. This cycle begins with the waiter’s
initial engagement and is sustained throughout the client’s responses, influencing the sequence of
service actions.
Prompt
Waiter Client
(observer) (observable)
Response
Figure C.2: Finite State Machine showing the prompt-response cycle.
This interaction model introduces a capacity constraint on the number of clients a waiter
can effectively manage, creating a bottleneck that impacts service delivery efficiency and client
satisfaction. Addressing this bottleneck requires strategic placement and scheduling of waiters to
balanceservicedemandandensurehigh-quality,personalizedservice. Thisoptimizationemphasizes
the need for careful consideration of spatial (waiter zoning) and temporal (scheduling) elements,
aligning with ROBUST modeling principles to enhance both service quality and operational effi-
ciency.
C.2.3 Link Generation and Constraints
In the waiter-client model, link generation between waiters and clients is influenced by two crit-
ical factors: the waiter’s service capacity (service capacity) and the temporal nature of service
interactions. The service capacity of a waiter represents the maximum number of clients they can
effectively serve at once, a constraint that directly impacts service delivery and client satisfaction
401strategies.
Waiter Service Capacity The concept of service capacity introduces a capacity limitation
for waiters, necessitating optimization techniques to ensure a balanced and efficient distribution of
client interactions across the service area. This constraint necessitates:
• Service Balancing: Distributing client interactions evenly across waiters to prevent service
delays and ensure minimal lag times.
• Priority Service: Implementing prioritization mechanisms for managing service requests
based on criteria such as service complexity, client needs, or special requests.
1 1 4
2 2 5
7 Waiter 3 Waiter 1 3 Waiter 2 6
6 4 7
5
Figure C.3: Left: A waiter node with a max degree of 5 can only connect to 5 clients, leaving
clients 6 and 7 disconnected. Right: Load balancing clients across two waiters, ensuring all
clients are connected.
Temporal Nature of Links Links in the waiter-client model are inherently temporal, ex-
isting for the duration required to complete the service cycle. This characteristic emphasizes the
adaptability of service delivery, with interactions being initiated and concluded based on real-time
service demands. Implications include:
• Dynamic Service Structure: The service structure continuously evolves, reflecting the
changing patterns of waiter-client interactions over time.
• Adaptive Service Strategies: Adaptive service strategies become essential, with waiters
dynamically adjusting their service approach to efficiently accommodate client needs.
402Implications for Network Optimization and Analysis
The service capacity limitation and the temporal nature of interactions necessitate sophisticated
service optimization and analysis approaches. Strategies must account for these dynamic and
constrained aspects of the service model, focusing on:
• Maximizing Waiter Utilization: Ensuring waiters operate within their capacity limits
while minimizing wait times and maximizing service quality.
• Analyzing Service Patterns: Understanding the temporal dynamics of client interactions
to forecast demand and adjust waiter assignments preemptively.
Incorporating considerations of waiter service capacity and the temporal characteristics of
service interactions enriches the service model’s design and operational framework. These factors
underscore the complexity of managing waiter-client interactions within the service area, highlight-
ing the need for adaptive and responsive service strategies that can accommodate the dynamic
nature of client needs and expectations.
C.2.4 Network Optimization
Optimization focuses on enhancing the efficiency of the prompt-response cycle, leveraging spa-
tiotemporal considerations to ensure optimal waiter placement and timing to meet client needs.
Strategies include strategic waiter placement and adaptive service provision, aiming to minimize
wait times and adapt to client interaction patterns.
C.2.5 Spatiotemporal Considerations
The strategic placement and scheduling of waiters are crucial for optimizing service delivery,and
are guided by the following considerations:
• Spatial Domain: Ensuring service interactions occur within minimized distances or laten-
cies enhances service immediacy and personalization for clients.
• Temporal Blocks: Allocatingserviceprovisionsintodefinedtimeblocksallowsfortheagile
reallocation of waiter resources in response to fluctuating demand and availability.
403C.2.6 Efficiency Metrics
Service delivery efficiency is quantitatively assessed through metrics designed to capture the service
model’s performance:
Service Efficiency = f(Coverage Ratio,Average Service Time,Client Satisfaction) (C.2)
Key metrics include:
• Coverage Ratio: The fraction of clients that receive timely and personalized service.
• Average Service Time: The mean duration from service initiation to completion.
• Client Satisfaction: The quality of service perceived by clients, which is influenced by
service speed, personalization, and waiter responsiveness.
C.2.7 Waiter Placement Strategies
Optimizing the waiter-client dynamic within the service area involves considerations not just of
client density but also of the activity levels of clients and the potential influence of specific zones on
service demand. This approach to waiter placement emphasizes not only physical proximity to a
large number of clients but strategic proximity to areas with high activity or special service needs.
Identifying High-Activity and Service Demand Zones Service optimization strategies
incorporate analytics to:
• Identify zones or times with high service demand, indicating areas where waiters can be most
impactful in terms of service efficiency and client satisfaction.
• Analyze patterns of service interactions to determine zones that might experience a surge in
service demand, allowing for proactive waiter placement to manage anticipated needs.
404C.3 Manager-Worker Dynamics
This section delves into the Manager-Worker model within the ROBUST Network, building upon
thefoundationalobserver-observabledynamic. Itfocusesonoptimizingtheallocationandexecution
of tasks within a structured hierarchy, aiming to maximize network efficiency and performance.
Definition of a Manager A manager operates as a specialized observer within the network,
and is responsible for overseeing worker nodes, allocating tasks, and ensuring optimal performance.
The manager’s capacity to effectively manage and engage workers is constrained by a finite band-
width, necessitating strategic planning and delegation to maximize productivity and worker en-
gagement. The efficiency of a manager is significantly influenced by their ability to dynamically
allocate tasks, manage worker capacities, and adjust strategies based on real-time feedback.
Definition of a Worker A worker functions as an observable within the network, executing
tasks allocated by the manager. Workers initiate communication with managers to request re-
sources, report progress, or seek guidance, triggering managerial responses. The worker’s role is
characterized by their responsiveness to managerial directives and their contribution to the net-
work’s collective objectives.
C.3.1 Examples of Manager-Worker Dynamics
Corporate Setting Example In a corporate environment, managers and workers engage
in a continuous cycle of task delegation and execution. Managers assess project needs, worker
capabilities, and resource availability to distribute tasks effectively. Workers, in turn, undertake
these tasks, providing updates and feedback that inform subsequent managerial decisions. This
dynamic highlights the necessity for effective communication, trust, and a shared commitment to
achieving organizational goals.
Manufacturing Example In a manufacturing context, managers allocate production tasks to
workers based on production goals, worker expertise, and machinery availability. Workers execute
these tasks, with the efficiency of production lines heavily dependent on the managers’ ability to
405balance workloads and respond to production challenges. This setting exemplifies the manager-
worker dynamic in a tangible operational environment.
C.3.2 Node Interactions: Task Allocation and Execution Cycle
The Manager-Worker relationship is characterized by a task allocation and execution cycle, where
managers delegate tasks and workers execute them. This cycle necessitates a network configuration
that supports efficient task distribution and execution, with a focus on minimizing idle times and
maximizing worker engagement.
Task Allocation
Manager Worker
(observer) (observable)
Execution Feedback
Figure C.4: Finite State Machine showing the task allocation and execution cycle.
Thisinteractionmodelintroducesacapacityconstraintonthenumberofworkersamanager
can effectively oversee, creating a bottleneck that impacts task execution efficiency and worker
satisfaction. Addressing this bottleneck requires strategic manager placement and task scheduling
to ensure a balanced workload and effective worker engagement.
C.3.3 Optimization Strategies for Manager-Worker Interactions
Optimization strategies for the Manager-Worker dynamic focus on enhancing the task allocation
and execution cycle’s efficiency, aiming to maximize worker productivity while ensuring managers
effectively communicate expectations and resources.
• Dynamic Task Allocation: Managers dynamically adjust task assignments based on
worker feedback, task complexity, and completion rates to balance workloads and maintain
high engagement.
406• Worker Activation Strategies: Techniques are implemented to quickly engage idle or
at-risk workers, such as diversified task assignments and motivational incentives.
• Efficiency Metrics: Metrics to assess the effectiveness of the task allocation and execution
cycle are developed, focusing on task completion rates, worker engagement levels, and active
versus idle worker ratios.
• Collaborative Management: Managers collaborate in planning and configuring task al-
locations, sharing best practices and optimizing strategies network-wide to ensure consistent
worker activity and reduce execution bottlenecks.
C.3.4 Network Optimization
Optimization of the Manager-Worker dynamic emphasizes maximizing task execution efficiency
while ensuring managers can effectively oversee and guide workers. Key to this optimization is
the strategic scheduling of tasks and the allocation of managerial resources to align with worker
capabilities and availability.
C.3.5 Spatiotemporal Considerations in Task Allocation
The strategic scheduling and distribution of tasks are guided by the need to minimize idle times
and optimize worker engagement, with a focus on:
• Minimizing Response Times: Ensuring tasks are allocated to reduce the time between
assignment and execution, enhancing task completion efficiency.
• Optimizing Task Scheduling: Aligning task assignments with worker availability and
peak productivity periods to facilitate efficient task execution.
C.3.6 Conclusion
The Manager-Worker dynamic within the ROBUST network underscores the importance of strate-
gictaskallocation,effectivemanagerialoversight,andtheimplementationofoptimizationstrategies
407to maximize worker engagement and productivity. Through careful planning, dynamic task alloca-
tion, and fostering a collaborative environment, managers can guide their teams towards achieving
strategic objectives, thereby enhancing the overall performance and efficiency of the network.
C.4 Guard-Citizen Relationship
The Guard-Citizen Relationship within a ROBUST network offers a unique perspective on the
dynamics of protection and freedom within a defined spatial domain. This relationship can be
distinguishedfromtheHide-SeekandPredator-Preydynamicsbyitsfocusoncommunalsafetyand
individual freedom, as well as the proactive and reactive roles of guards (observers) and citizens
(observables). Here’s how this relationship can be modeled:
C.4.1 Operational Framework
In the Guard-Citizen dynamic, guards are tasked with overseeing the safety and freedom of move-
ment of citizens within a spatial domain, such as a community or digital network. Their primary
goals include maximizing the citizens’ ability to roam freely while identifying and neutralizing
threats from rogue agents.
Definition of a Guard:
Guards are observers within the network, responsible for maintaining order, ensuring the safety of
citizens, and responding to incidents. They employ surveillance, pattern recognition, and interven-
tion strategies to protect citizens from potential harm.
Definition of a Citizen:
Citizens are observables that engage in regular activities within the network’s domain. While most
citizens contribute positively to the community, a subset may act as rogue agents, posing threats
to others.
408C.4.2 Node Interactions: Surveillance and Intervention Cycle
The Guard-Citizen dynamic is characterized by a cycle of surveillance and intervention, where
guards continuously monitor citizen activities to detect abnormal or threatening behaviors. Upon
identifying a potential threat, guards intervene to isolate the rogue citizen and mitigate any harm,
ensuring the continued freedom and safety of the community.
C.4.3 Strategies for Maximizing Freedom and Safety
To effectively manage the Guard-Citizen relationship, strategies must be developed to balance the
dual objectives of maximizing citizen freedom and ensuring communal safety:
• Surveillance Optimization: Implements sophisticated surveillance systems that respect
citizens’ privacy while effectively identifying potential threats.
• Rapid Response Protocols: Establishes protocols for quick intervention when rogue be-
havior is detected, minimizing harm to the community.
• Community Engagement: Encourages‘ citizen participation in safety measures, such as
reporting suspicious activities or participating in community watch programs.
C.4.4 Spatiotemporal Considerations
The efficiency of the Guard-Citizen relationship is influenced by both spatial and temporal factors:
• Spatial Coverage: Ensuring comprehensive surveillance and protection coverage across the
entire domain to prevent areas of vulnerability.
• Temporal Responsiveness: The speed at which guards can respond to incidents is crucial
for effective threat mitigation and maintaining public trust.
C.4.5 Efficiency Metrics
Efficiency in the Guard-Citizen dynamic can be measured through metrics such as:
409Incident Response Time:
The average time taken by guards to respond to and resolve incidents.
Citizen Satisfaction:
Measures of citizen satisfaction with safety measures and freedom of movement can provide insight
into the relationship’s effectiveness.
Threat Neutralization Rate:
The percentage of identified threats that are successfully neutralized by the guards.
410Appendix D
Competitive Bipartite Dynamics
This chapter explores the competitive dynamics, which stand in stark contrast to the relationships
inthepreviouschapter,butsimilarlybuildsuponthebaseobserver-observablemodel. Thischapter
highlights how different competitive bipartite relationships may be within the ROBUST network.
This chapter details interactions between roles: Invader-Defender, Predator-Prey, Hide-Seek, Host-
Parasite relationships.
D.1 Defender-Invader Dynamics
In the context of protecting spatial areas and assets, the Defender-Invader relationship is central
to strategies that guard against unauthorized access or harm. This section dives into the dynamics
of this relationship, exploring operational frameworks, defense optimization strategies, and the
influence of spatial and temporal factors on defense efficacy.
411Figure D.1: Invader-Defender relationship
D.1.1 Operational Framework
The Defender-Invader dynamic is underscored by defenders’ proactive strategies to safeguard spe-
cific regions or assets from invaders aiming to compromise, breach, or exploit them. Defenders,
acting as specialized observers, employ detection, interception, and neutralization tactics against
invaders.
Definition of a Defender Adefenderistaskedwiththeprotectionofaspatialarea,utilizinga
dual-layer strategy that encompasses both the anticipation of invader actions and their subsequent
interception. Their effectiveness is measured by their ability to predict potential breaches and
implement effective countermeasures to prevent invader success.
Definition of an Invader An invader seeks to penetrate defined protective barriers with
the goal of disruption or unauthorized access. The unpredictable and complex nature of invader
strategies demands a defense approach that is both dynamic and adaptable.
412D.1.2 Node Interactions: Prediction and Interception Cycle
At the heart of the Defender-Invader relationship is a continuous cycle of prediction and inter-
ception. Defenders leverage predictive analytics to forecast invader movements and strategize the
allocation of defensive resources for effective interception.
D.1.3 Strategic Defense Optimization
Optimization strategies for defense involve developing and executing algorithms that enhance de-
fenders’ capability to efficiently allocate resources, ensuring broad coverage and high rates of in-
terception. This process includes real-time online convex programming and scalable hierarchical
iterative methods.
D.1.4 Spatiotemporal Considerations
Effective defense against invaders hinges on strategic considerations of both space and time:
SpatialOptimization: Identifiestheoptimaldeploymentofdefenderstocoverpotentialinva-
sion paths and safeguard critical assets. Temporal Adaptability: Involves the real-time adjustment
of defense strategies in response to evolving invader tactics and behaviors.
D.1.5 Efficiency Metrics
The efficiency of defense strategies in the Defender-Invader dynamic is crucial for maintaining the
security andfunctionality ofthe protectedspatial area. Thisefficiency isquantifiedthroughseveral
key metrics:
Interception Rate: This metric measures the percentage of successfully intercepted invaders
outofthetotalnumberofattemptedbreaches. Ahigherinterceptionrateindicatesamoreeffective
defense strategy.
Number of Interceptions
Interception Rate =
Total Number of Invasion Attempts
413Time to Neutralize Threats: This metric assesses the average time taken by defenders to
detect, engage, and neutralize invaders from the moment of detection. Shorter times suggest a
more responsive and efficient defense system.
(cid:80)
Time Taken to Neutralize Each Invader
Time to Neutralize Threats =
Number of Neutralized Invaders
Integrity of the Protected Area Post-Interception: Evaluates the condition of the
protected spatial area after defense actions have been taken. This includes assessing any damages
orbreachesthatoccurreddespiteinterceptionefforts. Highintegritylevelspost-interceptionsignify
minimal damage and effective containment of threats.
Uncompromised Area
Integrity =
Total Protected Area
Resource Efficiency: Analyzes how effectively the defenders utilize their available resources,
including personnel, technology, and energy, to maximize interception rates and minimize response
times.
Number of Successful Interceptions
Resource Efficiency =
Resources Expended
Adaptability Score: Reflects the defense system’s ability to adapt to new or evolving threats
overtime. Thisincludesincorporatinglessonslearnedfrompastinvasionstoimprovefuturedefense
responses.
Number of Adaptations to New Threats
Adaptability Score =
Total Encountered Threats
These metrics together provide a comprehensive overview of a defense strategy’s effec-
tiveness, allowing for targeted improvements and adjustments to enhance overall security against
invader threats.
414D.1.6 Conclusion
TheDefender-Invaderrelationshipispivotalinthecontextofspatialprotection, embodyingtheon-
going struggle between safeguarding assets and the challenge of invasive threats. Through strategic
optimization, predictive analysis, and adaptable defensive mechanisms, defenders strive to thwart
invaders, ensuring the security and resilience of the protected spaces. This dynamic underscores
the necessity for anticipatory defense strategies and the continuous adaptation to new and evolving
threats, highlighting the complexity of maintaining security in variable spatial domains.
D.2 Predator-Prey Dynamics
In contrast to the adversarial Defender-Invader relationship, the Predator-Prey dynamics present a
differentinteractionmodelwithinspatialdomains. ThissectionexploresthesubtletiesofPredator-
Prey dynamics, focusing on the roles of seekers and hiders, the strategies they employ, and the
implications of spatial and temporal considerations on the game’s outcomes.
D.2.1 Operational Framework
The essence of Predator-Prey lies in the interplay between seekers, who aim to locate hidden
participants within a defined area, and prey, who strive to remain undetected and evade. Unlike
the Defender-Invader dynamic, the Predator-Prey game is less about safeguarding and more about
the challenge of detection and evasion.
Definition of a Predator A predator, analogous to the observer in other dynamics, actively
searchesforhiderswithinthegame’sspatialdomain. Theseeker’sroleistodiscoverallhidersusing
various search strategies, without necessarily protecting a specific asset or domain from harm.
Definition of a Prey Prey, acting as the observables, employ strategies of concealment and
evasion to remain undetected by the predator. Their objective may be to invade or disrupt or hide
within the environment until the predator threat leaves.
415D.2.2 Node Interactions: Search and Evasion Cycle
At the core of Hide-Seek dynamics is the cycle of search and evasion, where seekers employ various
methods to locate hiders. This cycle is continuous and evolves as the game progresses, with seekers
adjusting their search patterns and hiders potentially moving to maintain concealment.
D.2.3 Strategic Evasion and Search Optimization
Optimization strategies in Predator-Prey focus on maximizing the efficacy of search patterns for
Predator and enhancing hiding strategies for hiders. Predators may use probabilistic methods to
predict likely hiding spots, while prey analyze the predator’s behavior to choose the most effective
hiding places.
D.2.4 Spatiotemporal Considerations
The game’s outcome heavily depends on strategic considerations of both space and time:
• Spatial Optimization for Prey: Involves selecting hiding spots that offer the best chance
of remaining undetected, considering the seeker’s search patterns and the environment’s
features.
• Temporal Adaptability for Predator: Predatorsmayneedtoadjusttheirsearchstrategy
overtime,respondingtotheelapsedtimewithoutfindinghidersortocuesindicatingahider’s
recent movement.
D.2.5 Efficiency Metrics
Efficiency in Predator-Prey dynamics is measured differently, focusing on the duration of conceal-
ment for hiders and the time required for seekers to locate all hiders:
Evasion Duration: Measures the average time hiders remain undetected. Longer durations
indicate more effective hiding strategies.
416(cid:80)
Time Each Hider Remains Undetected
Evasion Duration =
Number of Prey
Search Efficiency: Assesses how quickly and effectively a seeker locates all hiders. Greater
efficiency is indicated by shorter search times.
Number of Prey Found
Search Efficiency =
Time Spent Searching
D.3 Hide-Seek Dynamics
Exploring an inverse interpretation of Predator-Prey dynamics unveils a scenario where hiders
assume the role of observers, actively monitoring the seeker’s movements to adapt and evade de-
tection. This inversion of traditional roles introduces a nuanced layer of strategy and awareness to
the game.
D.3.1 Operational Framework
TherevisedHide-Seekdynamicspivotaroundtheconceptofhidersasactiveparticipants,leveraging
observational strategies to avoid being found by seekers. This shift portrays seekers as persistent
threats within the environment, whose presence and behavior must be continuously monitored and
outmaneuvered by hiders.
Definition of a Hider In this alternative dynamic, hiders are reimagined as proactive ob-
servers, employing tactical awareness and environmental knowledge to evade seekers. Their success
is predicated on their ability to predict the seeker’s search patterns and dynamically adjust their
hiding strategies accordingly.
Definition of a Seeker Seekers, now cast as the observables, embody the constant challenge
hiders must navigate. Their movements and search strategies, while methodical, become the basis
upon which hiders strategize their evasion tactics.
417D.3.2 Node Interactions: Surveillance and Evasion Cycle
Central to this reinterpretation is a surveillance and evasion cycle, where hiders actively observe
and react to the seeker’s movements. This cycle emphasizes the cognitive and strategic elements
of evasion, highlighting the hider’s agency in dictating the pace and direction of the game.
D.3.3 Strategic Evasion and Surveillance Optimization
The optimization of hiding strategies now involves a sophisticated blend of predictive analytics,
environmental manipulation, and psychological tactics to mislead or divert the seeker. Conversely,
seekers must enhance their search methods to counteract the hiders’ evasive maneuvers effectively.
D.3.4 Spatiotemporal Considerations
• Spatial Awareness for Hiders: Achieving undetectability hinges on the hider’s ability
to interpret spatial cues and anticipate the seeker’s movements, requiring a nuanced under-
standing of the environment.
• Temporal Dynamics of Evasion: The timing of movements and the decision when to
shift hiding spots are critical, with hiders needing to balance the risk of movement against
the potential benefits of repositioning.
D.3.5 Efficiency Metrics
Evasion Success Rate: Quantifies the effectiveness of hiders in remaining undetected, factor-
ing in the duration of evasion and the adaptability of hiding strategies.
Seeker Detection Time: Measuresthetimetakenforseekerstolocatehiders,offeringinsights
into the complexity and cunning of hider tactics.
418D.4 Host-Parasite Dynamics
The Host-Parasite dynamics introduce a complex interplay within ROBUST Networks, focusing
on the relationship between hosts (observers) and parasites (observables). This dynamic is charac-
terized by the cyclical nature of infection, response, and adaptation, underscoring the spatial and
temporal challenges inherent in managing parasitic interactions.
D.4.1 Operational Framework
Within ROBUST Networks, the Host-Parasite relationship is defined by the interaction between
the host nodes, which aim to maintain the network’s integrity and functionality, and the parasite
nodes,whichseektoexploitthenetwork’sresourcesfortheirproliferation. Thisdynamicframework
introduces unique challenges, including infection spread, host resistance, and network resilience.
Definition of a Host A host in the ROBUST Network is an entity that provides necessary
resources or conditions for parasites to live and reproduce. As observers, hosts are tasked with de-
tecting and responding to parasitic invasions, employing strategies to mitigate damage and prevent
further spread.
Definition of a Parasite A parasite within this context is an observable entity that relies on
the host for survival, often at the host’s expense. Parasites aim to exploit the network’s resources,
leading to potential degradation of network performance or integrity.
D.4.2 Node Interactions: Infection and Response Cycle
The Host-Parasite dynamic revolves around the infection and response cycle. Parasites attempt to
infect host nodes, exploiting their resources for reproduction and spread. Hosts, in turn, activate
defense mechanisms to detect, isolate, or eliminate the parasitic influence, often involving recovery
processes to restore affected nodes.
419D.4.3 Strategies for Infection Control and Host Resilience
EffectivemanagementofHost-ParasitedynamicswithinROBUSTNetworksinvolvesstrategicplan-
ning and optimization to control infection rates and enhance host resilience. This includes:
• Infection Rate Management: Employing strategies to limit the rate at which parasites
caninfecthostnodes,potentiallythroughnetworksegmentationorenhanceddetectionmech-
anisms.
• Lag Time Reduction: Decreasing the time between infection detection and response,
thereby minimizing the impact of each parasitic invasion.
• Recovery Time Optimization: Enhancing the network’s ability to recover from parasitic
infections, ensuring quick restoration of affected nodes to full functionality.
• Host-to-Host Interaction for Infection Limitation: Facilitating communication be-
tweenhostnodestoshareinformationaboutdetectedparasites,enablingpreemptivedefenses
and coordinated responses.
D.4.4 Spatiotemporal Considerations
The dynamics of Host-Parasite interactions within ROBUST Networks are significantly influenced
by spatial and temporal factors:
• Spatial Distribution and Connectivity: The spatial arrangement and connectivity of
host nodes can impact the ease and speed with which parasites spread throughout the net-
work.
• Temporal Dynamics of Infection and Response: The timing of infection detection,
response initiation, and recovery completion plays a critical role in the network’s overall
resilience to parasitic threats.
420D.4.5 Efficiency Metrics
The effectiveness of strategies against Host-Parasite dynamics is quantified through several key
metrics:
Infection Rate:
Number of New Infections
Infection Rate =
Time Interval
Recovery Time:
(cid:80)
Time Taken for Hosts to Recover
Recovery Time =
Number of Recovered Hosts
Network Integrity Post-Recovery:
Number of Fully Functional Hosts Post-Recovery
Network Integrity =
Total Number of Hosts
D.4.6 Conclusion
The Host-Parasite dynamics within ROBUST Networks highlight a critical aspect of network man-
agement, focusing on the balance between resource exploitation by parasites and the resilience
mechanismsofhosts. Throughstrategicspatialandtemporalplanning, alongsideeffectiveinfection
controlstrategies,networkscanenhancetheirresilienceagainstparasiticthreats,ensuringsustained
integrity and functionality. This dynamic underscores the importance of continuous monitoring,
rapid response, and adaptive strategies in maintaining network health and performance amidst
ongoing parasitic challenges.
421Appendix E
Potential Cases for ROBUST network
E.1 Introduction
This chapter explores the diverse practical applications of the ROBUST framework developed
in this research, illustrating its adaptability and relevance across multiple domains. Each example
demonstrateshowthetheoreticalconstructsandmethodologiesfromearlierchapterscanbeapplied
to solve real-world problems.
E.2 Software Development:
Code Coverage: Insoftwaretesting,analysistools(observers)strategicallyexaminethespatial
layout of the codebase, focusing on complex modules or functions and their interdependencies
(spatial attributes). By tracking the evolution and execution sequence of these specific sections
over time (temporal attributes), these tools measure the execution percentage. The optimization
challenge lies in determining the minimal set of tests needed to achieve comprehensive coverage,
allowing developers to pinpoint untested or frequently modified areas, thus ensuring the software’s
robustness and reliability.
422E.3 Environmental Modeling:
Oceanic Forecasting: Buoys and underwater gliders (observers) are deployed to monitor spe-
cific regions of the ocean (observables) that are vital for forecasting due to their spatial or temporal
variability. The data collected, such as temperature and salinity, refines marine models, enhancing
their forecasting capabilities. Strategically positioning these observers ensures we gather the most
crucial data, thereby significantly impacting climate models.
E.4 Urban Planning:
Crime and Safety Monitoring: In urban environments, the spatial arrangement of security
cameras (observers) is crucial. These cameras are strategically placed to monitor areas with high
foot traffic or historically high crime rates (spatial attributes). Over time (temporal attributes),
patternsofcriminalactivities(observables)emerge,andthisdataisvital. Optimizingtheplacement
and responsiveness of these cameras can deter potential criminals, lead to rapid police responses,
and, ultimately, create safer urban spaces.
E.5 Traffic Flow Optimization:
Urban traffic has both spatial and temporal dynamics. Traffic cameras (observers) are positioned
at critical junctions, monitoring areas that historically experience congestion during rush hours
(spatial and temporal attributes). By observing vehicle flow and congestion patterns (observables)
inreal-time,data-drivendecisionscanbemade. Thismightinvolveadjustingtrafficlighttimingsor
providing real-time traffic updates to commuters. Strategically optimizing these observation points
can lead to smoother traffic flow, reduced congestion, and more efficient urban transportation
systems.
423E.6 Disaster Planning:
Emergency Response: In the aftermath of natural disasters, the temporal progression of the
disaster’s impact becomes a critical focus. Drones or first responders (observers) are deployed to
scanaffectedregions,prioritizingareasthatreportthehighestnumberofdistresscallsorhistorically
vulnerable zones (spatial attributes). By tracking real-time developments (temporal attributes),
theseobserversidentifystrandedorinjuredindividuals(observables). Strategicdeploymentofthese
observation tools ensures timely rescue operations and maximizes the efficacy of relief efforts.
E.7 Online Platforms:
Content Moderation: Digital platforms like Wikipedia or online forums are vast and contin-
ually evolving. Here, the challenge lies in the spatial distribution of content across various topics
and the temporal dynamics of user interactions. Editors or automated systems (observers) are
calibrated to focus on high-traffic pages or trending topics (spatial attributes) and to keep an eye
on rapidly changing or frequently updated content (temporal attributes). By monitoring and re-
viewing public entries or comments (observables), these systems ensure the quality, accuracy, and
trustworthiness of the platform’s content. Optimizing the efficiency of these observers is crucial to
maintaining a platform’s credibility and user trust.
E.8 Retail and Consumer Behavior:
In-Store Shopping Dynamics: Brick-and-mortar stores are intricately laid out to maximize
clientengagementandsales. In-storecamerasorsensors(observers)maypurposefullybepositioned
to capture areas of high client interaction or prolonged stay (spatial attributes). As shopping pat-
ternsevolve(temporalattributes),thesetoolsdetectnotableshiftsinclientbehaviorandmovement
(observables). Insights drawn from this data empower retailers to tweak store designs, adjust prod-
uct displays, and modify promotional zones. The primary aim is to elevate the in-store experience,
boost sales, and nurture client loyalty.
424E.9 Online Shopping Patterns:
Digital storefronts are dynamic, often tailored to individual user behaviors. Web analytics tools
(observers) are set to monitor pages with high engagement or track lateral movements from one
productpagetoanother(spatialattributes). Oversuccessiveuservisits(temporalattributes),these
tools identify patterns in page visits, product views, and purchase behaviors (observables). This
data is pivotal for refining recommendation systems, personalizing user experiences, and strate-
gically placing promotional content. The overarching objective is to enhance user engagement,
optimize conversions, and foster repeat visits.
E.10 Biology and Medicine:
Epidemiology: In the realm of public health, spatial distribution and temporal evolution of
diseases are crucial. Health agencies and researchers (observers) are designed to monitor specific
regions or communities that might be more susceptible to outbreaks (spatial attributes). They
also keep a keen eye on the progression and spread of diseases over time (temporal attributes). By
observing the breakout patterns of viruses or other diseases (observables), informed strategies can
be devised to curtail their spread, ensuring a healthier populace and reduced strain on healthcare
resources.
Pharmacovigilance: Post-market drug safety is both a spatial and temporal challenge. Pro-
fessionals in pharmacovigilance (observers) are tasked with monitoring specific demographics or
regions that might show varied drug responses (spatial attributes). They also track the onset and
progression of adverse effects over time (temporal attributes). By keeping a vigilant watch on
drug-related issues (observables) post-market release, they ensure patient safety and can swiftly
intervene when new drug risks emerge.
425E.11 Education:
Student Retention: Maintaining high retention rates is a key objective for academic institu-
tions. To achieve this, educators (observers) monitor cohort performance across courses and over
time (spatial and temporal attributes). Through this observation, patterns and anomalies in en-
gagement and performance (observables) emerge. Whether challenges arise from course material,
instructional methods, resource constraints, or individual struggles, timely identification is crucial.
Theoptimizationchallengeliesinswiftlypinpointingandrespondingtoat-riskstudentsorcohorts.
By doing so, institutions can provide rapid interventions and support, maximizing the chances of
student success and minimizing dropouts.
Personalized Learning: Today’sdigitallearningenvironmentsarevast,encompassingvarious
modules,topics,andresources. Learningmanagementsystems(observers)arecalibratedtofocuson
the most accessed resources or challenging modules (spatial attributes). They also track students’
learning patterns and feedback over the duration of courses (temporal attributes). By observing
individual student’s interactions and feedback (observables), these systems can tailor content and
resources to cater to unique learning needs, fostering a more personalized and effective learning
experience.
E.12 Economics and Finance:
Market Analysis: In the world of finance, financial analysts (observers) strategically focus
on specific markets or sectors (spatial attributes) and track the evolution of market indicators
and events over time (temporal attributes). By keenly observing these fluctuations (observables),
analysts can make informed predictions, aiding investors and policymakers. The optimization
challenge lies in forecasting economic trends with minimal error, ensuring stable economic planning
and smart investment strategies.
Credit Analysis and Community Trends: Banking institutions (observers) analyze both
individual transaction patterns and broader trends within specific communities or demographic
426groups. These trends have spatial attributes, such as behaviors in distinct neighborhoods, and
temporal dimensions, tracking their evolution over time. By observing individual and group pat-
terns(observables), bankscomputeaccuratecreditscoresandidentifybroaderlendingtrends. This
optimization ensures both responsible individual lending and an understanding of broader financial
shifts. Possible Domains of Application:
E.13 Astronomy:
Celestial Monitoring: The cosmos are vast, with countless celestial events occurring across
different regions (spatial attributes) and evolving over millennia (temporal attributes). Telescopes
or satellites (observers) are positioned to track specific celestial events or objects (observables),
gathering invaluable data. The optimization challenge in astronomy is to determine the best obser-
vation points and times to expand our understanding of the universe, guiding future space missions
and enhancing our grasp of cosmic phenomena.
E.14 Transportation and Logistics:
Fleet Optimization: Intheconstantlyshiftinglandscapeoflogistics, thelocationanddemand
of delivery and pickup points (events) evolve rapidly. Trucks, monitored by GPS and sensors
(observers), act as dynamic entities navigating this landscape (observables). By tracking their
real-time positions and status (spatial attributes) against the backdrop of ever-changing delivery
schedulesandpriorities(temporalattributes),logisticsteamscandynamicallyrerouteandoptimize
theirfleets. Theultimategoalistoensuretimelypickupsanddeliveries,maximizetruckutilization,
and minimize operational costs.
E.15 Energy and Infrastructure:
Grid Efficiency and Reliability: Electrical grids, with their vast network of nodes, trans-
mission lines, substations, and other components, act as the critical observers in the realm of
427power distribution. These grids have to cater to spatially diverse consumers, from hospitals and
industrial units that are high-priority, to residential areas with varied demands. Each of these con-
sumers represents an observable event, with unique power needs and consumption patterns. Given
the spatial complexity of these demands, and the potential for faults or disruptions, especially dur-
ing disasters like hurricanes, the grid continuously monitors and adjusts power distribution (spatial
attributes). Over time (temporal attributes), patterns of power consumption, outages, and system
stresses emerge. The optimization challenge for energy providers is twofold: ensuring that critical
infrastructures like hospitals always have power, and when disruptions occur, restoring power in
a manner that maximizes the number of consumers reconnected in the shortest time, all while
ensuring the overall robustness and resilience of the grid.
428Appendix F
Benchmarking Environment
F.1 Study Design
Thischapteroutlinestheapproachtodissectingandevaluatingdistinctspatiotemporaldatabehav-
iors as observed in two primary case studies: Oceanography Data and Crime Data. The objective
is to extrapolate and understand varying spatiotemporal behaviors and their implications. This
analysis sets the stage for the creation and utilization of synthetic datasets, designed to generalize
these behaviors. The synthetic datasets enable testing and evaluation of different analytical meth-
ods under a spectrum of spatiotemporal scenarios, thereby facilitating a deeper understanding and
optimization of various data analysis techniques.
F.2 Data Collection
This section delves into the detailed analysis of the datasets used in the primary case studies:
OceanographyDataandCrimeData. Eachdatasetexhibitsdistinctspatiotemporalcharacteristics,
providing valuable insights into the diverse behaviors of spatiotemporal data.
429F.2.1 Oceanography Data Case Study
The Oceanography Data Case Study exhibits evolutionary spatiotemporal behavior, where the
influence of neighboring spaces and prior states plays a pivotal role in the dataset’s dynamics,
mirroring natural ecological systems. The focus on regions with significant spatial and temporal
variability pinpoints areas of environmental interest. The evolutionary properties of this data are
useful for predictive modeling, particularly in strategic sensor placement for ecological monitoring.
The interconnected nature of these states illustrates the spatiotemporal dynamics that approaches
must be able to plan for. For a detailed description of the Oceanography Data, see Chapter 7.
F.2.2 Crime Data Case Study
IncontrasttotheOceanographyData’sevolutionarydynamics,theCrimeDataCaseStudyexhibits
a distinctly different stochastic behavior. It operates on a probabilistic model, where incidents are
marked as discrete events within shifting spatial clusters. These clusters signify areas with a
heightened likelihood of crime occurrences, but unlike the Oceanography Data, events here are
less influenced by historical patterns and more by current probabilistic trends. This distinction
underscores the need for precise event detection, as it captures the unpredictable yet patterned
nature of urban and social spatiotemporal dynamics. For a detailed description of the Crime Data,
see Chapter 8.
F.2.3 Spatiotemporal Insights
These two complimentary case studies provide a broad perspective on spatiotemporal data, under-
scoring the diversity of behaviors and the importance of selecting suitable analytical methods for
different types of datasets. The contrasting nature of the datasets – one depicting environmental
interdependence and the other illustrating random, isolated events – serves as a robust foundation
for understanding the complexity and adaptability required in spatiotemporal data analysis.
430F.3 Synthetic Spatiotemporal Data
This section explores the development and use of synthetic spatiotemporal datasets, drawing on
behaviors identified in the Oceanography and Crime Data case studies. Such datasets are essential
for simulating common spatiotemporal behaviors in a controlled environment, focusing on the
comparative performance of algorithms rather than replicating specific real-world scenarios.
F.3.1 Rationale for Synthetic Data
Bridging Real-World Complexity
Synthetic datasets act as intermediaries, capturing key aspects of real-world data while providing
a structured setting for analytical testing. They allow for the emulation of identified behaviors,
aiding in the evaluation of various analytical methods.
Customizing Spatiotemporal Behaviors
These datasets facilitate customization by enabling the study of behaviors such as the evolutionary
patterns in oceanography or the stochastic nature of crime data. This approach is instrumental in
exploring a range of spatiotemporal dynamics and their analytical implications.
F.3.2 Advantages of Synthetic Spatiotemporal Data
Controlled Experimentation
Synthetic data offers controlled conditions for experimentation, providing a platform for precise
hypothesis testing and model evaluation.
Flexibility and Scalability
The flexibility and scalability of synthetic datasets make them adaptable to various research re-
quirements, supporting comprehensive testing across different scenarios.
431F.3.3 Disadvantages of Synthetic Spatiotemporal Data
Limitations in Emulating Real-World Complexity
Valuablesyntheticdatamaynotcapturethefullunpredictabilityandintricaciesofnaturaldatasets,
since the focus is on common behaviors rather than specific real-world scenarios.
Bias and Generalizability Concerns
The creation process may introduce biases, thereby impacting the generalizability of results. How-
ever, the primary goal is to compare algorithm performances under standardized conditions, rather
than to tightly coupling the data with specific real-world use cases.
F.4 Dynamic Heatmaps
F.4.1 Dynamic Heat Map Abstraction
A dynamic heat map abstraction may be employed to capture the temporal hot zones as they
appear and propagate across the search space. In such an abstraction, the values are typically
normalized between 0 and 1 to standardize the intensity measures across different scales.
Let H denote the heat map at time t. The heat map H is configured as a grid of size
t t
n×m, with each cell H indicating the intensity of the hot zone at location (i,j) and time t.
i,j,t
Intensity is defined by a suitable metric, which may include factors such as crisis zone, temporal
variability, or other task-specific points of interest.
In the accompanying illustrations (Figures F.1 and F.2), the numerical values are mapped
toacolorscalewhere0representsnointensityand1representsthemaximumintensity. Thiscolor-
codingprovidesaclearandimmediatevisualrepresentationofthedistributionandevolutionofhot
zones over time, which is particularly beneficial for evaluators when comparing the effectiveness of
different analytical approaches.
432Figure F.1: Heat map H at initial time Figure F.2: Heat map H at a later time
t t+1
F.4.2 Mathematical Formulation of Dynamic Heatmaps
Themathematicalfoundationofdynamicheatmapsiscriticalforspatialandtemporaldataanalysis.
This section outlines the mathematical models defining dynamic heatmaps.
Heatmap Representation
The dynamic heatmap is defined as a vector H:
H = (H ,H ,...,H )
0 1 T
where each element H in the vector represents the state of the heatmap at a specific time step t.
t
Each H is a grid of size n×m, where n and m are the dimensions of the grid. The intensity at
t
each cell within this grid is denoted by ht .
ij
The matrix representation of the heatmap at time t is given by:
 
ht ht ... ht
11 12 1m
 
 
ht ht ... ht 
H =  21 22 2m
t   . . . . . . ... . . .  
 
 
ht ht ... ht
n1 n2 nm
433Here, ht represents the intensity value at the cell located in the i-th row and j-th column
ij
at time t.
F.4.3 Dynamic Changes in Heatmaps
Heatmaps serve as a synthesis platform to visualize outcomes from diverse predictive methodolo-
gies. Whether adopting a frequentist approach, which may consider the frequency of events, or
a Markovian approach, which relies on the state-dependent probabilities, the resulting heatmap
effectively abstracts temporal dynamics into discernible hot and cold zones. This abstraction is
achieved by representing changes attributed to environmental factors or external events, and it
showcases the versatility of heatmaps in depicting various scenarios, from natural phenomena to
complex societal dynamics. The unified visual representation provided by the heatmap enables
quick and easy comparative analysis of predictions, regardless of the underlying predictive model
employed.
Random Heatmap
A random heatmap represents a spatial distribution of values that are assigned completely at
random, without influence from previous states or any specific probabilistic structure.
Figures F.3, F.4, and F.5 display instances of a random heatmap at three consecutive time
steps. Each figure visualizes a unique and independent random distribution of intensities across
the grid, showcasing the lack of temporal or spatial correlation.
Figure F.3: Random H Figure F.4: Random H Figure F.5: Random H
1 2 3
434Stochastic Heatmap
A stochastic heatmap represents a spatial distribution where values are assigned according to a
non-uniform probability distribution. This can model systems where some regions have a higher
likelihood of events, informed by historical patterns or data, while maintaining independence be-
tween successive states.
Figure F.6: Stochastic H Figure F.7: Stochastic H Figure F.8: Stochastic H
1 2 3
Evolutionary Heatmap
An evolutionary heatmap is derived or heavily influenced from previous states, capturing the on-
going dynamics of a system. Each state is an evolution of the last, reflecting changes within the
system due to environmental factors, internal dynamics, or event-driven modifications.
Figure F.9, F.10, and F.11 illustrate successive states of an evolutionary heatmap. The
transition from H to H depicts the system’s response over time to various factors. Each figure
1 3
represents a unique time step in the system’s evolution, with color intensity indicating the level of
activity or the presence of specific events at each grid cell.
F.4.4 Applications and Implications
Dynamic heatmaps go beyond visual representation, capturing and generalizing spatiotemporal
behaviors and patterns. This approach aids in transforming abstract data behaviors into tangible
analysis, enhancing the development of analytical methods and bridging the gap between theory
435Figure F.9: Evolutionary H Figure F.10: Evolutionary H Figure F.11: Evolutionary H
1 2 3
and practical application.
F.5 Dynamic Heatmap Generator
F.5.1 Motivation and Objectives
The Dynamic Heatmap Generator is an innovative web application specifically designed for gener-
ating synthetic spatiotemporal datasets. Its primary purpose is to provide a scalable and config-
urable platform for simulating various spatiotemporal behaviors and patterns. This simulation is
crucial for testing and evaluating algorithms and approaches that are intended to operate within
spatiotemporal environments.
Key objectives of the Dynamic Heatmap Generator include:
• Synthetic Dataset Generation: To generate scalable datasets that mimic real-world spa-
tiotemporal dynamics, allowing for the effective testing of algorithms under various condi-
tions.
• Customization for Diverse Test Scenarios: Enabling users to tailor spatiotemporal
behaviors and patterns, thus creating diverse scenarios for comprehensive algorithm testing.
• Interactive Visualization for Data Exploration: Incorporating interactive elements
such as sliders for time navigation and play/pause functions, to visualize and understand the
synthetic data as it evolves over time and space.
436• Enabling Scalability and Complexity Adjustments: Allowing researchers to scale the
complexity of datasets up or down, thus providing insights into which conditions algorithms
might perform optimally.
The heatmap generator stands out not just as a visualization tool but as a sophisticated
platform for synthesizing complex spatiotemporal patterns, primarily aimed at assessing the effec-
tiveness of various adaptive strategies and algorithms in dynamic environments.
F.5.2 Tool Overview and Comprehensive Capabilities
The Dynamic Heatmap Generator is a web-based application designed with a focus on advanced
functionality and user accessibility. Developed using modern web technologies like HTML5 and
JavaScript, it provides a user-friendly interface that makes the complex task of creating and ana-
lyzing synthetic spatiotemporal datasets intuitive and efficient.
Advanced Functionality and User Interface
Thetool’sinterfaceismeticulouslycraftedtocatertobothnoviceusersandseasoneddataanalysts.
Key features include:
• User-Friendly Interface: The application boasts a straightforward and clean interface,
ensuring that users of all skill levels can navigate and utilize the tool with ease.
• Browser Development: Leveraging the latest web technologies, the heatmap generator
offers a seamless and responsive experience across various devices and platforms.
• Handling Diverse Dynamical Behaviors: It is equipped to handle a wide array of spa-
tiotemporal behaviors and patterns, making it versatile for different kinds of data analysis
tasks.
• CustomizationFeatures: Thetooloffersextensivecustomizationoptions,allowingusersto
adjustparameterslikegridsize, intensitymetrics, andtimesteps. Thislevelofcustomization
ensures that the heatmaps can be tailored to fit specific research questions or hypothesis
testing.
437• Interactive Visualization: The application includes interactive elements like sliders for
time navigation and play/pause functionality for animations. These features not only make
the tool more engaging but also aid in a deeper understanding of the data.
• Data Export Capabilities: Users have the option to download the generated heatmap
data in a JSON format, enabling further analysis outside the tool.
• Scalability: The generator is designed to scale, both in terms of the size and complexity of
the datasets it can handle, ensuring its applicability in various research contexts.
• Application Suitability: Theheatmapgeneratorissuitableforawiderangeofexperimen-
tal applications, from environmental studies to mock configurable spatiotemporal behaviors
and patterns.
F.5.3 Interactive Elements and User Engagement
The Dynamic Heatmap Generator integrates a range of interactive elements designed to enhance
user engagement and facilitate a comprehensive understanding of the heatmap data. These ele-
ments,craftedthroughadvancedwebdevelopmentpractices,contributetoanintuitiveanddynamic
user experience.
User Interface and Control Panel
The application features a control panel that allows users to interact with the heatmap generator
through various input options and controls. Key aspects include:
• Heatmap Type Selection: A dropdown menu (heatmap-type) enables users to choose
fromdifferentheatmaptypes, suchasEvolutionaryHeatmapwithSpatialorTemporalRules
andRandomlyWeightedHeatmapwithorwithoutProximityConstraints. Thisselectionsets
the basis for the type of heatmap to be generated.
• General Options Form: Users can input general parameters like the length, width, cell
size, and number of snapshots through the GeneralOptionsForm. These parameters define
the basic structure and scale of the heatmap.
438• SpecificOptionsForm: Dependingonthechosenheatmaptype,theSpecificOptionsForm
presents additional customizable options. For instance, in evolutionary heatmaps, users can
adjust the probability of a cell being alive (pAlive), while in random weighted heatmaps,
thresholds for hot, warm, and cool cells are settable.
• GenerationandVisualizationControls: Aftersettingtheparameters,userscangenerate
the heatmap using the ”Generate” button. The heatmap is then rendered on a canvas
(heatmapCanvas), allowing for visual data analysis.
Figure F.12: H Options Figure F.13: H Options
1 2
Figure F.14: H Options Figure F.15: H Options
3 4
Dynamic Visualization and Data Exploration
The application’s visualization capabilities are enhanced by several interactive features:
• Time Slider: The timeSlider allows users to navigate through different time steps of the
heatmap, facilitating the exploration of temporal changes in the data.
439• Timestep Input and Control: An input field (timestepInput) provides precise control
over the visualization, enabling users to jump to specific time steps directly.
• Play/Pause Animation: The play/pause button (playPause) adds an animation feature,
allowing users to observe the evolution of the heatmap over time in a continuous sequence.
• Data Export Functionality: A key feature is the ability to download the generated
heatmap data as a JSON file (download), which can be used for further analysis or doc-
umentation purposes.
Implementation and User Experience Design
The interactive elements are implemented using a combination of HTML, CSS, and JavaScript,
ensuring a seamless and responsive user experience. The layout and design are thoughtfully struc-
tured to guide the user naturally through the process of generating and analyzing heatmaps. The
choiceofBootstrapforstylingandlayoutfurtherenhancestheapplication’saestheticandfunctional
appeal.
Description and Help Texts
Additionally, the application includes descriptive texts and help sections (DescriptionView), pro-
viding users with contextual information about the different heatmap types and their potential
applications. This feature aids in decision-making and enhances the user’s understanding of the
tool’s capabilities.
F.5.4 Application Architecture and Deployment
The Dynamic Heatmap Generator is architected as a client-centric, serverless web application,
ensuring streamlined efficiency and user-focused interactivity. This architecture supports the ap-
plication’s core functionality to generate and visualize heatmaps within a web browser, leveraging
the computational power of the client’s machine.
440Client-Side Architecture
Theentireprocessingworkload, fromrenderingheatmapstohandlinguserinteractions, ismanaged
client-side. This serverless architecture model enables the application to run directly in the user’s
browser without backend dependencies, leading to rapid responsiveness and a reduction in server-
side load and reliable availability.
• Modular Script Organization: The application’s scripts are organized into modules,
separating concerns and enhancing maintainability. The ’views’ module contains scripts that
manage the user interface components, ensuring a clean and organized presentation layer.
• Responsive Design: Bootstrap,afront-endframework,isintegratedtoprovideaconsistent
andaestheticallypleasingdesign, ensuringthattheapplicationisnotonlyfunctionalbutalso
visually engaging.
Public Deployment on GitHub Pages
Deployment of the Dynamic Heatmap Generator employs GitHub Pages, providing a serverless
hosting solution that aligns with the application’s client-side processing philosophy.
• Global Accessibility: Hosted on GitHub Pages, the application is universally accessible,
allowingforimmediate,globalreachwithouttheneedforuserstoinstallorconfiguresoftware.
• Continuous Integration: The GitHub repository facilitates continuous integration, allow-
ing for seamless updates and iteration of the application without service interruption.
Enhanced User Experience
The Dynamic Heatmap Generator’s deployment strategy is designed with user experience as a top
priority, ensuring the tool is as user-friendly as it is powerful.
• Ease of Use: The application’s user interface is intuitive, allowing users to interact with
the heatmap generator without the need for in-depth technical knowledge or extensive doc-
umentation.
441• Self-Sufficient Application: By leveraging client-side processing, the application operates
independently of server-side constraints, providing a robust and self-sufficient tool for users.
• Open Source Collaboration: The open-source nature of the project encourages collabo-
ration, contribution, and community support, fostering an environment of shared knowledge
and continuous improvement.
F.5.5 API Documentation
class HeatmapRandomBase
Fields
canvasId ID of the canvas element where the heatmap is rendered.
length Number of rows in the heatmap grid.
width Number of columns in the heatmap grid.
cellSize Size of each cell in the heatmap.
snapshots Number of heatmap snapshots to be generated.
hotspotDistribution Distribution thresholds for hot, warm, and cool spots.
Methods
constructor Initializesanobjectwithspecifiedpropertiesforcanvas,grid
dimensions, cell size, number of snapshots, and distribution
of hotspots.
generateRandomGrid() Creates a grid with random values [0,1] for each cell.
applyHotspotDistribution(grid) Applies the hotspot distribution thresholds to the grid, cat-
egorizing cells into different heat levels.
drawHeatMap(heatMap) Renders the heatmap on the canvas with color coding based
on cell heat levels.
setHeatmaps() Generates a series of heatmaps based on the random distri-
bution and stores them.
class HeatmapRandomWeightedWithConstraints
Fields
canvasId ID of the canvas element where the heatmap is rendered.
length Number of rows in the heatmap grid.
width Number of columns in the heatmap grid.
cellSize Size of each cell in the heatmap.
snapshots Number of heatmap snapshots to be generated.
hotspotDistribution Distribution thresholds for hot, warm, and cool spots.
Methods
442constructor Initializesanobjectwithspecifiedpropertiesforcanvas,grid
dimensions, cell size, number of snapshots, and hotspot dis-
tribution.
generateRandomGrid() Creates a grid with random values [0,1] for each cell.
applyHotspotDistribution(grid) Applies the hotspot distribution thresholds to the grid, cat-
egorizing cells into different heat levels.
enforceNeighborhood(grid) Adjusts the values of cells in the grid to enforce spatial con-
straints, ensuring that hotspots are surrounded by warmer
cells.
setHeatmaps() Prepares and stores a series of heatmaps for visualization
based on random distribution with spatial constraints.
getHeatmaps() Returns the prepared series of heatmaps. If not already set,
it triggers the generation of heatmaps.
run() Initiates the process of generating and visualizing con-
strained heatmaps over time.
class HeatmapRandomWeighted
Fields
canvasId ID of the canvas element where the heatmap is rendered.
length Number of rows in the heatmap grid.
width Number of columns in the heatmap grid.
cellSize Size of each cell in the heatmap.
snapshots Number of heatmap snapshots to be generated.
hotspotDistribution Distribution thresholds for hot, warm, and cool spots.
Methods
constructor Initializesanobjectwithspecifiedpropertiesforcanvas,grid
dimensions, cell size, number of snapshots, and hotspot dis-
tribution.
generateRandomGrid() Creates a grid with random values [0,1] for each cell.
applyHotspotDistribution(grid) Applies the hotspot distribution thresholds to the grid, cat-
egorizing cells into different heat levels.
drawHeatMap(heatMap) Renders the heatmap on the canvas with color coding based
on cell heat levels.
generateHeatMap() Generates a series of heatmaps with random weighted dis-
tributions.
setHeatmaps() Prepares and stores a series of heatmaps for visualization.
getHeatmaps() Returns the prepared series of heatmaps. If not already set,
it triggers the generation of heatmaps.
run() Initiates the process of generating and visualizing random
weighted heatmaps over time.
443class HeatmapConwayGoL
Fields
canvasId ID of the canvas element where the heatmap is rendered.
length Number of rows in the heatmap grid.
width Number of columns in the heatmap grid.
cellSize Size of each cell in the heatmap.
snapshots Number of heatmap snapshots to be generated.
pAlive Probability of a cell being alive at the start.
Methods
constructor Initializes a HeatmapConwayGoL object with specified
properties for canvas, grid dimensions, cell size, number of
snapshots, and probability of life.
randomChoice(arr, p) Selects a random element from an array based on provided
probabilities.
generateGrid() Generates a grid with cells randomly set to alive (1) or dead
(0) based on the probability of life.
countAliveNeighbors(grid, Counts the number of alive neighbors for a cell at the spec-
row, col) ified position in the grid.
evolveGrid(grid, rules) EvolvesthegridstatebasedonConway’srulesorotherspec-
ified rules.
conwaysRules(cell, Applies Conway’s Game of Life rules to determine the next
numAliveNeighbors) state of a cell.
drawHeatMap(heatMap) Renders the heatmap on the canvas with color coding based
on cell states.
getHeatmaps() Returns the generated heatmaps; if not set, it triggers the
generation.
setHeatmaps() Generates and stores a series of heatmaps representing the
evolution of the game.
class HeatmapConwayGoLWithSpatialRules
Fields
canvasId ID of the canvas element where the heatmap is rendered.
length Number of rows in the heatmap grid.
width Number of columns in the heatmap grid.
cellSize Size of each cell in the heatmap.
snapshots Number of heatmap snapshots to be generated.
pAlive Probability of a cell being alive at the start.
Methods
constructor Inherits the constructor from HeatmapConwayGoL and ini-
tializes a HeatmapConwayGoLWithSpatialRules object.
444gridToHeatMap(grid) Transformsthegridintoaheatmap, withcellshavingdiffer-
ent heat levels based on the number of alive neighbors and
their own state.
run() Generates and visualizes heatmaps over time, evolving the
grid according to Conway’s Game of Life rules and applying
spatial rules to the heatmap.
class HeatmapConwayGoLWithTemporalRules
Fields
canvasId ID of the canvas element where the heatmap is rendered.
length Number of rows in the heatmap grid.
width Number of columns in the heatmap grid.
cellSize Size of each cell in the heatmap.
snapshots Number of heatmap snapshots to be generated.
pAlive Probability of a cell being alive at the start.
Methods
constructor Inherits the constructor from HeatmapConwayGoL and ini-
tializes a HeatmapConwayGoLWithTemporalRules object.
generateHeatMaps(length, GeneratesaseriesofheatmapsusingConway’srulesorother
width, cellSize, snapshots, specified rules, considering both the current and next grid
pAlive, rules) states.
gridToHeatMap(grid, nextGrid) Transforms the grid into a heatmap by comparing the cur-
rent and next states of each cell, factoring in the number of
alive neighbors.
setHeatmaps() Generates and stores a series of heatmaps representing the
temporal evolution of the game.
run() Runs the simulation, evolving the grid according to Con-
way’s Game of Life rules and visualizing the changes over
time.
F.5.6 Algorithmic Deep Dive and Mathematical Formulation
Evolutionary Algorithms
Evolutionary Approach: A meticulous exposition of Conway’s Game of Life is provided to
underpin the generation of Dynamic Heatmaps. This classic cellular automaton was chosen for its
renowned emergent spatiotemporal behaviors, offering a well-established framework conducive to
analytical adaptation and synthesis.
445Overview of Evolutionary Algorithms:
• Random Choice: An algorithmic method for selecting elements from a set with associated
probabilities, foundational for introducing stochastic elements into the model.
• Generate Grid: The initial step in constructing a spatial framework, where the grid is pop-
ulated according to specified parameters, serving as the base state for subsequent evolution.
• Alive Neighbors: A preparatory function that sets up a reference for the cells’ states,
critical for determining the rules’ application in the grid’s evolution.
• Count Alive Neighbors: This function computes the number of adjacent cells in a live
state, which influences the transition of a cell’s state based on Conway’s rules.
• Evolve Grid: The core iterative process that updates the grid’s state across discrete time
steps, simulating the dynamism of the system.
• Conway’s Rules: The set of prescribed rules that dictate the survival, death, or birth of
cells, encapsulating the fundamental logic of the Game of Life.
• Set Heatmaps: A method that compiles a series of heatmap snapshots, encapsulating the
evolutionary states of the grid over time.
• Grid to Heatmap with Spatial-biased Evolution: Analgorithmthattranslatesthegrid
statesintoaheatmapwithanemphasisonspatialrelationshipsandneighborhoodinfluences.
• Grid to Heatmap with Temporal-biased Evolution: This variation focuses on the
temporal evolution of the grid, highlighting changes over time in the heatmap visualization.
446Random Choice
Algorithm 20: Random Choice method
Result: Selects a random element from an array based on provided probabilities
1 begin
Data: array arr, probability array p
2 last ← (length of arr) - 1 ;
3 p sum ← 0 ;
4 for each value in p do
5 p sum += value;
6 rand ← random in range [0, sum] ;
7 cumulative sum ← 0 ;
8 for i from 0 to last do
9 cumulative sum += p[i] ;
10 if rand ≤ cumulative sum then
11 return arr[i];
12 return arr[last];
Generate Grid
Algorithm 21: generateGrid method for Heatmap Generation
Result: Generates a grid for the heatmap
1 begin
Data: length, width, pAlive
2 grid ← initialize empty grid of size: length × width;
3 for j: each row in grid do
4 for i: each column in row do
5 grid[i,j] ← value using randomChoice([0, 1], [1 - pAlive, pAlive]);
6 return grid;
Count Alive Neighbors
Algorithm 22: countAliveNeighbors method for Counting Neighbors
Result: Counts the number of alive neighbors for a given cell
1 begin
Data: grid, row index, column index
2 numRows ← length of grid;
3 numCols ← length of grid[0];
4 aliveNeighbors ← 0;
5 for rowOffset from -1 to 1 do
6 for colOffset from -1 to 1 do
7 if rowOffset ̸= 0 and colOffset ̸= 0 then
8 neighborRow ← (row + rowOffset + numRows) mod numRows;
9 neighborCol ← (col + colOffset + numCols) mod numCols;
10 if grid[neighborRow][neighborCol] is 1 then
11 aliveNeighbors += 1;
12 return aliveNeighbors;
447Evolve Grid
Algorithm 23: evolveGrid method for Grid Evolution
Result: Evolves the state of the grid based on specified rules
1 begin
Data: grid, rules function
2 numRows ← length of grid;
3 numCols ← length of grid[0];
4 initialize newGrid as a deep copy of grid;
5 for each row in newGrid do
6 for each column in row do
7 numAliveNeighbors ← countAliveNeighbors(grid, row, col);
8 newGrid[row][col] ← rules(grid[row][col], numAliveNeighbors);
9 return newGrid;
Conway’s Rules
Algorithm 24: conwaysRules method for Conway’s Game of Life
Result: Determines the next state of a cell based on Conway’s Game of Life rules
1 begin
Data: current cell state (cell), number of alive neighbors (numAliveNeighbors)
2 if numAliveNeighbors is 3 then
3 return 1;
4 else if cell is 1 and numAliveNeighbors is 2 then
5 return 1;
6 else
7 return 0;
Set Heatmaps
Algorithm 25: setHeatmaps method for storing series of heatmaps
Result: Generates & stores a series of heatmaps based on Conway’s Game of Life
1 begin
Data: number of snapshots (snapshots)
2 grid ← generateGrid();
3 heatmaps ← new array size of snapshots;
4 for i from 0 to (snapshots - 1) do
5 grid ← evolveGrid(grid, conwaysRules);
6 heatmap ← gridToHeatMap(grid);
7 heatmaps.push(heatmap);
448Grid to HeatMap with Spatial-biased Evolution
Algorithm 26:gridToHeatMapmethodforconvertinggridtoheatmapwithspatial
evolution
Result: Converts a binary grid representation into a heatmap based on the number of
alive neighbors
1 begin
Data: grid
2 numRows ← length of grid;
3 numCols ← length of grid[0];
4 heatMap ← initialize empty grid of size numRows × numCols with all values set to 0;
5 for row from 0 to (numRows - 1) do
6 for col from 0 to (numCols - 1) do
7 numAliveNeighbors ← countAliveNeighbors(grid, row, col);
8 if grid[row][col] is 1 then
9 heatMap[row][col] ← min(0.5 + numAliveNeighbors × 0.1, 1);
10 else
11 heatMap[row][col] ← min(numAliveNeighbors × 0.1, 1);
12 return heatMap;
Grid to HeatMap with Temporal-biased Evolution
Algorithm 27: gridToHeatMap method for converting grid to heatmap with tem-
poral evolution
Result: Converts a binary grid representation into a heatmap based on the current and
next state, including the number of alive neighbors
1 begin
Data: grid, nextGrid
2 numRows ← length of grid;
3 numCols ← length of grid[0];
4 heatMap ← new 2D array of size: [numRows] × [numCols];
5 for row from 0 to (numRows - 1) do
6 for col from 0 to (numCols - 1) do
7 currentState ← grid[row][col];
8 nextState ← nextGrid[row][col];
9 numAliveNeighbors ← countAliveNeighbors(grid, row, col);
10 if currentState is 1 and nextState is 1 then
11 heatMap[row][col] ← 1;
12 else
13 if currentState is 1 then
14 numAliveNeighbors += 1;
15 heatMap[row][col] ← min(numAliveNeighbors / 8, 0.9);
16 return heatMap;
449Stochastic Algorithms
Stochastic Approach: This approach models stochastic spatiotemporal dynamics, character-
ized by independently occurring events that are not influenced by prior states. Spatial clustering is
observed where certain regions have a higher likelihood of event occurrence. Additionally, sporadic,
noisy events are distributed across the global space, introducing an element of unpredictability and
randomness to the system.
Overview of Stochastic Algorithms
• Generate Random Grid: Creates a grid where each cell’s state is randomly determined,
laying the foundation for stochastic spatial patterns.
• Apply Hotspot Distribution: Assigns varying levels of ’heat’ or intensity to cells based
on predefined thresholds, introducing heterogeneity into the grid.
• Enforce Neighborhood: Adjusts cell states based on the states of their neighboring cells,
embedding a local spatial influence that can lead to emergent patterns.
• Generate HeatMap: Compiles a series of heatmaps from the grids generated through
stochastic processes, capturing the dynamic evolution of the system over time.
Generate Random Grid
Algorithm 28: generateRandomGrid method for Heatmap Generation
Result: Generates a grid filled with random values
1 begin
Data: gridLength, gridWidth
2 grid ← new 2d array of size: gridLength × gridWidth;
3 for j from 0 to (gridLength - 1) do
4 for i from 0 to (gridWidth - 1) do
5 grid[j][i] ← random real value between [0,1];
6 return grid;
450Apply Hotspot Distribution
Algorithm 29: applyHotspotDistribution method for modifying grid based on heat
levels
Result: Applies hotspot distribution to a grid based on thresholds
1 begin
Data: grid, hotThreshold, warmThreshold, coolThreshold
2 lastRow ← length of grid -1;
3 lastCol ← length of grid[0] - 1;
4 for row from 0 to lastRow do
5 for col from 0 to lastCol do
6 if grid[row][col] > hotThreshold then
7 grid[row][col] ← 1;
8 else if grid[row][col] > warmThreshold then
9 grid[row][col] ← 0.5;
10 else if grid[row][col] > coolThreshold then
11 grid[row][col] ← 0.25;
12 else
13 grid[row][col] ← 0;
14 return grid;
Enforce Neighborhood
Algorithm 30: enforceNeighborhood method for adjusting neighborhood values
Result: Enforces neighborhood constraints in a grid based on warm thresholds
1 begin
Data: grid, warmThreshold
2 newGrid ← deep copy of grid;
3 lenRow ← length of grid ;
4 lenCol ← length of grid[0] ;
5 for row from 0 to (lenRow - 1) do
6 for col from 0 to (lenCol -1) do
7 neighbors ← empty list;
8 for rowOffset from -1 to 1 do
9 for colOffset from -1 to 1 do
10 if rowOffset ̸= 0 or colOffset ̸= 0 then
11 neighborRow ← (row + rowOffset + lenRow) mod lenRow;
12 neighborCol ← (col + colOffset + lenCol) mod lenCol;
13 neighborCell ← [neighborRow, neighborCol];
14 neighbors.push(neighborCell);
15 if grid[row][col] is 1 then
16 for each [r, c] in neighbors do
17 if newGrid[r][c] < warmThreshold then
18 newGrid[r][c] ← 0.5;
19 return newGrid;
451Generate HeatMap
Algorithm 31: generateHeatMap method for Heatmap Generation
Result: Generates a series of heatmaps based on random grid generation and rules
application
1 begin
Data: snapshots, isNeighborhoodRulesEnabled
2 heatMaps ← empty list;
3 for i from 0 to (snapshots - 1) do
4 grid ← generateRandomGrid();
5 grid ← applyHotspotDistribution(grid);
6 if isNeighborhoodRulesEnabled then
7 grid ← enforceNeighborhood(grid);
8 heatMaps.push(grid);
9 return heatMaps;
F.6 Synthetic Spatiotemporal Techniques
Inourresearch, thecreationandanalysisofsyntheticdatasetsarepivotalformodelingthenuanced
interplay of space and time. These datasets are crafted to mimic real-world complexities, capturing
the essence of spatial interactions and temporal progressions. Spatiotemporal modeling techniques
are employed to ensure each synthetic dataset accurately reflects the dynamics of the system it
represents.
Thespatialcomponentismodeledusinggrid-basedstructuresornetworks, whereeachnode
or cell encapsulates spatial attributes and interactions. Temporal aspects are integrated through
discrete time steps or continuous simulations, allowing for the observation of dynamic changes and
the evolution of spatial relationships over time.
F.7 Synthetic Stochastic Dynamics
Stochastic and evolutionary behaviors within our synthetic datasets are implemented through a
careful balance of randomness and rule-based evolution. Spatial rules govern the local interactions
between adjacent elements, dictating the conditions under which they influence each other. Tem-
poral rules guide the system’s evolution, determining how the current state transitions to the next
in response to both stochastic factors and deterministic laws.
452Random behaviors are introduced to simulate variability and unpredictability, key features
ofreal-worldsystems. Thisrandomnessiscounterbalancedbyevolutionaryalgorithmsthatsimulate
naturalselectionandadaptation,steeringthesystemtowardsemergentpatternsandstructuresover
successive evolutions.
F.8 Computational Environment
In the pursuit of maintaining the integrity and reproducibility of our experimental research, we
have selected Google Colaboratory as our primary computational platform. Google Colab offers
an amalgamation of benefits that cater to the core requirements of our research methodology.
It stands out for its ability to provide a reproducible environment through shareable, web-based
Python notebooks. Additionally, its infrastructure supports extensive computational tasks with
the provision of GPU access, specifically incorporating the Tesla T4 GPU. This choice empowers
us to utilize CUDA-compliant libraries, essential for our computational experiments.
The software environment is underpinned by Ubuntu 20.04 LTS and Python 3.10, which
provides a stable and up-to-date foundation for our computational needs. We have harnessed a
suiteofmodules—namelycuDF,DaskcuDF,cuML,cuGraph, cuSpatial, andCuPy—ensuringthat
our computations are not only GPU-accelerated but also executed with maximum efficiency. These
modules have been integral to our ability to handle large datasets and complex computations that
are typical in data-intensive research studies.
Google Colaboratory’s framework enhances the accessibility of our work, allowing for the
seamless sharing and replication of code and results. This approach aligns with our commitment
to transparency and the promotion of open and repeatable scientific practices. By utilizing this
platform, we affirm our dedication to contributing to a body of knowledge that is both reliable and
accessible to the wider research community.
453Vita
Ted Holmberg was born in New Orleans, Louisiana. He earned his Bachelor of Arts in Philosophy
from the University of New Orleans. Subsequently, Ted pursued higher education at the same
university, obtaining a Master of Science in Computer Science. His thesis was titled ”Data Visu-
alization to Evaluate and Facilitate Targeted Data Acquisitions in Support of a Real-time Ocean
Forecasting System.” Currently, Ted is a PhD candidate in Engineering & Applied Science at the
University of New Orleans.
454