Multi-agent Path Finding for Cooperative Autonomous Driving
Zhongxia Yan, Han Zheng, Cathy Wu
Abstract—Anticipating possible future deployment of con- and Order-based Search (OBS) algorithms obtain signifi-
nectedandautomatedvehicles(CAVs),cooperativeautonomous cantlysuperiorsolutionquality.Weobtainorder-conditioned
driving at intersections has been studied by many works in
vehicles trajectories with trajectory optimization rather than
control theory and intelligent transportation across decades.
single agent path planning algorithms like A* search [6] or
Simultaneously, recent parallel works in robotics have devised
efficient algorithms for multi-agent path finding (MAPF), SIPP [21], allowing us to bypass kinematics limitations.
though often in environments with simplified kinematics. In In summary, our main contributions are:
this work, we hybridize insights and algorithms from MAPF
1) Incorporating insights from MAPF, we design an al-
with the structure and heuristics of optimizing the crossing
gorithm for ordering vehicle crossings at a signal-
orderofCAVsatsignal-freeintersections.Wedeviseanoptimal
and complete algorithm, Order-based Search with Kinematics free intersection and translating the crossing order to
ArrivalTimeScheduling(OBS-KATS),whichsignificantlyout- vehicle trajectories within a kinematic bicycle model.
performs existing algorithms, fixed heuristics, and prioritized 2) We empirically characterize the OBS-KATS’s signif-
planning with KATS. The performance is maintained under
icant improvement of vehicle delays over baselines
differentvehiclearrivalrates,lanelengths,crossingspeeds,and
under a wide range of intersection settings.
controlhorizon.Throughablationsanddissections,weofferin-
sight on the contributing factors to OBS-KATS’s performance. 3) Weprovethesoundness, completeness,andoptimality
Ourworkisdirectlyapplicabletomanysimilarlyscaledtraffic of OBS-KATS for finding vehicle crossing orders.
and multi-robot scenarios with directed lanes.
We provide full source code for reproducibility on GitHub.
I. INTRODUCTION
II. RELATEDWORK
Thedevelopmentofautonomousdrivingtechnologyraises
the possibility of intelligent coordination of connected and A. Cooperative Driving at Intersections
automated vehicles (CAVs) towards societal objectives, such Cooperative driving of connected and automated vehicles
as reducing congestion and fuel consumption, as well as (CAVs) has been studied in intelligent transportation set-
improving safety. Therefore, many works on intelligent tings ranging from adaptive cruise control [26] to traffic
transportation systems [4], [27], [28], [30] have studied networks with diverse structures [30]. In particular, several
potential positive impacts of cooperative driving of CAVs. recent cooperative driving strategies have been proposed
In particular, signal-free intersections are regions where co- for optimizing the crossing order of CAVs at signal-free
ordination of CAVs is critical to safety and efficiency. These intersections[28].TheFirst-In-First-Out(FIFO)strategyhas
intersections are not restricted to intelligent transportation been studied by [4] as a heuristic crossing order. Given an
systems, but also are commonly found in real-world robotic existing crossing order, the Dynamic Resequencing method
warehouses at crossings between directed lanes [16]. In this [32]insertsanewlyarrivingvehiclesintoasuitableposition,
work, we adapt insights and algorithms from multi-agent butkeepstherestoftheorderunchanged.Ontheotherhand,
path finding (MAPF) for the coordination of a cooperative [29]demonstratesthatMonteCarloTreeSearch(MCTS)can
driving intersection with rich vehicle kinematics. Like [28], be used to obtain a more optimal crossing order by period-
we divide the overall task of coordinating CAVs into two ically replanning the existing order. Our work significantly
sequential phases, first optimizing the CAV crossing order improves upon these previous methods in the cooperative
then computing order-conditioned vehicle trajectories. To driving setting by leveraging insights and algorithms from
define the crossing order, we divide the intersection into multi-agent path finding.
a reservation system where the arrival and departure times
at subzones are planned by our low-level Kinematic Arrival B. Multi-agent Path Finding
Time Scheduling (KATS), which substitutes for a low-level
The classical multi-agent path finding (MAPF) problem
path planning algorithm. While existing works optimize the
[25] is a NP-hard [31] problem which seeks to find the
crossing order with First-In-First-Out (FIFO) heuristics [4]
shortest collision-avoiding paths for a set of agents in a
and Monte Carlo Tree Search (MCTS) [29], we demonstrate
discrete graph. Since the space of joint agent trajectories
that our MAPF-inspired high-level prioritized planning [5]
is intractably large to consider [23], nearly all MAPF algo-
rithms rely on repeatedly calling single-agent path planner
This work was supported by the National Science Foundation (NSF)
CAREERaward2239566andtheMITAmazonScienceHub. such as A* search [6] or SIPP [21], while holding paths of
Zhongxia Yan, Han Zheng and Cathy Wu are with the some set of other agents as constraints.
Laboratory for Information & Decision Systems (LIDS),
Prioritized planning (PP) [5], [24] plans one agent tra-
Massachusetts Institute of Technology, Cambridge, MA 02139, USA.
Email:{zxyan,hanzheng,cathywu}@mit.edu jectory at a time in random agent order while avoiding
4202
beF
1
]AM.sc[
1v43300.2042:viXracollisions with all previously planned trajectories. Conflict-
based Search (CBS) [23] is a seminal solver which relies on
backtrackingtree-searchtoresolvepairwiseagentcollisions,
and Priority-based Search (PBS) [17] is a scalable extension
of CBS, albeit suboptimal and incomplete. We derive signif-
icant algorithmic insights from these works.
Recent methods have aimed at improving the solution
quality [8], [13] and completeness [14], [18], [20] under
large-scale settings with up to thousands of agents.
C. Continuous MAPF and Multi-robot Motion Planning
As classical MAPF is discrete time and space, continuous
settings may be discretized for application of MAPF algo-
rithms[7].RecentcontinuousMAPFworkshaveinvestigated
planning with continuous time directly [1], [2], [9], gut
(a) Intersection with reservation subzones
require simplified agent kinematics such as constant speed
along graph edges. Relatedly, [15] applies MAPF to inter-
section traffic settings with unbounded acceleration. Finally,
worksinmulti-robotmotionplanning[11],[19]haveapplied
sampling based methods like probabilistic roadmaps [10] to
plan over settings with continuous 2D space and time. As
traffic systems typically contain well-defined lanes, formu-
latingourproblemwithcontinuous2Dspaceisunnecessary. (b) Subzones for straight, right-, and left-turn routes
Fig. 1: Geometry of our studied intersection. Our algo-
III. PROBLEMFORMULATION
rithmsareapplicabletojunctionsingeneral,e.g.merging,as
We formulate the cooperative driving problem at a single
the exact geometry is encoded by the start and end positions
intersection, though this formulation is applicable to any of subzones along vehicle routes, x .
z,r
single-junction traffic scenario (e.g. highway merging [30]).
Consider a four-way intersection with directions i ∈ D =
{1,2,3,4}; along each direction, a single entering lane (to- (cid:80)
definedasthedifferencebetweentraveltime t(x ≥ℓ )
wards intersection) and exiting lane has length ℓ . Vehicle (cid:80) k k rk
lane and minimum travel time t(x ≥ ℓ ) absent of other
routes r =(i,j)∈R=D2 are considered, and a vehicle k k k rk
vehicles; we use the notation t(x ≥ x) to denote the first
k
withlengthℓ travelingalongrouter passestheintersection
k time such that x ≥ x. The crossing order is a partial
k
from direction i to direction j, either heading straight or
ordering which defines precedence relationships for vehicles
making a left- or right-turn. If space is available, vehicle k
whose routes cross the same reservation subzone, but not
entersthesystemfromanenteringlaneatadeterministicrate
vehicles whose routes do not overlap. For vehicles k and
λ i (veh/hr/lane) with initial speed v 0, its route is sampled k′, let k ≺ k′ denotes that k precedes k′ in the crossing
according to r ∼ P(r = (i,·)) to account for different
k order. For a vehicle k, let ≺k denote the set of all vehicles
turn probabilities. Towards collision avoidance, we design a
preceding k. Vehicles already passing through or moving
division of the intersection into 16 reservation subzones z ∈
away from the intersection do not need to be ordered.
Z (Fig. 1), which may only be occupied by one vehicle at a
given time, based on geometries of crossing vehicle routes. A. Kinematic Bicycle Model
While the subzone design in [28], [29] does not permit
Whileweplanwiththelongitudinal1Dmodelofvehicles
simultaneous left turns, our design permits four turning
along their routes, all control inputs are translated to and
vehicles (two left-turn and two right-turn) vehicles to pass
executedonakinematicbicyclemodel[22].Here,bothfront
the intersection simultaneously. Longitudinal position along
and rear wheels of the vehicle are aggregated into a singular
routerisdefinedintherange[0,ℓ ].Theposition,speed,and
r wheel at the midpoint. The control inputs are acceleration
accelerationofavehiclekatsteptisdenotedasx (t),v (t),
k k a and front wheel steering angle δ. The distance from the
and a (t), respectively. The start and end positions of each
k center of gravity to front and rear wheels is half of vehicle
subzone z along each passing route r are denoted as x
z,r,0 length ℓ . ψ denotes the heading. β denotes the slip angle.
and x , respectively. Vehicles are subjected to maximum k
z,r,1
straight speed v and maximum turning speed v ≤ v in
r,z
a subzone, as well as acceleration limits [a,a]. We assume
x˙ =vcos(ψ+β) x˙ =vsin(ψ+β) v˙ =a
perfect sensing, inter-vehicle communication, and control. x y
(cid:18) (cid:19)
vcos(β) tanδ
Like works before us [28], the objective at each plan- ψ˙ = tan(δ) β =tan−1
ning step is to find the ordering of vehicles crossing the ℓ k 2
intersection which minimizes total vehicle delay, which is (1)IV. OPTIMALCROSSINGORDERSEARCHWITHMAPF Proof: (Sketch)Considerthefirstvehiclekinthecross-
ing order. By construction, no other acceleration strategy
We extract elements of previous works on cooperative
besides the one above allows k to arrive at z earlier than
intersection crossing [28] and design algorithms for finding 0
t (k,z ) or with greater speed than v above. Therefore,
theoptimalcrossingorderfromaMAPFperspective:forthe a 0 z0
arrivingearlierthant (k,z )eithercontradictstheminimum
high-levelcrossingordersearch,ourPPandOBSalgorithms a 0
arrivaltimeorenterssomez before≺khasdeparted.Thusk
integratetrafficstructures.Forlow-levelsubzonereservation
achieves the optimal delay. By induction on crossing order,
(akin to single-agent path planning), our KATS technique
KATS obtains optimal delay for all vehicles.
schedules arrival and departure times at reservations sub-
zones. We use the computed crossing order to plan vehicle
B. Prioritized Planning (PP) with Traffic Heuristics
trajectories sequentially, with trajectory optimization. We
Naively optimizing the crossing order with PP [5] simply
sketch our overall method in Algorithm 1.
samples n random orders, evaluates the total delay of
orders
A. Kinematic Arrival Time Scheduling (KATS) each order with KATS, then return the best crossing order.
AsnaivePPdoesnotleveragetrafficstructuresandperforms
MAPFalgorithmsrelyonnumerouscallstoasingle-agent
poorly,weaugmentnaivePPwiththetwopruningheuristics
path planner (typically A* or SIPP, which are fast but often
introduced by [28] for their MCTS-based method: 1) When
require models with limited kinematics, like constant speed
samplingarandomcrossingorderforPP,weconstrainevery
[9]). On the other hand, general mixed-integer trajectory
vehicle k to be sampled after its leader (vehicle in front
optimization is expressive but cannot be directly used as
of k) in the lane. Sampling one by one from a space κ of
a single-agent path planner due to the high computational
≤|D|=4vehiclesatatime,theoverallsearchspacereduces
overhead. Therefore, we refine the arrival times scheduling
fromO(|K|!)toO(4|K|)orderings.2)Weselectk ∈κifits
technique sketched by [28] into a proxy for a single-agent
minimum arrival time t (k,z) at each subzone z ∈Z(r ) is
path planner: Kinematic Arrival Time Scheduling (KATS). a k
earlier than that of all other vehicles; if no vehicle satisfies
KATS can be efficiently invoked by high-level planners for
this condition, we uniformly randomly sample a vehicle
computing an optimal crossing order.
whose minimum arrival time is not later than all other
KATS plans the subzone arrival and departure times for
vehicles at all subzones. We apply these intuitions to design
a vehicle k on route r. Let t (≺k,z) be the latest time
d our order-based search next.
that vehicles preceding k occupy subzone z. Let t (k,z)=
a
t(x k ≥ x z,r,0) be the arrival time of vehicle k at subzone C. Order-based Search (OBS) with Traffic Heuristics
z ∈Z(r)⊂Z and t (k,z)=t(x −ℓ ≥x ) be the de-
d k k z,r,1 Inspired by the PBS algorithm [17] in MAPF, we design
parture time. KATS computes the interval [t (k,z),t (k,z)]
a d the OBS algorithm (Algorithm 1) for searching for crossing
for all z ∈ Z(r). The arrival time at the first subzone z
0 orders.WhilePBSsearchesthespaceofallpartialorderings,
along route r is computed by
we search the space of all partial orderings consistent with
(cid:26) (cid:27)
a total ordering of vehicles crossing each subzone.
t (k,z )=max t (k,z ), max {t (≺k,z)−δt(z ,z)}
a 0 a 0 d 0 Each node of the OBS depth-first search tree corresponds
z∈Z(r)
(2) to a set of vehicles K which are yet to be ordered and an
where the first term t a(k,z 0) is the minimum arrival time ordering ≺ across all vehicles. We define κ ⊆ K as the
to z 0 (independent of other vehicles) and the second term is set of vehicles with no preceding vehicles in K. For two
the earliest crossing start time such that the vehicle travels vehicles k and k′, we define the operator k ≪ k′ to denote
at constant speed within the intersection and reaches every the following property: the subzone departure times of k
s isub thzo en te raa vf ete lr tii mt b eec fro om mes zav ta oila zbl ae t. δ tht e(z m0, az x) im= umxz, ar, t0 tv−
az
ix 0nz a0, br, l0
e
a tin md esal ol fve kh ′i ac nle ds ap lr le vc ee hd ii cn lg esk suis ccl ee ess dit nh gan k′th fe orsu evb ez ro yne sua br zri ov na el
0
crossing speed v ≤ v . To achieve the minimum time z ∈ (Z(r )∪Z(r ))∩(Z(r )∪Z(r )). Intuitively, if
z0 r,z k ≺k k′ ≺k′
to enter subzone z , the vehicle accelerates at a for as long k ≪ k′ and κ = {k,k′}, then k ≺ k′ because k and ≺k
0
as feasible, then travels at maximum speed v if feasible, crossingearlierdoesnotdelayk′or≻k′.Ifk ̸≪k′,evenifk
then decelerates at a if needed to v . A crossing order departsallsubzonesearlierthank′ arrives,wecannotletk ≺
r,z
is infeasible if some vehicle has insufficient distance to k′ because some vehicle preceding k departs some subzone
decelerate to v ≤ v . While KATS enforces collision-free later than some vehicle succeeding k′. If ∃k ∈κ ∀k′ ∈κ
r,z ̸=k
subzones, it does not detect rear-end collisions with other such that k ≪ k′, we assign precedences k ≺ κ , remove
̸=k
vehiclesalongtheapproachinganddepartinglanes,andthus k from K, and update κ with the new K. Otherwise, as in
maybeoverlyoptimistic,asdiscussedinSectionIV-D.Thus, PBS, we branch over the precedence of two vehicles in κ.
a crossing ordering giving a following vehicle precedence If κ is empty, we read the crossing order from ≺.
over a leading vehicle may be feasible but is unlikely to be We apply similar traffic heuristics to OBS as described
optimal and will be pruned by heuristics below. for PP. To control the search duration, we limit the number
Theorem 1: If a crossing order is feasible, calling KATS of orders found to n total by distributing a budget of
orders
in this order obtains the optimal constant-speed crossing ⌈norders⌉ orders to the first child and the remaining to the
2
times for all vehicles consistent with the crossing order. second child. This strategy allows exploration to be focusedAlgorithm 1 OBS-KATS on the shallower nodes in the tree search, where decisions
procedure COOPERATIVEDRIVING are more influential than decisions deeper in the tree search.
for h=0 to H do We now prove several properties about OBS.
K← set of all current vehicles Theorem 2: AllordersfoundbyOBSarecrossingorders,
for each newly entered vehicle k, with K≺k do i.e. OBS is sound.
arrival/departuretimes←KATS(k,t (≺k,Z)) Proof: First note that precedence is only ever assigned
d
TRAJOPT(k, ≺k, arrival/departure times) between k,k′ ∈ κ, whose members contain no precedence
execute next step along vehicle trajectories over each other by definition. Therefore, OBS never assigns
if h mod H =0 then an inconsistent precedence and is consistent with any initial
c
vehicles on entering lanes K ⊆K precedence relations provided. As more precedences are as-
crossing order ← OBS(K, t (≺K,Z),n ) signed,somevehiclek mustberemovedfromK eventually,
d orders
for each vehicle k in crossing order do allowing some vehicle k′ ≻ k to join κ eventually. By
arr./depart. times ← KATS(k, t (≺k,Z)) induction, every vehicle in K must eventually be added to
d
TRAJOPT(k, ≺k, arrival/departure times) κ, and thus be removed from K eventually. Each vehicle
removedfromK hasprecedenceoverallremainingvehicles
procedure KATS(k, t (≺k,Z)) # Section IV-A
d in K. Therefore, the removal order from K is a valid total
# k: vehicle k to plan
ordering.Attheleafnode, κ=∅,soK =∅andallvehicles
# t (≺k,Z): latest subzone departure times of ≺k
d must be present in the total ordering returned.
t (k,z )← apply Equation 2
a 0 Theorem 3: Given that a crossing order exists, OBS with
for z ∈Z(r ) do
k n =∞ finds the optimal constant-speed crossing order,
orders
t (k,z)←t (k,z )+δt(z ,z)
a a 0 0 i.e. OBS is asymptotically optimal and complete.
t d(k,z)←t a(k,z 0)+ xz,rk,1+ vℓ rk k− ,zxz0,rk,0
Proof: We show that some branch of the OBS tree
return {[t (k,z),t (k,z)]|z ∈Z(r )} must reach an optimal crossing order, if one exists. A node
a d k
in the OBS tree must add an optimal precedence relation
procedure OBS(K,t (≺K,Z),n ) #SectionIV-C
d orders along some branch. There are two cases:
# K: set of vehicles to obtain a crossing order for 1) k ≺ k′ is added ∀k′ ∈ κ . In this case, all vehicles
̸=k
# t d(≺K,Z): latest subzone departure times of ≺K k′′ ∈K\κ are already preceded by k or preceded by some
# n orders: number of orders to obtain k′ ∈ κ . For the former, k must cross earlier than k′′
̸=k
# heuristic rule 1 by definition. For the latter, k ≪ k′ ≺ k′′ implies that,
≺← initial ordering of vehicles along lanes
at every subzone z, the latest subzone departure time of
orders ← empty list
k and all vehicles preceding k is already earlier than the
procedure EXPAND(K, ≺, n orders) earliest subzone arrival time of k′ and k′′. Thus, assigning k
# expand a search node... to precede all other vehicles k′′ ∈ K does not delay the
̸=k
κ←{k ∈K |∀k′ ∈K k′ ̸≺k} crossing of any k′′, and giving k precedence is optimal.
while ∃k ∈κ ∀k′ ∈κ ̸=k(k ≪k′) do 2) k ≺k′ is added to one child branch and k′ ≺k to the
≺←≺∪ {k ≺k′ ∀k′ ∈κ ̸=k} other. This case must be optimal because either k ≺ k′ or
let K ←K\{k} k′ ≺k isconsistentwiththeoptimalcrossingorder.Without
update κ←{k ∈K |∀k′ ∈K k′ ̸≺k} loss of generality, assume that k ≺ k′ is consistent with
if κ=∅ then optimal, then KATS must find that replanning arrivals times
construct order from ≺, append to orders for k′ and k′′ is feasible because ≺ only has a subset of the
compute delay(order) precedence constraints of the optimal crossing order.
return 1 As every non-leaf OBS node adds at least one optimal
n←0 precedence along some branch, OBS must reach the optimal
# heuristic rule 2: k is closer to the intersection leafnodebecausethereareatmost|K|2 possibleprecedence
k,k′ ← two vehicles ∈κ s.t. k ̸≪k′ and k′ ̸≪k relationstotal.Theleafnodecorrespondstoasoundcrossing
# 1st child order, as shown earlier. Thus OBS always finds the optimal
run KATS on k′ and any necessary k′′ ≻k′ crossing order and is complete.
if schedules for k′ and any k′′ are feasible then
n+= EXPAND(K, ≺∪ {k ≺k′}, ⌈norders⌉) D. Trajectory Optimization
2
if n=n orders return n With the total crossing ordering of vehicles, we obtain
# 2nd child: will be skipped if n orders =1 trajectories for each vehicle one-by-one, accounting for the
run KATS on k and any necessary k′′ ≻k positions of all previously planned vehicles and obeying the
if schedules for k and any k′′ are feasible then scheduled arrival times at subzones. KATS may be overly
n+= EXPAND(K, ≺∪ {k′ ≺k}, n orders−n) optimistic and inconsistent with trajectory optimization as
return n
KATSdoesnotpreventcollisionbetweenvehiclesoutsidethe
EXPAND(K, ≺, n orders)
intersection. Thus, following the scheduled times precisely
return argmin delay(order)
order∈orders may be infeasible. To ease infeasibility, we 1) incrementallydelay the scheduled time constraint until feasible 2) allow as doing so may conflict with other vehicles’ trajectories.
all vehicles to exceed the turning speed limit except at the Therefore, crossing orders may be more robust to model
midpoint of a turn, which allows a vehicle to decelerate into mismatch between the kinematics used in MAPF and the
a turn and accelerate out of a turn. Given planning horizon kinematics used in trajectory optimization.
T , trajectory optimization for each vehicle is formulated as
p
follows and optimized with a discretization dt:
V. DEFAULTEXPERIMENTALSETUP
We modify HighwayEnv [12] to simulate the system with
(cid:90) Tp
discretization dt = 0.1s for H = 1000 timesteps. Fig. 1
max v(t)dt s.t.
x(t),v(t) 0 illustrates subzone geometries. We set arrival rate λ =
x(0)=0 v(0)=v 0≤v(t)≤v 1500veh/hr/lanewithinitialspeedv =5m/s.Crossingorder
0 0
v(t)+v(t+dt) computation occurs every H c = 100 steps. Each vehicle
a≤ ≤a is planned for a horizon T which is sufficient for it to
dt p
v(t)+v(t+dt) reach the end of its route. Maximum speed is v = 13m/s,
x(t+dt)−x(t)= with v = 6.5m/s on left turns and v = 4.5m/s on
2 r,z r,z
right turns. A vehicle goes straight, turns left, and turns
x≤x(t)≤x v(t )≤v
mid r,z
right with 60%, 20%, and 20% chance, respectively. Each
(3)
lane has width w = 4.5m and length ℓ = 250m.
lane lane
where v(t mid) is the speed at the midpoint crossing time, Each vehicle has length ℓ k = 5m and width 2m. Each
x is the maximum safe position of a vehicle given its intersectionisasquarewithedgelength5w lane.Theleftturn
subzone arrival times and leading vehicles trajectories on radius is 3w lane and the right turn radius is 2w lane. Vehicles
boththeenteringandexitinglane,andtheminimumposition collide when their bounding boxes overlap; for verifying
constraint x ensures that the vehicle departs a subzone on algorithmic correctness, we do not add any temporal or
schedule. To obtain the steering angles along a route, we spatial padding around each vehicle. We run all settings
utilize a PID controller tracking the center of the route. on 100 environment seeds, where we quantify the 95%
confidence interval of the mean with bootstrap sampling.
E. Why is Crossing Order Useful?
All methods are implemented in Python since KATS is very
We acknowledge that the optimal arrival times consistent fast(around10000calls/s),unlikesingle-agentpathplanners
with an optimal crossing order does not necessarily im- forclassicalMAPFsettings,whichareoftenimplementedin
ply optimal arrival times in general for minimizing delay. C++forefficiency.TrajectoryoptimizationusesCVXPY[3].
Indeed, similar to observed by [17], optimal arrival times
may not be consistent with any crossing order. An example
VI. EXPERIMENTALRESULTS
can be obtained by manipulating our vehicle and subzone WedemonstratetheeffectivenessofOBSagainsttheFIFO
geometries. Let the intersection be a 10 by 10 grid of order [4], MCTS [28], [29], and our own PP on various
square subzones, and let each vehicle be the size of one intersection configurations. All methods use KATS. As no
subzone.Onevehicleapproachestheintersectionalongeach code was provided, we implement MCTS to the best of our
of the four directions, symmetrically. Clearly, the optimal abilities, with the same traffic heuristics as PP and OBS.
arrival times is obtained by simultaneously allowing all four
A. Delay vs Crossing Order Computation Overhead
vehicles pass the intersection. However, these arrival times
are not consistent with any crossing order, because each In Fig. 2, we measure the average vehicle delay as a
vehicle enters some subzone before another vehicle. With function of the computation overhead of n ∈ [20,214]
orders
an optimal crossing order of [up, right, down, left], only the for PP, n ∈ [20,213] for OBS, and n ∈ [20,29]
orders simulations
first three vehicles can enter at the same time, and left waits for MCTS. We observe that OBS is significantly stronger
foruptofinishcrossingbeforeenteringtheirsharedsubzone. than PP, which is still significantly stronger than MCTS. We
Nevertheless, since using trajectory optimization as a note that 10s per crossing order computation is a very long
single-agent path planner is not practical, MAPF algorithms computationtimeandmuchlongerthanpracticalfordeploy-
tend to use path planners on simplified kinematics instead, ment; the previous work in cooperative driving [28] plans
as we do with KATS, resulting in a mismatch between for around 0.1s, albeit with C++. With 10s of computation,
the trajectories planned with simplified kinematics and ones thecorrespondingthroughputsfortheFIFO,MCTS,PP,and
planned with trajectory optimization. Obtaining a crossing OBS configurations are 1740, 2050, 2080, and 2160veh/hr
order allows us to plan trajectories with complex kinemat- with confidence interval of ±20veh/hr.
ics according to the crossing order, adding delays when Interestingly, though the same traffic heuristics are used,
necessary to ease infeasibility due to the mismatch before the best solution quality of PP and MCTS is similar to
planning subsequent vehicles. On the other hand, while a the worst solution quality for OBS, obtained with n =
orders
classical MAPF algorithm may find the optimal symmetric 1 and orders of magnitude less computation. We initially
solution for the described example in simplified kinematics, conjectured that the early plateauing performance of PP
a mismatch with trajectory optimization may occur resulting and MCTS may be due to the use of traffic heuristics,
in infeasibility, which cannot be resolved by adding delays which may prevent finding the optimal solution. As such,TABLEI:Averagedelay(s)vsintersectionconfigurations
8
ArrivalRateλ(veh/hr) FIFO MCTS PP OBS
1000 6.6 4.0 3.6 3.2
6 FIFO 1500 9.6 6.0 5.6 4.7
MCTS 2000 11 7.5 7.0 6.0
PP [500,2000,1000,1200] 6.9 4.3 4.0 3.3
4 OBS LaneLengthℓlane (m)
10−3 10−2 10−1 100 101 50 3.4 2.8 2.7 2.7
100 7.5 4.8 4.6 4.1
Computation Time (s)
250 9.6 6.0 5.6 4.7
500 16 10 9.0 7.8
Fig.2:Delayvscomputationtimepercrossingorderreplan.
CrossingSpeedvr,z (m/s)
[13,6.5,4.5] 9.6 6.0 5.6 4.7
[13,13,13] 3.4 2 1.8 1.6
we attempt to disable heuristic rule 2 for selecting the
first 10 vehicles of the ordering; however, we find that the ControlHorizonHc (dt=0.1s)
performanceissignificantlyworse.Forexample,doingsofor 25 12 8.1 7.4 6.3
PPwithcomputationtimesof0.1sand2spercrossingorder 50 10 6.7 6.1 5.3
100 9.6 6.0 5.6 4.7
result in average delays of 8.4s and 6.0s, respectively, both
200 8.7 6.5 6.4 5.8
significantly worse than PP with heuristics always enabled.
Thus, the difference in performance of the methods is not
duetothetrafficheuristicsused.Rather,OBSseemstohave 10.0 Left Straight Right
a significant algorithmic advantage by gracefully handling
7.5
partial orderings rather than searching for total orderings.
5.0
B. Robustness to Intersection Configurations
2.5
In Table I, we probe the robustness of our method under
different conditions by varying the arrival rates λ, lane 0.0
FIFO MCTS PP OBS
lengths ℓ , turning speeds v for [straight, right- and
lane r,z
left-turn], and control horizon H c. All methods are run for Fig. 3: Delay along entire route vs crossing geometry
similar time, around 0.1s per crossing order. We find that
therelativeperformanceofallmethodsareconsistentacross
configurations. The effects of arrival rate and turning speed highest crossing speed. For example, while the right-turn
are intuitive, so we focus on the other configurations. delayishigherthanthestraightdelayforothermethods,the
For the short lane length ℓ lane = 50m, we observe very straightdelayis lowerforOBS.While lessapparent,similar
little gap between MCTS, PP, and OBS. This is likely due effect can be seen for the left-turn delay. We conjecture that
to the much smaller search space, as a 50m lane typically thisOBSbehaviormaybeduetotworeasons:1)thedelayof
contains around 3 to 4 vehicles per lane, while longer lanes avehiclegoingstraightisthegreatestifthevehicleisforced
containsignificantlymorevehicles.Weseethatgapsbetween to wait at the intersection, so OBS may prioritize straight-
different methods increases with the problem complexity. movingvehicles2)astraightcrossingtakestheleastamount
Regarding the control horizon H c, we observe that more of time and is less disruptive.
frequent replans is actually slightly harmful for FIFO. At
each replan, the crossing order stays constant for FIFO, but VII. CONCLUSIONS
the arrival times are updated by KATS and the trajectories In this work, we seek to bridge the gap between the
replanned. Since there is a mismatch between KATS and robotics community and the control / intelligent transporta-
trajectory optimization, arrival times planned by KATS at tion communities. Future directions could identify other
step h deviates from those at step h − H c, shifting the settings in traffic and robotics where the crossing order may
constraintsfortrajectoryoptimization.Thismismatchaffects be helpful, as well as extending the proposed algorithm
search-based methods as well, resulting in lowest delay at to mixed traffic settings where the stochasticity of human
H c = 100; for H c = 200, delay is increased due to driving behavior must be addressed. We also hope that
insufficient replans. additional insights from the robotics community may guide
future algorithms for coordinating CAVs in large-scale and
C. Delay vs Crossing Geometry
general traffic scenarios.
InFig.3,weexaminethedelayforeachcrossinggeometry
ACKNOWLEDGMENT
(left-turn, straight, and right-turn). While OBS significantly
reduces delay for routes with all geometries, it especially This work was supported by the National Science Foun-
reduces the delay (compared to other methods) for the dation (NSF) CAREER award (#2239566) and the MIT
straight route through the intersection, which permits the Amazon Science Hub.
)s(
yaleD
elciheV
egarevA
hcaorppA
gnola
)s(
yaleD
elciheV
egarevA
etuoR
eritnE
gnolaREFERENCES [23] G.Sharon,R.Stern,A.Felner,andN.R.Sturtevant,“Conflict-based
searchforoptimalmulti-agentpathfinding,”ArtificialIntelligence,vol.
219,pp.40–66,2015.
[1] A.Andreychuk,K.Yakovlev,E.Boyarski,andR.Stern,“Improving
continuous-time conflict based search,” in Proceedings of the AAAI [24] D.Silver,“Cooperativepathfinding,”inProceedingsoftheAAAICon-
ConferenceonArtificialIntelligence,vol.35,no.13,2021,pp.11220–
ferenceonArtificialIntelligenceandInteractiveDigitalEntertainment,
vol.1,2005,pp.117–122.
11227.
[25] R. Stern, N. R. Sturtevant, A. Felner, S. Koenig, H. Ma, T. T.
[2] A. Andreychuk, K. Yakovlev, P. Surynek, D. Atzmon, and R. Stern,
Walker,J.Li,D.Atzmon,L.Cohen,T.S.Kumaretal.,“Multi-agent
“Multi-agentpathfindingwithcontinuoustime,”ArtificialIntelligence,
pathfinding:Definitions,variants,andbenchmarks,”inTwelfthAnnual
vol.305,p.103662,2022.
SymposiumonCombinatorialSearch,2019.
[3] S. Diamond and S. Boyd, “CVXPY: A Python-embedded modeling
[26] B. Van Arem, C. J. Van Driel, and R. Visser, “The impact of
language for convex optimization,” Journal of Machine Learning
cooperative adaptive cruise control on traffic-flow characteristics,”
Research,vol.17,no.83,pp.1–5,2016.
IEEETransactionsonintelligenttransportationsystems,vol.7,no.4,
[4] K. Dresner and P. Stone, “A multiagent approach to autonomous
pp.429–436,2006.
intersection management,” Journal of artificial intelligence research,
[27] C.Wu,A.Kreidieh,K.Parvate,E.Vinitsky,andA.M.Bayen,“Flow:
vol.31,pp.591–656,2008.
A modular learning framework for mixed autonomy traffic,” IEEE
[5] M. Erdmann and T. Lozano-Perez, “On multiple moving objects,”
TransactionsonRobotics,2021.
Algorithmica,vol.2,pp.477–521,1987.
[28] H. Xu, C. G. Cassandras, L. Li, and Y. Zhang, “Comparison of
[6] P. E. Hart, N. J. Nilsson, and B. Raphael, “A formal basis for the
cooperative driving strategies for cavs at signal-free intersections,”
heuristicdeterminationofminimumcostpaths,”IEEEtransactionson
IEEE Transactions on Intelligent Transportation Systems, vol. 23,
SystemsScienceandCybernetics,vol.4,no.2,pp.100–107,1968.
no.7,pp.7614–7627,2022.
[7] W.Ho¨nig,J.A.Preiss,T.S.Kumar,G.S.Sukhatme,andN.Ayanian, [29] H.Xu,Y.Zhang,L.Li,andW.Li,“Cooperativedrivingatunsignal-
“Trajectory planning for quadrotor swarms,” IEEE Transactions on izedintersectionsusingtreesearch,”IEEETransactionsonIntelligent
Robotics,vol.34,no.4,pp.856–869,2018. TransportationSystems,vol.21,no.11,pp.4563–4571,2019.
[8] T.Huang,J.Li,S.Koenig,andB.Dilkina,“Anytimemulti-agentpath [30] Z.Yan,A.R.Kreidieh,E.Vinitsky,A.M.Bayen,andC.Wu,“Unified
finding via machine learning-guided large neighborhood search,” in automatic control of vehicular systems with reinforcement learning,”
ProceedingsoftheAAAIConferenceonArtificialIntelligence,vol.36, IEEETransactionsonAutomationScienceandEngineering,vol.20,
2022,pp.9368–9376. no.2,pp.789–804,2022.
[9] K.Kasaura,M.Nishimura,andR.Yonetani,“Prioritizedsafeinterval [31] J. Yu and S. LaValle, “Structure and intractability of optimal multi-
pathplanningformulti-agentpathfindingwithcontinuoustimeon2d robotpathplanningongraphs,”inProceedingsoftheAAAIConference
roadmaps,”IEEERoboticsandAutomationLetters,vol.7,no.4,pp. onArtificialIntelligence,vol.27,no.1,2013,pp.1443–1449.
10494–10501,2022. [32] Y. Zhang and C. G. Cassandras, “A decentralized optimal control
[10] L.E.Kavraki,P.Svestka,J.-C.Latombe,andM.H.Overmars,“Prob- framework for connected automated vehicles at urban intersections
abilisticroadmapsforpathplanninginhigh-dimensionalconfiguration with dynamic resequencing,” in 2018 IEEE Conference on Decision
spaces,”IEEEtransactionsonRoboticsandAutomation,vol.12,no.4, andControl(CDC). IEEE,2018,pp.217–222.
pp.566–580,1996.
[11] J.Kottinger,S.Almagor,andM.Lahijanian,“Conflict-basedsearchfor
multi-robot motion planning with kinodynamic constraints,” in 2022
IEEE/RSJInternationalConferenceonIntelligentRobotsandSystems
(IROS). IEEE,2022,pp.13494–13499.
[12] E. Leurent, “An environment for autonomous driving decision-
making,”https://github.com/eleurent/highway-env,2018.
[13] J.Li,Z.Chen,D.Harabor,P.Stuckey,andS.Koenig,“Anytimemulti-
agent path finding via large neighborhood search,” in International
JointConferenceonArtificialIntelligence(IJCAI),2021.
[14] J. Li, Z. Chen, D. Harabor, P. J. Stuckey, and S. Koenig, “Mapf-
lns2: fast repairing for multi-agent path finding via large neighbor-
hood search,” in Proceedings of the AAAI Conference on Artificial
Intelligence,vol.36,no.9,2022,pp.10256–10265.
[15] J. Li, E. Lin, H. L. Vu, S. Koenig et al., “Intersection coordination
withpriority-basedsearchforautonomousvehicles,”inProceedingsof
theAAAIConferenceonArtificialIntelligence,vol.37,no.10,2023,
pp.11578–11585.
[16] J.Li,A.Tinka,S.Kiesel,J.W.Durham,T.S.Kumar,andS.Koenig,
“Lifelong multi-agent path finding in large-scale warehouses,” in
ProceedingsoftheAAAIConferenceonArtificialIntelligence,vol.35,
2021,pp.11272–11281.
[17] H.Ma,D.Harabor,P.J.Stuckey,J.Li,andS.Koenig,“Searchingwith
consistentprioritizationformulti-agentpathfinding,”inProceedings
of the AAAI Conference on Artificial Intelligence, vol. 33, 2019, pp.
7643–7650.
[18] K.Okumura,“Improvinglacamforscalableeventuallyoptimalmulti-
agentpathfinding,”InternationalJointConferenceonArtificialIntel-
ligence(IJCAI),2023.
[19] K.OkumuraandX.De´fago,“Quickmulti-robotmotionplanningby
combining sampling and search,” International Joint Conference on
ArtificialIntelligence(IJCAI),2023.
[20] K. Okumura, M. Machida, X. De´fago, and Y. Tamura, “Priority
inheritance with backtracking for iterative multi-agent path finding,”
ArtificialIntelligence,vol.310,p.103752,2022.
[21] M.PhillipsandM.Likhachev,“Sipp:Safeintervalpathplanningfor
dynamic environments,” in 2011 IEEE International Conference on
RoboticsandAutomation. IEEE,2011,pp.5628–5635.
[22] R. Rajamani, Vehicle dynamics and control. Springer Science &
BusinessMedia,2011.