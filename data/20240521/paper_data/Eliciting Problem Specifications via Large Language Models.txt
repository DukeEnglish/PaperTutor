PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
Eliciting Problem Specifications via Large Language Models
RobertE.Wray ROBERT.WRAY@CIC.IQMRI.ORG
JamesR.Kirk JAMES.KIRK@CIC.IQMRI.ORG
JohnE.Laird JOHN.LAIRD@CIC.IQMRI.ORG
CenterforIntegratedCognition,IQMResearchInstitute,AnnArbor,MI48105USA
Abstract
Cognitive systems generally require a human to translate a problem definition into some specifi-
cation that the cognitive system can use to attempt to solve the problem or perform the task. In
thispaper,weillustratethatlargelanguagemodels(LLMs)canbeutilizedtomapaproblemclass,
definedinnaturallanguage,intoasemi-formalspecificationthatcanthenbeutilizedbyanexisting
reasoningandlearningsystemtosolveinstancesfromtheproblemclass. Wepresentthedesignof
LLM-enabledcognitivetaskanalystagent(s).ImplementedwithLLMagents,thissystemproduces
a definition of problem spaces for tasks specified in natural language. LLM prompts are derived
from the definition of problem spaces in the AI literature and general problem-solving strategies
(Polya’sHowtoSolveIt). Acognitivesystemcanthenusetheproblem-spacespecification,apply-
ingdomain-generalproblemsolvingstrategies(“weakmethods”suchassearch),tosolvemultiple
instancesofproblemsfromtheproblemclass. Thisresult,whilepreliminary,suggeststhepotential
for speeding cognitive systems research via disintermediation of problem formulation while also
retainingcorecapabilitiesofcognitivesystems,suchasrobustinferenceandonlinelearning.
1. Introduction
From the earliest days of Artificial Intelligence as a discipline of study, researchers have sought to
enableAIsystems–agents–toattackgeneralproblemswherenoknown/existingspecial-purpose
methodisknown. Examplesofthesemethodsincludevariouskindsofsystematicsearch(e.g.,hill
climbing,depth-andbreadth-firstsearch)(Newell&Simon,1976;Nilsson,1971),planning(Fikes
&Nilsson,1971),means-endsanalysis(Newell&Simon,1963),andgeneralheuristicsintendedto
reducethetotalsizeofsearchspaces,includingsomeinspiredbyhumanproblemsolving(Newell&
Simon,1972). Theseweakmethods(Newell,1969;Laird&Newell,1983)remaincriticalinstate-
of-art agents today. For example, both Q-learning (Sutton & Barto, 1999) and backpropagation
(Rumelhartetal.,1986)useaformofhill-climbingsearch.
Alimitationofweakmethods,recognizedevenintheseearlydaysofAI,isthehumaninterpre-
tationrequiredtotranslatefromaproblemdescriptiontoaformalspecificationthatcanbeusedby
a weak method. In discussing the limitations of weak methods as a general foundation for solving
”ill-structuredproblems”(essentiallymeaningclassesofproblemswherenospecializedmethodis
knowntoexist),Newell(1969)relates:
1
4202
yaM
02
]IA.sc[
1v74121.5042:viXraR.E.WRAY,J.KIRK,J.E.LAIRD
[R]epresentation of problems also raises a question of the locus of power.... we talk
about the representation of a problem ... presumably a translation from its representa-
tion in some other form, such as natural language. These changes of the basic repre-
sentational system are clearly of great importance to problem solving.... A suspicion
arises that changes of the representation at this level ... might constitute a substantial
partofproblemsolving.
Then and now, a human generally is required to perform this “translation” (e.g., knowledge
engineering, reward design, feature selection) from the problem to its representation in an AI sys-
tem. In the intervening years, methods that systematized and codified these translation processes
haveariseninknowledge-basedsystems,(Schreiberetal.,2000;Arpetal.,2015)engineeringpsy-
chology (Crandall et al., 2006; Schraagen et al., 2000) and machine learning (Langley, 1994; Cai
et al., 2018) illustrating that, indeed, the initial representation of the problem is a significant locus
ofpowertowardsolution.
Today,largelanguagemodels(LLMs)arebeingevaluatedforand(sometimes)usedforanalytic
tasksincludingsoftwaredevelopment(Houetal.,2024;Ozkaya,2023),generalresearchreviewand
synthesis(Shaoetal.,2024),andliterature/textanalysis(Törnberg,2023;Gilardietal.,2023). The
mostrecentversionsofLLMsallowuserstocreatevirtualassistantscustomizedtospecificclasses
oftasks(Dongetal.,2023),enabletheuseofexternaltoolsforspecializedtasks(Kimetal.,2023;
Xu et al., 2023; Qin et al., 2023), and support contextual, dynamic, agent-like decision making
(“agentic”LLMsystems,e.g.,Yaoetal.,2023b;Wangetal.,2024).
GiventheseLLMcapabilities,isitfeasibleforanLLM,whenpresentedwithanaturallanguage
problemdescription,toautomaticallyproduce“translations”–formalspecificationsoftheproblem
spaceandproblems–thatenabletheimmediateapplicationofweakmethods? Below,wepropose
and define a virtual assistant with the role of cognitive task analyst. The virtual assistant uses a
collection of domain-general prompts to elicit information about the problem. More specifically,
promptsaredesignedaroundtheconceptofproblemspaces(Newell,1980)asthetargetofaprob-
lemspecification. ThepromptsalsodrawfromHowtoSolveIt(Polya,2015),awell-known/classic
treatiseongeneralmethodstoattackunfamiliarproblems.
Table1.Natural language descriptions of problem space and problem from Newell (1980). These descrip-
tionsareprovidedverbatimtotheLLMinthepromptsandprompttemplatesdescribedbelow.
Problem A problem space consists a set of symbolic structures (the states of the space) and a set of
Space: operatorsoverthespace. Eachoperatortakesastateasinputandproducesastateasoutput
(althoughtheremaybeotherinputsandoutputsaswell). Theoperatorsmaybepartial(i.e.,
notdefinedforallstates). Sequencesofoperatorsdefinepathsthatthreadtheirwaythrough
sequencesofstates.
Problem: Aprobleminaproblemspaceconsistsofasetofinitialstates,asetofgoalstates,andaset
ofpathconstraints. Theproblemistofindapaththroughthespacethatstartsattheinitial
state,passesonlyalongpathsthatsatisfythepathconstraints,andendsatanygoalstate.
2PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
2. Background: ProblemSpacesandCognitiveTaskAnalysis
In this section, we briefly summarize what we mean by “problem space” and enumerate various
steps and outputs that are needed to formulate a problem. This analysis provides requirements for
theproblem-spaceformulation(“translation”)processesoutlinedabove.
Table 1 presents Newell’s (1980) definitions of problem space and problem. A problem space
(generally) defines how a number of different problems of the same class can be approached, out-
liningwhatsituationscanbeencountered(states)andwhatactionsareavailableinthosesituations
(operators). Forexample,aproblemspaceforbasicintegerarithmeticmightincludesingle-digitad-
ditionandsubtractionoperators,acarryoperator,andintegers(states). Theproblemspacecanthen
be used to express (and solve) individual problem instances (i.e., 113−67). As another example,
considertheclassic“waterjugs”probleminwhichaspecificamountofwatermustbeproducedin
one container from two containers that do not support any partial measurement (and an unlimited
supplyofwater). Theproblem-spaceoperatorsandstatesforthisproblemaredefinedinTable2.
Table2. DefinitiontheProblemSpaceforWaterJugsfrom(Laird&Newell,1983).
State: Currentvolumeofeachjug.
Operators: Fillagivenjug. Emptyagivenjug.
Pourthecontentsofjugintotheotheruntilthesourcejugisemptyorthereceiving
jugisfull.
PathConstraints: Ifthetargetjughasthegoalamount,done.
Donotundothepreviousaction.
Donottakeanactionthatwillproduceastatealreadyonthepath(avoidloops)
Path constraints define allowed orders of operations. For example, in basic arithmetic, there is
(typically) a path constraint that the one’s column be computed prior to the ten’s column. When a
specializedprocedureisnotknowntothesolver,searchcanbeusedtofindasolutiontoaproblem
within the problem space. The path constraints for “water jugs” (Table 2) are much less specific
thantherigidconstraintsforarithmeticprocedures. However,theydoconstraintheresultingsearch,
avoidinginverseactionsandloopsthatwouldoccurinsearchotherwise.1
Problem spaces describe the components of problem solving. Where do such specifications
comefrom? Assuggestedabove, variousmethodsoftaskanalysishavebeendevelopedthatallow
analyststodocumenthowproblemsshouldbesolved. Cognitivetaskanalysis(CTA,Crandalletal.,
2006)isonemethodthatguidesananalystininterviewingahumanexperttocaptureandtocodify
how they approach or perform various tasks. We choose CTA because the design of an early and
influentialformofCTA,GOMS(John&Kieras,1996),focusedanalysissomewhatdirectlyonthe
formulation of problem spaces compatible with Newell’s definition. GOMS guides the analyst in
identifying Goals, Operators, Methods, and Selection knowledge (roughly, path constraints) for a
task. Below, we take advantage of this connection by defining a “Cognitive task analyst” role for
the LLM agent. By creating this role context for the LLM, the intent is to bias generation toward
conceptsconsistentwiththisconceptionofproblemspaces(andtheirrequirements).
1.Path constraints and search control (discussed later) both influence the sequence of operations. Generally, path
constraintsprescribewhatactionsarelegalandnotandsearchcontrolguideswhatchoicesaremore/lesspreferable.
3R.E.WRAY,J.KIRK,J.E.LAIRD
Figure1. High-levelsystemsarchitecturecomprisingthe“CTA”agentandacognitivearchitecture.
CTAisgenerallyfocusedonelicitingknowledgewhereasolutionmethodexists/isknown. For
our research, we do not want to assume that a method is “known” to the LLM. The LLM can still
takeadvantageofanyrelevantandknownmethods,butmoregeneralstrategiesarelikelyneededas
well. Forsuch“generalproblem-solvingstrategy”knowledge,weincludeinthedesignoftheCTA
Agent prompts derived from How to Solve It (Polya, 2015). This book outlines an abstract, step-
wise process for solving unfamiliar problems, including defining knowns, unknowns, goals, etc.
One of the important ideas from Polya that we embed in the CTA Agent is the idea of introducing
notation to define states and operators. While LLMs are generally viewed as generators of natural
language, research has shown that they can also be used to produce specifications in formal/semi-
formal notations (Ye et al., 2023a,b). It should also be noted that while LLMs can generate such
specifications,theyaresomewhatlessableto(natively)manipulatestatementsinaformalnotation.
3. OverallSystemDesign
Figure1presentsanoverallsystemsdesignfortheenvisionedproblem-solvingsystem. Aproblem
description is presented in natural language to the CTA Agent.2 Task analysis is conducted by
the “Cognitive Task Analyst” agent, which is implemented as a collection of LLM agents. These
agents,discussedfurtherinthenextsection,aredesignedtoconductvariouspartsofanalysis,such
asspecifyingoperatorsorperformingqualityassurancechecksonintermediateresults.
The output of the CTA Agent is a specification of the problem space and a collection of prob-
lem instances. Minimally, the specification of the problem space will include a declaration of the
features relevant to problem solving (state description, path constraints), declaration of the appli-
cable operators, and search control. Determining the most appropriate “form” of the specification
is a subject of future work. Long-term, the form might be some kind of declarative language as
in SATLM (Ye et al., 2023b) or PDDL (Fox & Long, 2003) or we could investigate direct code
generation. Becausewearefocusedinthispaperonfeasibilityevaluation,werequirefornowthat
2.Forthisfeasibilityexploration,wefocussolelyontext. Futureelaborationsofthisarchitecturemightincludemulti-
modalinputs,giventheemergenceofmultimodalLLMs.
4PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
Figure2. Designspacealternativesforaproblem-formulationandproblem-solvingagent.
the form can be expressed in a consistent notation that can be directly mapped (by a human) to
knowledgecomponentsofthecognitivearchitecture.
Problem instances can be defined by both the CTA Agent and human users. For example,
in cognitive task analysis, it is common for the analyst to generate common and “edge” cases,
the purpose of which is to test the correctness and sufficiency of the (in progress) problem-space
formulation. TheCTAAgentshouldthusalsohavesuchcapability. However, wealsowanttotest
problem solving on problem instances that the LLM did not explicitly consider in formulating the
problemspace. Thus,thedesignanticipatesthathumanusersmayalsoaddprobleminstances.
Finally, the problem-space formulation is used by the problem-solving agent to produce solu-
tions for individual instances of the problem. For this paper, we assume that the problem-solving
agentconsistsofonlythefixedmechanismsoftheagentarchitectureandastoreofdomain-general
weakmethods. Theweakmethodsenablesearchforasolutionwithinthedefinedproblemspace.
We hypothesize that the problem-solving agent will be able to use the problem-space formula-
tionandtheweakmethodstosolve(many)probleminstanceswithoutneedinghumanintervention
orinputforeitherproblem-spaceformulationoradditionalknowledge(beyondtheweakmethods)
in the problem-solving agent. A secondary question is to assess the extent to which the cost of
solutionsissimilartohuman-formulatedproblemspaces. Forinstance,theCTAAgent’sproblem-
spaceformulationmightcorrectlyenumerateoperatorsandstatesbutomitsearchcontrol,resulting
inamuchlargersearchspacethanthehuman-createdproblem-spacespecification. Inotherwords,
agent-generated problem-space formulations that require many orders of magnitude more steps to
solvethanhuman-formulatedoneswouldonlypartiallysatisfythemainhypothesis.
Before continuing with the design of the CTA Agent and exploration of these hypotheses, we
briefly discuss two alternative systems designs, illustrated in Figure 2. One option, illustrated in
2(a), would be to use primarily LLM components to solve the problem. We include in this alter-
native not only prompt-engineering strategies such as chain-of-thought (Wei et al., 2022) and self-
consistency,butalsoagenticLLMapproachessuchasTreeofThoughts(ToT,Yaoetal.,2023a)and
GraphofThoughts(Bestaetal.,2024). Forexample,TreeofThoughtsattemptstosolveproblems
similartothoseweconsiderhereinbyhavingthelanguagemodelitselfgeneratesearchstates. State
descriptions,operators,goalevaluations,andsearchcontrolareallimplementedviapromptswithin
5R.E.WRAY,J.KIRK,J.E.LAIRD
thelanguagemodel. ToTpromptsandresponsesgenerallyusenaturallanguagegenerationandin-
terpretation(ratherthanformalrepresentationsornotation). ToTemploysasimplememory,astack
ofcontexts,toenablebacktrackinginthesearch. However,TreeofThoughtsusesmanuallycreated,
task-informedpromptstosupportproblem-spacesearch,inessencerequiringhumanmediationfor
problem-space formulation. In contrast, our approach seeks to enable general problem-solving
acrossmanytaskswithoutanytask-specificprompting(orotherhumanmediation),pre-training,or
fine-tuningforthedomain.
Anotherapproach,asin2(b),wouldbetocreateortolearnproblem-spaceformulationknowl-
edge within the agent itself. This approach is similar in spirit to work in Soar on Interactive Task
Learning (ITL, Kirk & Laird, 2016; Mininger, 2021), where an agent learns to perform new tasks
(playinggames,variousrobotictasks)viaaseriesofinteractionswithahumantolearngoals,con-
straints, and actions. In recent work, this ITL approach has been extended to integrate with an
LLM (Kirk et al., 2024). Rather than relying solely on human instruction, the agent extracts task
knowledge from the LLM (e.g., learning what to do with various items like an empty can or dirty
plate when tidying a kitchen). Integration with the LLM lessens what human feedback is needed
forlearningeveryday,familiartaskswhilemaintainingsolutionquality.
TworelatedbutdistinctrequirementsdistinguishourgoalsfromthoseofITLbroadly. First,we
seek to remove human mediation from problem solving, going directly from problem description
to solution. ITL, by design, depends on human input. Second, we seek to enable a problem solver
to attack problems where no human already understands or can formulate an apt problem space
for search (including the absence of solution(s) in the training data of the language model). In the
long term, we see ITL and this work as complementary. When an agent has access to a human or
existingdomain-specificresources,itcandrawonthosetosolveaproblem,usingcapabilitiessuch
asthosedevelopedforITL.Whenhumansarenotavailableand/orlittle/nopriorinformationabout
theproblemisknown,theagentcanstillattempttomakeprogressbyformulatingaproblemspace
andusingitsweakmethodstoattempttosearchforpotentialsolutions.
Finally, we observe that the application of LLMs to problem specification has been previously
explored, most notably by Valmeekam et al. (2023). They compared the results of native LLM
problem-solvingagainsttheresultsobtainedfromproblemspecification(wheretheLLMgenerated
PDDLasoutput)andthesubsequentapplicationofaplanningsystemusingthosespecificationsin
theblocksworlddomain. Consistentwithourhypothesis,thecombinationofLLM-mediatedprob-
lemspecificationandtheplannersignificantlyoutperformedtheLLMsolutionalone. Additionally,
theydemonstratedthatplan-repairsystemscouldconsistentlyimproveLLMplanspecificationsthat
wereincompleteorincorrect.
A key distinction in our ambition and their approach is that their approach provided a (natu-
rallanguage)descriptionoftheproblemspace. Forinstance, fortheblocksworld, auser-authored
promptdescribestheoperatorsinthedomainandtheireffects. OurgoalisforanLLMagenttogen-
eratethesedescriptionsofoperatorsandtheireffectsitself. However,theiroverallresultsdoprovide
compellingevidenceofpotentialbenefitsofcombiningLLM-generatedproblemspecificationsand
planning/searchtools.
6PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
Figure3. InitialdesignoftheCognitiveTaskAnalyst(CTA)LLMagent.
4. DesignoftheCognitiveTaskAnalyst
AnoveralldesignoftheCTAAgentisillustratedinFigure3. Astaskanalysisproceeds,theagent
choosesamongfour high-leveldirectionsinwhichto continueitsanalysis: 1) definingthecharac-
teristicsoftheproblem, 2)definingcharacteristicsofproblemsolving, 3)formulatingtheproblem
space, and 4) assessing the quality of the solution thus far. Within each of these four directions,
more specific analysis questions (represented as nodes and subnodes in the figure) further decom-
poseproblem-spaceformulation.
Leaf nodes are implemented as prompts for specific contributions to the task analysis. For
example, apromptmightasktheLLMtoidentifytheunknownsintheproblem-spaceformulation
orspecifythepreconditionsofanoperator(seenextsectionfordetailedexamples). Theresultfrom
eachprompt/responseisaddedtoamemorythatrepresentstheproblem-spaceformulationthusfar.
The contents of this memory are presented to the LLM with each individual prompt, creating an
evolving“context”foreachquery.
Thearrowsinthediagramareintendedtoconveytheagent’sabilitytodirectitsanalysisbased
on results thus far. Long-term, we envision an agent that can traverse this tree in many different
ways, guided by the results of analysis thus far. For one problem definition, it might explore in
a depth-first fashion (exploring problem characteristics first and then moving to problem-solving
characteristics),inanotheramorebreadth-firstfashion(e.g.,switchingbetweenproblemcharacter-
ization and problem-solving characterization), etc. In the implementation we describe below, the
7R.E.WRAY,J.KIRK,J.E.LAIRD
path(s) through the tree is fixed in order to best support feasibility analysis (e.g., comparison of
results;repeatability).
AdecisiongraphsuchastheoneillustratedinthefigurecanbeimplementedusingexistingLLM
development tools, such as LangGraph3 or CrewAI4. These tools support conditional execution of
nodes,variablepassingbetweennodes(Xuetal.,2023),anddynamicreflection(Shinnetal.,2023).
Reflection,orassessingintermediateresults,isparticularlyimportant. Itisrepresentedinthefigure
bythequalityassurancedirectionofanalysis,reflectingonwhathasbeenproducedthusfar.
In the next section, we illustrate what is input to and produced by a few of these nodes with
specificexamplesoftaskanalysisbasedonvariationsofthewaterjugtask. However, beforeturn-
ing to implementation results, we identify a few open/unresolved questions for a future, refined
implementationthatmotivateourgoalsofthisinitialfeasibilityimplementation.
• Generation for novel problems. An assessment of overall feasibility of the approach must
attempt to evaluate the ability of the CTA Agent to formulate problem spaces for problems
not in its training set. Variations include problems that are wholly novel and also problems
thatsharesomefeatureswithfamiliarproblemsbutthatarenovelinwhole. Inparticular,this
last class of problem requires that the LLM generate good, novel analysis while mitigating
the general tendency of LLMs to reproduce or “parrot” similar problems and solutions that
appeared in its training set. As we show further below, we introduce some variations of the
familiarwater-jugtasktobegintoassessthisquestion.
• Individual vs. distinct personas. While we envision the CTA Agent as having an analyst
roleorpersona,developingdistinctpersonasforLLMagentscanbebeneficialforimproving
performance. For example, STORM, a system that generates text comparable to Wikipedia
pages, implements separate editor and expert agents in the process of article development
(Shao et al., 2024). Similarly, we might implement the quality assessment part of the CTA
Agent to take on a quality-assurance (QA) engineer role (rather than the analyst role). Em-
bedding reflective/QA functions in the feasibility implementation will help us identify gaps
orunmetneeds.
• Integrated vs. distinct analytic strategies. Is the analytic process sufficiently similar across
differentclassesofproblemsthatasingleanalyticstrategy(asillustratedinFigure3)issuffi-
cient? ThisapproachassumesthatthetaskofdefiningaproblemspaceforaDFS/BFSprob-
lem (like water jugs) significantly overlaps with other problem-space classes. For instance,
definingahill-climbingsearchproblemspacerequiresidentifyingafunctiontomeasurepar-
tial progress. A means-end approach requires identifying differences, neither of which is
requiredforDFS/BFSproblems.
• Meansofinformationtransfer. Inthelongterm,acompleteimplementationoftheCTAAgent
shouldproduce“executionready”problem-spaceformulations. However,therearemanypo-
tential targets for expressing the problem-space formulation, from direct generation of code
3.https://python.langchain.com/docs/langgraph
4.https://crewai.io/
8PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
Figure4. FeasibilityimplementationoftheCognitiveTaskAnalyst(CTA)LLMagent.
(e.g.,expressionsoftheproblemspaceinSoarlanguage)tostand-aloneformalspecification
languages (e.g., PDDL, Green, 2024; Fox & Long, 2003). An LLM can successfully gener-
ate PDDL from natural language (Miglani & Yorke-Smith, 2020; Valmeekam et al., 2023).
However,fromourexperiencescreatingtranslatorsfromPDDLtoSoar,weknowthatformal
languages can impose representational and processing assumptions that do not take full ad-
vantage of architectural capabilities. For the initial implementation, we focus on having the
CTAAgentgenerateaformalnotationfortheproblem-spaceformulationandthenmanually
implementthatformalnotationdirectlyinSoarinordertobetterunderstandandevaluatethe
tradeoffsindirectencodingversusencodingtoanintermediateformsuchasPDDL.
5. FeasibilityImplementationandEvaluationPlan
WeimplementedaninitialversionoftheCTAAgentwithLangGraph.5 Asmentionedabove,inthis
initial feasibility implementation, the actual execution path through the network is sequential, fol-
lowingafixedpathwedefined. Additionally,becausewearelimitingourexplorationinthispaper
tooneproblemdomain(waterjugs)andvariationsofit,wedonotintroducethequestionsrelevant
tohill-climbingdomainsbecausewaterjugsdoesnothavean(obvious)measureofprogress. Sim-
ilarly, we omit problem-solving characterization because all the examples we explore are solvable
withbasicsearch.
Figure 4 summarizes the implemented agent. The agent first seeks to characterize the prob-
lem, then reflects/refines the characterization, then moves to problem-space formulation, search
control,andfinallytotheidentificationofpotentialstates/situationstotestthesystem. Theoverall
(system) prompt and the initial and refinement prompts for problem characterization are shown in
Table3. Eachnodeisimplementedusingaconsistentpattern: thegeneralcontext(system)prompt,
aproblemdescription,andspecificinstructionsforthatagent(e.g.,instructionsto“refinetheprior
formulation,”representedasfilledcirclesineachnode). Allnodepromptsarespecifictocognitive
5.Inatechnicalsense,theCTAAgentisimplementedasacollectionofLLMAgentsinLangGraph.Thatis,the“CTA
Agent”isimplementedasanumberofdifferent,interoperatingLLMagents,sometimescalleda“crew.”Wereferto
theentireapplicationasan“agent”inthispaperandtheindividualLLMagentsas“nodes.”
9R.E.WRAY,J.KIRK,J.E.LAIRD
Table3. ExamplesofpromptsusedintheCTAAgentfeasibilityprototype.
PromptType Prompt
SystemPrompt You are an expert in cognitive task analysis. You are helping to design a reason-
er/problem solver that can solve many different instances of a class of problem.
Problemsaredefinedin1-2paragraphs.Therewilloftenbeaspecificexampleprob-
lemprovided. However,yourresponsesshouldfocusoncontributionstothegeneral
formulationoftheproblemspace. Focuseachresponseonthemostrecent,specific
questionaskedofyou. Thequestionsaredesignedtobreaktheproblem-spacefor-
mulation into a set of discrete steps. Unless otherwise directed, be concise in each
response(i.e.,respondinonesentenceorexpression).
Problem Forthisresponse,focusoncharacterizingtheproblemitself. Usenotationif/aspos-
Characterization sibletocharacterizetheproblem. Beconcise. Whatistheinitialstate? Whatisthe
finalstate?Arethereillegal/impossiblestatesthatarenotallowedforthisproblem?
Ifso,identifythem.
Refinementof Youspecializeinreviewingtheworkofotheranalysts. GiventhePROBLEMDE-
Problem SCRIPTIONandthepreviousAIresponsecharacterizingtheproblem, yourtaskis
Characterization toimprovethepriorproblemcharacterization. Areelementsincorrect? Ifso,correct
them. Are elements missing? If so, add them. Focus on problem characterization
only(specificationsofstates)ratherthanwhatactionstotake. Areelementspoorly
formedorambiguous? Forexample, replacequalitativetermssuchaslessormore
with specific expressions that reflect quantitative values. Respond with a revised
problemcharacterizationthatreflectsyouranalysis. Usenotationtocharacterizethe
problem.
task analysis but do not mention or reference the problem. Variabilization of the problem descrip-
tionineachnodeallowstheagenttogeneratealternativeproblem-spaceformulationsforvariations
intheproblemdescription,aswehavedetailedbelow.
Inthisinitialversionoftheagent,allpreviouslygeneratedresponsesareprovidedtoeachsub-
sequent agent. That is, each subsequent node sees all the previous responses as context for its
response. Infuturework,wewillimplementaspecial-purposememorytoholdtheoverallproblem
characterizationandproblem-spaceformulation;wedidnotfindthatnecessaryforthisexploration.
Obviously,waterjugsisafamiliarproblem,andtheLLMsweareusinghaveexamplesofwater
jugsintheirtrainingset. However,becausethetrainingsetsofLLMsarevast,itisgenerallydifficult
to ensure that any known problem is not already represented. Further, known problems might bias
theLLM’sresponsetorespondingappropriatelytoslightvariationsinaproblemstatement(“strong
attractor”effect). Toexploretheseissues,wedevelopedanumberofdistinctdescriptionsofwater-
jug problems for this feasibility exploration. We introduce the following notation to summarize
specificwaterjugproblems: F|V|A(V ,...,Vol ) → Vol ). Theinitialletterrepresentsthecase
s l goal
type (Familiar, Variation, or Analogue). Table 4 shows one example from each of the three case
typesofaspecificproblemdescriptionpromptprovidedtotheLLM.
1. Familiar/Classic: These examples are intended to reflect examples likely in the training set
data. We use the exact wording of the water jugs problem as it appears in How to Solve It
(F(4,9) → 6), a specific instance of water jugs that appeared in the movie Die Hard with a
10PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
Table4. AlternativeproblemdescriptionsusedtoexploreandtoassessfeasibilityoftheCTAAgent.
Familiar: Thegeneralproblemistodeliveraspecificamountofwaterusingcontainersthatareopaqueand
have contain no graduated markings. The amount of water that needs to be delivered will generally differ
fromthefullcapacitiesofthecontainer. Asaspecificexample,howcanyoubringupfromtheriverexactly
6quartsofwaterwhenyouhaveonlytwocontainers,afourquartpailandaninequartpailtomeasurewith?
DistractorVariation(DifferentUnits): Thegeneralproblem... Asaspecificexample,howcanyoubring
upfromtheriverexactly6gallonsofwaterwhenyouhaveonlytwocontainers,a4-quartpailanda9-gallon
pailtomeasurewith?
SameStructure,NovelSurfaceFeatures: Youareanengineeronanalienspaceship. Thegeneralproblem
is to deliver a specific amount of “flucotone” (a type of energy) using flucotone-holding devices (FHDs).
FlucotonecanbetransferredtoFHDsuptotheirspecifiedcapacitywithnoenergy/flucotoneloss. AnFHD
canholdanyamountofflucotoneupitscapacitybutthereisnowaytomeasurehowmuchflucontoneisin
anFHDotherthanitbeingfullorempty. Theamountofflucotoneneededforanyspecifictaskwillgenerally
differ from the full capacities of available FHDs. As a specific example, assume a power plant that can
generatelimitlessflucotone. Fromthispowerplant,howcanyoudeliverexactly6unitsofflucotonetothe
engineroomwhenyouhaveonlytwoFHDs: a4-unitFHDanda9-unitFHD?
Vengeance(F(3,5) → 4),andaninstanceofthefamiliarproblemwithpossiblynovel(orat
leastuncommon)jugamounts(F(9,17) → 5).
2. Variations of water jugs: These examples are intended to trigger known solutions that are
inaptforthisproblemspace. Weconsidertwospecificvariations:
• Differentunits: Thewordingisthesameasinthefamiliarexamples,buttheunitsdiffer
betweenjugs(V(4qt,9gal) → 6gal)
• Additionaljugs: Thisproblemintroducesthreeratherthantwojugs(V(2,3,5) → 4).
3. Analogue: This case is meant to share structural identity with the familiar cases but little
surfacesimilarity;e.g.,(A(4,9) → 6). Weuse“analogue”todescribethese,ratherthan“dis-
guised”(e.g.,asin Valmeekametal.,2023),becausethereisanoverallconsistentsemantics
fortheanaloguecase,ratherthanwordsubstitution.
6. FeasibilityEvaluation
WeranallthevariationsabovewiththeCTAAgentusingGPT3.5(gpt-3.5-turbo-0125)andGPT4
(gpt-4-0125-preview)withtemperature=0.6 Forcomparison,wealsoranaone-shotproblem-space
formulation using a chain-of-thought instruction (Wei et al., 2022). We also presented LLM with
a request to solve each problem instance directly (also using a chain-of-thought prompt). In what
6.Temperature parameterizes the variability of sequential token generation by the LLM. Temperature=0 minimizes
variability. However, due to general indeterminism in token generation, temperature=0 responses will sometimes
differinresponsetothesamepromptandcontext. Forthisfeasibilityexploration,wegenerallyrantheLLMonce
foreachconditionandthusdidnotexplorepotentialvariability. ThetotalcostoftheAPItokens(forbothmodels)
fortheworkreportedinthispaperwas∼$3USD.
11R.E.WRAY,J.KIRK,J.E.LAIRD
Table5. ComparingGPT3.5andGPT4refinedproblemcharacterizationresults(A(4,9)→5).
GPT3.5 InitialState: (0,0)
FinalState: (x,y)wherex+y=6
Illegal/ImpossibleStates: Anystatewherex+y̸=6orxoryisnegative.
GPT4 Initial State (S0): (FHD1 = 0,FHD2 = 0), where FHD1 and FHD2 represent the
amountofflucotoneineachFlucotone-HoldingDevicerespectively.
Goal State (SG): A state where the total amount of flucotone delivered equals 6 units. This
can be represented as any state (FHD1,FHD2) where FHD1+FHD2 = 6 and 0 ≤
FHD1≤4,0≤FHD2≤9.
IllegalStates: AnystatewhereFHD1>4orFHD2>9
follows,wesummarizesomeofthenotableoutcomesfromthefeasibilitytesting,highlightingwith
examplesasspaceallows.7
SensitivityofModels: Generally,thecontentofGPT3.5resultswascomparabletothosefrom
GPT4. However, GPT4 clearly excelled in generating formal descriptions of the problem space.
Table5comparesresultsforA(4,9) → 6forrefinedproblemcharacterization. GPT3.5resultsare
comparativelylesspreciseintheuseofnotation(e.g.,thereisnomappingfrominitialstatevalues
to specific pails) and also incorrect (the initial state would be an illegal state with its definition).
Becauseformalnotationwillbebeneficialforfuturecodegeneration,wefocusonGPT4outcomes
for the remainder of the feasibility results. For the more fine-grained prompt/response interactions
we envision in Figure 3, GPT3.5 (or other models of comparable scale) could still prove adequate
inthelongterm.
Familiar Cases: As expected, a one-shot, chain-of-thought (CoT) prompt generally was suffi-
cient to achieve acceptable problem-space formulations for the familiar cases. For these cases, the
only advantage of the CTA Agent over one-shot CoT was that it enumerated better search control
knowledge. For the familiar cases, a one-shot, CoT solution prompt provided correct solutions for
F(3,5) → 4andsometimesF(4,9) → 6andeventheF(9,17) → 5problem(generatinga20-step
solution).
Mixed-unitVariation(V(4qt,9g) → 6g): Thisvariationdemonstratedasignificantimprove-
ment of the CTA Agent over the one-shot, CoT formulation, which never acknowledges or ref-
erences the mixed units. The CoT formulation also has no quantity specification for the transfer
operation, making it insufficient to use for an executable agent specification. The CTA Agent, in
contrast,definestheinitialstateas(0,0)where“thefirstelementofthetuplerepresentsthevolume
ingallonsinthe4-quartpail: Note4quarts=1gallon.” Giventhecorrectdefinitionofthestate,the
overallproblem-spacespecificationissufficientlydetailedforsuccessfulexecutioninaSoaragent.
Finally, theCoTsolvercorrectlyidentifiedthemixedunits(“the4-quartpailisessentiallya1-
gallonpail”)butwasnotabletoapplythisinformationinsubsequentsteps(thustreatingthe4-quart
pailasa4-gallonpailinitsproblem-solvingsteps).
Extra Jug Variation (V(2,3,5) → 4): Similar to the mixed-unit variation, the CTA Agent
formulation for this variation is complete and correct and sufficient for successful execution. It
7.TheAppendixdetailseachpromptandresponseandprovidesashortanalysisforeachindividualtestcondition.
12PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
Table6. Roleofrefinementinimprovingproblem-spaceformulation.
Problemcharacterization(V(2,3,5)→4)
Initial: InitialState: (0,0,0)representingtheamountofwaterinthe5-gallon,3-gallon,and2-gallon
pailsrespectively.
FinalState: (x,y,4)wherexandycanbeanyvaluesuchthatthetotalamountofwaterinall
containersequals4gallons. Theprimarygoalistohaveatotalof4gallons,notnecessarily
inonecontainer.
Revised: Initial State: (S = (0, 0, 0)), where each value represents the volume of water in the
initial
5-gallon,3-gallon,and2-galloncontainersrespectively.
GoalState(s): S = {(x,y,z)|x+y+z = 4},wherex ≤ 5,y ≤ 3,andz ≤ 2. Thisset
goal
of states reflects all combinations where the total volume of water equals exactly 4 gallons,
irrespectiveofthedistributionacrossthecontainers.
Operatorspecificationforproblem-spacecharacterization(A(4,9)→6)
Initial: Transfer(FHDx,FHDy):
TransfersflucotonefromFHDxtoFHDyuntilFHDxisemptyorFHDyisfull.
-Preconditions: FHDxisnotempty,andFHDyisnotfull.
-Postconditions:FHDxdecreasesbythetransferredamount,andFHDyincreasesbythesame
amount,withoutexceedingFHDy’scapacity.
Revised: Transfer(FHDx,FHDy)
-Preconditions: (FHDx>0)AND(FHDy<Capacity )
FHDy
- Postconditions: (FHDx’ = max(0, FHDx - (Capacity - FHDy))), (FHDy’ =
FHDy
min(Capacity ,FHDy+FHDx))
FHDy
ClarificationonTransferOperator:Theoriginalcharacterizationdidnotexplicitlyaccountfor
theexactamounttransferred. Therevisedpostconditionsnowclearlydefinethenewstatesof
FHDxandFHDyafterthetransfer,ensuringthatthetransferdoesnotexceedFHDy’scapacity
orresultinFHDxhavinganegativeamountofflucotone.
correctly specifies three values for the initial state (after refinement) and introduces two variables
to represent which jugs to use in each transfer operation. The CoT formulation is incomplete (im-
precise specification of transfer). The CoT solver generates the “known” solution to the Die Hard
problem,completelyignoringthe2-quartbarrelandthemoredirectsolutionitaffords.
Analogue(A : (4,9) → 6): Again,theCTAAgentresultiscompleteandcorrectandsufficient
for execution by Soar. The one-shot CoT was incomplete (again, lacking detail in the transfer op-
erators). However,theone-shotCoTsolvedtheproblemwithoutissue,suggestingthatthisspecific
problemisa“recognizable”water-jugsanalogtotheLLMandthusinsufficientlyobscured.
Refinement: The reflection/refinement steps in the CTA Agent were largely responsible for
enablingsufficientandprecisedetailinthespecification,differentiatingtheoutcomessignificantly
compared to the one-shot CoT formulation. Table 6 illustrates representative examples. In the
three-pail problem formulation, the initial state and goal states are inconsistent (4 quarts in the 2-
quartpail). Therevisedformulationismuchmoreprecise. Foroperatorspecification,thisexample
reflects a recurring pattern observed in the results: the introduction of an imprecise definition for
thetransferoperatoris“re-written”inrefinementtocapturethespecificconditionalityoftransfer.
Search Control: The CTA Agent did identify useful search control guidelines. For example,
forV(2,3,5) → 4,theagentrecognizedallofthepathconstraintsinthewater-jobsproblem-space
13R.E.WRAY,J.KIRK,J.E.LAIRD
formulationpresentedpreviously(Table2). Searchcontrolisimportant: thesesimplerulesofthumb
in F(9,17) → 5 decrease Soar’s iterative deepening search over 2 orders of magnitude (over 2M
decisionswithoutsearchcontroltoroughly15K withtheserules).
However, there are two clear gaps and requirements for future research. First, the LLM often
assertedthatnon-monotonicchangestothecontentsofacontainerwereundesired. However,most
(interesting) water-jugs problems rely on the insight that discarding the contents of a container is
required. Second,whiletheformalnotationforstatesandoperatorswascorrectandprecise,search
controlwasmoreoftenexpressedinlanguagethannotation. Evenwhennotationwasused,theno-
tationwasinsufficientfordirecttranslationtoSoar. Wecanelaboratesearchcontrolwithrefinement
analysis,whichwilllikelyimprovetheresultsmarginally. However,longterm,determininghowto
encode search control may require tight integration with a specific problem-solving system (or the
useofintermediate,declarativespecificationlanguagessuchasPDDL).
Test Cases/Test States: This step was the least successful of all the nodes we included in
the CTA Agent. It produced test cases, but they were (generally) neither obvious examples of
unit tests (e.g., representing the goal state to test goal recognition) nor alternative problem sets.
Neitherthisstepnortheproblemcharacterization(whichaskedforexamplesofundesiredstatesor
configurations) identified problematic test cases (e.g., a problem with two pails of the same size).
Again, in the long term, we can likely improve the generation of test cases, but the initial results
fromthisnodewerelimitedatbest.
7. Conclusions
We explored the feasibility of using agentic workflows with large language models to create spec-
ifications of problem spaces that are sufficient to enable knowledge-lean search for a solution in a
problem-solving architecture like Soar. The results were strongly but not unequivocally positive.
For the one class of problem we explored, the agentic approach provided sufficiently precise and
correctproblem-spacespecificationtoenablesuccessfulsearchinSoar. Further,insomecases,the
agenticapproachalsoidentifiedsearchcontrolknowledgethatsignificantlydecreasestheresulting
search space. The agentic roles defined in the Cognitive Task Analyst Agent were adequate for
the feasibility evaluation, especially the role of an expert analyst critiquing and refining ongoing
analysis in the Refinement nodes in the agent architecture. Limitations of the feasibility results in-
clude1)thefocusonsinglefamilyofproblems(especiallythequestionoftheactualnoveltyofthe
analogouscase),2)lesspreciseandusefulcontributionsfromtheSearchControlandTestCasegen-
erationnodes,and3)theneedforthelargerscaleLLMtogeneratesufficientlyprecisespecifications
for(future)codegeneration.
On balance, however, we conclude that this exploration does demonstrate the feasibility of a
morefull-featuredCTAAgent. Nextstepswillfocusonthreeenhancementstothemulti-node/agent
architecturedescribedhereaswellasautomatedgenerationofPDDL(orsimilar). First,wewillcre-
atemanymorenodes/agents,eachwithamorefine-grainedtaskorgoalthanthosedescribedhere.
Morefine-grainedagentswillresultinmorefine-grained,multi-agentinteraction(e.g.,betweenan-
alystandrefine/QAroles). Weexpectsuchfine-grainedinteractionwillbothimproveresultsoverall
and have the potential to enable the use of smaller-scale LLMs (consistent with emerging uses of
14PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
agenticworkflowsinotherapplicationdomains). Second,wewillextendtheoverallanalysisarchi-
tecture to a broader class of potential problem types (e.g., hill climbing and means-ends analysis).
Multiple problem types will require developing a Problem-Solving Characteristics agent (green
node in Figure 3), which was not explored in the feasibility prototype. Third, we will also explore
the definition of hierarchies of problem spaces rather than the simple problem-to-problem-space
mappingassumedhere. Wealsowillevaluatewithmanymoreproblemclasses.
WehypothesizethatthetypeofcapabilityenvisionedbytheCTAAgentdesigncouldhaveasig-
nificantimpactforthecognitivesystemscommunity. Completelyautomated,fullyreliableproblem-
spacespecificationmaybealong-termeffort. However,thesuccessofthefeasibilitydemonstration
suggeststhatasignificantfractionofknowledgecreationforsometypesofcognitive-systemsappli-
cations can be automated. A recurring challenge for this community is the requirement for human
mediation of agent knowledge to enable research systems and applications. This mediation limits
larger scientific impact because it is labor intensive to create broadly-capable and robust systems
andalsobecauseresearchersoutsidethiscommunitycanbeskepticaloftheactualcapabilityofthe
cognitive system relative to its developers. The automated problem specification approach has the
potential to mitigate both of these issues and may also offer new directions for cognitive-systems
research, such as alternative problem-representation strategies. Our expectation (and hope) is that
suchcapabilitywillcontributetofasterandlessmediateddevelopmentoffuturecognitivesystems.
15R.E.WRAY,J.KIRK,J.E.LAIRD
Acknowledgements
ThisworkwassupportedbytheOfficeofNavalResearch,contractN00014-21-1-2369. Theviews
and conclusions contained in this document are those of the authors and should not be interpreted
as representing the official policies, either expressed or implied, of the Department of Defense or
Office of Naval Research. The U.S. Government is authorized to reproduce and distribute reprints
forGovernmentpurposesnotwithstandinganycopyrightnotationhereon.
References
Arp,R.,Smith,B.,&Spear,A.D.(2015). BuildingOntologieswithBasicFormalOntology. MIT
Press.
Assanie,M.(2022). LearningGeneralandCorrectProceduralKnowledgeinaCognitiveArchitec-
ture. Thesis, University of Michigan, Ann Arbor. From http://deepblue.lib.umich.
edu/handle/2027.42/174544. Accepted: 2022-09-06T16:20:06Z.
Besta, M., et al. (2024). Graph of Thoughts: Solving Elaborate Problems with Large Language
Models. Proc. of 38th Annual AAAI Conference on Artificial Intelligence. Vancouver: arXiv.
ArXiv:2308.09687[cs].
Cai, J., Luo, J., Wang, S., & Yang, S. (2018). Feature selection in machine learning: A new
perspective. Neurocomputing,300,70–79.
Crandall,B.,Klein,G.,&Hoffman,R.R.(2006). WorkingMinds. Cambridge: MITPress.
Dong,X.L.,Moon,S.,Xu,Y.E.,Malik,K.,&Yu,Z.(2023). TowardsNext-GenerationIntelligent
AssistantsLeveragingLLMTechniques. Proceedingsofthe29thACMSIGKDDConferenceon
KnowledgeDiscoveryandDataMining(pp.5792–5793).LongBeachCAUSA:ACM.
Fikes,R.,&Nilsson,N.(1971). STRIPS:Anewapproachintheapplicationoftheoremprovingto
problemsolving. ArtificialIntelligence,2,189–208.
Fox,M.,&Long,D.(2003). PDDL2.1: AnExtensiontoPDDLforExpressingTemporalPlanning
Domains. JournalofArtificialIntelligenceResearch,20,61–124.
Gilardi, F., Alizadeh, M., & Kubli, M. (2023). ChatGPT outperforms crowd workers for text-
annotationtasks. ProceedingsoftheNationalAcademyofSciences,120,e2305016120.
Green,A.(2024). WhatisPDDL?
Hou,X.,etal.(2024). LargeLanguageModelsforSoftwareEngineering: ASystematicLiterature
Review. ArXiv:2308.10620[cs].
John, B. E., & Kieras, D. E. (1996). The GOMS family of user interface analysis techniques:
comparisonandcontrast. ACMTrans.Comput.-Hum.Interact.,3,320–351.
Kim, G., Baldi, P., & McAleer, S. (2023). Language models can solve computer tasks.
ArXiv:2303.17491[cs].
Kirk,J.R.,&Laird,J.E.(2016). LearningGeneralandEfficientRepresentationsofNovelGames
ThroughInteractiveInstruction. Proc.ofthe4thConferenceonAdvancesinCognitiveSystems.
16PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
Kirk, J. R., Wray, R. E., Lindes, P., & Laird, J. E. (2024). Improving Knowledge Extraction from
LLMsforTaskLearningthroughAgentAnalysis. Proceedingsofthe38thAnnualAAAIConfer-
enceonArtificialIntelligence.Vancouver: arXiv. ArXiv:2306.06770[cs].
Laird,J.E.(2012). TheSoarCognitiveArchitecture. Cambridge,MA:MITPress.
Laird, J. E., & Newell, A. (1983). A universal weak method. In P. S. Rosenbloom, J. E. Laird,
&A.Newell(Eds.), TheSoarPapers: ResearchonIntegratedIntelligence, volume1, 245–292.
Cambridge,MA:MITPress.
Laird,J.E.,Rosenbloom,P.S.,&Newell,A.(1986). ChunkinginSoar: Theanatomyofageneral
learningmechanism. MachineLearning,1,11–46.
Langley,P.(1994). Selectionofrelevantfeaturesinmachinelearning. ProceedingsoftheAAAIFall
SymposiumonRelevance(pp.140–144).NewOrleans: AAAIPress.
Miglani,S.,&Yorke-Smith,N.(2020). NLtoPDDL. WorkingNotesoftheICAPS’20Workshopon
KnowledgeEngineeringforPlanningandScheduling(KEPS’20). Publisher: ICAPS.
Mininger, A. (2021). Expanding Task Diversity in Explanation-Based Interactive Task Learning.
Ph.D.Thesis,UniversityofMichigan,AnnArbor.
Newell,A.(1969).HeuristicProgramming: Ill-structuredProblems.InJ.Aronofsky(Ed.),Progress
inOperationsResearchIII,360–414.NewYork: Wiley.
Newell, A. (1980). Reasoning, problem solving and decision processes: The problem space as a
fundamental category. In R. Nickerson (Ed.), Attention and Performance VIII. Hillsdale, NJ:
Erlbaum.
Newell, A., & Simon, H. A. (1963). GPS: A program that simulates human thought. In E. A.
Feigenbaum&J.Feldman(Eds.),ComputersandThought.NewYork: McGraw-Hill.
Newell,A.,&Simon,H.A.(1972). HumanProblemSolving. EnglewoodCliffs,NJ:Prentice-Hall.
Newell,A.,&Simon,H.A.(1976). ComputerScienceasEmpiricalenquiry: SymbolsandSearch.
CommunicationsoftheACM,19,113–126.
Nilsson,N.(1971). Problemsolvingmethodsinartificialintelligence. NewYork: McGraw-Hill.
Ozkaya,I.(2023). ApplicationofLargeLanguageModelstoSoftwareEngineeringTasks: Oppor-
tunities,Risks,andImplications. IEEESoftware,40,4–8. ConferenceName: IEEESoftware.
Polya,G.(2015).HowtoSolveIt: ANewAspectofMathematicalMethod.PrincetonN.J.: Princeton
UniversityPress.
Qin, Y., et al. (2023). Tool Learning with Foundation Models. Publisher: [object Object] Version
Number: 2.
Rumelhart, D. E., Hinton, G. E., & Williams, R. J. (1986). Learning representations by back-
propagatingerrors. Nature,323,533–536. Publisher: NaturePublishingGroup.
Schraagen, J. M., Chipman, S. F., & Shalin, V. L. (Eds.). (2000). Cognitive Task Analysis. New
York: PsychologyPress.
Schreiber, G., Akkermans, H., Anjewierden, A., de Hoog, R., Shadbolt, N., Van de Velde, W., &
Wielinga,B.(2000). KnowledgeEngineeringandManagement: TheCommonKADSMethodol-
17R.E.WRAY,J.KIRK,J.E.LAIRD
ogy. Cambridge: MITPress.
Shao, Y., Jiang, Y., Kanell, T. A., Xu, P., Khattab, O., & Lam, M. S. (2024). Assisting in Writing
Wikipedia-likeArticlesFromScratchwithLargeLanguageModels.
Shinn, N., Cassano, F., Berman, E., Gopinath, A., Narasimhan, K., & Yao, S. (2023). Reflexion:
LanguageAgentswithVerbalReinforcementLearning. 37thConferenceonNeuralInformation
ProcessingSystems.
Sutton,R.J.,&Barto,A.C.(1999). ReinforcementLearning. Cambridge,MA:MITPress.
Törnberg,P.(2023). HowtouseLLMsforTextAnalysis. ArXiv:2307.13106[cs].
Valmeekam,K.,Sreedharan,S.,Marquez,M.,Olmo,A.,&Kambhampati,S.(2023). OnthePlan-
ningAbilitiesofLargeLanguageModels(ACriticalInvestigationwithaProposedBenchmark).
ArXiv:2302.06706[cs].
Wang,L.,etal.(2024). ASurveyonLargeLanguageModelbasedAutonomousAgents. Frontiers
ofComputerScience,(toappear). ArXiv:2308.11432[cs].
Wei, J., Wang, X., Schuurmans, D., Bosma, M., Ichter, B., Xia, F., Chi, E., Le, Q. V., & Zhou, D.
(2022). Chain-of-ThoughtPromptingElicitsReasoninginLargeLanguageModels. Advancesin
NeuralInformationProcessingSystems,35,24824–24837.
Xu,B.,Peng,Z.,Lei,B.,Mukherjee,S.,Liu,Y.,&Xu,D.(2023). ReWOO:DecouplingReasoning
fromObservationsforEfficientAugmentedLanguageModels. ArXiv:2305.18323[cs].
Yao, S., Yu, D., Zhao, J., Shafran, I., Griffiths, T. L., Cao, Y., & Narasimhan, K. (2023a). Tree of
Thoughts: DeliberateProblemSolvingwithLargeLanguageModels. ArXiv:2305.10601[cs].
Yao, S., Zhao, J., Yu, D., Du, N., Shafran, I., Narasimhan, K. R., & Cao, Y. (2023b). ReAct:
SynergizingReasoningandActinginLanguageModels. TheEleventhInternationalConference
onLearningRepresentations,ICLR2023.Kigali,Rwanda: OpenReview.net.
Ye, J., Li, C., Kong, L., & Yu, T. (2023a). Generating Data for Symbolic Language with Large
Language Models. 2023 Conference on Empirical Methods in Natural Language Processing
(EMNLP2023).Singapore.
Ye, X., Chen, Q., Dillig, I., & Durrett, G. (2023b). SatLM: Satisfiability-Aided Language Models
UsingDeclarativePrompting. NeurIPS2023.NewOrleans: arXiv. ArXiv:2305.09656[cs].
18PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
Appendix
ThisappendixsummarizespromptsusedintheCTAAgentandtheresponseofnodes(LLMagents)
totheseprompts. Thesectionsare:
• CTAAgentPrompts(Includinggeneralsystempromptandtheinstructionalpromptforeach
node/agent)
• Chain-of-ThoughtProblemSpaceFormulationPrompt
• Chain-of-ThoughtSolutionPrompt
• ResultsfromFeasibilityTestCases
– ProblemDescription(usedforallthreeexperimentalsettingsforeachtestcase)
– LLMResponsefromCoTSolver
– LLMResponsefromCoTProblem-SpaceFormulation
– LLMResponsesfromCTAAgent(responsefromeachindividualnode)
WhilebothGPT3.5andGPT4modelswereexploredinthedevelopmentofthefeasibilitypro-
totype,theresultsreportedherearelimitedtoGPT4(modeldeclarativefromthesourcecodebelow)
model = ChatOpenAI(model="gpt−4−0125−preview",
temperature=0,
streaming=True)
PromptsforLLMNodesintheCTAAgent
This section summarizes each of the prompts used in the CTA Agent. The input prompt for each
node/LLMagentinthesystemfollowedtheformatbelow. Bracesdenotevariablesubstitution. The
generalsystemspromptwasthesameforallagents(andalsotheCoTproblem-formulationagent).
The problem description was changed from test to test but was the same for each run of the agent.
Eachagentwasthencustomizedwithspecificinstructionsforthestepintheanalysisbeingforthat
node. Theanalysisinstructionsforeachnodearedetailedintheremainderofthissection.
LLM_agent_template = """
{general_system_prompt}
SPECIFIC PROBLEM:
{problem_description}
{analysis_instructions}
LIMIT YOUR RESPONSE TO THIS QUESTION ONLY/ASPECT OF ANALYSIS."""
19R.E.WRAY,J.KIRK,J.E.LAIRD
GeneralSystemsPrompt
You are an expert in cognitive task analysis . \
You are helping to design a reasoner /problem solver that can
solve many different instances of a class of problem . \
Problems are defined in 1−2 paragraphs . There will be a specific
example problem provided . \
However , your responses should focus creating a general
formulation of the problem space , not a problem space specific
to the example only . \
Focus each response on the most recent , specific question asked
of you. \
The questions are designed to break the problem−space formulation
into a set of discrete steps . \
Unless otherwise directed , be concise in each response ( i .e. ,
respond in one sentence or expression ) .
Use these definitions :
Problem Space: A problem space consists a set of symbolic
structures ( the states of the space) and a set of operators
over the space . \
Each operator takes a state as input and produces a state as
output ( although there may be other inputs and outputs as well
) . \
The operators may be partial ( i .e. , not defined for all states ) .
Sequences of operators define paths that thread their way
through sequences of states .
Problem: A problem in a problem space consists of a set of
initial states , a set of goal states , and a set of path
constraints . \
The problem is to find a path through the space that starts at
the initial state , passes only along paths that satisfy the
path constraints , and ends at any goal state .
AnalysisInstructionsforProblemCharacterization
For this response , focus on characterizing the problem itself . \
What is the initial state? \
What is the final state? \
Are there illegal / impossible states that are not allowed for
this problem? If so , identify them.
20PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
Use formal notation and/ or mathematical expressions if / as
possible to characterize the problem . Be concise .
AnalysisInstructionsforRefinementofProblemCharacterization
You are an expert in Cognitive Task Analysis and specialize in
reviewing the work of other analysts . \
Given the PROBLEM DESCRIPTION and the previous response
characterizing the problem , improve the prior problem
characterization .\
Are elements incorrect? If so , correct them. \
Are elements missing? If so , add them. Focus on problem
characterization only ( specifications of states ) . We will ask
about actions and path constraints later . \
Are elements poorly formed or ambigious? Replace qualitative
terms such as ’less ’ or ’more’ with specific expressions that
reflect quantitative values . \
Respond with a revised problem characterization that reflects
your analysis . \
Use formal notation and/ or mathematical expressions to
characterize the problem . \
AnalysisInstructionsforOperators/Problem-SpaceCharacterization
For this response , focus on characterizing the problem space that
could be used to solve various instances of the problem . \
What actions / operators are relevant?
What are the preconditions for each operator?
What are the effects or postconditions of each operaetor?
Use formal notation and/ or mathematical expressions if / as
possible to characterize the problem space . Be concise .
AnalysisInstructionsforRefinementofProblem-SpaceCharacterization
You are an expert in Cognitive Task Analysis and specialize in
reviewing the work of other analysts .\
Given the PROBLEM DESCRIPTION and the previous AI response
characterizing the problem , your task is to improve the
problem space characterization .\
Does the set of operators appear complete? If not , suggest
additional operators .
21R.E.WRAY,J.KIRK,J.E.LAIRD
Are the preconditions for each operator correct? If not , corect
them.
Are the postconditions for each operator correct? If not , corect
them.
Focus on problem space characterization only ( specifications of
operators ) rather than the state specification .
Respond with a revised problem space characterization ( operators
with pre− and post−conditions ) that reflects your analysis . \
Use formal notation and/ or mathematical expressions to
characterize the problem space .
AnalysisInstructionsforDefiningSearchControl
The solution to this problem will be solved by a search from the
initial state to the goal state using the operators specified
thus far .\
Search can be made more efficient by identfying unproductive
paths such as loops and dead−ends . Your task is to identify /
specify these .
What are undesirable states ? For example , generating a state that
is identical to the initial state is often not a productive
step .
What are undesirable sequences of operator applications? For
example , an operator sequence that undoes the action of the
immediately previous operator is often not desirable .\
Use formal notation and/ or mathematical expressions to
characterize any undesirable states or operator sequences .
AnalysisInstructionsforIdentifyingTestStatesandTestCases
You are an expert in Cognitive Task Analysis and specialize in
identifying new problem instances .\
Given the PROBLEM DESCRIPTION and the previous AI responses
characterizing the problem and problem space , \
your task is to identify specific cases that test / evaluate the
problem space .\
Create three use cases . Number each case . For each case , specify
the initial state and goal state using the notation from the
problem characterization
and describe (in one short sentence ) why this is an apt test case
for the problem space .\
22PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
Emphasize the generation of "edge" cases that test assumptions in
the problem space .
PromptforOne-shot,Chain-of-ThoughtSolver
Prompt:
You are an expert problem solver with years of experience solving
many different types of puzzles . What is your solution for
this problem?
SPECIFIC PROBLEM:
{problem_description}
Think step −by−step in producing a response .
PromptforOne-shot,Chain-of-ThoughtProblem-SpaceFormulation
This agent used the general system prompt above, followed by the problem description, and then
theinstructionpromptbelow,whichisspecifictoonlythiscondition.
InstructionPrompt:
Produce a problem space formulation for the general problem ,
specifying initial and goal states , operators , \
and preconditions and postconditions for each operator . Identify
any illegal or undesirable states . Introduce and use notation
for describing states and operators .
Soar-AgentSolutions
AnexistingSoarproblem-solvingagentwasusedtogeneratewater-jugsolutionsforthetestcases.8
Thisagentusesiterativedeepening,guaranteeingthatanoptimal(minimumstep)solutionisfound.
The agent uses Soar’s impasse function to recognize that it does not what steps to apply to solve a
(new)problem. Itthengeneratesnewstatesinthesearchspacebyrandomlychoosingandapplying
operatorsinthecurrentsearchstateandthenevaluatingthosenewstates.
Evaluationsincludeidentifyingthegoalstate(searchcomplete),newstate(continuesearching),
depth criterion met (not the goal state but at the current iteration depth so return failure at this
depth),orafailurestate(seebelow). WhenSoar’schunkinglearningmechanismisenabled(“during
learning” and “after learning” in the results below), the results from evaluations are cached as the
search proceeds. Thus, when a specific failure state is encountered after having seen it once, the
8.TheagentisdistributedwithSoaraspartoftheSoartutorial.
23R.E.WRAY,J.KIRK,J.E.LAIRD
current search path can be immediately abandoned. Learning to recognize failure states in this
way can significantly reduce the total number of search states explored for a new problem. While
suchknowledgecompilationisahallmarkofSoarsystemsLairdetal.(1986);Laird(2012);Assanie
(2022),itofferspotentialwithintheCTAAgenttooffsetthecostofincompletegenerationofsearch
controlknowledge.
Tables7and8summarizethenumberofSoardecisions(deliberateproblem-solvingsteps)and
the number of search states explored for the water-jug cases discussed in the paper. The second
column in Table 7 shows the minimum path length (number of problem-space operators) for each
problem. NotethattheA(4,9) → 6caseisnotincludedinthetablesbecause,intermsoftheSoar
agent,resultswouldbeidenticaltothefamiliarF(4,9) → 6casealreadylisted.
Wereportresultsforanumberofdifferenttestconditionsforeachcase. First,werantheagent
with and without failure detection knowledge (the two primary columns in each table). For itera-
tive deepening, we define failure states to be ones in which the jugs are all empty or all full. This
approachdetectsloopswithoutrequiringmoredetailedsequencetracking,reflectingamoresophis-
ticatedunderstandingoftheproblem(andmitigatingthebookkeepingneedingtoavoidattempting
to record all unnecessary search states). With failure detection, the agent evaluates all empty or
all full states as dead ends and abandons them. In the agent without failure detection, all full/all
empty states are not marked as failures. As is evident in the results in Table 8, not abandoning
thesepathsincreasestheeffectivebranchingfactoroftheresultingsearchspace. Bydefinition,with
iterativedeepening,theagentcontinuallyexplorespathsthatincludethesestateseventhoughtthese
statesarenecessarilynotonthe(minimum-length)solutionpaththattheiterative-deepeningsearch
eventuallyfinds.
Table7. TotalSoarAgentDecisionsforVariousAgentConfigurationsfortheFeasibilityEvaluationTestCases.
withFailureDetection withoutFailureDetection
g g
nin ng nin ng
ng ar ni ng ar ni
oln rni Le ear rni Le ear
TestCase
Min.S NoLea During AfterL NoLea During AfterL
F(4,9) → 6 8 20,657 1357 9 80,434 2126 9
F(3,5) → 4 6 3355 548 7 8072 1087 7
600M+
F(9,17) → 5 20 86.9M 8201 21 (seenote) 7147 21
F(4q,9g) → 6g 6 3422 526 7 8071 801 7
F(2,3,5) → 4 4 1599 908 5 1890 860 5
Within each of the two primary conditions (the two groups of three columns), we report and
contrast three run-time settings: no learning, during learning, and after learning. For all configu-
24PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
Table8. SearchStatesExploredforVariousAgentConfigurationsfortheFeasibilityEvaluationTestCases.
withFailureDetection withoutFailureDetection
g g
nin ng nin ng
ng ar ni ng ar ni
rni Le ear rni Le ear
a g L a g L
oLe urin fter oLe urin fter
TestCase N D A N D A
F(4,9) → 6 5104 332 0 19055 556 0
F(3,5) → 4 841 89 0 1916 193 0
F(9,17) → 5 21.4M 1254 0 (seenote) 1114 0
F(4q,9g) → 6g 862 97 0 1929 136 0
F(2,3,5) → 4 363 212 0 421 199 0
rations other than the F(9,17) → 5 no learning cases, the table shows the results averaged over 5
runs.9
Theseresultsdemonstrateafewpointsrelativetoouroverallinvestigation:
• Problemsolvingreliability: SolutionstoallproblemsarereadilyfoundbySoar,evenforthe
problemsthatrequiremillionsofsearchstates(fornolearningconfigurations). Thisoutcome
is not surprising, but contrasts with LLM-only solutions, where ensuring a correct, reliable
(andevenrepeatable)resultisnotguaranteed.
• Onlinelearninghasalargeimpactonrequiredcomputation: Comparingtheduring-learning
andno-learningcasestooneanother,onecanobservetheimportantimpactoflearningduring
searchitself. Inthecase,theagentiscompilingitsevaluationsofsearchstatesasitencounters
themandisthenabletorecognizewhichstateswillleadtofailure(includingloopsinthewith
failure detection case). This compilation has a huge impact on how many search states are
neededasthenumberofstepsinthesolutionincreases.
• Importance of search control knowledge: Uncovering and including search control knowl-
edgeissometimesnotnecessaryforasolution,butitsabsencecansignificantlyincreasethe
amount of computation needed to solve a problem. These results are most apparent in com-
paring the “with” and “without failure detection” no-learning cases. However, even when
learning, comparing these two conditions, it is clear that learning can be used to cut off un-
productivesearchpathsmuchsoonerandthusfindsolutionsmorequickly. Thecombination
ofsearchcontrolandlearningmakesopen-endedproblemsearchmuchmorefeasibleforeven
problemswithalargebranchingfactorforsearch.
9.Results for F(9,17) → 5 for the “no learning” condition were just generated once, given the size of the search
spaces required. Additionally, the operating system ran out of application memory in the terminal process after
600Mdecisionsduetoupdatesprintedstatementstotheterminalprocess.Wedidnotattempttocompletethisrun.
25R.E.WRAY,J.KIRK,J.E.LAIRD
FeasibilityEvaluationTestCases
Thefollowingsectionssummarizeresultsforeachoftestcases. Eachsectionincludes1)theprob-
lem description provided to the CTA Agent nodes, 2) the results from one-shot, chain-of-thought
solutionprompt,3)theresultsfromone-shot,chain-of-thoughtproblem-space-formulationprompt,
andresultsfromtheCTAAgent.
Familiar: F(4,9) → 6
F(4,9) → 6ProblemDescription
The general problem is to deliver a specific amount of water using containers that are opaque and
havecontainnograduatedmarkings. Theamountofwaterthatneedstobedeliveredwillgenerally
differ from thefull capacities of thecontainer. As aspecific example, how can youbring up from
theriverexactly6quartsofwaterwhenyouhaveonlytwocontainers, afourquartpailandanine
quartpailtomeasurewith?
SoarAgentSolution
0: ==>S: S1
1: O: O1 ( initialize −water−jug−look−ahead)
S1: 4: 0
S1: 9: 0
2: O: O3 ( fill )
S1: FILL(9)
S1: 9: 9
3: O: O4 (pour)
S1: POUR(9:9 ,4:0)
S1: 4: 4
S1: 9: 5
4: O: O6 (empty)
S1: EMPTY(4)
S1: 4: 0
5: O: O12 (pour)
S1: POUR(9:5 ,4:0)
S1: 4: 4
S1: 9: 1
6: O: O14 (empty)
S1: EMPTY(4)
S1: 4: 0
7: O: O20 (pour)
S1: POUR(9:1 ,4:0)
S1: 4: 1
S1: 9: 0
26PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
8: O: O24 ( fill )
S1: FILL(9)
S1: 9: 9
9: O: O26 (pour)
S1: POUR(9:9 ,4:1)
S1: 4: 4
S1: 9: 6
S1 Solution Found!
One-shot,Chain-of-ThoughtSolution: F(4,9) → 6
Thissolutionisnotcorrect. SeeStep4.
To solve this problem , we can use a method called the Water Jug
Problem algorithm . Here ’s how you can bring up exactly 6
quarts of water using a 4−quart pail and a 9−quart pail :
1. Fill the 9−quart pail to its full capacity .
2. Pour the water from the 9−quart pail into the 4−quart pail
until the 4−quart pail is full . This leaves 5 quarts of water
in the 9−quart pail .
3. Empty the 4−quart pail .
4. Pour the remaining 5 quarts of water from the 9−quart pail
into the 4−quart pail .
5. Fill the 9−quart pail to its full capacity again .
6. Pour water from the 9−quart pail into the 4−quart pail until
the 4−quart pail is full . Since there are already 5 quarts in
the 4−quart pail , you only need to pour 1 more quart to reach
the desired 6 quarts .
By following these steps , you can accurately measure and deliver
exactly 6 quarts of water using the 4−quart and 9−quart pails .
One-shot,Chain-of-ThoughtProblem-SpaceFormulation: F(4,9) → 6
Thisformulationisgenerallycorrectandreasonablyformal. Thesearchcontrolisnothelpful(and
expressedlargelyinlanguage).
### Problem Space Formulation for the General Problem
#### States
− A state can be represented as a tuple \((C_1, C_2, \ ldots , C_n,
T) \) , where \( C_i \) represents the current amount of water in
container \( i \) ( for \( i = 1\) to \(n\) , where \(n\) is the
27R.E.WRAY,J.KIRK,J.E.LAIRD
number of containers ) , and \(T\) represents the target amount
of water to be delivered .
− Initial State : \((0 , 0, \ ldots , 0, T) \) , assuming all
containers are initially empty and \(T\) is the target amount
of water .
− Goal State : Any state \((C_1, C_2, \ ldots , C_n, T) \) where at
least one \( C_i = T\) or the sum of any combination of \( C_i \)
equals \(T\) .
#### Operators
1. **Fill **: Completely fill a container from the water source .
− **Precondition **: Container \( i \) is not full .
− **Postcondition **: Container \( i \) is full , \( C_i = \ text{
Capacity of } i \) .
2. **Empty**: Empty a container .
− **Precondition **: Container \( i \) is not empty.
− **Postcondition **: Container \( i \) is empty , \( C_i = 0\) .
3. **Transfer **: Transfer water from one container to another
until the source container is empty or the destination
container is full .
− **Precondition **: Container \( i \) is not empty , and
container \( j \) is not full .
− **Postcondition **: Water is transferred from \( i \) to \( j \)
until \( i \) is empty or \( j \) is full , updating \( C_i \) and
\( C_j \) accordingly .
#### Preconditions and Postconditions
− **Fill **:
− Pre : \( C_i < \ text{Capacity of } i \)
− Post : \( C_i = \ text{Capacity of } i \)
− **Empty**:
− Pre : \( C_i > 0\)
− Post : \( C_i = 0\)
− **Transfer **:
− Pre : \( C_i > 0\) and \( C_j < \ text{Capacity of } j \)
− Post : \(C_i ’ = \max(0 , C_i − (\ text{Capacity of } j − C_j)) \)
and \(C_j ’ = \min(\ text{Capacity of } j , C_j + C_i) \)
#### Illegal or Undesirable States
− Any state where \( C_i > \ text{Capacity of } i \) for any
container \( i \) is illegal ( overfilling a container ) .
28PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
− Any state where the sum of water in all containers exceeds the
target amount without any single container or combination of
containers exactly meeting the target amount is undesirable ,
as it does not solve the problem .
CTAAgent: F(4,9) → 6
This formulation is complete and precise. Interestingly (compared to many of the other results),
these refinement/revision results are more informal/“chatty” and do not use notation as reliably as
some of the other tests. The description and semi-formalization of loop detection is excellent for
thiscase.
InputPrompt
You are an expert in cognitive task analysis . You are helping to
design a reasoner /problem solver that can solve many different
instances of a class of problem . Problems are defined in 1−2
paragraphs . There will be a specific example problem provided .
However , your responses should focus creating a general
formulation of the problem space , not a problem space specific
to the example only . Focus each response on the most recent ,
specific question asked of you. The questions are designed to
break the problem−space formulation into a set of discrete
steps . Unless otherwise directed , be concise in each response
( i .e. , respond in one sentence or expression ) .
Use these definitions :
Problem Space: A problem space consists a set of symbolic
structures ( the states of the space) and a set of operators
over the space . Each operator takes a state as input and
produces a state as output ( although there may be other inputs
and outputs as well) . The operators may be partial ( i .e. , not
defined for all states ) . Sequences of operators define paths
that thread their way through sequences of states .
Problem: A problem in a problem space consists of a set of
initial states , a set of goal states , and a set of path
constraints . The problem is to find a path through the space
that starts at the initial state , passes only along paths that
satisfy the path constraints , and ends at any goal state .
PROBLEM DESCRIPTION:
29R.E.WRAY,J.KIRK,J.E.LAIRD
The general problem is to deliver a specific amount of water
using containers that are opaque and have contain no graduated
markings . The amount of water that needs to be delivered will
generally differ from the full capacities of the container .
As a specific example , how can you bring up from the river
exactly 6 quarts of water when you have only two containers , a
four quart pail and a nine quart pail to measure with?
The solution to this problem will be solved by a search from the
initial state to the goal state using the operators specified
thus far . Search can be made more efficient by identfying
unproductive paths such as loops and dead−ends . Your task is
to identify / specify these .
What are undesirable states ? For example , generating a state that
is identical to the initial state is often not a productive
step .
What are undesirable sequences of operator applications? For
example , an operator sequence that undoes the action of the
immediately previous operator is often not desirable .Use
formal notation and/ or mathematical expressions to
characterize any undesirable states or operator sequences .
LIMIT YOUR RESPONSE TO JUST THIS QUESTION/ASPECT OF ANALYSIS.
InitialProblemCharacterization
Initial State : Both containers are empty , represented as (0 , 0) ,
where the first value in the tuple represents the amount of
water in the four−quart pail and the second value represents
the amount of water in the nine−quart pail .
Final State : The goal is to have exactly 6 quarts of water in one
of the containers , which can be represented as either (4 , 6)
or (6 , 3) or any state where the total amount of water equals
6 quarts , with the understanding that the excess water , if any
, must be in the other container or discarded .
Illegal / Impossible States : Any state where the amount of water in
either container exceeds its capacity or is negative , i .e. ,
states where the first value is not in the range [0 , 4] or the
30PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
second value is not in the range [0 , 9] , are considered
illegal or impossible states .
RefinementofProblemCharacterization
The revised problem characterization , focusing on precision and
clarity , is as follows :
Initial State : \(S_{ initial } = (0 , 0) \) , where the first element
of the tuple represents the volume of water in the four−quart
pail , and the second element represents the volume of water in
the nine−quart pail .
Goal State (s) : \(S_{goal} = \{(x, y) | x + y = 6\}\) and \(x \ leq
4\) and \(y \ leq 9\) , indicating that the sum of the volumes
in both containers equals 6 quarts , within the constraints of
their capacities .
Illegal States : \(S_{illegal} = \{(x, y) | x > 4 \ lor y > 9 \ lor
x < 0 \ lor y < 0\}\) , representing any state where the volume
in either container exceeds its capacity or is negative .
InitialOperator/Problem-SpaceCharacterization
Apologies for the confusion in my previous responses . Let ’s
accurately define the actions / operators , preconditions , and
postconditions for the problem space :
### Operators
1. **Fill (p)**: Completely fill pail \(p\) from the river .
− Preconditions : \(p\) is not full .
− Postconditions : \(p\) is full .
2. **Empty(p)**: Empty all the water from pail \(p\) .
− Preconditions : \(p\) contains some water .
− Postconditions : \(p\) is empty.
3. **Transfer (p1 , p2)**: Pour water from pail \(p1\) to pail \(p2
\) until \(p1\) is empty or \(p2\) is full .
− Preconditions : \(p1\) is not empty and \(p2\) is not full .
− Postconditions : Water volume transferred from \(p1\) to \(p2
\) until \(p1\) is empty or \(p2\) is full .
31R.E.WRAY,J.KIRK,J.E.LAIRD
### Formal Notation
Let \(p_4\) and \(p_9\) represent the four−quart and nine−quart
pails , respectively . The state can be represented as a tuple
\((v_4 , v_9) \) , where \(v_4\) and \(v_9\) are the current
volumes of water in \(p_4\) and \(p_9\) , respectively .
1. **Fill (p)**:
− Preconditions : \(v_p < \ text{Capacity}(p) \)
− Postconditions : \(v_p’ = \ text{Capacity}(p) \)
2. **Empty(p)**:
− Preconditions : \(v_p > 0\)
− Postconditions : \(v_p’ = 0\)
3. **Transfer (p1 , p2)**:
− Preconditions : \(v_{p1} > 0 \ land v_{p2} < \ text{Capacity}(
p2) \)
− Postconditions : \(v_{p1}’ = \max(0 , v_{p1} + v_{p2} − \ text{
Capacity}(p2)) \) , \(v_{p2}’ = \min(\ text{Capacity}(p2) , v_{
p1} + v_{p2}) \)
These operators , along with their preconditions and
postconditions , define the actions that can be taken within
the problem space to move from the initial state towards the
goal state (s) .
RefinementofOperator/Problem-SpaceCharacterization
Upon further review , it ’s clear that the initial response did not
fully address the question regarding the completeness and
correctness of the set of operators , including their
preconditions and postconditions . Here is a refined and
corrected version of the problem space characterization :
### Operators for the Water Jug Problem
1. **Fill (p)**: Fill pail \(p\) to its full capacity .
− Preconditions : \(p\) is not already full .
− Postconditions : \(p\) becomes full , i .e. , if \(p\) is the
four−quart pail , its volume becomes 4 quarts ; if \(p\) is
the nine−quart pail , its volume becomes 9 quarts .
32PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
2. **Empty(p)**: Empty pail \(p\) .
− Preconditions : \(p\) contains some water (volume > 0) .
− Postconditions : \(p\) becomes empty , i .e. , its volume
becomes 0.
3. **Transfer (p1 , p2)**: Transfer water from pail \(p1\) to pail
\(p2\) until \(p1\) is empty or \(p2\) is full , whichever
comes first .
− Preconditions : \(p1\) contains water (volume > 0) and \(p2\)
is not full .
− Postconditions : Water is transferred from \(p1\) to \(p2\)
until \(p1\) is empty or \(p2\) is full . The volumes of \(
p1\) and \(p2\) are adjusted accordingly .
### Corrections and Additions
− **Addition of a Measure Operator**: It seems necessary to
explicitly define an operator for measuring the water if the
goal involves having an exact amount of water that does not
match the containers ’ capacities . However , given the problem
constraints , such an operator cannot be directly applied
because the containers are opaque and unmarked. Therefore , the
solution relies on the strategic use of fill , empty , and
transfer operations to achieve the goal state .
− **Clarification on Preconditions and Postconditions **:
− For **Fill (p)**, the precondition should explicitly state
that the pail ’s current volume is less than its capacity .
The postcondition should specify the exact volume after the
operation .
− For **Empty(p)**, the precondition is correctly stated as the
pail containing some water . The postcondition correctly
sets the pail ’s volume to 0.
− For **Transfer (p1 , p2)**, the preconditions and
postconditions need to account for the volumes before and
after the transfer , ensuring that the sum of the volumes in
\(p1\) and \(p2\) remains constant , and neither pail exceeds
its capacity nor goes below 0 quarts .
### Formal Notation Correction
33R.E.WRAY,J.KIRK,J.E.LAIRD
− The formal notation provided accurately captures the essence of
the operators but could be enhanced by specifying the
mathematical expressions for the volume changes during the
transfer operation , ensuring clarity in the postconditions for
all possible outcomes of the transfer .
In summary , the initial set of operators is fundamentally sound
but requires minor adjustments and clarifications ,
particularly in the precise definition of postconditions for
the transfer operation . The addition of an explicit measuring
or calculation step is not feasible within the given
constraints , emphasizing the need for strategic application of
the defined operators to achieve the goal state .
GenerationofSearchControl
Undesirable states in this problem are those where the actions
taken do not progress towards achieving the goal state of
having exactly 6 quarts of water in any container .
Specifically :
1. **States with the same volume of water as previously
encountered states **, which indicates a loop . For example ,
returning to state (0 , 0) after any sequence of operations .
2. **States where the total volume of water does not change
towards achieving the goal state **, such as transferring water
between containers without getting closer to having a total
of 6 quarts in one of them.
Undesirable sequences of operator applications include :
1. **Applying an operator that undoes the immediately previous
operator ’s action **, such as :
− Filling a pail and then immediately emptying it without any
intermediate beneficial action , represented as \( Fill (p) \
rightarrow Empty(p) \) or \(Empty(p) \ rightarrow Fill (p) \)
without changing the state of the other pail in between .
− Transferring water from one pail to another and then
immediately transferring it back without any intermediate
action that changes the state towards the goal , represented
as \( Transfer (p1 , p2) \ rightarrow Transfer (p2 , p1) \)
34PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
without any beneficial change in water volume towards
achieving the goal .
2. **Repeatedly filling and emptying the same pail without making
progress towards the goal**, which can be seen as a specific
case of the first undesirable sequence but is worth
highlighting due to its potential frequency in naive solution
attempts .
Formally , these can be characterized as follows :
− **Loop Detection **: If a state \(S_{current} = (v_4 , v_9) \) is
identical to any previously encountered state \(S_{previous }\)
, then the sequence of operations leading back to \(S_{current
}\) is undesirable .
− **Unproductive Operator Sequences**: If an operation \(O_1\)
directly followed by \(O_2\) results in a state \(S’\) that is
either identical to the initial state \(S\) or does not bring
the system closer to the goal state in terms of the total
volume of water being closer to 6 quarts , then the sequence
\([O_1, O_2]\) is undesirable . This can be mathematically
represented as :
− For \( Fill (p) \ rightarrow Empty(p) \) or \(Empty(p) \
rightarrow Fill (p) \) , if \(S’ = S\) , then the sequence is
undesirable .
− For \( Transfer (p1 , p2) \ rightarrow Transfer (p2 , p1) \) , if \(S
’ = S\) or \(|6 − (v_4’ + v_9 ’) | \geq |6 − (v_4 + v_9) |\) ,
then the sequence is undesirable , where \(v_4’ , v_9 ’\) are
the volumes of water in the pails after the sequence of
operations .
35R.E.WRAY,J.KIRK,J.E.LAIRD
Familiar: F(3,5) → 4
F(3,5) → 4ProblemDescription
The general problem is to deliver a specific amount of water using containers that are opaque and
havecontainnograduatedmarkings. Theamountofwaterthatneedstobedeliveredwillgenerally
differ from thefull capacities of thecontainer. As aspecific example, how can youbring up from
the river exactly 4 gallons of water when you have only two containers, a five gallon pail and a
threegallonpailtomeasurewith?
SoarAgentSolution
0: ==>S: S1
1: O: O1 ( initialize −water−jug−look−ahead)
S1: 3: 0
S1: 5: 0
2: O: O3 ( fill )
S1: FILL(5)
S1: 5: 5
3: O: O4 (pour)
S1: POUR(5:5 ,3:0)
S1: 3: 3
S1: 5: 2
4: O: O6 (empty)
S1: EMPTY(3)
S1: 3: 0
5: O: O12 (pour)
S1: POUR(5:2 ,3:0)
S1: 3: 2
S1: 5: 0
6: O: O16 ( fill )
S1: FILL(5)
S1: 5: 5
7: O: O18 (pour)
S1: POUR(5:5 ,3:2)
S1: 3: 3
S1: 5: 4
S1 Solution Found!
One-shot,Chain-of-ThoughtSolution: F(3,5) → 4
Thissolutioniscorrect.
To solve this problem , we can follow these steps :
36PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
1. Fill the 5−gallon pail completely with water from the river .
2. Pour the water from the 5−gallon pail into the 3−gallon pail
until the 3−gallon pail is full . This leaves 2 gallons of
water in the 5−gallon pail .
3. Empty the 3−gallon pail .
4. Pour the remaining 2 gallons of water from the 5−gallon pail
into the empty 3−gallon pail .
5. Fill the 5−gallon pail again .
6. Pour water from the 5−gallon pail into the 3−gallon pail until
the 3−gallon pail is full . This will take 1 gallon of water
from the 5−gallon pail , leaving exactly 4 gallons of water in
the 5−gallon pail .
By following these steps , you can accurately measure and deliver
exactly 4 gallons of water using the 5−gallon and 3−gallon
pails .
One-shot,Chain-of-ThoughtProblem-SpaceFormulation: F(3,5) → 4
Thisformulationiscorrectandtheoperatordefinitionsaresufficientlypreciseforexecution. Search
controloutputsarenotparticularlyuseful.
### Problem Space Formulation for the General Problem
#### States
− A state can be represented as a tuple \((C_1, C_2, \ ldots , C_n,
T) \) , where \( C_i \) represents the current amount of water in
container \( i \) ( for \( i = 1\) to \(n\) , where \(n\) is the
number of containers ) , and \(T\) represents the target amount
of water to be delivered .
− Initial State : \((0 , 0, \ ldots , 0, T) \) , assuming all
containers are initially empty and \(T\) is the target amount
of water .
− Goal State : Any state \((C_1, C_2, \ ldots , C_n, T) \) where at
least one \( C_i = T\) or the sum of any combination of \( C_i \)
equals \(T\) .
#### Operators
1. **Fill **: Completely fill a container from the water source .
− **Precondition **: Container \( i \) is not full .
− **Postcondition **: Container \( i \) is full , \( C_i = \ text{
Capacity of } i \) .
37R.E.WRAY,J.KIRK,J.E.LAIRD
2. **Empty**: Empty a container .
− **Precondition **: Container \( i \) is not empty.
− **Postcondition **: Container \( i \) is empty , \( C_i = 0\) .
3. **Transfer **: Transfer water from one container to another
until the source container is empty or the destination
container is full .
− **Precondition **: Container \( i \) is not empty , and
container \( j \) is not full .
− **Postcondition **: Water is transferred from \( i \) to \( j \)
until \( i \) is empty or \( j \) is full , updating \( C_i \) and
\( C_j \) accordingly .
#### Preconditions and Postconditions
− **Fill **:
− Pre : \( C_i < \ text{Capacity of } i \)
− Post : \( C_i = \ text{Capacity of } i \)
− **Empty**:
− Pre : \( C_i > 0\)
− Post : \( C_i = 0\)
− **Transfer **:
− Pre : \( C_i > 0\) and \( C_j < \ text{Capacity of } j \)
− Post : \(C_i ’ = \max(0 , C_i − (\ text{Capacity of } j − C_j)) \)
and \(C_j ’ = \min(\ text{Capacity of } j , C_j + C_i) \)
#### Illegal or Undesirable States
− Any state where \( C_i > \ text{Capacity of } i \) for any
container \( i \) is illegal ( overfilling a container ) .
− Any state where the sum of water in all containers exceeds the
target amount without any single container or combination of
containers exactly meeting the target amount is undesirable ,
as it does not solve the problem .
CTAAgent: F(3,5) → 4
This formulation is somewhat correct and sufficiently precise. This example is the well-known
Die Hard problem (see above; GPT volunteers that it recognizes this problem this way) and one
potential consequence of that familiarity is that the operators are defined as specific to 3-quart and
5-quartvolumes. Thisover-specificitydidrecurelsewhereinthedata.
InputPrompt
38PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
You are an expert in cognitive task analysis . You are helping to
design a reasoner /problem solver that can solve many different
instances of a class of problem . Problems are defined in 1−2
paragraphs . There will be a specific example problem provided .
However , your responses should focus creating a general
formulation of the problem space , not a problem space specific
to the example only . Focus each response on the most recent ,
specific question asked of you. The questions are designed to
break the problem−space formulation into a set of discrete
steps . Unless otherwise directed , be concise in each response
( i .e. , respond in one sentence or expression ) .
Use these definitions :
Problem Space: A problem space consists a set of symbolic
structures ( the states of the space) and a set of operators
over the space . Each operator takes a state as input and
produces a state as output ( although there may be other inputs
and outputs as well) . The operators may be partial ( i .e. , not
defined for all states ) . Sequences of operators define paths
that thread their way through sequences of states .
Problem: A problem in a problem space consists of a set of
initial states , a set of goal states , and a set of path
constraints . The problem is to find a path through the space
that starts at the initial state , passes only along paths that
satisfy the path constraints , and ends at any goal state .
PROBLEM DESCRIPTION:
The general problem is to deliver a specific amount of water
using containers that are opaque and have contain no graduated
markings . The amount of water that needs to be delivered will
generally differ from the full capacities of the container .
As a specific example , how can you bring up from the river
exactly 4 gallons of water when you have only two containers ,
a five gallon pail and a three gallon pail to measure with?
The solution to this problem will be solved by a search from the
initial state to the goal state using the operators specified
thus far . Search can be made more efficient by identfying
unproductive paths such as loops and dead−ends . Your task is
to identify / specify these .
39R.E.WRAY,J.KIRK,J.E.LAIRD
What are undesirable states ? For example , generating a state that
is identical to the initial state is often not a productive
step .
What are undesirable sequences of operator applications? For
example , an operator sequence that undoes the action of the
immediately previous operator is often not desirable .Use
formal notation and/ or mathematical expressions to
characterize any undesirable states or operator sequences .
LIMIT YOUR RESPONSE TO JUST THIS QUESTION/ASPECT OF ANALYSIS.
InitialProblemCharacterization
Initial State : (0 , 0) where the first value represents the amount
of water in the five −gallon pail and the second value
represents the amount of water in the three −gallon pail .
Final State : (4 , x) where x can be any value representing the
amount of water in the three −gallon pail , as the problem only
specifies needing exactly 4 gallons in the five −gallon pail .
Illegal / Impossible States : Any state where the amount of water in
the five −gallon pail is greater than 5 or less than 0, and
any state where the amount of water in the three −gallon pail
is greater than 3 or less than 0. Formally , these are states (
a , b) where a > 5 or a < 0, or b > 3 or b < 0.
RefinementofProblemCharacterization
The revised problem characterization , focusing on precision and
clarity , is as follows :
Initial State : \(S_{ initial } = (0 , 0) \) , where the first element
in the tuple represents the volume of water in the five −gallon
pail (\(V_{5gal }\) ) , and the second element represents the
volume of water in the three −gallon pail (\(V_{3gal }\) ) .
Goal State : \(S_{goal} = \{(4 , y) | y \ in \mathbb{Z}, 0 \ leq y \
leq 3\}\) , indicating that the goal is achieved when the five −
gallon pail contains exactly 4 gallons of water , and the three
40PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
−gallon pail can contain any amount of water from 0 to 3
gallons inclusive .
Constraints on States : Given the containers ’ capacities , the set
of all possible states is defined as \(S = \{(x, y) | x \ in \
mathbb{Z}, 0 \ leq x \ leq 5, y \ in \mathbb{Z}, 0 \ leq y \ leq
3\}\) . This formalization excludes any states where the volume
of water in either pail exceeds its capacity or is negative ,
ensuring all states are physically possible given the problem
constraints .
InitialOperator/Problem-SpaceCharacterization
Operators and their characteristics for the problem space are as
follows :
1. **Fill Operator (\( Fill_i \) )**:
− **Precondition **: Container \( i \) is not full .
− **Action**: Fill container \( i \) to its maximum capacity .
− **Effect **: \(S_{new} = (max_i , y) \) or \(S_{new} = (x,
max_j) \) , where \( max_i \) and \( max_j \) are the capacities
of containers \( i \) and \( j \) , respectively .
2. **Empty Operator (\( Empty_i \) )**:
− **Precondition **: Container \( i \) contains some water (\( >
0\) ) .
− **Action**: Empty all water from container \( i \) .
− **Effect **: \(S_{new} = (0 , y) \) or \(S_{new} = (x, 0) \) ,
depending on which container is emptied .
3. **Transfer Operator (\( Transfer_{i \ rightarrow j }\) )**:
− **Precondition **: Container \( i \) has water , and container
\( j \) is not full .
− **Action**: Transfer water from container \( i \) to container
\( j \) until container \( i \) is empty or container \( j \) is
full .
− **Effect **: \(S_{new} = (x − \ Delta , y + \ Delta) \) or \(S_{
new} = (x + \ Delta , y − \ Delta) \) , where \(\ Delta = \min(x,
max_j − y) \) or \(\ Delta = \min(y, max_i − x) \) , ensuring
the transfer does not exceed the capacity of the receiving
container or the available water in the transferring
container .
41R.E.WRAY,J.KIRK,J.E.LAIRD
These operators define the actions available in the problem space
, with their preconditions ensuring actions are only taken
when possible and their effects updating the state based on
the action taken .
RefinementofOperator/Problem-SpaceCharacterization
The revised problem space characterization , focusing on operators
with their preconditions and postconditions , is as follows :
1. **Fill Operator for Five−Gallon Pail (\( Fill_5 \) )**:
− **Precondition **: \(V_{5gal} < 5\)
− **Postcondition **: \(V_{5gal} = 5\)
2. **Fill Operator for Three−Gallon Pail (\( Fill_3 \) )**:
− **Precondition **: \(V_{3gal} < 3\)
− **Postcondition **: \(V_{3gal} = 3\)
3. **Empty Operator for Five−Gallon Pail (\( Empty_5\) )**:
− **Precondition **: \(V_{5gal} > 0\)
− **Postcondition **: \(V_{5gal} = 0\)
4. **Empty Operator for Three−Gallon Pail (\( Empty_3\) )**:
− **Precondition **: \(V_{3gal} > 0\)
− **Postcondition **: \(V_{3gal} = 0\)
5. **Transfer Operator from Five to Three (\( Transfer_ {5\
rightarrow3 }\) )**:
− **Precondition **: \(V_{5gal} > 0\) and \(V_{3gal} < 3\)
− **Postcondition **: \(V_{5gal} = V_{5gal} − \min(V_{5gal}, 3
− V_{3gal}) \) , \(V_{3gal} = V_{3gal} + \min(V_{5gal}, 3 −
V_{3gal}) \)
6. **Transfer Operator from Three to Five (\( Transfer_ {3\
rightarrow5 }\) )**:
− **Precondition **: \(V_{3gal} > 0\) and \(V_{5gal} < 5\)
− **Postcondition **: \(V_{3gal} = V_{3gal} − \min(V_{3gal}, 5
− V_{5gal}) \) , \(V_{5gal} = V_{5gal} + \min(V_{3gal}, 5 −
V_{5gal}) \)
42PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
These operators are designed to ensure that the actions taken are
valid within the constraints of the problem , specifically the
capacities of the containers and the goal of measuring out a
specific amount of water . The preconditions prevent actions
that are not possible given the current state (e.g. ,
transferring water from an empty container ) , and the
postconditions accurately reflect the state of the system
following the action .
GenerationofSearchControl
Undesirable states and sequences in this problem space include :
1. **Undesirable States **:
− States where the total volume of water does not change
towards achieving the goal state , such as repeatedly
filling and emptying the same container without
transferring water to the other container . Formally , any
sequence of operations that results in a state \(S = (x, y)
\) that is revisited without any intermediate state \(S’ =
(4 , y’) \) being a goal state is undesirable .
2. **Undesirable Sequences of Operator Applications **:
− Sequences that involve filling a container and then
immediately emptying it without any intermediate beneficial
action , e.g. , \( Fill_i ; Empty_i \) without a transfer
operation in between .
− Sequences that involve transferring water from one container
to another and then immediately reversing the transfer , e.
g. , \( Transfer_{i \ rightarrow j }; Transfer_{j \ rightarrow i
}\) without any intermediate operation that changes the
state towards the goal .
− Any sequence that leads to a loop , where the same set of
states is visited repeatedly without progress towards the
goal state , e.g. , \( Fill_i ; Transfer_{i \ rightarrow j };
Empty_j; Transfer_{j \ rightarrow i }\) repeated indefinitely
.
Formally , undesirable sequences can be characterized as any
sequence of operations \(\ sigma \) where the application of \(\
sigma \) on a state \(S\) results in a state \(S’\) such that
43R.E.WRAY,J.KIRK,J.E.LAIRD
\(S = S’\) or does not bring the system closer to any \(S_{
goal }\) , considering the defined goal states .
44PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
Familiar: F(9,17) → 5
F(9,17) → 5ProblemDescription
The general problem is to deliver a specific amount of water using containers that are opaque and
havecontainnograduatedmarkings. Theamountofwaterthatneedstobedeliveredwillgenerally
differ from thefull capacities of thecontainer. As aspecific example, how can youbring up from
the river exactly 5 gallons of water when you have only two containers, a 17-gallon pail and a
9-gallonpailtomeasurewith?
SoarAgentSolution
0: ==>S: S1
1: O: O1 ( initialize −water−jug−look−ahead)
S1: 17: 0
S1: 9: 0
2: O: O2 ( fill )
S1: FILL(17)
S1: 17: 17
3: O: O4 (pour)
S1: POUR(17:17 ,9:0)
S1: 9: 9
S1: 17: 8
4: O: O6 (empty)
S1: EMPTY(9)
S1: 9: 0
5: O: O12 (pour)
S1: POUR(17:8 ,9:0)
S1: 9: 8
S1: 17: 0
6: O: O16 ( fill )
S1: FILL(17)
S1: 17: 17
7: O: O18 (pour)
S1: POUR(17:17 ,9:8)
S1: 9: 9
S1: 17: 16
8: O: O20 (empty)
S1: EMPTY(9)
S1: 9: 0
9: O: O26 (pour)
S1: POUR(17:16 ,9:0)
S1: 9: 9
45R.E.WRAY,J.KIRK,J.E.LAIRD
S1: 17: 7
10: O: O28 (empty)
S1: EMPTY(9)
S1: 9: 0
11: O: O34 (pour)
S1: POUR(17:7 ,9:0)
S1: 9: 7
S1: 17: 0
12: O: O38 ( fill )
S1: FILL(17)
S1: 17: 17
13: O: O40 (pour)
S1: POUR(17:17 ,9:7)
S1: 9: 9
S1: 17: 15
14: O: O42 (empty)
S1: EMPTY(9)
S1: 9: 0
15: O: O48 (pour)
S1: POUR(17:15 ,9:0)
S1: 9: 9
S1: 17: 6
16: O: O50 (empty)
S1: EMPTY(9)
S1: 9: 0
17: O: O56 (pour)
S1: POUR(17:6 ,9:0)
S1: 9: 6
S1: 17: 0
18: O: O60 ( fill )
S1: FILL(17)
S1: 17: 17
19: O: O62 (pour)
S1: POUR(17:17 ,9:6)
S1: 9: 9
S1: 17: 14
20: O: O64 (empty)
S1: EMPTY(9)
S1: 9: 0
21: O: O70 (pour)
S1: POUR(17:14 ,9:0)
S1: 9: 9
46PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
S1: 17: 5
S1 Solution Found!
One-shot,Chain-of-ThoughtSolution: F(9,17) → 5
This20-stepsolutioniscorrect(althoughnottheshortestpathsolution).
To solve this problem , you can use the two containers (17−gallon
and 9−gallon ) to measure out exactly 5 gallons of water by
following these steps :
1. **Fill the 17−gallon pail completely from the river .** You now
have 17 gallons of water .
2. **Use the 17−gallon pail to fill the 9−gallon pail .** Pour
water from the 17−gallon pail into the 9−gallon pail until the
9−gallon pail is full . You will be left with 17 − 9 = 8
gallons of water in the 17−gallon pail .
3. **Empty the 9−gallon pail back into the river .** Now, you have
8 gallons in the 17−gallon pail and an empty 9−gallon pail .
4. **Transfer the 8 gallons from the 17−gallon pail to the 9−
gallon pail .** Now, the 17−gallon pail is empty , and the 9−
gallon pail has 8 gallons of water .
5. **Fill the 17−gallon pail completely from the river again .**
You now have 17 gallons in the 17−gallon pail and 8 gallons in
the 9−gallon pail .
6. **Top off the 9−gallon pail using the 17−gallon pail .** Since
the 9−gallon pail already has 8 gallons , it only needs 1 more
gallon to be full . Pour water from the 17−gallon pail into the
9−gallon pail until it is full . This leaves you with 17 − 1 =
16 gallons of water in the 17−gallon pail .
7. **Empty the 9−gallon pail back into the river .** Now, you have
16 gallons in the 17−gallon pail .
8. **Fill the 9−gallon pail from the 17−gallon pail .** This
leaves you with 16 − 9 = 7 gallons in the 17−gallon pail .
9. **Empty the 9−gallon pail back into the river again .**
47R.E.WRAY,J.KIRK,J.E.LAIRD
10. **Transfer the 7 gallons from the 17−gallon pail to the 9−
gallon pail .** Now, the 17−gallon pail is empty , and the 9−
gallon pail has 7 gallons .
11. **Fill the 17−gallon pail completely from the river again .**
You now have 17 gallons in the 17−gallon pail and 7 gallons in
the 9−gallon pail .
12. **Top off the 9−gallon pail using the 17−gallon pail .** Since
the 9−gallon pail already has 7 gallons , it only needs 2 more
gallons to be full . Pour water from the 17−gallon pail into
the 9−gallon pail until it is full . This leaves you with 17 −
2 = 15 gallons of water in the 17−gallon pail .
13. **Empty the 9−gallon pail back into the river .** Now, you
have 15 gallons in the 17−gallon pail .
14. **Fill the 9−gallon pail from the 17−gallon pail .** This
leaves you with 15 − 9 = 6 gallons in the 17−gallon pail .
15. **Empty the 9−gallon pail back into the river again .**
16. **Transfer the 6 gallons from the 17−gallon pail to the 9−
gallon pail .** Now, the 17−gallon pail is empty , and the 9−
gallon pail has 6 gallons .
17. **Fill the 17−gallon pail completely from the river again .**
You now have 17 gallons in the 17−gallon pail and 6 gallons in
the 9−gallon pail .
18. **Top off the 9−gallon pail using the 17−gallon pail .** Since
the 9−gallon pail already has 6 gallons , it only needs 3 more
gallons to be full . Pour water from the 17−gallon pail into
the 9−gallon pail until it is full . This leaves you with 17 −
3 = 14 gallons of water in the 17−gallon pail .
19. **Empty the 9−gallon pail back into the river .** Now, you
have 14 gallons in the 17−gallon pail .
20. **Fill the 9−gallon pail from the 17−gallon pail .** This
leaves you with 14 − 9 = 5 gallons in the 17−gallon pail .
48PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
Now, you have exactly 5 gallons of water in the 17−gallon pail ,
which was the goal .
One-shot,Chain-of-ThoughtProblem-SpaceFormulation: F(9,17) → 5
This formulation is correct but marginally precise enough to be used for execution. The transfer
operator’spost-conditionsaredescribedinnaturallanguageratherthanformalannotationandwould
notbesufficienttogenerateanoperatorimplementationforanexecutableagent.
### Problem Space Formulation for the General Problem
#### States
− A state can be represented as a tuple \((x, y) \) , where \(x\)
and \(y\) are the current amounts of water in the two
containers , respectively .
#### Initial State
− The initial state is \((0 , 0) \) , assuming both containers start
empty.
#### Goal State
− The goal state is defined as any state \((a , b) \) where \(a + b
= G\) , and \(G\) is the specific amount of water needed .
#### Operators
1. **Fill **: Filling a container to its full capacity .
− **Precondition **: Container is not full .
− **Postcondition **: Container is full , i .e. , if the first
container ’s capacity is \(C_1\) , then after filling , the
state is \((C_1, y) \) or \((x, C_2) \) for the second
container with capacity \(C_2\) .
2. **Empty**: Emptying a container completely .
− **Precondition **: Container is not empty.
− **Postcondition **: Container is empty , resulting in a state
\((0 , y) \) or \((x, 0) \) .
3. **Transfer **: Transferring water from one container to the
other until the first is empty or the second is full .
− **Precondition **: The source container is not empty , and the
destination container is not full .
49R.E.WRAY,J.KIRK,J.E.LAIRD
− **Postcondition **: Water is transferred from one container
to the other , resulting in a new state \((x’ , y’) \) , where
\(x ’\) and \(y ’\) depend on the initial amounts and the
capacities of the containers .
#### Illegal or Undesirable States
− Any state where the amount of water in either container exceeds
its capacity or is negative is considered illegal .
− States where the total amount of water does not move towards
achieving the goal (e.g. , unnecessary emptying and refilling
cycles that do not change the total amount of water held) can
be considered undesirable .
This formulation captures the essence of the problem space for
solving water measurement problems with two containers of
arbitrary capacities and a specific target volume.
CTAAgent: F(9,17) → 5
Thisformulationoutputiscorrectandsufficientlyprecisetosupportexecution. Thesearchcontrol
output,however,expressestheideathatthereshouldbemonotonicprogresstowardthegoal,which
is incorrect for water jugs generally (and this problem specifically). The concept of monotonic
progress toward the goal comes up in several other CoT outcomes, but generally has not been
common in the CTA Agent outcomes. One possible theory might be that the larger volumes (and
the much less frequent appearance in training data, if this combination appears at all), causes the
LLMtoreverttomoregeneralpatterns/rulesofthumb.
InputPrompt
You are an expert in cognitive task analysis . You are helping to
design a reasoner /problem solver that can solve many different
instances of a class of problem . Problems are defined in 1−2
paragraphs . There will be a specific example problem provided .
However , your responses should focus creating a general
formulation of the problem space , not a problem space specific
to the example only . Focus each response on the most recent ,
specific question asked of you. The questions are designed to
break the problem−space formulation into a set of discrete
steps . Unless otherwise directed , be concise in each response
( i .e. , respond in one sentence or expression ) .
Use these definitions :
50PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
Problem Space: A problem space consists a set of symbolic
structures ( the states of the space) and a set of operators
over the space . Each operator takes a state as input and
produces a state as output ( although there may be other inputs
and outputs as well) . The operators may be partial ( i .e. , not
defined for all states ) . Sequences of operators define paths
that thread their way through sequences of states .
Problem: A problem in a problem space consists of a set of
initial states , a set of goal states , and a set of path
constraints . The problem is to find a path through the space
that starts at the initial state , passes only along paths that
satisfy the path constraints , and ends at any goal state .
PROBLEM DESCRIPTION:
The general problem is to deliver a specific amount of water
using containers that are opaque and have contain no graduated
markings . The amount of water that needs to be delivered will
generally differ from the full capacities of the container .
As a specific example , how can you bring up from the river
exactly 5 gallons of water when you have only two containers ,
a 17−gallon pail and a 9−gallon pail to measure with?
The solution to this problem will be solved by a search from the
initial state to the goal state using the operators specified
thus far . Search can be made more efficient by identfying
unproductive paths such as loops and dead−ends . Your task is
to identify / specify these .
What are undesirable states ? For example , generating a state that
is identical to the initial state is often not a productive
step .
What are undesirable sequences of operator applications? For
example , an operator sequence that undoes the action of the
immediately previous operator is often not desirable .Use
formal notation and/ or mathematical expressions to
characterize any undesirable states or operator sequences .
LIMIT YOUR RESPONSE TO JUST THIS QUESTION/ASPECT OF ANALYSIS.
51R.E.WRAY,J.KIRK,J.E.LAIRD
InitialProblemCharacterization
Initial State : Two containers , a 17−gallon pail and a 9−gallon
pail , both empty (0 gallons in each) .
Final State : Exactly 5 gallons of water in one of the containers .
Illegal / Impossible States : Any state where the amount of water in
either container exceeds its capacity ( i .e. , >17 gallons in
the 17−gallon pail or >9 gallons in the 9−gallon pail ) or is
negative .
RefinementofProblemCharacterization
The revised problem characterization , focusing on precision and
clarity , is as follows :
Initial State : \(S_{ initial } = \{(x=0, y=0) \}\) , where \(x\)
represents the volume of water in the 17−gallon pail and \(y\)
represents the volume of water in the 9−gallon pail , both
measured in gallons .
Goal State : \(S_{goal} = \{(x=5, y=0) \ lor (x=0, y=5) \}\) ,
indicating that the goal is achieved when either the 17−gallon
pail (\(x\) ) or the 9−gallon pail (\(y\) ) contains exactly 5
gallons of water , with the other container ’s volume being
irrelevant to the goal condition .
Illegal States : Defined by the conditions \(x > 17\) , \(x < 0\) ,
\(y > 9\) , or \(y < 0\) , representing states where the volume
of water in either container exceeds its capacity or is
negative , which are physically impossible .
InitialOperator/Problem-SpaceCharacterization
Operators and their conditions in the problem space are as
follows :
1. **Fill** an empty container to its full capacity :
− **Precondition **: Container \(C\) is not full , \(C \ in \{9 ,
17\}\) gallons .
− **Effect **: Container \(C\) becomes full , \( State (C) =
Capacity(C) \) .
52PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
2. **Empty** a container :
− **Precondition **: Container \(C\) is not empty.
− **Effect **: Container \(C\) becomes empty , \( State (C) = 0\) .
3. **Transfer** water from one container to another until the
source is empty or the destination is full :
− **Precondition **: Container \(A\) is not empty , and
Container \(B\) is not full , \(A, B \ in \{9 , 17\}\) , \(A \
neq B\) .
− **Effect **: Water is transferred from \(A\) to \(B\) until
\(A\) is empty or \(B\) is full , whichever comes first . The
new state is \( State (A) = max(0 , State (A) − (Capacity(B) −
State (B))) \) , \( State (B) = min(Capacity(B) , State (B) +
State (A)) \) .
These operators allow for the manipulation of water volumes
within the constraints of the containers ’ capacities and the
goal of measuring out a specific amount of water .
RefinementofOperator/Problem-SpaceCharacterization
Upon review , the operators need refinement for clarity and
completeness , particularly in specifying the preconditions and
postconditions accurately . Here is the revised problem space
characterization :
1. **Fill** a container to its full capacity :
− **Precondition **: \( State (C) < Capacity(C) \) , where \(C\) is
either the 17−gallon or the 9−gallon container .
− **Postcondition **: \( State (C) = Capacity(C) \) .
2. **Empty** a container :
− **Precondition **: \( State (C) > 0\) .
− **Postcondition **: \( State (C) = 0\) .
3. **Transfer** water from one container to another :
− **Precondition **: \( State (A) > 0\) and \( State (B) < Capacity
(B) \) , where \(A\) and \(B\) are distinct containers .
− **Postcondition **: If \( State (A) + State (B) \ leq Capacity(B)
\) , then \( State (B) ’ = State (A) + State (B) \) and \( State (A)
’ = 0\) . If \( State (A) + State (B) > Capacity(B) \) , then \(
53R.E.WRAY,J.KIRK,J.E.LAIRD
State (A) ’ = State (A) − (Capacity(B) − State (B)) \) and \(
State (B) ’ = Capacity(B) \) .
These revisions ensure that the operators are defined for all
relevant states in the problem space , accurately reflecting
the possible actions ( fill , empty , transfer ) and their effects
on the states of the containers .
GenerationofSearchControl
Undesirable states and sequences in this problem space include :
1. **Undesirable States **:
− States where the total volume of water in both containers
does not bring us closer to the goal state , specifically
when the sum of water in both containers is less than 5
gallons after an operation , or exceeds the sum of the goal
state and one container ’s capacity (e.g. , \(x + y > 22\)
for a goal of 5 gallons , considering a 17−gallon and a 9−
gallon container ) .
2. **Undesirable Sequences of Operator Applications **:
− Repeatedly filling and then emptying the same container
without transferring water to the other container (\( Fill (C
) \ rightarrow Empty(C) \ rightarrow Fill (C) \) without a \(
Transfer \) in between) .
− Transferring water back and forth between containers without
changing the state towards the goal (\( Transfer (A, B) \
rightarrow Transfer (B, A) \) without any other operation
that moves towards the goal state ) .
− Any sequence that leads to a state previously encountered ,
as this indicates a loop .
Formally , we can denote undesirable sequences as those that
include operations \(O_i\) and \(O_{i +1}\) where \(O_i\)
undoes the effect of \(O_{i +1}\) or vice versa , specifically :
− If \(O_i = Fill (C) \) and \(O_{i+1} = Empty(C) \) , or \(O_i =
Empty(C) \) and \(O_{i+1} = Fill (C) \) , without a \( Transfer \)
operation to the other container in between , this sequence is
undesirable .
− If \(O_i = Transfer (A, B) \) and \(O_{i+1} = Transfer (B, A) \)
resulting in a state \( S_j \) that is identical to a previous
54PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
state \(S_k\) , where \( j > k\) , this indicates a loop and is
undesirable .
These guidelines help in pruning the search space by avoiding
actions that do not contribute to reaching the goal state more
efficiently .
55R.E.WRAY,J.KIRK,J.E.LAIRD
Variation: V(4q,9g) → 6g
V(4q,9g) → 6g ProblemDescription
The general problem is to deliver a specific amount of water using containers that are opaque and
havecontainnograduatedmarkings. Theamountofwaterthatneedstobedeliveredwillgenerally
differ from thefull capacities of thecontainer. As aspecific example, how can youbring up from
theriverexactly6gallonsofwaterwhenyouhaveonlytwocontainers, a4-quartpailanda9-gallon
pailtomeasurewith?
SoarAgentSolution
1: O: O1 ( initialize −water−jug−look−ahead)
S1: 1: 0
S1: 9: 0
2: O: O3 ( fill )
S1: FILL(9)
S1: 9: 9
3: O: O4 (pour)
S1: POUR(9:9 ,1:0)
S1: 1: 1
S1: 9: 8
4: O: O6 (empty)
S1: EMPTY(1)
S1: 1: 0
5: O: O12 (pour)
S1: POUR(9:8 ,1:0)
S1: 1: 1
S1: 9: 7
6: O: O14 (empty)
S1: EMPTY(1)
S1: 1: 0
7: O: O20 (pour)
S1: POUR(9:7 ,1:0)
S1: 1: 1
S1: 9: 6
S1 Solution Found!
One-shot,Chain-of-ThoughtSolution: V(4q,9g) → 6g
This result is somewhat interesting in its incorrectness. It immediately identifies the 4-quart pail
asidenticaltoa1-gallonpailandcorrectlychoosestostartbyfillingthe9-gallonpail(theshortest
solution to this problem is to fill the 9-gallon pail and then transfer 1-gallon to the other pail three
56PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
times, emptying the 1-gallon pail after each pour). The mistake comes in step 4, where the LLM
doesnotrecognizethatthe6-gallonstateisreached.
To solve this problem , we need to use the two containers we have
a 4−quart pail and a 9−gallon pail to measure out exactly 6
gallons of water . It is important to note that 1 gallon equals
4 quarts , so the 4−quart pail is essentially a 1−gallon pail .
Here ’s a step −by−step solution :
1. **Fill the 9−gallon pail to the top with water from the river
.** This is your starting point .
2. **Use the 9−gallon pail to fill the 4−quart (1−gallon ) pail .**
After doing this , you will have 8 gallons of water left in
the 9−gallon pail .
3. **Empty the 4−quart (1−gallon ) pail back into the river .** Now
, you’re ready to measure more water .
4. **Repeat steps 2 and 3 three more times .** Each time , you
transfer 1 gallon from the 9−gallon pail to the 4−quart pail
and then empty it , reducing the water in the 9−gallon pail by
1 gallon each time . After doing this three more times , you
will have transferred and emptied a total of 4 gallons ,
leaving you with 4 gallons in the 9−gallon pail .
5. **Fill the 4−quart (1−gallon ) pail again from the 9−gallon
pail .** Now, you have 3 gallons left in the 9−gallon pail .
6. **Empty the 4−quart (1−gallon ) pail back into the river , and
then fill it again from the 9−gallon pail .** This leaves you
with exactly 2 gallons in the 9−gallon pail .
7. **Pour the 2 gallons from the 9−gallon pail into a separate
container ( if available ) or carefully hold it if another
container is not available .**
8. **Fill the 9−gallon pail to the top again and add the 2
gallons you set aside to the 9−gallon pail .** Now, you have
exactly 11 gallons in the 9−gallon pail .
57R.E.WRAY,J.KIRK,J.E.LAIRD
9. **Use the 9−gallon pail to fill the 4−quart (1−gallon ) pail
five times , emptying it each time back into the river .** This
process will remove 5 gallons from the 9−gallon pail , leaving
you with exactly 6 gallons .
This solution effectively uses the tools available to measure out
exactly 6 gallons of water , despite the containers not being
initially suited for the exact measurement needed .
One-shot,Chain-of-ThoughtProblem-SpaceFormulation: V(4q,9g) → 6g
This solution is underspecified and insufficient to form a correct, executable set of operators for
search. The units of the pails (which are different from one another in this variation) are never
referenced in the problem formulation at all. Similar to other results from one-shot, CoT problem
formulation, the transfer operator is incompletely specified which is an critical gap for the mixed
unitsversionoftheprobleminparticular.
### Problem Space Formulation for the General Problem
#### States
− A state can be represented as a tuple \((V_1, V_2) \) , where \(
V_1\) and \(V_2\) are the volumes of water in the two
containers at any point in time .
#### Initial State
− The initial state is \((0 , 0) \) , assuming both containers start
empty.
#### Goal State
− The goal state is defined as any state \((V_1, V_2) \) where \(
V_1 + V_2 = G\) and \(G\) is the specific amount of water
needed .
#### Operators
1. **Fill **: Fills a container to its full capacity .
− **Preconditions **: Container is not full .
− **Postconditions **: Container is full .
2. **Empty**: Empties a container completely .
− **Preconditions **: Container is not empty.
− **Postconditions **: Container is empty.
58PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
3. **Transfer **: Transfers water from one container to the other
until the source container is empty or the destination
container is full .
− **Preconditions **: The source container is not empty , and
the destination container is not full .
− **Postconditions **: Water volume is transferred from one
container to the other .
#### Illegal or Undesirable States
− Any state where \(V_1\) or \(V_2\) exceeds the capacity of its
respective container is illegal .
− Any state where \(V_1\) or \(V_2\) is negative is illegal .
This formulation captures the essence of the problem space for
solving water delivery problems with containers of unmarked
capacities , focusing on the operations that can be performed
and the conditions that govern these operations .
CTAAgent: V(4q,9g) → 6g
InputPrompt
You are an expert in cognitive task analysis . You are helping to
design a reasoner /problem solver that can solve many different
instances of a class of problem . Problems are defined in 1−2
paragraphs . There will be a specific example problem provided .
However , your responses should focus creating a general
formulation of the problem space , not a problem space specific
to the example only . Focus each response on the most recent ,
specific question asked of you. The questions are designed to
break the problem−space formulation into a set of discrete
steps . Unless otherwise directed , be concise in each response
( i .e. , respond in one sentence or expression ) .
Use these definitions :
Problem Space: A problem space consists a set of symbolic
structures ( the states of the space) and a set of operators
over the space . Each operator takes a state as input and
produces a state as output ( although there may be other inputs
and outputs as well) . The operators may be partial ( i .e. , not
defined for all states ) . Sequences of operators define paths
that thread their way through sequences of states .
59R.E.WRAY,J.KIRK,J.E.LAIRD
Problem: A problem in a problem space consists of a set of
initial states , a set of goal states , and a set of path
constraints . The problem is to find a path through the space
that starts at the initial state , passes only along paths that
satisfy the path constraints , and ends at any goal state .
PROBLEM DESCRIPTION:
The general problem is to deliver a specific amount of water
using containers that are opaque and have contain no graduated
markings . The amount of water that needs to be delivered will
generally differ from the full capacities of the container .
As a specific example , how can you bring up from the river
exactly 6 gallons of water when you have only two containers ,
a 4−quart pail and a 9−gallon pail to measure with?
The solution to this problem will be solved by a search from the
initial state to the goal state using the operators specified
thus far . Search can be made more efficient by identfying
unproductive paths such as loops and dead−ends . Your task is
to identify / specify these .
What are undesirable states ? For example , generating a state that
is identical to the initial state is often not a productive
step .
What are undesirable sequences of operator applications? For
example , an operator sequence that undoes the action of the
immediately previous operator is often not desirable .Use
formal notation and/ or mathematical expressions to
characterize any undesirable states or operator sequences .
LIMIT YOUR RESPONSE TO JUST THIS QUESTION/ASPECT OF ANALYSIS.
InitialProblemCharacterization
Initial State : Both containers are empty , represented as (0 , 0) ,
where the first value in the tuple represents the amount of
water in the 4−quart pail (with a maximum capacity of 1 gallon
, since 4 quarts = 1 gallon ) , and the second value represents
the amount of water in the 9−gallon pail .
Final State : The goal is to have exactly 6 gallons of water in
one of the containers , which can be represented as either (x,
60PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
6) or (6 , y) , where x and y can be any value that does not
exceed the respective container ’s capacity .
Illegal / Impossible States : Any state where the amount of water in
either container exceeds its capacity is illegal . Thus ,
states where the first value is greater than 1 or the second
value is greater than 9 are not allowed . Additionally , since
the problem specifies delivering a specific amount of water ,
any state that does not contribute to achieving exactly 6
gallons in one of the containers could be considered
irrelevant or outside the problem space , depending on the path
constraints defined later .
RefinementofProblemCharacterization
The revised problem characterization , focusing on precision and
clarity , is as follows :
Initial State : \(S_{ initial } = (0 , 0) \) , where the first element
of the tuple represents the volume in gallons in the 4−quart
pail (\(P_{4qt }\) ) and the second element represents the
volume in gallons in the 9−gallon pail (\(P_{9gal }\) ) . Note: 4
quarts = 1 gallon .
Goal State : \(S_{goal} = \{(x, 6) , (6 , y) \}\) for \(0 \ leq x \ leq
1\) and \(0 \ leq y \ leq 9\) , indicating that the goal is
achieved when either container holds exactly 6 gallons of
water , regardless of the amount in the other container .
Constraints on States : Given the capacities , the set of legal
states \(S\) is defined by \(0 \ leq x \ leq 1\) and \(0 \ leq y
\ leq 9\) , where \(x\) and \(y\) represent the volume in
gallons in \(P_{4qt }\) and \(P_{9gal }\) , respectively . Any
state outside these bounds is considered illegal .
This characterization ensures clarity by specifying the
capacities and constraints in quantitative terms , focusing on
the exact volumes that define the initial , goal , and legal
states within the problem space .
InitialOperator/Problem-SpaceCharacterization
61R.E.WRAY,J.KIRK,J.E.LAIRD
The operators relevant to solving this problem , along with their
preconditions and postconditions , are as follows :
1. **Fill Operator** (\( Fill_i \) ) : Fills container \( i \) to its
maximum capacity .
− **Precondition **: Container \( i \) is not full .
− **Postcondition **: Container \( i \) is full , represented as
\( i = Capacity_i \) .
2. **Empty Operator** (\( Empty_i \) ) : Empties container \( i \) .
− **Precondition **: Container \( i \) contains some water (\( i >
0\) ) .
− **Postcondition **: Container \( i \) is empty , represented as
\( i = 0\) .
3. **Transfer Operator** (\( Transfer_{i \ rightarrow j }\) ) :
Transfers water from container \( i \) to container \( j \) until
container \( i \) is empty or container \( j \) is full , whichever
comes first .
− **Precondition **: Container \( i \) is not empty (\( i > 0\) )
and container \( j \) is not full (\( j < Capacity_j \) ) .
− **Postcondition **: The new state of container \( i \) and \( j
\) is updated based on the amount of water transferred ,
represented as \( i ’ = max(0 , i − ( Capacity_j − j )) \) and \(
j ’ = min(Capacity_j , j + i ) \) .
These operators define the actions that can be taken at any point
in the problem space , with the preconditions specifying when
an operator can be applied and the postconditions describing
the state of the system after the operator is applied .
RefinementofOperator/Problem-SpaceCharacterization
Upon reviewing the initial operator definitions , adjustments are
necessary to ensure completeness and accuracy in the context
of the problem space . Here is the revised set of operators
with corrected preconditions and postconditions :
1. **Fill Operator** (\( Fill_i \) ) : Fills container \( i \) to its
maximum capacity from an unlimited water source .
62PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
− **Precondition **: \( i < Capacity_i \) , where \( i \) is the
current volume in container \( i \) and \( Capacity_i \) is its
maximum capacity .
− **Postcondition **: \( i = Capacity_i \) .
2. **Empty Operator** (\( Empty_i \) ) : Empties container \( i \)
completely .
− **Precondition **: \( i > 0\) , indicating that there is some
volume of water in container \( i \) .
− **Postcondition **: \( i = 0\) .
3. **Transfer Operator** (\( Transfer_{i \ rightarrow j }\) ) :
Transfers water from container \( i \) to container \( j \) .
− **Precondition **: \( i > 0\) and \( j < Capacity_j \) ,
indicating that container \( i \) has water to transfer and
container \( j \) has room to receive water .
− **Postcondition **: \( i ’ = max(0 , i − ( Capacity_j − j )) \) and
\( j ’ = min(Capacity_j , j + i ) \) , ensuring that water is
transferred from \( i \) to \( j \) until \( i \) is empty or \( j
\) is full , whichever occurs first .
These revised operators more accurately reflect the actions
available within the problem space , ensuring that the
preconditions and postconditions align with the logical
constraints of the problem .
GenerationofSearchControl
Undesirable states and sequences in this problem space include :
1. **Undesirable States **: Any state where the volumes in both
containers do not progress towards achieving the goal state of
having exactly 6 gallons in one of the containers .
Specifically , states where the total volume of water does not
change after an operation , or where the operation results in a
volume that has previously been discarded as unhelpful , can
be considered undesirable . For example , states like \((1 , 9) \)
or \((0 , 9) \) after attempting to solve for 6 gallons are not
directly useful .
2. **Undesirable Sequences of Operator Applications **:
63R.E.WRAY,J.KIRK,J.E.LAIRD
− **Redundant Fill **: Applying a Fill operator to a container
that is already full , i .e. , \( Fill_i \) followed by another
\( Fill_i \) without any intermediate operation that changes
the state of \( i \) .
− **Redundant Empty**: Applying an Empty operator to a
container that is already empty , i .e. , \( Empty_i \) followed
by another \( Empty_i \) without any intermediate operation
that changes the state of \( i \) .
− **Canceling Operations **: A sequence where a Fill or
Transfer operation is immediately followed by an Empty
operation on the same container , effectively undoing the
previous action without making progress towards the goal , e
.g. , \( Fill_i ; Empty_i \) or \( Transfer_{i \ rightarrow j };
Empty_j \) .
− **Cyclical Transfers **: A sequence of Transfer operations
that return the system to a previous state without
achieving the goal , e.g. , \( Transfer_{i \ rightarrow j };
Transfer_{j \ rightarrow i }\) repeated without any progress .
Formally , these can be characterized as follows :
− For any state \(S = (x, y) \) , an undesirable state is one where
\(x + y\) does not incrementally approach 6 gallons without
exceeding the capacities of either container .
− For sequences , if \(O_n\) and \(O_{n+1}\) are operations such
that the state post −\(O_{n+1}\) is equivalent to the state pre
−\(O_n\) , then the sequence \([O_n, O_{n+1}]\) is undesirable .
64PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
Variation: V(2,3,5) → 4
V(2,3,5) → 4ProblemDescription
The general problem is to deliver a specific amount of water
using containers that are opaque and have contain no graduated
markings . \
The amount of water that needs to be delivered will generally
differ from the full capacities of the container . As a
specific example , \
how can you bring up from the river exactly 4 gallons of water
when you have only three containers , \
a 5−gallon pail , a 3−gallon pail , and a 2−gallon pail to measure
with?
SoarAgentSolution
1: O: O1 ( initialize −water−jug−look−ahead)
S1: 2: 0
S1: 3: 0
S1: 5: 0
2: O: O2 ( fill )
S1: FILL(2)
S1: 2: 2
3: O: O5 (pour)
S1: POUR(2:2 ,5:0)
S1: 5: 2
S1: 2: 0
4: O: O11 ( fill )
S1: FILL(2)
S1: 2: 2
5: O: O14 (pour)
S1: POUR(2:2 ,5:2)
S1: 5: 4
S1 Solution Found!
S1: 2: 0
One-shot,Chain-of-ThoughtSolution: V(2,3,5) → 4
This solution is correct, but follows the familiar pattern and ignores the second jug. The resulting
plantakes50%morestepsthantheonethatusesthe2-gallonjug.
65R.E.WRAY,J.KIRK,J.E.LAIRD
To solve this problem , we can use a method called the "Water Jug
Problem" or "Die Hard Water Puzzle" which involves filling and
transferring water between the containers to achieve the
desired amount. Here ’s a step −by−step solution :
1. Fill the 5−gallon pail to the top .
2. Pour water from the 5−gallon pail into the 3−gallon pail until
the 3−gallon pail is full . This leaves 2 gallons of water in
the 5−gallon pail .
3. Empty the 3−gallon pail .
4. Pour the remaining 2 gallons of water from the 5−gallon pail
into the empty 3−gallon pail .
5. Fill the 5−gallon pail to the top again .
6. Pour water from the 5−gallon pail into the 3−gallon pail until
the 3−gallon pail is full . This leaves 4 gallons of water in
the 5−gallon pail .
By following these steps , you can measure exactly 4 gallons of
water using the 5−gallon , 3−gallon , and 2−gallon pails . This
method utilizes the capacities of the containers to manipulate
the water levels effectively .
One-shot,Chain-of-ThoughtProblem-SpaceFormulation: V(2,3,5) → 4
This problem-space formulation is incomplete but otherwise correct. Incompleteness includes the
lack of specificity in the specification of the transfer operator. Further, only illegal states are indi-
catedratherthanalsoindicatingnon-desirablesearchstates.
Initial state : (0 , 0, 0) − all pails are empty.
Goal state : (x, y, z) where x + y + z = 4 ( the total amount of
water needed) .
Operators :
1. Fill ( pail ) : Fills the specified pail to its maximum capacity .
Preconditions : Pail is not already full .
Postconditions : Pail is full .
2. Empty( pail ) : Empties the specified pail .
Preconditions : Pail is not already empty.
Postconditions : Pail is empty.
66PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
3. Transfer (from , to ) : Transfers water from one pail to another
until either the "from" pail is empty or the "to" pail is full
.
Preconditions : "from" pail is not empty , "to" pail is not full
.
Postconditions : Water is transferred from "from" pail to "to"
pail .
Illegal states : Any state where the amount of water in a pail
exceeds its capacity or is negative .
CTAAgent: V(2,3,5) → 4
This formulation is correct and precise and accurately (only after refinement) reflects the addition
ofthethirdpail.
InputPrompt
You are an expert in cognitive task analysis . You are helping to
design a reasoner /problem solver that can solve many different
instances of a class of problem . Problems are defined in 1−2
paragraphs . There will be a specific example problem provided .
However , your responses should focus creating a general
formulation of the problem space , not a problem space specific
to the example only . Focus each response on the most recent ,
specific question asked of you. The questions are designed to
break the problem−space formulation into a set of discrete
steps . Unless otherwise directed , be concise in each response
( i .e. , respond in one sentence or expression ) .
Use these definitions :
Problem Space: A problem space consists a set of symbolic
structures ( the states of the space) and a set of operators
over the space . Each operator takes a state as input and
produces a state as output ( although there may be other inputs
and outputs as well) . The operators may be partial ( i .e. , not
defined for all states ) . Sequences of operators define paths
that thread their way through sequences of states .
Problem: A problem in a problem space consists of a set of
initial states , a set of goal states , and a set of path
constraints . The problem is to find a path through the space
67R.E.WRAY,J.KIRK,J.E.LAIRD
that starts at the initial state , passes only along paths that
satisfy the path constraints , and ends at any goal state .
PROBLEM DESCRIPTION:
The general problem is to deliver a specific amount of water
using containers that are opaque and have contain no graduated
markings . The amount of water that needs to be delivered will
generally differ from the full capacities of the container .
As a specific example , how can you bring up from the river
exactly 4 gallons of water when you have only three containers
, a 5−gallon pail , a 3−gallon pail , and a 2−gallon pail to
measure with?
The solution to this problem will be solved by a search from the
initial state to the goal state using the operators specified
thus far . Search can be made more efficient by identfying
unproductive paths such as loops and dead−ends . Your task is
to identify / specify these .
What are undesirable states ? For example , generating a state that
is identical to the initial state is often not a productive
step .
What are undesirable sequences of operator applications? For
example , an operator sequence that undoes the action of the
immediately previous operator is often not desirable .Use
formal notation and/ or mathematical expressions to
characterize any undesirable states or operator sequences .
LIMIT YOUR RESPONSE TO JUST THIS QUESTION/ASPECT OF ANALYSIS.
InitialProblemCharacterization
Initial State : (0 , 0, 0) representing the amount of water in the
5−gallon , 3−gallon , and 2−gallon pails respectively .
Final State : (x, y, 4) where x and y can be any value such that
the total amount of water in all containers equals 4 gallons .
The primary goal is to have a total of 4 gallons , not
necessarily in one container .
Illegal / Impossible States : Any state where the amount of water in
any of the containers exceeds its capacity or is negative , i .
68PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
e. , states (x, y, z) where x > 5, y > 3, z > 2, or any of x, y
, z < 0 are not allowed .
RefinementofProblemCharacterization
The revised problem characterization , focusing on precision and
completeness , is as follows :
Initial State : \(S_{ initial } = (0 , 0, 0) \) , where each value
represents the volume of water in the 5−gallon , 3−gallon , and
2−gallon containers respectively .
Goal State (s) : \(S_{goal} = \{(x, y, z) | x + y + z = 4\}\) ,
where \(x \ leq 5\) , \(y \ leq 3\) , and \(z \ leq 2\) . This set
of states reflects all combinations where the total volume of
water equals exactly 4 gallons , irrespective of the
distribution across the containers .
Constraints on States : For any state \(S = (x, y, z) \) ,
− \(0 \ leq x \ leq 5\) , indicating the volume in the 5−gallon
container cannot exceed its capacity or be negative .
− \(0 \ leq y \ leq 3\) , indicating the volume in the 3−gallon
container cannot exceed its capacity or be negative .
− \(0 \ leq z \ leq 2\) , indicating the volume in the 2−gallon
container cannot exceed its capacity or be negative .
This characterization removes ambiguity by specifying the
capacities and constraints explicitly and defines the goal
state in terms of the total volume of water across all
containers , ensuring clarity in the problem ’s objectives .
InitialOperator/Problem-SpaceCharacterization
Operators for the problem space , along with their preconditions
and postconditions , are as follows :
1. **Fill** a container from the river :
− **Operator**: \( Fill ( i ) \)
− **Preconditions **: Container \( i \) is not full .
− **Postconditions **: Container \( i \) is full .
2. **Empty** a container into the river :
69R.E.WRAY,J.KIRK,J.E.LAIRD
− **Operator**: \(Empty( i ) \)
− **Preconditions **: Container \( i \) contains some water .
− **Postconditions **: Container \( i \) is empty.
3. **Transfer** water from one container to another :
− **Operator**: \( Transfer (i , j ) \)
− **Preconditions **: Container \( i \) contains some water , and
container \( j \) is not full .
− **Postconditions **: Water is transferred from container \( i
\) to container \( j \) until either container \( i \) is empty
or container \( j \) is full , whichever comes first .
In these operators , \( i \) and \( j \) are identifiers for the
containers (e.g. , 1 for the 5−gallon , 2 for the 3−gallon , and
3 for the 2−gallon containers ) . These operators are defined
for all states where their preconditions are met , making them
partial functions of the problem space .
RefinementofOperator/Problem-SpaceCharacterization
Upon reviewing the initial operator definitions , adjustments and
clarifications are necessary to ensure completeness and
correctness :
1. **Fill** a container from the river :
− **Operator**: \( Fill ( i ) \)
− **Preconditions **: \(Volume( i ) < Capacity( i ) \) , where \(
Volume( i ) \) is the current volume of water in container \( i
\) , and \( Capacity( i ) \) is the maximum capacity of
container \( i \) .
− **Postconditions **: \(Volume( i ) = Capacity( i ) \) , setting the
volume of container \( i \) to its maximum capacity .
2. **Empty** a container into the river :
− **Operator**: \(Empty( i ) \)
− **Preconditions **: \(Volume( i ) > 0\) , indicating that
container \( i \) contains some water .
− **Postconditions **: \(Volume( i ) = 0\) , making container \( i
\) empty.
3. **Transfer** water from one container to another :
− **Operator**: \( Transfer (i , j ) \)
70PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
− **Preconditions **: \(Volume( i ) > 0\) and \(Volume( j ) <
Capacity( j ) \) , indicating that container \( i \) has water to
transfer and container \( j \) has space to receive water .
− **Postconditions **: \(Volume( i ) = max(0 , Volume( i ) − (
Capacity( j ) − Volume( j ))) \) and \(Volume( j ) = min(Capacity(
j ) , Volume( j ) + Volume( i )) \) , reflecting the new volumes of
containers \( i \) and \( j \) after the transfer . This
ensures that water is transferred from \( i \) to \( j \) until
\( i \) is empty or \( j \) is full , whichever occurs first .
These revised operator definitions provide a clearer and more
precise framework for the problem space , ensuring that the
preconditions and postconditions accurately reflect the
possible actions and their effects within the problem domain.
GenerationofSearchControl
Undesirable states and sequences in this problem space include :
1. **Undesirable States **:
− States where the total volume of water across all containers
does not move towards achieving the goal state , such as
any state where the sum of volumes in all containers
decreases or remains the same after an operation that does
not contribute to reaching the goal state of having exactly
4 gallons in total .
2. **Undesirable Sequences of Operator Applications **:
− Sequences that involve filling a container and then
immediately emptying the same container without any
intermediate beneficial operation , formally : \( Fill ( i ) ;
Empty( i ) \) or \(Empty( i ) ; Fill ( i ) \) , where \( i \) represents
any container .
− Sequences that involve transferring water from one container
to another and then immediately transferring it back
without any intermediate operation that changes the state
beneficially , formally : \( Transfer (i , j ) ; Transfer (j , i ) \) ,
where \( i \) and \( j \) represent different containers .
− Any sequence of operations that returns to a previously
visited state , creating a loop , can be considered
unproductive . This can be formally represented as a
sequence of operations \(O_1, O_2, ... , O_n\) that
71R.E.WRAY,J.KIRK,J.E.LAIRD
transforms the initial state \(S_0\) back to \(S_0\) or any
intermediate state \(S_k\) (where \(0 < k < n\) ) without
reaching the goal state .
Identifying and avoiding these undesirable states and sequences
can significantly improve the efficiency of the search process
by reducing the number of explored states and focusing on
those that are more likely to lead towards the goal state .
72PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
Analogue: A(4,9) → 6
A(4,9) → 6ProblemDescription
You are an engineer on an alien spaceship. Physics works as in our universe but the technology
differs significantly. The general problem is to deliver a specific amount of "flucotone" (a type of
energy)usingflucotone-holdingdevices(FHDs). FlucotonecanbetransferredtoFHDsuptotheir
specified capacity with no energy/flucotone loss. An FHD can hold any amount of flucotone up
its capacity but there is no way to measure how much flucotone is in an FHD other than it being
full or empty. The amount of flucotone needed for any specific task will generally differ from the
full capacities of available FHDs. As a specific example, assume a power plant that can generate
limitless flucotone. From this power plant, how can you deliver exactly 6 units of flucotone to the
engineroom whenyouhaveonlytwoFHDs: a4-unitFHDanda9-unitFHD?
SoarAgentSolution
TheSoarsolutionforthisproblemisidenticaltotheF(4,9) → 6solution.
One-shot,Chain-of-ThoughtSolution: A(4,9) → 6
Thissolutioniscorrect.
To solve the problem of delivering exactly 6 units of flucotone
using a 4−unit FHD and a 9−unit FHD, follow these steps :
1. **Fill the 9−unit FHD** with flucotone from the power plant .
2. **Transfer from the 9−unit FHD to the 4−unit FHD** until the
4−unit FHD is full . This leaves you with 5 units of flucotone
in the 9−unit FHD ( since you’ve transferred 4 units out) .
3. **Empty the 4−unit FHD** back into the power plant (or another
storage if that ’s the process ) .
4. **Transfer the remaining 5 units from the 9−unit FHD to the 4−
unit FHD**. Now, the 4−unit FHD has 5 units , but since its
capacity is only 4 units , it means you’ve actually only
transferred 4 units , leaving 1 unit in the 9−unit FHD.
5. **Fill the 9−unit FHD again** from the power plant .
6. **Transfer from the 9−unit FHD to the 4−unit FHD** until the
4−unit FHD is full . Since the 4−unit FHD already has 1 unit ,
73R.E.WRAY,J.KIRK,J.E.LAIRD
you only need to transfer 3 more units to fill it . This leaves
you with 6 units of flucotone in the 9−unit FHD (9 − 3 = 6) .
7. **Deliver the 6 units of flucotone in the 9−unit FHD** to the
engine room.
By following these steps , you’ve successfully delivered exactly 6
units of flucotone to the engine room using only a 4−unit FHD
and a 9−unit FHD.
One-shot,Chain-of-ThoughtProblem-SpaceFormulation: A(4,9) → 6
This formulation is correct but incomplete/not sufficient for execution in a problem solver. In par-
ticular, the transfer (“pour" analogue) does not specify how to update the values in the containers.
Additionally,theillegal/undesirablestatesaregenericandwouldnotreducesearchgenerally(e.g.,
avoidingwasteiscounterproductivetosolvingawater-jugsproblem).
### Problem Space Formulation for the General Problem
#### States
A state can be represented as a tuple showing the amount of
flucotone in each FHD and the amount needed to be delivered .
For example , with two FHDs and a requirement to deliver a
specific amount of flucotone , a state could be represented as
\( (x, y, z) \) , where:
− \( x \) is the amount of flucotone in the first FHD,
− \( y \) is the amount of flucotone in the second FHD,
− \( z \) is the amount of flucotone needed to be delivered .
#### Initial State
The initial state is when both FHDs are empty , and a specific
amount of flucotone needs to be delivered . For example , \( (0 ,
0, Z) \) , where \( Z \) is the total amount of flucotone
needed .
#### Goal State
The goal state is any state where the total amount of flucotone
delivered equals the amount required , regardless of the
distribution in the FHDs. For example , \( (* , *, 0) \) , where
\( * \) can be any value representing the amount of flucotone
in the FHDs, and the last element is 0, indicating the
delivery requirement has been met.
74PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
#### Operators
Operators are actions that can change the state . For this problem
, operators include :
1. **Fill **: Filling an FHD to its maximum capacity .
− **Precondition **: FHD is not full .
− **Postcondition **: FHD is full .
2. **Empty**: Emptying an FHD.
− **Precondition **: FHD is not empty.
− **Postcondition **: FHD is empty.
3. **Transfer **: Transferring flucotone from one FHD to another
until the second is full or the first is empty.
− **Precondition **: The source FHD is not empty , and the
destination FHD is not full .
− **Postcondition **: The amount of flucotone in the source and
destination FHDs is adjusted according to the transfer .
#### Illegal or Undesirable States
− Any state where the amount of flucotone in an FHD exceeds its
capacity .
− States where the total amount of flucotone exceeds the initial
requirement plus the capacities of all FHDs, indicating
wastage or inefficiency .
This formulation allows for the representation and manipulation
of the problem space to find a sequence of operations that
leads from the initial state to a goal state , satisfying the
requirement of delivering a specific amount of flucotone using
the available FHDs.
CTAAgent: A(4,9) → 6
Thisformulationiscorrectandprecise. Thesearchcontrolisnotsufficientlyformalizedtosupport
codegenerationbutthecontentisgenerallycorrect.
InputPrompt
You are an expert in cognitive task analysis . You are helping to
design a reasoner /problem solver that can solve many different
instances of a class of problem . Problems are defined in 1−2
75R.E.WRAY,J.KIRK,J.E.LAIRD
paragraphs . There will be a specific example problem provided .
However , your responses should focus creating a general
formulation of the problem space , not a problem space specific
to the example only . Focus each response on the most recent ,
specific question asked of you. The questions are designed to
break the problem−space formulation into a set of discrete
steps . Unless otherwise directed , be concise in each response
( i .e. , respond in one sentence or expression ) .
Use these definitions :
Problem Space: A problem space consists a set of symbolic
structures ( the states of the space) and a set of operators
over the space . Each operator takes a state as input and
produces a state as output ( although there may be other inputs
and outputs as well) . The operators may be partial ( i .e. , not
defined for all states ) . Sequences of operators define paths
that thread their way through sequences of states .
Problem: A problem in a problem space consists of a set of
initial states , a set of goal states , and a set of path
constraints . The problem is to find a path through the space
that starts at the initial state , passes only along paths that
satisfy the path constraints , and ends at any goal state .
SPECIFIC PROBLEM:
You are an engineer on an alien spaceship . Physics works as in
our universe but the technology differs significantly . The
general problem is to deliver a specific amount of "flucotone"
(a type of energy)) using flucotone −holding devices (FHDs) .
Flucotone can be transferred to FHDs up to their specified
capacity with no energy / flucotone loss . An FHD can hold any
amount of flucotone up its capacity but there is no way to
measure how much flucontone is in an FHD other than it being
full or empty. The amount of flucotone needed for any specific
task will generally differ from the full capacities of
available FHDs. As a specific example , assume a power plant
that can generate limitless flucotone . From this power plant ,
how can you deliver exactly 6 units of flucotone to the engine
room \
when you have only two FHDs: a 4−unit FHD and a 9−unit FHD?
76PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
For this response , focus on characterizing the problem itself .
What is the initial state? What is the final state? Are there
illegal / impossible states that are not allowed for this
problem? If so , identify them.
Use formal notation and/ or mathematical expressions if / as
possible to characterize the problem . Be concise .
LIMIT YOUR RESPONSE TO THIS QUESTION ONLY/ASPECT OF ANALYSIS.
InitialProblemCharacterization
Initial State : FHD1 = 0 units (4−unit capacity ) , FHD2 = 0 units
(9−unit capacity ) , Goal = 6 units of flucotone to be delivered
.
Final State : Any state where a total of 6 units of flucotone have
been delivered to the engine room, irrespective of the
distribution between FHD1 and FHD2.
Illegal / Impossible States : Any state where FHD1 > 4 units or FHD2
> 9 units , or the total flucotone delivered exceeds 6 units .
RefinementofProblemCharacterization
The problem space can be more precisely characterized using the
following formal notation :
− ** Initial State (S0):** \( (FHD1 = 0, FHD2 = 0) \) , where \(
FHD1\) and \(FHD2\) represent the amount of flucotone in each
Flucotone−Holding Device respectively .
− **Goal State (SG):** A state where the total amount of
flucotone delivered equals 6 units . This can be represented as
any state \( (FHD1, FHD2) \) where \( FHD1 + FHD2 = 6 \) and
\( 0 \ leq FHD1 \ leq 4 \) , \( 0 \ leq FHD2 \ leq 9 \) .
− **Illegal States :** Any state where \( FHD1 > 4 \) or \( FHD2 >
9 \) , or \( FHD1 + FHD2 \neq 6 \) when considering the goal
state .
This characterization removes ambiguity by specifying the
capacities and constraints of the FHDs and the exact goal
condition in terms of flucotone units .
77R.E.WRAY,J.KIRK,J.E.LAIRD
InitialOperator/Problem-SpaceCharacterization
The problem space for delivering a specific amount of flucotone
using flucotone −holding devices (FHDs) can be characterized by
the following operators , preconditions , and postconditions :
### Operators
1. **Fill (FHDx)**: Completely fills FHDx from the power plant .
− **Preconditions **: FHDx is not full .
− **Postconditions **: FHDx is full (FHDx = capacity of FHDx) .
2. **Empty (FHDx)**: Empties FHDx.
− **Preconditions **: FHDx is not empty.
− **Postconditions **: FHDx is empty (FHDx = 0) .
3. **Transfer (FHDx, FHDy)**: Transfers flucotone from FHDx to
FHDy until FHDx is empty or FHDy is full .
− **Preconditions **: FHDx is not empty , and FHDy is not full .
− **Postconditions **: FHDx decreases by the transferred amount
, and FHDy increases by the same amount , without exceeding
FHDy’s capacity .
### Formal Notation
− Let \(FHDx\) and \(FHDy\) represent the state of two flucotone −
holding devices , where \(x\) and \(y\) are their respective
capacities .
− \( Fill (FHDx) \ rightarrow (FHDx = x) \) when \(FHDx < x\) .
− \(Empty(FHDx) \ rightarrow (FHDx = 0) \) when \(FHDx > 0\) .
− \( Transfer (FHDx, FHDy) \ rightarrow (FHDx’ = max(0 , FHDx − (y −
FHDy)) , FHDy’ = min(y, FHDy + FHDx)) \) when \(FHDx > 0\) and
\(FHDy < y\) .
These operators , along with their preconditions and
postconditions , define the actions that can be taken within
the problem space to manipulate the state of the FHDs towards
achieving the goal of delivering a specific amount of
flucotone .
RefinementofOperator/Problem-SpaceCharacterization
78PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
Upon reviewing the initial problem space characterization , the
following improvements are suggested to ensure completeness
and accuracy :
### Revised Operators with Preconditions and Postconditions
1. **Fill (FHDx)**
− **Preconditions **: \(FHDx < Capacity_{FHDx}\)
− **Postconditions **: \(FHDx = Capacity_{FHDx}\)
2. **Empty(FHDx)**
− **Preconditions **: \(FHDx > 0\)
− **Postconditions **: \(FHDx = 0\)
3. **Transfer (FHDx, FHDy)**
− **Preconditions **: \(FHDx > 0\) AND \(FHDy < Capacity_{FHDy
}\)
− **Postconditions **: \(FHDx’ = max(0 , FHDx − (Capacity_{FHDy}
− FHDy)) \) , \(FHDy’ = min(Capacity_{FHDy}, FHDy + FHDx) \)
### Corrections and Additions
− **Clarification on Transfer Operator**: The original
characterization did not explicitly account for the exact
amount transferred . The revised postconditions now clearly
define the new states of \(FHDx\) and \(FHDy\) after the
transfer , ensuring that the transfer does not exceed \(FHDy\) ’
s capacity or result in \(FHDx\) having a negative amount of
flucotone .
− **Addition of Preconditions **: Explicitly stating that \(FHDx\)
must not be empty for a transfer to occur and \(FHDy\) must
not be full ensures that the operators are only applied when
their actions are possible within the physical constraints of
the problem .
− **Specification of Capacities **: The use of \( Capacity_{FHDx}\)
and \( Capacity_{FHDy}\) in preconditions and postconditions
clarifies that each FHD has a specific capacity , which is
crucial for understanding the limits within which the
operators can function .
These revisions aim to provide a more precise and comprehensive
characterization of the problem space , ensuring that the
79R.E.WRAY,J.KIRK,J.E.LAIRD
operators , along with their preconditions and postconditions ,
accurately reflect the actions that can be taken to manipulate
the state of the FHDs towards achieving the goal of
delivering a specific amount of flucotone .
GenerationofSearchControl
Undesirable states and sequences in the context of this problem
include :
1. **Undesirable States :**
− Any state where the total amount of flucotone in both FHDs
does not contribute to achieving the exact goal amount (e.g
. , states where the sum of flucotone in FHD1 and FHD2 is
greater than the goal or cannot be combined to reach the
goal due to the capacities of the FHDs) .
− States where both FHDs are partially filled but their
combined flucotone does not equal the goal and cannot be
adjusted to meet the goal due to the lack of measurement
tools .
2. **Undesirable Sequences of Operator Applications :**
− Sequences that involve filling an FHD and then immediately
emptying it without transferring any flucotone to the other
FHD or towards achieving the goal (e.g. , \( Fill (FHDx) \
rightarrow Empty(FHDx) \) ) .
− Sequences that result in a loop , where the same set of
operations is repeated without making progress towards the
goal (e.g. , \( Fill (FHD1) \ rightarrow Transfer (FHD1, FHD2) \
rightarrow Empty(FHD2) \ rightarrow Transfer (FHD2, FHD1) \) ,
repeated without reaching the goal state ) .
− Sequences where flucotone is transferred back and forth
between FHDs without getting closer to the goal amount (e.g
. , \( Transfer (FHD1, FHD2) \ rightarrow Transfer (FHD2, FHD1)
\) without any net gain towards achieving the goal) .
Formally , undesirable states can be characterized as any state \(
S\) where \(FHD1 + FHD2 \neq Goal \) and no sequence of valid
operations can transform \(S\) into a goal state \(SG\) where
\(FHD1 + FHD2 = Goal \) . Undesirable sequences can be
characterized by any series of operations \(O_1, O_2, ... , O_n
\) where the application of \(O_n\) directly negates the
80PROBLEMSPECIFICATIONSVIALARGELANGUAGEMODELS
effect of \(O_{n−1}\) or fails to make progress towards \(SG\)
.
81