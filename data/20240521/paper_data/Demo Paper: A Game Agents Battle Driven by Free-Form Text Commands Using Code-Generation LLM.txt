Demo Paper: A Game Agents Battle Driven by
Free-Form Text Commands Using Code-Generation
LLM
Ray Ito Junichiro Takahashi
Faculty of Engineering, Faculty of Engineering,
The University of Tokyo The University of Tokyo
Tokyo, Japan Tokyo, Japan
ray51ito@g.ecc.u-tokyo.ac.jp takahashi-junichiro509@g.ecc.u-tokyo.ac.jp
Abstract—Thispaperpresentsademonstrationofourmonster
battle game, in which the game agents fight in accordance with
their player’s language commands. The commands were trans-
latedintotheknowledgeexpressioncalledbehaviorbranchesby
acode-generationlargelanguagemodel.Thisworkfacilitatedthe
designofthecommandingsystemmoreeasily,enablingthegame
agent to comprehend more various and continuous commands
than rule-based methods. The results of the commanding and
translation process were stored in a database on an Amazon
Web Services server for more comprehensive validation. This
implementation would provide a sufficient evaluation of this
ongoing work, and give insights to the industry that they could
use this to develop their interactive game agents.
Index Terms—Game AI, Character AI, LLM, Game Agent,
Knowledge Expression, Human-Computer Interaction, Enter- Fig.1. Overviewoftheentiresystem.
tainment Computing
I. INTRODUCTION paper, we demonstrate a system that enables two players
to fight each other at a distance under this commanding
Game players’ desire to control their trained monsters has
system, and the command and translation results are stored
led to the success of games such as Poke´mon, Digimon, and
inthedatabaseonourbackendserver.Therefore,weaimedto
MonsterRancher.Still,playerswereonlyabletochoosefrom
contributetotheadvancementofknowledgeandentertainment
a limited set of options to command their monsters in these
technology in the following ways:
games. This led to attempts, including [1]–[4], to make game
monsters understand and react to language commands, but • To give practical validation to this ongoing work.
these implementations were rule-based, which was not easy • To demonstrate to the industry and researchers that they
fordeveloperstohard-codeasufficientinteraction.Therefore, could use or extend our method to develop their interac-
[5]proposedamethodtotranslateplayerlanguagecommands tive game systems.
withoutlimitationsintothegameagent’saction.Thelanguage
command was passed to the code-generation large language II. SYSTEMOVERVIEW
model (LLM) model, which generated the knowledge ex-
A. The Entire System
pression called behavior branches. This method enabled the
game agent to comprehend a wider range of content and The system consists of the following components as shown
expressions of the player’s commands. The concept of using in Fig. 1. Each description is as follows:
code-generation LLM was originated from [6]. While [6] • Unity (2022.3.15f1): Unity computed the game environ-
intendedtohandleindependenttasksforrobotics,[5]extended ment and provided the game environment to the players.
this to the game agents, allowing for the execution of more • Photon PUN2 (2.45): PUN2 was used for the real-time
continuous and rapidly changing commands. network synchronization between both Unity clients.
To examine if this method worked, [5] only implemented • AWSServer:Theserverwasusedtogeneratethebehav-
a single controllable game agent against a single unmoving ior branches from the player’s commands and to store
agent. However, the effectiveness of this approach in the the translation logs. Each players were identified using
context of actual player battles remained unexamined. In this Cognito,andthelogswerestoredinDynamoDB.Lambda
4202
yaM
02
]CH.sc[
1v53811.5042:viXraFig. 3. The screenshot of the table in DynamoDB. Note that any personal
informationisnotshown.
As similar to [6], the prompt for the LLM presented the
intendedformatandtheexamplesofthetranslationsinPython.
The inference code was streamed back from the LLM API3.
Fig.2. Thevisualinterfaceofthegame.
D. Logs in the Database
Fig. 3 shows a clip of recorded data. There was one row
did the API control including accessing the LLM model. for each command, including the ID of the battle session, the
The latency was all together 1.8 seconds on average. timestampofthecommandinUnixtime,theplayer’sCognito
• FireworksAI:TheAPIofFireworksAIwasusedforuti- ID, the original command text, and the translated behavior
lizing the default ‘llama-v2-34b-code’ model. Fireworks branch in JSON format.
AI was chosen for its rapid latency. The latency was 0.9
III. DEMONSTRATION
seconds on average.
Duringthedemonstration,twoattendeeswillplaythegame
with two laptops prepared. The demonstrator will explain the
B. Game Environment
game rules and what moves the game agent able to do. The
In the game environment, two game agents were placed in attendees will play the game by typing the command in the
the plain 3D space. The game agents could move in the 3D text box, and try to defeat the opponent’s game agent. The
space, and use the following attacks1: gamewilltakeapproximately3minutes.Inshort,therequired
• Thunderbolt: The game agent shoots a thunderbolt (im- facilities for this demo include a table to put the laptops and
plemented as a sphere) to the opponent. keyboards, and the internet connection.
• IronTail:Thegameagentswingsitstailtotheopponent. IV. CONCLUSIONSANDFUTUREWORKS
• Tackle: The game agent rushes and hit the opponent.
In this paper, we demonstrated a battle game system where
The interface of the game is shown in Fig. 2. The players
thegamecharactersflexiblyfollowtheplayer’sdirections.The
could command their game agent by typing the command in
method proposed by [5], translating player’s commands into
the text box. The translation when the enter key was pressed.
Behavior Branches using code-generation LLM, has become
The game would be paused while the players were typing.
availableforactualbattlegaming.Forfuturework,weplanto
conduct a quantitative and qualitative experiment to evaluate
C. Command-Action Translation
using the record and improve our suggested method so as to
Language commands were translated into the actionable make it more practical and useful for the game industry.
knowledge expression called behavior branches proposed by
REFERENCES
[5]. Behavior branches were tree structures consisting of the
[1] Hobonichi Co. Ltd., “Pikachu decides that the mushroom in front
following nodes:
of him is more important,” Hobo Niccan Itoi Shinbun, Feb.
• Action node: Specified the action to be executed. 1999. https://www.1101.com/nintendo/nin3/nin3-2.htm (accessed Apr.
25,2024).
• Condition node: This connected to two nodes, and the [2] M.Yoshida,H.Bizen,M.Kambe,andY.Kawai,“VoiceManipulation
satisfaction of this node determined which node to be System on Virtual Space Using Synonyms,” Proc. of the Inf. Process.
executed next. Soc.ofJpn.Annu.Conv.,Mar.2021,pp.137–138.
[3] Q.Mehdi,X.Zeng,andN.Gough,“Aninteractivespeechinterfacefor
• Control node: Specified the controling of the execution virtualcharactersindynamicenvironments,”inProc.ISAS04,10thInt.
flow. Conf.onInf.Syst.Anal.andSysthesis,Jul.2004,pp.243-248.
[4] D. M. Waqar, T. S. Gunawan, M. Kartiwi and R. Ahmad, “Real-
This followed the concept of structural programming, and
Time Voice-Controlled Game Interaction using Convolutional Neural
appending different behavior branches could dynamically edit Networks,”in2021IEEE7thInt.Conf.onSmartInstrum.,Meas.and
the action flow. As the game agent followed these nodes, [5] Appl.,2021,pp.76-81
[5] R. Ito and J. Takahashi, “Game Agent Driven by Free-Form Text
has shown that the game agent could understand and follow
Command: Using LLM-based Code Generation and Behavior Branch
thecommandsfreelywrittenunderthestaticexperiment2.For (inpress),”The38thAnnu.Conf.oftheJpn.Soc.forArtif.Intell.,May
more details of the behavior branches, refer to [5]. 2024,Available:https://arxiv.org/abs/2402.07442.
[6] J. Liang et al., “Code as Policies: Language Model Programs for
EmbodiedControl,”in2023IEEEInt.Conf.onRobot.andAutomat.,
1ThesewereinspiredbyCreaturesInc.“Poke´parkWii:Pikachu’sAdven- May2023,pp.9493-9500.
ture.”
2Static experiment refers that only one game agent was playable and the 3It started to process it as soon as the closing bracket in the generated
other stayed still. Thus, the performance under the actual battle, which was Pythoncodereferringtothebehaviorbranchwasdetected.Thisearlystopping
theaimofthispaper,remainedunknown madethetranslation1.1secondsfasterthan[5].