Causal Graph Dynamics and Kan Extensions
Luidnel Maignan and Antoine Spicher
Univ Paris Est Creteil, LACL, 94000, Creteil, France
Abstract. On the one side, the formalism of Global Transformations
comes with the claim of capturing any transformation of space that is
local,synchronousanddeterministic.Theclaimhasbeenprovenfordif-
ferentclassesofmodelssuchasmeshrefinementsfromcomputergraph-
ics,Lindenmayersystemsfrommorphogenesismodelingandcellularau-
tomatafrombiological,physicalandparallelcomputationmodeling.The
GlobalTransformationformalismachievesthisbyusingcategorytheory
for its genericity, and more precisely the notion of Kan extension to de-
terminetheglobalbehaviorsbasedonthelocalones.Ontheotherside,
CausalGraphDynamicsdescribethetransformationofportgraphsina
synchronousanddeterministicwayandhasnotyetbeingtackled.Inthis
paper, we show the precise sense in which the claim of Global Transfor-
mationsholdsforthemaswell.Thisisdonebyshowingdifferentwaysin
whichtheycanbeexpressedasKanextensions,eachofthemhighlighting
different features of Causal Graph Dynamics. Along the way, this work
uncoverstheinterestingclassofMonotonicCausalGraphDynamicsand
their universality among General Causal Graph Dynamics.
1 Introduction
Initial Motivation. This work started as an effort to understand the framework
of Causal Graph Dynamics (CGD) from the point of view of Global Transfor-
mations(GT),bothframeworksexpandingonCellularAutomata(CA)withthe
similar goal of handling dynamical spaces, but with two different answers. In-
deed,wehave onthe one handCGD thathave beenintroducedin2012 in[1]as
awaytodescribesynchronousandlocalevolutionsoflabeledportgraphswhose
structures also evolve. Since then, the framework has evolved to incorporate
many considerations such as stochasticity, reversibility [3] and quantumness [2]
Ontheotherhand,wehaveGTthathavebeenproposedin2015in[5]asaway
to describe synchronous local evolution of any spatial structure whose structure
also evolves. This genericity over arbitrary kind of space is obtained using the
language of category theory. It should therefore be the case that CGD are a
special case of GT in which the spatial structure happens to be labeled port
graphs. So the initial motivation is to make this relationship precise.
Initial Plan. Initially,weexpectedthistobeaverystraightforwardwork.First,
because of the technical features of CGD (recalled in the next section), it is
appropriate to study them in the same way that CA had been studied in [4].
4202
raM
02
]CD.sc[
1v39331.3042:viXra2 Luidnel Maignan and Antoine Spicher
By this, we mean that although GT uses the language of category theory, the
categorical considerations all simplify into considerations from order theory in
thecaseofplainCGD.Secondly,CGDseemedtocomedirectlywiththerequired
order theoretic considerations needed to make every thing trivial. It indeed has
a notion of sub-graph used implicitly throughout. The initial plan was to write
these “trivialities” explicitly, to make sure that every thing is indeed trivial,
and then proceed to the next step: quotienting absolute positions out to only
keep relative ones, thus actually using categorical features and not only order
theoretic ones, as done in [4] for CA.
Section 2.2 recalls how CGD are defined and work. Section 2.3 recalls how
KanextensionsandGTaredefinedandsimplifiesintheparticularcaseoforder
theory.Section3.1makesclearthestrongrelationbetweenthetwoconceptsand
how this relation leads to the initial ambition.
Actual Plan. It turns out that the initial ambition falls short, but the precise
way in which it does reveals something interesting about CGD. The expected
relationship is in fact partial and only allows to accommodate Kan extensions
withCGDwhichhappentobemonotonic.Thisledustochangeourinitialplan
to investigate the role played by monotonic CGD within the framework. Doing
so, we uncover the universality of monotonic CGD among general CGD, thus
impliying the initially wanted result: all CGD are GT.
Sections 3.2 and 3.3 make clear the relationship between GT and monotonic
CGD, while Section 4 shows the universality of monotonic CGD by proposing
an encoding transforming any CGD into a monotonic one. Finally, Section 5
discusses this interesting property of CGD.
2 Preliminaries
2.1 Notations
The definitions in this paper mostly use common notations from set theory.
The set operations symbols, especially set inclusion ⊆ and union ∪, are heavily
overloaded, but the context always allows to recover the right semantics. Two
first overloads concern the inclusion and the union of partial functions, which
are to be understood as the inclusion and union of the graphs of the functions
respectively, i.e., their sets of input-output pairs. A partial function f from a
set A to a set B is indicated as f : A ⇀ B, meaning that f is defined for some
elements of A. The restriction of a function f : A ⇀ B to a subset A′ ⊆ A is
denoted f ↾A′ :A′ ⇀B.
2.2 Causal Graph Dynamics
Our work strongly relies on the objects defined in [1]. We recall here the defini-
tions required to understand the rest of the paper. Particularly, [1] establishes
the equivalence of the so-called causal dynamics and localisable functions. ForCausal Graph Dynamics and Kan Extensions 3
the present work, we focus on the latter. Our method is to stick to the origi-
nal notations in order to make clear our relationship with the previous work.
However, some slight differences exist but are locally justified.
We consider an uncountable infinite set V of symbols for naming vertices.
Definition 1 (Labeled Graphs with Ports). Let Σ and ∆ be two sets, and
π a finite set. A graph G with states in Σ and ∆, and ports in π is the data of:
– a countable subset V(G)⊂V whose elements are the vertices of G,
– a set E(G) of non-intersecting two-element subsets of V(G)×π, whose ele-
ments are the edges of G, and are denoted {u:i,v :j}.
– a partial function σ(G):V(G)⇀Σ labeling vertices of G with states,
– a partial function δ(G):E(G)⇀∆ labeling edges of G with states.
The set of graphs with states in Σ and ∆, and ports π is written G .
Σ,∆,π
Apointedgraph(G,v)isagraphG∈G withaselectedvertexv ∈V(G)
Σ,∆,π
called pointer.
In this definition, the fact that edges are non-intersecting means that each
u : i ∈ V(G)×π appears in at most one element of E(G). The vertices of the
graph are therefore of degree at most |π|, the size of the finite set π. Let us
note right now that the particular elements of V used to build V(G) in a graph
G should ultimately be irrelevant, and only the structure and the labels should
matter, as made precisely in Def. 6. This is the reason of the definition of the
following object.
Definition 2 (Isomorphism). An isomorphism is the data of a bijection R :
V →V.ItsactiononverticesisstraightforwardlyextendedtoanyedgebyR({u:
i,v :j}):={R(u):i,R(v):j}), to any graph G∈G by
V(R(G)):={R(v)|v ∈V(G)}, E(R(G)):={R(e)|e∈E(G)},
σ(R(G)):=σ(G)◦R−1, δ(R(G)):=δ(G)◦R−1,
and to any pointed graph (G,v) by R(G,v):=(R(G),R(v)).
Operations are defined to manipulate graphs in a set-like fashion.
Definition 3 (Consistency, Union, Intersection). Two graphs G and H
are consistent when:
– E(G)∪E(H) is a set of non-intersecting two-element sets,
– σ(G) and σ(H) agree where they are both defined,
– δ(G) and δ(H) agree where they are both defined.
In this case, the union G∪H of G and H is defined by
V(G∪H):=V(G)∪V(H), E(G∪H):=E(G)∪E(H),
σ(G∪H):=σ(G)∪σ(H), δ(G∪H):=δ(G)∪δ(H).4 Luidnel Maignan and Antoine Spicher
The intersection G∩H of G and H is always defined and given by
V(G∩H):=V(G)∩V(H), E(G∩H):=E(G)∩E(H),
σ(G∩H):=σ(G)∩σ(H), δ(G∩H):=δ(G)∩δ(H).
The empty graph with no vertex is designed ∅.
In this definition, the unions of functions seen as relations (that result in
a non-functional relation in general) are here guarantied to be functional by
the consistency condition. The intersection of (partial) functions simply gives a
(partial)functionwhichisdefinedonlyoninputsonwhichbothfunctionsagree.
To describe the evolution of such graphs in the CGD framework, we first
need to make precise the notion of locality, which is captured by how a graph
is pruned to a local view: a disk. We consider the usual distance between two
verticesingraphs,i.e.,theminimalnumberofedgesofthepathsbetweenthem,
and denote by B (c,d) the set of vertices at distance at most d from c in the
G
graph G.
Definition 4 (Disk).LetGbeagraph,c∈V(G)avertex,andranon-negative
integer. The disk of radius r and center c is the pointed graph Gr =(H,c) with
c
H given by
V(H):=B (c,r+1), σ(H):=σ(G)↾B (c,r),
G G
E(H):={{u:i,v:j}∈E(G)|{u,v}∩B (c,r)̸=∅}, δ(H):=δ(G)↾E(H).
G
We denote Dr the set {Gr | G ∈ G ,c ∈ V(G)} of all disks of radius
Σ,∆,π c Σ,∆,π
r, and D the set of all disks of any radius. When the disk notation is used
Σ,∆,π
with a set C of vertices as subscript, we mean
(cid:91)
Gr := Gr. (1)
C c
c∈C
The CGD dynamics relies on a local evolution describing how local views
generates local outputs consistently.
Definition 5 (LocalRule).Alocalruleofradiusr isafunctionf :Dr →
Σ,∆,π
G such that:
Σ,∆,π
1. for any isomorphism R, there is another isomorphism R′, called the conju-
gate of R, with f ◦R=R′◦f,
2. for any family {(H ,v )}⊂Dr , (cid:84) H =∅ =⇒ (cid:84) f((H ,v ))=∅,
i i Σ,∆,π i i i i i
3. there exists b such that for all D ∈Dr , |V(f(D))|≤b,
Σ,∆,π
4. for any G∈G , u,v ∈V(G), f(Gr) and f(Gr) are consistent.
Σ,∆,π v u
In the second condition, note that a set of graphs have the empty graph as
intersection iff their sets of vertices are disjoint. In the original work, functions
respectingthetwofirstconditions,thethirdcondition,andthefourthcondition
are called respectively dynamics, bounded functions, and consistent functions.
A local rule is therefore a bounded consistent dynamics.Causal Graph Dynamics and Kan Extensions 5
The main result of [1] is the proof that causal graph dynamics are localisable
functions, the concepts coming from the paper. We rely on this result in the
following definition since we use the formal definition of the latter with the
name of the former.
Definition 6 (Causal Graph Dynamics (CGD)). A function F :G →
Σ,∆,π
G is a causal graph dynamics (CGD) if there exists a radius r and a local
Σ,∆,π
rule f of radius r such that
(cid:91)
F(G)= f(Gr). (2)
v
v∈V(G)
2.3 Global Transformations & Kan Extensions
Incategorytheory,Kanextensionsareaconstructionallowingtoextendafunc-
toralonganotheroneinauniversalway.Inthecontextofthisarticle,werestrict
ourselves to the case of pointwise left Kan extensions involving only categories
which are posets. In this case, their definition simplifies as follows.
Definition 7 (Pointwise Left Kan Extension for Posets). Given three
posets A, B and C, and two monotonic functions i : A → B, f : A → C, the
function Φ:B →C given by
Φ(b)=sup{f(a)∈C |a∈A s.t. i(a)⪯b} (3)
is called the pointwise left Kan extension of f along i when it is well-defined
(some suprema might not exist), and in which case it is necessarily monotonic.
Global Transformations (GT) makes use of left Kan extensions to tackle the
questionofthesynchronousdeterministiclocaltransformationofarbitrary kind
of spaces. It is a categorical framework, but in the restricted case of posets, it
worksasfollows.WhileBandCcaptureasposetsthelocal-to-globalrelationship
between the spatial elements to be handled (inputs and outputs respectively),
A specifies a poset of local transformation rules. The monotonic functions i
and f give respectively the left-hand-side and right-hand-side of the rules in A.
Glancing at Eq. (3), the transformation mechanism works as follows. Consider
an input spatial object b ∈ B to be transformed. The associated output Φ(b)
is obtained by gathering (thanks to the supremum in C) all the right-hand-side
f(a) of the rules a∈A with a left-hand-side i(a) occurring in b. The occurrence
relationship is captured by the respective partial orders: i(a) ⪯ b in B for the
left-hand-side, and f(a)⪯Φ(b) in C for the right-hand-side.
ThemonotonicityofΦistheformalexpressionofamajorpropertyofaGT:
ifaninputbisasubpartofaninputb′ (i.e.,b⪯b′ inB),theoutputΦ(b)hasto
occur as a subpart of the output Φ(b′) (i.e., Φ(b) ⪯ Φ(b′) in C). This property
gives to the orders of B and C a particular semantics for GT which will play an
important role in the present work.6 Luidnel Maignan and Antoine Spicher
Remark 1. Elements of B are understood as information about the input. So,
when b ⪯ b′, b′ provides a richer information than b about the input that Φ
uses to produce output Φ(b′), itself richer than output Φ(b). However, Φ cannot
deduce the falsety of a property about the input from the fact this property is
not included in b; otherwise the output Φ(b) might be incompatible with Φ(b′).
Atthecategoricallevel,thewholeGTformalismreliesonthekeyingredient
that the collection A of rules is also a category. Arrows in A are called rule
inclusions. They guide the construction of the output and allow overlapping
rulestobeappliedalltogetheravoidingthewell-knownissueofconcurrentrules
application [5].
IncaseswhereΦcapturestheevolutionfunctionofa(discretetime)dynam-
ical system (so particularly for the present work where we want to compare Φ
to a CGD), we consider the input and output categories/posets B and C to be
the same category/poset, making Φ an endo-functor/function.
3 Unifying Causal Graph Dynamics and Kan Extensions
The starting point of our study is that Eq. (2) in the definition of CGD has
almostthesameformasEq.(3).Indeed,ifwetakeEq.(3)andsetA=Dr ,
Σ,∆,π
B = C = G , the function i to be the projection function from discs to
Σ,∆,π
graphs that drops their centers (i.e., i((H,c)) = H) and the function f to be
the local function from discs to graphs, we obtain an equation for Φ of the form
Φ(G)=sup{f(D)∈G |D ∈Dr s.t. i(D)⪯G} (4)
Σ,∆,π Σ,∆,π
which is close to the equation Eq. (2) rewritten
(cid:91)
F(G)= {f(D)∈G |D =Gr, v ∈V(G)}.
Σ,∆,π v
This brings many questions. What is the partial order involved in Eq. (4)? Is
the union of Eq. (2) given by the suprema of this partial order? Is it the case
that i(D)⪯G implies D =Gr for some v in this order? Are f and F of Eq. (2)
v
monotonic functions for this order? We tackle these questions in the following
sections.
3.1 The Underlying Partial Order
Consideringthetwofirstquestions,thereisapartialorderwhichisforcedonus.
Indeed, we need this partial order to imply that suprema are unions of graphs.
But partial orders can be defined from their binary suprema since A⪯B ⇐⇒
sup{A,B}=B. Let us give explicitly the partial order, since it is very natural,
and prove afterward that it is the one given by the previous procedure.
Definition 8 (Subgraph). Given two graphs G and H, G is a subgraph of H,
denoted G⊆H, when
V(G)⊆V(H) ∧ E(G)⊆E(H) ∧ σ(G)⊆σ(H) ∧ δ(G)⊆δ(H).Causal Graph Dynamics and Kan Extensions 7
This defines a partial order −⊆− on G called the subgraph order.
Σ,∆,π
The subgraph order is extended to pointed graphs by
(G,v)⊆(H,u) :⇐⇒ G⊆H ∧v =u.
In this definition, the relational condition σ(G) ⊆ σ(H), where these two
functions are taken as sets of input-output pairs, means that σ(G)(v) is either
undefined or equal to σ(H)(v), for any vertex v ∈V(G). The same holds for the
condition δ(G)⊆δ(H).
Letusnowstatethatthesubgraphorderhasthecorrectrelationwithunions
of graphs. It similarly encodes consistency and intersections of pairs of graphs.
Proposition 1. Two graphs G and H are consistent precisely when they admit
anupperboundin(G ,⊆).TheunionofGandH isexactlytheirsupremum
Σ,∆,π
(least upper bound) in (G ,⊆). The intersection of G and H is exactly their
Σ,∆,π
infimum (greatest lower bound) in (G ,⊆).
Σ,∆,π
The two first questions being answered positively, let us rewrite Eq. (4) as
(cid:91)
Φ(G)= {f(D)|D ∈Dr s.t. i(D)⊆G}. (5)
Σ,∆,π
3.2 Comparing Disks and Subgraphs
Let us embark on the third question: is it the case that i(D) ⊆ G implies
D = Gr for some v? Making the long story short, the answer is no. But it
v
is crucial to understand precisely why. Fix some vertex v ∈ V(G). Clearly, in
Eq. (2), the only considered disk centered on v is Gr. Let us determine now
v
what are exactly the disks centered on v involved in Eq. (5), that is, the set
I :={(H,v)∈Dr |H ⊆G}. Firstly, Gr is one of them of course.
v Σ,∆,π v
Lemma 1. For any vertex v ∈V(G), Gr ∈I .
v v
The concern is that Gr is generally not the only one disk in I as expected
v v
by Eq. (2). However, Gr is the maximal one in the following sense.
v
Lemma 2. For any vertex v ∈ V(G), consider the disk Gr = (H,v). Then for
v
any disk (H′,v)∈I , we have H′ ⊆H.
v
In some sense, the converse of the previous proposition holds: it is roughly
enoughtobesmallerthanGr tobeadiskofI ,ascharacterizedbythefollowing
v v
two propositions.
Lemma 3. The set of disks is the set of pointed connected finite graphs.
Proposition 2. For any vertex v ∈ V(G), I is a principal downward closed
v
set in the poset of graphs restricted to connected finite graphs containing v.
We now know that the union of Eq. (5) receives a bigger set of local outputs
tomergethantheunionofEq.(2).Butwecannotconcludeanythingyet.Indeed,
itmightbethecasethatalladditionallocaloutputsdonotcontributeanything
more. This is in particular the case if disks D ∈I are such that f(D)⊆f(Gr).
v v
This is related to the fourth and last question.8 Luidnel Maignan and Antoine Spicher
Fig.1. Moving particle CGD - non-monotonic behavior. Each row represents an ex-
ampleofevolutionwithagraphGontheleftandF(G)ontheright.Colorscorrespond
to vertex names.
3.3 Monotonic and General Causal Graph Dynamics
The last remark invites us to consider the case where the CGD is monotonic.
We deal with the general case afterward.
Monotonic CGD as Kan Extensions. As just evoked, things seem to go
well if the local rule f happens to be monotonic. All the ingredients have been
already given and the proposition can be made formal straightforwardly.
Proposition 3. LetF :G →G beaCGDwithlocalrulef :Dr →
Σ,∆,π Σ,∆,π Σ,∆,π
G of radius r. If f is monotonic, then F is the pointwise left Kan extension
Σ,∆,π
of f along i:Dr →G , the projection of discs to graphs.
Σ,∆,π Σ,∆,π
Proof. The proposition is equivalent to show that F(G)=Φ(G) for all G. Sum-
marizing our journey up to here, we now know that Eq. (5) and Eq. (2) are
(cid:83)
similarexceptthattheformeriteratesoverthesetofdisksI = I while
v∈V(G) v
the latter iterates over J = {Gr | v ∈ V(G)}, with J ⊆ I by Prop. 1. We get
v
F(G)⊆Φ(G). Moreover, by Prop. 2, for any D ∈I for any v, D ⊆Gr, and by
v v
monotonicityoff,f(D)⊆f(Gr).Sof(D)⊆F(G)forallD andΦ(G)⊆F(G),
v
leading to the expected equality.
The class of CGD having such a monotonic local rule is easily characteriz-
able: they correspond to CGD that are monotonic themselves as stated by the
following proposition.
Proposition 4. A CGD F is monotonic iff F admits a monotonic local rule.
Corollary 1. A CGD is monotonic iff it is a left Kan extension.
The Non-Monotonic Case. The previous result brings us close to our initial
goal:encodinganyCGDasaGT.Thejobwouldbeconsidereddoneonlyifthere
is no non-monotonic CGD, or if those CGD are degenerate cases. However, it is
clearly not the case and most of the examples in the literature are of this kind,
as we can see with the following example, inspired from [3].Causal Graph Dynamics and Kan Extensions 9
Consider for example the modeling of a particle going left and right on a
linear graph by bouncing at the extremities. The linear structure is coded using
twoports“left”and“right”oneachvertex,whiletheparticleisrepresentedwith
the presence of a label on some vertex, with two possible values indicating its
direction.SeeFig.1forillustrationsofsuchgraphs.Thedynamicsoftheparticle
iscapturedbyF asfollows.Supposethattheparticleislocatedatsomevertexv
(in green in Fig. 1), and wants to go to the right. If there is an outgoing edge to
the right to an unlabeled vertex u (in pink in Fig. 1), the label representing the
particleismovedfromv tou(secondrowofFig.1).Ifthereisnooutgoingedge
to the right (the “right” port of v is free), it bounces by becoming a left-going
particle (third row of Fig. 1). F works symmetrically for a left-going particle.
ThebehaviorofF isnon-monotonicsincethelattersituationisasub-graphof
theformer,whiletheparticlebehaviorsinthetwocasesareclearlyincompatible.
On Fig. 1, the right hand sides of the second and third rows are comparable by
inclusion, but the left hand sides are not. This non-monotonicity involves a
missing edge but missing labels may induce non-monotonicity as well. Suppose
for the sake of the argument that F generates a right-going particle at any
unlabeled isolated vertex (first row of Fig. 1). The unlabeled one-vertex graph
is clearly a subgraph of any other one where the same vertex is labeled by a
right-going particle and has some unlabeled right neighbor. In the former case,
the dynamics puts a label on the vertex, while it removes it on the latter case.
The new configurations are no longer comparable. See the first and second rows
of Fig. 1 for an illustration.
Proposition 5. CGD are not necessarily monotonic.
FromCorollary1,weconcludethatallnon-monotonicCGDarenotleftKan
extensionsaswehavedevelopedsofar,i.e.,basedonthesubgraphrelationshipof
Def8.AnalyzingtheparticleCGDinthelightofRemark1tellsuswhy.Indeed,
the subgraph ordering is able to compare a place without any right neighbor
with a place with some (left-hand-side of rows 3 and 2 in Fig. 1 for instance).
FollowingRemark1,intheGTsetting,theformersituationhaslessinformation
than the latter: in the former, there is no clue whether the place has a neighbor
ornot;thedynamicsshouldnotbeabletospecifyanybehaviorforaparticleat
that place. But clearly, for the corresponding CGD, both situations are totally
different: the former is an extremity while the latter is not, and the dynamics
specifies two different behaviors accordingly for a particle at that place.
4 Universality of Monotonic Causal Graph Dynamics
We have proven that the set of all CGD is strictly bigger than the set of mono-
tonic ones. However, we prove now that it is not more expressive. By this, we
mean that we can simulate any CGD by a monotonic one, i.e., monotonic CGD
are universal among general CGD.
Moreprecisely,givenageneral CGDF,amonotonicsimulationofF consists
of encoding, call it ω(G), of each graph G, and a monotonic CGD F′ such that10 Luidnel Maignan and Antoine Spicher
Fig.2. Moving particle CGD - monotonic behavior. Compared to Fig. 1, each vertex
has two additional ports and unlabeled vertices are now labeled by ⋆.
whenever F(G) = H on the general side, F′(ω(G)) = ω(H) on the monotonic
side. Substituting H in the latter equation using the former equation, we get
F′(ω(G))=ω(F(G)), the exact property of the expected simulation: for any F,
we want some ω and F′ such that F′◦ω =ω◦F.
4.1 Key Ideas of the Simulation
In this section, we aim at introducing the key elements of the simulation infor-
mally and by the mean of the moving particle example.
EncodingtheOriginalGraphs:TheMovingParticleCase. Letusdesign
a monotonic simulation of the particle dynamics. The original dynamics can be
made monotonic by replacing the two missing edges at the extremities by easily
identifiableloopbackedges,makingincomparablethetwooriginallycomparable
situations. For such loopback edges to exist, we need an additional port for
each original port, in our case say “left-loop” and “right-loop” for instance. For
the case of non-monotonicity with labels, vertices where there is no particle (so
originally unlabeled) are marked with a special label, say ⋆. Fig. 2 depicts the
same evolutions as Fig. 1 after those transformations.
This will be the exact role of the encoding function ω: the key idea to design
a monotonic simulation is to make uncomparable the initially comparable situ-
ations. Any missing entity (edge or label) composing an original graph G needs
to be replaced by a special entity (loopback edge or ⋆ respectively) in ω(G) in-
dicating it was originally missing. At the end of the day, for any G⊊H, we get
ω(G) and ω(H) no longer comparable.
An Extended Universe of Graphs. All that remains is to design F′ such
that F′◦ω =ω◦F. It is important to note however that the universe of graphs
targeted by ω, which is the domain of F′, is by design much larger than the
original universe. Indeed, each vertex has now a doubled number of ports and
the additional label ⋆ is available. So to be completely done with the task, weCausal Graph Dynamics and Kan Extensions 11
Fig.3. Differentclassesofgraphs:fromlefttoright,atotalgraph,acoherentpartial
graph, an incoherent graph.
needF′ tobeabletoworknotonlywithgraphsgeneratedbytheencoding,but
also with all the other graphs.
Let us classify the various cases. Firstly, notice that the monotonic coun-
terpart ω(G) of any graph G is “total” in the following sense: all vertices have
labels, all original ports have edges, and all edges have labels. However, there
also exists partial graphs with free ports and unlabeled vertices in this mono-
tonic universe of graphs. Secondly, ω(G) uses the additional ports strictly for
the encoding of missing edges with loopback edges. But, there are also graphs
making arbitrary use of those ports and which are not “coherent” with respect
totheencoding.Fig.3illustratesthethreeidentifiedclasses:themiddlegraphis
a coherent subgraph of the total graph on the right, and of an incoherent graph
on the left. Notice that incoherent edges can always be dropped away to get the
largest coherent subgraph of any graph. This is the case on the figure.
Disks in the Extended Universe. In order to design a local rule f′ of the
monotonic CGD F′, we need to handle disks after encoding. The universe of
graphs being bigger than initially, this also holds for disks, and the behavior of
f′ will depend on the class of the disk.
Let us first identify the monotonic counterpart of the original disks. They
are called “total” disks and correspond to disks of some ω(G). For those disks,
the injectivity of ω allows f′ to simply retrieve the corresponding disk of the
original graph G and invoke the original local rule f on it.
An arbitrary disk D may not be “total” and exhibit some partiality (free
ports,unlabeledverticesoredges).Sincef′ isrequiredtobemonotonic,itneeds
to output a subgraph of the original local rule output. More precisely, we need
tohavef′(D)⊆f′(D′)foranytotaldiskD′ withD ⊆D′.Theeasiestwaytodo
thatisbyoutputtingtheemptygraph:f′(D)=∅.(Thissolutioncorrespondsto
the so-called coarse extension proposed for CA in [4]; finer extensions are also
considered there.)
Last, but not least, an arbitrary disk D may make an incoherent use of the
additional ports with respect to ω. In that case, all incoherent information may
be ignored by considering the largest coherent subdisk D′ ⊆D. The behavior of
f′ on D is then aligned with its behavior on D′: f′(D)=f′(D′).
A Larger Radius. The last parameter of f′ to tune is its radius. It will of
course depend on the radius of the local rule of F. But it is worth noting that
we are actually trying to build more information locally than the original local12 Luidnel Maignan and Antoine Spicher
r+1 r+1 r
c v
Fig.4. We need to determine for each missing entity attached to a vertex or edge of
f(Gr),whetherallotherf(Gr)agreetoconsiderthisentityasmissing.Theproperty2
c v
oflocalrules(Def.5)tellsusthatonlydisksGr thatintersectGr needtobechecked.
v c
Thefurthestsuchv areatdistance2r+2.Fromthere,weneedtoaskforradiusr (so
radius r′ =3r+2 from c) to include the entirety of Gr (including its border at r+1
v
from v, and therefore 3r+3 at most from c).
rule was trying to. Indeed, given a vertex of the original global output, many
local rule applications may contribute concurrently to its definition. All of these
contributionsareconsistentwitheachotherofcourse,butitispossibleforsome
local outputs to indicate some features of that vertex (label, edges) while others
donot.Ifevenoneofthemputssuchalabelforinstance,thenthereisalabelin
theglobaloutput.Itisonlyifnoneofthemputalabelthattheglobaloutputwill
not have any label on it. The same holds similarly for ports: a port is free in the
global output if it is so on all local outputs. Because the monotonic counterpart
needs to specify locally if none of the local rule applications puts such a feature
to a vertex, the radius of the monotonic local rule needs to be big enough to
include all those local rule input disks. It turns out that the required radius for
f′ is r′ = 3r+2, if r is the radius of the original local rule f, as explained in
Fig. 4.
4.2 Formal Definition of the Simulation
Now that we have all the components of the solution, let us make them precise.
The Encoding Function ω. The encoding function aims at embedding the
graphs of G in a universe where ports are doubled and labels are extended
Σ,∆,π
with an extra symbol. Set Σ′ := Σ ⊎{⋆}, ∆′ := ∆⊎{⋆}, and π′ = π×{0,1}.
Ports(a,0)∈π′ areconsideredtobesemanticallythesameastheircounterpart
a∈π while ports (a,1) are their for loopback edges. For simplicity, let us define
theshort-handsG andG′ forG andG respectivelyfortheremainder
Σ,∆,π Σ′,∆′,π′
of this section. Since we need to complete partial functions, we introduce the
following notation: for any partial function f : X ⇀ Y and total function z :Causal Graph Dynamics and Kan Extensions 13
X →Z, we define the total function f!z :X →Y ∪Z
(cid:40)
f(x) if f(x) is defined,
(f!z)(x)=
z(x) otherwise.
For simplicity, we write f!⋆ for f!(x (cid:55)→ ⋆) where x runs over X. This allows us
to define the encoding ω(G)∈G′ of any G∈G as follows.
V(ω(G)):=V(G)
σ(ω(G)):=σ(G)!⋆
E(ω(G)):={{u:(i,0),trg⋆(u:i)}|u:i∈V(G):π}
G
(cid:40)
(δ(G)!⋆)({u:0,v:j}) if b=0
δ(ω(G))({u:(i,a),v:(j,b)}):=
⋆ if u:i=v:j
The definition of E(ω(G)) is written to make clear that all original ports are
indeed occupied by an edge. The total function trg⋆ :V(G)×π →V(G)×π′ is
G
defined based on the partial function trg :V(G)×π ⇀V(G)×π as follows.
G
trg (u:i):=v:j iff {u:i,v:j}∈E(G)
G
trg⋆ :=(t ◦trg )!t where t (u:i):=u:(i,m)
G 0 G 1 m
The definition of δ(ω(G)) deals with original edges for the first case, and with
loopback edges for the second, which are the only two possibilities with respect
to trg⋆.
G
The Disk Encoding Function ω . Let us now define the shorthands D and
r r
D′ for Dr and Dr for any radius r. We put the radius as a subscript
r Σ,∆,π Σ′,∆′,π′
to make readable the four combinations D , D′, D , and D′ . The function
r r r′ r′
ω :D →D′ aims at encoding original disks as total disks. It is defined as
r r r
ω ((D,v))=ω(D)r. (6)
r v
The reason we apply (−)r :G′ →D′ on the raw result of ω is that the behavior
v r
ofω(addingloopbackedgesoneachunusedportandlabelsonunlabeledvertices
and edges) is not desired at distance r+1 for the result to be a disk of radius r.
More conceptually, ω is the unique function having the following commutation
r
property, which expresses that ω is the disk counterpart of ω.
r
Proposition 6. For any graph G∈G, ω (Gr)=ω(G)r.
r v v
Coherent Subgraph Function coh. As discussed informally, some graphs in
G′ maybeill-formedfromtheperspectiveoftheencodingbyusingdoubledports14 Luidnel Maignan and Antoine Spicher
arbitrarily.Wedefinethefunctioncoh:G′ →G′ thatremovestheincoherencies.
V(coh(G′)):=V(G′)
σ(coh(G′)):=σ(G′)
E(coh(G′)):={{u:(i,0),v:(j,b)}∈E(G′)|
b=1⇒(v:j =u:i ∧ δ(G′)({u:(i,0),u:(i,1)})=⋆)}
δ(coh(G′)):=δ(G′)↾E(coh(G′))
Since coh only removes incoherent edges, and since they are stable by inclusion,
we trivially have that
Lemma 4. coh is monotonic.
The Monotonic Local Rule. The monotonic local rule f′ is defined in two
stages.ThefirststageistotakeadiskinD′ andtransformitintosomethingthat
r′
the original local rule can work with. To do this, we remove any incoherencies
withthefunctioncoh,andiftheresultistotal,werestrictittothecorrectradius
and retrieve its counterpart in the original universe (which is possible because
ω is injective). The original local function can be called on this counterpart.
r
As discussed before, if the coherent sub-disk is not total, we simply output an
empty graph. The signature of this function is ϕ:D′ →G.
r′
(cid:26) ∅ if coh(D′)∈/ Im(ω )
ϕ(D′,c):= r′ (7)
f(ω−1(coh(D′)r))otherwise
r c
Turning this result in G into its counterpart in G′ is more complicated than
simplyinvokingωsinceonehavetocheckthatmissingentitiesarereallymissing,
as discussed in Fig. 4. This is the purpose of the second stage leading to the
definition of the monotonous local rule f′ :D′ →G′ which, thanks to its radius
r′
r′ =3r+2, is able to inspect all r-disks at distance 2r+2 from c.
(cid:16) (cid:17)0
f′((D′,c))=ω (cid:83) ϕ(D′,v) (8)
v∈Dc′2r+1
ϕ(D′,c)
In this equation, the union of all local results that can contribute to entities
attached to ϕ(D′,c) is built. In this way, they are all given a chance to say
if what was missing in ϕ(D′,c) is actually missing. Finally ω is applied and
its result restricted to the sole vertices of ϕ(D′,c) and their edges, using the
notation (−)0 of Eq. (1). Those vertices and edges are the only one for which
X
all the possibly contributing disks have been inspected.
Proposition 7. f′ is a monotonic local rule.
The Monotonic Simulation. We finally have the wanted CGD F′ of local
rule f′:
F′(G′):= (cid:91) f′(G′r′ ).
v
v∈V(G′)Causal Graph Dynamics and Kan Extensions 15
It remains then to show that F′ is indeed a monotonic simulation of F, which
is achieved with the two next propositions.
Proposition 8. F′ is monotonic.
Proof. Sincef′ ismonotonicbyProp.7,F′ ismonotonicaswellbyProp.4.
Proposition 9. F′ simulates F via the ω encoding, i.e., F′◦ω =ω◦F.
Proof. Suppose G′ =ω(G) for some G∈G. Since all involved disks in F′(ω(G))
aretotalandthankstoProp.6,theexpressionofF′(ω(G))simplifiesdrastically.
F′(ω(G))= (cid:91) ω(cid:16) (cid:83) f(Gr)(cid:17)0 . (9)
v∈G2 cr+1 v
f(Gr)
c∈V(G) c
Clearly, F′(ω(G)) does not exhibit any incoherencies and ω(F(G)) is total, so it
is enough to show that ω(F(G)) ⊆ F′(ω(G)) to have the equality. This can be
doneentitybyentity.Takeavertexu∈ω(F(G)).Itcomesfromsomef(Gr).So
c
it belongs to the inner union of Eq. (9). It is preserved by ω then by (−)0 ,
f(Gr)
c
so it belongs to F′(ω(G)). Consider now its label ℓ := δ(ω(F(G)))(u). If ℓ ̸= ⋆,
there is some v ∈ G2r+1 with ℓ = δ(f(Gr))(u). So the inner union of Eq. (9)
c v
labels u by ℓ. The label is preserved by ω then by (−)0 since u ∈ f(Gr).
f(Gr) c
c
So δ(F′(ω(G)))(u) = ℓ as well. If ℓ = ⋆, this means that none of the f(Gr)
v
put a label on u, so u is unlabeled in the inner union of Eq. (9). By defini-
tion, ω completes the labeling by ⋆ at u, and (−)0 preserves this label. So
f(Gr)
c
δ(F′(ω(G)))(u) = ⋆ as well. The proof continues similarly for edges and their
labels, with an additional care for dealing with loopback edges.
5 Conclusion
In this article, we planned to compare CGD and GT frameworks. The very
particular route we have chosen for this task led us to identify the class of
Monotonic CGD which are both CGD and GT, and happen to be universal
among all CGD.
Thisworkwasguidedbytheformalsimilaritiesbetweenthetwoframeworks
leading to a list of four questions. The chosen strategy to cope with these ques-
tions was to tackle the first one “what is the order?” with the goal of answering
positively to the second question “is the union of CGD the supremum of this
order?”. This journey led us to identify the subgraph order to structure the set
of port graphs instead of considering them independent (more precisely related
by the disks only) as the original framework does. This pushes forward the idea
of using graph inclusion to express gain of information as proposed by the GT
framework,openinganewdirectionwhendesigningCGDbyrespectingtheorder
with monotonicity.
Oneinterestingthingtonoteisthataslightadaptationoftheoriginaldefini-
tion of port graphs allows to represent general CGD as Kan extensions without16 Luidnel Maignan and Antoine Spicher
any encoding. Indeed, the encoding considered in this article leads to a universe
of graphs where most of them are ill-formed. By adding explicitly to graphs
additional features to represent the positive information that some port is not
occupiedorsomelabelismissing,itispossibletogetauniversewhereallobjects
make sense.
An alternative route to answer the four-question list is possible by tackling
the first question with the goal of answering the third one (almost) positively,
thus falsifying the second one. An order closely related to this route is the “in-
ducedsubgraph”orderstatingthatGislowerthanH ifG=H0 .Thisorder
V(G)
is stronger than the usual subgraph order but is also very interesting. Fewer
graphs are “inducedly consistent” and one may ask if the subclass of CGD de-
finable with this stronger notion of consistency is universal. This might give an
idea on whether the result of this article is isolated or, on the contrary, if it
follows a common pattern shared with many instances.
Finally,letusnotforgetthenextstepssketchedintheintroduction,inpartic-
ular the quotienting of vertex names. In this paper, the notions of isomorphism
andrenaming-invarianceofCGDplaynorealrole.BecauseGTuseacategorical
language, this renaming-invariance can be handled by quotienting the objects
of the poset, but not the arrows between the objects. This means that there
would be now typically many arrows between two objects that the GT frame-
work is able to cope with. Indeed, the formalism of GT was designed to work
with objects like abstract graphs where no notion of names or positioning exist,
but only their (possible multiple) occurrences in each other. As similar line of
thought was already explored for cellular automata in [4]. Indeed, cellular au-
tomata are typically defined with a global positioning system, but many studies
actually only care about the relative positioning of the information. A similar
treatment for CGD is for futur work.
References
1. Arrighi, P., Dowek, G.: Causal graph dynamics. In: Czumaj, A., Mehlhorn, K.,
Pitts,A.M.,Wattenhofer,R.(eds.)Automata,Languages,andProgramming-39th
International Colloquium, ICALP 2012, Warwick, UK, July 9-13, 2012, Proceed-
ings, Part II. Lecture Notes in Computer Science, vol. 7392, pp. 54–66. Springer
(2012). https://doi.org/10.1007/978-3-642-31585-5_9, https://doi.org/10.
1007/978-3-642-31585-5_9
2. Arrighi,P.,Martiel,S.:Quantumcausalgraphdynamics.PhysicalReviewD96(2),
024026 (2017)
3. Arrighi, P., Martiel, S., Perdrix, S.: Reversible causal graph dynamics: in-
vertibility, block representation, vertex-preservation. Nat. Comput. 19(1), 157–
178 (2020). https://doi.org/10.1007/S11047-019-09768-0, https://doi.org/
10.1007/s11047-019-09768-0
4. Fernandez,A.,Maignan,L.,Spicher,A.:Cellularautomataandkanextensions.Nat.
Comput.22(3),493–507(2023).https://doi.org/10.1007/S11047-022-09931-0,
https://doi.org/10.1007/s11047-022-09931-0
5. Maignan, L., Spicher, A.: Global graph transformations. In: Plump, D. (ed.) Pro-
ceedings of the 6th International Workshop on Graph Computation Models co-Causal Graph Dynamics and Kan Extensions 17
located with the 8th International Conference on Graph Transformation (ICGT
2015)partoftheSoftwareTechnologies:ApplicationsandFoundations(STAF2015)
federationofconferences,L’Aquila,Italy,July20,2015.CEURWorkshopProceed-
ings,vol.1403,pp.34–49.CEUR-WS.org(2015),http://ceur-ws.org/Vol-1403/
paper4.pdf18 Luidnel Maignan and Antoine Spicher
A Proofs for Section 3 (Unifying Causal Graph Dynamics
and Kan Extensions)
Proposition 1. Two graphs G and H are consistent precisely when they admit
anupperboundin(G ,⊆).TheunionofGandH isexactlytheirsupremum
Σ,∆,π
(least upper bound) in (G ,⊆). The intersection of G and H is exactly their
Σ,∆,π
infimum (greatest lower bound) in (G ,⊆).
Σ,∆,π
Proof. Admitting an upper bound in G means there is K ∈ G such
Σ,∆,π Σ,∆,π
that G ⊆ K and H ⊆ K. Since the subgraph order is defined componentwise,
we consider the union of G and H as quadruplets of sets:
(V(G)∪V(H),E(G)∪E(H),σ(G)∪σ(H),δ(G)∪δ(H)),
which always exists and is the least upper bound in the poset of quadruplets of
sets with the natural order. For this object to be a graph, it is enough to check
E(G)∪E(H) is a non-intersecting two-element set, and that σ(G) and σ(H)
(resp. δ(G) and δ(H)) coincide on their common domain. This is the case when
G and H admit an upper bound as required in the definition. Conversely, when
the condition holds, the union is itself an upper bound.
For intersection, consider
(V(G)∩V(H),E(G)∩E(H),σ(G)∩σ(H),δ(G)∩δ(H))
which is clearly the greatest lower bound and is always a graph.
Lemma 1. For any vertex v ∈V(G), Gr ∈I .
v v
Proof. IntheDef.4,thegraphcomponentH ofthepointedgraphGr isexplicitly
v
defined by taking a subset for each of the four components of G, as required in
Def. 8 of subgraph.
Lemma 2. For any vertex v ∈ V(G), consider the disk Gr = (H,v). Then for
v
any disk (H′,v)∈I , we have H′ ⊆H.
v
Proof. By Def. 8 of the subgraph order, we need to prove four inclusions. For
the inclusion of vertices, consider an arbitrary vertex w ∈V(H′). By definition
ofdisksofradiusr,thereisapathinH′ fromv towoflengthatmostr+1.But
since H′ ⊆G, we have w ∈V(G) and this path itself is also in G. So w ∈V(G)
respects the defining property of the set V(Gr) and therefore belongs to it. The
v
three other inclusions (E(H′) ⊆ E(H), σ(H′) ⊆ σ(H) and δ(H′) ⊆ δ(H)) are
proved similarly, by using the definition of disks, then the fact H′ ⊆ G, and
finally the definition of Gr.
v
Lemma 3. The set of disks is the set of pointed connected finite graphs.
Proof. Indeed,foranydisk(H,v)∈D ,H isconnectedsinceallverticesare
Σ,∆,π
connected to v, and H is finite since all vertices have at most |π| neighbors, so
a rough bound is |π|r with r the radius of the disk. Conversely, for any pointed
connected finite graphs (G,v), we have (G,v)=Gr for any r ≥|V(G)|−1, the
v
length of the longest possible path.Causal Graph Dynamics and Kan Extensions 19
Proposition 2. For any vertex v ∈ V(G), I is a principal downward closed
v
set in the poset of graphs restricted to connected finite graphs containing v.
Proof. Indeed, consider any disk (H,v) such that H ⊆ G. Now, take H′ a con-
nected graph containing v and such that H′ ⊆H. Since H is finite, so is H′. By
Proposition 3, (H′,v) is also a disk. By transitivity, H′ ⊆ H ⊆ G. This proves
that we have a downward closed set. This is moreover a principal one because
of Propositions 1 and 2.
Proposition 4. A CGD F is monotonic iff F admits a monotonic local rule.
Proof. If F has a monotonic local rule f, F is a left Kan extension by Prop. 3
and is monotonic as recalled in Sec. 2.3.
Conversely, suppose F monotonic. By Def. 6 of CGD, there is a local rule
f′, not necessarily monotonic, of radius r generating F. Consider f defined by
f((H,c))=F(H) for any disk (H,c). f is monotonic by monotonicity of F. f is
a local rule, which is checked easily using that f′ is itself a local rule and that
f((H,c))=(cid:83) f′(Hr). f generates F. For any graph G:
v∈H v
(cid:91) (cid:91) (cid:91)
f(Gr)= f′(i(Gr)r).
c c v
c∈V(G) c∈V(G)v∈Gr
c
But f′(i(Gr)r) ⊆ F(i(Gr)) ⊆ F(G), the last inclusion coming from the mono-
c v c
tonicityofF.So(cid:83) f(Gr)⊆F(G).Moreover,foranyc,f′(Gr)=f′(i(Gr)r),
c∈V(G) c c c c
so f′(Gr)⊆(cid:83) f(Gr) and F(G)⊆(cid:83) f(Gr).
c c∈V(G) c c∈V(G) c
Proposition 5. CGD are not necessarily monotonic.
Proof. Take |π| = 1, Σ = ∆ = ∅. In a graph G, we have isolated vertices and
pairwiseconnectedvertices.Forthelocalrule,considerr =1,sothetwopossible
disks(modulorenaming)aretheisolatedvertexandapairofconnectedvertices.
ThereisnographGsuchthatthetwodisksappeartogether(otherwiseGwould
ask the vertex to be connected and disconnected at the same time). So we can
definef suchthatitactsinconsistentlyonthetwodisks,sinceproperty4oflocal
rules does not apply here. But the isolated vertex is included in the connected
vertices in the sense of ⊆, but the image by f, then by F are not.
B Proofs for Section 4 (Universality of Monotonic Causal
Graph Dynamics)
Proposition 6. For any graph G∈G, ω (Gr)=ω(G)r.
r v v
Proof. Take Gr =(D,v). After inlining the definition of ω , we are left to show
v r
ω(D)r =ω(G)r. For any entity (vertices, labels, edges) at distance at most r of
v v
v, ω(D) and ω(G) coincide. At distance r+1, things may differ for the special
label ⋆ and loopback edges, and beyond distance r+1, ω(D) has no entities at
all. However, all these differences are exactly what is removed by (−)r. So, we
v
get the expected equality.20 Luidnel Maignan and Antoine Spicher
Proposition 7. f′ is a monotonic local rule.
Proof. We first show that f′ is a local rule, that is, to check the four properties
of 5.
We need to show that for any isomorphism R, there is a conjugate R′ such
thatf′◦R=R′◦f′.WeshowthattheconjugateR′ ofRforf works.Theresult
is obvious for coh(D′)∈Im(ω ). In the other case, take E′ :=coh(D′):
r′
f′(R(D′,c))=f′((R(D′),R(c)))
(cid:91)
=ω( f(ω−1(R(E′)r)))
r v f(ωr−1(R(E′)r R(c)))
v∈R(D′)2r+1
R(c)
(cid:91)
=ω( R′(f(ω−1(E′r ))))
r R′(v) R′(f(ωr−1(E c′r)))
v∈R(D′)2r+1
R(c)
(cid:91)
=R′(ω( f(ω−1(E′r))))
r v R′(f(ωr−1(E c′r)))
v∈Dc′2r+1
(cid:91)
=R′[ω( f(ω−1(E′r))) ]
r v f(ωr−1(E c′r))
v∈Dc′2r+1
=R′(f(D′,c)).
Consider a family of disks {(D′,c )} ⊂D′ such that (cid:84) D′ =∅. We need
i i i∈I r′ i i
to show that (cid:84) f′(D′,c ) = ∅. We suppose that for all i, E′ := coh(D′) ∈
i i i i i
Im(ω ) (otherwise the result is trivial). First notice that for any family {v ∈
r′ i
(D′)2r+1}, we have (cid:84) ω−1((E′)r ) = ∅, so (cid:84) f(ω−1((E′)r )) = ∅. Suppose
nowi c si
ome vertex u
ini (cid:84)r f′(D′i ,cvi
). So, for
eaci
h i
tr
here
ii sv si
ome v such that
i i i i
u∈f(ω−1((E′)r )) which is impossible.
r i vi
Weneedaboundbsuchthatforall(D′,c)∈D′ ,|V(f′(D′,c))|≤b.Wecon-
r′
sider the bound b given by f and show that it works. Indeed the last step of the
computation of f′ is precisely a restriction to the vertices of f(ω−1(coh(D′)r)).
r c
So |V(f′(D′,c))|≤|V(f(ω−1(coh(D′)r)))|≤b.
r c
Consider G′ ∈ G′ and c,d ∈ V(G′). We need f′(G′r′) and f′(G′r′) to be
c d
consistent. Once again, we suppose that coh(G′r′) ∈ Im(ω ) and coh(G′r′) ∈
c r′ d
Im(ω )(otherwisetheresultistrivial).Inordertousetheconsistencyproperty
r′
of f, we build G = ω−1(coh(G′r′))∪ω−1(coh(G′r′)). So for any pair of r-disks
r c r d
(D ,D ) of G, f(D ) and f(D ) are consistent. In other words, all the original
1 2 1 2
r-disks involved in f′(G′r′) and f′(G′r′) are consistent with each other. It is
c d
particularly true for ϕ(G′r′) and ϕ(G′r′). Edges of f′(G′r′) and f′(G′r′) are
c d c d
consistentbecauseeithertheycomefromf(Gr)andf(Gr)whichareconsistent,
c d
or they are backloop edges added by ω. Labels are also consistent for the same
kind of reason, making f′(G′r′) and f′(G′r′) consistent.
c d
We finally show that f′ is monotonic. Take two disks D′ and D′ such that
1 2
D′ ⊆D′.Asf′ isultimatelydefinedbycases,letusconsiderfirstthecasewhere
1 2
coh(D′) ∈/ Im(ω ). In this case f′(D′) = ∅ so we necessarily have f′(D′) ⊆
1 r′ 1 1
f′(D′). We are left with the case coh(D′)∈Im(ω ), meaning that coh(D′) is a
2 1 r′ 1Causal Graph Dynamics and Kan Extensions 21
totaldisk.SincecohismonotonicbyLem.4,coh(D′)⊆coh(D′).Andasatotal
1 2
disk, nothing but incoherences can be added to coh(D′). So coh(D′)=coh(D′)
1 1 2
and therefore f′(D′) = f′(D′). So the order is preserved in all cases, and f′ is
1 2
monotonic.