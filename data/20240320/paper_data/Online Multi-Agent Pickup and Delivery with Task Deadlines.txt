Online Multi-Agent Pickup and Delivery with Task Deadlines
Hiroya Makino1,∗, and Seigo Ito1
deadlines exceeded: 10 tasks
Abstract—Managing delivery deadlines in automated ware-
houses and factories is crucial for maintaining customer satis-
factionandensuringseamlessproduction.Thisstudyintroduces
theproblemofonlinemulti-agentpickupanddeliverywithtask
deadlines(MAPD-D),whichisanadvancedvariantoftheonline
MAPD problem incorporating delivery deadlines. MAPD-D
presentsadynamicdeadline-drivenapproachthatincludestask
deadlines, with tasks being added at any time (online), thus
challengingconventionalMAPDframeworks.TotackleMAPD-
D, we propose a novel algorithm named deadline-aware token
passing (D-TP). The D-TP algorithm is designed to calculate agent pickup location delivery location
(a) Conventional: Online task assignment with only execution cost
pickup deadlines and assign tasks while balancing execution
cost and deadline proximity. Additionally, we introduce the deadlines exceeded: 4 tasks
D-TP with task swaps (D-TPTS) method to further reduce
task tardiness, enhancing flexibility and efficiency via task-
swappingstrategies.Numericalexperimentswereconductedin
simulatedwarehouseenvironmentstoshowcasetheeffectiveness
oftheproposedmethods.BothD-TPandD-TPTSdemonstrate
significant reductions in task tardiness compared to existing
methods, thereby contributing to efficient operations in auto-
mated warehouses and factories with delivery deadlines.
I. INTRODUCTION
In the industrial automation landscape, the development (b) Proposed: Online task assignment with execution cost + deadline proximity
of automated guided vehicles (AGVs) has revolutionized
Fig.1. Simulationexamplesinafour-neighborgridenvironment[9].The
operational efficiencies. Enhancing multi-agent path finding blackcellsrepresentblockedareas;darkgraycellsindicatetaskendpoints;
(MAPF) to optimize the utilization of AGVs for more and light gray cells denote non-task endpoints. Each agent searches for a
pathfromthepickuplocationtothedeliverylocationfortheassignedtask.
effective transportation solutions has been extensively re-
UnlikeMAPD[9],adeadlineissetforeachtaskinMAPD-D.
searched [1], [2]. These advancements have been integrated
into various domains, including logistics automation [3],
[4], traffic control systems [5], automated valet parking [6], exploredMAPDwithdeadlinesinanofflinesetting,whereall
airport surface operations [7], and video games [8]. taskinformationisprovidedinadvance.However,tothebest
The multi-agent pickup and delivery (MAPD) problem is of our knowledge, no study has addressed deadline-aware
an extension of MAPF, wherein paths for multiple items are MAPDinanonlinesettingwheretasksmaybeaddedatany
plannedfrompickuplocationstodeliverylocations[9],[10], time. Hence, this study introduces new problem definitions
[11].MAPDcanbeappliedtovariousenvironments,includ- for MAPD-D.
ing automated warehouses and factories [9], [12], [13]. In
We propose the deadline-aware token passing (D-TP)
suchsettings,theimportanceofmanagingdeliverydeadlines
algorithm to tackle MAPD-D. This algorithm is designed to
cannot be overstated. Warehouses must tailor deadlines for
calculate pickup deadlines and assign tasks while striking a
individual orders to ensure customer satisfaction, whereas
balance between execution cost and deadline proximity. Ad-
factories require timely deliveries to maintain seamless pro-
ditionally,weintroducetheD-TPwithtaskswaps(D-TPTS)
duction. Therefore, satisfying the deadlines appropriately is
methodtoreducetasktardiness.D-TPTSenhancesflexibility
essential for operational efficiency and economic success.
andefficiencybyemployingtask-swappingstrategiesamong
To consider deadlines in MAPD, we define the online agents and within a single agent.
multi-agentpickupanddeliverywithtaskdeadlines(MAPD-
Theprimarycontributionsofthisstudycanbesummarized
D)asanewproblem(Fig.1).Existingstudies[14],[15]have
as follows:
1 H. Makino and S. Ito are with the Toyota Central R&D Labs., Inc., • A new problem (MAPD-D) is defined considering de-
41-1,Yokomichi,Nagakute,Aichi,Japan. livery deadlines and the possibility of adding tasks at
∗ Correspondingauthor.hirom@mosk.tytlabs.co.jp
any time.
This work has been submitted to the IEEE for possible publication.
Copyrightmaybetransferredwithoutnotice,afterwhichthisversionmay • A method for solving MAPD-D by calculating pickup
nolongerbeaccessible. deadlines and deadline-aware task assignments is pro-
4202
raM
91
]AM.sc[
1v77321.3042:viXraposed. MAPD-Dconsidersonlinetaskswithdeadlines,wheretasks
• Task-swapping methods are introduced to reduce task can be added at any time.
tardiness.
III. PROBLEMDEFINITION
The remainder of this paper is structured as follows. Sec-
In this section, we describe the shared definitions of
tion II describes the related work on MAPD. Section III
MAPD [9] and MAPD-D and define the tasks specific to
defines the MAPD-D problem, and Section IV describes
MAPD-D.
the proposed algorithm for solving this problem. Section V
AninstanceofMAPDandMAPD-Dconsistsofmagents
presentsthenumericalexperimentsperformedtoevaluatethe
in A = a ,··· ,a , a connected simple undirected graph
1 m
proposed method. Finally, Section VI summarizes the study
G=(V,E), and a set of unexecuted tasks T =τ ,··· ,τ .
1 k
findings and concludes the paper.
Here, V represents the vertices, E denotes the edges, and
II. RELATEDWORK l i(t) ∈ V indicates the location of agent a i at timestep t.
A path is a sequence of vertices associated with timesteps,
MAPF is the problem of moving multiple agents to
indicating the vertex at which the agent is located at each
their respective destination locations without collisions. The
timestep.
MAPF task ends when all agents reach their destinations.
Agentseitherremainattheircurrentnodel (t)=l (t+1)
In contrast, MAPD requires agents to attend to a stream i i
or move to an adjacent node via an edge (l (t),l (t+1))∈
of delivery tasks [9], [10], wherein each delivery task is i i
E at each timestep. Agents must avoid collisions with each
assigned a starting point (pickup location) and a destination
other. MAPD and MAPD-D define two types of collisions
point (delivery location). The system assigns these tasks to
[1],[9]:(1)Vertexconflict,wheretwoagentscannotoccupy
agents, which then move to the delivery location via the
the same location at the same timestep, i.e., for all agents
pickup location. The agents receive new tasks after reaching
a ,a (i̸=j)andalltimestepst,l (t)̸=l (t)musthold;and
the delivery location. Ma et al. [9], [10] described an online i j i j
(2) Swapping conflict, where two agents cannot move along
version of MAPD, in which tasks can be added to the set at
the same edge in opposite directions at the same timestep,
any time. Conversely, Liu et al. [11] discussed an offline
i.e., for all agents a ,a (i ̸= j) and all timesteps t, l (t) ̸=
variant where tasks and their release times are generally i j i
l (t+1) or l (t)̸=l (t+1) must hold.
predetermined. j j i
We further provide an extended definition of tasks in
Ma et al. [9] reported that online MAPD instances are
MAPD-D. Each task τ ∈ T consists of a pickup location
solvable if they are well-formed. They introduced locations j
vp ∈V, a delivery location vd ∈V, and a delivery deadline
referred to as endpoints, where agents can remain without j j
dd.NewtaskscanbeaddedtothetasksetT ateachtimestep.
blocking other agents. Endpoints include all pickup and j
When an agent assigned to a task reaches the delivery
delivery locations along with the initial positions and des-
locationviathepickuplocation,thetaskiscompleted,andits
ignated parking locations. The pickup and delivery locations
completion time is denoted as c . Once a task is completed,
arereferredtoastaskendpoints,whereastheotherlocations j
the agent is assigned to a new task.
serve as non-task endpoints. An MAPD instance is well-
The objective of MAPD is to identify paths that execute
formed if and only if (a) the number of tasks is finite, (b)
all tasks in a timely manner, whereas MAPD-D aims to
the number of agents is not greater than non-task endpoints,
minimize task tardiness. We define the tardiness for the j-
and (c) a path exists between any two endpoints without
th task as ϵ = max(0,c −dd). For each task τ , ϵ = 0
traversing others. j j j j j
indicates the success of the task, whereas ϵ > 0 indicates
To address online MAPD, Ma et al. [9] employed the j
task failure. The objective function of MAPD-D is selected
token passing (TP) algorithm. Tokens are a type of shared
from the following two options:
memorythatstoresallagentpathsaswellasthetasksetand
agent assignments. Agents sequentially access the token, are • Minimizingthenumberoftaskfailures[14],[16],[18]:
(cid:88)
assigned tasks, and find paths without colliding with already min U(ϵ ), (1)
j
reservedpaths.Thetokenisupdatedafteridentifyingapath.
1≤j≤k
Several researchers have investigated MAPF and MAPD
where U(·) is a unit step function 1.
with deadlines. In this study, we classified related studies
• Minimizing the cumulative tardiness [15], [17]:
from the literature considering four perspectives (Table I).
(cid:88)
“Multi-task” indicates whether each agent is continuously min ϵ j. (2)
assigned tasks; “Deadlines” denote whether each task is set 1≤j≤k
with a deadline; “Individual release times” denote whether In this study, we used the cumulative tardiness (2) as
the release time of each task is the same; and “Online” the objective function because it provides a more detailed
indicate whether tasks are added at any time. As shown in evaluation of tardiness compared to the objective function
Table I, Ma et al. [16], Wang and Chen [17], and Huang et (1), which only considers success or failure.
al. [18] considered deadlines in the context of MAPF. Wu et
al. [14] and Ramanathan et al. [15] introduced deadlines in
1Theunitstepfunction.
MAPD. However, the perspective of online tasks in MAPD (cid:40) 0 ifx≤0
U(x)=
was not considered in [14], [15]. In this study, the proposed 1 ifx>0TABLEI
RELATEDWORK.
Multi-task Deadlines Individualreleasetimes Online
Lifelongmulti-agentpathfindingforonlinepickupanddeliverytasks(MAPD)[9] ✓ × ✓ ✓
Multi-agentpathfindingwithdeadlines(MAPF-DL)[16] × ✓ × ×
Multi-robotpathplanningwithduetimes(MRPP-DT)[17] × ✓ × ×
Deadline-awaremulti-agenttourplanning(DA-MATP)[18] × ✓ × ×
Multi-agentpickupanddeliverywithtaskdeadlines(MAPD-TD)[14] ✓ ✓ × ×
Minimizingtasktardinessformulti-agentpickupanddelivery[15] ✓ ✓ ✓ ×
Proposed(MAPD-D) ✓ ✓ ✓ ✓
IV. PROPOSEDMETHOD α = 0, it is equivalent to the existing method [9] that does
not take the deadline into account.
This section outlines the D-TP algorithm employed to
3) Algorithm: Algorithm 1 provides the pseudocode for
address the MAPD-D problem, which is an extension of the
D-TP; parts that differ from TP [9] are indicated in red.
existing TP method. Typically, TP assigns tasks to agents
In lines 17–20, we define the UpdatePickupDeadline func-
solely based on execution cost. To reduce task tardiness, we
tion. In line 19, a dummy agent is prepared to calculate
introduce enhancements in two key areas: the calculation
the dummy path from the delivery location vd to the
of pickup deadlines and deadline-aware task assignment. j
pickup location vp using the reversed-path finding function
Additionally,wepresentD-TPTS,whichimprovesflexibility j
RP(dummy,vd,vp,token,dd).Inline20,thepickupdead-
and efficiency through task-swapping strategies. j j j
line dp is calculated by subtracting the length of the dummy
j
path. Here, |P| represents the length of the path, that is, the
A. D-TP
number of steps required to move.
1) CalculationofPickupDeadlines: Thepickupdeadline In line 1, the token is initialized with trivial paths where
is calculated based on the delivery deadline when a new all agents remain in their initial locations. At each timestep,
task τ j is added. We prepared a dummy agent, implemented the system adds all new tasks to the task set T (line 3).
usingprioritizedpathplanning[11].D-TPcalculatesthepath Subsequently, in line 4, the pickup deadline is calculated for
for the dummy agent to depart from the delivery location thenewlyaddedtasks.Lines5–15handlethetaskassignment
v jd at time dd j and move towards the pickup location v jp process. If one or more tasks are assignable, the system
by reversing the timesteps. During the path calculation, the assigns a task considering both the execution cost and the
orderofthepickupanddeliverylocationsisreversedbecause marginuntilthepickupdeadlinedp.Thepathfromvp tovd
j j j
the time required for transportation can vary depending on iscalculatedbythefunctionP(a ,vp,vd,token,t).Incases
i j j
the paths of other agents in the environment. The proposed where no tasks are assignable, the system handles deadlock
method searches for a path from the delivery location to resolution or maintains the current position of agents, as
the pickup location by reversing the order of time, thus outlinedin[9].Ifnewtaskassignmentsoverwritethedummy
calculating the latest possible path (dummy path) that meets paths, the pickup deadline is recalculated (line 15). Finally,
the delivery deadline. The pickup deadline dp j represents the agents proceed along their paths in the token (line 16).
time obtained by subtracting the length (timesteps) of the
dummy path from the delivery deadline dd. B. D-TPTS
j
2) Deadline-aware Task Assignment: The disparity be- In this section, we introduce two methods for task swap-
tween the calculated pickup deadline dp and the current ping that incorporate deadlines in MAPD-D: Task swapping
j
time t indicates the temporal margin of the deadline. In TP, among agents and task switching. Task swapping among
the system assigns tasks to minimize the execution cost at agents involves swapping tasks between agents, while task
the moment of assignment. In contrast, in D-TP, the system switching focuses on swapping tasks within a single agent.
assigns tasks to agents in a manner that minimizes the 1) Task Swapping Among Agents: Ma et al. [9] proposed
weightedsumoftheexecutioncostandthetemporalmargin the token passing with task swaps (TPTS) algorithm as a
relative to the deadline. solution to MAPD. In TP with task swapping, agents can be
assignednotonly“unassigned”tasksbutalso“tasksassigned
argmin(cid:0) α·(dp−t)+(1−α)·h(cid:0)
loc(a
),vp(cid:1)(cid:1)
, (3)
j i j to a different agent but not yet picked up.” This flexibility
τj∈T′
can be advantageous, particularly when one agent can pick
where 0 ≤ α ≤ 1 and T′ denotes the set of tasks that up a task faster than another. In such cases, the system
can be assigned to agent a . The first term (dp−t) denotes reassigns the task from one agent to another, allowing for
i j
the temporal margin for the deadline of task τ ; the second more efficient task completion.
j
term h(loc(a ),vp) indicates the h-value from the current In contrast to TPTS, which focuses solely on execution
i j
locationofagenta tothepickuplocationofthetask,which cost considerations, the proposed method modifies this ap-
i
represents the execution cost; and the parameter α indicates proach to incorporate a weighted sum of the execution cost
the weight for the urgency of the pickup deadline. When and temporal margin for deadlines, as expressed in (3).Algorithm 1 Token passing for tasks with deadlines (TP-D) Algorithm 2 Deadline-aware token passing with task swaps
1: Initializetokenwiththe(trivial)path[loc(ai)]foreachagentai (D-TPTS)
2: whiletruedo 1: Initializetokenwiththe(trivial)path[loc(ai)]foreachagentai
3: Addallnewtasks,ifany,totasksetT 2: whiletruedo
4: UPDATEPICKUPDEADLINE(newtasks,token) 3: Addallnewtasks,ifany,totasksetT
65 :: whi Tle ′a ←gen {t τa ji ∈th Tat |r neq ou oe ts hts erto pk ate hn inex ti os kts ed no endsinv jp orv jd} 4 5: : fU oP rD τA jT ∈EP nI eC wKU taP sD ksEA dD oLINE(newtasks,token)
7: ifT′̸=ϕthen 6: foragentai thatismovingtothepickuplocationdo
8: t←currenttim (cid:16)estep (cid:17) 7: τ j′ ←taskthatai isexecuting
9: τj∗ ←argmin α·(dp
j
−t)+(1−α)·h(loc(ai),v jp) 8: ifdp
j
<dp
j′
andh(loc(ai),v jp)<h(loc(ai),v jp ′)then
τj∈T′ 9: Unassigna′ i fromτ j′
10: Assignai toτj∗ 10: Removea′ i’spathfromtoken
1 11 2: : R Ue pm dao tv ee aτ ij ’s∗ pf aro thm inT tokenwithP(ai,v jp ∗,v jd ∗,token,t) 1 11 2: : whi Gle Ea Tg Te Ant SKa (i at ih ,a tt or ke eq nu )eststokenexistsdo
13: else
13: Allagentsmovealongtheirpathsintokenforonetimestep
14: Removedeadlockorstay
14: RemovetasksfromT whenagentsstarttoexecutethem
11 65 :: ten, Ato llkU ae gnP eD ) nA tsTE mP oI vC eK aU lP oD ngEA thD eL irIN pE at( hT sw inh to os ke ed nu fm orm oy np ea tt ih mi es so tev perwrit- 1 1 15 6 7: :
:
func T wt hi ′o i←n leG T{E τ ′T j ̸=T ∈A ϕS TK d( | oa ni o,t oo tk hee rn p) athintokenendsinv jp orv jd}
17: functionUPDATEPICKUPDEADLINE(tasks,token) 18: t←currenttimestep
1 18 9: : RPf (o dr uUτ mj pd m∈ at yt ea ,vs dk ,s τ vjd p’o ,s toked nu ,m dm d)y path in token with 1 29 0:
:
Rτj e∗ m← ovea τ τr jg ∈ fm rT oi ′ mn(cid:16) Tα·(dp j −t)+(1−α)·h(loc(ai),v jp)(cid:17)
j j j
20: Update τj’s pickup deadline dp
j
with dd
j
− 21: ifnoagentisassignedtoτj∗ then
|RP(dummy,vd,vp,token,dd)| 22: Assignai toτj∗
j j j 23: Updateai’spathintokenwithP(ai,v jp ∗,v jd ∗,token,t)
24: else
22 65 :: ia f′ i a←
i
rea ag ce hn et sth va jpt ∗is bea fs osi rg en ae
′
id tt ho eτ nj∗
27: Unassigna′
i
fromτj∗ andassignai toτj∗
2) Task Switching: In this approach, the agent is allowed 28: Removea′ i’spathfromtoken
29: Break
to abandon its current task and undertake a more urgent
30: ifnotaskisassignedtoai then
task if a task with higher urgency appears closer when an 31: Removedeadlockorstay
agent is en route to the pickup location. We anticipate that 32: UPDATEPICKUPDEADLINE(T whosedummypathisoverwritten,
token)
taskswitchingcanreducetardinessbyprioritizingtaskswith
higher urgency.
An agent will abandon its current task if both of the
following conditions are met:
V. NUMERICALEXPERIMENTS
• The urgency of the new task is higher than that of the
Thissectionoutlinesthenumericalexperimentsconducted
current task.
to compare the existing method (TP) with the proposed
• The execution cost of the new task is lower than that
algorithms (D-TP and D-TPTS). Our primary focus is to
of the current task.
evaluate the effectiveness of the proposed algorithms in
Inotherwords,thefollowinginequalitiesshouldholdsimul- reducing tardiness in an online setting.
taneously:
A. Evaluation of Task Tardiness
dp <dp (4) Thenumericalexperimentswerecarriedoutinagridenvi-
new cur
ronment,representinganautomatedwarehouse,asillustrated
h(loc(a ),vp )<h(loc(a ),vp ), (5)
i new i cur in Fig. 1. We generated 151 tasks by randomly selecting
pickupanddeliverylocationsfromthetaskendpoints,ensur-
where cur denotes the index of the current task of the agent ingnoduplication.Eachagentmovedtothedeliverylocation
a i and new represents the index of the new task. via the pickup location for the assigned task. We varied
3) Algorithm: Algorithm 2 provides the pseudocode for parameters such as task-release times and deadline duration
D-TPTS. The overall flow mirrors that of TPTS [9], with after task release to examine their significant impact during
differences highlighted in red. Lines 5–10 implement task the experiments (see Table II). The experiment involved 15
switching.Whenanagentisenroutetothepickuplocations, agents, with their initial positions randomly selected from
itabandonsitscurrenttaskandacceptsadifferenttaskifthe the non-task endpoints.
newtaskhasanearlierpickupdeadlineandalowerexecution We also examined an offline setting where tasks and
costthanthecurrenttask.Taskswappingisperformedinthe their release times are predetermined, in contrast to the
function GetTask (lines 15–32). As indicated in line 19, the online setting where tasks can be added at any time. In
system considers both the temporal margin of the pickup an offline setting, tasks can be allocated with foresight
deadline and the weighted sum of the task execution cost. to accommodate future tasks and preemptively moved in(a) Dense task release frequency and short deadlines. (b) Dense task release frequency and long deadlines.
(c) Sparse task release frequency and short deadlines. (d) Sparse task release frequency and long deadlines.
Fig.2. Comparisonsofcumulativetardines.
TABLEII
quentlyandwhendeadlinesareshort.Denselyreleasedtasks
SETTINGSOFTASKRELEASEFREQUENCYANDDEADLINES.
leave agents with limited spare time, leading to a buildup of
unexecuted tasks and an increase in cumulative tardiness.
Task-releasetimes Dense[0,300] Sparse[0,500]
Deadlinedurationafterrelease Short[20,80] Long[60,120] Similarly, shorter deadlines elevate the likelihood of tasks
*Valuesarerandomlyselectedfromauniformdistribution missing their deadlines, further contributing to cumulative
in[min,max].
tardiness.
Next, we explore the weight α in the proposed method.
anticipationofreleasetimes.Generally,offlinemethodstend We compare the disparities in cumulative tardiness caused
to yield solutions closer to the optimal solution compared to byvaryingα whenneithertaskswappingnortaskswitching
online methods. In this context, we referred to the method is implemented. Minimum tardiness is observed for dense
byRamanathanetal.[15],whoregardeddeadlinesinoffline task releases and short deadlines (Fig. 2(a)) at α = 0.0, for
tasks as ideal benchmarks. They employed a method that dense releases and long deadlines (Fig. 2(b)) at α=0.1, for
sorted tasks based on deadlines and assigned tasks to agents sparse releases and short deadlines (Fig. 2(c)) at α=0.025,
with lower execution costs. and for sparse releases and long deadlines (Fig. 2(d)) at
Fig. 2 illustrates the results of the proposed method α = 0.2. When tasks are released frequently and deadlines
alongside ideal values in the offline setting. The horizontal are short, prioritizing tasks with lower execution costs is
axis represents the weight α used during task assignment, crucialfortimelymanagement.However,inscenarioswhere
where smaller values prioritize execution cost and larger tasks are not released frequently or deadlines are not short,
valuesprioritizedeadlines.Whenα=0andtaskswitchingis thereissomeflexibilitytoconsiderdeadlines.WhileTPand
notemployed,themethodisequivalenttoTPandTPTS[9]. TPTS [9] solely considered execution costs (α = 0), the
The vertical axis indicates the total tardiness for each task, proposed method integrates temporal margin for deadlines
averaged across the results of 30 experiments. Our analysis along with execution costs, resulting in reduced tardiness.
demonstrates that the cumulative tardiness varies depending Nonetheless, excessively prioritizing the temporal margin of
on the value of α and the presence of task exchanges, deadlinesmayescalatetheexecutioncostsofeachtask.This
regardless of the release frequency and deadlines. can overwhelm agents and increasing cumulative tardiness.
Hence, adjusting the value of α based on the situation is
B. Discussion imperative.
Webeginbyexaminingthevariationsintardinessbasedon In all experiments, the lowest tardiness was achieved
task-releasefrequencyanddeadlinelength.InFig.2,boththe when both task swapping and task switching were imple-
proposedandconventionalmethodsexhibitnotabletrendsin mented. For example, in Fig. 2(b), implementing only task
tardiness. Tardiness increases when tasks are released fre- swapping reduced cumulative tardiness by 569.4, whereasimplementing both task swapping and task switching further REFERENCES
reduced tardiness by an additional 116.7. Task switching
[1] R.Stern,N.Sturtevant,A.Felner,S.Koenig,H.Ma,T.Walker,J.Li,
facilitates task reassignment when more urgent tasks are D. Atzmon, L. Cohen, T. K. Kumar, R. Barta´k, and E. Boyarski,
added. Additionally, task swapping enables task exchanges “Multi-AgentPathfinding:Definitions,Variants,andBenchmarks,”in
ProceedingsoftheInternationalSymposiumonCombinatorialSearch,
between agents, leading to further reduction in cumulative
vol.10,2019,pp.151–158.
tardiness. [2] O. Salzman and R. Stern, “Research Challenges and Opportunities
However, implementing only task switching may elevate in Multi-Agent Path Finding and Multi-Agent Pickup and Delivery
Problems,” in Proceedings of the International Joint Conference on
cumulative tardiness compared to not implementing any- AutonomousAgentsandMultiagentSystems,2020,pp.1711–1715.
thing, especially when task releases are frequent (Figs. 2(a) [3] P.R.Wurman,R.D’Andrea,andM.Mountz,“CoordinatingHundreds
and 2(b)). This aligns with the discussion on the value
ofCooperative,AutonomousVehiclesinWarehouses.”AIMagazine,
vol.29,no.1,pp.9–20,2008.
of α; in scenarios with frequent task releases, minimizing
[4] W. Honig, S. Kiesel, A. Tinka, J. W. Durham, and N. Ayanian,
execution costs outweighs considering task urgency. Task “PersistentandRobustExecutionofMAPFSchedulesinWarehouses,”
reassignment based on urgency through task switching in-
IEEERoboticsandAutomationLetters,vol.4,no.2,pp.1125–1131,
2019.
creases execution costs, consequently amplifying tardiness.
[5] K. Dresner and P. Stone, “A Multiagent Approach to Autonomous
Finally, we compare the proposed method (online) with IntersectionManagement,”JournalofArtificialIntelligenceResearch,
vol.31,pp.591–656,2008.
the ideal values (offline). In most cases, the tardiness of
[6] A. Okoso, K. Otaki, and T. Nishi, “Multi-Agent Path Finding with
the proposed method was equivalent to or worse than the Priority for Cooperative Automated Valet Parking,” in 2019 IEEE
ideal values (Figs. 2(a), (c), and (d)). However, in scenarios IntelligentTransportationSystemsConference(ITSC),2019,pp.2135–
2140.
with dense tasks and long deadlines, the proposed method
[7] J.Li,H.Zhang,M.Gong,Z.Liang,W.Liu,Z.Tong,L.Yi,R.Morris,
outperformed the ideal values (Fig. 2(b)). Ramanathan et C.Pasareanu,andS.Koenig,“SchedulingandAirportTaxiwayPath
al. [15] sorted tasks in advance based on deadlines and PlanningUnderUncertainty,”inProceedingsofthe2019Aviationand
AeronauticsForumandExposition,2019,pp.1–8.
assigned them to agents with lower execution costs. This
[8] D.Silver,“CooperativePathfinding,”inProceedingsoftheAAAICon-
indicatedthattheyprioritizeddeadlinesoverexecutioncosts. ferenceonArtificialIntelligenceandInteractiveDigitalEntertainment,
They noted that their method excelled with extremely short vol.1,2005,pp.117–122.
[9] H.Ma,J.Li,T.K.S.Kumar,andS.Koenig,“LifelongMulti-Agent
deadlines,exhibitinglesstardinessthantheproposedmethod
PathFindingforOnlinePickupandDeliveryTasks,”inProceedings
in settings with frequent releases and short deadlines. How- of the International Joint Conference on Autonomous Agents and
ever, maintaining a balance between execution costs and MultiagentSystems,2017,pp.837–845.
[10] H.Ma,W.Ho¨nig,T.K.S.Kumar,N.Ayanian,andS.Koenig,“Life-
tardinessbecomescrucialwhenhandlingnumeroustasksand
longpathplanningwithkinematicconstraintsformulti-agentpickup
longer deadlines. The effectiveness of the proposed method and delivery,” in Proceedings of the AAAI Conference on Artificial
is evidenced in such scenarios despite operating online. Intelligence,ser.AAAI’19/IAAI’19/EAAI’19,2019,pp.7651–7658.
[11] M. Liu, H. Ma, J. Li, and S. Koenig, “Task and Path Planning for
Multi-AgentPickupandDelivery,”inProceedingsoftheInternational
Joint Conference on Autonomous Agents and Multiagent Systems,
VI. CONCLUSIONS
2019,pp.1152–1160.
[12] J. Li, A. Tinka, S. Kiesel, J. W. Durham, T. K. S. Kumar, and
Thisstudyaddressestaskdeadlinesbyintroducingamod- S.Koenig,“LifelongMulti-AgentPathFindinginLarge-ScaleWare-
ified version of the MAPD problem, termed online MAPD- houses,”inProceedingsoftheAAAIConferenceonArtificialIntelli-
gence,vol.35,2021,pp.11272–11281.
D. In online MAPD-D, tasks can be added at any time and
[13] H.A.Aryadi,R.Bezerra,K.Ohno,K.Gunji,S.Kojima,M.Kuwa-
assigned deadlines. To address MAPD-D, we propose two hara, Y. Okada, M. Konyo, and S. Tadokoro, “Multi-Agent Pickup
algorithms,namelyD-TPandD-TPTS.D-TPallocatestasks and Delivery in Transformable Production,” in Proceedings of the
2023IEEE19thInternationalConferenceonAutomationScienceand
by considering their pickup deadlines along with execution
Engineering(CASE),2023,pp.1–8.
costs; meanwhile, D-TPTS facilitates task exchanges among [14] X. Wu, Y. Liu, X. Tang, W. Cai, F. Bai, G. Khonstantine, and
agents and within a single agent. The conducted numerical G.Zhao,“Multi-AgentPickupandDeliverywithTaskDeadlines,”in
ProceedingsoftheInternationalSymposiumonCombinatorialSearch,
experiments demonstrate that both D-TP and D-TPTS effec-
vol.12,2021,pp.206–208.
tively reduce task tardiness compared to existing methods. [15] S.Ramanathan,Y.Liu,X.Tang,W.Cai,andJ.Li,“MinimisingTask
TardinessforMulti-AgentPickupandDelivery,”inProceedingsofthe
These experiments are conducted in a 35×21 grid envi-
2023InternationalConferenceonAutonomousAgentsandMultiagent
ronment; however, our ability to solve MAPD-D in larger Systems,2023,pp.2349–2351.
environments is limited due to computational constraints. [16] H.Ma,G.Wagner,A.Felner,J.Li,T.K.S.Kumar,andS.Koenig,
“Multi-Agent Path Finding with Deadlines,” in Proceedings of the
In the future, exploring the development of decentralized
Twenty-Seventh International Joint Conference on Artificial Intelli-
algorithms could enable the solution of large-scale MAPD- gence(IJCAI-18),2018,pp.417–423.
D. Additionally, algorithms should be devised to handle [17] H.WangandW.Chen,“Multi-RobotPathPlanningWithDueTimes,”
IEEERoboticsandAutomationLetters,vol.7,no.2,pp.4829–4836,
more realistic scenarios, such as paths being obstructed by
2022.
uncertain obstacles [19]. [18] T.Huang,V.Shivashankar,M.Caldara,J.Durham,J.Li,B.Dilkina,
and S. Koenig, “Deadline-Aware Multi-Agent Tour Planning,” in
Proceedings of the International Conference on Automated Planning
ACKNOWLEDGMENTS andScheduling,vol.33,2023,pp.189–197.
[19] B. Shofer, G. Shani, andR. Stern, “Multi Agent Path Finding under
ObstacleUncertainty,”inProceedingsoftheInternationalConference
WethankKenjiIto,KeisukeOtaki,andYasuhiroYogofor
onAutomatedPlanningandScheduling,vol.33,2023,pp.402–410.
their insightful inputs and discussions.