MARPF: Multi-Agent and Multi-Rack Path Finding
Hiroya Makino1,∗, Yoshihiro Ohama1, and Seigo Ito1
Abstract—In environments where many automated guided
vehicles (AGVs) operate, planning efficient, collision-free paths
is essential. Related research has mainly focused on environ-
ments with static passages, resulting in space inefficiency. We
define multi-agent and multi-rack path finding (MARPF) as
(a) MAPF (conventional) (b) MARPF (proposed)
the problem of planning paths for AGVs to convey target
racks to their designated locations in environments without Fig. 1: Environments of MAPF and MARPF. MAPF needs
passages. In such environments, an AGV without a rack can passages, whereas MARPF does not.
pass under racks, whereas an AGV with a rack cannot pass
under racks to avoid collisions. MARPF entails conveying
the target racks without collisions, while the other obstacle
racksarepositionedwithoutaspecificarrangement.AGVsare
essential for relocating other racks to prevent any interference
(a) Actual Movement
with the target racks. We formulated MARPF as an integer w/rack layer
w/o rack layer
linear programming problem in a network flow. To distinguish
situations in which an AGV is or is not loading a rack, the
proposedmethodintroducestwovirtuallayersintothenetwork. move w/o a rack load move w/ a rack unload
WeoptimizedtheAGVs’movementstomoveobstacleracksand (b) Virtual Movement
convey the target racks. The formulation and applicability of
Fig. 2: Two layers to express AGVs movements.
the algorithm were validated through numerical experiments.
The results indicated that the proposed algorithm addressed
issues in environments with dense racks.
thus should be conveyed by AGVs. To avoid collisions,
I. INTRODUCTION
AGVswithoutrackscanpassundertheracks,whereasthose
Over the past few decades, introducing automated guided with racks cannot. MARPF involves conveying the target
vehicles(AGVs)inwarehousesandfactorieshasaccelerated racks, with the target indicating that its destination has been
efficiency.Numerouseffortshavebeendevotedtodeveloping assigned, while the obstacle racks are situated freely. In an
multi-agent path finding (MAPF) for efficient transportation environmentinwhichracksaredenselylocated,theobstacle
via AGVs [1]. This problem has been applied in many racks can be moved to avoid interference with the target
fields,suchasautomaticwarehouses[2],[3],airporttaxiway racks.
control [4], and automated parking [5]. We formulated MARPF as an integer linear programming
For transportation in warehouses and factories, AGVs (ILP) problem in a network flow, which includes the AGV
often navigate beneath rack-type carts and convey an entire and rack networks. In the AGV network, the proposed
rack with its contents (hereinafter referred to as rack) to method distinguishes whether an AGV is loading a rack us-
a designated location. Prior research on MAPF has mainly ingtwovirtuallayerstorepresentloadingarack(Fig.2).The
dealtwithnavigatingtheseracksthroughareaswithpassages rack network represents the movements of the racks, which
(Fig.1(a)).However,thislayoutleadstotheinefficientuseof are separated from the AGVs. By synchronizing the AGV
space. In settings where sufficient space cannot be provided, networkwiththeracknetwork,theproposedmethodenables
it is crucial to utilize the available area more effectively. moving obstacle racks and conveying target racks while
TraditionalMAPFalgorithmsstruggletooptimizenavigation avoiding collisions. We aimed to solve the problem with
racksefficientlyinthesedenseenvironments(Fig.1(b)).The various movement constraints and minimize the makespan
difficulty lies in optimally relocating the obstacle racks. (i.e., the latest completion time).
This study defines multi-agent and multi-rack path find-
ing (MARPF) as a problem of planning paths for AGVs A. Contribution
to convey target racks to their designated locations in an
Originalmulti-agentpickupanddelivery(MAPD)focuses
environment without passages. The racks cannot move and
only on conveying target racks, while some studies also
consider exchanging the positions of racks [6], [7]. The
1 H. Makino, Y. Ohama, and S. Ito are with the Toyota Central R&D
difference between MARPF and rearrangement-considering
Labs.,Inc.,41-1,Yokomichi,Nagakute,Aichi,Japan.
∗ Correspondingauthor.hirom@mosk.tytlabs.co.jp MAPD is outlined as follows:
This work has been submitted to the IEEE for possible publication.
Copyrightmaybetransferredwithoutnotice,afterwhichthisversionmay • MARPF: Only the target racks are assigned goals, and
nolongerbeaccessible. the obstacle racks are situated freely.
4202
raM
91
]AM.sc[
1v67321.3042:viXraOnly target has destination. TABLE I: Notations.
obstacle R R3 3 R1 destination R3 R1 R2 RR 11 Symbols Description
target R1 R R2 2 obstacle R1 R2 R3 Section II and after
rearrang( ea m) eU nn ts -co olv na sb idle e rb iny g MAPD (b) Solved by MARPF a i AGV i
r i Rack i
Fig. 3: Unsolvable example by MAPD. x∈{0,···,sizex−1} Column index (sizex is the grid width)
y∈{0,···,sizey−1} Row index (sizey is the grid height)
vx,y Vertex
• Rearrangement-considering MAPD: All racks are as- V Set of vertices
signed goals. E Set of edges
G=(V,E) Connected undirected graph
Itcouldbepositedthatrearrangement-consideringMAPD
t Timestep
can potentially address MARPF by assigning the same goal loct(a i) Location vertex of a i at timestept
positionsastheinitialpositionsforobstacleracks.However, loadt(a i) Rack loading state of a i at timestept
we estimate two typical situations where this assumption Section III and after
may not apply: (1) Environments with highly dense racks, G+ ag=(V a+ g,E a+ g) Time-expanded network representing
all AGVs’ movements
where some situations cannot be solved by rearrangement-
G+ =(V+,E+) Time-expanded network representing
considering MAPD (Fig. 3). Sufficient conditions for solv- ar ar ar
all racks’ movements
ability are discussed in a sliding tile puzzle [8]; and (2) En- G+=(V+,E+) Time-expanded network representing
tr tr tr
vironmentswithdenseracksandalimitednumberofAGVs, the target rack’s movements
whererelocatingrackstotheirinitialpositionswouldrequire T Set of timesteps in time-expanded
networks
asignificantnumberoftimesteps.Theoptimizationproblem
c(·) Cost function of flow
of where to relocate the obstacle racks is challenging, and
l Layer (w/rack or w/o rack)
MARPF constitutes a new problem. Sag,Sar,Str⊆V Start location vertices of all AGVs, all
The main contributions of this study are as follows: racks, and the target racks respectively
• Define a new problem (MARPF) of planning paths Ttr⊆V Goal location vertex of the target rack
αt ,βt ,γt Flow on E+,E+,E+ respectively
for AGVs to convey target racks to their designated vi,vo,li,lo vi,vo vi,vo ag ar tr
locations in dense environments.
• ProposeamethodforsolvingMARPF,aformulationas
an ILP problem in a network flow. targetracksinanenvironmentwithoutpassages.TableIlists
• ProposeanapplicationofMARPFforreal-timesolving the notation used in the following sections.
combined with cooperative A* (CA*). An MARPF instance comprises M AGVs, N racks, and
an undirected grid graph, G=(V,E).
B. Related Work
V ={v |x∈{0,···,size −1},y∈{0,···,size −1}}
1) MAPF: The MAPF problem concerns finding the x,y x y
optimal paths for multiple agents without collisions, and E={(v x,y,v x′,y′)|v x,y,v x′,y′ ∈V,|x−x′|+|y−y′|=1},
numerous methods have been proposed [1]. As complete
where v ∈V is the vertex with the column index x and
and optimal solvers, there are conflict-based search (CBS) x,y
the row index y in the grid. loct(a),loct(r)∈V denote the
[9],improvedCBS[10],andenhancedCBS[11].Prioritized i i
vertices of AGV a and rack r at timestep t, respectively.
planning, such as CA* [12] and multi-label A* [13], has a i i
loadt(a)∈{0,1} refers to the rack-loading state of AGV
short runtime but is suboptimal. MAPD [14] is a lifelong i
a at timestep t, where 1 represents loading, and 0 rep-
variant of MAPF. Specifically, in MAPD, each agent is i
resents unloading. At each time step t, an AGV executes
constantly assigned new tasks with new goal locations,
one of the following actions: (1) Remain at the current
whereas in MAPF, each agent has only one task.
location loct(a)=loct+1(a); (2) Move to the next location
2) Rearrangement-considering MAPD: In Double-Deck i i
(cid:0) loct(a),loct+1(a)(cid:1) ∈ E; (3) Load a rack loadt(a) = 0,
MAPD (DD-MAPD) [6], agents are tasked to move racks i i i
loadt+1(a) = 1, loct(a) = loct+1(a); (4) Unload a rack
to their assigned delivery locations, thereby changing the i i i
loadt(a)=1, loadt+1(a)=0, loct(a)=loct+1(a). A rack
overall arrangement of the racks. Their algorithm for DD- i i i i
alsoexecutesoneofthefollowingactions:remainloct(r)=
MAPD solves a DD-MAPD instance with M agents and N i
loct+1(r) or move (cid:0) loct(r),loct+1(r)(cid:1) ∈ E; however, its
racks by decomposing it into an N-agent MAPF instance, i i i
movementdependsonAGVsbecausetherackdoesnotmove
followed by a subsequent M-agent MAPD instance with
by itself.
task dependencies. In Multi-Agent Transportation (MAT)
There should be no collisions between agents or racks.
[7], all racks are also assigned delivery locations without
We define three types of collision for agents (Fig. 4): First
fixed aisles. They provides an algorithm for solving MAT
is the vertex conflict [1], where two agents cannot be in the
by reducing it to a series of satisfiability problems.
same location at the same timestep. Second is the swapping
II. PROBLEMDEFINITION conflict [1], where two agents cannot move along the same
In this section, we define the MARPF problem. As noted edgeinoppositedirectionsatthesametimestep.Thirdisthe
inSectionI,MARPFaimstoplanpathsforAGVstoconvey corner conflict. Two adjacent agents cannot move verticallyat the same timestep since their corners (or the corners
of their conveying racks) collide. Formally, for all agents
a i,a j(i̸= j) and all timesteps t, it must hold the following (a) Vertex conflict (b) Swapping conflict (c) Corner conflict
equations:
Fig. 4: Type of conflicts.
loct(a)̸=loct(a ) (1)
i j
target rack
loct(a)=loct+1(a )
i j goal
⇒(cid:0) loct+1(a) −loct(a) (cid:1) =(cid:0) loct+1(a ) −loct(a ) (cid:1)
i x i x j x j x
∧(cid:0) loct+1(a) −loct(a) (cid:1) =(cid:0) loct+1(a ) −loct(a ) (cid:1) , obstacle
i y i y j y j y rack
(2) (a) Initial positions (b) Process of (c) Process of
& desired path moving obstacles the target rack
where loct(a) and loct(a) denote the column and row reaching its goal
i x i y
indices of loct(a), respectively. (1) represents the vertex Fig. 5: Problem example.
i
conflict. (2) represents the both of the swapping conflict and
the corner conflict. The above three types of collision are
also applied to racks. exampleofatime-expandednetworkrepresentingallAGVs’
The MARPF problem involves computing collision-free movements. For simplicity, Figs. 2 and 6 show the moving
paths for AGVs and minimizing the timesteps required to plane in one dimension; however, it is two-dimensional.
convey the target racks to their designated locations. Non- For rack’s movements, the networks should be separated
target racks act as obstacles and are positioned freely. fromtheAGVs.Distinguishingthelayersinatime-expanded
Fig.5exemplifiesmovingaracktoavoidinterferencewith network is not necessary (Fig. 6 (lower)). The flows ex-
the movement of the target rack. The path the AGV must pressing the movements of racks are synchronized with the
move to convey the target rack to its designated location is corresponding flows of AGVs.
blocked by an obstacle rack (Fig. 5(a)). First, the obstacle We define the time-expanded network representing all
rack is removed (Fig. 5(b)), and the target rack is then AGVs, all racks, and the target rack’s movements as di-
conveyed to the designated location (Fig. 5(c)). rected graphs G+ =(V+,E+), G+ =(V+,E+), and G+=
ag ag ag ar ar ar tr
(V+,E+), respectively. G+ has the same structure as G+;
III. PROPOSEDMETHOD tr tr tr ar
however,thetargetrackisdistinguishedfromtheotherracks.
In this section, we formulate MARPF as a minimum-cost
V+={vt |x∈{0,···,size −1},y∈{0,···,size −1},
flow problem in a network flow, similar to the approaches ag x,y,l x y
forMAPF[5],[15].Twotypesofsynchronizednetworksare l∈{0,1},t∈{0,···,size t}}
established, one for AGVs and the other for racks. AGVs’ E+ ={⟨vt ,vt′ ⟩|vt ,vt′ ∈V+,
ag x,y,l x′,y′,l′ x,y,l x′,y′,l′ ag
network distinguishes whether or not an AGV is loading a |x−x′|+|y−y′|≤1,t′−t=1}
rack using two virtual layers to represent loading a rack.
V+,V+={vt |x∈{0,···,size −1},
ar tr x,y x
A. Definition of Networks y∈{0,···,size −1},t∈{0,···,size}}
y t
When AGVs are not conveying a rack, their obstacles are E+,E+={⟨vt ,vt′ ⟩|vt ,vt′ ∈V+,
ar tr x,y x′,y′ x,y x′,y′ ar
the other AGVs; however, when they are conveying a rack, |x−x′|+|y−y′|≤1,t′−t=1},
other racks also become obstacles. Therefore, it must be
where size denotes the maximum of timesteps in the time-
determined whether an AGV is loading a rack onto a time- t
expandednetwork.DependenciesexistbetweenG+ andG+
expandednetwork.TheAGVs’movementsareclassifiedinto ar ag
and between G+ and G+, and their flows are synchronized.
the following four actions in terms of the rack-loading state tr ar
(Fig. 2(a)):
B. Definition of Variables
1) Move(orremainatthecurrentlocation)withoutarack.
The vertices on V+ are distinguished by t,v,
2) Load a rack. ag
and l. αt represents the flow on the edge
3) Move (or remain at the current location) with a rack. vi,vo,li,lo
4) Unload a rack. ⟨vt vix,viy,li,vt v+ ox1 ,voy,lo⟩ ∈ E a+ g, where vi,vo ∈ V,li,lo ∈ {0,1}
respectively denote the source vertex, sink vertex, source
Theproposedmethoddividesamovingplaneintotwovirtual
layer, and sink layer while t ∈ T = {0,···,size −1}
layers to represent two situations: loading or not loading t
represents the source vertex’s timestep. G+,G+ do not
a rack (Fig. 2(b)). The rack-loading action corresponds to ar tr
contain multiple layers; therefore, the flows of racks are
movementfromthew/otothew/racklayers,andviceversa.
expressed more simply as βt ,γt , respectively. We
Then, all vertices are expanded along the time-axis, and vi,vo vi,vo
define the variables and the cost function c(·) as follows:
under specific constraints, directed edges are added. The
edges indicate AGV motion in the grid. The motions are αt ,βt ,γt ∈{0,1} (3)
distinguished by the indices (x,y) of the source and sink vi,vo,li,lo vi,vo vi,vo
(cid:26)
0 if vi=vo,li=lo
vertices and the virtual layers, where the motion is with c(vi,vo,li,lo,t)= (4)
t+1 otherwise
(l=1) and without (l=0) a rack. Fig. 6 (upper) shows anWe define the initial location vertices of all AGVs, racks, AGVs Move Load Move Unload
w/o a rack a rack w/ a rack a rack
and the target rack respectively as S ag,S ar, and S tr, where (x, y, l) = (3, 0, 1)
S ⊆S . In the network, we express the initial locations by (x, y, l) = (3, 0, 0)
tr ar
fixing the flows at t=0 (respectively (5), (6), and (7)). The (x, y, l) = (2, 0, 1)
(x, y, l) = (2, 0, 0)
goal location vertex of the target rack, T , is defined by (8). ...
tr
(x, y, l) = (1, 0, 1)
(cid:26) α0 =1 if vi=vo∈S ,li=lo=0 (x, y, l) = (1, 0, 0)
αv 0i,vo,li,lo
=0 otherwise
ag (5) (x, y, l) = (0, 0, 1)
vi,vo,li,lo (x, y, l) = (0, 0, 0)
(cid:26) β0 =1 if vi=vo∈S synchronized
vi,vo ar (6)
β0 =0 otherwise (x, y) = (3, 0)
vi,vo
(cid:26) γ0 =1 if vi=vo∈S (x, y) = (2, 0) ...
γv 0i,vo
=0 otherwise
tr (7) (x, y) = (1, 0)
vi,vo
(x, y) = (0, 0)
(cid:40)
γsizet−1=1 if vi=vo∈T t = 0 t = 1 t = 2 t = sizet - 1 t = sizet
γv si i, zv eo t−1=0 otherwise tr (8) Racks M w/o av ne AGV M oro sv te a yw a/ la on n eAGV
vi,vo
Fig.6:Time-expandednetworksforAGVs(upper)andracks
C. Minimum Cost Flow Problem (lower).
The purpose is to convey the target rack from the starting
position to the goal position as quickly as possible. The set
of timesteps T \{size t−1} refers to T−. a rack must exist where an AGV loads a rack (α vt ,v,0,1=1).
min∑c(vi,vo,li,lo,t)αt (9) Eq. ∑ viβ vt i,v=1 indicates that one of the flows to vertex v is
vi,vo,li,lo 1; that is, a rack is placed at vertex v. Constraints (16) and
s.t. (17) prohibit AGVs and racks from coexisting at the same
∑αt = ∑ αt+1 ∀v∈V,l∈{0,1},t∈T− vertices, respectively. Constraint (18) is required to prevent
vi,v,li,l v,vo,l,lo
vi,li vo,lo theswappingconflictandthecornerconflictbetweenagents.
(10) The above formulation is for one target rack. However,
∑βt =∑βt+1 ∀v∈V,t∈T− (11) theformulationcanbeextendedtomultipletargetracks.The
vi,v v,vo
vi vo network representing the movement of the i-th target rack is
∑γt =∑γt+1 ∀v∈V,t∈T− (12) referred to as G+,i=(V+,i,E+,i). The corresponding flow is
vi,v v,vo tr tr tr
vi vo γt,i and the constraints are the same as γt .
vi,vo vi,vo
βt =αt ∀(vi,vo)∈E,t∈T (13)
vi,vo vi,vo,1,1
γt ≤βt ∀vi,vo∈V,t∈T (14) D. Applications for Real-Time Solving
vi,vo vi,vo
α vt ,v,0,1≤∑β vt i,v ∀v∈V,t∈T (15) Theproposedmethodcomplicatesthenetworkwithlonger
vi path lengths and the computational cost increases exponen-
∑ αt ≤1 ∀v∈V,t∈T (16)
vi,v,li,lo tially.Webelievethatappropriatelydividingthepathreduces
vi,li,lo
the computational costs. Hence, we propose an acceleration
∑β vt i,v≤1 ∀v∈V,t∈T (17) method combined with CA*, called CA*-ILP. This method
vi
comprises global and local searches.
∑αt + ∑ αt
vi,vo,li,lo vo,v,li,lo First, path finding is performed using CA* for the global
li,lo v,li,lo
search. In this step, the racks are assumed to move by them-
≤ ∑ α vt o,vˆ,li,lo+1 ∀(vi x,y,vo x′,y′)∈E,t∈T
selves, and collisions between racks are allowed. However,
vˆ 2x′−x,2y′−y,li,lo
from the viewpoint of timesteps, removing obstacle racks
(18)
should be avoided. Therefore, moving to a location with a
Theobjectivefunction(9)definesthecostfunction,which rack is defined as incurring a κ>1 cost in CA*. Moving to
implies that the larger the timestep t, the higher the move- a location with no racks incurs a cost of +1. Algorithm 1
ment cost. Therefore, this problem calculates the flows with presents the corresponding pseudo-code. The global search
theminimumnumberofstepstoconveythetargetrackfrom executesCA*[line1].Itchoosesthewaypointsaccordingto
the initial to the goal position. the global paths [lines 2–7]. Paths may be indivisible by the
Constraints (10)–(12) are required to satisfy the flow span length τ between waypoints, and fractions are rounded
conservation constraints at the vertices. Racks are conveyed [line 8].
by AGVs, and (13) indicates that the flows of the racks’ Second, the local search repeatedly solves the local path-
movements on G+ are equal to the corresponding flow on finding problem. The local path-finding problem of con-
ar
G+. Constraint (13) indicates that G+ depends on G+ and veying multiple racks to their waypoints is solved using
ag ar ag
(14)indicatesthatG+ dependsonG+.Considering(7),(12), ILP. Multiple racks do not always arrive at their waypoint
tr ar
and (14), only flows related to the movement of the target simultaneously.Whenoneoftherackarrivesatitswaypoint,
rackonG+ arereflectedinG+.Constraint(15)indicatesthat a local search is performed again.
ar trR1 goal R1 R0 R0 goal R1 R0
Algorithm 1 Global Search
AGV Rack
Area where
Input:Initiallocationni andthegoallocationni ofthei-thtargetrack racks are added
0 g Target rack Target
Parameter:Spanlengthτ betweentwowaypoints R0 R0 R1 rack R0 R1
Output:Sequencesofwaypointswaypointi R1
(a) Initial environment (b) A typical environment
that is challenging
1: Find the global paths of the target racks using CA*: pathi = for CBS and CA* to solve
(ni 0,ni 1,···,ni g),whichisavertexsequence. Fig. 7: Environment of Exp. 1.
2: forallido
3: waypointi=()
4: forall p<|pathi|do
5: p=τq+r(0≤r<q) 1.0
6: ifr=0andτ(q+1)≤|pathi|then 0.8
7: waypointi←addni
p
8: waypointi←addni 0.6
g
0.4
CA*
0.2
CBS
ILP
0.0
IV. EXPERIMENTS 0 1 2 3 4 5 6 7
Num of Added Racks
Fig. 8: Comparison of success rates on Exp. 1.
In this section, we describe two experiments: (1) a com-
parative evaluation of the proposed method against existing
methods; and (2) an evaluation of the effectiveness of CA*-
blocked.Ourproposedmethodconsidersallrackmovements
ILP.Fortheexperimentalsetup,thetime-expandednetworks
arerepresentedbyNetworkX1 andtheoptimizationproblem suchthatthemovementforremovingobstacleracksisfound.
is defined by PuLP2. We use the GUROBI solver3. All the The proposed method is theoretically capable of solving
these problems if there are one or more empty vertices.
experimentswererunonasystemcomprisingUbuntu22.04,
However, it fails in half of the tasks when adding six
Intel Core i9-12900K, and 128 GiB of RAM.
racks. When the problem is complex, and the computational
Weperformedalltheexperimentsin6×4grids.Although
cost is high, the solver fails to find a path within the
this size is too small for automated warehouses, small-
time limit. Therefore, the following experiment evaluated an
sized environments, such as inter-process transportation, are
acceleration method.
utilized in specific areas of the factories.
B. Experiment2:EvaluationoftheEffectivenessofCA*-ILP
A. Experiment 1: Comparative Evaluation of the Proposed
Method against Existing Methods Solving the path-finding problem using the proposed
method is computationally expensive. We confirm that CA*-
We compared our proposed method against widely used
ILPreducesthecomputationalcost.Weassignedacostκ=3
MAPF solvers CA* and CBS. In MARPF, the other racks
to move to a location occupied by a rack5.
become obstacles only when the AGV conveys a rack. We
The evaluations were conducted in sparse (12 racks) and
usedCA*andCBSforcomparison,whichaccountsforthese
dense (18 racks) environments. Each environment contained
conditions.
eight AGVs. Fig. 9 illustrates an example of a dense envi-
The first step had two AGVs and six racks, including
ronment. We performed 30 experiments with the AGVs and
targets; the racks were then added sequentially. Fig. 7(a)
non-target racks in different initial locations to compare the
illustrates this environment. Two obstacle racks could block
makespans of the tasks of conveying the two target racks to
the paths. For example, two racks were placed in the lower-
their goals. Table II compares the makespans, highlighting
left region (Fig. 7(b)). We performed 30 experiments at
the differences in span lengths between waypoints (CA*-
different locations to add the racks. The solver’s time limit
ILP). Fig. 10 also compares the makespans between the
was 120 s.
initially proposed method (ILP-only) and the acceleration
Fig. 8 compares the success rates and average makespans
method (CA*-ILP). We set the time limit of 120 s for each
of the successful tasks4. As Fig. 8 shows, with few added
local search conducted by CA*-ILP. ILP-only is computa-
racks, all methods succeeded. However, with many added
tionally expensive; therefore, we set the time limit to three
racks, CA* and CBS sometimes failed to find the path. CA*
different values, 120, 240, and 1200 s, and compared them.
and CBS consider only the movements of the target racks
In the dense environment (Fig. 10(b))6, ILP-only failed to
and cannot remove obstacle racks. Therefore, they cannot
find solutions in some experiments within the time limits of
find the path when many racks are added and the paths are
120 and 240 s.
First, we evaluated the difference in span between way-
1https://networkx.org/
2https://coin-or.github.io/pulp/ points (CA*-ILP). According to Table II, span 4 yielded
3https://www.gurobi.com/solutions/
gurobi-optimizer/ 5Wesetthecostκ to3becauseweassumedthatthetaskinvolvedthree
4In Fig. 8, there was no difference between CA* and CBS in such a steps:loading,moving,andunloadingtheobstaclerack.
simpleenvironment. 6Thecalculationtimeincludesthetimerequiredfornetworkconstruction.
etaR
sseccuSR1 goal R1 R0 computational cost. While we acknowledge the need for
R0 goal
AGV furtherresearchintomoreefficientalgorithms,itissufficient
Rack
Target rack if the paths are calculated before the following product is
R0 R0 R1 Target rack
R1 completed in conveyance between production processes in
Fig. 9: Example of the environment in Exp. 2. factories. In these instances, our proposed algorithm can be
practically applied.
TABLE II: Comparison of CA*-ILP makespans on Exp. 2. Although we performed our experiments on a small grid,
the problem setting of MARPF can be applied to large-scale
Span length τ between waypoints 1 2 4
warehouses. However, solving large problems increases the
12 racks 21.9 18.1 14.8
computationalcost.Inthefuture,weplantoinvestigatemore
20 racks 39.9 28.9 23.9
efficient and faster algorithms.
ACKNOWLEDGMENTS
30 30 We thank Kenji Ito, Tomoki Nishi, Keisuke Otaki, and
Yasuhiro Yogo for their helpful discussions.
20 20
REFERENCES
10 10 ILP-only
CA*-ILP (span 2) [1] R.Stern,N.Sturtevant,A.Felner,S.Koenig,H.Ma,T.Walker,J.Li,
CA*-ILP (span 4) D. Atzmon, L. Cohen, T. K. Kumar, R. Barta´k, and E. Boyarski,
0 0
0 500 1000 0 500 1000 “Multi-AgentPathfinding:Definitions,Variants,andBenchmarks,”in
Avg Calc Time [s] Avg Calc Time [s] ProceedingsoftheInternationalSymposiumonCombinatorialSearch,
(a) 12 Racks (b) 18 Racks vol.10,2019,pp.151–158.
Fig. 10: Comparison of makespans on Exp. 2.
[2] P.R.Wurman,R.D’Andrea,andM.Mountz,“CoordinatingHundreds
ofCooperative,AutonomousVehiclesinWarehouses.”AIMagazine,
vol.29,no.1,pp.9–20,2008.
[3] W. Honig, S. Kiesel, A. Tinka, J. W. Durham, and N. Ayanian,
the best result. Span 1, being excessively fine-grained and
“PersistentandRobustExecutionofMAPFSchedulesinWarehouses,”
ignoring future rack locations, had a larger makespan. We IEEERoboticsandAutomationLetters,vol.4,no.2,pp.1125–1131,
adopted spans 2 and 4 for the subsequent comparisons. 2019.
[4] J.Li,H.Zhang,M.Gong,Z.Liang,W.Liu,Z.Tong,L.Yi,R.Morris,
Second,wecomparedtheinitiallyproposedmethod(ILP-
C.Pasareanu,andS.Koenig,“SchedulingandAirportTaxiwayPath
only) with the acceleration method (CA*-ILP). In the sparse PlanningUnderUncertainty,”inProceedingsofthe2019Aviationand
environment (Fig. 10(a)), CA*-ILP exhibited a shorter to- AeronauticsForumandExposition,2019,pp.1–8.
[5] A.Okoso,K.Otaki,S.Koide,andT.Nishi,“HighDensityAutomated
tal calculation time compared with ILP-only; however, its
Valet Parking via Multi-agent Path Finding,” in 2022 IEEE 25th In-
makespanwaslarger.CA*-ILPdividesthepathsintoseveral ternationalConferenceonIntelligentTransportationSystems(ITSC),
parts, each easier to solve, thereby reducing the overall 2022,pp.2146–2153.
[6] B. Li and H. Ma, “Double-Deck Multi-Agent Pickup and Deliv-
calculationcostcomparedtoILP-only.However,becausethe
ery: Multi-Robot Rearrangement in Large-Scale Warehouses,” IEEE
waypoints in CA*-ILP are not always optimal, its makespan RoboticsandAutomationLetters,pp.1–8,2023.
exceeded that of the global optimal solution by ILP-only. [7] P. Bachor, R.-D. Bergdoll, and B. Nebel, “The Multi-Agent Trans-
portationProblem,”inProceedingsoftheAAAIConferenceonArtifi-
In the dense environment (Fig. 10(b)), the makespan of
cialIntelligence,vol.37,2023,pp.11525–11532.
CA*-ILPwassmallerthanILP-only,andthetotalcalculation [8] W.W.JohnsonandW.E.Story,“Notesonthe“15”Puzzle,”American
time of CA*-ILP was considerably shorter than ILP-only. In JournalofMathematics,vol.2,no.4,pp.397–404,1879.
[9] G.Sharon,R.Stern,A.Felner,andN.R.Sturtevant,“Conflict-based
thedenseenvironment,thecomputationcostwashigherthan
searchforoptimalmulti-agentpathfinding,”ArtificialIntelligence,vol.
in the sparse environment, and CA*-ILP was more effective 219,pp.40–66,2015.
in calculating time. In all experiments ILP-only found the [10] E.Boyarski,A.Felner,R.Stern,G.Sharon,O.Betzalel,D.Tolpin,and
E.Shimony,“ICBS:TheImprovedConflict-BasedSearchAlgorithm
feasible solution within the time limit of 1200 s; however,
for Multi-Agent Pathfinding,” in Proceedings of the International
ILP-only does not always find the good feasible solution SymposiumonCombinatorialSearch,vol.6,2015,pp.223–225.
within the time limit. As a result, the average makespan of [11] M.Barer,G.Sharon,R.Stern,andA.Felner,“SuboptimalVariantsof
theConflict-BasedSearchAlgorithmfortheMulti-AgentPathfinding
CA*-ILP was smaller than ILP-only.
Problem,”inProceedingsoftheInternationalSymposiumonCombi-
natorialSearch,vol.5,2014,pp.19–27.
V. CONCLUSION
[12] D.Silver,“CooperativePathfinding,”inProceedingsoftheAAAICon-
In this study, we defined the MARPF problem for plan-
ferenceonArtificialIntelligenceandInteractiveDigitalEntertainment,
vol.1,2005,pp.117–122.
ning the paths of target racks to their designated locations
[13] F.Grenouilleau,W.-J.vanHoeve,andJ.N.Hooker,“AMulti-Label
using AGVs in dense environments without passages. We A* Algorithm for Multi-Agent Pathfinding,” in Proceedings of the
developed an ILP-based formulation for synchronized time-
International Conference on Automated Planning and Scheduling,
vol.29,2021,pp.181–185.
expandednetworksbydividingthemovementsofAGVsand
[14] H.Ma,J.Li,T.K.S.Kumar,andS.Koenig,“LifelongMulti-Agent
racks. The proposed method optimized the paths to move PathFindingforOnlinePickupandDeliveryTasks,”inProceedings
of the International Joint Conference on Autonomous Agents and
the obstacles and convey the target racks. By recognizing
MultiagentSystems,2017,pp.837–845.
the complexity that increases with path length, we also
[15] J.YuandS.M.LaValle,“PlanningOptimalPathsforMultipleRobots
presented an acceleration method combined with CA*. Our onGraphs,”in2013IEEEInternationalConferenceonRoboticsand
experiments confirmed that the acceleration method reduced
Automation,2013,pp.3612–3617.
napsekaM
gvA