DIDUP: Dynamic Iterative Development for UI Prototyping
JennyMa∗ KarthikSreedhar∗ VivianLiu
jenny.ma@columbia.edu ks4190@columbia.edu vivian@cs.columbia.edu
ColumbiaUniversity ColumbiaUniversity ColumbiaUniversity
NewYorkCity,NY,USA NewYorkCity,NY,USA NewYorkCity,NY,USA
SitongWang PedroAlejandroPerez LydiaB.Chilton
sw3504@columbia.edu pap2153@columbia.edu chilton@cs.columbia.edu
ColumbiaUniversity ColumbiaUniversity ColumbiaUniversity
NewYorkCity,NY,USA NewYorkCity,NY,USA NewYorkCity,NY,USA
Figure1:DIDUPisasystemforcode-basedUIprototypingthathelpsusersgeneratedata-driven,interactiveUIsinJavascript,
CSS,andHTML.Thedevelopmentprocessusesaniterativespiralmodelbyintroducingthreemechanisms:adaptiveplanning,
codeinjection,andlightweightstatemanagement.
Abstract whichtakeschangesanditerationsthatcomeupduringthedevel-
Largelanguagemodels(LLMs)areremarkablygoodatwritingcode. opmentprocessintoaccount.Weproposethreenovelmechanisms
Aparticularlyvaluablecaseofhuman-LLMcollaborationiscode- forLLM-generatedcode-prototypingsystems:(1)adaptiveplan-
basedUIprototyping,amethodforcreatinginteractiveprototypes ning,whereplansshouldbedynamicandreflectchangesduring
thatallowsuserstoviewandfullyengagewithauserinterface.We implementation,(2)codeinjection,wherethesystemshouldwrite
conductaformativestudyofGPTPilot,aleadingLLM-generated aminimalamountofcodeandinjectitinsteadofrewritingcode
code-prototyping system, and find that its inflexibility towards sousershaveabettermentalmodelofthecodeevolution,and(3)
changeoncedevelopmenthasstartedleadstoweaknessesinfailure lightweightstatemanagement,asimplifiedversionofsourcecon-
preventionanddynamicplanning;itcloselyresemblesthelinear trolsouserscanquicklyreverttodifferentworkingstates.Together,
workflowofthewaterfallmodel.WeintroduceDIDUP,asystemfor thisenablesuserstorapidlydevelopanditerateonprototypes.
code-basedUIprototypingthatfollowsaniterativespiralmodel,
CCSConcepts
∗Equalcontribution
• Human-centered computing → User interface program-
Authors’ContactInformation:JennyMa,jenny.ma@columbia.edu,ColumbiaUniver- ming.
sity,NewYorkCity,NY,USA;KarthikSreedhar,ks4190@columbia.edu,Columbia
University,NewYorkCity,NY,USA;VivianLiu,vivian@cs.columbia.edu,Columbia
Keywords
University,NewYorkCity,NY,USA;SitongWang,sw3504@columbia.edu,Columbia
University,NewYorkCity,NY,USA;PedroAlejandroPerez,pap2153@columbia.edu, codegeneration,userinterfaceprototyping,generativeAI
ColumbiaUniversity,NewYorkCity,NY,USA;LydiaB.Chilton,chilton@cs.columbia.
edu,ColumbiaUniversity,NewYorkCity,NY,USA. ACMReferenceFormat:
JennyMa,KarthikSreedhar,VivianLiu,SitongWang,PedroAlejandro
Permissiontomakedigitalorhardcopiesofallorpartofthisworkforpersonalor
Perez,andLydiaB.Chilton.2018.DIDUP:DynamicIterativeDevelopment
classroomuseisgrantedwithoutfeeprovidedthatcopiesarenotmadeordistributed
forprofitorcommercialadvantageandthatcopiesbearthisnoticeandthefullcitation forUIPrototyping.ACMTrans.Graph.37,4,Article111(August2018),
onthefirstpage.Copyrightsforcomponentsofthisworkownedbyothersthanthe 5pages.https://doi.org/XXXXXXX.XXXXXXX
author(s)mustbehonored.Abstractingwithcreditispermitted.Tocopyotherwise,or
republish,topostonserversortoredistributetolists,requirespriorspecificpermission
and/orafee.Requestpermissionsfrompermissions@acm.org. 1 Introduction
©2018Copyrightheldbytheowner/author(s).PublicationrightslicensedtoACM. Large language models (LLMs) are remarkably good at writing
ACM1557-7368/2018/8-ART111
https://doi.org/XXXXXXX.XXXXXXX code as evidenced by numerous tools including Devin, CoPilot,
4202
luJ
11
]CH.sc[
1v47480.7042:viXraConference’17,July2017,Washington,DC,USA JennyMa,KarthikSreedhar,VivianLiu,SitongWang,PedroAlejandroPerez,andLydiaB.Chilton
Figure2:DIDUPsystemwalkthrough.UsersbeginbyinputtingtheirUIgoal.DIDUPgeneratesaplan,thenimplementsthe
tasksiteratively,whilekeepingtheuserincontrol.Ateverystage,usershavetheopportunitytoapproveorchangethedirection
ofthecodeimplementation.Theimplementationstageincorporatesadaptiveplanning,codeinjection,andlightweightstate
managementinordertocreateaniterativespiralworkflow.
Gemini,andGPTPilot[CognitionAI2024;GitHub2024;Google asaminimumviableproduct.Whereasthereareexistingtoolsfor
2024;Pythagora2024].Programmingisacomplextaskthatrequires non-codeUIprototypinglikeFigma,andforfullstackcodingfor
bothhigh-level,systemdesignplanningandlow-levelunderstand- largecodebaseslikeDevin,GeminiandCoPilot,therearecurrently
ingofhowfeaturescanbeimplemented.Priorworkhasfound fewtoolsthatsupportcodingforUIprototypesthatarebothusable
that programmers tend to be caught up in the implementation andfunctional[CognitionAI2024;Figma2016;GitHub2024;Google
details,debuggingratherthanthinkingatthehigh-level[Myers 2024].Itisnotataskthatcanbefullyautomated,butratherisan
andRosson1992].ExistingLLM-poweredcodegenerationsystems iterativeandexploratoryprocesswhereusersadapttheirdesigns
showpromiseinseveralaspectsofhumansoftwareteamslikeplan- astheyincrementallybuildandtesttheirprototypes.Automatic
ningandusingmultipleagentsforspecificroles,suchasadesign codegenerationcanbevaluabletoalleviatetediousaspectsofthe
architect,productowner,techlead,anda“codemonkey.”Some developmentprocess,buttheusermustremainincontrolinorder
evenhaveinfrastructuretoevaluateanditerateonLLM-generated toguidethesystem.
code,resultinginmorerobustoutputs.Theseexistingsystemssug- Insoftwaredevelopment,therearetwomainparadigmsofwrit-
gestthatLLMscangreatlyenhancedeveloperproductivityand ingcode:(1)theclassicwaterfallmodel,and(2)theiterativespiral
effectiveness. model.Thewaterfallmodelisalinearworkflowwhereeachphase
Aparticularlyvaluablecaseofhuman-LLMcollaborationiscre- ofdevelopmentmustbecompletedbeforethenextphasebegins,
atingcode-baseduserinterface(UI)prototypes–prototypesthat andstagesaretraversedsequentially[Royce2021].Itissimpleto
enableuserstoviewandfullyinteractwithaUI.Forexample,auser realizeinpractice,butlimitedbecauseofitsinflexibilitytowards
maywanttocomparehowcard-swipinginteractionsdifferfroma changesbasedonemergingrequirements.Itisthereforenotsuited
news-feedlayoutwhenselectingrestaurantstoeatat.Code-based forapplicationswithevolvingrequirementsandrequirecyclical
UIprototypesarevaluablefortestingdata-drivenapplicationsthat testingsuchascode-basedUIprototyping.Conversely,thespiral
requireaninteractivecomponent,andoftenserveasabasisfor model is an iterative approach to software development where
subsequentversionsoftheproduct.Insomecasesitcanevenserve smallfeaturesandideasarecontinuouslydesigned,implemented,DIDUP:DynamicIterativeDevelopmentforUIPrototyping Conference’17,July2017,Washington,DC,USA
andevaluatedastheyarediscovered[Boehm1988].Unlikethe oftheprototypeideaandgeneratessyntheticdatatopopulatethe
waterfallmode,thespiralmodelsupportsshiftsinprojectdesign interface.Theusercanregenerate,approve,ormodifytheoutputs.
asdevelopersdeterminewhatworksandwhatdoesn’twork.Pro- Aftertheuserapprovestheprojectspecification,DIDUPmoves
totypingisfundamentallyaniterativeprocess,andthusanytool on to the planning stage. DIDUP breaks down the project into
forprototypingshouldadoptaspiraldevelopmentprocess. tasks,whereeachtaskisthenext-smallesttestableiterationofthe
previoustask.Inourexample,thetasklistisbrokendownto:
2 BackgroundandApproach 1) CreatethebasicHTMLstructure
GPT-Pilotistheleadingopen-sourcecodeprototypingtoolpow- 2) Implementswipingfunctionality
eredbyLLMs;ofthetoolswetried,itproducedthemostworking 3) Buildthebookmarkdisplay
prototypes[CognitionAI2024;Pythagora2024].GPTPilothasa 4) Handletheunbookmarkclickevent
4-stepworkflow:first,theuserinputsaprojectgoal,andthesystem 5) Addstyling
asksquestionstoformalizethespecification.Second,GPTPilot
Theusercanregenerate,modify,orapprovethistasklist.
createsanimplementationplan,breakingdowntheprojectinto
The system executes tasks sequentially. In our example, the
subtasks.Theuserisnotconsultedonthis.Thirdistheexecution
systemimplementstask1)CreatetheHTMLstructure.Thesystem
phase.Foreachtask,GPTPilotrequireshumanapprovalbefore
generatestheinitialcode,andtheUIisrenderedonDIDUPforthe
progressingtothenexttask;iftherearebugsitwillattemptto
usertointeractwith.Iftherearefailures,theusercandebugby
debugit.Fourth,afterdevelopment,thereisadocumentationphase.
iterativelypromptingthesystemintherightdirectiontoregenerate
WhileGPTPilotdoeshavesomehumaninput,itisessentiallya
code,redoingthetask,ordebuggingthecodebyhand.
waterfallmodel;itlackssufficientinteractiontorecoverfromfail-
Oncetheuserconfirmsthatitworks,theycanproceedtotask2)
ures.Italsolacksacontinuousmechanismthatallowstheuserto
Implementswipingfunctionality.Theuserdoesnotmodifythetask
elaborateontheprototypeandcontinueimprovingit.
andpromptsthesystemtogeneratethecode.Insteadofrewriting
Weproposethreenovelmechanismsthatcanguidethearchitec-
theexistingcodetoimplementthetask,thesystemperformscode
tureforcode-basedUIprototypingsystemsthatfollowaniterative
injection–itwritestheminimalamountnecessarytocomplete
spiralmodel:
thetaskandinjectsit.DIDUPwrites2codesnippets:1)Javascript
functionalityforswipingcardsand2)eventlistenersforswipes,
1) AdaptivePlanning:systemsmustsupportcontinualup-
andinjectsitattheappropriatelinesinthefile.
dates in designs and plans based on feedback and imple-
Code injection makes it easier for the human to make safe
mentation.Thisallowsforflexibilityindevelopmentandfor
changestothecode.Itissimilartoadeveloperreviewingcode
userstoelaborateoninitialprojectplans.
thatacolleaguewouldmakewhencreatingGithubpushrequests.
2) CodeInjection:whenexecutingsequentialtasks,LLMs
Itgivestheuseramentalmodelofthecodeasitchangesandmini-
oftenrewritepriorworkingcode,whichisconfusingfor
mizestheriskofglobalerrorsandtheinadvertentdeletionofgood
usersbecausetheydon’tknowwhatwasremovedoradded.
code,ensuringthetaskremainsmodularized.
By injecting the minimal amount of code necessary to a
Oncetheusertestsandapprovestask2,theycanproceedwith
targetlocation,codeinjectionallowsforsafecodemodifi-
tasks3,4,and5,toallowuserstocreate,see,andundobookmarks,
cations,providinguserswithaclearmentalmodelofthe
andaddstyling,insimilarfashion.DIDUPthusfinishestheoriginal
code’sevolution.
plan.
3) LightweightStateManagement:errorsinevitablyoccur,
Afterusingtheappwiththebookmarkfeature,theusergetsan
andinsituationswherethemachinecannotfixthem,itpro-
ideaforanewfeature-theabilitytosearchwithintheirbookmarks.
videsasimplifiedversionofsourcecontrol.Userscanquickly
reverttodifferentworkingstatesandrapidlyprototypeex-
DIDUPallowstheusertoaddthistaskastask6asapartofadaptive
plorations.
planning,theabilitytoadd,update,orremovetaskscontinuously
duringprojectdevelopment.Itisacrucialcomponentofcode-based
UIprototypingbecauseitprovidestheadaptabilityneededtorefine
3 System anditerateondesignideasandaccommodatechangeseffectively.
WeintroduceDIDUP,awebapplicationtoassistcode-basedUI Todothis,theuseraddsasixthstep:6)Implementsearchinthe
prototypes.Itemploysadynamic,iterativeapproachtodevelop- bookmarkstab,andthesystemgeneratescodeforthisnewfeature.
mentthatallowsforhumandirectionateverystep,ascanbeseen Whiletestingtheirprototype,theuserrealizesanotherfeature
in2.DIDUPisaFlaskapplicationthatrunsontheweb,featuring theywanttoadd-theywanttomarkabookmarkedrestaurantas
a Python backend and a Typescript frontend. It is designed for “visited.”Inthefuture,whenthey’relookingforanewrestaurant
usersfamiliarwithfront-enddevelopmentwhowanttoprototype totry,theydon’tlookattherestaurantsthey’vealreadybeento.
fasterandhelpsusersauthorwebapplicationsinHTML,CSS,and DIDUPaddsafieldtothedatastoreofbookmarkedrestaurants
Javascript. tohaveabinaryvariablefor“visited,”andgeneratescodesothat
Wewalkthroughthe systemwitha motivatingexample(an theUIhasabuttononeveryrestaurant“card”inthebookmarked
exampleoftheUIoutputsforeachtaskscanbeseenin3).The sectionthattheusercanmarkasvisited.
userfirstinputstheprototypegoal:creatingaUIthatvisualizes Theuserteststheprototypeandseesthefeatureisfullyfunction-
Yelprestaurantsasacard-swipingUI(Tinder)tohelpuserschoose ing,butrealizesthatthey’vemadeamistake-theywanttobeable
restaurantstoeatat.Thesystemoutputsadetailedspecification tomarkanyrestaurantas“visited”,notjustthebookmarkedones.Conference’17,July2017,Washington,DC,USA JennyMa,KarthikSreedhar,VivianLiu,SitongWang,PedroAlejandroPerez,andLydiaB.Chilton
ThisprocessallowedtheusertoprototypeaworkingUIandadd
featuresastheytestedprototypes.Byincorporatingadaptiveplan-
ning,codeinjection,andlightweightstatemanagement,DIDUPal-
lowsuserstorapidlyiterateoncode-basedUIprototypes.Itstream-
linesthetypicallytediousprocessofswitchingbetweenwriting
code,designingfeatures,managingstates,andfrequenttesting.
4 Evaluation
WeconductedasmalluserstudytoevaluateDIDUP’sabilityto
buildprototypescomparedtoGPTPilot.Wetaskedtwouserswith
creatingspecificUIs,usingbothsystems.Inbothcases,GPTPilot
becamefixatedonusingMongoDBtoimplementadatabaseforthe
prototype,whichtheuserwasnotfamiliarwithanddidnotwant
touse.RepeatedpromptingfromtheusertonotuseMongoDBdid
notwork.Inonecase,theuserwasabletosuccessfullycreatetheir
applicationonlyafterrestartingtheentireprocessandspecifying
thatMongoDBshouldnotbeusedintheinitialprojectdescription
input.TheothercasewasultimatelyunsuccessfulbecauseGPT
Pilotenteredaninfiniteloopduringthedebuggingprocess,and
therewasnowaytorollbacktoapreviousworkingstate.
WhenusingDIDUP,bothuserscreatedworkingUIprototypes
easily.Botheasilyaddednewfeaturesandbacktrackedtomake
majoradjustments.Furthermore,theprototypestheycreatedwere
morecomplete.DIDUP-generatedUIshadsignificantlymoregroup-
ingandstylisticelementsthanGPTPilot-generatedUIs.
5 FutureWork
Inthefuture,weplantoincreasethenumberofparticipantsand
formalizetheevaluationtomoreaccuratelyunderstandhowef-
fectivelyDIDUP’sdevelopmentprocesscansupportusersincode-
basedUIprototyping.Currently,oursystemislimitedtofront-end
codegenerationinJavascript,CSS,andHTML;wewillexpandthis
Figure3:ThefigureaboveshowsexamplesoftheUIoutput
tofull-stackdevelopment.Additionally,wecanimproveuponadap-
ateachtask.DIDUPsavesthecodeforeachUI.Ateachtask,
tiveplanningmechanismstoallowfullregenerationsofplansif
theusercantestinteractionswiththeinterface.Theuser
designdirectionschange,orallowforadditionsofcomplexfeatures
canalsoaddtaskstohelpprototypenewfeaturesandtest
thataddplans,orgroupsofmultipletaskstotheinitialdesign.We
outmoreinteractions.
canalsoemployatree-structureforlightweightversioncontrolso
.
userscancompareexistingprototypesagainsteachother.
Forausertobeabletocontributemeaningfulfeedbackordirec-
tionintermsofsystemdesign,theyhavetounderstandthespaceof
designpossibilitiesfortheUIandUXoftheirprototype.Theyhave
toknowwhatdesignpatternstheycandrawupontorepresenttheir
data,whatalternativestheyhave,andwhichwouldfitbestgiven
thecurrentstateoftheirinterface.Itwouldbehelpfultosurface
content-awareUI/UXsuggestionsforausertoconsiderastheyare
Makingthischangerequiresmodifyingtheunderlyingdatarepre-
deeperintheiriterativecyclewiththeuserinterface.Additionally,
sentationtotake“visited”outofbookmarksandontoallrestaurants.
therearemanyusabilityheuristicspeopleusetocheckthecreation
Thus,itseemssafesttodoarollbacktotheversionofthecodeat
ofuserinterfaces.Thesecanincludeaccessibilityguidelines,error
task6(withbookmark’simplemented,butnofavorites).
preventionmechanisms,andreadabilityoruserflowsuggestions.
Tosupportrollback,oursystemintroduceslightweightstate
management.DIDUPsavesthestateoftheUIcodeateverytaskto
allowuserstoquicklyreturntoapreviousstatewithoutremnantsof 6 Conclusion
previouschanges.Theuserrollsbacktostep6.Aftertherollback, Thispaperexplorescode-basedUIprototypingusinganiterative
the user can use adapting planning to execute the new task of spiralmodel.Weintroducedthreenovelmechanismstoguidethe
allowinguserstomarkanyrestaurantasvisited,andcreateanew architectureforcode-basedUIprototyping:(1)AdaptivePlanning
cardlistofallvisitedrestaurants.Theusercannowrememberall tosupportcontinualupdatesindesignsandplansduringimplemen-
theirpastrestaurantvisits,notjusttheonesthatwerebookmarked. tation,(2)CodeInjectiontopreventrewritesofcodewithintasksDIDUP:DynamicIterativeDevelopmentforUIPrototyping Conference’17,July2017,Washington,DC,USA
andpreventglobalerrors,and(3)LightweightStateManage- CognitionAI.2024. Devin:TheLLMProgrammer. https://github.com/OpenDevin/
menttofacillitaterollbacksandrapidUIprototypes.Wepresented OpenDevin.
IncFigma.2016.Figma.figma.com.
DIDUP,asystemthatutilizesthesemechanismstocreateUIsin
GitHub.2024.GitHubCopilot:YourAIpairprogrammer.https://github.com/features/
Javascript,CSS,andHTML.Ourinitialevaluationdemonstrated copilot.
thatDIDUPproducedmorecompleteandstylisticUIscomparedto Google.2024. Gemini:ALargeLanguageModel. https://github.com/kyegomez/
Gemini.
abaselineofGPTPilot-createdUIs.Additionally,withDIDUP,users BradA.MyersandMaryBethRosson.1992.Surveyonuserinterfaceprogramming.
wereabletobacktrackandpreventerrors.Followinganiterative InProceedingsoftheSIGCHIConferenceonHumanFactorsinComputingSystems
spiralworkflowiscrucialwhencreatingsystemsforcode-based (Monterey,California,USA)(CHI’92).AssociationforComputingMachinery,New
York,NY,USA,195–202. https://doi.org/10.1145/142750.142789
UIprototyping,allowingfordynamicdevelopmentthatprevents Pythagora.2024.GPTPilot:AnAdvancedAISystem.https://github.com/Pythagora-
failuresandhandleschange. io/gpt-pilot.
WinstonRoyce.2021.Managingthedevelopmentoflargesoftwaresystems:concepts
andtechniques.IdeasThatCreatedtheFuture(2021). https://api.semanticscholar.
References org/CorpusID:110643636
B.W.Boehm.1988.Aspiralmodelofsoftwaredevelopmentandenhancement.Com-
puter21,5(1988),61–72. https://doi.org/10.1109/2.59