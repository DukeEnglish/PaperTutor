Synchronization-Based Cooperative Distributed
Model Predictive Control
Julius Beerwerth1, Maximilian Kloock2 and Bassam Alrifaee1
1 Department of Aerospace Engineering,
University of the Bundeswehr Munich,
85579 Neubiberg, Germany,
[firstname].[lastname]@unibw.de
2 Department of Computer Science,
RWTH Aachen University,
52062 Aachen, Germany
Abstract. Distributed control algorithms are known to reduce overall
computationtimecomparedtocentralizedcontrolalgorithms.However,
theycanresultininconsistentsolutionsleadingtotheviolationofsafety-
critical constraints. Inconsistent solutions can arise when two or more
agents compute concurrently while making predictions on each others
control actions. To address this issue, we propose an iterative algorithm
calledSynchronization-BasedCooperativeDistributedModelPredictive
Control,whichwepresentedin[1].Thealgorithmconsistsoftwosteps:1.
computingtheoptimalcontrolinputsforeachagentand2.synchronizing
thepredictedstatesacrossallagents.Wedemonstratetheefficacyofour
algorithm in the control of multiple small-scale vehicles in our Cyber-
Physical Mobility Lab.
Keywords: CooperativeControl,DistributedControl,PredictionCon-
sistency, Model Predictive Control, Connected and Automated Vehicles
1 Introduction
Distributed control algorithms in networked control system (NCS) offer en-
hancedscalability,flexibility,andfaulttolerancecomparedtoCentralizedModel
Predictive Control (CMPC). Cooperative Distributed Model Predictive Control
(CDMPC) is a popular approach, but it faces challenges with prediction in-
consistencies due to limited local system knowledge. All agents compute their
control inputs based on local subsystem knowledge while only predicting the
control inputs of the neighboring agents. If a predicted control input diverts
from the computed control input, this is called a prediction inconsistency and
can lead to safety-critical failures. In this work, we show how to guarantee pre-
dictionconsistencyusingsynchronizationbasedon[1]and[2].Previousworkon
achieving prediction consistency in CDMPC includes sequential approaches and
parallel approaches. In sequential approaches, the agents compute sequentially
and achieve prediction consistency by sharing their predicted outputs [3,4,5].
4202
peS
61
]YS.ssee[
1v51201.9042:viXra2 Julius Beerwerth, Maximilian Kloock and Bassam Alrifaee
Achievingpredictionconsistencyinparallelapproachesismoredifficult,butde-
sirable as they are more scalable. The approaches explored in the literature can
beclusteredintodifferentideas.In[6],thecouplinggraphisdividedintodisjoint
sub-graphs that are fully connected and can be analyzed independently. In [7],
theagentsaregiveninitialdecisionsandadaptthesedecisionsslightlytoreduce
their local cost. This approach does not scale well, as it requires computing the
initialdecisions.Theworksof[8,9,10]usefuzzylogictodealwiththeprediction
inconsistencies. The authors of [11,12,13] use coalitional games from game the-
ory to cluster agents in the coupling topology, leading to potentially high node
degrees. Instead of distributing the control problem, it is also possible to solve
thecentralizedoptimizationproblemusingdistributedoptimizationasshownin
[14,15,16,17,18].
2 Background
We consider multiple agents in an NCS. The topology of the NCS is modeled as
a weighted undirected graph G = (V,E,W) called coupling graph. Here, V rep-
resents the set of nodes, E the set of edges and W their corresponding weights.
Eachnodeinthecouplinggraphrepresentsanagentandtheedgesthecoupling
relationsbetweenthem.Wedefinethecouplingsub-graphG =(V ,E ,W ),con-
i i i i
sisting of agent i, its neighbors and the edges between them. Figure 1 shows an
example coupling graph and the coupling sub-graph for agent 1.
1 1
2 3 2 3
4
(a) Coupling graph G. (b)Couplingsub-graphG foragent1.
1
Fig.1: Example for (a) a coupling graph and (b) the corresponding coupling
sub-graph for agent 1.
Consider the distributed control problem in an NCS. At each time step, we aim
tocomputetheoptimalcontrolinputsforeachagenti∈V tofollowitsreference
trajectory r . To solve this distributed control problem we use CDMPC as it al-
i
lowsustoincorporateindividualaswellasjointobjectivesandconstraints.The
set of agents that agent i cooperates with is given by the set V in the coupling
i
sub-graph G . We formulate the local CDMPC problem for agent i as
iSynchronization-Based CDMPC 3
Np−1
(cid:88) (cid:88) (cid:88)
w ℓx(x (k),r (k))+ w ℓf(x (N ),r (N ))+
i→j j i→j j i→j j i→j p j p
minimize
j∈Vi k=1 j∈Vi
(cid:88)
N (cid:88)u−1
(cid:88)
(cid:88)Np
w ℓu(∆u (k))+ ℓc (x (k),x (k))
i→j j i→j j→q i→j i→q
j∈Vi k=0 (j,q)∈Eik=1
subject to ∀j ∈V ,q ∈V ∩V
i i j
x (k)=f (x (k),u (k)), l=1,...,N −1,
i→j j i→j i→j p
x (k)∈X , l=1,...,N −1,
i→j j p
x (N )∈Xf,
i→j p j
u (k)∈U , l=0,...,N −1,
i→j j u
∆u (k)∈∆U , l=0,...,N −1,
i→j j u
cc (x (k),x (k))≤0, k =1,...,N ,
j→q i→j i→q p
(1)
where ℓx,ℓf,ℓu denote the reference deviation cost, the terminal cost, and the
j j j
input variation cost for agent j, respectively, and ℓc denotes the coupling
j→q
objective between agent j and agent q. The variables x (k), u (k) and
i→j i→j
∆u (k) represent the state, the input, and the input variation at time step
i→j
k of agent j predicted by agent i. The parameters N and N denote the pre-
p u
diction and the control horizon, respectively, and w represents the weight of
i→j
the corresponding edge. The function f represents the system dynamics and
j
X ,Xf,U , and ∆U represent the set of feasible states, the terminal set, the
j j j j
set of feasible inputs, and the set of feasible input variations, respectively. The
function cc denotes the coupling constraint between agent j and agent q.
j→q
We outline the CDMPC procedure in Algorithm 1. Each agent computes opti-
malinputsforitselfandpredictstheoptimalinputsofitsneighbors.Duetothe
limitedlocalsystemknowledgeofeachagent,thepredictionscanbeinconsistent
between agents.
3 The SCDMPC Algorithm
We propose to synchronize the states globally to guarantee prediction consis-
tency. Our approach is inspired by multi-agent consensus [19] and synchroniza-
tion[20].Torestoreconsistency,eachagentisynchronizesthestatesitpredicted
Algorithm 1: CDMPC algorithm for agent i
1: Input: reference trajectories r , ∀j ∈V
j i
2: Output: control inputs u and predicted states x
i→j i→j
3: Send and receive states to and from neighboring agents
4: Solve CDMPC problem (1) for u and x
i→j i→j4 Julius Beerwerth, Maximilian Kloock and Bassam Alrifaee
foritsneighbors.Agenticonsidersthestatesagentj computedforitself,aswell
as the states the agents q (that are connected to both agent i and agent j)
predicted for agent j. Specifically agent i computes the weighted average
(cid:88) 1
x¯ = x . (2)
i→j w q→j
q→j
q∈Vi∩Vj
Similartotheagent-levelplanning,agentionlyconsidersasubsetofthepredic-
tionsofotheragentsthatexistforagentj.Therefore,predictionconsistencymay
not be satisfied after the first synchronization step. Consequently, we designed
the synchronization as an iterative process. At every synchronization step, each
agent synchronizes the states and communicates them to its neighbors. The size
ofthesevectorsscaleslinearlywiththepredictionhorizonN andthedimension
p
ofthestatespace,affectingthecommunicationoverheadasthenumberofagents
orthecomplexityoftheproblemincreases.However,aseachagentonlycommu-
nicates with its neighbors, the overall communication remains distributed and
scalablecomparedtocentralizedapproaches.Then,eachagentchecksifthesyn-
chronized predictions from its neighbors are consistent with its own predictions.
Ifthepredictionsareconsistent,thesynchronizationprocedureterminates,ifnot
we repeat the procedure until we converged to a consistent solution. Theorem
1 states that the synchronization is guaranteed to converge and consequently
terminate if the coupling sub-graph contains a spanning tree, i.e., if at least one
agent has a path to all other agents.
Theorem 1. The synchronization converges to a solution if and only if each
coupling sub-graph G contains a spanning tree.
i
FortheproofofTheorem1,see[1].Weoutlinethesystem-levelsynchronization
method in Algorithm 2. Our complete Synchronization-Based Cooperative Dis-
tributed Model Predictive Control (SCDMPC) scheme is defined in Algorithm
3. The algorithm loops until the resulting solutions are locally feasible and pre-
diction consistent. Within this loop, each agent first computes a solution for
itselfanditsneighborsusingtheCDMPCproceduregiveninAlgorithm1.Then
Algorithm 2: Synchronization algorithm for agent i
1: Input: inconsistent states x ,∀j ∈V ,q∈V ∩V
q→j i i j
2: Output: consistent states x¯
j
3: Initialize synchronized states x¯ =x
q→j q→j
4: while predictions not consistent do
5: Send states x¯ to agents j
i→j
6: Receive states x¯ from agents q
q→j
7: for all j ∈V do
i
8: x¯ =(cid:80) 1 x¯
i→j q wq→j q→j
9: end for
10: end while
11: x¯ =x¯
j i→jSynchronization-Based CDMPC 5
thecorrespondingpredictionsaresynchronizedusingthesynchronizationproce-
duregiveninAlgorithm2.Iftheresultingpredictionsarefeasible,thealgorithm
terminates; if not, the process is repeated using the synchronized predictions
as the reference in the next iteration of the loop. If the solution space of the
optimization problem is convex, SCDMPC terminates after the first iteration.
For a non-convex solution space we state that there exists a coupling topology
such that SCDMPC is guaranteed to converge to a feasible solution, if a feasi-
ble solution to the corresponding centralized optimization problem exists. For
a proof see [1]. Therefore, the convergence and consequently the termination of
thealgorithmdependsonthecouplingtopologyandthecorrespondingcoupling
weights.
Algorithm 3: Synchronization-Based Cooperative Distributed Model
Predictive Control for agent i
1: Input: reference trajectories r ,∀j ∈V , indices j ∈V ,q∈V ∩V
j i s i i j
2: Output: control inputs u and predicted states x
i→j i→j
3: while states are not feasible and prediction consistent do
4: (u ,x )← CDMPC(r ) (Alg. 1)
i→j i→j j
5: Receive predictions x
q→j
6: if predictions inconsistent then
7: x ←Synchronization(x ) (Alg. 2)
j q→j
8: end if
9: r ←x
j j
10: end while
4 Evaluation
We evaluate the SCDMPC algorithm in our CPM Lab [21], an open-source,
remotely accessible small-scale test-bed using connected and automated vehi-
cles (CAVs) in 1:18 scale. Each vehicle executes the algorithm on a designated
computation node, a real-time Ubuntu 18.04 with two 1.6GHz cores and 16GB
of RAM. Each vehicle communicates with its computation node via WiFi. The
computation nodes share the vehicle’s information via Ethernet. The algorithm
was implemented in MATLAB R2020a. To solve optimization problem (1), we
use the optimization toolbox of IBM CPLEX 12.10. For the costs we use the
weighted ℓ -norm while omitting the coupling objective. The kinematic bicycle
2
model predicts system dynamics, while coupling constraints enforce safety dis-
tances between agents.
We test the algorithm in a formation building scenario. A visualization of the
scenario is given in Figure 2. Each vehicle is placed at a random location on the
4m x 4m driving area of the test-bed. The driving area itself does not contain
obstacles and is therefore convex. The CAVs aim to form a predefined forma-
tion, in our case standing next to each other at the top of the driving area.
The controller of each vehicle computes the optimal trajectory to arrive at the
goal pose as fast as possible while avoiding collisions. We generate a reference6 Julius Beerwerth, Maximilian Kloock and Bassam Alrifaee
path using Dubins Path algorithm and compute a respective reference trajec-
tory by sampling points on the reference path based on the speed of the vehicle.
For more information we refer to 4.5
Reference path
[2]. We run the scenario multiple
4 Driven path
times with random start poses and
fixed goal poses using CMPC and 3.5
SCDMPC and compare the results. 3
The average cumulative path and
2.5
speed deviations shown in Figure 3
1
indicate that the deviations are sim- 2 5
9
ilar for SCDMPC and CMPC. In 1.5 3 2
some instances SCDMPC achieves 8 6
1 7
smaller deviations than CMPC. In 4
those cases SCDMPC had a higher 0.5
cost for the control input varia- 0
0 0.5 1 1.5 2 2.5 3 3.5 4
tions or the coupling objective than
CMPC, which are not considered Fig.2: Visualization of the formation
here. Furthermore, it can be ob- building scenario.
served that the average cumulative path deviations increase with the number
of CAVs.In Figure 4,the maximum computation time ofSCDMPC andCMPC
isshownfordifferentnumbersofCAVs.Itisevidentthat,forboththemaximum
computation time increases with the number of CAVs. However, the SCDMPC
approachprovestobemorescalableasthemaximumcomputationtimeincreases
at a slower rate. Note, that the computation time of Algorithm 3 depends on
the coupling topology of the agent. The number of neighbors of an agent in-
creases the number of optimization variables and constraints and consequently
the computation time needed to solve the optimization problem.
·10−2
4.5 0.12
CMPC CMPC
4 SC-DMPC SC-DMPC
0.1
3.5
3 8·10−2
2.5
6·10−2
2
1.5 4·10−2
1
2·10−2
0.5
0 0
2 3 4 5 6 7 8 9 2 3 4 5 6 7 8 9
Number of Vehicles Number of Vehicles
(a) Path deviation. (b) Speed deviation.
Fig.3: The average cumulative path and speed deviations of CMPC and
SCDMPC for different numbers of CAVs.
]m[
noitaiveD
htaP
]s/m[
noitaiveD
deepSSynchronization-Based CDMPC 7
1.6
CMPC
1.4 SC-DCMPC
1.2
1
0.8
0.6
0.4
0.2
0
2 3 4 5 6 7 8 9
Number of Vehicles
Fig.4: The maximum computation time of CMPC and SCDMPC for different
numbers of CAVs.
5 Conclusion
This work presented a Synchronization-Based Cooperative Distributed Model
Predictive Control approach. We show that through synchronization, prediction
consistency can be guaranteed. In our experiments in the CPM Lab we demon-
strate the applicability of the SCDMPC algorithm for planning trajectories of
CAVs. The results make it evident that the SCDMPC achieves control perfor-
mance close to that of CMPC while showcasing better scalability in terms of
computation time. In future research, we will investigate the effect of communi-
cation delays as well as learning-based approaches to enhance the performance
and safety of our approach.
References
1. Kloock,M.,Alrifaee,B.:CoordinatedCooperativeDistributedDecision-MakingUs-
ing Synchronization of Local Plans. In: IEEE Transactions on Intelligent Vehicles,
vol. 8, no. 2, pp. 1292-1306 (2023).
2. Kloock, M., Alrifaee, B.: Cooperative Pose Control of Non-Holonomic Vehicles Us-
ing Synchronization. In: 2023 IEEE 26th International Conference on Intelligent
Transportation Systems (ITSC), pp. 93-99 (2023).
3. Trodden, P., Richards, A.: Cooperative distributed MPC of linear systems with
coupled constraints. In: Automatica, vol. 49, Issue 2, pp. 479-487 (2013).
4. Mu¨ller,M.A,Reble,M.,Allgo¨wer,F.:Cooperativecontrolofdynamicallydecoupled
systemsviadistributedmodelpredictivecontrol.In:InternationalJournalofRobust
and Nonlinear Control, 22, pp. 1376-1397 (2012).
5. Blasi, S., Ko¨gel, M., Findeisen, R.: Distributed Model Predictive Control Using
Cooperative Contract Options. In: IFAC-PapersOnLine, vol. 51, Issue 20, pp. 448-
454 (2018).
6. Trodden, P., Richards, A.: Adaptive cooperation in robust distributed model pre-
dictive control. In: 2009 IEEE Control Applications, (CCA) & Intelligent Control,
(ISIC), pp. 896-901 (2009).
]s[
emiT
noitatupmoC
mumixaM8 Julius Beerwerth, Maximilian Kloock and Bassam Alrifaee
7. Maestre,J.M.,Mun˜ozdelaPen˜a,D.,Camacho,E.F.,Alamo,T.:Distributedmodel
predictive control based on agent negotiation. In: Journal of Process Control, vol.
21, Issue 5, pp. 685-697 (2011).
8. Sahebjamnia, N., Tavakkoli-Moghaddam, R., Ghorbani, N.: Designing a fuzzy Q-
learning multi-agent quality control system for a continuous chemical production
line – A case study. In: Computers & Industrial Engineering, vol. 93, pp. 215-226
(2016).
9. Francisco, M., Mezquita, Y.,Revollar, S.,Vega, P., De Paz, J. F.: Multi-agent dis-
tributed model predictive control with fuzzy negotiation. In: Expert Systems with
Applications, vol. 129, pp. 68-83 (2019).
10. Morales-Rodelo, K., Vega, P., Francisco M., Revollar, S.: Influence of fuzzy layer
in distributed control structure applied to four coupled tanks. In: 2019 IEEE 4th
Colombian Conference on Automatic Control (CCAC), pp. 1-6 (2019).
11. Maxim,A.,Maestre,J.M.,Caruntu,C.F.,Lazar,C.:Min-MaxCoalitionalModel
Predictive Control Algorithm. In: 2019 22nd International Conference on Control
Systems and Computer Science (CSCS), pp. 24-29 (2019).
12. Fele,F.,Debada,E.,Maestre,J.M.,Camacho,E.F.:CoalitionalControlforSelf-
OrganizingAgents.In:IEEETransactionsonAutomaticControl,vol.63,no.9,pp.
2883-2897 (2018).
13. Chanfreut, P., Maestre, J. M., Muros, F. J., Camacho, E. F.: A Coalitional Con-
trol Scheme with Topology-Switchings Convexity Guarantees. In: 2019 IEEE 58th
Conference on Decision and Control (CDC), pp. 1096-1101 (2019)
14. Falsone,A.,Margellos,K.,Garatti,S.,Prandini,M.:Dualdecompositionformulti-
agent distributed optimization with coupling constraints. In: Automatica, vol. 84,
pp. 149-158 (2017).
15. Hashempour,S.,Suratgar,A.A.,Afshar,A.:DistributedNonconvexOptimization
for Energy Efficiency in Mobile Ad Hoc Networks. In: IEEE Systems Journal, vol.
15, no. 4, pp. 5683-5693 (2021).
16. Segovia,P.,Puig,V.,Duviella,E.,Etienne,L.:Distributedmodelpredictivecontrol
using optimality condition decomposition and community detection. In: Journal of
Process Control, vol. 99, pp. 54-68 (2021).
17. Hours,J.-H.,Jones,C.N.:AParametricNonconvexDecompositionAlgorithmfor
Real-Time and Distributed NMPC. In: IEEE Transactions on Automatic Control,
vol. 61, no. 2, pp. 287-302 (2016).
18. Braun,P.,Faulwasser,T.,Gru¨ne,L.,Kellett,C.M.,Weller,S.R.,Worthmann,K.:
Hierarchical distributed ADMM for predictive control with applications in power
networks. In: IFAC Journal of Systems and Control, Volume 3, Pages 10-22 (2018)
19. Ren, W., Beard, R. W.: Consensus Seeking in Multiagent Systems Under Dy-
namically Changing Interaction Topologies. In: IEEE Transactions on Automatic
Control, vol. 50, no. 5, pp. 655-661 (2005).
20. Lunze, J.: Networked Control of Multi-agent Systems. Bookmundo, Rotterdam
(2019).
21. Kloock, M., Scheffe, P., Maczijewski, J., Kampmann, A., Mokhtarian, A.,
Kowalewski, S., Alrifaee, B.: Cyber-Physical Mobility Lab: An Open-Source Plat-
form for Networked and Autonomous Vehicles. In: 2021 European Control Confer-
ence (ECC), pp. 1937-1944 (2021).