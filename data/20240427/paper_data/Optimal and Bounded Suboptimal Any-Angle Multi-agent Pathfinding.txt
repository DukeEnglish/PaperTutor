Optimal and Bounded Suboptimal Any-Angle Multi-agent Pathfinding
Konstantin Yakovlev1, Anton Andreychuk2, Roni Stern3
Abstract—Multi-agentpathfinding(MAPF)istheproblemof
findingasetofconflict-freepathsforasetofagents.Typically,
theagents’movesarelimitedtoapre-definedgraphofpossible
locations and allowed transitions between them, e.g. a 4-
neighborhood grid. We explore how to solve MAPF problems
when each agent can move between any pair of possible
locationsaslongastraversingthelinesegmentconnectingthem
does not lead to the collision with the obstacles. This is known
as any-angle pathfinding. We present the first optimal any-
angle multi-agent pathfinding algorithm. Our planner is based
on the Continuous Conflict-based Search (CCBS) algorithm
and an optimal any-angle variant of the Safe Interval Path
Planning (TO-AA-SIPP). The straightforward combination of
those, however, scales poorly since any-angle path finding
induces search trees with a very large branching factor. To
mitigate this, we adapt two techniques from classical MAPF
to the any-angle setting, namely Disjoint Splitting and Multi-
Fig. 1. Two optimal solutions of the same MAPF instance: the one
Constraints. Experimental results on different combinations
composed of the cardinal moves only (left) and the one with any-angle
of these techniques show they enable solving over 30% more moves(right).Thecostofthelatteris22%lower.
problems than the vanilla combination of CCBS and TO-AA-
SIPP.Inaddition,wepresentabounded-suboptimalvariantof
our algorithm, that enables trading runtime for solution cost
in a controlled manner.
Wefocusonrelaxingthisassumption,allowingeachagent
I. INTRODUCTION
to move between any pair of locations – see Fig. 1. This
Multi-agentpathfinding(MAPF)istheproblemoffinding
typeofpathfindingisoftencalledany-anglepathfinding[10].
asetofconflict-freepathsforasetofagents.Itsapplications Algorithms such as Anya [11] and TO-AA-SIPP [12] have
include automated warehouses [1], traffic control [2], digital been proposed for optimal single-agent any-angle path find-
entertainment [3], etc. Different optimization variants of ing, and a suboptimal any-angle MAPF solver was also
MAPF have proven to be NP-Hard [4], yet efficient optimal proposed [13]. We propose AA-CCBS, the first any-
MAPF solvers have been proposed such as Conflict Based angle MAPF algorithm that is guaranteed to return cost
Search (CBS) [5], SAT-MDD [6], BCP [7] and others. optimal solutions.
Most prior work focused on the classical version of the
AA-CCBS integrates CCBS with TO-AA-SIPP. While it
problem which makes many simplifying assumptions [8].
is guaranteed to return optimal solutions, AA-CCBS scales
The most common of them are that i) the agents’ moves
poorlysinceany-anglepathfindinginducessearchtreeswith
are limited to a given graph of possible locations and the
a very large branching factor. To mitigate this, we propose
transitions between them, and ii) all moves take one time
several enhancements to AA-CCBS based on techniques
unit.Indeed,theselimitationsarenotwell-suitedforavariety
fromclassicalMAPF,namelydisjointsplitting(DS)[14]and
of robotic applications and, thus, some works have begun
multi-constraints(MC)[15].Inparticular,wesuggestseveral
to explore how to solve MAPF without them. In particular,
novel variants of how MC can be applied for our any-angle
the Continuous Conflict-based Search (CCBS) algorithm
setup, without compromising the theoretical guarantees.
guarantees completeness and optimality while avoiding the
need to discretize time and can handle agent actions with We conduct a thorough empirical evaluation of different
different durations [9]. Still, CCBS as well as many other variants of AA-CCBS across standard benchmarks. The
previously proposed optimal MAPF solvers rely on the first results show that the our enhancements AA-CCBS work
assumption, i.e., that the agents move over a pre-defined verywell,solvingsignificantlymoreproblemsunderagiven
graph of locations and allowed transitions between them. time limit than vanilla AA-CCBS. We also show how AA-
CCBScanbeeasilygeneralizedtobeabounded-suboptimal
1Konstantin Yakovlev is with Federal Research Center for Computer algorithm, allowing a controlled way to trade off runtime
ScienceandControlRASandwithAIRIyakovlev@airi.net
for solution quality. Our experimental results demonstrate
2AntonAndreychukiswithAIRIandreychuk@airi.net
that allowing even a small amount of suboptimality allows
3Roni Stern is with Ben-Gurion University of the Negev
sternron@bgu.ac.il solving many more problems.
4202
rpA
52
]IA.sc[
1v97361.4042:viXraII. RELATEDWORKS (AA-MAPF) asks to find a set of n plans transferring the
agents from their start vertices to the goal ones, such that
Lifting certain Classical MAPF [8] assumptions to make
eachpairofplansiscollision-free.Thecostoftheindividual
the resultant solvers more suitable to real-world applications
plan, c(π), is the time when the agent reaches its goal.
has been studied recently. In [13] a prioritized any-angle
We wish to solve the problem optimally w.r.t. sum-of-cost
MAPF planner was introduced and in [16] this planner was
objective,whichisthesumofdurationsoftheagents’plans,
enhanced to support robots of different sizes and moving
SOC
=(cid:80)n
c(π ).
speeds. Other techniques for planning with kinematic con- i=1 i
straints, including the post-processing of the plans produced
IV. BACKGROUND
by the classical MAPF solvers, were also proposed [17],
[18], [19]. Yan and Li [20] proposed an involved three-stage Our planner is based on a combination of CCBS, [9] and
solver based on Priority-Based Search [21], that handles not TO-AA-SIPP[12].Next,webrieflyintroducethesemethods.
onlykinematicconstrainstsbutacceleratinganddecelerating
A. CCBS
actions. All these solvers, unlike ours, are not optimal.
CCBS is a variant of CBS [5] adapted to non-discretized
Optimal MAPF solvers that go beyond Classical MAPF
timeline.Itreasonsoverthecontinuoustime-intervalsinstead
setting also exist. A vast majority of them are adaptations of
of distinct isolated time steps. CCBS works by finding plans
the seminal CBS algorithm [5]. In [22] individual roadmaps
for each agent separately, detecting conflicts between these
for the robots are constructed and then used by CBS (for
plans, and resolving them by replanning for the individual
collisiondetectioneachpathineachroadmapissplitintothe
agentssubjecttospecificconstraints.Aconflictbetweenthe
uniform time resolution segments). A dedicated technique is
twoagentsinCCBSisdefinedby(a ,a ,t ,t ),representing
suggested to decide when to re-construct these roadmaps. A i j i j
that a collision occurs when executing the actions a and a
combination of CBS with trajectory optimization methods i j
at time moments t and t , respectively. CCBS resolves a
was suggested to construct collision-free paths for a team of i j
conflict by imposing a constraint on an agent and replan
heterogeneous agents (quadrotors) [23], [24]. Kinodynamic
for that agent. The constraint imposed by CCBS is a tuple
variants of CBS were considered in [25], [26], [27]. In this
(a,[t,t′)),statingthattheagentisprohibitedfromtakingac-
work, we also leverage CBS, specifically its variant adapted
tion a in the time range [t,t′). The latter is called the unsafe
to non-discretized timeline [9], to conduct multi-agent any-
interval. Several approaches were considered to compute t′,
angle path finding with optimality guarantees.
the first time moment an agent can safely start executing the
III. PROBLEMSTATEMENT action, including closed-loop formulas [28].
Consider a set of vertices V residing in the metric space, Toguaranteeoptimality,CCBSrunstwosearchprocesses:
e.g., a grid where the vertices are the set of centers of the a high-level search to choose which agent to constraint
gridcells.Therearendesignatedstartandgoalvertices,and and a low-level search to find a path for that agent that
n agents initially located at the start vertices. The agents are satisfies its constraints. CCBS uses a best-first search for
modeled as disks of a certain radius. Two types of actions the high-level search and the Safe-Interval Path Planning
foreachagentarepossible:waitatthecurrentvertex(foran (SIPP) algorithm [29] for the low-level search. SIPP is a
arbitrary amount of time) and move between the vertices. specific adaptation of A* for space-time domains. It was
A move is valid only if the given line-of-sight function, originally proposed for single-agent pathfinding among dy-
los : V ×V → {true,false}, returns true. This function namic obstacles, but can be easily adapted to handle CCBS
checks whether an agent can follow a straight-line segment constraints, as the latter can be viewed as dynamic obstacles
connecting the vertices without colliding with an obstacle, that temporarily appear in the workspace.
e.g., whether the set of grid cells swept by the disk-shaped
B. TO-AA-SIPP
agent contains only free cells. The cost of each action is its
duration.Thedurationofawaitactionmaybearbitrary.The TO-AA-SIPP is a variant of SIPP that aims at finding
duration of a move action equals the distance between the an optimal any-angle path for an agent navigating in an
vertices comprising this move (we assume that the agents environment with dynamic obstacles. As in regular SIPP, its
start/stop instantaneously and move with the unit speed). search node is identified by a tuple (v,[t ,t ]), where v is a
l u
Anindividualplanforanagentisasequenceoftimedac- graph vertex and [t ,t ] is a safe time interval that dictates
l u
tionsπ =((a ,t ),(a ,t ),...,(a ,t )),wherea isamove when the agent may safely reside at v.
0 0 1 1 n n i
action, t is the starting time of this action, and each action The principal difference between TO-AA-SIPP and SIPP
i
muststartwherethepreviousoneends.Thewaitactionsare is that the former does not iteratively build a search tree by
encoded implicitly in the plan, i.e. if t +dur(a ) < t expandingsearchnodes.Instead,itgeneratesallsearchnodes
i i i+1
then the agent is waiting at the endpoint of a for a time beforehand(thisispossibleduetotheusageoftimeintervals
i
of t −t −dur(a ). Here dur(a ) denotes the duration as the nodes’ identifiers) and iteratively tries to identify
i+1 i i i
of action a . The plans of distinct agents are said to be in the correct parent relationships between the nodes to obtain
i
conflict if there exists a time moment when the distance the optimal solution. The authors refer to this technique
between the agents, executing these plans, is less than sum as “inverted expansions”. TO-AA-SIPP was proven to be
oftheirradii.Theany-anglemulti-agentpathfindingproblem complete and optimal.a11 a22 a21 A B C D A B C D A B C D
Unsafe Intervals:
a12 a11 vs a21: [0, 1.106) a21 vs a11: [0, 0.616) 0 [0, 0.547) 0 [0, 1.112) 0 [0, 1.112)
a11 vs a22: [0, 0.522) a21 vs a12: [0, 0.835) 1 [0, 0.290) 1 [0, 0.510) 1 [0, 0.510)
a12 vs a21: [0, 1.215) a22 vs a11: [0, 1.057)
a12 vs a22: [0, 0.638) a22 vs a12: [0, 0.912) 2 2 2
Multiconstraints:
A1 = {(a11, [0, 0.522)), A2 = {(a21, [0, 0.616)), 3 3 3
(a12, [0, 0.638))} (a22, [0, 0.912))}
4 4 4
5 5 5
Fig.2. AnexampleofvanillaAA-CCBSmulti-constraint. MC1 MC2 MC3
Fig.3. Actionscomprisingdifferentversionsofmulti-constraints.Please
note that the time intervals of the actions in MC2 and MC3 are notably
V. AA-CCBS
largercomparedtoMC1.ThusMC2andMC3areexpectedtoexhibitmore
To solve AA-MAPF, we propose to use TO-AA-SIPP as pruningpower.
the low-level planner for CCBS. We call this algorithm AA-
CCBS. Unfortunately, AA-CCBS struggles to solve even
of [0;0.522) in the MC, despite its unsafe interval w.r.t a ,
simple instances. E.g., the small AA-MAPF instance with 3 21
ending at 1.106, is twice longer. A shorter unsafe interval
agentsdepictedinFig.1requiresexpanding6,660high-level
means that the power of constraint diminishes. To mitigate
nodesandconsequentlyasimilarnumberoflow-levelcallsto
this issue we suggest two modifications.
TO-AA-SIPP.ToenableAA-CCBStoscalemoregracefully,
First, we suggest to consider only a limited set of actions
we propose two vital enhancements: Multi-Constrains (MC)
to form A (A similarly). The source of each action should
and Disjoint Splitting (DS). i j
coincidewiththesourceoftheinitiallyconflictingactiona .
i
A. Multi-Constraints in Any-Angle MAPF The destination must be a vertex that is swept by the agent
whenexecutinga ,i.e.theagent’sbodyintersectsthisvertex
i
CCBS resolves a conflict by adding a single constraint to
(grid cell). Thus the resulting actions form a “stripe” along
one of the agents and replanning. However, adding multiple
a – see Fig. 3 (the cells that form a stripe are highlighted).
i
constraints(multi-constraint)whenresolvingasingleconflict
The second modification is that we filter out the actions
can reduce the number of high-level search iterations [30],
from the MC that lead to trimming the original unsafe
[15]. In particular, Walker et al. [15] proposed the Time-
interval. In particular, if unsafe(a ,a′) ̸⊂ unsafe(a ,a )
Annotated Biclique (TAB) method for adding multiple con- i j i j
thena′ isexcludedfromA .Herea anda aretheoriginal
straints in domains with non-uniform actions. j j i j
conflicting actions, and {a′} is the set of actions that are
For two conflicting actions, (a ,t ) and (a ,t ), TAB j
i i j j in conflict with all a ∈ A . The combination of those two
i
iteratesoverallactionsthathavethesamesourceverticesas
enhancements is dubbed MC2.
eithera ora andidentifiesthesubsetsofthem,A andA ,
i j i j Thedetailedpseudo-codeofconstructingMC2isshownin
that are mutually conflicting, i.e. each pair of actions from
Alg.1.Afterinitialization(Lines1-3),weidentifytheswept
A i×A j leadtoaconflict(iftheystartatt i,t j respectively). cells (Line 4) and form the candidate sets of actions Aˆ,Aˆ
Themulti-constraint(MC)addedtothefirstagentcomprises i j
(Line 5). Then, in Line 6, we merge them into Aˆ in such a
the constraints (a ,[t,t′]) where [t,t′] is the largest time
i way that the actions from Aˆ and aˆ alternate (this merging
intervalthatisfullyincludedintotheunsafeintervalsinduced i j
procedureisdenotedaszipincode).Next,weiterateoverAˆ
bya andalla ∈A .TheMCaddedtothesecondagentis
i j j andfilteroutactionsthatleadtotrimmingtheunsafeinterval
defined similarly. TAB is applicable in AA-CCBS. We call
of a (Lines 10-12). After pruning the candidate sets we
this variant MC1. i
iterate over the actions once again to compute their unsafe
Example. Consider two actions sets {a i1,a i2}, {a j1,a j2} intervals (Lines 15-21). The resulting sets of action-interval
and time moments t i,t j. Let [t i,t′] = unsafe(a i1,a j1)∩ pairs form MC2.
unsafe(a ,a ) and [t ,t′′] = unsafe(a ,a ) ∩
i1 j2 i i2 j1 Next, we suggest one more way of composing the action
unsafe(a ,a ]), where unsafe denotes the unsafe in-
i2 j2 setsofMC,whenweincludeintotheconstrainedsetactions
terval of a starting at t w.r.t. a starting at t .
ik i jl j that start at the different graph vertices. This is possible as
Then, the MC associated with the first action set is
by definition the set of actions comprising A and A must
i j
{(a ,[t ,t′));(a ,[t ,t′′))}. It dictates that the agent is not
i1 i i2 i be mutually conflicting but the definition does not specify
allowed to perform either a or a in the respective time
i1 i2 whatsourceandtargetverticesoftheseactionsshouldbe.In
intervals. Fig. 2 shows an illustrative example.
specifics,weenlargetheactionsetsofMC2withtheactions
The problem with MC1 is that in AA-MAPF the number that have the same target vertex (as the original conflicting
of mutually-conflicting actions may be large. Thus, after actions)andthesourceverticesthatlieonthesamestripeas
intersecting their unsafe intervals the final unsafe interval before–seeFig.3(right).Therationaleisthattheseactions
for a certain action is likely to get trimmed. For example, are likely to lead to collisions that will happen between the
consider action a of Fig. 2, which has an unsafe interval same agents and nearly in the same place. Thus it is natural
11Algorithm 1: Forming MC2 for AA-CCBS Thus, we need to reason over the multiple distinct start
Input: Conflicting actions (and times) a ,t ,a ,t locations for the consecutive search, which is not trivial.
i i j j
Output: A pair of multi-constraints {A ,A } Integrating DS with MC3 is even more involved as here we
i j
1 [t i,t′)← unsafe interval of a i w.r.t. (a j,t j); need to handle landmarks that are composed of the actions
2 [t j,t′′)← unsafe interval of a j w.r.t. (a i,t i); that start at different locations.
3 A i ←∅; A j ←∅; To simplify the integration of DS and MC in AA-
4 C {i,j} ← vertices swept by a {i,j}; CCBS we suggest to avoid creating landmarks out of multi-
5 Aˆ {i,j} ← valid actions that start at the source of constrains, while still operating with conventional negative
multi-constraints. In particular, consider a conflicting pair
a and end in C ;
{i,j} {i,j}
6 Aˆ←zip(Aˆ i,Aˆ j); of timed actions, (a i,t i,a j,t j). As in the original DS, we
7 for each aˆ∈Aˆ do impose a singular negative constraint on the first agent in
the left CCBS child and the corresponding singular positive
8 if source(aˆ)=source(a i) then
constraint in the right child. Additionally, the second agent
9 if IsConflict(aˆ,A j)=true then
gets a negative multi-constraint in the right child, which is
10 [t j,tˆ)← unsafe interval of a j w.r.t. computedwithrespecttotheaction(a ,t )only.Inthisway,
(aˆ,t ); i i
i there is no need to handle positive MCs, while the regular
11 if t′′ >tˆthen
(singular) positive constraint is enforced with the negative
12 remove aˆ from Aˆ i; MC (in one of the descendants in CCBS search tree).
13 else Theorem 1: AA-CCBS with any of the enhancements —
14 handling a j similarly (Lines 9-12); MC1, MC2, MC3, and DS — is sound, solution-complete,
and optimal, i.e., it is guaranteed to return a valid solution
15 for each a∈Aˆ i do is such exists, and the solution it returns is cost-optimal.
16 t min ←∞; Proof outline: Soundness, solution-completeness, and opti-
17 for each a′ ∈Aˆ j do mality for vanilla AA-CCBS is trivial, following the proofs
18 [t i,t cur)← unsafe interval of a w.r.t. (a′,t j); of CCBS [9] and TO-AA-SIPP [12]. To prove that the pro-
19 t min ←min{t min,t cur}; posed improvements (MC1, MC2, MC3, and DS) preserve
these properties, it is sufficient to show that AA-CCBS
20 A i ←A i∪{(a,[t i,t min))};
with them always resolves conflicts with a sound pair of
21 Process Aˆ j similarly (Lines 15-20); constraints[32].Apairofconstraintsissoundifinanyvalid
22 return {A i,A j} solution,atleastoneoftheseconstraintsissatisfied.Thatis,
any solution in which both constraints are violated is not
valid. In MC1, MC2, and MC3, by construction, for every
to include them in the same multi-constraint. The pseudo- pair of multi-constraints A i and A j they return it holds that
code for constructing MC3 largely repeats the one for MC2 any pair of constraints (a∗ i,T i∗) ∈ A i and (a∗ j,T j∗) ∈ A j
(with certain additions) and is omitted for the sake of space. form a sound pair of constraints. Thus, any solution that
violates a constraint in A and a constraint in A cannot be
i j
B. Disjoint Splitting
valid. A similar argument holds for DS due to the negative
Disjointsplitting(DS)isapowerfultechniqueforreducing constraints it imposes.
search effort in CBS [14] that was shown to be effective in
CCBSaswell[31].InDSforCCBS,aconflict(a ,a ,t ,t ) VI. EXPERIMENTALRESULTS
i j i j
is resolved in two ways: one CCBS child gets a regular We implemented AA-CCBS in C++1 and conducted the
(negative) constraint on agent i, while the other one - a experimental evaluation on five different maps from the
positive constraint to agent i and a negative constraint to well-known in the community MovingAI benchmark [8]:
agent j. The positive constraint comes in the conventional empty-16-16, random-32-32-20, maze-32-32-4,
CCBSformof(a,[t,t′))butdictatestheagentmustperform den321d and warehouse-10-20-10-2-2. For each
action a in a time moment belonging to [t,t′). Thus action map, the benchmark provides 25 scenarios. Each scenario
a becomes a landmark in the sense that the low-level search is a set of start-goal locations. We take two agents, run the
has to, first, find a plan to the source of a, then execute a, algorithm, and then increment the number of agents until
and then plan to the goal (or to the next landmark). the algorithm is not able to find a solution within a time-
Inthiswork,wesuggesttwooptionsforimplementingDS limit of 300 seconds. In the latter case, we proceed to the
for AA-CCBS: using DS as-is and using DS with MC. The next scenario. We evaluate six versions of AA-CCBS: AA-
first one is straightforward, while the second requires more CCBS (vanilla), AA-CCBS+MC1, AA-CCBS+MC2, AA-
attention. CCBS+MC3, AA-CCBS+DS, AA-CCBS+DS+MC3.
TointegrateDSwithMCsthatstartatthesamevertexbut Fig. 4 shows the results. The left pane shows the number
end in different ones, like MC1 or MC2, we need to impose of solved instances (with the breakdowns for each map).
a combined positive constraint that will dictate an agent to
perform any of the actions comprising the constrained set. 1https://github.com/PathPlanning/Continuous-CBS/tree/AA-CCBSa) Solved Instances b) Runtime (s) с) High-Level Iterations
1400 1000 1000000
1300
11 12 00 00 352 350 100 100000
10 90 00 0 361 183 187 10 10000
12345678 00000000 00000000
0
1213
6
4320
2
1198 1113
6
3931
5
7160 1213
6
4434
5
7560 231
9
004
2
809 331 153 042 331 053 864
00
.0.0
0
0.0
0
0
0.1 111
1
10 10
100
0
10
Vanilla +MC1 +MC2 +MC3 +DS +DS+MC3
empty random maze den312d warehouse Vanilla +MC1 +MC2 +MC3 +DS +DS+MC3 AA-CCBS+MC3 AA-CCBS+DS AA-CCBS+DS+MC3
Fig.4. TheresultsofevaluationofalltheversionsofAA-CCBS.a)showstheamountoftotallysolvedinstancesb)showthetimerequiredtofinda
solutionc)demonstratesthecomparisonofthethreebest-performingmethodsintermsofHLexpansions.
The results indicate that MC1 and MC2 do not provide
significant improvement over vanilla AA-CCBS. MC3, DS,
andDS+MC3,however,notablyoutperformit,especiallythe
ones that use DS. The central pane shows the number of
taskssolvedwithinacertaintimecap.TheX-axisshowsthe
number of tasks and Y-axis shows the time needed to solve
thisamountoftasks.OnecannotethatMC3outperformsall
other variants of AA-CCBS for easy tasks, i.e. for the ones
that need less than 0.1 seconds to be solved. Meanwhile
DSvariantsofAA-CCBSclearlyoutperformMC3whenthe
time, needed to solve an instance, is greater than 1 second.
TherightpaneofFig.4depictsthenumberofthehigh-level
iterations of AA-CCBS with MC3, DS, DS+MC3 for each
MAPF instance that was solved by all these methods. As
seenontheplot,thisnumberislowerforMC3fornearlyhalf
of the instances. This also confirms that MC3 solves some
(i.e. easy) instances faster than DS and MC2+DS, while it
Fig. 5. The results of the evaluation of AA-CCBS and its modifications
is outperformed on the other (hard) ones. withdifferentsuboptimalityfactors.
Overall the obtained results confirm that both MC and
DS are valuable techniques to enhance AA-CCBS perfor-
mance. MCs (specifically, MC3) are well-suited for the easy WeimplementedsuchaBSversionofAA-CCBSwiththe
instances while the DS – for the harder ones. Generally, we three best-performing enhancements, DS, MC3, DS+MC3,
wouldrecommendtouseAA-CCBS+DS+MC3tosolveany- andevaluatedthemonthesameprobleminstancesasbefore.
angle MAPF optimally. Fig. 5 shows the results. In the upper part the box-and-
whiskers plot of the resultant solution cost depending on
VII. BOUNDED-SUBOPTIMALAA-CCBS
the suboptimality bound are shown. The table at the bottom
Given a real number w > 1 a bounded suboptimal (BS)
shows the number of the solved instances across all maps.
solution is the one whose cost does not exceed the cost
Indeed, MC3 notably increases the performance of AA-
of the optimal one by more than a factor of w. Finding
CCBS when searching for bounded suboptimal solutions
a BS solution is often much easier and faster than finding
(i.e. when w > 1), while DS variants are not even able
an optimal one. Creating a BS variant of AA-CCBS with
to outperform vanilla AA-CCBS. We hypothesize that this
any of our enhancements is straightforward: replacing the
is due to the positive constraints imposed by DS do not
best-first search in the AA-CCBS high-level with a Focal
lead to immediate eliminating the conflict that causes these
search [33].2 I.e. at each high-level iteration we, first, form
constraints. When searching for optimal solutions this is
a subset of nodes whose cost does not exceed the cost
compensated by reducing the branching factor. However the
of the most promising node (the one which regular AA-
search for suboptimal solutions is more greedy by design
CCBS would have picked) by a factor of w and, second,
and branching factor becomes much less important. Thus,
choose from this subset the node with the smallest number
DS looses much of its power, while retaining the drawback
of conflicts breaking ties in favor of nodes containing more
ofnotimmediatelyeliminatingtheconflict.Atthesametime,
constraints. Thus we force the search to more greedily
MC3 imposes constraints on a larger number of actions, and
resolve the conflicts, while still maintaining the bound on
as the search greedily goes deeper it actually eliminates the
the suboptimality of the resultant solution.
conflict. Moreover, due to the requirement to satisfy all the
imposedpositiveconstraints,theactualcostsofthesolutions
2CreatingaBSlow-levelsearchisnottrivialinourcaseandgoesbeyond
thescopeofthispaper. foundbyDSversionsareonaveragemorethantwicehigher
secnatsnI
devloS
fo rebmuN
)s(
emitnuR
1 83 57 211 941 681 322 062 792 433 173 804 544 284 915 655 395 036 766 407 147
snoitaretI
leveL-hgiH
1 62 15 67 101 621 151 671 102 622 152 672 103 623 153 673 104 624 154 674 105than the ones of MC3. The actual overhead in solution costs [14] J. Li, D. Harabor, P. J. Stuckey, A. Felner, H. Ma, and S. Koenig,
ofMC3versionisnothigherthan2%onaverageevenwhen “Disjoint splitting for multi-agent path finding with conflict-based
search,” in International Conference on Automated Planning and
the suboptimality bound is w = 1.25. The obtained results
Scheduling,pp.279–283,2019.
provide further support that MC3 is a useful technique: not [15] T.T.Walker,N.R.Sturtevant,andA.Felner,“Generalizedandsub-
only does it speed the search for optimal solutions on easy optimalbipartiteconstraintsforconflict-basedsearch,”inProceedings
of the 34th AAAI Conference on Artificial Intelligence (AAAI 2020),
instances, but it also significantly increases the performance
pp.7277–7284,2020.
of bounded-suboptimal AA-CCBS. [16] K. Yakovlev, A. Andreychuk, and V. Vorobyev, “Prioritized multi-
agentpathfindingfordifferentialdriverobots,”inProceedingsofthe
VIII. CONCLUSIONANDFUTUREWORK 2019EuropeanConferenceonMobileRobots(ECMR2019),pp.1–6,
IEEE,2019.
In this work, we presented AA-CCBS, the first optimal
[17] H. Ma, W. Ho¨nig, T. K. S. Kumar, N. Ayanian, and S. Koenig,
any-angle MAPF algorithm. We showed how to incorpo- “Lifelong path planning with kinematic constraints for multi-agent
rate existing CCBS enhancements, namely Disjoint Splitting pickupanddelivery,”inProceedingsofthe33rdAAAIConferenceon
ArtificialIntelligence(AAAI2019),pp.7651–7658,2019.
and Multi-Constraints, into AA-CCBS to allow it to scale
[18] W. Ho¨nig, T. S. Kumar, L. Cohen, H. Ma, H. Xu, N. Ayanian, and
better. Specifically, we introduced three ways to implement S. Koenig, “Multi-agent path finding with kinematic constraints.,”
Multi-Constraints, providing stronger pruning of the high- in Proceedings of The 26th International Conference on Automated
PlanningandScheduling(ICAPS2016),pp.477–485,2016.
level search tree. AA-CCBS can also be easily adapted to
[19] Z.A.AliandK.Yakovlev,“Prioritizedsippformulti-agentpathfind-
return bounded-suboptimal solutions. Experimental results ingwithkinematicconstraints,”inProceddingofthe6thInternational
confirmthatthesuggestedenhancementshaveahugeimpact ConferenceonInteractiveCollaborativeRobotics(ICR2021),pp.1–
13,Springer,2021.
on the algorithm’s performance. Future work can explore
[20] J. Yan and J. Li, “Multi-agent motion planning with be´zier curve
more sophisticated procedures of forming multi-constraints, optimization under kinodynamic constraints,” IEEE Robotics and
identifying which sets of actions should be considered in AutomationLetters,2024.
[21] H.Ma,D.Harabor,P.J.Stuckey,J.Li,andS.Koenig,“Searchingwith
each step, as well as adapting incremental search techniques
consistentprioritizationformulti-agentpathfinding,”inProceedings
in the any-angle low-level search. of the 33rd AAAI Conference on Artificial Intelligence (AAAI 2019),
pp.7643–7650,2019.
REFERENCES [22] I.Solis,J.Motes,R.Sandstro¨m,andN.M.Amato,“Representation-
optimal multi-robot motion planning using conflict-based search,”
[1] P.R.Wurman,R.D’Andrea,andM.Mountz,“Coordinatinghundreds IEEERoboticsandAutomationLetters,vol.6,no.3,pp.4608–4615,
of cooperative, autonomous vehicles in warehouses,” AI magazine, 2021.
vol.29,no.1,pp.9–9,2008. [23] M. Debord, W. Ho¨nig, and N. Ayanian, “Trajectory planning for
[2] A.Parks-YoungandG.Sharon,“Intersectionmanagementprotocolfor heterogeneous robot teams,” in Proceedings of the 2018 IEEE/RSJ
mixedautonomousandhuman-operatedvehicles,”IEEETransactions International Conference on Intelligent Robots and Systems (IROS
on Intelligent Transportation Systems, vol. 23, no. 10, pp. 18315– 2018),pp.7924–7931,IEEE,2018.
18325,2022. [24] W.Ho¨nig,J.A.Preiss,T.S.Kumar,G.S.Sukhatme,andN.Ayanian,
[3] H.Ma,J.Yang,L.Cohen,T.K.S.Kumar,andS.Koenig,“Feasibility “Trajectory planning for quadrotor swarms,” IEEE Transactions on
study: Moving non-homogeneous teams in congested video game Robotics,vol.34,no.4,pp.856–869,2018.
environments,”inAIIDE,2017.
[25] J. Kottinger, S. Almagor, and M. Lahijanian, “Conflict-based search
[4] J.YuandS.M.LaValle,“Optimalmultirobotpathplanningongraphs: formulti-robotmotionplanningwithkinodynamicconstraints,”inPro-
Completealgorithmsandeffectiveheuristics,”IEEETransactionson ceedingsofthe2022IEEE/RSJInternationalConferenceonIntelligent
Robotics,vol.32,no.5,pp.1163–1177,2016. RobotsandSystems(IROS2022),pp.13494–13499,IEEE,2022.
[5] G.Sharon,R.Stern,A.Felner,andN.R.Sturtevant,“Conflict-based [26] A.Moldagalieva,J.Ortiz-Haro,M.Toussaint,andW.Ho¨nig,“db-cbs:
search for optimal multi-agent pathfinding,” Artificial Intelligence, Discontinuity-bounded conflict-based search for multi-robot kinody-
2015. namic motion planning,” International Conference on Robotics and
[6] P. Surynek, A. Felner, R. Stern, and E. Boyarski, “Efficient sat Automation(ICRA),2024.
approachtomulti-agentpathfindingunderthesumofcostsobjective,” [27] L.Wen,Y.Liu,andH.Li,“Cl-mapf:Multi-agentpathfindingforcar-
inECAI,pp.810–818,2016. like robots with kinematic and spatiotemporal constraints,” Robotics
[7] E. Lam, P. Le Bodic, D. Harabor, and P. J. Stuckey, “Branch-and- andAutonomousSystems,vol.150,p.103997,2022.
cut-and-priceformulti-agentpathfinding,”Computers&Operations
[28] T.T.WalkerandN.R.Sturtevant,“Collisiondetectionforagentsin
Research,vol.144,2022.
multi-agentpathfinding,”2019.
[8] R. Stern, N. R. Sturtevant, A. Felner, S. Koenig, H. Ma, T. T. [29] M. Phillips and M. Likhachev, “SIPP: Safe interval path planning
Walker,J.Li,D.Atzmon,L.Cohen,T.S.Kumar,etal.,“Multi-agent for dynamic environments,” in Proceedings of The 2011 IEEE In-
pathfinding:Definitions,variants,andbenchmarks,”inProceedingsof ternational Conference on Robotics and Automation (ICRA 2011),
the 12th Annual Symposium on Combinatorial Search (SoCS 2019),
pp.5628–5635,2011.
pp.151–158,2019. [30] J.Li,P.Surynek,A.Felner,H.Ma,andS.Koenig,“Multi-agentpath
[9] A. Andreychuk, K. Yakovlev, P. Surynek, D. Atzmon, and R. Stern, findingforlargeagents,”inProceedingsofthe33rdAAAIConference
“Multi-agentpathfindingwithcontinuoustime,”ArtificialIntelligence, onArtificialIntelligence(AAAI2019),pp.7627–7634,2019.
2022. [31] A.Andreychuk,K.Yakovlev,E.Boyarski,andR.Stern,“Improving
[10] A.Nash,K.Daniel,S.Koenig,andA.Felner,“Theta*:Any-anglepath continuous-time conflict based search,” in Proceedings of the 35th
planningongrids,”inProceedingsofThe22ndAAAIConferenceon AAAI Conference on Artificial Intelligence (AAAI 2021), pp. 11220–
ArtificialIntelligence(AAAI2007),pp.1177–1183,2007.
11227,2021.
[11] D. Harabor and A. Grastien, “An optimal any-angle pathfinding [32] D.Atzmon,R.Stern,A.Felner,G.Wagner,R.Barta´k,andN.-F.Zhou,
algorithm,” in International Conference on Automated Planning and “Robustmulti-agentpathfindingandexecuting,”JournalofArtificial
Scheduling,pp.308–311,2013. IntelligenceResearch,vol.67,pp.549–579,2020.
[12] K. Yakovlev and A. Andreychuk, “Towards time-optimal any-angle [33] J.PearlandJ.H.Kim,“Studiesinsemi-admissibleheuristics,”IEEE
path planning with dynamic obstacles,” in Proceedings of the 31st transactions on pattern analysis and machine intelligence, no. 4,
International Conference on Automated Planning and Scheduling
pp.392–399,1982.
(ICAPS2021),pp.405–414,2021.
[13] K.YakovlevandA.Andreychuk,“Any-anglepathfindingformultiple
agents based on sipp algorithm,” in International Conference on
AutomatedPlanningandScheduling,pp.586–594,2017.