A Real-Time Rescheduling Algorithm for Multi-robot Plan Execution
YingFeng1,AdittyoPaul1,ZheChen2,JiaoyangLi1
1CarnegieMellonUniversity,USA
2MonashUniversity,Australia
{yingfeng,adittyop}@andrew.cmu.edu,zhe.chen@monash.edu,jiaoyangli@cmu.edu
Abstract the new TPG based on a given STPG that minimizes the
travel times of all agents to reach their goal locations. We
Oneareaofresearchinmulti-agentpathfindingistodeter-
prove the optimality of SES and introduce two variants: an
minehowreplanningcanbeefficientlyachievedinthecase
execution-based variant (ESES) and a graph-based variant
of agents being delayed during execution. One option is to
reschedulethepassingorderofagents,i.e.,thesequencein (GSES).ExperimentalresultsshowthatGSESfindstheop-
which agents visit the same location. In response, we pro- timal TPG with an average runtime of less than 1 second
pose Switchable-Edge Search (SES), an A*-style algorithm for variousnumbers ofagents onsmall- and medium-sized
designed to find optimal passing orders. We prove the opti- maps.Onlargermaps,GSESrunsupto4timesfasterthan
malityofSESandevaluateitsefficiencyviasimulations.The existingreplanningalgorithms.
best variant of SES takes less than 1 second for small- and
medium-sized problems and runs up to 4 times faster than Preliminaries
baselinesforlarge-sizedproblems.
Definition 1 (MAPF). Multi-Agent Path Finding (MAPF)
aims to find collision-free paths for a team of agents A on
Introduction
agivengraph.Eachagenti ∈ Ahasauniquestartlocation
Multi-Agent Path Finding (MAPF) is the problem of find- andauniquegoallocation.Ineachdiscretetimestep,every
ing collision-free paths that move a team of agents from agenteithermovestoanadjacentlocationorwaitsatitscur-
theirstarttogoallocations.MAPFisfundamentaltonumer- rentlocation.Apathforanagentspecifiesitsactionateach
ous applications, such as automated warehouses (Wurman, timestep from its start to goal locations. A collision occurs
D’Andrea, and Mountz 2007; Kou et al. 2020), computer ifeitherofthefollowinghappens:
games(Silver2005),anddroneswarms(Ho¨nigetal.2018).
1. Twoagentsareatthesamelocationatthesametimestep.
Classic MAPF models assume flawless execution. How-
2. One agent leaves a location at the same timestep when
ever, in real-world scenarios, agents may encounter unex-
anotheragententersthesamelocation.
pected delays due to mechanical differences, unforeseen
AMAPFsolutionisasetofcollision-freepathsofallagents.
events,localizationerrors,andsoon.Toaccommodatesuch
delays, existing research suggests the use of a Temporal Remark1. Theabovedefinitionofcollisioncoincideswith
Plan Graph (TPG) (Ho¨nig et al. 2016). The TPG captures that in the setting of k-robust MAPF (Atzmon et al. 2018)
the precedence relationships within a MAPF solution and with k = 1. We disallow the second type of collision be-
maintainsthemduringexecution.Eachprecedencerelation- cause, if agents follow each other and the front agent sud-
shipspecifiesanorderfortwoagentstovisitthesameloca- denlystops,thefollowingagentsmaycollidewiththefront
tion.Anagentadvancestothenextlocationinitspathonly agent. Thus, this restriction ensures better robustness when
if the corresponding precedence conditions are met. Con- agents are subject to delays. Note that the swapping colli-
sequently, if an agent experiences a delay, all other agents sion,wheretwoagentsswaptheirlocationssimultaneously,
whose actions depend on this agent will pause. Despite its isaspecialcaseofthesecondtypeofcollision.
advantages of providing rigorous guarantees on collision- AMAPFsolutioncanberepresentedindifferentformats.
freeness and deadlock-freeness, the use of TPG can intro- Westicktothefollowingformatforourdiscussion,though
duceasignificantnumberofwaitsintotheexecutionresults ouralgorithmsdonotdependonspecificformats.
duetotheknock-oneffectintheprecedencerelationship. Definition2(MAPFSolution). AMAPFsolutiontakesthe
In this paper, we adopt a variant of TPG, named Switch- formofasetofcollision-freepathsP ={p :i∈A}.Each
i
ableTPG(STPG)(Berndtetal.2020).STPGallowsforthe pathp isasequenceoflocation-timesteptuples(li,ti) →
i 0 0
modificationofsomeprecedencerelationshipsinaTPG,re- (li,ti)→···→(li ,ti )withthefollowingproperties:(1)
1 1 zi zi
sultinginnewTPGs.Toaddressdelays,weproposeanA*- Thesequencefollowsastricttemporalordering:0 = ti <
0
stylealgorithmcalledSwitchable-EdgeSearch(SES)tofind ti <···<ti .(2)li andli arethestartandgoallocations
1 zi 0 zi
Copyright©2024,AssociationfortheAdvancementofArtificial of agent i, respectively. (3) Each tuple (l ki,ti k) with k > 0
Intelligence(www.aaai.org).Allrightsreserved. specifiesamoveactionofifromli toli attimestepti.
k−1 k k
4202
raM
62
]IA.sc[
1v54181.3042:viXraThese properties force all consecutive pairs of locations
li and li to be adjacent on the graph. A wait action is
k k+1
implicitlydefinedbetweentwoconsecutivetuples.Namely,
ifti −ti =∆>1,theniisplannedtowaitatli for∆−1
k+1 k k
timesteps before moving to li . Additionally, ti records
k+1 zi
the time when i reaches its goal location, called the travel
time of i. The cost of a MAPF solution P is cost(P) =
(cid:80) i∈Ati zi,andP isoptimalifitscostisminimum. Figure1:ExampleofconvertingaMAPFsolutiontoaTPG.
Remark 2. Definition 2 discards the explicit representation ThesolidarrowsintheTPGrepresentType1edges,andthe
ofwaitactions.Thisisbecause,whenexecutingP asaTPG dashedarrowrepresentsaType2edge.
(specifiedinthenextsection),itmayreducethetraveltimeif
P hasunnecessarywaitactions,e.g.,whenP issuboptimal.
Procedure1:TPGExecution
Related Works Numerous recent studies on MAPF have Codeshighlightedinbluecomputecost(G)andcan
explored strategies for managing unexpected delays during beomittedforthemerepurposeofexecution.
execution.Asimplestrategyistore-solvetheMAPFprob- 1 Defineacountercost;
lemwhenadelayoccurs.However,thisstrategyiscomputa- 2 FunctionINIT EXEC(V)
tionallyintensive,leadingtoprolongedagentwaitingtime. 3 cost←0;
T geo sa tev doi td heth ce ren ae te id onfo or fre ap kla -n ron bin ug st,A Mt Azm PFon soet lua tl i. o( n2 ,0 a1 l8 lo) wsu ing g- 4 MarkverticesinV 0 ={v 0i :i∈A}assatisfied;
5 Markverticesin(V \V 0)asunsatisfied;
agents to adhere to their planned paths even if each agent
is delayed by up to k timesteps. However, replanning is 6 FunctionSTEP EXEC(G =(V,E 1,E 2))
still required if an agent’s delay exceeds k timesteps. Atz- 7 S ←∅; //Verticestobemarkedassatisfied
monetal.(2020)thenproposedadifferentmodel,calledp- 8 foralli∈A:v zi iunsatisfieddo
robustMAPFsolutions,thatensuresexecutionsuccesswith 9 cost←cost+1;
a probability of at least p, given an agent delay probability 10 k ←min{k :v ki unsatisfied};
model.Nevertheless,planningak-robustorp-robustMAPF 11 if∀(u,v ki)∈E 2 :usatisfiedthen
solution is considerably more computational-intensive than 12 Addv ki intoS;
computingastandardMAPFsolution.Anotherstrategyfor
managingdelaysinvolvestheuseofanexecutionpolicythat 13 returnS;
preserves the precedence relationships of a MAPF solution 14 FunctionEXEC(G =(V,E 1,E 2))
duringexecution(Ho¨nigetal.2016;Ma,Kumar,andKoenig 15 INITEXEC(V);
2017; Ho¨nig et al. 2019). This strategy is quick and elimi- 16 while∃v ∈V :vunsatisfieddo
natestheneedforreplanningpaths.However,theexecution 17 S ←STEP EXEC(G);
r ee ss su al rt ys wof at ie tn
s
ale reav ie ntr ro oo dm ucefo dr
.
Oim up rr wov oe rm ke an imt, sas tom aa dn dy reu sn sn te hc is- 18 forallv ki ∈S doMarkv ki assatisfied;
limitation by formally exploring the concept of optimizing 19 returncost;
precedence relationships online (Berndt et al. 2020; Man-
nucci,Pallottino,andPecora2021).
Specifically, E = {(vj ,vi) : ∀i ̸= j ∈ A,s ∈
TemporalPlanGraph(TPG) 2 s+1 k
[0,zj),k ∈[0,zi]satisfyinglj =li andtj <ti}.
Inessence,weaimtooptimizethepassingorderformultiple s k s+1 k
agents to visit the same location. This is achieved using a Example 1. Figure 1 shows an example of converting a
graph-basedabstractionknownastheTPG. MAPFsolutionintoaTPG.Bothagentsareplannedtovisit
Definition3(TPG). ATemporalPlanGraph(TPG)(Ho¨nig location D, and the red agent is planned to visit D earlier
et al. 2016) is a directed graph G = (V,E ,E ) that repre- than the blue agent. Consequently, there is a Type 2 edge
1 2
sents the precedence relationships of a MAPF solution P. fromv 3redtov 2blue,signifyingthattheblueagentcanmoveto
ThesetofverticesisV = {vi : i ∈ A,k ∈ [0,zi]},where DonlyaftertheredagenthasreachedF.Notethatwedefine
eachvertexvi correspondstok (li,ti),namelythekth move Type 2 edge as (v 3red,v 2blue) instead of (v 2red,v 2blue) to avoid
k k k thesecondtypeofcollisioninDefinition1.
action in path p . There are two types of edges E and E ,
i 1 2
whereeachdirectededge(u,v)∈E ∪E encodesaprece-
1 2 Executing a TPG Procedure 1 describes how to execute
dence relationship between a pair of move actions, namely
a TPG G, which includes a main function EXEC and two
movementuisplannedtohappenbeforemovementv.
helper functions INIT and STEP , along with two
EXEC EXEC
• A Type 1 edge connects two vertices of the same agent, marks “satisfied” and “unsatisfied” for vertices. Marking a
specifyingitspath.Specifically,E 1 ={(v ki,v ki +1):∀i∈ vertex as satisfied corresponds to moving an agent to the
A,k ∈[0,zi)}. corresponding location, and we do so if and only if all in-
• A Type 2 edge connects two vertices of distinct agents, neighbors of this vertex have been satisfied. The execution
specifying their ordering of visiting the same location. terminates when all vertices are satisfied, i.e., all agentshave reached their goal locations. The cost of executing G,
namely cost(G) = EXEC(G), is the sum of travel time for
agentsfollowingG (whileassumingnodelayshappen).
We now introduce some known properties of TPGs. All
proofs are delayed to the appendix. We use G to denote a
TPGconstructedfromaMAPFsolutionPasinDefinition3.
Proposition1(Cost). cost(G)≤cost(P).
Intuitively,cost(G)<cost(P)ifP hasunnecessarywait Figure2:ExampleofreversinganedgeinaTPG.
actionsandcost(G)=cost(P)otherwise.
Proposition2(Collision-Free). ExecutingaTPGwithPro- We now show the roadmap of our algorithm. Given a
cedure1doesnotleadtocollisionsamongagents. MAPFsolutionP,weconstructTPGG fromP asinDefi-
0
Next,wepresenttwolemmasregardingdeadlocksofex- nition3andthenrunProcedure1.Whenadelayhappens,we
ecuting a TPG, which were used in previous work (Berndt (1) construct a STPG GS based on G 0 and (2) finds a TPG
et al. 2020; Su, Veerapaneni, and Li 2024) and are helpful G∗ with cost(G∗) = min{cost(G) : G is GS-producible},
forourdiscussionofswitchableTPGsinthenextsection. representinganoptimalorderingofagentsvisitingeachlo-
cation,uponstickingtotheoriginallocation-wisepaths.We
Definition 4 (Deadlock). When executing a TPG, a dead-
describeStep(1)belowandStep(2)inthenextsection.
lock is encountered iff, in an iteration of the while-loop of
Construction1. Assumethat,duringtheexecutionofG =
EXEC(G),V containsunsatisfiedverticesbutS =∅. 0
(V,E ,E ),agentdisforcedtodelayatitscurrentlocation
1 2
Lemma 3 (Deadlock ⇐⇒ Cycle). Executing a TPG en- ldfor∆timesteps.WeconstructSTPGGS asfollows:
c
countersadeadlockifftheTPGcontainscycles.
1. ConstructSTPGGS = (V,E ,(S ,N ))withS =
1 E2 E2 E2
Lemma4(Deadlock-Free). IfaTPGisconstructedfroma {(vj ,vi) ∈ E :vj isunsatisfiedandk < zi}and
MAPFsolution,thenexecutingitisdeadlock-free. s+1 k 2 s+1
N ={(vj ,vi)∈E :vj issatisfiedork =zi}.
E2 s+1 k 2 s+1
2. Create ∆ new dummy vertices V = {v ,··· ,v }
SwitchableTPG(STPG) new 1 ∆
and (∆ + 1) new Type-1 edges E = {(vd,v ),
new c 1
TPGisahandyrepresentationforprecedencerelationships. (v ,v ),··· ,(v ,v ),(v ,vd )} and modify GS
1 2 ∆−1 ∆ ∆ c+1
Yet,aTPGconstructedasinDefinition3isfixedandbound withV ←V∪V andE ←(E ∪E )\{(vd,vc )}.
new 1 1 new c c+1
to a given set of paths. In contrast, our optimization algo-
Iftherearemultipleagentsdelayedatthesametimestep,we
rithmwillusethefollowingextendednotionofTPGs,which
repeatStep2foreachdelayedagent.
enablesflexiblemodificationsofprecedencerelationships.
Remark 4. In Step 1, (vj ,vi) is non-switchable when
Definition 5 (STPG). Given a TPG G = (V,E ,E ), a s+1 k
Switchable TPG (STPG) GS = (V,E 1,(S E2,N E21 )) p2 arti- v sj +1 is satisfied because agent j has already visited l sj.
tionsType2edgesE 2intotwodisjointsubsetsS E2(switch- (v sj +1,v zi i) is non-switchable because agent i must be the
ableedges)andN E2(non-switchableedges)andallowstwo lastonetovisititsgoallocation.Thedummyverticesadded
operationsonanyswitchableedge(vj ,vi)∈S : inStep2areusedtoaccountforthedelaysinProcedure1.
s+1 k E2
Wenowshowanintuitiveyetcrucialtheorem.
• fix(vj ,vi) removes (vj ,vi) from S and add it
s+1 k s+1 k E2 Theorem5. IfSTPGGS isconstructedbyConstruction1,
intoN .Itfixesaswitchableedgetobenon-switchable.
E2 thenthereisatleastonedeadlock-freeGS-producibleTPG.
• reverse(vj ,vi)removes(vj ,vi)fromS andadd
s+1 k s+1 k E2
( sv hk ii p+ a1 n,v dsj t) hein nto fixN eE s2 i. tI tots bw eit nc oh ne -s swth ie tcp hr ae bc le ed .encerelation- P swro ito cf h. aW ble
e
g ee dn ge er sate ina Gn Sa¨ .ıve Les mol mut aion
4
G en na siv ue reb sy tf hi ax tin Gg
0
a il sl
deadlock-free. GS constructed in Step 1 is identical to G
Remark 3. Reversing the precedence relationship repre- 0
if we fix all switchable edges. Step 2 behaves as expand-
sentedby(v sj +1,v ki)produces(v ki +1,v sj)because,basedon ingapre-existingedge(vi ,vi)intoalineofconnecting
k−1 k
Definition 3, Type 2 edge (vj ,vi) indicates locations lj edges,whichdoesnotcreateanynewcycles.Therefore,by
s+1 k s
andl ki arethesame.Thus,afterreversing,vertexv ki +1needs Lemma3,G naiveisdeadlock-free.
tobesatisfiedbeforevj canbemarkedassatisfied.
s SwitchableEdgeSearch(SES)Framework
Example 2. Figure 2 shows an example of reversing an
Wedescribeouralgorithm,SwitchableEdgeSearch(SES),
edge. After the reverse operation, edge (vred,vblue) in the
1 2 in a top-down modular manner, starting with a high-level
leftTPGisreplacedwithedge(vblue,vred)intherightTPG.
3 0 heuristic search framework in Algorithm 2. We define the
Definition5definesastrictsuperclassofDefinition3.A partialcostofaSTPGasthecostofitsreducedTPG,which
STPGdegeneratesintoaTPGifS E2isempty. isdefinedasfollows.
Definition 6 (GS-producible TPG). Given a STPG GS, a Definition7(ReducedTPG). ThereducedTPGofaSTPG
TPG is GS-producible if it can be generated through a se- GS = (V,E ,(S ,N ))istheTPGthatomitsallswitch-
1 E2 E2
quenceoffixandreverseoperationsonGS. ableedges,denotedasred(GS)=(V,E ,N ).
1 E2Algorithm2:SwitchableEdgeSearch(SES) we generate a node, we add only one new non-switchable
HEURISTIC and BRANCH are modules to be speci- edge,soanycycleformedmustcontainthenewedge.
fied later. X stores auxiliary information accompa- Assumption1. ThemodulesinSESsatisfy:
nyingaSTPGandwillbespecifiedlater.
A1 BRANCH(GS,X)outputsanupdatedauxiliaryinforma-
Input:STPGG rS oot tionX′,avalueg ∆,andaswitcableedgeofGS ifexists
Output:TPGG orNULLotherwise.
1 (h root,X init)← HEURISTIC(G rS oot,X init); A2 HEURISTIC(GS,X)computesavaluehsuchthatg+his
2 Q←{(G rS oot,X init,0,h root)}; //Apriorityqueue thepartialcostofGS foreverynode(GS,X,g,h)∈Q.
3 whileQisnotemptydo
Theorem 7 (Completeness and Optimality). Under As-
4
(GS,X,g,h)←Q.pop();
sumption 1, SES always finds a deadlock-free TPG G with
5 (X′,g ∆,(v ki +1,v sj))← BRANCH(GS,X); cost(G)=min{cost(G):G isGS -producible}.
6 if(v ki +1,v sj)= NULLthenreturnGS; root
7 G fS ←fix(GS,(v ki +1,v sj)); Proof. First,SESalwaysterminateswithinafinitetimebe-
cause there are only finitely many possible operation se-
8 ifnotCYCLEDETECTION(G fS,(v ki +1,v sj))then quences from GS to any TPG, each corresponding to a
9 (h f,X f)← HEURISTIC(G fS,X′); node that can por soo st ibly be added to Q. Second, Theorem 5
10 Q.push((G fS,X f,g+g ∆,h f)); ensuresthattherealwaysexistsolutionsforSESsinceGS
root
11 G rS ←reverse(GS,(v ki +1,v sj)); isconstructedasinConstruction1.Therefore,toprovethe
12 ifnotCYCLEDETECTION(G rS,(v sj +1,v ki))then c co lam impl :e Ate tn te hs es bo ef giS nE nS in, gw oe feju as ct hn we hed ilet -o lop or pov ite ert ah te iof no ,l fl oow rain ng
y
13 (h r,X r)← HEURISTIC(G rS,X′); deadlock-freeGS -producibleTPGG,thereexistsGS ∈ Q
14 Q.push((G rS,X r,g+g ∆,h r)); such that G is Gro So -t producible. Here, we abuse the notation
GS ∈ Q to denotea nodein Q with STPG GS. Thisclaim
15 throwexception“Nosolutionfound”;
holds inductively: At the first iteration, GS ∈ Q. During
16 FunctionCYCLEDETECTION(GS,(u,v)) anyiteration,ifsomeGS ∈QsuchthatGr io sot GS-producible
17
Rundepth-firstsearch(DFS)fromvonred(GS);
ispoppedonLine4,thenoneofthefollowingmusthold:
18 ifDFSvisitsvertexuthenreturntrue;
19 returnfalse; • GS containsnoswitchableedge,i.e.,GS = G:SESter-
minates,andtheinductivestepholdsvacuously.
• G is GS-producible: Since G is acyclic, so is red(GS).
f f
Thus,GS isaddedintoQ.
Lemma6. ThepartialcostofaSTPGGS isnogreaterthan f
thecostofanyGS-producibleTPG. • G isG rS-producible:Thisissymmetrictotheabovecase.
Proof. Let G be a GS-producible TPG. Consider running Inanycase,theclaimremainstrueafterthisiteration.There-
Procedure1onG andred(GS),respectively.Sinceanedge fore,SESalwaysoutputsasolutionwithinafinitetime.
appears in red(GS) must appear in G, we can inductively Finally,weprovethattheoutputTPGGhastheminimum
cost.AssumetowardscontradictionthatwhenGisreturned,
show that, in any call to STEP , if a vertex v can be
EXEC there exists GS ∈ Q that can produce a better TPG G
marked as satisfied in G, then it can be marked as satisfied 0 better
in red(GS). Thus, the total timesteps to satisfy all vertices with cost(G better) < cost(G). Yet this is impossible since
inred(GS)cannotexceedthatinG. Lemma 6 implies that such G 0S must have a smaller g +h
valueandthuswouldbepoppedfromQbeforeG.
As shown in Algorithm 2, SES runs A* in the space of
STPGs with a root node corresponding to the STPG GS
root Execution-basedModules
constructedasinConstruction1.ThepriorityqueueQsorts
itsnodesbytheirf-values(namelyg+h).Thef-valueofa In this and the next sections, we describe two sets of mod-
nodeisdefinedasthepartialcostofitsSTPG.Whenexpand- ulesandprovethattheysatisfyAssumption1.Westartwith
inganode,SESselectsoneswitchableedgeintheSTPGby describingasetof“execution-based”modulesinModule3
module BRANCH and generates two child nodes with the andrefertoitasExecution-basedSES(ESES).
selectededgebeingfixedorreversed.Weabusetheoper- In essence, ESES simulates the execution of the STPG
atorsfixandreverseonLines7and11totakeaSTPGand andbrancheswhenencounteringaswitchableedge.Ituses
aswitchableedgeasinputandreturnanewSTPG. X torecordtheindexofthemostrecentlysatisfiedvertexfor
SES uses function CYCLEDETECTION to prune child everyagent,indicatingtheircurrentlocations.X isupdated
nodes with STPGs that definitely produce cyclic TPGs, bytheBRANCHmodule,whichlargelyensemblesEXECin
namelySTPGswhosereducedTPGsarecyclic.Specifically, Procedure 1. At the beginning of each while-loop iteration
CYCLEDETECTION(GS, (u,v)) returns true iff red(GS) of BRANCH, ESES first checks whether the next vertex of
containsacycleinvolvingedge(u,v).AsGS isacyclic,it anyagentisinvolvedinaswitchableedgeand,ifso,returns
root
holdsinductivelythatCYCLEDETECTION(G,(u,v))returns thatedgetogetherwiththeupdatedX′andthecostofmov-
true iff red(GS) contains any cycle. This is because, when ing agents from the old X to the new X′ [Lines 8 to 11],Figure3:ExampleofrunningESESonthetop-leftSTPG.ThecirclednumbersdenotetheorderofgeneratingtheseSTPGs.
Module3:Execution-basedModulesforESES start with the top-left STPG ⃝1 containing two switchable
edges.ESESlooksata“horizon”containingthefirstunsat-
1 AuxillaryinformationX isamapX :A→[0:zi],
whereX[i]recordstheindexofthemostrecently isfiedverticesv 1i andv 1j,andthenpickstheadjacentswitch-
satisfiedvertexforagenti;
ableedge(vi,vj)tobranchon.Thisleadstotwocopiesof
3 1
2 X initonLine1ofAlgorithm2mapsallagentsto0; STPGs⃝2 and⃝3,containingnon-switchableedge(v 3i,v 1j)
3 INIT EXEC inProcedure1ismodifiedbysettingV 0to or(vj,vi),respectively.ESESexpandsonSTPG⃝3 firstas
{v ki :i∈A,k ≤X[i]}insteadof{v 0i :i∈A}; ithas2 as2 mallerg+hvalue.Thenextswitchableedgeiten-
4 FunctionBRANCH(GS =(V,E 1,(S E2,N E2)),X) countersis(v 3j,v 2i).ESESfirstfixesitandgeneratesTPG
5 INITEXEC(V,X); ⃝4 with cost = 10, which is the optimal solution. When
6 X′ ←X; ESESreversestheedge,theresultingTPG⃝5 isprunedas
7 while∃v ∈V :vunsatisfieddo itcontainsacycle.NotethatSTPG⃝2 willnotbeexpanded
8
foralli∈A:X′[i]<zido
sinceithasapartialcostgreaterthanthecostofTPG⃝4.
9 v ←v Xi ′[i]+1; //Firstunsatisfiedvertex
Proposition8. Module3satisfiesAssumption1.
10 if∃e∈S E2withe=(v,u)or(u,v)then
11 return(X′,cost,e); Proof. AssumptionA1holdsbydesign.ToproveAssump-
tionA2,wefirstprovethefollowingclaimbyinduction:for
12 S ←STEP EXEC(red(GS)); everynode(GS,X,g,h)∈Q,gisthecostofmovingagents
13 forallv ki ∈S do fromtheirstartlocationstoX.Thisholdsfortherootnode
14 Markv ki assatisfied; withg = 0andX[i] = 0,∀i ∈ A.Whenweexpandanode
15 X′[i]←k; (G,X,g,h) ∈ Q, g ∆ returned by BRANCH is the cost of
moving agents from X to X′. Thus, on Lines 10and 14 of
16
return(X′,cost,NULL);
Algorithm2,thegvalueofthechildnodesareg+g′,which
17
FunctionHEURISTIC(GS,X) isthecostofmovingagentsfromtheirstartlocationstoX′
18
return(EXEC(red(GS)),X); (=X
f
=X r).Soourclaimholds.ModuleHEURISTICruns
function EXEC to compute the cost of moving agents from
X′totheirgoallocationsonthereducedTPG,makingg+h
thepartialcostofGS foreverynode(GS,X,g,h)∈Q.
where the cost is updated inside function STEP . If no
EXEC
suchedgeisfound,itrunsSTEP onthereducedTPGto Graph-basedModules
EXEC
moveagentsforwardbyonetimestepandrepeattheprocess.
Wenowintroduceanalternativesetofmodulesthatfocuson
Example 3. Figure 3 shows an example of ESES.1 We thegraphpropertiesofaTPG.Werefertothisimplementa-
tion as Graph-based SES (GSES). We will see later in our
1WenotethatFigure3alsoworksasanexamplefortheGSES
implementationinthefollowingsection.Theonlydifferenceisthat GSESdoesnotusethenotionof“(un)satisfiedvertex”orSTEPEXEC.experimentthatthisshiftoffocussignificantlyimprovesthe Module4:Graph-basedModulesforGSES
efficiencyofSES.Westartbypresentingthefollowingcru-
cial theorem that provides a graph-based approach to com- 1 AuxillaryinformationX isamapX :V →[0,|V|),
whichrecordslp(v)foreveryvertexv;
putingthecostofaTPG.
Given a TPG G and a vertex v ∈ V, let lp(v) denote 2 X initonLine1ofAlgorithm2isempty;
thelongestpathamongthelongestpathsfromeveryvertex 3 FunctionBRANCH(GS =(V,E 1,(S E2,N E2)),X)
vi,i∈AtovertexvonG and|lp(v)|denoteitslength. 4 if∃(u,v)∈S E2 :X[u]≥X[v]then
0 5 return(X,0,(u,v));
Theorem 9. When we execute a TPG, every vertex v is
markedassatisfiedinthe|lp(v)|thiterationofthewhile-loop 6
fixallswtichableedgesinGS;
of EXECinProcedure1. 7 return(X,0,NULL);
8
FunctionHEURISTIC(GS,X)
Proof. We induct on iteration t and prove that all vertices 9 X′ ←lp-valuesofallverticesinV onred(GS);
av tiw onit .h In|lp th(v e) b| a=
se
t caa sr ee
,
{m va ir ,k ied ∈as As }at ais refie td hein vet rh te ict et sh wite itr h- 10 return((cid:80) i∈AX[v zi i],X′);
0
|lp(v)| = 0 and are marked as satisfied in the 0th itera-
tion. In the inductive step, we assume that, by the end of
the (t − 1)th iteration, all vertices v with |lp(v)| < t are Proof. Assumption A1 holds by design. Assumption A2
satisfied,andallverticesv with|lp(v)| ≥ tareunsatisfied. holdsbecauseofCorollary10.
Then,inthetth iteration,everyvertexv with|lp(v)| = tis
marked as satisfied because all of its in-neighbors v′ have Remark 5. ESES terminates when all vertices are satis-
|lp(v′)| < |lp(v)| = tandarethussatisfied.Foreveryver- fied, which is possible only when all Type 2 edges are
tex v with |lp(v)| > t, the vertex right before v on lp(v), non-switchable. This means that ESES has to expand on
denoted as v′, has |lp(v′)| = |lp(v)|−1 ≥ t and is thus all switchable edges before getting a solution. In con-
unsatisfiedonLine17.Thus,everyvertexvwith|lp(v)|>t trast,GSEScanhaveanearlyterminationwhenfixingall
hasatleastonein-neighborunsatisfiedandthusremainsun- switchableedgesdoesnotchangeanylongestpaths.
satisfied.Therefore,thetheoremholds.
Experiment
Hence,thelastvertexvi ofeveryagenti∈Aismarked
zi Weuse4mapsfromtheMAPFbenchmarksuite(Sternetal.
assatisfiedinthe|lp(vi )|thiteration,namelythetraveltime
zi 2019),showninFigure4,with6agentgroupsizespermap.
ofagentiis|lp(vi )|.Wethusgetthefollowingcorollary.
zi Regarding each map and group size configuration, we run
Corollary10. GivenaTPGG,cost(G)=(cid:80) |lp(vi )|. the algorithms on 25 different, evenly distributed scenarios
i∈A zi
(start/goallocations)with6trialsperscenario.Wesetarun-
Aninterestingobservationisthat,iflp(u) < lp(v)fora
timelimitof90secondsforeachtrial.Ineachtrial,weex-
givenTPGG,thenaddingedge(u,v)toG doesnotchange
ecutetheTPGconstructedfromanoptimalMAPFsolution
its cost since adding (u,v) does not change any longest
planned by a k-Robust MAPF solver k-Robust CBS (Chen
paths.Wethusgetthefollowingcorollarythatisusefullater.
etal.2021)withk = 1.Ateachtimestepoftheexecution,
Corollary 11. Given a STPG GS, we compute lp(v) on each agent that has not reached its goal location is subject
red(GS). For any switchable edge with lp(u) < lp(v), toaconstantprobabilitypofdelay.Whenadelayhappens,
fixingitdoesnotchangethepartialcostofGS. we draw a delay length ∆ uniformly random from a range
[10,20],constructaSTPGasinConstruction1,andrunour
Weadoptthefollowingwell-knownalgorithmtocompute
replanningalgorithms.Wealsodevelopabaselinethatuses
lp(v) on a given deadlock-free TPG G = (V,E ,E ): (1)
1 2 k-Robust CBS to find the new optimal solution (that takes
Set lp(v) = 0,∀v ∈ V. (2) Compute a topological sort of
intoaccountthedelaylength∆)whenthedelayhappens.
all vertices in V. (3) For each vertex v in the topological
We implement all algorithms in C++2 and run experi-
order,wesetlp(u)=max{lp(u),lp(v)+1}foreveryout-
mentsonaserverwitha64-coreAMDRyzenThreadripper
neighboru(namely(v,u)∈E ∪E ).Thetimecomplexity
1 2 3990Xand192GBofRAM.
ofthislongest-pathalgorithmisO(|V|+|E ∪E |).
1 2
Withthisalgorithm,wespecifythegraph-basedmodules Efficiency Figure 4 compares the runtime of ESES and
inModule4.InGSES,X recordslp(v)foreveryvertexv ∈ GSES with replanning using k-Robust CBS. In all cases,
V and is updated by the HEURISTIC module. Since, with GSESrunsthefastest.Mostremarkably,ontherandomand
X, HEURISTIC can directly compute the partial cost of a warehousemaps,theruntimeofGSESisconsistentlybelow
givenSTPG,GSESdoesnotuseanygvalues.TheBRANCH 1secondanddoesnotincreasesignificantlywhenthenum-
modulechoosesaswitchableedge(u,v)withX[u]≥X[v] berofagentsincreases,suggestingthepotentialofGSESfor
tobranchon.Ifnosuchedgeexists,then,byCorollary11, real-timereplanningapplications.
fixingallswitchableedgesproducesaTPGwiththesame
cost as the current partial cost. Thus, GSES fix all such
2OurSEScodeisavailableathttps://github.com/YinggggFeng/
Switchable-Edge-Search. The modified k-Robust CBS code that
edgesandterminatesinthiscase.
considers delays is available at https://github.com/nobodyczcz/
Proposition12. Module4satisfiesAssumption1. Lazy-Train-and-K-CBS/tree/wait-on-start.Figure4:RuntimeofESES,GSES,andk-robustCBS.Thedashedlinesrepresentthemeanofruntime,andtheshadedareas
denotethe0.4to0.6quantilerange.Fortrialsthatexceedthe90-secondtimelimit,wecountitas90seconds.
GSES runs significantly faster than ESES. This is because
the longest paths used in GSES defines a simple but ex-
tremely powerful early termination condition (see Remark
5), which enables GSES to find an optimal solution after a
very small number of node expansions. Figure 5 compares
thenumberofsearchnodesofESESandGSES,whereex-
plorednodesarenodespoppedfromthepriorityqueue,and
prunednodesarenodesprunedbyCYCLEDETECTION.The
gap between the red and grey lines (and the gap between
the purple and blue lines) indicates the effectiveness of cy-
cledetectionforpruningunnecessarysearchnodes.Thegap
Figure5:NumbersofnodesexploredandprunedbyESES between the grey and blue lines indicates the effectiveness
andGSESonthewarehousemap.Dashedlinesrepresentthe ofearlyterminationasdescribedinRemark5.
mean values. Shaded area between two lines for the same
algorithmindicatestheportionofprunednodes. Improvement of Solution Cost Figure 6 measures the
cost of our replanned solution, in comparison to the non-
replannedsolutionproducedbytheoriginalTPGandthere-
plannedsolutionproducedbyk-RobustCBS.Westressthat
ComparingESESandGSES WeobservefromFigure4 our solution is guaranteed to be optimal, as proven in pre-
that,althoughESESandGSESadoptthesameframework, vious sections, upon sticking to the original location-wiseFigure 6: Mean costs (from the locations where the delays happened to the goal locations) of the non-replanned, GSES-
replanned,andK-Robust-CBS-replannedsolutions.Themeansaretakenacrossalltrialsforalldifferentnumbersofagents.
paths,whilek-RobustCBSfindsanoptimalsolutionthatis Proposition2issimilartoLemma4in(Ho¨nigetal.2016)
independent of the original paths. Therefore, the two algo- withdifferentterms.Weincludeaproofforcompleteness.
rithmssolveintrinsicallydifferentproblems,andtheresults
Proposition2(Collision-Free). ExecutingaTPGdoesnot
hereserveprimarilyforaquantitativeunderstandingofhow
leadtocollisionsamongagents.
much improvement we can get by changing only the pass-
ing orders of agents at different locations. Figure 6 shows
Proof. According to Procedure 1, we need to show that,
thatthecostimprovementdependsheavilyonthemaps.For when a vertex vi is marked as satisfied [Line 18], moving
example,oursolutionshavecostssimilartothegloballyop- k
agentitoitskth locationli doesnotleadtocollisions.As-
timal solutions on the random map, while the difference is k
sumetowardscontradictionthatagentiindeedcollideswith
largerontheLak303dmap.
anotheragentjattimestept.Letvi andvj bethelatestsat-
k s
isfied vertices for agents i and j, respectively, after the tth
Conclusion
iterationofthewhile-loop.Ifiandjcollidebecausetheyare
We proposed Switchable Edge Search to find the optimal atthesamelocation,thenli =lj,indicatingthateitheredge
passing orders for agents that are planned to visit the same (vi ,vj)oredge(vj ,vk i)iss inE .Butthisisimpossible
location. We developed two implementations based on ei- k+1 s s+1 k 2
ther execution (ESES) or graph (GESE) presentations. On asneitherv ki +1norv sj +1issatisfied.
the random and warehouse maps, the average runtime of If they collide because j leaves a location at timestep t,
GSESisfasterthan1secondforvariousnumbersofagents. and i enters the same location at timestep t, then vi and
k
On harder maps (Paris and game maps), it also runs faster vj are marked as satisfied exactly at the tth iteration with
s
thanreplanningwithak-RobustCBSalgorithm. li = lj ,indicatingthateither(vi,vj)or(vj ,vi )is
k s−1 k s s+1 k−1
inE .Butthisisalsoimpossibleasneithervi norvj was
Appendix:ProofsforSection3 2 k s+1
satisfiedbeforethetthiteration.
WerelyonthefollowinglemmatoproveProposition1.
Lemma A. For every tuple (li,ti) in every path p ∈ P, Lemma 3 (Deadlock ⇐⇒ Cycle). Executing a TPG en-
k k i
thecorrespondingvertexvi inG issatisfiedafterthe(ti)th countersadeadlockifftheTPGcontainscycles.
k k
iterationofthewhile-loopof EXECinProcedure1.
Proof. IfaTPGG hasacycle,executingitwillencountera
Proof. Weinductonthewhile-loopiterationtandprovethat deadlockasnoverticesinthecyclecanbemarkedassatis-
anyvertexvi withti ≤tissatisfiedafteriterationt.When fied.IfexecutingGencountersadeadlockinthetthiteration
k k
t = 0,thisholdsbecauseof INIT .Assumethatallver- ofthewhile-loop,weprovethatG hasacyclebycontradic-
EXEC
tices vi with ti ≤ t−1 are satisfied after iteration t−1. tion. Let V′ denote the set of unsatisfied vertices, which is
k k
At iteration t, for Type 1 edge (vi ,vi), vi is satisfied non-emptybyDefinition4.IfG isacyclic,thenthereexists
k−1 k k−1
asti < ti ≤ t.ForanyType2edge(vj,vi),vj isalso atopologicalorderingofV′,andSmustcontainthefirstver-
k−1 k s k s
satisfiedastj < ti ≤ tbyDefinition3.Thisshowsthatall texinthetopologicalorderingasallofitsin-neighborsare
s k satisfied,contradictingthedeadlockconditionofS =∅.
in-neighborsofvi aresatisfiedafteriterationt−1,thusvi
k k
issatisfiedafteriterationt.
Lemma4(Deadlock-Free). IfaTPGisconstructedfroma
Proposition1(Cost). cost(G)≤cost(P). MAPFsolution,thenexecutingitisdeadlock-free.
Proof. Lemma A implies that the last vertex vi of every Proof. If a deadlock is encountered, then the execution
zi
agent i is satisfied after the (ti )th iteration, i.e., when exe- would enter the while-loop for infinitely many iterations,
zi
cutingG,thetraveltimeofeveryagentiisnogreaterthan andcoststrictlyincreasesineachiteration.Thus,cost(G)=
ti .Thus,thepropositionholds. ∞.Yet,cost(P)isfinite,contradictingProposition1.
ziAcknowledgement of the International Symposium on Combinatorial Search,
151–159.
The research at Carnegie Mellon University was supported
by the National Science Foundation (NSF) under Grant Su,Y.;Veerapaneni,R.;andLi,J.2024. BidirectionalTem-
2328671.Theviewsandconclusionscontainedinthisdoc- poral Plan Graph: Enabling Switchable Passing Orders for
umentarethoseoftheauthorsandshouldnotbeinterpreted More Efficient Multi-Agent Path Finding Plan Execution.
asrepresentingtheofficialpolicies,eitherexpressedorim- In Proceedings of the AAAI Conference on Artificial Intel-
plied,ofthesponsoringorganizations,agencies,ortheU.S. ligence.
government. Wurman, P. R.; D’Andrea, R.; and Mountz, M. 2007. Co-
ordinatingHundredsofCooperative,AutonomousVehicles
References inWarehouses. InProceedingsoftheAAAIConferenceon
Atzmon, D.; Stern, R.; Felner, A.; Sturtevant, N. R.; and ArtificialIntelligence,1752–1759.
Koenig, S. 2020. Probabilistic Robust Multi-Agent Path
Finding. InProceedingsoftheInternationalConferenceon
AutomatedPlanningandScheduling,29–37.
Atzmon, D.; Stern, R.; Felner, A.; Wagner, G.; Barta´k, R.;
and Zhou, N. 2018. Robust Multi-Agent Path Finding. In
ProceedingsoftheInternationalSymposiumonCombinato-
rialSearch,2–9.
Berndt,A.;vanDuijkeren,N.;Palmieri,L.;andKeviczky,T.
2020. A Feedback Scheme to Reorder A Multi-Agent Ex-
ecution Schedule by Persistently Optimizing a Switchable
ActionDependencyGraph. ArXiv.
Chen, Z.; Harabor, D. D.; Li, J.; and Stuckey, P. J. 2021.
Symmetry Breaking for k-Robust Multi-Agent Path Find-
ing. In Proceedings of the AAAI Conference on Artificial
Intelligence,12267–12274.
Ho¨nig, W.; Kiesel, S.; Tinka, A.; Durham, J. W.; and Aya-
nian, N. 2019. Persistent and Robust Execution of MAPF
Schedules in Warehouses. IEEE Robotics and Automation
Letters,1125–1131.
Ho¨nig,W.;Kumar,T.K.S.;Cohen,L.;Ma,H.;Xu,H.;Aya-
nian, N.; and Koenig, S. 2016. Multi-Agent Path Finding
withKinematicConstraints. InProceedingsoftheInterna-
tional Conference on Automated Planning and Scheduling,
477–485.
Ho¨nig,W.;Preiss,J.A.;Kumar,T.K.S.;Sukhatme,G.S.;
and Ayanian, N. 2018. Trajectory Planning for Quadrotor
Swarms. IEEETransactionsonRobotics,856–869.
Kou,N.M.;Peng,C.;Ma,H.;Kumar,T.K.S.;andKoenig,
S.2020. IdleTimeOptimizationforTargetAssignmentand
Path Finding in Sortation Centers. In Proceedings of the
AAAIConferenceonArtificialIntelligence,9925–9932.
Ma, H.; Kumar, T. S.; and Koenig, S. 2017. Multi-Agent
Path Finding with Delay Probabilities. In Proceedings of
theAAAIConferenceonArtificialIntelligence,3605–3612.
Mannucci,A.;Pallottino,L.;andPecora,F.2021. OnProv-
ably Safe and Live Multirobot Coordination With Online
GoalPosting. IEEETransactionsonRobotics,37(6):1973–
1991.
Silver,D.2005. CooperativePathfinding. InProceedingsof
theAAAIConferenceonArtificialIntelligenceandInterac-
tiveDigitalEntertainment,117–122.
Stern,R.;Sturtevant,N.R.;Felner,A.;Koenig,S.;Ma,H.;
Walker,T.T.;Li,J.;Atzmon,D.;Cohen,L.;Kumar,T.K.S.;
Boyarski, E.; and Bartak, R. 2019. Multi-Agent Pathfind-
ing:Definitions,Variants,andBenchmarks. InProceedings