MGCBS: An Optimal and Efficient Algorithm for Solving Multi-Goal
Multi-Agent Path Finding Problem
MingkaiTang1, YuanhangLi1, HongjiLiu1, YingbingChen1, MingLiu2 and LujiaWang2
1HongKongUniversityofScienceandTechnology
2HongKongUniversityofScienceandTechnology(Guangzhou)
{mtangag,yliog,hliucq,ychengz}@connect.ust.hk,{eelium,eewanglj}@hkust-gz.edu.cn
Abstract
1
Withtheexpansionofthescaleofroboticsapplica-
tions,themulti-goalmulti-agentpathfinding(MG-
MAPF) problem began to gain widespread atten-
tion. Thisproblemrequireseachagenttovisitpre-
assignedmultiplegoalpointsatleastoncewithout
conflict. Some previous methods have been pro-
posed to solve the MG-MAPF problem based on 2
Decoupling the goal Vertex visiting order search
andtheSingle-agentpathfinding(DVS).However, 3
thispaperdemonstratesthatthemethodsbasedon
DVScannotalwaysobtaintheoptimalsolution. To Figure1:AnexampleoftheMG-MAPFwiththreeagents.Thegrey
obtain the optimal result, we propose the Multi- cellsrepresenttheimpassableareasoccupiedbyobstacles.Thesolid
Goal Conflict-Based Search (MGCBS), which is circlesindicatethestartpointoftheagent,andthenumbermarked
based on Decoupling the goal Safe interval visit- insideistheagentID.Thedottedcirclesrepresentthegoalpointsof
ing order search and the Single-agent pathfinding theagentinthecorrespondingcolor. Thecoloredarrowmarksthe
paththatcanvisitallgoalpointsfromthestartpointoftheagent.
(DSS).Additionally,wepresenttheTime-Interval-
SpaceForest(TISForest)toenhancetheefficiency
ofMGCBSbymaintainingtheshortestpathsfrom
problemcanbemodeledasamulti-goalmulti-agentpathfind-
any start point at any start time step to each safe
ing (MG-MAPF) problem. The solver of MG-MAPF needs
intervalatthegoalpoints. Theexperimentdemon-
to calculate a collision-free path for each agent so that the
stratesthatourmethodcanconsistentlyobtainop-
agent can visit each of its goals at least once in an arbitrary
timal results and execute up to 7 times faster than
visitingorder. Figure1showsanexampleofMG-MAPF.
thestate-of-the-artmethodinourevaluation.
SolvingtheMG-MAPFproblemoptimally,evenindegen-
eratescenarios,canbetime-consuming. Theopenlooptrav-
1 Introduction eling salesman problem [Applegate et al., 2011], which is
Withthedevelopmentoftheroboticindustry,themulti-agent widely recognized as an NP-hard problem, can be reduced
system has attracted more and more attention [Salzman and to a subset of the MG-MAPF that only considers one agent.
Stern, 2020;Sternetal., 2019;Tjiharjadietal., 2022]. One Furthermore, the classical MAPF problem, which is proved
of the critical problems to be solved is the multi-agent path tobeNP-hard[YuandLaValle,2013],canalsobereducedto
finding(MAPF)problem. TheMAPFproblemrequiresplan- asubsetoftheMG-MAPF,whichconsidersonlyonegoalfor
ningaconflict-freepathforeachagentfromitsstartingpoint each agent. Therefore, it can be concluded that the problem
to its goal point. MAPF is involved in many practical ap- ofoptimallysolvingtheMG-MAPFisNP-hard.
plication scenarios in the real world, such as aircraft tow- SomemethodshavebeenproposedtosolvetheMG-MAPF
ing vehicles [Morris et al., 2016], video games [Ma et al., problembyDecouplingthegoalVertexvisitingordersearch
2017b] and traffic management [Choudhury et al., 2022; and the Single-agent pathfinding (DVS), such as the Hamil-
DresnerandStone,2008]. tonian Conflict-based Search [Surynek, 2021], which is the
In the MAPF problem, each agent can be assigned only current state-of-the-art (SOTA) method for the MG-MAPF
onegoalpoint. Thissettingdoesnotmeettheneedsofsome problem. We named the MG-MAPF solver that is based on
large-scalerobotapplications. Forexample,inanautomated DVS as the DVS method. To find the shortest path to visit
warehousescenario,eachrobotmayneedtodelivermultiple all goals for a single agent under constraints, DVS methods
goodsinonetrip. Inthiscase,therobotneedstobeprovided search a goal vertex visiting order iteratively. At each itera-
with a collision-free path with multiple goal points. This tion, an unvisited goal is enumerated and tried to append to
4202
rpA
03
]AM.sc[
1v81591.4042:viXrathe end of the order. The corresponding path is constructed needs to satisfy some precedence constraints. The Multi-
byconcatenatingtheshortestpathsunderconstraintsbetween Agent Simultaneous Multi-Goal Sequencing and Path Find-
twoneighborgoalsonthegoalvertexvisitingorder. ing(MSMP)problem,whichrequiresassigninggoalstoeach
However, this paper provides evidence through the case agent before pathfinding, was solved in [Ren et al., 2021;
study and experiment that DVS methods cannot always ob- Ren et al., 2022]. However, the settings of the above prob-
taintheoptimalresultfortheMG-MAPFproblem. Weintro- lemsdifferfromtheMG-MAPFproblem,makingtheirmeth-
duceanewapproach, theMulti-GoalConflict-BasedSearch odsnotdirectlyusableintheMG-MAPFproblem.
(MGCBS), to solve the MG-MAPF problem optimally and TheMG-MAPFproblemwasfirstlydiscussedin[Surynek,
efficiently. IncontrasttotheDVSmethod,MGCBSisbased 2021], and two solutions were proposed: Hamiltonian
onDecouplingthegoalSafeintervalvisitordersearchandthe Conflict-based Search (HCBS) and Satisfiability Modulo
Single-agentpathfinding(DSS). Thesafeinterval(SI)refers Theories Conflict-based Search (SMT-HCBS). The HCBS,
to a safe configuration with a maximal time period, where which can be categorized as a DVS method, typically runs
the ‘maximal’ means that if this time period were to be ex- faster than SMT-HCBS due to the leverage of its heuristic
tended by a time step in any direction, the collision would function. However,ithasroomforimprovementinoptimal-
occur[PhillipsandLikhachev,2011]. Thegoalsafeinterval ityandefficiency. Foroptimality,ourmethodimprovesupon
(GSI)referstothesafeintervalatthegoalvertex. Formally, HCBS by using DSS. For efficiency, our method uses the
let([tSI,tSI],sSI)betheSIatvertexsforthemaximaltime TIS Forest to reduce redundant calculations of the multiple
0 1
interval[tSI,tSI]. ([tSI,tSI],sSI)isanGSIiffsSI isagoal queriesoftheshortestpathforeachagent.
0 1 0 1
vertex. WenametheMG-MAPFsolverthatisbasedonDSS
as the DSS method. The DSS method searches a GSI visit- 3 ProblemDefinition
ingordersothatatleastoneGSIisvisitedateachgoal. The
The MG-MAPF problem is defined as follows. A set of
correspondingpathisobtainedbyconcatenatingtheshortest
agentsA={a ,a ,...,a }canmoveonanundirectedgraph
path to visit each GSI following the order. In addition, we 1 2 k
G(V,E) where each edge is of unit length. Let n be the
proposeadatastructure,theTime-Interval-SpaceForest(TIS i
number of goals of a . The task of agent a can be de-
Forest), toreduceredundantcalculationsofmultiplequeries i i
scribed as Ω = {s ,g } where s is the start vertex and
inthelow-levelsolverofMGCBSbymaintainingtheshortest a i i i
g = {g1,g2,...,gni}denotesthegoalverticesoftheagent.
pathsandtheirlengthfromanystartvertexatanystarttime i i i i
Ateachtimestep,agentscanchoosetowaitatthecurrentver-
toeachGSI.Overall,themaincontributionsofthispaperare
texormovetoanadjacentvertex. Theagentwillstayatone
asfollows.
of its goal vertices after completing all movements without
1. WepresentthattheDVSmethodscannotalwaysobtain incurringanyadditionalcost. ThesolutiontotheMG-MAPF
theoptimalsolutionbycasestudyandexperiment. problemisacollectionofagents’collision-freepaths,where
the agent can start from its start vertex and visit all its goal
2. We introduce a two-level approach, MGCBS, to solve
verticesatleastoncewitharbitraryvisitingorder. Acollision
MG-MAPF, achieving high computational efficiency in
occurswhentwoagentsarelocatedinthesamevertex(vertex
obtainingoptimalsolutions.
conflict)ormovingalongthesameedge(edgeconflict)atthe
3. WepresenttheTISForest,whichmaintainstheshortest sametimestep. Thecostofanagent’spathisthetotaltime
pathstoeachGSIfromanystartvertexatanystarttime, stepsusedtovisitallgoals.Weusethesummationofthecost
minimizingredundantcalculationsofmultiplequeries. (SOC)astheobjectiveoftheproblem,meaningthatthecost
4. We provide the theoretical proof of the optimality and of the solution is the summation of the cost of each agent’s
completenessofMGCBS. path.
5. We conducted a comprehensive experimental evalua-
4 CaseStudy
tion and compared our proposed method with the cur-
rentSOTAmethod. ComparedwiththeSOTAmethod, ThissectionwillprovideanexampleoftheMG-MAPFprob-
ourmethodcanconsistentlyobtaintheoptimalsolution lemtoillustratethattheDVSmethodisnotoptimal.
whileachievingamaximumspeedupratioofupto7in Theorem1. Theoptimalityofthemethodsbasedondecou-
ourevaluation. pling the goal vertex visiting order search and single-agent
pathfindingcannotbeguaranteedintheMG-MAPFproblem.
2 RelatedWork
Proof. AnexamplethattheDVSmethodcannotfindtheop-
Some variants of the MAPF problem, which consider more timalsolutionisshowninFigure2. Inthisexample,agent2
than one goal point for an agent, have recently been stud- onlyhasonepossiblegoalvertexvisitingorder, whileagent
ied. The Multi-Agent Pickup-and-Delivery (MAPD) prob- 1 has two possible situations. If agent 1 chooses to go to
lem and its variants, which require the agent to pick up g1 before going to g2, the lower bound of the total cost is
1 1
the object in one location and deliver it to another loca- 207+7 = 214. Ifagent1choosestotraveltog2 beforeg1,
1 1
tion, were studied in [Cˇa´p et al., 2015; Ma et al., 2017a; thelowerboundofthetotalcostwillbe111+7=118. Now
Xu et al., 2022]. In [Zhang et al., 2022], the Multi-Agent weconsidertoadoptthesecondchoice. Inthiscase,anedge
PathFindingwithPrecedenceConstraints(MAPF-PC)prob- conflictbetweenvertexDtovertexE occursatthetimestep
lem was proposed, where the visiting order of goal points 6, which is in the path of agent 1 from g2 to g1. Based on
1 1thedefinitionofDVS,thepathfromg2tog1maybeadjusted
1 1
toavoidtheconflict. Forexample,inHCBS,constraintsare
A B D
createdonthepathofg2 tog1 ofagent1. However,thepath
1 1
ofagent1fromthestartvertexs 1 tothegoalvertexg 12 will 100Nodes
remainunchangedbecausethetimestepofconflictsurpasses E
the time step of reaching g2. One of the minimal-cost solu-
1
tionsgeneratedbytheDVSmethodisthatagent1goestog2
1 C F
before g1, and agent 2 remains at vertex C for 8 time steps
1
togivepathstoagent1beforeproceedingdirectlytog1. The
2 Figure2: AnexampleoftheMG-MAPFwithtwoagentsisrepre-
totalcostis111+15 = 126. However,thereexistsanalter-
sentedinaplanargraph.Theagent1startsatvertexBandhastwo
nativesolutionwithalowertotalcostthatdeviatesfromthe
goals located at vertex A and vertex E. The agent 2 starts at the
shortestpathforagent1startingfroms 1 towardsg 12. Agent vertexCandonlyhasonegoalatvertexF.
1remainsatvertexs for2timesteps. Subsequently,itpro-
1
ceeds to vertex g2 and then travels to vertex g1. In this so-
1 1
lution, the total cost is 113+7 = 120, which is better than 5.1 MGCBS
the minimal cost solution given by the DVS method among
TheMGCBSisatwo-levelsolverthatcaneffectivelycalcu-
allgoalvertexvisitingorders.
latetheoptimalpathforeachagenttovisitallgoalswithout
conflict. The high-level solver employs a constraint tree to
ThereasonwhytheDVSmethodisnotoptimalisbecause
manage conflicts between agents, while the low-level solver
it incorrectly assumes that the path reaching the goal vertex
usesanA*-basedsolvertofindthebestGSIvisitingorder.
earlierisalwaysbetterthanthepathreachingitlater. Under
thegivengoalvertexvisitingorder,itonlygeneratesonepath
High-levelSolver
to reach each goal at the earliest possible time step. How-
The high-level solver of the MGCBS is an extension of the
ever,insomecases,theoptimalpathmightnotreachasubset
high-levelsolveroftheconflict-basedsearch(CBS)[Sharon
of goal vertices at the earliest possible time step. The DVS
etal.,2015]. Itbuildsaconstrainttreetosolveconflictsbe-
methodmissesthesepaths.
tweendifferentagents. Theconstraintsconsistofvertexcon-
Toobtaintheoptimalpath,weproposetosearchbasedon
straints, which prevent an agent from occupying a vertex at
DSS,whichonlyassumesthatthepathreachingtheGSIear-
a specific time step, and edge constraints, which prohibit an
lierisalwaysbetterthanthepathreachingitlater. Incontrast
agentfromtraversinganedgeatagiventimestep. Eachcon-
to the DVS method, DSS can obtain multiple paths under a
strainttreenodesavestheTISForests,theconstraintset,each
givengoalvertexvisitingorderwhentherearemultipleGSIs
agent’s path, and the value of SOC. The implementation of
atsomegoalvertices.Consideringthesamecaseabove,when
theTISForestwillbediscussedinsubsection5.2.
thepathbetweeng2 tog1 isadjustedandcausesconflictsat
1 1 Inthehigh-levelsolver,adistancetableDisbuilttostore
g2atatimesteplargerthantheearliesttimesteptoreachg2,
1 1 the distance from each vertex to each goal vertex for each
morethanoneGSIwillappearing2,providingthepotential
1 agent, which will be used in the low-level solver. It is ob-
tosearchthenon-earliestpathtog2froms .
1 1 servedthattherearenovertexconstraintsattherootnodeof
It is observed that the DVS method is more likely to ob-
the constraint tree, causing only one GSI with a whole time
tain a non-optimal result in crowded scenarios. On the one
interval at each goal vertex. Therefore, D can be built by
hand, in scenarios with few agents and obstacles, the agent
queryingtheTISForestattherootnodeoftheconstrainttree.
cantemporarilymovetotheneighborvertextogivepathsto
Thedifferencesbetweenthehigh-levelsolverofbasicCBS
another agent and return to the original vertex once another
and MGCBS are the operations on the TIS Forest and the
agenthaspassed. Inthisway,theDVSmethodcangenerate
distance table. At the beginning of the high-level solver of
a path from an earlier SI to a later SI without missing any
MGCBS,theTISForestsintherootnodearebuiltandused
potential optimal paths. On the other hand, in crowded sce-
to construct the distance table. Then, the TIS Forests, the
narios,theagentmaynotbeabletoreturntotheoriginalver-
distance table, and the agents’ task information are fed to
texquickly. Itmakestheagentinfeasibleforsometimesteps
the low-level solver to calculate the path that visits all goal
inthelaterSI,makingtheDVSmethodmisssomepotential
verticeswithoutconsideringotheragents. Whenanewcon-
optimalpaths,whichcanbeobtainedbytheDSSmethod.
strainttreenodeisgenerated,itsTISForestsarecopiedfrom
itsparentnode,andoneofthemisreconstructedbythenew
5 Methodology
constraintset.ThenewTISForest,thedistancetable,andthe
We propose an optimal and efficient two-level method, the agent’s task information are put into the low-level solver to
MGCBS,fortheMG-MAPFproblembasedonDSS.Toim- computetheshortestpathundertheconstraints.
prove the efficiency of the search process, we introduce the Algorithm1showsthepseudocodeofthehigh-levelsolver.
TISForestdatastructuretoreduceredundantcalculationsof In lines 1 ∼ 9, the root node is constructed and put into the
multiplequeries. ATISForestcorrespondstoanagentandis openset. TheTISForestsarebuiltinline4,andthedistance
composed of several Time-Interval-Space Trees (TIS Tree), table is constructed in line 5. The initial path of each agent
which corresponds to a specific GSI of the agent. The TIS is calculated in line 6. In lines 11 ∼ 16, the minimum cost
Treecanbeusedtogettheshortestpathanditslengthtothe node is found and checked whether it contains a conflict. If
correspondingGSIfromanystartvertexatanystarttimestep. no,thefinalsolutionisfound. Otherwise,theconstraintsareAlgorithm1MGCBS Algorithm2MGCBS
high low
Input:agentsA,graphG Input: TIS Forest tisf, distance table D, agent a, constraint set
1: R←newnode cons
2: R.cons←∅ 1: R←newnode
3: for eachagentainA do 2: R.L←∅
4: R.tisf[a]←BuildTISForest(G,a,∅) 3: R.p←GetEarliestSI(a.start,cons)
5: D[a ]←BuildDistanceTable(R.tisf[a]) 4: R.g←0
i
6: R.paths[a]← 5: R.h←Cost(GetMST(D,R.L,(R.p).v))
MGCBS (R.tisf[a],D[a],a,∅)//Algorithm2 6: R.f ←R.g+R.h
low
7: endfor 7: OPEN,CLOSED←{R},∅
8: R.cost←calculatetheSOCofR.paths. 8: whileOPEN ̸=∅do
9: OPEN ←{R} 9: N ←minimumf nodefromOPEN.
10: whileOPEN ̸=∅do 10: OPEN ←OPEN\{N}
11: N ←minimumcostnodefromOPEN. 11: CLOSED←CLOSED∪{N}
12: OPEN ←OPEN\{N} 12: ifN.Lcontainsallgoalsofathen
13: F ←theearliestcollisioninN 13: order←GenerateGoalVisitedOrder(N)
14: ifF isNonethen 14: path←GeneratePath(tisf,order)
15: return N.paths 15: return path
16: endif 16: endif
17: C←buildconstraintsfromF 17: forqinGetAllPotentialGSI(a,cons,N.L)do
18: forconstraintc=(a,t,v)/(a,t,v ,v )inCdo 18: M ←GetNode(OPEN,CLOSED,N.L∪{q.v},q)
i j
19: P ←newnode 19: ifM ∈/ CLOSEDthen
20: P.tisf,P.paths←N.tisf,N.paths 20: tist←GetTISTree(q,tisf)
21: P.cons←N.cons∪c 21: len←GetPathLength(tist,(N.p).v,N.g)
22: P.tisf[a]=BuildTISForest(G,a,P.cons) 22: ifM ∈OPEN then
23: P.paths[a]←MGCBS (P.tisf[a], 23: M.g←min(M.g,N.g+len)
low
D[a],a,P.cons)//Algorithm2 24: M.f ←M.g+M.h
24: ifP.paths[a]isnotNULLthen 25: else
25: P.cost←calculatetheSOCofP.paths 26: M.g←N.g+len
26: OPEN ←OPEN ∪{P} 27: M.h←Cost(GetMST(D,M.L,(M.p).v))
27: endif 28: M.f ←M.g+M.h
28: endfor 29: OPEN ←OPEN ∪{M}
29: endwhile 30: endif
30: return NULL 31: endif
32: endfor
33: endwhile
builtaccordingtotheearliestconflict. Inlines19∼27,new 34: return NULL
nodesareconstructedforeachconstraint,andthecorrespond-
ing constraint is added to the constraint set. The TIS Trees
thatarerelatedtotheconstrainedagentarereconstructedac- referstothevertexcorrespondingtotheq. Itmeansthatthe
cording to the new constraint set in line 22. The low-level agent moves from the p.v at the start time step g to the GSI
solveriscalledtobuildthepathofasingleagentinline23. q, whosevertexisanunvisitedgoalvertexq.v. Thetransfer
costistheshortestpathlengthfromthep.v attimestepg to
Low-levelSolver theGISqundertheconstraintset. Itcanbedirectlyobtained
The low-level solver computes the shortest path for a sin- from the TIS Forest. Specially, if q.v is the final unvisited
gleagentunderconstraints,ensuringthateachgoalisvisited goal,onlythelatestGSIatq.vcanbechosenasthenextGSI
at least once based on DSS. The low-level solver comprises foravoidingconflictsaftertheagentfinishesatthefinalgoal.
twostages: theGSIvisitingordersearchstageandthepath- Thepath-generatingstageisexecutedwhentheminimum-
generatingstage. coststatethatvisitsallgoalsisfound. Webacktrackthefinal
The GSI visiting order stage search uses an A* solver for state to the initial state to get the GSI visiting order and use
the best GSI visiting order. The state in the search can be theTISForesttobuildthepathbasedontheorder.
representedby(L,p),whereListhevisitedgoalsetandpis Algorithm2showsthepseudocodeofthelow-levelsolver.
the SI where the agent is currently located. The cost of the In lines 1 ∼ 7, the initial node is initialized and put into the
state (L,p) is the length of the path that has visited all the openset,whiletheR.pistheearliestSIatthestartvertexof
goalsinLandiscurrentlylocatedinp. Lettheg bethecost theagent. Theheuristicvalueofthenodeiscalculatedbythe
valuewhichisthesameasthecurrenttimestep,thehbethe costoftheMSTinline5. Ateachiteration,thenodewiththe
heuristic value, and the f be the evaluation value. The cost minimumf valueispoppedfromtheopenset(lines9∼11).
oftheminimumspanningtree(MST)ofthecurrentlylocated IfthecurrentnodeN hasalreadyvisitedallgoals,extractthe
vertex and all unvisited goal vertices is used as the h. The GSI visiting order and then build the path (lines 12 ∼ 16).
distance table D can be utilized to construct the MST. Dur- Otherwise,allGSIatunvisitedgoalsisenumeratedwiththe
ingthesearch,thestate(L,p)cantransferto(L∪{q.v},q), exceptionofthelastunvisitedgoal,forwhichonlythelastest
where the q is a GSI whose vertex is not in L, and the q.v GSIisconsidered(lines17). LetqbethecurrentenumeratedEachnodeintheTISTreerepresentsasafeTISstate,con-
[5, ]
2 tainingtheTSstatesthattakethesamevertexsequenceasthe
1
5 [0, ] [1, ] shortestpathtotheseedGSI.Therefore,differentTSstatesin
aTISstatehavethesameshortestpathlengthtotheseedGSI.
2 [0,3] 2 [2, ] Wedefinethecostofthenodeastheshortestpathlengthof
6 2 [0,0]
3 5 2 theTSstatesintheTISstatetotheseedGSI.Theremightbe
morethanonenodeatavertexwhensomevertexconstraints
4 1 0 existatthevertex.
[1, ]
6 2 1 TheTISTreeisconstructedbyaDijkstra-basedalgorithm
3 [DIJKSTRA,1959]. Initially,wefindallmaximalTISstates
[0, ]
2 2 (i.e., SI) at each vertex and create a node for each of them.
[0,0] [0,0]
4 3 1 We refer to the node corresponding to the seed GSI as the
seed node. If the node is the seed node, its cost is set to
0; otherwise, its cost is set to +∞. At the beginning, all
Figure3:TheleftsubfigureshowsthegraphonwhichtheTISTree
nodes are put into an unvisited set U. At each iteration of
wasbuilt. ThenumberinthecircleisthevertexID.Therightsub-
figureshowstheTISTreewhoseseedGSIis[2,+∞]atvertex1. the search, the node with the minimum cost in U pops out
Theconstraintsetincludestwovertexconstraints,includingvertex and is used to improve the path of its neighbor through the
1attimestep1,andvertex5attimestep4. Theblockrepresents reverseedge. Specifically, let([t 0,t 1],v)betheTISstateof
thenodeinthetree,wherethenumberintheblockisthecostofthe thecurrentminimumcostnodenandcost(n)bethecostof
node. ThenumberundertheblockisthevertexID.Thebracketed n. Let v′ be a vertex that can take one action to transfer to
numberrepresentsthetimeintervaloftheTISstateofthenode.The v,i.e.,v′ ∈ Nbr(v)andNbr(v) = {v′|(v′,v) ∈ E}∪{v}.
arrowrepresentstheedgeoftheTISTreepointingfromtheparent
Now we consider how to improve the path of the nodes at
nodetothechildnode. Theself-pointarrowatvertices2and3in- v′ by ([t ,t ],v). We construct a TIS state set denoted by
dicateswaitingforonetimestep. 0 1
B at vertex v′, such that each TS state in the TIS state is
safe and can transfer to a TS state in ([t ,t ],v) at a time
0 1
step. Forexample,([t ,t ],v) = ([2,8],v)andhereisaver-
GSI. A node M is constructed where M.L = N.L∪{q.v} 0 1
tex constraint at vertex v′ at time step 3 and an edge con-
and M.p = q (line 18). The TIS Tree corresponding to q is
straintfromvertexv′ tovertexvattimestep6,theB willbe
filteredfromtheTISForestandusedtoobtainthepathlength
{([1,2],v′),([4,5],v′),([7,7],v′)}. We enumerate all nodes
from(N.p).vatthetimestepN.gtoq(lines20∼21). M is
at v′ and all TIS states in B. Let ([t′,t′],v′) be the TIS
updatedifitcanbeimprovedbyN (lines22∼30). 0 1
stateofthecurrentenumeratednoden′ and([tB,tB],v′)be
0 1
the TIS state in B. If cost(n′) > cost(n)+ 1 and [t′,t′]
5.2 Time-Interval-SpaceForest 0 1
can be fully covered by [tB,tB], the n′ can be improved
0 1
TheshortestpathlengthtotheGSIisfrequentlyqueriedinthe by setting n as its parent and cost(n′) = cost(n) + 1. If
low-levelsolver. IftheMGCBSemploystheA*algorithmto cost(n′) > cost(n)+1andonlyapartof[t′,t′]iscovered
0 1
obtain the path length, it will become time-consuming. Ob- by[tB,tB],n′willbedividedintoseveralnewnodesaccord-
0 1
servingthattheshortestpathlengthtoaspecificGSImaybe ingtothecoverage,andonlythenewnodewhosetimeinter-
queriedmultipletimesduringthesearch,weconsiderutiliz- valisfullycoveredby[tB,tB]canbeimprovedbyn. When
0 1
ingadatastructuretoreducetheredundantcomputation.Itis anodeneedstobedivided,theU isupdatedbydeletingthe
nottrivialbecausethestarttimeofeachqueryisunknownbe- originalnodeandaddingthenewnodes. Thesearchwillstop
forethesearchandcanonlybeobtainedafterthepathtothe whentheU isempty. Figure3showsanexampleoftheTIS
previous GSI is generated. Considering that the constraints Tree.
arerelatedtothetimestep,theoptimalpathofdifferentstart After the construction, the TIS Tree can be used to query
timestepsmightbediverse,makingithardtoreusetheresult theshortestpathfromanystartvertexatanystarttimetothe
oftheprevioussearch. seed GSI by the following steps. Firstly, we construct a TS
We propose TIS Forest to reduce redundant calculations. stateaccordingtothestarttimeandvertex.Secondly,wefind
EachTISForestcorrespondstoanagent.Itconsistsofseveral out the node whose TIS state contains the TS state. Finally,
TISTrees,eachcorrespondingtoaGSIoftheagent. TheTIS we backtrack this node to the seed node and construct the
Treemaintainstheshortestpathanditslengthfromanystart shortest path through the vertices of passed nodes. Further-
vertexatanystarttimetotheGSI.WenamethatGSIasthe more, we can get the shortest path length directly using the
seedGSIoftheTISTree. costofthenodefoundinthesecondstepwithoutbuildingthe
Let(t,s)beatime-spacestate(TSstate)representingthat pathexplicitly. Whenweneedtoobtaintheshortestpathor
the agent is located at the vertex s at the time step t. Let its length to a GSI by a TIS Forest, we can extract the TIS
([t ,t ],s) be a time-interval-space state (TIS state), rep- TreethatcorrespondstotheGSIanduseitforthequery.
0 1
resenting a collection of TS states at the same vertex, i.e., TheconceptofTISForestmayseemsimilartotheSIPPal-
([t ,t ],s) = {(t,s)|t ∈ [t ,t ]}. ATISstateissafeifand gorithm[PhillipsandLikhachev,2011]asboththeTISForest
0 1 0 1
only if it does not contain any TS states under vertex con- andtheSIPPalgorithmsearchbasedontimeintervals. How-
straints. ItshouldbenotedthattheSIisaspecialtypeofTIS ever, their underlying principles differ. The SIPP algorithm
state,whiletheTISstatedoesnotalwaysneedtobemaximal. utilizes a forward search, with each SI containing a singledominant time step, rendering all other time steps unimpor- Theorem2. MGCBSisanoptimalsolveroftheMG-MAPF
tantforthesearch. ThispropertyallowstheSIPPalgorithm problem.
toreducethetotalnumberofnodesduringthesearch.Incon-
Proof. In the low-level solver, the heuristic function is ad-
trast,theTISForestemploysabackwardsearch. Ontheone
missible and satisfies the consistency assumption according
hand, we cannot use a mechanism similar to the SIPP algo-
tothepropertyofMST.Theoptimalityofthelow-levelsolver
rithm to construct the TIS Forest because the precise goal-
canbeguaranteedbytheLemma3andtheoptimalityofA*
reachingtimestepisunknownbeforehand,andthedominant
[Hart et al., 1968]. According to the optimality of CBS and
timestepdoesn’texist. Ontheotherhand, theTISForestis
the low-levelsolver, the optimalityof MGCBS can beguar-
built by the principle that the shortest path to the seed GSI
anteed.
fromallTSstateswithinaTISstatehavethesamevertexse-
quence,andallTSstateswithinaTISstatecanbeexpanded
Theorem3. MGCBSisacompletesolveroftheMG-MAPF
simultaneouslyalongareverseedge.
problem.
6 TheoreticalAnalysis Proof. The completeness can be proven by following steps.
Firstly, based on the TIS forest design, if there is a feasible
Inthissection,wewillprovetheoptimalityandcompleteness
path r from one start/goal vertex u at time step t to reach
u
ofMGCBS.
one goal vertex v at time step t , there will not be a vertex
v
Lemma 1. For two TS states in the same SI, the minimum constraintonvertexvattimestept v. ATISTreemustexist,
completiontimeofthepathtovisitasetofgoalsatleastonce whoseseedGSIincludestimestept v atvertexv. Thisnode
from the earlier TS state will not exceed the time from the canbeiterativelyexpandedfollowingthereversedirectionof
laterTSstate. r toreachthenodewhoseTISstateincludestimestept u at
vertex u. Therefore, the TIS Tree is complete. Secondly,
Proof. Weproveitbycontradiction. Let(t 0,s)and(t 1,s)be if there is a feasible solution for a multi-goal single-agent
two TS states in the same SI where t 1 > t 0. Define C(t,s) pathfinding problem, their corresponding GSI visiting order
astheminimumcompletiontimeofthepathtovisitasetof couldbesearchedinthelow-levelsolver,andthepathcould
goalsatleastoncefromaTSstate(t,s). Suppose,towardsa beconstructedaccordingtothecompletenessofA*andTIS
contradiction,thatC(t 1,s)<C(t 0,s). Considertheoptimal Tree. Thirdly, MGCBS is complete according to the com-
path that achieves the completion time C(t 0,s). This path pletenessofCBSandthelow-levelsolver.
canbemodifiedtostayatvertexsuntiltimet andthenfol-
1
lowthesamesequenceofverticesastheoptimalpathstarting 7 Experiment
from(t ,s). Themodifiedpathwouldvisitallgoalsnolater
1
We verify our proposed algorithm’s effectiveness and opti-
thantheoptimalpathfrom(t ,s),yieldingacompletiontime
1
mality on the 4-neighbor grid maps. We randomly sample
thatisatmostC(t ,s), indirectcontradictiontothesuppo-
1
each agent’s start and goal points in the grid map, ensur-
sitionthatC(t ,s)<C(t ,s).
1 0
ing that the start points of the different agents are distinct.
Lemma2. ThepathmaintainedintheTISTreeistheoptimal The test computer is equipped with an I9-7900X CPU with
pathtotheseedGSIoftheTIStreeundergivenconstraints. 3.3 GHz and 32GB RAM. The code is publicly available at
https://github.com/tangmingkai/MGCBS.
Proof. TheTISTreeisconstructedbasedonabackwardver- Weusethefollowingfouralgorithmsfortheexperiments.
sionoftheDijkstraalgorithm[DIJKSTRA,1959]. Theopti-
• HCBS (A1): A three-level algorithm [Surynek, 2021].
malityoftheTISTreecanbeguaranteedbytheoptimalityof
ThehighestlevelsolverisaCBSalgorithm,andthemid-
theDijkstraalgorithm.
dle level solver is an A* algorithm that searches a goal
vertexvisitingorder. Thelowestlevelsolverisaclassic
Lemma3. ThefunctionGeneratePathinAlgorithm2can
A*forsingle-agentpathfinding. ItisthecurrentSOTA
obtaintheoptimalpathfollowingagivenGSIvisitingorder
methodbasedonDVS.
undergivenconstraints.
• MGCBS without TIS Forest (A2): MGCBS with a
Proof. The resulting path of GeneratePath is constructed modifiedlow-levelsolverthatusestheA*algorithmto
by iteratively concatenating the subpath to the next GSI by obtaintheshortestpathanditslengthtoaGSI.
theTISTree,andthelengthofthesubpathisshortestaccord-
• MGCBS(A3): Ourproposemethod.
ing to the Lemma 2. The current Lemma can be proved by
induction. The search starts from a TS state with time step • CBS+A*(A4): AnoptimalalgorithmthatistheCBS
0. Assumethatusingthisconstructionmethodcanobtainthe with a coupled low-level search using an A* algorithm
pathwiththeminimumcompletiontimefollowingthefirstk tosearchfortheshortestpathvisitingallthegoals.
GSIvisitingorder. AccordingtoLemma1,concatenatingthe
7.1 ExperimentforEfficiency
shortestsubpathtothek+1GSIcanobtainthepathwiththe
minimumcompletiontimefollowingthefirstk+1GSIvis- From the MAPF benchmark [Sturtevant, 2012], three grid
itingorder. Therefore,bytheprincipleofinduction,thefinal mapsfromsmalltolargeareselected,namely‘maze-32-32-
resulting path has the minimum completion time following 4’, ‘lak303d’, and ‘orz900d’. They are marked as M1, M2,
thewholeGSIvisitingorder. andM3,asshowninFigure4. Wegenerate100instancesforMap k A1 A2 A3 Map Algorithm SN DN MRE ARE
M1 2 98% 98% 100% M4 A1 841 29 17.39% 0.19%
4 69% 69% 86% A3 852 0 0.00% 0.00%
6 22% 22% 50% M5 A1 896 4 7.14% 0.03%
8 4% 4% 9% A3 896 0 0.00% 0.00%
M2 2 100% 100% 98%
4 93% 93% 91% Table 3: Table for evaluating the solution quality of A1 and A3.
6 66% 66% 74% SN isthenumberofinstancesboththetargetalgorithmandA4can
8 20% 20% 50% successfullyrun.DN isthenumberofinstanceswherethesolution
M3 2 0% 0% 100% cost produced by the target algorithm differs from those produced
4 0% 0% 73% by A4. MRE and ARE are maximal and average relative error,
6 0% 0% 8% respectively.
8 0% 0% 0%
Table1:Tableofthesuccessrate.kisthenumberofagents.
map k A1 A2 A3
M1 M2 M3 M4 M5
M1 2 4.37(-) 4.52(0.97) 0.63(6.94)
4 27.39(-) 27.84(0.98) 12.16(2.25)
Figure4:Thegridmapsusedintheexperiment.
6 53.44(-) 53.69(1.00) 37.47(1.43)
8 58.75(-) 58.75(1.00) 56.41(1.04)
M2 2 8.87(-) 8.87(1.00) 3.79(2.34)
plexitythanA1,whichonlysearchesthegoalvertexvisiting
4 23.73(-) 23.79(1.00) 12.23(1.94)
order.
6 44.40(-) 44.40(1.00) 24.60(1.80)
8 57.18(-) 57.23(1.00) 42.26(1.35)
M3 2 60.00(-) 60.00(1.00) 17.73(3.38) 7.2 ExperimentforOptimality
4 60.00(-) 60.00(1.00) 42.96(1.40)
We use two self-defined grid maps, M4 and M5, in Figure
6 60.00(-) 60.00(1.00) 58.73(1.02)
4, to evaluate the optimality of our proposed algorithm. We
generate 100 instances for the number of agents and goals
Table 2: Table of the average running time and the speedup ratio.
ranging from 2 to 4, with a total of 900 instances for each
Thefirstnumberinthecellshowstheaveragerunningtime(sec),
grid map. We utilize relative error to evaluate the solution
andthenumberinparenthesesindicatesthespeedupratiorelativeto
A1. kisthenumberofagents. Weomittheresultofk = 8onM3 quality with A4 and the target algorithm (A1 and A3), only
becausetherearenosuccessfulinstances. consideringinstanceswherebothA4andthetargetalgorithm
are successful. Specifically, we count the instance number
wheretheircostsdifferandcomputethemaximumandaver-
eachnumberofagentsintherangeof{2,4,6,8}.Wefixeach agevaluesoftherelativeerror.
agent’s goal number to 12. We employ the average running Table3displaysthenumberofinstancesinwhichthecost
timeandthesuccessrateasevaluationmetricsforcomparing differs between the target algorithms and A4 across all suc-
theperformanceofA1,A2,andA3. Atestcaseisunsuccess- cessfully solved instances, as well as the maximum and av-
fulifitsrunningtimeexceeds60seconds,inwhichcasethe eragerelativeerror. Insomeinstances,A1cannotobtainthe
runningtimewillbedirectlysetto60seconds. optimal path with a maximal relative error exceeding 17%,
Table1andTable2showthesuccessrate,theaveragerun- whileA3canobtainoptimalresultsamongallinstances.
ningtime,andthespeedupratiotoA1oftheothertwoonM1,
M2,andM3. Inmostinstances,A3outperformsA1andA2 8 Conclusion
regardingaveragerunningtimeandsuccessrate.Specifically,
thespeedupratioofA3toA1isnearly7whenthenumberof This work used the case study and experiment to demon-
agentsistwoonM1. Whenthenumberofagentsissmaller, strate that the method based on decoupling the goal ver-
theaccelerationismorepronouncedbecausewhenthenum- tex visiting order search and the single-agent pathfinding is
berofagentsislarge,unsuccessfulinstanceswillsmooththe not optimal for the multi-goal multi-agent pathfinding prob-
speedupratio.OnM3,A1andA2cannotsolveanyinstances, lem. Hence, we proposed a two-level optimal and efficient
while A3 solves all instances successfully when the number solver,MGCBS,decouplingthegoalsafeintervalvisitingor-
ofagentsis2. InsmallnumbersofinstancesonM2withfew der search and the single-agent pathfinding. To obtain the
agents, the speedup by using TIS Forest to find the shortest shortest path and its length to each goal safe interval effi-
path cannot overlap the construction overhead, making the ciently,weproposedtheTime-Interval-SpaceForesttomain-
success rate lower than A1 and A2. However, regarding the tain the shortest path from any start vertex at any start time
averagerunningtime,A3performsthebestonthesamemap step to the goal safe interval. Experiments have shown that
andthenumberofagents.Insomeinstances,A2runsslightly MGCBS can consistently obtain the optimal result and sig-
slowerthanA1becauseA2,whichsearchestheGSIvisiting nificantlyoutperformtheSOTAdecoupledmethodregarding
orderinthelow-levelsolver,hasahighercomputationcom- runningspeed.Acknowledgments agent simultaneous multi-goal sequencing and path find-
ing. In 2021 IEEE International Conference on Robotics
This work was supported by Guangdong Basic and Ap-
andAutomation(ICRA),pages11560–11565.IEEE,2021.
plied Basic Research Foundation (No. 2021B1515120032),
and Guangzhou-HKUST(GZ) Joint Funding Program (No. [Renetal.,2022] Zhongqiang Ren, Sivakumar Rathinam,
2024A03J0618). and Howie Choset. Conflict-based steiner search for
multi-agent combinatorial path finding. Proceedings of
References Robotics: ScienceandSystems, NewYorkCity, NY,USA,
2022.
[Applegateetal.,2011] DavidLApplegate,RobertEBixby,
[SalzmanandStern,2020] Oren Salzman and Roni Stern.
VasˇekChva´tal, andWilliamJCook. Thetravelingsales-
Researchchallengesandopportunitiesinmulti-agentpath
manproblem.InTheTravelingSalesmanProblem.Prince-
findingandmulti-agentpickupanddeliveryproblems. In
tonuniversitypress,2011.
Proceedings of the 19th International Conference on Au-
[Cˇa´petal.,2015] Michal Cˇa´p, Peter Nova´k, Alexander tonomous Agents and MultiAgent Systems, pages 1711–
Kleiner, and Martin Selecky`. Prioritized planning al- 1715,2020.
gorithms for trajectory coordination of multiple mobile
[Sharonetal.,2015] Guni Sharon, Roni Stern, Ariel Fel-
robots. IEEEtransactionsonautomationscienceanden-
ner, and Nathan R Sturtevant. Conflict-based search for
gineering,12(3):835–849,2015.
optimal multi-agent pathfinding. Artificial Intelligence,
[Choudhuryetal.,2022] Shushman Choudhury, Kiril 219:40–66,2015.
Solovey, Mykel Kochenderfer, and Marco Pavone. Co-
[Sternetal.,2019] Roni Stern, Nathan R Sturtevant, Ariel
ordinated multi-agent pathfinding for drones and trucks
Felner, Sven Koenig, Hang Ma, Thayne T Walker,
over road networks. In Proceedings of the 21st Interna-
Jiaoyang Li, Dor Atzmon, Liron Cohen, TK Satish Ku-
tionalConferenceonAutonomousAgentsandMultiagent
mar, etal. Multi-agentpathfinding: Definitions, variants,
Systems,pages272–280,2022.
andbenchmarks. InTwelfthAnnualSymposiumonCom-
[DIJKSTRA,1959] E DIJKSTRA. A note on two prob- binatorialSearch,2019.
lemsinconnexionwithgraphs. NumerischeMathematik,
[Sturtevant,2012] Nathan R Sturtevant. Benchmarks for
1:269–271,1959.
grid-based pathfinding. IEEE Transactions on Computa-
[DresnerandStone,2008] KurtDresnerandPeterStone. A tionalIntelligenceandAIinGames,4(2):144–148,2012.
multiagentapproach toautonomousintersectionmanage-
[Surynek,2021] PavelSurynek. Multi-goalmulti-agentpath
ment. Journal of artificial intelligence research, 31:591–
findingviadecoupledandintegratedgoalvertexordering.
656,2008.
InProceedingsoftheAAAIConferenceonArtificialIntel-
[Hartetal.,1968] PeterEHart,NilsJNilsson,andBertram ligence,volume35,pages12409–12417,2021.
Raphael. Aformalbasisfortheheuristicdeterminationof [Tjiharjadietal.,2022] Semuil Tjiharjadi, Sazalinsyah
minimum cost paths. IEEE transactions on Systems Sci-
Razali, and Hamzah Asyrani Sulaiman. A systematic
enceandCybernetics,4(2):100–107,1968.
literature review of multi-agent pathfinding for maze
[Maetal.,2017a] HangMa,JiaoyangLi,TKSatishKumar, research. JournalofAdvancesinInformationTechnology
and Sven Koenig. Lifelong multi-agent path finding for Vol,13(4),2022.
online pickup and delivery tasks. In Proceedings of the [Xuetal.,2022] Qinghong Xu, Jiaoyang Li, Sven Koenig,
16th Conference on Autonomous Agents and MultiAgent
and Hang Ma. Multi-goal multi-agent pickup and deliv-
Systems,pages837–845,2017.
ery. In 2022 IEEE/RSJ International Conference on In-
[Maetal.,2017b] Hang Ma, Jingxing Yang, Liron Cohen, telligent Robots and Systems (IROS), pages 9964–9971.
TK Satish Kumar, and Sven Koenig. Feasibility study: IEEE,2022.
Movingnon-homogeneousteamsincongestedvideogame [YuandLaValle,2013] Jingjin Yu and Steven M LaValle.
environments. InThirteenthArtificialIntelligenceandIn- Structure and intractability of optimal multi-robot path
teractiveDigitalEntertainmentConference,2017. planningongraphs. InTwenty-SeventhAAAIConference
[Morrisetal.,2016] Robert Morris, Corina S Pasareanu, onArtificialIntelligence,2013.
Kasper Luckow, Waqar Malik, Hang Ma, TK Satish Ku- [Zhangetal.,2022] HanZhang, JingkaiChen, JiaoyangLi,
mar, and Sven Koenig. Planning, scheduling and moni- Brian C Williams, and Sven Koenig. Multi-agent path
toringforairportsurfaceoperations. InWorkshopsatthe finding for precedence-constrained goal sequences. In
ThirtiethAAAIConferenceonArtificialIntelligence,2016. Proceedings of the 21st International Conference on Au-
[PhillipsandLikhachev,2011] Mike Phillips and Maxim tonomous Agents and Multiagent Systems, pages 1464–
Likhachev. Sipp: Safeintervalpathplanningfordynamic 1472,2022.
environments. In2011IEEEinternationalconferenceon
roboticsandautomation,pages5628–5635.IEEE,2011.
[Renetal.,2021] Zhongqiang Ren, Sivakumar Rathinam,
andHowieChoset.Ms*:Anewexactalgorithmformulti-k n A1 A2 A3 k n A1 A2 A3
2 4 100% 100% 100% 2 4 1.67(-) 1.67(1.00) 1.87(0.89)
8 100% 100% 99% 8 4.06(-) 4.04(1.00) 2.76(1.47)
12 100% 100% 99% 12 9.28(-) 9.24(1.00) 3.25(2.86)
16 82% 82% 99% 16 28.85(-) 28.79(1.00) 3.88(7.44)
4 4 98% 98% 99% 4 4 4.84(-) 4.84(1.00) 4.44(1.09)
8 98% 98% 96% 8 10.23(-) 10.22(1.00) 7.73(1.32)
12 91% 91% 89% 12 25.04(-) 25.01(1.00) 12.89(1.94)
16 46% 45% 86% 16 48.48(-) 48.57(1.00) 17.23(2.81)
6 4 94% 94% 82% 6 4 11.26(-) 11.26(1.00) 18.78(0.60)
8 85% 84% 74% 8 24.32(-) 24.48(0.99) 24.27(1.00)
12 70% 69% 80% 12 41.09(-) 41.12(1.00) 23.83(1.72)
16 12% 12% 63% 16 58.11(-) 58.14(1.00) 32.31(1.80)
8 4 83% 83% 65% 8 4 20.1(-) 20.13(1.00) 30.84(0.65)
8 66% 66% 50% 8 38.17(-) 38.35(1.00) 41.26(0.93)
12 18% 17% 44% 12 56.79(-) 56.84(1.00) 44.64(1.27)
16 0% 0% 40% 16 60.0(-) 60.0(1.00) 47.35(1.27)
Table4: Tableofthesuccessrate. kisthenumberofagents. nis Table 5: Table of the average running time and the speedup ratio.
thenumberofgoals. Thefirstnumberinthecellshowstheaveragerunningtime(sec),
andthenumberinparenthesesindicatesthespeedupratiorelativeto
A1.kisthenumberofagents.nisnumberofgoals.
A ExperimentsonVariousNumbersofGoals
In this section, we verify the efficiency of the MGCBS on
constructiontimeoftheTISForestcausesadecreaseineffi-
various numbers of goals. We use the grid map ‘lak303d’,
ciency. Ontheotherhand,whenthenumberofgoalsislarge,
whichisM2inthemaintextfortheexperiment. Wegenerate
ittakesservaltrialstofindthebestgoalvertexvisitingorder
100 instances for the number of goals in the range of {4, 8,
and the GSIvisiting order, making many calls tothe single-
12, 16} and the number of agents in the range of {2, 4, 6,
agentpathfindingsolverinA1andA2. TheTISForestinA3
8}. We randomly generate a start point and goal points for
can significantly reduce redundant calculations and improve
each agent, while the start point for each agent is distinct.
computationalspeed.
The success rate and the average running time are used as
The average running time of A2 is almost equal to A1 in
evaluationmetrics. Aninstanceisconsideredunsuccessfulif
theexperiments,andwhenthenumberofagentsandthenum-
therunningtimeexceeds60secondsandtherunningtimeof
berofgoalsarelarge, A2runsabitslowerthanA1. Thisis
theunsuccessfulinstanceisdirectlysetto60seconds.
becausewhenthenumberofagentsandgoalsaresmall, the
Weusethreealgorithmsforourevaluation. Themarkings
numberofconflictsissmallandthereisalmostnomorethan
areconsistentwiththoseinthemaintext.
oneGSIateachgoalvertex. Whenthenumberofagentsand
• HCBS (A1): A three-level algorithm [Surynek, 2021].
goalsarelarge,theremightexistseveralGSIatthegoalver-
ThehighestlevelsolverisaCBSalgorithm,andthemid-
tices, andthesearchoftheGSIvisitingorderisslowerthan
dle level solver is an A* algorithm that searches a goal
thesearchofthegoalvisitingorder.
vertexvisitingorder. Thelowestlevelsolverisaclassic
A*forsingle-agentpathfinding. ItisthecurrentSOTA
methodbasedonDVS.
• MGCBS without TIS Forest (A2): MGCBS with a
modifiedlow-levelsolverthatusestheA*algorithmto
obtaintheshortestpathanditslengthtoaGSI.
• MGCBS(A3): Ourproposemethod.
Table4showsthesuccessrate,andTable5showstheav-
eragerunningtimeofthreealgorithms. Whenthenumberof
agentsisfixed,A3outperformsA1andA2whenthenumber
ofgoalsislargeintermsofsuccessrateandaveragerunning
time. The speedup ratio of A3 to the other two algorithms
increases with the increase of the number of agents. On the
one hand, when the number of goals is small, the middle-
level solver of A1 and the low-level solver of A2 can ob-
tain the goal vertex visiting order or the GSI visiting order
withfewtrialsinthesearch. Inthesecases,thesingle-agent
pathfinding solver is not called for many times, and the A3,
which uses the TIS Forest to reduce the redundant compu-
tation of the single-agent pathfinding, is not beneficial. The