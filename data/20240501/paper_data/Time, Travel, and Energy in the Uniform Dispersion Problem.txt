1
Time, Travel, and Energy in the Uniform
Dispersion Problem
Michael Amir, Alfred M. Bruckstein
I. INTRODUCTION the fundamental trade-offs and limitations of swarm robotics
algorithms, which can inform the design of such systems.
Abstract—We investigate the algorithmic problem of uni- A good uniform dispersion algorithm must try to optimize
formly dispersing a swarm of robots in an unknown, gridlike one or more key metrics:
environment. In this setting, our goal is to comprehensively
1) Makespan:Thetimeittakesfortheswarmtofullycover
study the relationships between performance metrics and robot
capabilities. We introduce a formal model comparing disper- the environment.
sion algorithms based on makespan, traveled distance, energy 2) Travel: The distance traveled by each robot, which im-
consumption, sensing, communication, and memory. Using this pacts, e.g., wear on the robots.
framework, we classify several uniform dispersion algorithms
3) Energy: The energy consumed by each robot during
accordingtotheircapabilityrequirementsandperformance.We
the exploration process. We formally measure a robot’s
prove that while makespan and travel can be minimized in all
environments, energy cannot, as long as the swarm’s sensing energy use as the amount of time it is active in the
range is bounded. In contrast, we show that energy can be environment.Energyisofprimaryimportanceinrobotics,
minimized even by simple, “ant-like” robots in synchronous due to battery life and cost considerations.
settings and asymptotically minimized in asynchronous settings,
Since cheap and expendable robots are central to swarm
providedtheenvironmentistopologicallysimplyconnected.Our
findings offer insights into fundamental limitations that arise robotics, in addition to these performance metrics, a good
when designing swarm robotics systems for exploring unknown uniform dispersion algorithm should strive to minimize the
environments,highlightingtheimpactofenvironment’stopology hardware requirements for successful execution, such as sens-
on the feasibility of energy-efficient dispersion.
ing range, communication bandwidth (using local signals),
In hazardous unknown environments such as collapsed and memory or computation capabilities [12–15]. Optimizing
buildings or leaking chemical factories, the deployment of these metrics and minimizing the required capabilities raises
humanteamsformapping,searchandrescue,ordatagathering important questions about the relationships between them:
can be ineffective and dangerous. In recent years, swarm • What is the connection between minimizing makespan,
robotics, which involves the use of numerous simple robots energy, and travel? Under what conditions can we mini-
working together to achieve a common goal, has emerged mize all of these metrics simultaneously?
as a promising solution for exploring and monitoring such • Given a robot with specific capabilities, which of the
environments. The promise of swarm robotics is that a large following metrics can it minimize: makespan, total dis-
number of cheap, expendable robots guided by local sensing- tance traveled, or energy consumption? How do the
based algorithms and signals can adapt to such environments robot’s capabilities influence its ability to optimize these
onthefly,offeringanalternativetohumanintervention[1,2]. performance measures?
A notable approach to using swarms for exploration and This work aims to be a comprehensive investigation of
monitoring is the concept of ”flooding” or ”uniform disper- such questions in a uniform dispersion setting. We introduce
sion” [3–10]. This approach involves gradually deploying a aformalmodelthatenablesustocompareuniformdispersion
swarm of small, expendable robotic agents at a fixed en- algorithms in terms of three performance metrics: makespan,
try point in the environment and allowing them to explore travel, and energy, and three capability requirements: sensing,
and settle until the area is fully covered. By operating au- communication, and persistent state memory (a proxy for the
tonomously and in parallel, these robots can efficiently gather dispersion strategy’s complexity). Robots with sensing range
crucial data while reducing the risk to human personnel [8]. V, communication bandwidth B and persistent state memory
Potential applications range from search and rescue missions S are described as (V,B,S)-robots. Using this framework,
and environmental monitoring to scientific exploration. we identify sufficient robot capabilities for minimizing each
In this work, we study the algorithmic problem the heart performance metric. The results are summarized in Table I.
of such an approach: flooding an unknown, discrete grid-like Our results show that, although there exist uniform dis-
environment with a swarm of robots that gradually enter from persion algorithms that minimize makespan (a result due to
asourcelocation.Thisproblem,knownintheliteratureasthe Hsiang et al. [3]) and travel (our own result) in general
uniform dispersion problem, was formally posed by Hsiang et environments,theredoesnotexistanalgorithmthatminimizes
al. [3] (building on the earlier work of Howard et al. [11]) total energy in general environments, assuming robots do not
and has attracted significant attention in the literature–see knowtheenvironmentinadvance(inotherwords,(V,∞,∞)-
“Related Work”. By studying the uniform dispersion problem robots cannot minimize energy for any given, constant V). In
in a formal mathematical setting, we can gain insights into fact,weprovethatevenacentralizedalgorithmwithunlimited
4202
rpA
03
]OR.sc[
1v46591.4042:viXra2
TABLE I: A summary of uniform dispersion results by per-
efficient in this setting. To prove this, we relate FCDFS to
formance metric and environment type.
the “Totally Asymmetric Simple Exclusion Process” (TASEP)
in statistical physics, studied extensively in e.g. [22–24]. This
Metric Environment Canbeminimizedby
proof technique originally appeared in [7] in the context of
(2,O(1),O(1))-robots
Makespan General makespan. We adapt the ideas in [7] and extend them to also
(Hsiangetal.[3])
bound (maximal individual) energy.
Travel General (2,1,O(nlogn))-robots
Energy General CannotminimizeassumingconstantV A. Related Work
Energy SimplyConnected (2,0,5)-robots This work builds upon and significantly develops results
(2,1,5)-robots(Asynchronously)
from[15],whichintroducestheFCDFSalgorithm,provingits
energy optimality in a simply-connected, synchronous setting
along with the related impossibility result Proposition III.10.
computationalpowerbutwithoutpriorknowledgeoftheenvi-
We contextualize the results of [15] by interpreting them
ronmentcannotminimizeenergy(SectionIII).Informally,this
within our formal model of robot capabilities, which enables
is because an energy-optimal algorithm necessarily minimizes
us to compare different uniform dispersion algorithms in a
both makespan and travel, hence energy necessitates both
principled way. Expanding on [15], we prove there exists a
decidingquicklyandoptimalpath-finding–twogoalsinconflict
formaldistinctionbetweenoptimizingenergyuseanddistance
with each other.
travelled by showing that the former is impossible but the
Given the above, we are led to ask whether energy can be
latter is possible in general environments. We introduce an
minimizedinmorerestrictedtypesofenvironments.Weshow
asynchronousversionofFCDFS(“AsynchFCDFS”)andprove
thatasufficienttopologicalconditionissimply-connectedness
efficient performance guarantees. Additionally, as part of our
[16].Asimplyconnectedenvironmentisonewhereanyclosed
formalstudyofenergy,travel,andmakespan,weproveresults
loop can be continuously shrunk to a point without leaving
related to the formal distinction between centralized algo-
the environment. Informally, this means the environment has
rithms,decentralizedalgorithms,and“strongly”decentralized,
no “holes” or “obstacles” that a loop could get stuck around.
ant-like algorithms - see Section III and Appendix A. Note
Examples of simply connected environments include convex
thatcertaindefinitionsdiffersomewhatbetweenthetwopapers
shapes like rectangles, as well as more complex shapes
(duetoourmorenuancedmodel),affectingthewayquantities
like mazes or building floors, as long as they don’t have
are expressed in some results.
any enclosed holes. We describe an algorithm, “Find-Corner A large body of work exists on deploying robotic swarms
Depth-First Search” (FCDFS), that minimizes energy in such for covering, exploring, or monitoring unknown environments
environments. FCDFS is an algorithm for (2,0,5)-robots, [2]. Decentralized approaches are often favored, as they tend
meaningitrequiresnocommunicationandhassmall,constant to be more adaptive than centralized control to uncertain
sensing range and memory requirements. This makes it exe- environmentalconditions,e.g.,[3,4,8,10,11,25–28].Among
cutable by very simple “ant-like” robots, in contrast with our these approaches, significant attention has been given to uni-
impossibility results in non-simply connected environments. form dispersion in particular. Foundational work on uniform
An“ant-like”robotisarobotwithsmall,constantpersistent dispersion can be traced back to Hsiang et al. [3] and Howard
state memory and sensing range, and no communication et al. [11]. Substantial subsequent developments focused on
capabilities [17, 18]. Such robots have attracted significant provably guaranteeing uniform dispersion under conditions
attention due to their simplicity and robustness, as well as the such as asynchronicity, reducedor corrupted memory, myopic
interesting algorithmic challenges they pose (see e.g. [19]). sensing capabilities, and adaptation to sudden robot crashes
In Appendix A, we show that ant-like robots are “strongly” [4–8, 29–31]. Works on dispersion and similar problems have
decentralized: they are fundamentally incapable of comput- either considered environments as continuous [11, 20, 26, 32]
ing the same decisions as a centralized algorithm (Proposi- or discrete environments [29, 33], with our work leaning
tionA.1).ThecoreideaofFCDFSismaintaininga“geometric towards the latter for its simplicity in representing complex
invariant”: the environment must remain simply connected environments, and due to our focusing on global performance
after a robot settles, blocking part of the environment off. efficiencies rather than local dynamics.
In other words, it is reliant on robots actively reshaping the Energyisaprimaryconstraintinrobotics,andconsequently,
environment to guide other robots. This is an example of many works have dealt with predicting, or optimizing energy
a concept from ant-robotics and biology called “stigmergy”: use in swarms [21, 34]. Whereas Hsiang et al. focused on
indirect communication via the environment [8, 20, 21]. makespan and travelled distance as optimization targets [3],
The results we described above all assume a synchronous the first work to consider activity time as a proxy for energy
setting where robots all activate simultaneously at every time use in a uniform dispersion context is [15] (whose results
step, but in real world applications, we expect asynchronicity. this present work builds upon). Subsequently, in [8, 35],
It is thus important to ask whether FCDFS generalizes to redundancy - i.e., having more robots than necessary - is
asynchronous settings. We show that it does in Section V, shown to sometimes enable energy savings in a dual-layer
where we consider an asynchronous setting with random uniform dispersion strategy.
robot activation times. We show that, asymptotically, an asyn- Our investigation of energy-efficient dispersion is grounded
chronous variant of FCDFS remains time, travel, and energy- in the concept of co-design, which involves studying what3
kinds of environments can improve robots’ performance in a Definition II.1. The makespan of an algorithm ALG over R,
given task [36]. denoted M, is the first time step t such that at the end of t,
Toboundthemakespanandenergyuseofanasynchronous every location contains a settled robot.
version of our energy-optimal algorithm, we relate it to the
Definition II.2. Assuming the robots act according to an
“Totally Asymmetric Simple Exclusion Process” (TASEP) in
algorithm ALG, let T be the number of times A moves. The
i i
statistical physics, studied extensively in e.g. [22–24]. This
total travel of ALG over R is defined as T =
(cid:80)n
T .
process has been used to study traffic flow [37] and biolog- total i=1 i
The maximal individual travel is T =max T .
max 1≤i≤n i
ical transport [38]. We are particularly interested in what is
known as TASEP with step initial conditions. Two accessible Whereas travel measures the distance a robot has moved
references on this that have been particularly helpful to us are since its arrival, energy measures the amount of time during
Romik, 2015 [39] and Kriecherbauer and Krug, 2020 [40]. which it was active and consumed energy. Hence, a robot’s
energy use continues increasing even when when it stays put,
as long as it isn’t settled:
II. MODEL
Definition II.3. Assuming the robots act according to an
Intheuniformdispersionproblem,aswarmofautonomous algorithmALG,letts itart bethetimestepA i arrivesats,and
robots (also called “agents”) A 1,A 2,... are tasked with let te ind be the time step A i settles. We define the energy use
completely filling an a priori unknown discrete region R, of A i to be E i =te ind−ts itart. The total energy of ALG over
attempting to reach a state such that every location in R R is defined as E total =
(cid:80)n
i=1E i. The maximal individual
contains a robot. We assume R is a subset of size n of energy use is E max =max 1≤i≤nE i.
the infinite grid Z2 = Z × Z, and represent its locations
Robot capabilities: We are interested in studying au-
via coordinates (x,y) where x and y are both integers. Two
tonomous robots with limited visibility that do not know their
locations (x ,y ) and (x ,y ) are connected if and only if
1 1 2 2 environmentinadvance.Primarily,weareinterestedinsimple
the Manhattan distance |x −x |+|y −y | is exactly 1. The
1 2 1 2 robotsthathavehighlylimitedsensing,computation,andlocal
complement of R, denoted Rc, is defined as the subregion
signaling capabilities (as well as robots that cannot communi-
Z2−R. We call the vertices of Rc walls.
cateatall).By“localsignalling”wemeanthateachrobotcan
Each robot (or “agent”) is represented as a mobile point broadcast a local visual or auditory signal by physical means,
in R. Robots are dispersed over time onto R and move for example by emitting lights or sounds, which is received
within it. Robots are identical and anonymous, are initialized by all robots that sense it, and those robots can identify the
with identical orientation, and use the same local algorithm robot that sent the message. This communication scheme is
to decide their next movements. Collisions are disallowed: a distinct from, e.g., radio communication. Let us parametrize
robot may not move to a location occupied by another robot, the robots’ capabilities as follows:
normaytworobotsmovetothesamelocationsimultaneously.
1) Visibilityrange(V).Arobotlocatedatp=(x,y)senses
Time is discretized into time steps t = 1,2,.... At the locations of Z2 at Manhattan distance V or less from p.
beginning of every time step, all robots perform a Look- Therobotknowsthepositionrelativetopofeveryvertex
Compute-Moveoperationsequence.Duringthe“Look”phase, ofp′ ∈Z2 itsenses(i.e.,itknowsp′−p).Weassumethe
robots examine their current environment and any messages robot can tell whether p′ is s and whether p′ contains an
broadcast by other robots in the previous time step. In the obstacle(i.e.,anotherrobotorawall).However,itcannot
“Compute-Move” phases the robots move to a location com- tell from sensing alone whether an obstacle is a wall, a
puted by their algorithm (or stay in place), and afterwards settled robot, or an active robot.
broadcastamessageiftheywish.Thebeginningoftimestept 2) Communication bandwidth (B). Each robot can broad-
referstotheconfigurationofrobotsbeforetheLook-Compute- cast a binary string of length B to all robots that sense
Move sequence of time t, and the end of time step t refers to it. When B =0, robots cannot broadcast.
the configuration after. We shall say “at time t” for shorthand 3) Persistent state memory (S). Each robot has a state
when the usage is clear from context. memory of S bits that persists from time step to time
A unique vertex s in R is designated as the source vertex step (meaning at a given time t each robot can be in any
(sometimes called the “door” in the literature [30]). If at the of 2S states).
beginning of a time step there is no mobile robot at s, a new Note that persistent state memory is distinct from memory
robot emerges at s at the end of that time step. We label the use during a given time step. In swarm robotics, persistent
emerging robots A 1,A 2,A 3,... in order of their arrival, such state memory is often a metric of interest, because it is seen
that A i is the ith robot to emerge from s. asanindirectmeasureoftheswarmstrategy’scomplexityand
Allrobotsareinitiallyactive,andeventuallysettles.Settled ability to recover from errors [5, 30, 41]. We do not consider
robotsnevermovefromtheircurrentposition.Inotherwords, other types of memory use in this work.
a robot “settles” after it arrives at its final, desired location. A With the above capability measures in mind, we can
robot may not move and settle in the same time step. characterize a robot’s capabilities by a 3-tuple (V,B,S). A
We wish to study warms of autonomous robots whose “powerful”robotmighthaveverylargeV,B,orS,whereasa
goal is to attain uniform dispersion while minimizing three simplerobothassmallV,B,andS.TheparametersV,B and
performance metrics: makespan, travel, and energy. S determine the possible algorithms robots can run. A central4
goal of ours is to study what algorithms become available to Furthermore, these best values are all simultaneously ob-
thedesigneroftheswarmasweincreasethevaluesV,BorS. tained by the same (∞,0,0)-algorithm1.
When can increasing these parameters improve the quality of
Proof. Let R(t) be the initial environment R after removing
the robots’ dispersion strategy, by enabling them to minimize
every vertex that is occupied by a settled robot at time t. The
a given performance metric?
algorithm is simply this: at every time step, each robot takes
Definition II.4. An (v,b,s)-robot is a robot with capabilities a step that increases its distance from s in R(t). If there are
V = v, B = b, S = s. A (v,b,s)-algorithm is an algorithm multiplestepsitcantaketoattainthis,itpicksthefirstonein
that can be executed by (v,b,s)-robots. clockwise order. If the robot cannot take any steps to increase
itsdistancefroms,itsettles.Weshallshowthatthisalgorithm
optimizes all makespan, travel, and energy metrics.
III. COMPARINGMAKESPAN,TRAVEL,ANDENERGY
First, note that when enacting this algorithm, two active
robots A , A are always at distance 2 or more from each
The central topic of our work is the relationship between i i−1
other.Thisisbecause(bythewayagententrancesarehandled
agent capabilities and the agents’ ability to complete uniform
in our formal model) they must have arrived at least two
dispersion while optimizing makespan, travel, or energy. The
time steps apart, and A has been increasing its distance from
agentmodelwepresentedinSectionIIenablesustoformally i
s with each of its steps. Consequently, active robots never
study uniform dispersion algorithms from these lens. In this
block each others’ paths. It stems from this that the lowest-
section, we show how makespan and travel relate to energy,
index active robot A will eventually settle in some vertex
and study the ability of various types of agents to optimize i
v ∈ R(t) that has no neighbors in R(t), v′ ∈ R(t) such
these performance metrics.
that dist(s,v′) > dist(s,v). This implies that for any vertex
We are mainly interested in the question of how well
u∈R(t), the distance from s to u in R(t) is necessarily the
decentralized (V,B,S)-robots can perform compared to “om-
same as in R. Hence A arrives at v having taken a shortest
niscient” (∞,∞,∞)-robots, i.e., robots that have full knowl- i
path in R.
edgeoftheenvironmentinadvanceandunlimitedcapabilities
Since, by the above, every robot takes a shortest path to
(this can be thought of as the optimal “offline” solution). To
itssettlinglocationwithoutbreaks,thealgorithm’stotaltravel
this end, let us define the performance omniscient robots can
is
(cid:80)n
dist(s,v ), its total energy is n +
(cid:80)n
dist(s,v ),
attain over an environment R: i=1 i i=1 i
its maximal travel is max dist(s,v ), and its maximal
1≤i≤n i
Definition III.1. For a given grid environment R with source energy is 1+max dist(s,v ).
1≤i≤n i
s, denote by E∗ the lowest possible total energy consumed Also by the above, an unsettled agent remains at s for
total
byany(∞,∞,∞)-algorithmthatsuccessfullyattainsuniform precisely one time step, hence a new agent enters s every
dispersion mission in R. Similarly define E∗ , T∗ , T∗ two time steps. Hence, after 2n−1 time steps, R contains n
max total max
and M∗. robots,thelastofwhomsettlesattimestep2n,i.e.,M∗ =2n.
This concludes the proof.
Let dist(·,·) be the distance between two vertices in R. We
start our analysis with the following observation: Proposition III.3 shows that robots with complete sensing
(or prior knowledge) of the environment can match the lower
Observation III.2. LetR beanenvironmentwithnlocations
bounds in Observation III.2, and therefore E∗ , E∗ ,
v ,v ,...v and source s. For any algorithm, total max
1 2 n T∗ , T∗ and M∗ are explicitly known for any environ-
1) E −n≥T
≥(cid:80)n
dist(s,v )
total max
total total i=1 i ment R. We will call an algorithm optimal with respect to
2) E max−1≥T max ≥max 1≤i≤ndist(s,v i) some performance metric if it matches, when executed over
3) M≥2n any graph R, the value in Proposition III.3 for that respective
parameter.
Proof. E − n ≥ T is true because for all i, E
total total i
Note that an E -optimal algorithm is necessarily T -
increases whenever A moves, and A spends one time max max
i i
optimal,andanE -optimalalgorithmisnecessarilyT -
step in which it does not move becoming settled. T ≥ total total
total
(cid:80)n
dist(s,v ) because every v must be reached by some
optimal. The reverse is not true, because in some algorithms,
i=1 i i a robot might stop in place for several time steps despite
robot that arrived at s. By similar reasoning E − 1 ≥
max
not being settled. We compare the difficulty of minimizing
T ≥ max dist(s,v ). Furthermore, M ≥ 2n, since
max 1≤i≤n i
energytominimizingtravelormakespaninPropositionsIII.4,
werequirenrobotstosettleinallvertices,andnewrobotscan
III.5, and III.10. Taken together, these results say that there
only arrive at s in time steps where s is unoccupied, meaning
exist swarm-robotic algorithms that minimize makespan and
it takes at least 2n−1 timesteps for n robots to arrive, and
travel, but no such algorithm exists for minimizing energy.
an extra time step for the final arrived robot to settle.
This shows that minimizing energy is fundamentally harder
than minimizing travel or makespan.
Proposition III.3. Let R be an environment with n locations
v 1,v 2,...v n and source s. Then: Proposition III.4. There is a (2,O(1),O(1))-algorithm that
1) E∗ −n=T∗ =(cid:80)n dist(s,v ) obtains M=M∗ in any environment. [3]
total total i=1 i
2) E∗ −1=T∗ =max dist(s,v )
max max 1≤i≤n i 1Or,equivalently,analgorithmthatrequiresvisibilityequaltothecurrent
3) M∗ =2n environment’sdiameter.5
Proof. (Sketch.) This result is due to Hsiang et al. [3]. In [3], Definition III.7. If robots executing an algorithm ALG only
it is shown an algorithm called ‘Depth-First Leader-Follower” move during time steps that are multiples of ∆, ALG is said
(DFLF) obtains 2n makespan2. We briefly sketch the main to have delay ∆.
ideas here.
Definition III.7 helps us capture the idea of a decentralized
DFLF operates as follows: by default, each robot A
i+1 algorithm simulating a centralized one at the cost of some
chases its predecessor A by taking a step along the shortest
i multiplicative delay ∆ in execution time. Any centralized
path to it. The first robot A is designated as a ‘leader-
1 algorithmALGcanbesloweddownintoa∆-delayalgorithm
explorer’ and attempts, at every time step, to move to an
ALG’ by simply waiting ∆ − 1 time steps between each
unexplored location (it keeps track of these locations with
movement command that ALG issues. If a decentralized
finitememorybyexploitingthepropertythatalready-explored
algorithmsimulatesALG’,meaningthatatanytimestept,the
location either contains a robot A , or will contain one in
i decentralized algorithm and ALG’ move robots to the exact
the next time step). When A cannot move to an unexplored
1 same positions, we say that it simulates ALG at delay ∆.
location it settles, and A becomes the new leader-explorer,
2
andsoon.ThisresultsintherobotsexploringRviatheedges Definition III.8. Given a swarm of robots executing some
ofanimplicitspanningtree,andtheanalysisof[3]showsthis (centralized or decentralized) algorithm ALG over an envi-
algorithm obtains 2n makespan.3 ronment R, we define GV to be a graph whose vertices are
t
allrobotsthathaveenteredtheenvironmentattimetorbefore
PropositionIII.5. Thereisa(2,1,O(nlogn))-algorithmthat
and where there is an edge between every two robots A , A
obtains T =T∗ and T =T∗ in any environment i j
total total max max whose distance to each other is at most V. GV is called the
consisting of n locations or less. t
V-visibility graph at time t.
Before proving Proposition III.5, we shall prove a more AnalgorithmALGiscalledV-visibility preservingoveran
general claim. A centralized algorithm is an algorithm where environment R if GV is connected at every time step t.
t
a central computer sees, simultaneously, what all the robots
PropositionIII.9. LetRbearegionconsistingofnlocations.
in the environment see, and issues commands simultaneously
Let ALG be any centralized V-visibility preserving algorithm
to all of them at the beginning of each time step. If the
thatrequiresS bitsofmemoryandvisibilityV whenexecuted
R
robots have sensing range V, such an algorithm can see any
over R. Then ALG can be simulated by a decentralized
location that is at distance V or less from any robot in the
(V,1,O(nlogn) + log∆ + S )-algorithm at delay ∆ for
R
swarm,andcontrolthemovementsoftherobotsbasedonthis
some ∆≥CVnlogn where C is a sufficiently large constant
information. By definition, centralized algorithms require no
independent of R and ALG.
communication, so they can be parametrized by the visibility
V oftherobotstheycontrol,andthenumberofpersistentstate Proof. Wedescribeadecentralized(V,1,O(nlogn)+log∆+
memory bits S that they maintain between time steps. S R)-algorithm simulating ALG at delay ∆.
Wewishtoshowthatundercertainconditions,decentralized Let ALG’ be the ∆-delay version of ALG. Our robots
robots can simulate centralized algorithms. For example, let will operate in phases, each consisting of ∆ time steps. The
us observethat when thesensing range V is large,centralized location of a robot A during the entirety of phase i will
algorithms can easily be simulated: correspond exactly to its location at the end of time step ∆i
of ALG’.
Observation III.6. Let ALG be a centralized algorithm re-
Defining s to be located at (0,0), the algorithm has robots
quiringS persistentstatememoryandvisibilityV torunover
R keeptrackofthe(x,y)coordinatesofthemselvesandofother
anenvironmentRofdiameterD(i.e.,thedistancebetweenany
robots’ positions, as well as the coordinates of obstacles. It
twolocationsinR isatmostD).ThenALGcanbesimulated
works as follows: whenever a robot enters a new phase, it
in R by decentralized (D,0,S )-robots.
R spendsO(V logn)timestepsbroadcastinga“statusmessage”
Proof. When robots see the entire region (i.e., V = D), they containing its location, and the coordinates of any previously
allhaveaccesstothesameinformationandcansimulateALG unreportedobstaclesitsees.ThemessagerequiresO(V logn)
independently. bits because the perimeter of the set of visible locations for
each robot consists of at most 4V locations, and we report
Observation III.6 says that when robots’ sensing range V
logn bits per coordinate. Any robot that receives a reported
is large enough, any centralized algorithm can be simulated
robot or obstacle position then broadcasts it to its neighbours
by a decentralized algorithm. Let us now show that when
(once per position).
the robots’ memory capacity S is large enough, decentralized
By this propagation process, assuming the visibility graph
robots can simulate a large class of centralized algorithms at GV remains connected, every robot learns the positions of all
t
the cost of some multiplicative delay in execution time, even
theotherrobotsduringthecurrentphase,andanynewobstacle
when visibility and communication are heavily restricted.
theysee,uponreceivingatmostn−1statusupdatemessages.
It receives this information during every phase. Hence, by
2The original paper [3] shows 2n−1 makespan, but does not consider taking into account the robots’ visibility range V and remem-
settlingasadistinctactionrequiringanothertimestep. bering also previously-reported obstacle coordinates, it can
3In[3],DFLFisimplementedforfinite-automata,anonymizedrobotswith
know what every robot currently sees. This means it knows
localpoint-to-pointcommunication.However,theirimplementationcaneasily
beconvertedtofitourbroadcastcommunicationmodelaswell. everything ALG’ sees at any given time step. Since every6
robotalsohasthememorycapacityrequiredtoexecuteALG’ Propositions III.4 and III.5 establish that decentralized
(S ),itcansimulateitsnextstepaccordingtoALG’.Atevery swarm-robotic algorithms exist minimizing makespan and
R
timestep,eachrobotmaintainsaninternalcounter.Whenthis travel in all environments. These algorithms assume constant
counterreaches∆,therobotmovesaccordingtoALG’,resets sensing range V and communication bandwidth B, and either
the counter to 0, updates its phase, and begins entire process constant memory capacity S (Proposition III.4) or memory
anew. Robots only keep track of the parity (even or odd) of capacity that scales with the size of the environment (Propo-
their phase, to save memory. sition III.5). Let us now show that, as long as the robots’
Since there are at most n messages of length O(V logn) sensing range is finite, no algorithm exists for minimizing
that need to be propagated, and every robot can transmit energy in all environments, irrespective of memory capacity
one bit per time step, each phase takes at most O(Vnlogn) and communication bandwidth. In fact, we shall prove that
time steps. Hence, assuming delay ∆ ≥ C ·Vnlogn for a even a centralized algorithm does not exist for minimizing
sufficiently large constant C, the decentralized robots have energy:
sufficienttimetoreceiveallmessages,andtheysimultaneously
Proposition III.10. Assuming robots’ sensing range V is
simulate the next step of ALG when the counter reaches ∆.
finite, no centralized algorithm for uniform dispersion is
Keeping track of the counter requires log∆ bits. Keeping
E -optimal in all environments.
total
track of robot and obstacle coordinates requires O(nlogn)
bits. In total, we require O(nlogn) + log∆ + S bits of The proof relies on the construction of a set of environ-
R
memory. ments. Given any algorithm for minimizing energy, ALG, we
shallproveitissub-optimalinatleastoneenvironmentinthe
set.
Proposition III.9 says that robots with extra memory can
TheenvironmentG(k,r)isdepictedinFigure1.Itconnects
simulate any V-visibility preserving centralized algorithm,
10rcolumnsofwidth1.Adjacentcolumnsarespaced2rcells
assuming we also slow the algorithm down by a factor of
apart.Thebottomrowisconnectedtoallthecolumns,andhas
∆=O(Vnlogn)(wesuspectthatthisresultcanbeoptimized
length 20r2. All columns but the 1st and kth columns have
to require smaller ∆, but we do not pursue this here). Note
height 30r2. The 1st and kth columns have height 30r2+1,
that the class of V-visibility preserving algorithms is quite
and are connected to the top row, as seen in the Figure. The
expressive: for example, it includes the uniform dispersion
source, s, is assumed to be at the bottom left.
algorithmsofHsiangetal.andothers[3,5,6],andtheuniform
dispersion algorithms presented in this work.
Let us now prove Proposition III.5.
Proof. Let us first describe a centralized algorithm that min-
imizes travel. The algorithm operates in phases. At each
phase it continues expanding a BFS tree of the environment.
Specifically,LetT(i)bethesetofnodesbelongingtothetree
atphasei.Atthebeginningofphasei,thereisarobotatevery
node of T(i). T(1) contains only the source vertex, s. T(i)
contains all nodes at distance i from s. T(i+1) is obtained
by sending a robot to each location at distance i+1 from s,
thereby adding nodes and edges to the tree (the centralized
algorithm sees and can compute these locations due to having
a robot at every location at distance i from s), and also a
robot to each location in T(i) that is left empty by its robot
leaving it. The robots strictly traverse using only the edges
Fig.1:SketchoftheenvironmentG(k,r)(notdrawntoscale).
of the BFS tree, hence always take shortest paths to their
With this construction in mind, let us prove Proposi-
location (note that this may force a robot to wait in place
tion III.10.
for several time steps while waiting for a robot to leave the
tree node it wishes to move to). Hence, this algorithm obtains Proof. Assume for contradiction that ALG is a uniform dis-
optimaltravel:thesumtotalofmovementsmadebytherobots persion algorithm that is total energy-optimal in all environ-
is T t∗
otal
=(cid:80)n i=1dist(s,v i) and the maximal individual travel ments. We study the actions of ALG over the environment
is T m∗
ax
=max 1≤i≤ndist(s,v i). G(k,V). We shall show that there exists 1 ≤ k ≤ 10V for
This is a 2-visibility preserving centralized algorithm re- which ALG is sub-optimal over G(k,V), or some rotation
quiringO(nlogn)memory,asateachphaseweneedtostore and reflection of G(k,V).
inmemoryatmostn−1edgesrepresentingthetree,andeach At time t = 0, A can move either up or right. Since any
1
edge connects two locations whose coordinates can be stored distinct feature of G(k,V) is at least at distance V +1 from
using O(logn) bits (setting s as (0,0)). By Proposition III.9, A , these directions are indistinguishable to A . Hence, we
1 1
a decentralized (2,1,O(nlogn))-algorithm therefore exists can assume w.l.o.g. that ALG makes A take a step up (if it
1
simulating a ∆=O(nlogn)-delay version of it. steps right, we simply rotate and reflect G(k,V)).7
By assumption, the energy use of ALG over G(k,V) is Our argument does not exclude the possibility of an al-
E∗ = n+(cid:80) dist(s,v). This assumption implies gorithm that is E -optimal, and we do not know if such
total v∈G(k,V) max
thateveryrobottravelsashortestpathtowhereveriteventually an algorithm exists. We leave this as an open problem for
settles, without rests. In particular, A must be active for pre- interested readers.
1
cisely dist(A ,v )+1 time steps, where v is the destination
1 1 1
at which A 1 chooses to settle. IV. MINIMIZINGENERGYINSIMPLYCONNECTED
We make several observations: REGIONS
1) Once A stepped up, it has committed to stepping up We’veshownthatnoswarmalgorithmexiststhatoptimizes
1
and right until reaching v , as staying in place or going energy in every environment, regardless of the robots’ ca-
1
inathirddirectioncausesitspathtov tobelongerthan pabilities. In this section, we will show that it is possible
1
dist(s,v ) steps, causing the total energy use of ALG to to minimize energy in a large class of environments called
1
be greater than E∗ –a contradiction. “simply connected” environments:
total
2) v cannot be a vertex in the first column or in the top
1 Definition IV.1. A environment R is said to be simply con-
row except the top vertex of column k or one vertex
nected if R is connected and Rc is connected (i.e., there is a
to its left, as should v not equal these, settling there
1 pathbetweenanytwoverticesinRc consistingonlyofvertices
would block off the path to parts of the top row via the
in Rc).
first column, and force other robots to travel these parts
throughcolumnk.Thisissub-optimal,andwillcausethe Equivalently,Rissimplyconnectedifandonlyifitcontains
total energy to increase beyond E t∗ otal–a contradiction. no “holes”: any path v 1v 2...v 1 of vertices in R that forms a
3) v cannot be any vertex in the kth column other than the closed curve does not surround any vertices of Rc.
1
top of the kth column, as this would require A to step Surprisingly, not only can we minimize energy in sim-
1
downwards. ply connected environments, we can do so with a (2,0,5)-
algorithm. Such an algorithm can be considered a “strongly
(*) From (1)-(3) we conclude that v must equal precisely
1 decentralized”, ant-like algorithm, i.e., an algorithm requir-
the top vertex of the kth column or one vertex to its left.
ing no communication, and small, constant visibility range
Let T =30V2+2 be the time step at the end of which A
1 and persistent state memory, to run in its target class of
reaches the top row. Since ALG is energy-optimal, no robot
environments (in this case, simply connected environments).
can stay at s for more than one time step, so by the time A
1 We elaborate on the claim that such algorithms are strongly
reaches the top row, there will be 4V robots in G(k,V) that
decentralizedinAppendixA.Themainresultofthissectionis
have been around for at least T −8V −2 time steps (energy
an algorithm for (2,0,5)-robots, called “Find-Corner Depth-
optimality forces robots to always move away from s, so a
FirstSearch”(FCDFS),thatenablestherobotstodisperseover
newrobotmustemergeatsoncepertwotimesteps).Eachof
any simply-connected region R while being energy-, travel-
these4V robotsmusthavealreadyenteredoneofthecolumns
and makespan-optimal:
or settled, since they travel optimal paths to their destination,
and the totallength of the bottom rowis 20V2 <T−8V −2. Proposition IV.2. FCDFS is an E , E , T , T ,
total max total max
Note that at and before time T, none of the top vertices of and M-optimal (2,0,5)-algorithm for uniform dispersion in
the other columns have been seen, so ALG must follow the simply connected environments.
courseofactionoutlinedaboveindependentofk.Notefurther
FCDFSensuresthatthepathofarobotfromstoitseventual
that as there are 10V columns, there must exist a column,
destination (the vertex at which it settles) is a shortest path in
columnk∗,thatnoneoftherobotsA ,...,A haveentered.
1 4V R. The idea of the algorithm lies in the distinction between a
Let us set k = k∗. We shall show that ALG must act sub-
corner and a hall (see Figure 2 and Figure 3):
optimally in G(k∗,V).
When A reaches v , the above indicates that any other Definition IV.3. A vertex v of a grid environment R is called
1 1
robot currently present in the k∗th column (if there are any) a corner if either:
emerged at s at least 2·4V time steps after A . Therefore it (a) v has one or zero neighbours in R, or
1
is at distance at least 8V from A , meaning that there is a (b) v haspreciselytwoneighboursuandu′ inR,anduand
1
segment of 6V vertices in column k∗ that no robot has seen u′ have a common neighbour w that is distinct from v.
yet.ThisindicatesthatALGmustmakethesamedecisionfor
Definition IV.4. A vertex v of R is called a hall if it has
A whethertheseverticesexistornot.However,ifanyoneof
1 precisely two neighbours u and u′, and u and u′ are both
these vertices does not exist, then column k∗ is not connected
adjacent to the same vertex w in Rc.
to the top row, indicating that A cannot settle at the top of
1
the k∗th column or to its left, else it will block off part of the Essentially,hallsareverticesinRthatareblockedbywalls
environment. We arrived at a contradiction to (*). ontwosides,andhaveanadditionalwallw diagonaltothem.
Cornersareeitherdead-ends,orverticesinRthatareblocked
By adding more columns to the G(k,r) construction and by walls on two sides, and have a vertex w of R diagonal to
increasing the height of the columns, we can force A to go them.Ifviseitherahalloracorner,wiscalledthe“diagonal”
1
down more and more steps, causing the difference between of v, and is denoted diag(v). We observe that diagonals are
E∗ andthetotalenergyuseofALGtobearbitrarilylarge. uniquely specified.
total8
Fig.2:Possiblecorners.WhiteverticesarelocationsinR,and
blue vertices are walls, i.e., vertices in Rc.
Fig. 3: A hall.
RobotsexecutingFCDFSattempttomoveonlyin‘primary’
and ‘secondary’ directions, where the secondary direction is
alwaysa90-degreeclockwiserotationoftheprimarydirection
(for example ”up and right”, ”right and down”, or ”down and
left”).Theymayonlychangetheirprimarydirectiononcethey
arrive at a hall (Figure 4, Figure 5), and they settle once both
their primary and secondary directions are blocked and they Fig. 5: Snapshots from a simulation of FCDFS. Rather than
are at a corner. block active robots, the settled robots form halls to enable the
swarm to explore more of the environment.
importanttodesignFCDFSsothatarobotnevermisidentifies
a corner of R(t) as a hall due to an active robot (rather than
a wall or a settled robot) occupying the diagonal and being
identifiedasanobstacle.Forthispurposeweenableourrobots
to remember their two previous locations. We will show that
an active robot can occupy the diagonal of a corner at time t
if and only if its predecessor occupied this diagonal at time
t−2, thereby allowing the predecessor to distinguish between
’real’ and ’fake’ halls.
Pseudo-code for FCDFS is given in Algorithm 1. The code
outlines the Compute step of the Look-Compute-Move cycle.
Note that since our robots operate in Look-Compute-Move
cycles,whenthe pseudocodesays“step,”wemean thatthisis
the step the robot will take during the Move phase, and not a
movementthatoccursduringcomputation.InAlgorithm1,we
denote by prev(A) the position of a robot A at the beginning
of the previous time step, and by next(A) its position at
the beginning of the next time step. Appendix B shows how
FCDFS can be implemented using 5 bits of persistent state
Fig. 4: A snapshot from an example run of FCDFS. s is the memory (see Algorithm 3).
green circle, black arrows are active robots, black “dots” are
settled robots, the blue region is Rc and the white region is A. Analysis
R. The primary direction of each robot is indicated by the In this section we analyze the FCDFS algorithm and prove
direction the arrow representing it is facing. Red arrows point its optimality.
to some of the halls.
Lemma IV.5. Let c be a corner of a simply connected region
R. Then:
AsinPropositionIII.3,letR(t)betheinitialenvironmentR
(a) R−c(theregionRafterremovingc)issimplyconnected.
afterremovingeveryvertexthatisoccupiedbyasettled robot
(b) For any two vertices u,v in R−c, the distance between
at time t. A robot running FCDFS at time t is searching for
u and v is the same as in R.
the corners and halls of R(t). However, since we assume no
communication capabilities, robots are unable to distinguish Proof. Removing c does not affect connectedness, nor does it
betweenactiverobots,andwallsorsettledrobots.Hence,itis affect the distance from u to v, as any path going through c9
Algorithm 1 Find-Corner Depth-First Search (local rule for
active robots)
Let v be the current location of A.
if all neighboring vertices of v are occupied then
Settle.
else if A has never moved then ▷ Initialization
Search clockwise, starting from the ”up” direction, for
an unoccupied vertex, and set primary direction to point to
that vertex.
Fig. 6: The two possibilities for PP′.
end if
if A can move in its primary direction then
Step in the primary direction.
represent one of these components, connect C and C by an
i j
else if A can step in secondary direction then
edgeiftheyarebothadjacenttothesamehallinR.WesetC
1
Step in the secondary direction.
to be the root of the tree, and to be the connected component
else ▷ We are at a corner or a hall.
containing the door vertex s.
if Three neighboring vertices of v are occupied then
By Lemma IV.5, assuming our robots correctly stop only at
Settle. ▷ Corner with three walls.
corners, R(t) can in the same manner be decomposed into a
else if prev(prev(A)) = diag(v) or diag(v) is unoc-
tree T(R(t)) whose vertices represent connected components
cupied then
C (t),C (t),.... These components are each a sub-region of
1 2
Settle.
some connected component C of R.
i
else ▷ We think we are at a hall.
In the next several propositions, we make the no fake halls
Set primary direction to point to the neighbour of v attimetassumption.Thisistheassumptionthatforanyt′ <t,
different from prev(A). at the end of time step t′: robots can only become settled at
Move in the primary direction. corners of R(t′), and can only change primary directions at
end if halls of R(t′). We will later show that the “no fake halls”
end if
assumption is always true, so the propositions below hold
unconditionally.
can instead go through diag(c). Further, as c is adjacent to PropositionIV.7. Assumingnofakehallsattimet,arobotA i
two walls, no path in R−c can surround it, so R−c also active at the beginning of time step t has traveled an optimal
remains simply connected. path in R from s to its current position.
An articulation point (also known as a separation or cut Proof. Bytheassumption,theonlyrobotsthatbecamesettled
vertex) is a vertex of a graph whose deletion increases the did so at corners. Consequently, by Lemma IV.5, R(t) is a
numberofconnectedcomponentsofthegraph(i.e.disconnects connectedgraph,andthereisapathinR(t)fromstoA i.The
the graph) [42]. path A i took might not be in R(t), but whatever articulation
points (and in particular halls) A passed through must still
i
Lemma IV.6. The halls of a simply connected region are
exist, by definition.
articulation points.
Since A is active at the beginning of time t, by the
i
Proof. Let h be a hall of a simply connected region R. algorithm, it has taken a step every unit of time up to t. Until
Suppose for contradiction that h is not an articulation point, A i enters its first hall, and between any two halls A i passes
and let u and u′ be the neighbours of h. Then there is a path through,itonlymovesinitsprimaryandsecondarydirections.
from u to u′ that does not pass through h. Let P be this path, This implies that the path A i takes between the halls of R(t)
and let P′ be the path from u to u′ that goes through h. must be optimal (since it is optimal when embedded onto the
When embedded in the plane in the usual way, R is in integer grid Z2). We note also that A i never returns to a hall
particular a simply connected topological space. The hall h is h it entered a connected component of R(t) from, since the
embedded onto a unit square, whose four corners each touch (possibly updated) primary direction pulls it away from h.
a wall: three touch the two walls adjacent to h, and the fourth We conclude that A i’s path consists of taking locally
touches diag(h). Joined together to form a closed curve, the optimalpathstotraversetheconnectedcomponentsofthetree
pathsP andP′ formarectilinearpolygonthatmustcontainat T(R(t)) in order of increasing depth. Since in a tree there is
leastonecornerofhinitsinterior.Hence,thecurvePP′ inR only one path between the root and any vertex, this implies
containsapartofRc.Thisisacontradictiontotheassumption that A i’s path to its current location is at least as good as the
that R is simply connected, as it implies Rc has at least two optimalpathinR(t).ByLemmaIV.5,b,thisimpliesthatA i’s
disconnected components. (See Figure 6). path is optimal in R.
Lemma IV.6 indicates that R can be decomposed into a Corollary IV.8. Assuming no fake halls at time t,
tree structure T(R) as follows: first, partition R into the dis- (a) Foralli<j,thedistancebetweentherobotsA andA ,
i j
tinct connected components C ,C ,...,C that result from if they are both active at the beginning of t, is at least
1 2 m
the deletion of all halls. Letting the vertices of T(R) each 2(j−i)10
(b) Nocollisions(tworobotsoccupyingthesamevertex)have or a hall. If it is a corner, then diag(v) is an active agent.
occurred. By Corollary IV.8, it is either A or A . It cannot be
i+1 i−1
A , as then A ’s position two time steps ago would have
Proof. Forproofof(a),notethatatleasttwounitsoftimepass i+1 i
been diag(v), so it would become settled instead of changing
between every arrival of a new robot (since in the first time
directions.ItcannotbeA ,asdiag(v)isatleastascloseto
step after its arrival, a newly-arrived robot blocks s). Hence, i−1
s as v is, and A has arrived earlier than A , and has been
whenA arrives,A willhavewalkedanoptimalpathtowards i−1 i
j i takingashortestpathtoitsdestination.Hence,diag(v)cannot
its eventual location at time t, and it will be at a distance of
be an active agent, and v must be a hall as claimed.
2(j −i) from s. This distance is never shortened up to time
t, as A will keep taking a shortest path.
i Wehaveshownthatthenofakehallsassumptionisjustified
(b) follows immediately from (a).
at all times t, hence we can assume that the propositions
Using Corollary IV.8 it is straightforward to show: introduced in this section hold unconditionally.
Lemma IV.9. Suppose A is active at the beginning of time Proposition IV.11. Let V be the number of vertices of R. At
i
step t. Assuming no fake halls at time t, next(A ) = the end of time step 2n, every cell is occupied by a settled
i+1
prev(A ). robot.
i
LemmaIV.9alsoimpliesthatifA isactiveatthebeginning Proof. Propositions IV.7 and IV.10 imply that robots take a
i
of time step t, then A will be active at the beginning of shortestpathinRtotheirdestination.Thatmeansthataslong
i+1
time step t+1. as the destination of a robot is not s itself, robots will step
We can now show that the “no fake halls” assumption is awayfromsoneunitoftimeaftertheyarrive.Untilthen,this
true, and consequently, the propositions above hold uncondi- means that robots arrive at s at rate one per two time steps.
tionally. Everyrobot’send-destinationisacorner,andbytheinitial-
izationphaseofthealgorithm,thedestinationisneversunless
PropositionIV.10. Foranyt,attheendoftimestept:robots
s is completely surrounded. Since there are no collisions,
only become settled at corners of R(t), and only change
there can be at most n robots in R at any given time. By
primary directions halls of R(t) (not including the primary
Lemma IV.5, robots that stop at corners keep R connected.
direction decided at initialization).
Furthermore, every R(t) is a rectilinear polygon, so unless it
Proof. The proof of the proposition is by induction. The base has exactly one vertex, it necessarily has at least two corners.
case for t=1 is trivially true. Thismeansthatthedestinationofeveryrobotisdifferentfrom
Suppose that up to time t−1, the proposition holds. Note sunlesssistheonlyunoccupiedvertex.Hence,arobotwhose
that this means the “no fake halls” assumption holds up to destinationisswillonlyarrivewhensistheonlyunoccupied
time t, so we can apply the lemmas and propositions above vertex, and this will happen when n robots have arrived, that
to the algorithm’s configuration at the beginning of time t. is, after at most 2n−1 time steps. After another time step,
We will show that the proposition statement also holds this robot settles, giving us a makespan of 2n. This is exact,
at time t. Let A be an active robot whose location at the since it is impossible to do better than 2n makespan.
i
beginning of t is v. First, consider the case where v =s. The
algorithm only enables A to settle at s if it is surrounded by Propositions IV.11 and IV.7, alongside the “no fake halls”
i
obstacles at all directions. Any obstacle adjacent to A must proof, complete our analysis. They show that FCDFS has
i
be a wall of R(t) (as any active robot must be at a distance at an optimal makespan of M = M∗ = 2n, and also that
least 2 from A , due to Corollary IV.8). Hence, if A settles E = E∗ = 1 + max dist(s,v) and E =
i i max max v∈R total
at s, s is necessarily a corner, as claimed. E∗ = n + (cid:80) dist(s,v), since every robot travels
total v∈R
We now assume that v ̸=s. We separate the proof into two a shortest path to its destination without stopping. By the
cases: same reasoning, T = T∗ = max dist(s,v) and
max max v∈R
Case1:SupposeA becomessettledattheendoftimestep T =T∗ =(cid:80) dist(s,v).
i total total v∈R
t. Then by the algorithm, at the beginning of t, A detects In practice, the energy savings of FCDFS are dependent
i
obstacles in its primary and secondary directions. These must on the shape of the environment R. We take as a point
be walls of R(t) due to Corollary IV.8, so v is either a corner of comparison the Depth-First Leader-Follower algorithm of
or a hall of R(t). If three neighbors of v are occupied then v Hsiang et al. [3], described in Proposition III.4. On a 1-
is a corner. Otherwise, since A settled, we further know that dimensional path environment of length n, both FCDFS and
i
either diag(v) is empty, or prev(prev(A ))=diag(v). In the DFLFrequirethesametotaltravel,O(n2),sonoimprovement
i
formercase,v isacornerofR(t).Inthelattercase,weknow is attained. In contrast, on an n-by-n square grid, DFLF
from Lemma IV.9 and from the fact that no collisions occur requires total travel O(n4) in the worst case, and FCDFS
that the only obstacle detected at diag(v) is A , which is requires O(n3) - significantly less. This is because the DFLF
i+1
an active robot, so v is again a corner of R(t). In either case strategy starting from a corner might cause the leader, A ,
1
a corner is detected and the agent is settled. to “spiral” inwards into the grid, covering every one of its
Case 2: Suppose A changed directions at the end of time n2 vertices in n2 −1 moves. The robot A will then make
i i
step t. Then it sees two adjacent obstacles, and an obstacle n2 − i moves, for a sum total of O(n4). FCDFS, on the
at diag(v). As in case 1, we infer that v is either a corner other hand, distributes the path lengths more uniformly. More11
environments are compared in Section VI. Note that both between obstacles (or settled robots) and active robots. In an
algorithms take the exact same amount of time to finish. asynchronous time scheme, the inability to recognize active
Where is it best to place s? If we want to minimize robots can also cause robots to split away from the trail of
the total travel, by the formula given above, the best place robots that tends forms under FCDFS (see Figure 4). Both
to place s is the vertex of R that minimizes the sum of these issues can be fixed by enabling the robot executing
(cid:80)
distances dist(s,v) (there may be several). This is the FCDFS to detect active robots. This can be done by giving
v∈R
discrete analogue of the so-called Fermat-Toricelli point, or robots a single bit of communication bandwidth (B =1) and
the “geometric median” [43]. havingthembroadcast‘1’aslongastheyareactive,indicating
that they are active robots (in fact, this requires “less” than a
bit of memory, since the robots never need to broadcast ‘0’).
B. Alternate Optimal Strategies
Notethat,strictlyspeaking,suchrobotsarenolongerant-like,
but they still have very low capability requirements.
AnasynchronousversionofFCDFSincorporatingtheabove
idea isoutlined inAlgorithm 2. Wecall thisversion “Asynch-
FCDFS” and it is a (2,1,5)-algorithm.4
Essentially, Algorithm 2 causes every robot to follow the
same path it would under regular FCDFS, by requiring that it
wait in place if an active robot is occupying the direction it
wants to step in, until that active robot frees up space. This
immediately tells us that Algorithm 2 is T and T -
total max
optimal. Our main goal is thus to analyze the energy and
makespan cost of the “pauses”. Since our robots’ activation
Fig. 7: Robots navigate according to “left hand on wall” until
times are now drawn from a random distribution, we will
a corner is found.
bound these costs probabilistically.
Studying the interactions of independently activating au-
ThekeyideaofFCDFStomaintaina“geometricinvariant”:
tonomous particles (in this case, modelling our robots) is
the environment must remain simply connected after a robot
generally considered a difficult and technical problem. Our
settles. As long as this invariant is maintained, the underlying
key strategy is to side-step the difficulties of analyzing these
details of the algorithm can vary. For example, a possible
interactions from scratch by relating a swarm of robots ex-
variant of FCDFS that is similarly time- and energy-optimal
ecuting AsynchFCDFS to the “Totally Asymmetric Simple
is shown in Figure 7 (analysis omitted). Rather than stick to
Exclusion Process” (TASEP) in statistical physics. Our high
their secondary and primary directions, robots move using a
level strategy is to use coupling to show that, in the worst
“left hand on wall” rule until they hit a corner or a wall.
case, AsynchFCDFS behaves similar to what is referred to as
TASEP with step initial conditions, which is nowadays well-
V. ASYNCHRONOUSFCDFS
understood [22–24, 37, 38]. The main idea for this approach
In real-world multi-robot systems, each autonomous robot comes from [7], in which the makespan of a different (“dual-
activates asynchronously, independent of other robots. One layered”)uniformdispersionalgorithmisstudiedusingsimilar
way to introduce asynchronicity into our system is to assume techniques. We generalize the techniques of [7] to study
that at every time step, each robot has only a probability p of makespan and energy in our setting.
√
waking up. When a robot wakes up, it performs the same Define the constant α = 1(1 − 1−p). We show the
2
Look-Compute-Move cycle as before. The source vertex s following bound on makespan:
wakes up at every time step with probability p, and upon
wake-upinsertsarobotintoR,assumingnorobotiscurrently PropositionV.1. ThemakespanofAsynchFCDFSoveranyre-
located at s. Since we assume our robots communicate by
gionRwithnverticesfulfillsM≤(1+o(1))nasymptotically
α
light,sound,orotherlocalphysicalsignals,weassumethatthe almost surely for n→∞ (i.e., with probability converging to
lastmessagebroadcastbyarobotA continuestobebroadcast 1 as n grows to infinity).
i
in subsequent time steps, until A broadcasts a new message.
i Setting p = 1 gives M = (2 + o(1))n, asymptotically
In other words, we assume that as long as A is active, it
i matching the synchronous case. Regarding energy consump-
continuously broadcasts its last message. This is akin to A
i tion, we are able to show:
turning on a light or continuously emitting a sound.
These modifications, leaving everything else in our model Proposition V.2. In an execution of AsynchFCDFS over
the same (Section II), result in an asynchronous model of any region R with n vertices, E max ≤ 2( α1 +
swarms with local signalling. We wish to find a version of o(1))max v∈Rdist(s,v) asymptotically almost surely for n→
FCDFS that works in this asynchronous setting, and to study ∞.
itsperformance.FCDFSasimplementedinAlgorithm1relies
crucially on the synchronous time scheme to identify halls. 4The5-bitimplementationissimilartothesynchronouscase(AppendixB).
If we were to optimize, AsynchFCDFS can probably be implemented
This is primarily because, assuming 0 bits of communication
with even less memory, by taking further advantage of the added bit of
bandwidth, robots in our model cannot tell the difference communication–butwedidnottestsuchimplementations.12
Algorithm 2 Asynchronous Find-Corner Depth-First Search of optimal maximal individual energy use. Conjecture V.3
(local rule for active robots) hypothesizes the same is true regarding total energy use.
Broadcast “1”. ▷ Inform other robots that you are active. Hence, we believe AsynchFCDFS to be highly energy- and
Let v be the current location of A. makespan-efficientinasynchronoussettings,justasFCDFSis
Let v be the closest vertex in the primary direction in synchronous settings.
primary
of A.
Let v be the closest vertex in the secondary direc-
secondary
A. Analysis
tion of A.
if all neighbouring vertices of v contain obstacles that are The execution of (synchronous) FCDFS over a region of
not robots broadcasting “1” then interest R is deterministic, and so we know in advance the
Settle. path each robot shall take. Let us define a graph, G(R),
else if A has never moved then ▷ Initialization whose nodes are the locations of R and where there is
ifaneighborofvcontainsarobotbroadcasting“1”then an edge between two locations v ,v if at some point a
i j
Do nothing this time step.▷ Wait until active robots robot moves from v to v during an execution of FCDFS.
i j
move away. Recalling our analysis of FCDFS, it is not difficult to prove
else thatG(R)isatree.Althoughrobotwake-uptimesarerandom
Search clockwise, starting from the ”up” direction, in our asynchronous model, the ultimate path each robot
for an unoccupied vertex and set primary direction to point follows according to AsynchFCDFS is deterministic - it is
to that vertex. the same path that robot would follow under FCDFS. Hence,
end if in AsynchFCDFS, too, each robot moves down the edges of
end if the tree G(R).
if v primary contains a robot broadcasting “1” then TostudythemakespanofAsynchFCDFS,weusecoupling,
Do nothing this time step. drawing on a technique from [7]. Suppose that there is an
else if v primary is empty then infinite collection of agents A 1,A 2,...A ∞, such that each
Step in the primary direction. agent A wakes up with probability p at every time step t =
i
else if v secondary contains a robot broadcasting “1” then 0,1,.... We can associate with every agent A i a list of the
Do nothing this time step. times it wakes up, called S . Suppose further that we execute
i
else if v
secondary
is empty then FCDFSoverdifferentregions,sayRandR′.LetAR
i
andAR
i
′
Step in the secondary direction. be the ith agents to enter R and R′ respectively. We couple
else ▷ We are at a corner or a hall. AR and AR′ by assuming that both AR and AR′’s wake-up
i i i i
if Three neighboring vertices of v contain walls or times are determined by S . For formal purposes, when AR
i i
settled robots then or AR′ are not yet inside R, we still consider them to “wake
i
Settle. ▷ Corner with three walls. up” at time steps t ∈ S . This is a purely “virtual” wake-up:
i
else if diag(v) is unoccupied or contains a robot broad- such robots do and affect nothing upon wake-up. The source
casting “1” then vertices of R and R′ can similarly be coupled.
Settle. LetP bea“straightpath”regionconsistingofthevertices
n
else ▷ We think we are at a hall. {p | 0 ≤ i < n} where p = (i,0) and the source, s, is
i i
Set primary direction to point to the neighbour of v located at p . Furthermore, consider the stochastic process
0
different from prev(A). called TASEP with step initial conditions [24], which consists
Move in the primary direction. ofaninfinitepathregionP(∞)={p |i∈(−∞,∞)},where
i
end if thereisnosourcesbutinsteadtheagentA isinitiallylocated
i
end if at p . Finally, let R be any region of interest consisting of
−i
n vertices. To study the asymptotic performance of FCDFS
over R, we shall couple the agents over TASEP, P and R
n
We shall also pose the following conjecture, based on a (see Figure 8). Let us denote by ATASEP, AP(n), AR, the ith
i i i
heuristic argument and numerical simulations: agent in each of these coupled processes, respectively.
Conjecture V.3. In an execution of AsynchFCDFS over any
regionRwithnvertices,E ≤(c +o(1))(cid:80)n dist(s,v )
total α i=1 i
asymptotically almost surely for n → ∞ and some constant
c>0.
Since p/α ≤4 and M is bounded below by n/(p−o(1))
asymptotically almost surely (as robots are inserted at rate Fig. 8: Illustration of P(n) and TASEP with step initial
p), Proposition V.1 indicates that AsynchFCDFS’s makespan conditions. Black vertices contain agents. Note that TASEP
is asymptotically within a constant factor of optimal perfor- is infinite and lacks a source vertex.
mance. Similarly, E ≥ 1 max dist(s,v) a.a.s.
max p−o(1) v∈R
(since robots move at rate p), so Proposition V.2 implies We require a notion of the distance an agent has travelled
AsynchFCDFS is asymptotically within a constant factor on R and P(n):13
Definition V.4. The depth at time t of an agent AR executing Corollary V.7. If at least n + 1 TASEP agents have non-
i
FCDFSoveraregionR,denoteddepthR(t),isthenumberof negativexcoordinateattimet thenthemakespanofFCDFS
i 0
times A has moved before time t. depthR(t)=−1 if A has over R obeys M≤t .
i i i 0
not entered R by time t, and 0 at time of entry. We similarly
Note that here we are referring to the makespan of FCDFS
define depthP(n)(t).
i over R in given an arbitrary list of wake-up times. The list
Notethatanyrobotthatincreasesitsdepthismovingdown of wake-up times is randomly distributed (and so is M), but
the tree G(R) from its current location v ∈ G(R) to one of Corollary V.7 is true for any such list.
v’s descendants. Let us prove the following statement:
Proof. SupposeforcontradictionthatsomeagentAR,1≤i≤
i
Lemma V.5. If the agent AR is not settled at time t then: n,isnotsettled,butthen+1agentsATASEP,...ATASEPhave
i 1 n
1) AP(n) is not settled at time t, and non-negativexcoordinate.ByLemmaV.5weinferthatAP(n)
i i
2) depthR(t)≥depthP(n)(t). is not settled, and by Lemma V.5 we infer depthP(n)(t) ≥
i i i
x (t).However,themaximumpossibledepthofAP(n)isn−i,
Proof. We prove this lemma by induction over t. At t = 0, i i
whereasx (t)isatleastn−i+1,sinceatleastn−i+1agents
statements (1) and (2) are vacuously true. Now suppose we i
arelocatedtoitsleftandtotherightofv .Contradiction.
are at time t+1, and statements (1) and (2) hold at time t. 0
Supposeforcontradictionthatstatements(1)or(2)don’thold We can now prove Proposition V.1. We use a similar idea
at time t+1. This means there exists i such that AR is not as Lemma III. 14 of [7].
i
settled at time t+1 and either (a) AP(n) is settled at time
i Proof of Proposition V.1. Let F(t) denote the number of
t+1, or (b) depthR(t+1)<depthP(n)(t+1).
i i agents in TASEP that have non-negative x coordinate at time
Assume first, for contradiction, that (a) is true and (b) is
t. It is known (see, e.g., [24, 40]) that F(t) fulfills:
not true. By the structure of P(n), AP(n) being settled means
i
t vhat ,d .e .p .t vh iP(n) c(t o) nt= ainn th−
e
si e− ttle1 da rn od bot th sat A( Pif (ni ),.> ..A1) Pa (nll
)
o af
t
tl →im ∞P(F(t)−αt≤Vt1/3s)=1−TW 2(−s) (1)
n−i n−1 1 i−1
timet.By(1)and(2),thismeansthatAR,...AR aresettled where V = 2−4/3p1/3(1 − p)1/6 and TW (−s) is the
1 i−1 2
attimet.SinceAR isnotsettledattimet+1,thismustmean Tracy-Widom distribution. TW (−s) obeys the asymptotics
i 2
that either it moved and increased its depth since time t, or it TW 2(−s) = O(e−c1s3) and 1−TW 2(s) = O(e−c2s3/2) as
was adjacent a active agent in one of its primary directions s→∞ for some c ,c >0.
1 2
at time t. The latter is impossible, since (by the FCDFS Lett =(1/α+k−1/3)k.WewishtoshowthatM≤t
k n+1
algorithm) such an agent must have been one of the agents asymptoticallyalmostsurelyasn→∞.ByCorollaryV.7,this
AR 1,...AR i−1. Hence, AR i must have moved at time t. By our is equivalent to showing that X n = P(F(t n) < n) tends to
assumptions,thisimpliesdepthR(t+1)≥depthP(n)(t)+1=
0 as n → ∞ (because the probability that M ≤ t is at least
i i
n−i.Butthisisimpossible,sincethereareatleasti−1settled 1−X ). Define the probability
n+1
agents in R at time t+1, hence the maximum depthan active
agent can have is n−i−1. Contradiction. p(n,s)=P(F(t )−αt ≤Vt1/3s) (2)
n n n
Next, let us assume for contradiction that (b) is true. By
the inductive assumption, this implies that depthP(n)(t) = p(n,s) is clearly monotonic non-decreasing in s. Define
depthR(t) and
depthP(n)(t+1)=depthR(t+1)+i
1, which
s
n
= (n−αt n)V−1t− n1/3, yielding X
n
= p(n,s n). For any
i i i constant C, define Y = p(n,C). Since s tends to −∞ as
can only occur if AP(n) moves at time t and AR does n n
i i n→∞, we must have s <C for sufficiently large n, hence
not. AR not moving at time t implies (due to the fact it n
i X ≤ Y for sufficiently large n. Using Equation (1) and
is moving along the edges of the tree G(R)) that there is n n
taking C → −∞ shows that X tends to 1−TW (∞) = 0
some j < i such that depthR(t) = depthR(t) + 1. Since n 2
j i as n→∞, completing the proof.
AP(n) does move at time t, by the structure of P(n) we infer
i
that depthP(n)(t) > depthP(n)(t) + 1. However, again by The proof of Proposition V.2 uses a similar technique to
j i that of Proposition V.1, so we omit some repetitive details
(2), at time t we have depthR(t) ≥ depthP(n)(t), which
j j and focus on the new ideas:
implies depthR(t) > depthP(n)(t) + 1 = depthR(t) + 1.
j i i
Proof sketch of Proposition V.2. Let d = max dist(s,v).
Contradiction. v∈R
ConsidertheexecutionofAsynchFCDFSoversomeregionR
Let x i(t) be the x coordinate of AT iASEP’s location at time with n vertices. The key idea of the proof is that at any given
t(wherethexcoordinateofv
i
∈P(∞)isi).Itisstraightfor-
time, there can be no more than d active robots in R. This is
ward,usingcouplingandinductionasinLemmaV.5,toshow
because all active agents always trace the path of the active
that: agent A with smallest index i until it settles, and the path of
i
Lemma V.6. If the agent AP(n) is not settled at time t then A i is always a shortest path from s to some vertex v. This
i
depthP(n)(t)≥x (t). path can contain at most d vertices, and so there can be at
i i most d active agents.
Lemma V.6 can also be rephrased as: if depthP(n)(t) < Consider a new agent A that has emerged from s at time
i j
x (t) then AP(n) is settled. As a corollary, we infer: stept.Sincetherecanbeatmostdactiveagentsatatime,A
i i j14
is necessarily settled once d newer agents have emerged from comparing swarm algorithms in terms of robot capabilities,
s. The time it takes d agents to emerge after A is dominated and proved that while makespan and travel can be minimized
j
bythetimeittakes2dagentstoemergeinR(t)(wecanshow in all environments by swarm robotic algorithms with low
thisformallybythesametypeofcouplingasLemmaV.5).As capability requirements, energy cannot be minimized even by
we’ve seen in the proof of Proposition V.1, the time it takes a centralized algorithm, assuming constant sensing range. In
2d agents to emerge in R(t) is dominated by the time it takes contrast, we showed that energy can be minimized in sim-
2d agents to attain non-negative coordinates in TASEP, which ply connected environments by an algorithm called FCDFS,
we’ve previously shown is asymptotically almost surely less executable even by minimal “ant-like” robots with small
than 2(1/α+o(1))d for large values of d. We complete the constant sensing range and memory, and no communication.
proof by noting that d necessarily tends to ∞ as n→∞. We extended FCDFS to the asynchronous setting, showing
it attains energy consumption within a constant factor of the
We believe Conjecture V.3, which states that E is
total optimum.
within a constant factor of optimal energy use, to be true,
Our results shed light on the relationships between the
becauseeveryrobotinAsynchFCDFStravelsthesameoptimal
capabilities of robots, their environment, and the quality of
path it does in FCDFS, and our results in this section hint
the collective behavior they can achieve. The fact that robots
that it may move at a linear rate toward this destination
can minimize the travel or makespan even with very limited
(indeed, Proposition V.2 establishes this for robots that travel
capabilities, but cannot minimize energy even with arbitrarily
distance max dist(s,v)). However, we struggled bounding
v∈R strongcapabilities,atteststothedifficultyofdesigningenergy-
E with our current approach. The main challenge is that
total efficient collective behaviors. On the other hand, the fact that
Equation (1) is given as a limit, making it difficult to estimate
energy can be minimized by ant-like robots in common types
the energy costs of agents that move short or intermediate
of environments suggests energy efficiency in swarm robotic
distances. We pose this as a question for future work.
systems may be practically attainable, especially in restricted
settings. Broadly, our results point to the importance of co-
VI. EMPIRICALANALYSIS
design approaches in swarm robotics, carefully tailoring the
To verify our theoretical findings, we ran numerical sim-
capabilities of robots to the specific features of the environ-
ulations on simply-connected environments of different sizes
ment they are expected to operate in.
andobstacleplacements.Tomeasuretheimprovementattained
The capability-based modeling approach we presented for
by FCDFS and AsynchFCDFS, we compared it to Hsiang et
uniformdispersioncanbeappliedtoothercanonicalproblems
al.’s DFLF and BFLF algorithms [3]. DFLF is described in
in swarm robotics, such as gathering, formation, or path
Proposition III.4. BFLF (Breadth-First Leader-Follower) is a
planning. Doing so may reveal additional gaps in capability
different makespan-optimal dispersion algorithm that seeks to
requirements between robots optimizing different objectives,
spread out the agents in a more even way by having multiple
as well as new co-design opportunities.
leaders, reducing total and maximal individual travel at the
cost of energy. Table II summarizes simulation results in two
different environments. We see that (as anticipated) the travel
ACKNOWLEDGEMENTS
forFCDFSandAsynchFCDFSisidentical,butmakespanand The authors are very grateful to Ofer Zeitouni (Weizmann
energy use are larger for smaller p. Additionally, Asynch- Institute of Science) for helpful discussions.
FCDFS’s average performance is below (i.e., better than) the
bounds of Propositions V.1 and V.2, and Conjecture V.3 for
APPENDIX
the tested p values.
Next, we were interested in how FCDFS and Asynch- A. Ant-like Robots are “Strongly” Decentralized
FCDFS’s performance varies as n (the environment size)
Informally, Proposition III.9 shows that decentralized algo-
grows. We plotted the performance of these algorithms along-
rithmswithsufficientmemoryandcommunicationcapabilities
side DFLF and BFLF on square grids of increasing size: see
areabletosimulateafullycentralizedalgorithmatthecostof
Figure 9. We see that, although the synchronous algorithms amultiplicative(∆)timedelay,aslongastherobots’commu-
DFLF, BFLF and FCDFS are matched in terms of makespan,
nication network remains connected. In other words, as long
FCDFS attains significantly better energy and travel. The
as the network of decentralized robots collectively senses the
asynchronous variant of FCDFS attains worse makespan, as
sameenvironmentaldatathetargetcentralizedalgorithmdoes,
expected (since robots are inactive in some timesteps), but
its decision-making capabilities are just as strong. We claim
still attains better energy and travel than DFLF and BFLF for that ant-like algorithms (algorithms requiring small, constant
p=0.5,0.75.AsynchFCDFS’smaximalindividualenergyuse
visibilityandpersistentstatememory,andnocommunication,
and makespan are below the bounds anticipated by Proposi-
to be run on their target class of environments) are “strongly”
tions V.1 and V.2, and total energy use is below the bound
decentralized: they cannot make the same type of decisions a
anticipated by Conjecture V.3.
centralized algorithm can, even when collectively they sense
the same environmental data. We prove this by giving an
VII. CONCLUSION
example of a centralized, visibility preserving algorithm that
This work studied time, travel, and energy use in the ant-like algorithms cannot simulate, even assuming arbitrary
uniformdispersionproblem.Wepresentedaformalmodelfor ∆-delay.15
TABLE II: Simulation results over the environments shown in Figures 4 and 5. Each measured performance metric written in
the Table is the rounded average of 10 trials.
ExperimentName Ttotal Tmax Etotal Emax M
FCDFS,Fig.4Env.(n=669) 35103 99 35772 100 1338
AsynchFCDFS(p=0.75),Fig.4Env. 35103 99 69092 137 2565
AsynchFCDFS(p=0.5),Fig.4Env. 35103 99 118658 171 4350
BFLF,Fig.4Env. 39649 117 122787 197 1338
DFLF,Fig.4Env. 91959 260 92628 261 1338
FCDFS,Fig.5Env.(n=277) 5909 38 6186 39 554
AsynchFCDFS(p=0.75),Fig.5Env. 5909 38 11783 46 1027
AsynchFCDFS(p=0.5),Fig.5Env. 5909 38 20001 68 1725
BFLF,Fig.5Env. 7313 56 28358 130 554
DFLF,Fig.5Env. 17214 134 17491 135 554
Fig. 9: Comparative results of the algorithms across different metrics. For each k ∈ [1,30], we generated 40 different square
grid environments of size n=k×k with randomly placed source locations. Each data point is the average of 40 simulations
of its respective algorithm, one per grid environment. In each graph, the x axis is n and the y axis is the performance measure
of interest. Note that some algorithms overlap perfectly on metrics such as makespan.
LetP bea“straightpath”regionconsistingofthevertices algorithm exists that simulates ALG(2s+v+2,2s+2v+2)
n
{p |0≤i<n}wherep =(i,0)andthesource,s,islocated over P at delay ∆.
i i 2s+2v+2
at p . Let ALG(i,n) be an algorithm that acts as follows on
0
the region P n (its target environments): at every time step, it Proof. Suppose for contradiction that ALG is a (v,0,s)-
tells every robot to step right (i.e., from p k to p k+1), until A 1 algorithm simulating ALG(2s + v + 2,2s + 2v + 4) over
arrives at p i, at which point the algorithm permanently halts. P
2s+2v+4
at delay ∆. A
1
moves rightward at every time step.
Athaltingtime,thisalgorithmresultsinachainofrobots,the At time steps i ∈ [∆(v+1),∆(2s +v+2)], it always sees
leftmost of which is either at p 1 or p 0, such that A i and A i+1 the exact same thing: v locations to its left, half of which
aretwostepsapart.Foralli,n,ALG(i,n)iseasilyexecutable containanagentA andhalfofwhichareempty,andv empty
i
over P
n
by a centralized robotic swarm with visibiltiy V =2 locationstoitsright.SinceALGhas2sdistinctmemorystates,
andS =0bitsofpersistentmemory(thecentralizedalgorithm attwodistincttimesteps∆(v+1)≤t <t ≤∆(2s+v+2)
1 2
can know where A 1 is at every time step, hence whether A 1 it must have had the same memory state. Hence, at time
is located at p i at a given time step, by simply counting the steps ∆(2s + v + 2) and ∆(2s + v + 2 + (t 1 − t 2)), A 1
number of robots in the environment). has the same memory state and sees the same things. Since
It is clear that ALG(i,n) is 2-visibility preserving. A ∆- (v,0,s) robots cannot communicate, this means these time
delay version of it can be executed by decentralized robots stepsareindistinguishabletoA 1.Since,whenexecutingALG,
with communication and sufficient memory, per Proposi- A 1 does not step right at time step ∆(2s+v+2) (i.e., upon
tion III.9. However, ant-like robots cannot execute ALG(i,n) arriving at p 2s+v+2), it must also not do so at time step
for sufficiently large i and n, even at a delay: ∆(2s+v+2+(t 1−t 2)). But ALG(2s+v+2,2s+2v+2)
necessitates that A step right at every time step ∆t for
1
Proposition A.1. For all integers ∆ ∈ [1,∞), no (v,0,s)- t<2s+v+2 - contradiction.16
Proposition A.1 shows that for any ant-like swarm with an obstacle at its diagonal interprets its position as a fake hall
constant capabilities (v,0,s), there exist n and i such that (i.e. a corner) as long as b = 1 and b +b = 1, that is, as
5 3 4
ALG(n,i) cannot be executed over a large path graph. This long as at least one step passed since the last hall, and our
gives evidence that ant-like robots are “strongly” decentral- position two steps ago was diagonal to us.
ized: they are fundamentally incapable of making the same
decisions as a centralized algorithm.
REFERENCES
[1] E. S¸ahin, “Swarm robotics: From sources of inspiration
B. FCDFS Using 5 Bits of Memory
todomainsofapplication,”inInternationalworkshopon
swarm robotics, pp. 10–20, Springer, 2004.
Algorithm 3 5-bit FCDFS
[2] A.QuattriniLi,“Explorationandmappingwithgroupsof
Let v be the current location of A. robots: Recent trends,” Current Robotics Reports, vol. 1,
if all neighboring vertices of v are occupied then no. 4, pp. 227–237, 2020.
Settle. [3] T.-R. Hsiang, E. M. Arkin, M. A. Bender, S. P. Fekete,
else if b 4b 5 =00 then and J. S. Mitchell, “Algorithms for rapidly dispersing
Search clockwise, starting from the ”up” direction, for robot swarms in unknown environments,” in Algorithmic
an unoccupied vertex, and set primary direction to point to Foundations of Robotics V, pp. 77–93, Springer, 2004.
that vertex. [4] O. Rappel and J. Ben-Asher, “Area coverage – A swarm
b 4b 5 ←10 based approach,” in 59th Israel Annual Conference on
end if Aerospace Sciences, IACAS 2019, pp. 35–55, Israel An-
if A cannot move in primary or secondary directions then nual Conference on Aerospace Sciences, 2019.
if v has just one unoccupied neighbour then [5] E. M. Barrameda, S. Das, and N. Santoro, “Uniform
Settle. dispersal of asynchronous finite-state mobile robots in
else if (b 5 =1∧b 3+b 4 =1) ∨ diag(v) is unoccupied presence of holes,” in International Symposium on Al-
then gorithms and Experiments for Sensor Systems, Wire-
Settle. less Networks and Distributed Robotics, pp. 228–243,
else Springer, 2013.
Set primary direction to obstacle-less direction not [6] A.HidegandT.Lukovszki,“Uniformdispersalofrobots
equal to 180-degree rotation of previous direction stepped with minimum visibility range,” in International Sympo-
in (i.e. the neighbour of v we haven’t visited yet; this can siumonAlgorithmsandExperimentsforSensorSystems,
be inferred from b 1b 2 and b 3). Wireless Networks and Distributed Robotics, pp. 155–
b 4b 5 ←10 167, Springer, 2017.
end if [7] M.AmirandA.M.Bruckstein,“Fastuniformdispersion
end if ofacrash-proneswarm.,”Robotics:ScienceandSystems,
if b 4b 5 was not updated at this time step then▷ i.e. b 5 =1 2020.
or time to update b 5 [8] O. Rappel, M. Amir, and A. M. Bruckstein, “Stigmergy-
b 4b 5 ←b 31 based, dual-layer coverage of unknown regions,” in
end if Proceedings of the 2023 International Conference on
if A can move in its primary direction then Autonomous Agents and Multiagent Systems, pp. 1439–
Step in the primary direction. 1447, 2023.
b 3 ←0 [9] E. M. Barrameda, S. Das, and N. Santoro, “Deploy-
else if A can step in secondary direction then ment of asynchronous robotic sensors in unknown or-
Step in the secondary direction. thogonal environments,” in International Symposium on
b 3 ←1 Algorithms and Experiments for Sensor Systems, Wire-
else less Networks and Distributed Robotics, pp. 125–140,
Settle. Springer, 2008.
end if [10] E. M. Barrameda, S. Das, and N. Santoro, “Uniform
Dispersal of Asynchronous Finite-State Mobile Robots
FCDFS can be implemented using 5 bit of memory - in Presence of Holes,” in Algorithms for Sensor Systems
see Algorithm 3. In this implementation, a robot’s state is (P. Flocchini, J. Gao, E. Kranakis, and F. Meyer auf der
described by bits b b b b b . All bits are initially 0. b b Heide,eds.),vol.8243,pp.228–243,Berlin,Heidelberg:
1 2 3 4 5 1 2
describe the primary direction (one of four), and b tells us Springer Berlin Heidelberg, 2014.
3
whether the previous step was taken in the primary direction [11] A. Howard, M. J. Mataric´, and G. S. Sukhatme, “An
(if b =0) or in the secondary direction (if b =1). b b is a incrementalself-deploymentalgorithmformobilesensor
3 3 4 5
counterthatisresetto10uponenteringahalloronestepafter networks,” Autonomous Robots, vol. 13, no. 2, pp. 113–
initialization, and thereafter is equal to ∗1, where ∗ is a bit 126, 2002.
that tells us whether we walked in the primary or secondary [12] E.D.Demaine,M.Hajiaghayi,H.Mahini,A.S.Sayedi-
direction two steps ago (by copying b ). A robot that detects Roshkhar, S. Oveisgharan, and M. Zadimoghaddam,
317
“Minimizing movement,” ACM Transactions on Algo- ments using a distributed robot swarm,” arXiv preprint
rithms (TALG), vol. 5, no. 3, p. 30, 2009. arXiv:2111.14295, 2021.
[13] Z. Liao, J. Wang, S. Zhang, J. Cao, and G. Min, [28] V. P. Tran, M. A. Garratt, K. Kasmarik, and S. G.
“Minimizing movement for target coverage and network Anavatti, “Dynamic frontier-led swarming: Multi-robot
connectivityinmobilesensornetworks,”network,vol.4, repeatedcoverageindynamicenvironments,”IEEE/CAA
p. 8, 2015. Journal of Automatica Sinica, vol. 10, no. 3, pp. 646–
[14] Z.FriggstadandM.R.Salavatipour,“Minimizingmove- 661, 2023.
ment in mobile facility location problems,” ACM Trans- [29] E. M. Barrameda, S. Das, and N. Santoro, “Deployment
actionsonAlgorithms(TALG),vol.7,no.3,p.28,2011. of Asynchronous Robotic Sensors in Unknown Orthog-
[15] M. Amir and A. M. Bruckstein, “Minimizing travel in onal Environments,” in Algorithmic Aspects of Wireless
the uniform dispersal problem for robotic sensors,” in Sensor Networks (S. P. Fekete, ed.), vol. 5389, pp. 125–
Proceedingsofthe18thInternationalConferenceonAu- 140, Berlin, Heidelberg: Springer Berlin Heidelberg,
tonomous Agents and MultiAgent Systems, International 2008.
FoundationforAutonomousAgentsandMultiagentSys- [30] A. Hideg and L. Bla´zovics, “Area coverage using dis-
tems, 2019. tributed randomized methods,” in Cybernetics & Infor-
[16] K. D. Joshi, Introduction to general topology. New Age matics (K&I), 2016, pp. 1–5, IEEE, 2016.
International, 1983. [31] A. Hideg, T. Lukovszki, and B. Forstner, “Improved
[17] A.Shiloni,N.Agmon,andG.A.Kaminka,Ofrobotants runtime for the synchronous multi-door filling,” Period-
and elephants. Citeseer, 2010. ica Polytechnica Electrical Engineering and Computer
[18] A. Shats, M. Amir, and N. Agmon, “Competitive ant Science, vol. 66, no. 1, pp. 12–19, 2022.
coverage: The value of pursuit,” in 2023 IEEE/RSJ In- [32] O¨. Arslan, “Statistical coverage control of mobile sensor
ternationalConferenceonIntelligentRobotsandSystems networks,”IEEETransactionsonRobotics,vol.35,no.4,
(IROS), pp. 6733–6740, IEEE, 2023. pp. 889–908, 2019.
[19] J.-L. Deneubourg, S. Goss, N. Franks, A. Sendova- [33] D. Rabinovich, M. Amir, and A. M. Bruckstein, “Opti-
Franks, C. Detrain, and L. Chre´tien, “The dynamics of mally reordering mobile agents on parallel rows,” Theo-
collective sorting robot-like ants and ant-like robots,” in retical Computer Science, vol. 985, p. 114330, 2024.
From animals to animats: proceedings of the first inter- [34] F. Aznar, M. Pujol, R. Rizo, F. A. Pujol, and C. Rizo,
national conference on simulation of adaptive behavior, “Energy-Efficient Swarm Behavior for Indoor UAV
pp. 356–365, 1991. Ad-Hoc Network Deployment,” Symmetry (20738994),
[20] T. Stirling, S. Wischmann, and D. Floreano, “Energy- vol. 10, p. 632, Nov. 2018. Publisher: MDPI Publishing.
efficient indoor search by swarms of simulated flying [35] O.Rappel,J.Ben-Asher,andA.Bruckstein,“Exploration
robots without global information,” Swarm Intelligence, of unknown indoor regions by a swarm of energy-
vol. 4, no. 2, pp. 117–143, 2010. constrained drones,” 05 2023.
[21] T. Stirling and D. Floreano, “Energy-Time Efficiency in [36] J. Gielis, A. Shankar, and A. Prorok, “A critical re-
Aerial Swarm Deployment,” in Distributed Autonomous viewofcommunicationsinmulti-robotsystems,”Current
Robotic Systems (A. Martinoli, F. Mondada, N. Correll, robotics reports, vol. 3, no. 4, pp. 213–225, 2022.
G. Mermoud, M. Egerstedt, M. A. Hsieh, L. E. Parker, [37] D. Chowdhury, L. Santen, and A. Schadschneider, “Sta-
and K. Støy, eds.), vol. 83, pp. 5–18, Berlin, Heidelberg: tistical physics of vehicular traffic and some related
Springer Berlin Heidelberg, 2013. systems,” Physics Reports, vol. 329, no. 4-6, pp. 199–
[22] M. Pra¨hofer and H. Spohn, “Current fluctuations for the 329, 2000.
totally asymmetric simple exclusion process,” in In and [38] T.Chou,K.Mallick,andR.Zia,“Non-equilibriumstatis-
out of equilibrium, pp. 185–204, Springer, 2002. ticalmechanics:fromaparadigmaticmodeltobiological
[23] C. A. Tracy and H. Widom, “Asymptotics in asep with transport,”Reportsonprogressinphysics,vol.74,no.11,
step initial condition,” Communications in Mathematical p. 116601, 2011.
Physics, vol. 290, no. 1, pp. 129–154, 2009. [39] D. Romik, The surprising mathematics of longest in-
[24] K. Johansson, “Shape fluctuations and random matri- creasing subsequences. No. 4, Cambridge University
ces,”CommunicationsinMathematicalPhysics,vol.209, Press, 2015.
pp. 437–476, feb 2000. [40] T. Kriecherbauer and J. Krug, “A pedestrian’s view on
[25] D. Peleg, “Distributed Coordination Algorithms for Mo- interactingparticlesystems,kpzuniversalityandrandom
bile Robot Swarms: New Directions and Challenges,” matrices,” Journal of Physics A: Mathematical and The-
in Distributed Computing – IWDC 2005, pp. 1–12, oretical, vol. 43, no. 40, p. 403001, 2010.
Springer, Berlin, Heidelberg, Dec. 2005. [41] M. Amir, D. Rabinovich, and A. M. Bruckstein, “Pa-
[26] J. Cortes, S. Martinez, T. Karatas, and F. Bullo, “Cover- trolling grids with a bit of memory,” 2023.
agecontrolformobilesensingnetworks,”IEEETransac- [42] R. Diestel, Graph Theory (Graduate Texts in Mathemat-
tions on Robotics and Automation, vol. 20, pp. 243–255, ics). Springer, jun 2017.
Apr. 2004. [43] J. Krarup and S. Vajda, “On torricelli’s geometrical
[27] V. P. Tran, M. A. Garratt, K. Kasmarik, and S. G. Ana- solution to a problem of fermat,” IMA Journal of Man-
vatti,“Robustmulti-robotcoverageofunknownenviron- agement Mathematics, vol. 8, no. 3, pp. 215–224, 1997.