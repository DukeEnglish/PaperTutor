IFTT-PIN: A Self-Calibrating PIN-Entry Method
Kathryn McConkey∗, Talha Enes Ayranci∗, Mohamed Khamis∗, Jonathan Grizou∗
∗School of Computing Science, University of Glasgow, Glasgow, United Kingdom
∗{TalhaEnes.Ayranci, Mohamed.Khamis, Jonathan.Grizou}@glasgow.ac.uk
Abstract—Personalising an interface to the needs and pref- which are personalised from the start. We chose this security
erences of a user often incurs additional interaction steps. angle as a way to demonstrate self-calibration capabilities via
In this paper, we demonstrate a novel method that enables
aPINentrytask.Thismightnotbethebestapplicationofself-
the personalising of an interface without the need for explicit
calibration-whichwearguelaterremainstobeinvented-but
calibration procedures, via a process we call self-calibration. A
second-ordereffectofself-calibrationisthatanoutsideobserver it is the best way we have found to explain and allow users
cannot easily infer what a user is trying to achieve because to experience the properties of a self-calibrating interfaces.
they cannot interpret the user’s actions. To explore this security We developed IFTT-PIN (If This Then PIN) based on the
angle, we developed IFTT-PIN (If This Then PIN) as the first
PIN-entry method presented by Roth et al. in [1], and later
self-calibrating PIN-entry method. When using IFTT-PIN, users
iterated upon with methods like SwinPIN [2], which allow
are free to choose any button for any meaning without ever
explicitly communicating their choice to the machine. IFTT-PIN users to enter the PIN of their choice via an elimination
infersboththeuser’sPINandtheirpreferredbuttonmappingat process. In [1], users click on a button whose color is the
thesametime.Thispaperpresentstheconcept,implementation, same as their digit. IFTT-PIN is adding self-calibration to [1],
and interactive demonstrations of IFTT-PIN, as well as an
which means that buttons do not have any color assigned to
evaluation against shoulder surfing attacks. Our study (N=24)
them at the start of the interaction. Users are free to define shows that by adding self-calibration to an existing PIN entry
method,IFTT-PINstatisticallysignificantlydecreasedPINattack the color of each button in their mind and use them as such
decoding rate by ca. 8.5 times (p=1.1e-9), while only decreasing without informing the interface prior to interaction. After a
the PIN entry encoding rate by ca. 1.4 times (p=0.02), leading few iterations, IFTT-PIN can infer both the digit the user had
to a positive security-usability trade-off. IFTT-PIN’s entry rate
in mind and the color of each button used. IFTT-PIN can
significantly improved 21 days after first exposure (p=3.6e-6) to
thuseffectivelycalibrateitselftoeachuseratinteractiontime,
themethod,suggestingself-calibratinginterfacesarememorable
despiteusinganinitiallyundefineduserinterface.Self-calibration demonstrating a new interactive experience.
methodsmightleadtonovelopportunitiesforinteractionthatare We evaluated IFTT-PIN as a potential defense mechanism
more inclusive and versatile, a potentially interesting challenge
againstshouldersurfingattacks,wheremaliciousobserverstry
for the community. A short introductory video is available at
to infer a user password by watching their actions ’over their
https://youtu.be/pP5sfniNRns.
IndexTerms—self-calibrating,self-calibration,calibration-free, shoulder’.Wepresentresultsfromauserstudy(N=24)carried
consistency, inconsistency out to determine the usability, security, and motor memorabil-
ity of IFTT-PIN as an authentication method compared to the
I. INTRODUCTION traditional PIN-entry method.
WefirstpresentourimplementationofaRothetal.interface
Personalising a user interface to the needs and preferences
[1], explain how self-calibration has been implemented to
of a user often incurs additional interaction steps for the user.
createIFTT-PINandofferreaderstoexperienceIFTT-PINvia
For example, a user might be required to navigate menus
a web-based demonstrators. We then review shoulder-surfing
to define what action to attach to a button, or an expert
literatureandpresentkeyresultsfromouruserstudyonIFTT-
might be required to configure an interface to a user’s needs
PIN. We conclude by identifying limitations and promising
priortointeraction.Thosecalibrationproceduresareimportant
research directions for self-calibrating interfaces.
becauseaninterfacecannotalwaysbeusedinthesamewayby
For the remainder of this paper, we refer to the traditional
everyone, for example due to sensory or motor impairments.
PIN entry method we find on our smartphones or at an ATM
In this paper, we demonstrate a new method, called self-
as TRAD. Roth et al. [1] interface is referred to as ROTH.
calibration, that enables the personalising of an interface
Our method is referred to as IFTT-PIN.
without the need for explicit calibration procedures. Under
self-calibration, a user can interact with a machine using their
preferredinteractionstylerightfromthestart,andthemachine II. CONTRIBUTIONS
can nonetheless infer what the user is trying to achieve. Self-
calibrationisthusanimportantpropertyofinteractivesystems • A new PIN entry method, called IFTT-PIN, leveraging
that might contribute in reducing usability barriers. self-calibration to allow users to choose the meaning
A second-order effect of self-calibration is that an outside conveyed by each button on-the-fly without calibration.
observer cannot easily infer what a user is trying to achieve, • The first demonstration of a self-calibrating interface
simply because they cannot understand the user’s actions using discrete user actions (i.e., using buttons).
4202
luJ
2
]CH.sc[
1v96220.7042:viXra• An online interactive demonstrator that allows to explain
the self-calibrating paradigm in a few minutes on a
computer or smartphone.
• A novel approach to overwhelm the observer in shoulder
surfing scenarios relying on on-the-fly code-pad configu-
ration.
• A user study quantifying the usability, security, and
memorability of IFTT-PIN, and introducing the SUTO
score, a metric for quantifying security-usability trade-
offs.
III. UNDERSTANDINGROTH
Quoting directly from Roth et al. [1]: “The principal idea
is to present the user the PIN digits as two distinct sets e.g.,
by randomly coloring half of the keys black and the other
half white. The user must enter in which set the digit is by
Fig. 1: Breakdown of our ROTH interface.
pressing either a separate black or white key. Multiple rounds
of this game are played to enter a single digit and it is
repeatedlyplayeduntilalldigitsareentered.Theverifiere.g.,
the automatic teller machine (ATM), determines the entered
PIN digits by intersecting the chosen sets.”.
In other words, ROTH relies on the following logic: “If the
userpressedthebuttonB,thentheyindicatedthattheirdigitis
of color C, thus their digit is among the set of digits currently
Fig. 2: Elements of language. An action conveys a meaning that is
colored in C.”. used to infer an intent.
We re-implemented Roth et al. interface as follows.
A. Interface Design C. Decision Principle
Knowing the color assigned to each button, the interface
We split our interface into three parts (Figure 1). The top
identifies the digit the user wants to enter by reasoning as
part displays the PIN, with a black rectangle indicating to the
follows:”If the user pressed the left button (action), then they
user which of the four digits is currently being entered. The
indicated that their digit is currently yellow (meaning), thus
middle part shows all possible digits (from 0 to 9) colored in
their digit is among the yellow-colored digits and all the gray
yellow or gray according to which set they belong to. Think
digits can be discarded (intent).”, see Figure 3.
of this section as the machine asking the user: “What color
is the digit you want to type?”. The bottom part is dedicated
specifically for the user to answer that question. In the case
of [1], the user feedback takes place via two colored buttons.
Here the left button is yellow, and the right button is gray.
Think of this section as the human answering to the machine:
“My digit is yellow” or “My digit is gray”.
Fig.3:OnestepoftheinferenceprocessinROTHwheretheaction-
B. Interaction Vocabulary to-meaning mapping is known.
For simplicity, we use a limited interaction vocabulary By iteratively changing the color applied to each digit, we
(Figure 2) that helps explain our work in simple steps. can narrow the possible digits down to the one the user has
Actions are what the users do in order to convey their in mind. It takes 3 or 4 iterations to identify one digit1, hence
meanings. Here the users’ actions are to press either the between12and16userclickstoentera4-digitPIN.Interested
left or the right button readers can refer to Roth et al. pseudocode (Figure 2 in [1])
Meanings are what the users want to say to the machine, for a more formal algorithmic description using sets .
Here the users’ meanings are: ”My digit is yellow” or
D. ROTH Interactive Demonstration
”My digit is gray”.
Intents are what the users want the machine to do, here We encourage the readers to familiarise themselves with
entering a specific PIN, one digit at a time. ROTH PIN entry method before moving to the next sec-
To put it simply, an action conveys a meaning that is used
1Inthebestcasescenario,wenarrowdigitsdownfrom10to5to2to1
to infer an intent. (3clicks).Worstcasefrom10to5to3to2to1(4clicks).tion. ROTH can be tested online at https://jgrizou.github.
io/IFTT-PIN/interaction 1.html with a walk-through video
demonstration at https://youtu.be/6wgOa380uEo.
IV. UNDERSTANDINGIFTT-PIN
Having understood and interacted with ROTH, we remind
the reader that our contribution with IFTT-PIN lies in the
introduction of self-calibration to the ROTH interface.
A. Interface Design
To adequately demonstrate the potential of self-calibration,
we wanted to allow users to express more varied preferences.
We thus increased the number of buttons from 2 to 9, corre-
spondingtoanincreaseinthepossiblecolorpatternsfrom2to
5102. Buttons are now black to indicate that they do not have
a color attached to them yet. A user simply decides a color
pattern to apply on the buttons – in their mind and without
having to communicate this decision to the device. The user
canstartusingthebuttonsthatwayimmediately.Forexample,
the top three buttons could be yellow and all the others gray.
See Figure 4 for more examples.
B. Assumptions
To explain IFTT-PIN, we first need to understand the
assumptions made in ROTH:
1) The user’s possible intent is one of ten possible digits.
2) The user’s possible meaning is either yellow or gray.
3) The user can perform one of N actions, pressing one of
Fig. 4: Top: Changes between ROTH and IFTT-PIN. We increased
the N button.
the number of buttons from 2 to 9 to increase the possible color
4) The mapping between the user’s actions and their mean-
patterns from 2 to 510, and buttons are now undefined (black).
ingsisknown.InROTH,pressingtheleftbuttonconveys Bottom: Examples of choice of button-to-color mapping. At least
the meaning yellow and the right button conveys the one button should be assigned to yellow and one to gray.
meaning gray.
5) Theuserisassumedtobeconsistentintheirusageofthe
interface. One button can only express one color. thus formulate ten different hypotheses (one for each digit),
Assumption 4 is the one we remove in IFTT-PIN, which and interpret the user’s action according to each hypothetical
meansthatbuttonshavenopredefinedcolorsandthereasoning intent,i.e.,eachdigitausermightbetryingtoenter.Werefer
used in section III-C (“If a user presses the left button to this process as making interpretation hypotheses.
(action), then it indicates that their digit is currently yellow From assumption 1, we also know that the user is trying
(meaning).”)cannotbeusedbecausewedonotknowthecolor to type only one digit. This implies that the user can only
attached to each button. To work around this problem, we ex- remain consistent with one hypothesis and will, in the long
ploit assumption 5 by explicitly measuring user’s consistency. run, invariably breach consistency when their actions are
interpreted according to the other hypotheses. By measuring
C. Self-calibration Principle
the consistency of the user according to each interpretation
A user’s consistency is something we can observe. If we hypotheses, we can discard the hypotheses (i.e., the digits)
ask a user to type a specific digit, say 1, and the user presses that show a breach of consistency. This combined use of the
the same button twice, both when the digit 1 is yellow and consistency assumption 5 and interpretation hypotheses is the
again when it is gray, then we can confidently say that the basis of self-calibrating systems.
user is being inconsistent with its use of the interface. Concretely,IFTT-PINexpandsthereasoningusedinsection
But we do not know which digit the user is entering. III-Casfollows:“IftheuseristryingtotypethedigitD,which
However, the context given by the PIN entering task and our is currently colored in C, then when they used the button B,
assumption1(”Theuser’spossibleintentisoneoftenpossible they meant the color C”, and combines it with a test of user’s
digits”) constraints the number of possible digits. We can consistency: “If, for a particular digit D, the user pressed
the same button B to mean two different colors (C and C ),
2The number of combinations is 2N −2. The 2N computes the number y g
then they are not entering the digit D”. By keeping track of
ofpossiblecombinationsfor2colorsappliedonN buttons.Wethenadd−2
becausethereare2invalidcombinations,allyelloworallgray. this process for each digit, and over several iterations, IFTT-PIN can identify the digit the user has in mind as the only be securely used in uncontrolled public environments. Com-
one for which the interpretation of the user’s action remain mon strategies include overwhelming the observer with visual
consistent as per assumption 5, that is the only one for which decoys[7]–[9],indirectand/orclusteredinput[1],[2],[9],[10]
each button pressed was used to mean only one color. This (e.g., cognitive trap door concept behind [1], combination of
process is easier to understand visually and we have included gesture and colors with SwiPIN [2]), and hidden secondary
anillustrationinAppendixAFigure5,aswellasasidepanel communicationchannels[11]–[14](e.g.,tactilefeedbackwith
in our demonstrator linked below. LTF [15], eye-gaze input with GazeTouchCrossPin [16] and
For conciseness, we included algorithmic details, pseudo- CueAuthGaze [14]).
code, as well as illustrations of the self-calibration process in IFTT-PIN offers a novel type of protection mechanism
Appendix A for interested readers. by leveraging self-calibration which removes the need for
a pre-established mapping between user’s actions and their
D. IFTT-PIN Interactive Demonstration
meanings. The user establishes this mapping on the fly, and
For the remainder of this paper, we ask readers to famil- can redefine it every time they use the interface, which makes
iarise themselves with IFTT-PIN and learn to enter a PIN of itharderformaliciousobserverstointerprettheuser’sactions.
their choice using button-to-color mappings of their choice at
To determine whether self-calibration has the potential to
https://jgrizou.github.io/IFTT-PIN/interaction 2.html. We de-
become an effective component of security applications, we
veloped a version with a side dashboard that displays the
designed a user study to determine the usability, security,
history of clicks with respect to each digit, which is available
and memorability of IFTT-PIN compared with the TRAD and
at https://jgrizou.github.io/IFTT-PIN/interaction 2 sidepanel.
ROTH methods, as well as with results from other methods
html. A walk-through video demonstration can be found at
previously reported in the literature.
https://youtu.be/t7MQoBnzryQ.
B. Evaluation Framework
V. EVALUATINGIFTT-PIN
We studied user’s perception of the usability of our self- All PIN-entry methods we reviewed completed some form
calibrating interface, as well as IFTT-PIN effectiveness as a ofevaluationwhereboththesecurityandusabilityweretested,
potential protection against shoulder surfing attacks. see Table I. When evaluating security, studies consist of em-
ulating a shoulder surfing attack and requiring the participant
A. Shoulder surfing attacks
to try to decode PINs. Human-based attacks involve obtaining
Shoulder surfing involves looking over a victim’s shoulder a user’s PIN through direct observation, whereas recording-
in order to view information on their screen without their based attacks involve recording the authentication session to
explicit consent. Due to sensitivity of content on mobile obtain the PIN [18].
devices, users tend to be concerned about the privacy of their When evaluating usability the majority of studies focused
devicesasanindividualgainingaccessmaybeabletoexploit on entry time and error rates, and some included usability
them with malicious intent. questionnaires results, such as the NASA Task Load Index
Smartphones are mainly protected by PINs, which are (NASATLX)[19]andtheSystemUsabilityScore(SUS)[20].
generally composed of only numbers and are typically short In addition, we decided to study IFTT-PIN usability at
(4-6 digits) for memorability and speed of entry. For mobile regular time intervals over 1 month. Our goal was to study
devices,predominantPINlengthsare4digitswhichareeasily motormemorability,notthememorabilityoftheauthentication
compromised [3]. token (here a 4-digit PIN), but rather the ability to remember
Biometric authentication methods, such as fingerprint scan- the workings of an interface after a few days without using it.
ning and facial recognition are the most common alternative We also wanted to observe users’ performances and potential
to PINs with a study by Markert et al. [4] in 2020 showing changeofbehaviorastheybecomefamiliarwiththeinterface.
that60%oftheirparticipantsusedbiometricmethods[4].But
a) Threat model.: Our attacker is assumed to have a
Mengetal.hasshownthattheaccuracyofbiometricmethods
clear, unobstructed, view of the user’s device and can record
is”notstable”[5](e.g.,duetosensorfailuresorpoorlighting
a video of the password being entered.
conditions) and therefore require a knowledge-based backup
b) Variables.: Dependentvariablesincludeefficiency,ef-
authentication method, which is often the aforementioned 4
fectiveness,andmemorabilitywhichwillbemeasuredthrough
digit numeric PINs3. Thus, biometric authentication ”cannot
entrytime,errorrateandhowwellparticipantscanremember
provideuniversalprotectionfromshouldersurfingattacks”[6];
how to use the interfaces at various time intervals. The
the extra security they provide is minimal as they are not a
independent variables include the device as well as the PIN
replacement for PINs.
being entered, with the different conditions being each of the
The entering of PINs remains the stereotypical shoulder
different PIN entry methods (TRAD, ROTH, IFTT-PIN).
surfing attack scenario and a large body of work focuses on
c) Design structure.: We do not expect participants to
reducingtheriskofPIN-basedauthenticationmethodsthatcan
experience any fatigue, therefore, we can choose a within
subject design which means each participant is exposed to
3OnAndroid,userscanchooseeitheraPINorapattern,andPINscanbe
overfourdigitslong. all of the conditions.TABLE I: How previous research has conducted security and usability evaluations.
SecurityEvaluation UsabilityEvaluation
Method Human-based Recording-based ErrorRate EntryTime NASATLX SUS
SwiPIN[2] x x x x
LTF[15] x x
Gaze[16] x x x
Graphical[17] x x
IOC[1] x x x x
CueAuth[14] x x x x x
IFTT-PIN(thispaper) x x x x
d) Time constraints.: To ensure a bounded experimental Efficiency is the “resources expended in relation to the accu-
time, we have constrained security and usability tests to 30 racy and completeness with which users achieve goals”
seconds for TRAD, 3 minutes for ROTH, and 5 minutes for [17]. We measure this through the time taken to enter
IFTT-PIN. PINs as well as the rate of digit entering per minute.
e) Ordering.: Withinasession,weevaluatedmethodsin Satisfaction is the users being “free from discomfort with
orderofalgorithmiccomplexity:TRADfirst,thenROTH,then positive attitudes towards the use of the product” [17].
IFTT-PIN. Users filled the the System Usability Scale (SUS) ques-
f) Training.: Weassumedthatallparticipantshaveexpe- tionnaire [20] for each user authentication method. This
rience with TRAD. For ROTH and IFTT-PIN, all participants scale gives us a “global view of subjective usability” and
watched a short explanatory video explaining how to use the isknowntobeareliablequalitativemeasureofusability.
interfaces. As a reference, a SUS score of 68 would be considered
g) Choice of PIN.: We required participants to select average [20].
one of three PINs between 1234, 4321 and 2468, which were
E. Memorability
deemed of similar difficulty. Their chosen PIN had to be used
We measured “how well users re-establish proficiency with
across all authentication methods and could not be a PIN that
the system functionality after a time period not using the
the participants currently use.
system” [22]. We repeated our usability tests with the same
h) Timeline: On day 0, participants undertook first the
participants at three intervals, day 0, day 7 and day 21.
security tests, then the usability tests. Participants came back
on day 7 and day 21 and repeated the usability tests only. VI. RESULTS
i) Comparison to related PIN entry methods: We report We invited 24 participants (14 males, 10 females) aged
our experimental results alongside results extracted from re- between 18 and 24, of which 7 took part in the extended
lated PIN entry methods listed in Table I. 1h-long security study on IFTT-PIN. Before completing the
study, all participants were presented with information sheets
C. Security
and consent forms and were made aware they could withdraw
We chose recording-based attacks where participants from the study at any time without any consequences. All
watched a video showing someone entering PINs with a participants agreed to participate and filled out demographic
completelyunobstructedview,withfullcontroloverthevideos questionnaireswhichalsoprovidedquestionsaboutknowledge
and were allowed to pause and rewind at will. We measure of authentication methods as well as shoulder surfing.
how many PINs users can correctly decode within a set time Using a Likert scale, we determined the IT proficiency
frame, as well as the digit decoding rate per minutes. level of participants. 71.6% claimed to be either proficient or
Only 2 participants were able to decode 1 or 2 digits from highly proficient. 83.3% of participants felt very comfortable
IFTT-PIN during the 5 minutes initially planned for. To avoid using a mobile phone while the remaining participant felt
aflooringeffect,weconductedanadditional1-hourlongstudy comfortable.67%ofparticipantsknewwhatthetermshoulder
to determine more accurately the security level of IFTT-PIN surfing meant. After being provided with a definition, 42% of
with a subset of 7 participants. participants said that they had experienced a shoulder surfing
attack. 54.2% of participants felt concerned about shoulder
D. Usability surfing and would be willing to have more secure authentica-
tion methods implemented for daily use. One participant had
Wemeasuredthe”extenttowhichaproductcanbeusedby
heard about IFTT-PIN previously but did not enter or decode
specified users to achieve specified goals with effectiveness,
a PIN via IFTT-PIN prior to this study.
efficiency and satisfaction in a specified context of use” [21]
as follows: A. Security Results
Effectiveness is the “accuracy and completeness with which Security results are reported in Table II. CueAuthGaze has
users achieve specified goals” [17]. We measure effec- the lowest reported attack success rate (0.05%) while IFTT-
tiveness through the error rates when entering PINs. PIN has the lowest per digit decoding rate (0.12 digits/min)TABLE II: Security results. CueAuthGaze has the lowest reported
encoding rate of ca. 8 digits per minutes (M=7.91, SD=2.24).
attack success rate (0.05%) while IFTT-PIN has the lowest per
CueAuthGaze, which scored well on security metrics, has the
digit decoding rate (0.12 digits/min) suggesting an attacker would
take longer to decode a PIN entered via IFTT-PIN than via other highestreportedPINentryerrorrate(17.28%),ca.4.5xhigher
methods.Byaddingself-calibrationtotheROTHmethod,IFTT-PIN than IFTT-PIN. Interestinglt, IFTT-PIN has one of the lowest
significantly increased PIN attack decoding rate by ca. 8.5 times PIN entry error rates of the methods reported in Table III.
(p=1.1e-9)
A repeated measures ANOVA showed a significant main
effect for the entry method on PIN entry time (F=105,
Attacksuccess Decodingrate
Method
(%) (digits/min) p=1.2e-21) with post hoc Bonferroni corrected t-tests reveal-
SwiPIN[2] 12.5 x ing significant differences between TRAD and ROTH (t=-
LTF[15] x x 29.5, p=4.4e-31), TRAD and IFTT-PIN (t=12, p=2.2e-15),
Gaze[16] 14.2 x
and ROTH and IFTT-PIN (t=-4.4, p=1.8e-4). Encoding rate
Graphical[17] 11 x
IOC[1] 8.75 x showed similar level of significance for the entry method
CATouch[14] 74 2.31 effect on encoding rate (F=137, p=9.3e-25) with post hoc
CAMidAir[14] 64 2.63
Bonferroni corrected t-tests revealing significant differences
CAGaze[14] 0.05 1.47c
TRAD 99 71.33(SD=2.26)l between TRAD and ROTH (t=13.6, p=2.9e-17), TRAD and
ROTH 8 1.03(SD=0.59) IFTT-PIN (t=11.1, p=3.9e-14), and ROTH and IFTT-PIN (t=-
IFTT-PIN(ours) 3.125 0.12(SD=0.12)e 2.85, p=0.02). However no significant differences were found
f Likely flooring effect due to the very low percentage of participants between entry method on the PIN entry error rate. Overall,
successfully decoding the PIN, decoding rate is thus likely lower for
our results confirmed that by adding self-calibration to the
CueAuthGaze.
l LowerboundestimateduetoceilingeffectduringourTRADexperiments. ROTH method, IFTT-PIN significantly decreased PIN entry
eBasedonresultsfromthe1-hourlongsecurityexperiment. encoding rate by only ca. 1.4 times (p=0.02), which is to be
compared with the ca. 8.5 times (p=1.1e-9) decrease in PIN
attack decoding rate reported in section VI-A.
suggesting an attacker would take longer to decode a PIN
Metrics reported for IOC have been extracted from the
entered via IFTT-PIN than via other methods. Further, longer,
original paper from Roth et al. [1] and should match with our
experiments would be required to quantify the decoding rates
user testing of ROTH. We found a close match between IOC
of all methods.
and ROTH for PIN entry time (23.23 and 24.19 respectively),
A repeated measures ANOVA showed a significant main
but found a surprising discrepancy on the PIN entry error rate
effect for the entry method on attack decoding rate (F=6088,
(respectively 9% and 1.88%) which we have not been able to
p=2.5e-78).PosthocBonferronicorrectedt-testsrevealedsig-
explain.
nificant differences between TRAD and ROTH (t=76, p=1.6e-
WefoundasurprisinglyhigherrorrateforTRAD(M=4.04,
49),TRADandIFTT-PIN(t=143,p=3.8e-62),andROTHand
SD=5.89) which we attribute to our observation that partici-
IFTT-PIN(t=7.9,p=1.1e-9).Overall,ourresultsconfirmedthat
pantsfeltcompetitiveandtriedtomaximiseentryspeedduring
by adding self-calibration to the ROTH method, IFTT-PIN
TRAD entry tests, despite being instructed against it.
significantly decreased PIN attack decoding rate by ca. 8.5
times (p=1.1e-9). C. Memorability results
We emphasize that the average decoding rate for TRAD is
Memorability results are reported in Table IV. A repeated
likelyhigherthanthe71.33digits/minreportedduetoalikely
measuresANOVAshowedasignificantmaineffectfortheday
ceiling effect caused by a limited supply of TRAD recorded
ofevaluationonencodingrate(F=3.75,p=0.03)withposthoc
attacks. All but one participants could decode all the PINs
Bonferroni corrected t-tests revealing significant differences
presented to them during the TRAD experiments, hence they
betweenday0andday7(t=-4.15,p=1.2e-3),day0andday21
might have been able to decode even more PINs within the
(t=-6.5,p=3.6e-6),butnotasignificantdifferencebetweenday
allocated time.
7andday21(t=-1.65,p=0.33).Nosignificantdifferenceswere
From our observations and interviews, the dominant decod- found between evaluation days on the PIN entry error rate.
ingstrategyforIFTT-PINwastolistoutthedifferentnumbers Overall, our results confirmed that a self-calibrating interface
in each color-set for each button click. When participants like IFTT-PIN is memorable even if not used for a couple of
observed a button was clicked multiple times, they started weeks,withuserseffectivelyrememberinghowtoenteraPIN
seeking which digit stayed consistently within one color-set without needing to remember specific color patterns.
and determined that this digit was the correct digit. From On day 21, the overall usability was highest for TRAD
there,participantscouldreverseengineerthecolorpatternand (96.31), followed by ROTH (79.88), and then IFTT-PIN
reconstruct the rest of the PIN. (58.13). While IFTT-PIN SUS score increased after each
testing sessions, it remained relatively low indicating IFTT-
B. Usability Results
PIN remains less usable than established methods and suffer
Usability results are reported in Table III. IFTT-PIN is from usability issues [23].
the slowest entry method reported with an average entry At a behavioral level, we noticed that many participants
time of ca. 38 seconds (M=38.01, SD=14.86) and an average started by using all 9 buttons on IFTT-PIN, but on day 21TABLE III: Usability results.IFTT-PINistheslowestentrymethodreportedwithanaverageentrytimeofca.38secondsandanaverage
encoding rate of ca. 8 digits per minutes. CueAuthGaze, which scored well on security metrics, has the highest reported PIN entry error
rate (17.28%, ca. 4.5x higher than IFTT-PIN). By adding self-calibration to the ROTH method, IFTT-PIN significantly decreased PIN entry
encoding rate by ca. 1.4 times (p=0.02).
PINEntryTime PINEntryErrorRate EncodingRate
Method
(seconds) (%) (digits/min)
SwiPIN[2] 3.66(SD=0.9) 3.1 65.57
LTF[15] 13.84 2 17.33
Gaze[16] 9.5 x 25.26
Graphical[17] x x x
IOC[1] 23.23 9 10.33
CueAuthTouch[14] 3.73(SD=0.98) 6.62(SD=5.56e) 64.34
CueAuthMidAir[14] 5.51(SD=3.87) 15.81(SD=8.16e) 43.55
CueAuthGaze[14] 26.35(SD=22.09) 17.28(SD=8.45e) 9.11
TRAD 1.37(SD=0.41) 4.04(SD=5.89) 196.67(SD=46.72)
ROTH 24.19(SD=3.76) 1.88(SD=2.42) 10.92(SD=1.13)
IFTT-PIN(thispaper) 38.01(SD=14.86) 3.76(SD=3.88) 7.91(SD=2.24)
eSDapproximatedbasedonstandarddeviationinformationonsuccessratesin[14].
TABLEIV:SpacedIFTT-PINresults.TheencodingrateforIFTT- TABLE V: SUTO Scores. IFTT-PIN has the highest SUTO scores
PINhasimprovedsignificantlybetweenday0andday21(p=3.6e-6) ofallmethods.Addingself-calibrationtoROTHimprovedtheSUTO
suggestingthatself-calibrationisamemorableinteractionparadigm. score by more than 6-fold, suggesting that self-calibration offers
Users could remember how to enter a PIN without needing to interestingpropertieswheresecurity-usabilitytrade-offareimportant.
remember specific color patterns.
Method SUTOscore
IFTT-PIN Day0 Day7 Day21
SwiPIN[2] x
EncodingRate 6.26 7.47 7.91 LTF[15] x
(digits/min) (SD=2.00) (SD=2.22) (SD=2.24) Gaze[16] x
ErrorRate 5.97 4.41 3.76 Graphical[17] x
(%) (SD=6.10) (SD=5.18) (SD=3.88) IOC[1] x
SUSScore 51.56 55.2 58.13 CueAuthTouch[14] 27.85r
CueAuthMidAir[14] 16.53r
CueAuthGaze[14] 6.20r,i
TRAD 2.75h
most participants reduced their usage to 2 or 3 buttons which ROTH 10.62
is consistent with a desire for speed during PIN entry. IFTT-PIN(thispaper) 65.91
r Reconstructedbasedoninformationfrom[14].
D. SUTO - Security-Usability Trade-Off i SUTO score likely underestimated (i.e., lower bound) due to low attack
successrate(flooringeffect)inducingalikelylowerboundestimationof
Security applications face a security-usability trade-off
thedecodingratereconstructedinTableII,longerexperimentsarerequired
(SUTO). Simply put, a system that is secure and not usable toestimateaccurateSUTOscore.
will not be used while a system that is usable and not secure hHigher bound estimate due to a lower bound estimates of the decoding
rateinTableII,likelyvaluecloserto1asreal-timedecodingisfeasible.
is at risk of attack [24].
To quantify the usability vs. security trade-off, we define a
SUTO score as the ratio of the rate of digits being entered to
into perspective, on average, it would take about 41 minutes
the rate of digits being decoded.
todecodeaPINthattook38secondstoenterusingIFTT-PIN
– assuming full access to a video recording.
Rate of entering
SUTO score= (1) CueAuthGaze [14], which scored high on security metrics,
Rate of decoding
has a SUTO score of 6.20 suggesting a less favorable ratio of
The SUTO score quantifies how difficult it is for a PIN to enteringtimeoverdecodingtime.Wewillrefrainfrommaking
be simultaneously observed and decoded. A SUTO score of conclusion based on this results as the decoding rate we
1 indicates that the time required to enter the PIN equals the reconstructed for CueAuthGaze might be affected by flooring
time needed to decode it. A SUTO score above 1 indicates effect as described in the security section.
that the attacker would take longer to decode the PIN than to
enter it. The higher the SUTO scores the better, within limits
VII. LIMITATIONSANDFUTUREWORK
of usability.
SUTO scores are reported in Table V. ROTH scored 10.62 While IFTT-PIN scores the highest on the SUTO score,
and IFTT-PIN 65.91, confirming that adding self-calibration we must keep in mind that its usability as a daily PIN entry
provides an additional protection against shoulder surfing at- mechanismislimitedduetoitshighentrytime(M=38.01)and
tacks(ca.8.5times,seesectionVI-A)withoutacorresponding belowaveragesystemusabilityscores(M=58.13).Similarlyto
decreaseinentrytime(ca.1.4times,seesectionVI-B),hence other methods, IFTT-PIN might be better positioned for less
firmly improving the security-usability trade-off. To put this frequent, but more secure, PIN entry requirements, such asprotecting specific sensitive applications on a mobile devices decreasing the PIN entry encoding rate by ca. 1.4 times
(e.g., a banking app). (p=0.02),leadingtoapositivesecurity-usabilitytrade-offwith
Inouropinion,interestingfollow-upstudieswouldlookinto a SUTO score increasing from 10.62 for ROTH to 65.91 for
thediversityofusers’choiceofaction-to-meaningmappingfor IFTT-PIN. IFTT-PIN’s entry rate significantly improved 21
self-calibrating interfaces. The question is whether allowing daysafterfirstexposure(p=3.6e-6),suggestingself-calibrating
users to choose how to use an interface effectively leads interfaces are memorable despite using an initially undefined
to more varied and personalized interaction schemes, and user interface.
whether users change their preferences over time. Studying While it remains unclear how self-calibrating interfaces
these preferences for other interaction modalities, such as could be genuinely beneficial in our everyday world, we
gesturesorvoicecommands,wouldaddinterestingchallenges would like to encourage researchers to investigate what other
both algorithmic and in terms of interface design. interfaces and applications could benefit from the proposed
To improve usability, options to consider includes adding self-calibration paradigm - especially towards more inclusive
feedbackmechanisms(e.g.,awaytoshowhowfaralongusers interactive devices where users can express their intention in
are in the digit entry process), increasing the color-set size to an intuitive, fluid and personalized way without resorting to
reduce entry time, reducing the number of buttons (9 buttons explicit calibration procedures. We hope this work will help
was confusing to users), and adding a method to account for inspire the community to invent them.
user mistakes (e.g., an undo last-action button).
To improve the SUTO score, and as already suggested in ACKNOWLEDGMENT
Roth et al. [1], we could introduce a probabilistic approach
We extend our gratitude to all the participants of the
wheretheuserdoesnotneedtoentertheexactPINtoopenthe
study, whose involvement was essential to the success of this
vault, but simply to reduce the set of possible PINs to a small
research. Jonathan Grizou ideated and built IFTT-PIN based
number that includes the correct PIN. An attacker would only
on previous research on self-calibrating interactive systems.
be able to recover a set of possible PINs, not knowing which
Kathryn McConkey carried out the user study under the
specific PIN is the correct one. Another approach would be to
supervision of Jonathan Grizou and Mohamed Khamis. Talha
introduce a hidden communication channel that only the user
Enes Ayranci helped with data analysis and served as editor
can access. For example, using special glasses that reveal the
for the paper. Mohamed also played a key role in reviewing
colorassignedtoeachdigittotheuseronly.Outsideobservers
and further developing the manuscript.
or cameras would not see the color on the digit, making it
impossible to reverse-engineer the PIN.
REFERENCES
For interested parties, more studies “in the wild” would
inform how users interact differently with IFTT-PIN in an un- [1] V. Roth, K. Richter, and R. Freidinger, “A pin-entry method resilient
controlledenvironment.Repeatingpreviousstudiestocompute againstshouldersurfing,”inProceedingsofthe11thACMConference
onComputerandCommunicationsSecurity,ser.CCS’04. NewYork,
morereliableSUTOscoresforotherPINentrymethodswould
NY, USA: Association for Computing Machinery, 2004, p. 236–245.
also benefit the community. [Online].Available:https://doi.org/10.1145/1030083.1030116
[2] E. von Zezschwitz, A. De Luca, B. Brunkow, and H. Hussmann,
VIII. CONCLUSION “Swipin:Fastandsecurepin-entryonsmartphones,”inProceedingsof
the 33rd Annual ACM Conference on Human Factors in Computing
We presented IFTT-PIN, a PIN-entry method conceived as Systems, ser. CHI ’15. New York, NY, USA: Association for
avehicletointroducetheself-calibrationparadigm.IFTT-PIN Computing Machinery, 2015, p. 1403–1406. [Online]. Available:
allowsuserstoenterthePINoftheirchoiceviaanelimination https://doi.org/10.1145/2702123.2702212
[3] K. K. Greene, J. Kelsey, and J. M. Franklin, Measuring the Usability
process by indicating the color assigned to their digit (yellow
and Security of Permuted Passwords on Mobile Platforms, Apr. 2016.
or gray). To express their choice, users click on a button [Online].Available:http://dx.doi.org/10.6028/NIST.IR.8040
whose color is the same as their digit. But buttons do not [4] P.Markert,D.V.Bailey,M.Golla,M.Du¨rmuth,andA.J.Aviv,“This
pincanbeeasilyguessed:Analyzingthesecurityofsmartphoneunlock
have any color assigned to them at the start of the interaction.
pins,”in2020IEEESymposiumonSecurityandPrivacy(SP). IEEE,
Users are free to define the color of each button in their mind 2020,pp.286–303.
and use them as such without informing the interface. After [5] W. Meng, D. S. Wong, S. Furnell, and J. Zhou, “Surveying the
developmentofbiometricuserauthenticationonmobilephones,”IEEE
a few iterations, IFTT-PIN can infer both the digit the user
Communications Surveys & Tutorials, vol. 17, no. 3, pp. 1268–1293,
had in mind and the color of each button used. IFTT-PIN can 2015.
thuseffectivelycalibrateitselftoeachuseratinteractiontime, [6] A.J.Aviv,J.T.Davin,F.Wolf,andR.Kuber,“Towardsbaselinesfor
shouldersurfingonmobileauthentication,”inProceedingsofthe33rd
demonstrating a new interactive experience.
Annual Computer Security Applications Conference, ser. ACSAC ’17.
Forthisreason,weproposedIFTT-PINasanovelapproach New York, NY, USA: Association for Computing Machinery, 2017, p.
toprotectagainstshouldersurfingattacks.Becausethecolorof 486–498.[Online].Available:https://doi.org/10.1145/3134600.3134609
[7] J. Gugenheimer, A. De Luca, H. Hess, S. Karg, D. Wolf, and
eachbuttonisnotpre-definedandonlypre-existsintheuser’s
E.Rukzio,“Colorsnakes:Usingcoloreddecoystosecureauthentication
mind, it is significantly harder for an attacker to make sense in sensitive contexts,” in Proceedings of the 17th International
of the user’s actions in real time. By adding self-calibration Conference on Human-Computer Interaction with Mobile Devices and
Services, ser. MobileHCI ’15. New York, NY, USA: Association
to ROTH, IFTT-PIN statistically significantly decreased PIN
for Computing Machinery, 2015, p. 274–283. [Online]. Available:
attack decoding rate by ca. 8.5 times (p=1.1e-9), while only https://doi.org/10.1145/2785830.2785834[8] D.S.Tan,P.Keyani,andM.Czerwinski,“Spy-resistantkeyboard:more scores mean: adding an adjective rating scale,” J. Usability Studies,
securepasswordentryonpublictouchscreendisplays,”inProceedings vol.4,no.3,p.114–123,may2009.
of the 17th Australia Conference on Computer-Human Interaction: [24] L. Cranor and S. Garfinkel, “Guest editors’ introduction: Secure or
CitizensOnline:ConsiderationsforTodayandtheFuture,ser.OZCHI usable?”IEEESecurity&Privacy,vol.2,no.5,pp.16–18,2004.
’05. Narrabundah,AUS:Computer-HumanInteractionSpecialInterest [25] J. Grizou, I. n. Iturrate, L. Montesano, P.-Y. Oudeyer, and M. Lopes,
Group(CHISIG)ofAustralia,2005,p.1–10. “Interactive learning from unlabeled instructions,” in Proceedings of
[9] A.DeLuca,K.Hertzschuch,andH.Hussmann,“Colorpin:securingpin the Thirtieth Conference on Uncertainty in Artificial Intelligence, ser.
entrythroughindirectinput,”inProceedingsoftheSIGCHIConference UAI’14. Arlington,Virginia,USA:AUAIPress,2014,p.290–299.
on Human Factors in Computing Systems, ser. CHI ’10. New York,
NY,USA:AssociationforComputingMachinery,2010,p.1103–1106. APPENDIX
[Online].Available:https://doi.org/10.1145/1753326.1753490
A. Algorithmic Illustration
[10] W. A. van Eekelen, J. van den Elst, and V.-J. Khan, “Picassopass:
a password scheme using a dynamically layered combination of TheinterpretationhypothesesprocessisillustratedinFigure
graphicalelements,”inCHI’13ExtendedAbstractsonHumanFactors
5 after one, four, and eight clicks from a typical interaction.
in Computing Systems, ser. CHI EA ’13. New York, NY, USA:
Association for Computing Machinery, 2013, p. 1857–1862. [Online]. For visual clarity, we only show the process for digit 0, 1, 2,
Available:https://doi.org/10.1145/2468356.2468689 and 3, as if the user could only enter one of those four digits.
[11] A. Bianchi, I. Oakley, V. Kostakos, and D. S. Kwon, “The phone After one click, the top-left button is marked with a dot
lock:audioandhapticshoulder-surfingresistantpinentrymethodsfor
becausetheuserjustclickedonthatbutton.Thisdotisyellow
mobile devices,” in Proceedings of the Fifth International Conference
onTangible,Embedded,andEmbodiedInteraction,ser.TEI’11. New for digit 0 and 3, and gray for digit 1 and 2, because, at the
York, NY, USA: Association for Computing Machinery, 2010, p. time the user clicked on the button, the digits 0 and 3 were
197–200.[Online].Available:https://doi.org/10.1145/1935701.1935740
yellow, and digits 1 and 2 were gray. After one click, there
[12] A. De Luca, M. Harbach, E. von Zezschwitz, M.-E. Maurer, B. E.
Slawik, H. Hussmann, and M. Smith, “Now you see me, now you is no way to know which digit the user is entering, nor what
don’t: protecting smartphone authentication from shoulder surfers,” color is assigned to that button, all hypotheses are consistent.
in Proceedings of the SIGCHI Conference on Human Factors in
After four clicks, the middle button has received two clicks
Computing Systems, ser. CHI ’14. New York, NY, USA: Association
for Computing Machinery, 2014, p. 2937–2946. [Online]. Available: fromtheuser.Iftheuserwasenteringdigit0and2,theywould
https://doi.org/10.1145/2556288.2557097 have used the middle button to mean alternatively yellow and
[13] M. Khamis, F. Alt, M. Hassib, E. von Zezschwitz, R. Hasholzner,
gray, which would be a breach of the consistency assumption.
andA.Bulling,“Gazetouchpass:Multimodalauthenticationusinggaze
and touch on mobile devices,” in Proceedings of the 2016 CHI Thus, the user is not entering digit 0 or 2. For digit 1 and 3,
Conference Extended Abstracts on Human Factors in Computing both times the user clicked on the middle button to mean the
Systems, ser. CHI EA ’16. New York, NY, USA: Association
same color. The middle button would be yellow if the user
for Computing Machinery, 2016, p. 2156–2164. [Online]. Available:
https://doi.org/10.1145/2851581.2892314 was typing a 1, and gray if the user was typing a 3, but both
[14] M.Khamis,L.Trotter,V.Ma¨kela¨,E.v.Zezschwitz,J.Le,A.Bulling, optionsremainconsistentatthisstage,andtheusermightwell
and F. Alt, “Cueauth: Comparing touch, mid-air gestures, and gaze be entering any of them, we just can’t tell yet.
forcue-basedauthenticationonsituateddisplays,”Proc.ACMInteract.
After eight clicks, the top-left button would have been used
Mob. Wearable Ubiquitous Technol., vol. 2, no. 4, dec 2018. [Online].
Available:https://doi.org/10.1145/3287052 for both yellow and gray if the user was entering digit 1.
[15] W.-C. Ku and H.-J. Xu, “Efficient shoulder surfing resistant pin au- Only our interpretation of the button color according to digit
thentication scheme based on localized tactile feedback,” in 2019 6th
3 remains fully consistent, thus we can conclude that the user
IEEEInternationalConferenceonCyberSecurityandCloudComputing
(CSCloud)/20195thIEEEInternationalConferenceonEdgeComputing is trying to enter the digit 3. This process is best understood
andScalableCloud(EdgeCom),2019,pp.151–156. interactively and an interactive demonstration is available on
[16] D. M. Ibrahim and S. Ambreen, “Gaze touch cross pin: Secure
the link shared in section IV-D).
multimodal authentication using gaze and touch pin,” p. 777–781,
Oct. 2019. [Online]. Available: http://dx.doi.org/10.35940/ijeat.A1381. Once we have identified a digit, we automatically know
109119 which color the user is attributing to each button. In other
[17] F. Tari, A. A. Ozok, and S. H. Holden, “A comparison of perceived
words, the process of entering the first digit under the self-
and real shoulder-surfing risks between alphanumeric and graphical
passwords,” in Proceedings of the Second Symposium on Usable calibration paradigm is calibrating the system for subsequent
Privacy and Security, ser. SOUPS ’06. New York, NY, USA: usebythesameuser.WithintheIFTT-PINinterface,weshow
Association for Computing Machinery, 2006, p. 56–66. [Online].
this by assigning colors to each button once the interface has
Available:https://doi.org/10.1145/1143120.1143128
identified a new digit. When the user reuses the same buttons
[18] F. Binbeshr, M. Mat Kiah, L. Y. Por, and A. Zaidan, “A systematic
review of pin-entry methods resistant to shoulder-surfing attacks,” toenteraseconddigit,itwillthereforetakelessiterationthan
Computers&Security,vol.101,p.102116,2021.[Online].Available: when entering the first digit by falling back to the reasoning
https://www.sciencedirect.com/science/article/pii/S0167404820303898
from section III-C. For buttons that remain undefined (black),
[19] S. G. Hart and L. E. Staveland, “Development of nasa-tlx (task load
index): Results of empirical and theoretical research,” in Advances in we keep using the self-calibration algorithm.
psychology. Elsevier,1988,vol.52,pp.139–183. The sequence of colors applied to digits is important to
[20] J. Brooke, “Sus: a retrospective,” J. Usability Studies, vol. 8, no. 2, p.
identifytothecorrecthypothesisasfastaspossible.Wedetail
29–40,feb2013.
this active learning problem in appendix C.
[21] ISO. (1998) Ergonomic requirements for office work with visual
display terminals (vdts) — part 11: Guidance on usability. [Online].
B. Algorithmic Details
Available:https://www.iso.org/obp/ui/#iso:std:iso:9241:-11:ed-1:v1:en
[22] J. Nielsen. (2012, Jan) Usability 101: Introduction to Measuring consistency requires us to keep track of past
usability. [Online]. Available: https://www.nngroup.com/articles/
interactionsandtointerprettheminlightofeachpossibledigit
usability-101-introduction-to-usability/
[23] A.Bangor,P.Kortum,andJ.Miller,“Determiningwhatindividualsus (d∈D) the user might be intending to enter. Specifically, weFig.5:Illustrationofinconsistencydetectionfordigits0to3afterone,four,andeightclicksfromatypicalinteraction.Aftereachiteration,
adotisplacedonthebuttonpressedbytheuserandiscoloredofthesamecoloraswasthecolorofthedigitwhenthebuttonwaspressed.
Green squares highlight buttons of interest for which hypothesis is consistent. Red ones highlight inconsistencies, meaning the same button
wouldhavebeenusedtomeantwodifferentcolors.Noticehownoneofthehypothesessharethesamebutton-to-colormapping,yetseveral
mappingscanremainconsistentformanysteps.Forexample,after4clicks,hypothesis1and3disagreeonthecolortoassigntothemiddle
button. Yet, in both cases, the usage of the button is consistent and thus both hypotheses remain valid.
keep the history of users button presses (b ∈ B) and digit Hd,b is greater than 1, then the user is inconsistent. Using
N
colors(c∈C)andrunthefollowingreasoningforeachdigit: mathematical notation, for a given d, inconsistency is defined
“If the user is trying to type the digit d, then when they used as ∃b ∈ B,|Hd,b| > 1, and, conversely, consistency can
N
button b, they meant color c.” For each digit d, the algorithm be written as ∀b ∈ B,|Hd,b| < 1. In turn, the consistency
N
is building a history of (b,c) pairs representing samples from assumption could be expressed using the uniqueness quantifi-
the action-to-meaning mapping if the user was entering d. cation notation as ∃!d ∈ D,(∀b ∈ B,|Hd,b| ≤ 1), which
N
For a given digit d, this historical sequence can be written can be read as: “there is exactly one digit for which, for all
as Hd = {(b ,c | d) | i = 1,...,N} where b and c |d buttons, the number of colors assigned to each button was at
N i i i i
represent respectively the button pressed by the user and the most one”.
color of the digit d at iteration i out of N iteration performed This uniqueness is satisfied only once the user has “in-
so far. teracted enough” with the interface. It is valid at the limit
when N → ∞ and enough “variety of color pattern” has
Under our consistency assumption, a user cannot use the
been displayed on the digit. In other words, only one unique
same button to express more than one color. For each digit
hypothesis will eventually remain consistent. In practice, in
and button, this reasoning unfolds as: “If a user is trying to
enter digit d, and used the button b to mean both cyellow and most cases, the user digit can be identified after only a few
cgray, then the user would have been inconsistent and is thus clicksasthereaderwillbeabletotestviatheinteractivedemo
linked in section IV-D.
nottryingtoenterd.”ThisisthecorereasoningbehindIFTT-
In summary, to identify the user digit, IFTT-PIN measures
PIN.
consistency for all digits after each iteration. Once only one
Assuming no human error, Boolean logic is sufficient to
digit satisfies the consistency requirement, we know it is the
test for consistency. Specifically, if the number of colors
one the user has in mind. A pseudocode of this process is
assigned to a button is greater that one, then the user is being
summarized in Listing 1 using a Pythonic syntax.
inconsistent. We can define Hd,b = (c |d) where b = b
N i i
and i = 1,...,N as a subset of Hd containing only the C. Active Choice of Colors
N
history of colors from Hd that are linked with the button b. In [1], the sequence of color was pre-defined and ensured
N
If, for a given digit d, for all b, the cardinality (number of that the digit could be uniquely identified. In IFTT-PIN, we
unique elements in a set, here number of unique colors) of are actively deciding which color to assign to each digit ateach iteration according to the history of interaction and in
order to identify the user intent as fast as possible. For self-
calibration problems, an active planning strategy has been
proposed in [25] which we implemented in IFTT-PIN. We
added an additional constraint that each colored set of digits
must be balanced at each iteration, in other words, there
must always be five yellow digits and five gray digits. The
implementationdetailsarebeyondthescopeofthispaper,but
our code will be made available online for inspection (not
linked here for blind review).1 nDigit = 10; nButton = 9
2 # init history of interaction H_Nˆ{d,b}
3 historyPerDigit = [ []*nButton ]*nDigit # empty at start
4 # init list of possible digits the user has in mind
5 consistentDigits = list(range(nDigit)) # all digits are possible at start
6
7 # repeat until only one user digit is consistent
8 while (len(consistentDigits) > 1):
9 digitColors = applyColorToDigits() # return list of color for each digit
10 buttonPressed = waitForUserInput() # return button pressed by the user
11 # store history of color per button per digit
12 for digit in range(nDigit):
13 historyPerDigit[digit][buttonPressed].append(digitColors[digit])
14 # test for consistency for each digit
15 consistentDigits = [] # empty list of consistent digit
16 for digit in range(nDigit):
17 # tmp variable, assumed consistent unless prooven otherwise
18 isDigitConsistent = True
19 # check consistency button per button
20 for button in range(nButton):
21 # compute the set of unique color attached to this button
22 colorSet = set(historyPerDigit[digit][button])
23 # inconsistent if more than one color in the set
24 if (len(colorSet) > 1):
25 isDigitConsistent = False
26 # if digit consistent, we add it to the consistent list
27 if (isDigitConsistent):
28 consistentDigits.append(digit)
29
30 # consistentDigits[0] is the digit the user has in mind
31 # historyPerDigit[consistentDigits[0]] contains button-to-color mapping info
Listing1:PseudocodeforIFTT-PIN.ThehistoryofbuttonpressesanddigitcolorsarestoredinavariablecalledhistoryPerDigit
(L12-13).Atestofconsistencyisperformed(L14-25)andallconsistentdigitsareaddedtotheconsistentDigitislist(L27-28).
Theprocessstopswhenonlyoneconsistentdigitremainsinthelist(L8),whichisthedigittheuserhasinmind(seeL30-31).
TheimplementationdetailsforapplyColorToDigits()(L9)andwaitForUserInput()(L10)mayvaryperapplication,seesection
C).