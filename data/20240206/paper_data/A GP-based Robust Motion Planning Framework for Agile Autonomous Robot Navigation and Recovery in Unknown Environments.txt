A GP-based Robust Motion Planning Framework for Agile Autonomous
Robot Navigation and Recovery in Unknown Environments
Nicholas Mohammad, Jacob Higgins, Nicola Bezzo
Abstract—For autonomous mobile robots, uncertainties in
theenvironmentandsystemmodelcanleadtofailureinthemo-
tionplanningpipeline,resultinginpotentialcollisions.Inorder
toachieveahighlevelofrobustautonomy,theserobotsshould
be able to proactively predict and recover from such failures.
To this end, we propose a Gaussian Process (GP) based model
for proactively detecting the risk of future motion planning
failure. When this risk exceeds a certain threshold, a recovery
behavioristriggeredthatleveragesthesameGPmodeltofind
a safe state from which the robot may continue towards the
goal. The proposed approach is trained in simulation only and
can generalize to real world environments on different robotic
platforms. Simulations and physical experiments demonstrate
that our framework is capable of both predicting planner
failuresandrecoveringtherobottostateswhereplannersuccess
(a) (b)
is likely, all while producing agile motion.
Fig.1. Exampleinwhichanunexpecteddeadendcouldcauseamotion
Note: Videos of the simulations and experiments are pro- planningfailure.Theproposedapproachpredictstheriskofsuchafailure
vided in the supplementary material and at https://www. andrecoversbeforeitcanoccur.
bezzorobotics.com/nm-icra24.
I. INTRODUCTION
recognizes the dead end, and does not have enough time to
Robust motion planning for autonomous mobile robots
stop before collision. If these motion planning failures are
(AMR)remainsanopenproblemfortheroboticscommunity.
proactivelypredictedforfuturestates,thentherobotcanstop
One of the main challenges is to navigate through environ-
before crashing (x in Fig. 1), maneuver to a safe recovery B
ments in the presence of uncertainty, like an unknown map
point x , then return to nominal planning towards the final
r
a priori or inaccurate system models. For example, this lack
goal.ThisexacttestcasewillbediscussedinSec.VI,along
of robustness was clearly evidenced at the ICRA BARN
with the experimental results.
challenge [1], [2], in which no team was able to navigate
a robot through an unknown, cluttered environment without To achieve this behavior, in this work we propose a
anycollisions1.Withinthenavigationstack,thecauseofsuch proactive- and recovery-focused approach that seeks to pre-
runtimefailuresandpossiblecollisionsistypicallyattributed dict the risk of failure for a receding horizon, safe corridor
to the motion planning pipeline. motion planner, as well as recover from these potential
To prevent such situations, reactive approaches have been failures. Such a planner is chosen due to its effectiveness
developed that detect potentially risky states as they occur at navigating unknown environments as well as its ubiquity
[3]. These reactive approaches, however, suffer from poor within the robotics community. Additionally, we have found
performance because they are often tuned to be conservative that such a planner requires a relatively small number of
and overly cautious, since it is better to actively avoid features to correctly classify potential failures. A Gaussian
unsafe states before they occur. They also do not perform Process (GP) is trained on simulated data to predict failures
well for high-inertial systems which need an appropriately along the planned receding horizon trajectory. When the
large reaction time in order to avoid collision. Alternatively, predicted risk meets a certain threshold criterion, the robot
proactive approaches classify future robot states as safe or is stopped and a recovery behavior is engaged. This process
unsafe based on the current sensor readings and motion leveragesthesameGPtofindanearbysafestatefromwhich
plan [4], [5]. These approaches often rely on complex deep therobotcansafelynegotiateitsimmediateenvironmentand
learningmodelswhichrequireexhaustiverealworldtraining continue motion towards its ultimate goal.
data to detect the safety of future states. Furthermore, these
proactive approaches do not solve the problem of recovery The contribution of this work is a complete and robust
after detecting such risky states in the planning horizon. motion planning pipeline for robot navigation in unknown
Consider the case in Fig. 1, where the robot is tasked environments with two main innovations: 1) a proactive
with navigating quickly through an unknown, occluded en- planner failure detection scheme in which a model agnos-
vironment.Withoutanyproactivescheme,therobotsuddenly tic, proactive GP-based approach detects and predicts future
planning failures and their risk within a horizon, without the
Nicholas Mohammad, Jacob Higgins, and Nicola Bezzo are with needtoretrainbetweensimulationandtherealworld and2)
the Department of Electrical and Computer Engineering, University
a robust recovery scheme in which a GP-based, sampling-
of Virginia, Charlottesville, VA 22903, USA {nm9ur, jdh4je,
nbezzo}@virginia.edu based recovery method drives the robot to a safe recovery
1ourteamplacedsecondinthiscompetition point in order to continue with nominal planning.
4202
beF
2
]OR.sc[
1v71610.2042:viXraII. RELATEDWORK III. PROBLEMFORMULATION
Given a mobile robot system tasked to navigate an un-
While motion planning is an active field of research known environment, let x˙ = g(x,u) define the equations
within the robotics community, the problem of robust, agile of motion for the system with state x ∈ Rnx and control
navigationthroughcluttered,unknownenvironmentsremains inputs u∈Rnu. These controls are produced by a low-level
unsolved [1]. Many state-of-the-art motion planners impose controller that is tracking a time-based trajectory τ(t;t 0) ∈
hardconstraintswithinanonlinearoptimizationproblemand Rnx generated at time t 0. The purpose of this trajectory
usenumericalsolverstogeneratethefinaltrajectorieswithin is to provide a high-level path plan over a future horizon
safe corridors [6], [7], [8]. However, random disturbances t ∈ [t 0,t 0 +T H] from the current state of the robot x(t 0)
and occluded obstacles may cause constraint violations at towards a goal x g while avoiding the state subset X O(t 0)
runtime, leading to an inability to generate updated tra- occupied by obstacles currently known to the robot. While
jectories. [9] considers the potential for planner failure by tracking this trajectory, information about obstacles in the
generating an additional safe trajectory which stops within environment are updated at runtime so that, in general,
known free space at each planning iteration. However, they X O(t)̸=X O(t 0). This means the trajectory τ(t;t 0) has the
do not provide any recovery behaviors in case the vehicle potential to collide with these newly discovered obstacles; if
is unable to find feasible trajectories at the stopping point. this is the case, then a new trajectory must be re-planned.
A popular alternative to the hard-constrained methods are Practical path planners, however, suffer from planning fail-
soft-constrainedplanners,wherethehardconstraintsarecon- ureswithincertainsituationsduetoinfeasibleconstraintsfor
vertedintodifferentiabletermsandputintothecostfunction the current planning iteration. While a single path-planning
of an unconstrained nonlinear optimization problem [10], failure may not be fatal, several failures within the planning
[11]. While the soft-constrained methods generate trajecto- horizon could lead to unsafe situations for the robot.
ries even when constraints aren’t satisfied, conflicting terms Problem 1: Proactive Planner Failure Detection: Let
within the cost function can lead to low quality solutions, {xˆ i} be a set of predicted future states for the robot while
i.e, unsafe or untrackable trajectories [12]. In this paper, tracking τ over some horizon T F ≤T H. For a given motion
weworkwiththehard-constrainedmotionplannerparadigm planning policy Π, define the random variable Z τ ∈ W as
and develop an algorithm to monitor for and recover from thenumberofmotionplanningfailuresthatoccursfromt 0to
possible failures proactively at runtime. t 0+T F whiletherobottracksτ,withP(Z τ)denotingtheir
probabilities. We seek the creation of a risk metric ρ ∈ R
Safety monitoring during runtime motion planning is a τ
thatmapsfromZ toasinglerealnumberthatcharacterizes
problem with a catalogue of potential solutions. One well τ
the risk of path planner failure over T .
studied technique is Hamilton-Jacobi-Isaacs (HJI) reacha- F
Problem 2: Recovery After Failure Detection: We seek
bility analysis, where safe control is transformed into a
a recovery strategy Π (x ) that, when the risk ρ exceeds
formalverificationmethodwiththeoreticalsafetyguarantees. r 0 τ
a threshold ψ , stops the robot and performs a recovery
However, HJI reachability requires an accurate model of the ρ
behavior to reduce the risk of planner failure back down
system and suffers from the curse of dimensionality [13].
to an acceptable level. Specifically, define Z ∈ {0,1} to
In order to overcome this problem, recent works have used x
represent the success (0) or failure (1) of Π from state x.
machine learning techniques to approximate and learn from
The objective of the recovery policy Π is to locate and
thegeneratedreachablesets.[14]leveragesAdaptiveKriging r
control the vehicle to a nearby state x which maximizes
using a surrogate GP model and Monte Carlo sampling r
the expected success of Π:
to approximate the sets at runtime. [15] uses a neural
network trained on ground truth reachable sets to output x =argminE[Z ]. (1)
r x
binary safe/unsafe classifications for planned trajectories. x̸∈XO
While these works get around the intractability of runtime
Inthefollowingsection,wediscussindetailthedesignof
reachability analysis, they still rely on specific, accurate
ΠandΠ ,anddemonstratethatproactivelydetectingplanner
system models, limiting their generalizability. r
failure and recovering after detection can be achieved by
Machinelearningmethodsarealsousedtomonitorvehicle leveraging the same data-informed model.
safety outside of the reachability context, stopping the robot
when anomalous states are detected. [4] and [5] proactively IV. APPROACH
predictanomalousstateswhichleadtocollisionsandstopthe We propose a GP regression-based scheme to assess the
vehicle before reaching them. However, these works either risk of future motion planning failure while tracking a
implement trivial backup and rotate recovery behaviors with trajectory τ(t). Data were collected from simulations that
no consideration for planning success, or rely on humans to record motion planning successes and failures in various
perform the recovery for them. states that the robot may encounter during typical operation.
Our approach leverages machine learning techniques to ThisdatawereusedtotrainaGPregressionmodeltopredict
monitor vehicle safety through planner failure detection. the probability of motion planning failure for individual
Specifically, we train on the distribution of failures over states over a future horizon. Fig. 2 shows the outline of
hand-selected input features which enable our approach to our approach. The front-end of the motion planner policy
be model agnostic and require only training data from Π generates a corridor C of convex polytopes, illustrated
simulation.Tothebestofourknowledge,ourworkisthefirst in Fig. 3(a). The corridor is then sent to the back-end for
to utilize a learning component to both proactively predict final trajectory generation τ(t) (see Fig. 3(b)). A Model
future planning failures and recover after prediction. Predictive Controller (MPC) is then used to generate theFig.2. Blockdiagramfortheproposedapproach.
(a) front-end (b) back-end (c) failuredetection (d) recovery
Fig.3. Anexamplecasestudyinvestigatedinthisworkvisualizingthecompletenavigationpipeline(a,b),inwhichtherecedinghorizon,safecorridor
motionplannerfails(c),promptingtherecoverypipelinetotakeoverandrecoverthesystem(d).Forτ(t),brightercolorsdenotehigherspeeds.
control signal to track τ(t), generating a sequence of future 2) Planner Back-End. We represent the trajectory τ(t)
robot states {xˆ } over horizon T . These states, along with (shown in Fig. 3(b)) as a collection of N cubic (n = 3)
i F
thecorridorC,areusedtopredicttheriskofmotionplanning Be´zier curves. We use these curves for the trajectory for-
failure ρ . Consider the case shown in Fig. 3(c), where the mulation as they are a commonly utilized basis with several
τ
vehicle is driving towards a previously occluded dead-end. salientpropertiesforcorridor-basedmotionplanners[7].One
If the predicted risk from our GP-based failure detection useful property of the Be´zier curve τ (t) is that it is fully
j
modelexceedsauser-definedthresholdψ ,thentherecovery contained within the simplex formed by the control points
ρ
behavior is triggered, and a recovery goal x is sent to our qi, i∈[0,n].Thus,forτ (t)tobecontainedwithinaconvex
r j j
go-to-goal (GTG) MPC to bring the vehicle to a state where polytopeC,itissufficienttoensurethatqi ∈C, ∀i∈[0,n].
j
solversuccessislikely(Fig.3(d)).Inthefollowingsections, To generate the final trajectory, we leverage the FASTER
we describe in detail our motion planner failure prediction solver[9],alteredtoconverttheBe´ziercontrolpointsofeach
andrecoveryframework,startingwithabriefbackgroundof trajectory segment τ (t) into the MINVO basis [17] during
j
the base motion planner. optimization to improve solver success rate. Once τ(t) has
been found, it is sent to the tracking MPC to be executed on
A. Motion Planner Preliminaries the robot.
1)PlannerFront-End.Thefront-endstartswiththeglobal
B. Failure Modes: Front-End vs Back-End
occupancy map M, which is generated by fusing data from
an onboard depth sensor, along with the current state of the Therearetwodistinctfailuremodesofthemotionplanner
vehicle, x(t ), and the goal state x . As shown in Fig. 3(a), described in Sec. IV-A, both of which will result in Π=∅:
0 g
an initial 0-order path within the free and unknown space of (i) a front-end failure, in which an intersecting corridor C
M is generated by using a graph-based, global planner. In between x(t 0) and x g cannot be found, or (ii) a back-end
this work, we use the Jump Point Search (JPS) algorithm failure, in which the numerical solver fails to generate a
[16], due to the reduced computational complexity when trajectory along the JPS search path. Front-end failures can
compared to other common algorithms like A∗ . occur when a feasible search path doesn’t exist (e.g., either
x(t ) or x overlap occupied space within M), or when
A corridor C of intersecting convex polytopes is then 0 g
parameters of the JPS are poorly conditioned for generating
established along this generated initial path, in order to
a corridor C (e.g., |C| is high because the planning horizon
connect x(t ) to x . Each C ∈ C is represented as an H-
0 g i
distance is too large). The front-end of the motion planner
polytope defined by a matrix A and vector b that define a
i i
convex set of points p∈R2 in the xy plane implemented in Sec. IV-A typically runs in < 1ms, thus
for a given state x and map M, front-end failures are
C ={p∈R2|A p≤b }. (2) easily determined by simply running the JPS and corridor
i i i
generation at that state.
In order to generate each C of the corridor C, we rely Much more difficult to predict, however, are failures at
i
on the gradient-based optimization approach in [10]. With C the back-end of the motion planner due to the fact that
constructed, the corridor is sent along with x(t ) and x to the environment is unknown a priori and the optimization
0 g
the back-end optimization to find the final trajectory τ(t). is based only on current observations in M. Since the back-end is based on a nonlinear optimizer, it can be difficult to were particularly well-suited to predicting the probability of
characterize success or failure prior to actually running the back-end failure: the minimum time-to-intersect (TTI), t ,
C
back-endsolver.Additionally,thetimetoruntheback-endis fromrobotstatextocorridorC,andthenumberofpolytopes
typically>100ms,whichistoolargetodirectlytestmultiple that define the corridor |C|.
future points for failure. Fig. 3(c) shows an example back- The minimum TTI can be found by using the xy position
end failure, in which the discovery of a previously unknown p ∈ R2 and velocity v ∈ R2 of the robot state x, then
wall (shown as undiscovered space in Fig. 3(b)) requires a using kinematic equations to find the minimum TTI of the
new avoidant trajectory to be generated. While the front-end hyperplanes that define the polytope C containing p(t ).
0
is able to generate a corridor C, the back-end is unable to Formally, if row r ∈ A and b ∈ b form a hyperplane
i i
find a feasible trajectory. r ·⟨x,y⟩=b of polytope C, then the time to intersect the
i i
To concretely define these ideas, let Z ∈ {0,1} rep- hyperplane t can be calculated as:
x,C H
resent a success (0) or failure (1) of the motion planner
(cid:40)
ap nip del Zin be ∈, w {i 0th ,1Z }f re∈ pre{ s0 e, n1 ti} ngre apr be as ce kn -t ein ng da faif lr uo rn et .-e Sn ud ccf ea si slu ore
f
t H(r i,b i,x)= γbi r− ir ·vi·p i of thr ei r· wv is>
e
0 (4)
t
the back-end is dependent on success at the front-end, and
failureofthefront-endisinterpretedasafailureoftheback- where γ is a user-defined maximum value for t when the
t H
endaswell,sothatP (cid:0) Zb =1|Zf =1(cid:1) =1.Theprobability vehicle is stationary or moving away from the hyperplane.
of entire pipeline failure can be written as With t , t is calculated as the minimum TTI to the
H C
P(Z )=P
(cid:0) Zb|Zf(cid:1)
P
(cid:0) Zf(cid:1)
. (3)
hyperplanes of C:
x,C
t =min{t (r ,b ,x)}. (5)
The probability of front-end failure is easily and rapidly C i H i i
checked by running the JPS for a given x and C, so that
One of the biggest factors that affect the ability of the
effectivelyP(Zf)∈{0,1}.Ourcontributionisinestimating
back-end solver to find a feasible solution is how close the
the probability of back-end failure after a front-end success,
current robot position p(t ) is located to the boundary of
P(Zb|Zf =0). For simplicity in notation, in the rest of the 0
the feasible set C. Intuitively, TTI is an effective predictor
paper we will write this probability as P(Zb) and drop the
of back-end failure because it captures several factors that
dependence on the front-end outcome.
determine success: (i) The physical distance between p(t )
0
C. Gaussian Process for Predicting Back-End Failure and the free space boundary, (ii) the velocity of the robot
v(t ), and (iii) the heading of the robot.
Toaccuratelypredictback-endfailures,weproposeaGP- 0
In addition to TTI, the cardinality |C| of the corridor
based regression model trained on statistics inferred from
also plays a role in failure of the back-end solver: if C is
simulated data. We choose GPs due to their non-parametric
definedbymanypolytopes,thenobstaclesintheenvironment
form and ability to accurately infer from a small dataset.
necessitate a very non-direct path to be planned for the
These data relate the robot and map state to the probability
of back-end failure P(Zb ). A GP model Pˆ(Zb |·) can robot, further complicating the search for a feasible path.
x,C x,C Together,thesetwofeatureswereusedinsideafeaturevector
be trained to predict back-end failure probability at run time
d(C,x) = [t ,|C|] to infer the probability of back-end
overfuturestates{xˆ }.Theseprobabilitiescanthenbeused C
i failure. To find this probability, the back-end failure training
to assess the risk of future motion planning failure ρ τ over data (cid:8) Zb (cid:9) were binned based on feature vector value d,
the entire prediction horizon. x,C
and ground-truth probability of failure P(Zb ) was found
Anavigationstackcomprisingofboththeplanningpolicy x,C
within each bin. To validate the choice of input features for
Π and the MPC can be deployed in simulation to gather
training,weplottheprobabilityofback-endfailureP(Zb )
trainingexamplesfortheGPmodel.Togeneratethetraining x,C
dataset, D, we use the Poisson random forest dataset from over t C and |C|, where the correlations are clearly seen in
Figs. 4(a) and (b). As t decreases, the probability of back-
[18],whichcontains10forestworlds,eachwithacollection C
end failure increases. Furthermore, as the corridor length |C|
of 90 start and goal positions for navigation. A Clearpath
increases, the probability of failure also increases.
Jackal UGV was then tasked to navigate through the worlds
in each of the start and goal configurations, collecting back- 2) GP Regression. The underlying GP model input is
endsuccessandfailuredatapointsateachplanningiteration. defined by a collection of M input training features, D =
Withthesedatacollected,featureswhichcorrelatewithback- [d 0,...,d M], and values P =[P 0,...,P M], with an output
end failure can be found. To promote generality, the chosen defined by a joint Gaussian distribution [19]:
featuresshouldonlydependonthecorridorsetC,regardless (cid:20) (cid:21) (cid:18)(cid:20) (cid:21) (cid:20) (cid:21)(cid:19)
P µ(d) K K
of the sensing modality used to generate it (LiDAR, RGBd, ∼N , ∗ , (6)
Pˆ µ(d ) KT K
etc.), along with the robot position and its time derivatives, ∗ ∗ ∗∗
which are common state features for most AMR. where K = κ(D,D), K = κ(D,D ) and K =
∗ ∗ ∗∗
1) Feature Selection. Each training tuple contains three κ(D ,D ),µisthemeanfunction,D isthetestinput,and
∗ ∗ ∗
pieces of information: (i) robot state x, (ii) corridor C, and κ is a positive definite kernel function, which is the Radial
(iii) binary variable Z xb ,C which encodes a success or failure Basis Function (RBF) in this work. From this, the predictive
oftheback-end.Withthesedata,statisticalinferencescanbe posterior distribution of Pˆ given D can be expressed as
madethatrelatetherobotstateandcorridortotheprobability another Gaussian distribution:
of back-end failure P(Zb ). Through study of various
x,C
possible features that could be used, we found two which Pˆ ∼N(µ ,σ2), (7)
∗ ∗with µ and σ2 defined as: D. Recovering After Predicted Failures
∗ ∗
µ ∗ =µ(D ∗)+K ∗TK(P −µ(D)) (8) When ρ τ > ψ ρ is satisfied, it means that there is a
collection of states in the vehicle’s future horizon that the
σ ∗2 =K ∗∗−K ∗TK−1K ∗. (9) plannerislikelyunabletosuccessfullyoperate.Assuch,the
vehicle must stop or perform other recovery maneuvers in
With this, the estimated probability of back-end failure is
order to avoid collisions and navigate successfully through
taken as the mean values of this posterior:
said regions. Unlike prior works where human operators
Pˆ(cid:0) Z xb ,C|d(cid:1) =µ ∗. (10) intervene to recover the vehicle once failures are detected
[4], [21], our framework includes a recovery planner Π
To validate the quality of the trained GP models, the r
which enables the vehicle to find and execute safe recovery
distribution of failures over t was collected from test
C maneuvers autonomously, as illustrated in Fig. 3(d).
worlds outside the forest dataset, and the resulting test
Once the vehicle has stopped after switching to the re-
set distribution was compared with the learned distribution
Pˆ(Zb |d) for |C| = 2 (Fig. 4(c)) and |C| = 3 (Fig. 4(d)). covery mode, the objective is to locate a nearby region
x,C where the planner will succeed, i.e., Z = 0. The first
These plots show the learned distributions closely match the x,C
step is to sample points uniformly in free space around the
testdistribution,demonstratingthattheGPmodelsgeneralize
current vehicle position p(t ). To do so, an H-polytope C
well to new environments. 0 r
is generated around p(t ), where hit-and-run Markov-chain
0
Monte Carlo sampling [22] is used to find N candidate
p
positions P = {p ,...,p }, where N is a user-defined
c 0 Np p
parameter. P is then converted to states X by assuming
c c
the vehicle starts from rest. We make this choice because
it significantly reduces the sample space and sampling only
positionswasenoughtofindrecoverystatesinpractice.With
X , we find the probability of planner failure, P(Z ), at
c xi,Ci
each x , as well as neighboring states in close proximity
i
(a) (b)
for consistency. If all predictions have failure probability
greaterthanη,thesamplesarethrownawayandthesampling
processisrepeated.Hereηisauser-definedparameterwhich
controlshowriskaversetherecoverybehaviorshouldbe.x
r
is then chosen to be the state with lowest expected failure:
x =argminE[Z ]. (13)
r xi,Ci
xi∈Xc
(c) (d)
After determining x , the vehicle navigates to the recov-
Fig. 4. Solver failure trends for (a) tC and |C| along with learned r
distributionvstestdistributionfor(c)|C|=2and(d)|C|=3. ery point using the GTG MPC with an added constraint,
formulated as in (2), where p(t ) must remain in C in
3) Defining Planning Risk. With Pˆ(Z xb ,C|d) estimating order to avoid obstacles. Once th0 e vehicle reaches x r,r the
back-end failure, the probability of failure for the entire mo- planner switches back to the nominal safe corridor policy Π
tion planning pipeline P(Z x,C) can be calculated using (3). to generate trajectories τ(t) and the entire process repeats.
These probabilities can be used to infer the risk of motion
planningfailurealongthefuturestates{xˆ i}predictedbythe V. SIMULATIONS
MPC. To formulate this risk, we consider the total number Simulations were performed to both train the GP classifi-
offuturemotionplanningfailuresZ τ asthesalientoutcome cation model described in (6) and validate the proposed ap-
to track, defined as proach to detect and recover from motion planning failures.
(cid:88) All simulations were performed in Gazebo using Ubuntu
Z = Z . (11)
τ xˆ,C
20.04 and ROS Noetic. The robot used in simulation is
xˆ∈{xˆi} a Clearpath Robotics Jackal UGV equipped with a 270◦
Because each Z xˆ,C is a stochastic variable, Z τ is also a 2D Lidar depth sensor. Data were collected as described in
stochastic variable. The risk metric chosen in our approach Sec. IV-C and sent to the GP regressions for training.
is the expected number of collisions over the future horizon, With the models trained, we then validated our approach
ρ τ = E(Z τ). The expected value is chosen here for its in four gazebo worlds of varying difficulty. The base world
simplicityandspeedtocalculate,althoughotherriskmetrics is a series of connected rooms with either sparse or dense
maybeusedaswell[20].SinceeachZ xˆ,C isaBernoulliran- obstacle density and 1m or 2m wide doorways. In each
dom variable with predicted probability P(Z xˆ,C) of failure, world we use the same start configuration x(0) and three
the expectation is calculated as: goals x0, x1, and x2. Fig. 5(a) shows the world with 1m
g g g
(cid:88) doorways and dense obstacle configuration, along with an
ρ = P(Z ). (12)
τ xˆ,C example navigation failure without our approach (Fig. 5(b)
xˆ∈{xˆi} and(c))andsuccesswith(Fig.5(d)).InFig.5(b),thevehicle
A risk threshold ψ may be set so that anytime the risk plans a trajectory τ(t) which intersects a part of the wall
ρ
of planner failure over future states {xˆ } exceeds this value, occludedbyanobstacle.Sinceanavoidingtrajectorycannot
i
the recovery behavior is triggered. be computed in time, the vehicle collides with the wall atx in Fig. 5(c). If instead we use our approach, as shown to follow, using an MPC to generate the control signal u to
A
in Fig. 5(d), the robot detects the planner failure proactively track these trajectories. Lidar sensor readings were provided
and stops at x . A reverse maneuver (green line) is then by Ouster for the Spot, and Velodyne for the Jackal. These
B
executed to reach the recovery state x found using (13). were used by the SLAM package Gmapping in order to
r
The vehicle then switches back to the nominal planner and create a map M and estimate the state of the robot at run-
continues towards x0. time as each platform traveled through an environment un-
g
known a priori. To emphasize the generality of the proposed
approach, the GP model Pˆ(Zb |d) that was used to predict
x,C
motion planning back-end failures was trained entirely on
datacollectedinsimulation,demonstratinghowtheapproach
is both sensor- and model-agnostic.
Two test cases were setup to test the approach. Fig. 7
shows the first case in which the Jackal is tasked to move
towardsagoalaroundanoccludingcorner,behindwhichare
occluded obstacles previously unknown to the robot. Fig. 1
(a) (b) shows the second case in which the Spot is tasked with a
similarmission,exceptitmustnegotiateanunexpecteddead-
end.Withouttheproposedapproach,bothcasesleadtopath-
planningfailures,whichinturnleadtocollisions.BothFig.7
and Fig. 1 show snapshots of the proposed approach being
used to proactively detect risk of path planning failure ρ ,
τ
recovering at x when ρ > ψ , moving to a recovery
B τ ρ
point x , then continuing moving towards x . For these
r g
experiments,theriskthresholdwasψ =3expectedfailures
ρ
(c) (d) over the predicted MPC future trajectory.
Fig.5. (a)Gazeboworldwith1mdoorwayand3differentgoals.In(b)an
obstaclehidesanoccludedwallleadingtoacollisionwithoutourframework
(c)vsasuccessfulnavigationtowardx0 in(d)withourapproach.
g
The remaining 3 test worlds are generated by varying the
doorway width between 1m and 2m, as well as varying the
obstacle layout between a sparse and dense configuration.
For each world tested, the robot is tasked to navigate 10
times to the goals x , creating 30 test points per world,
g
for 120 simulations total. The resulting success rates for the
motion planner with and without our approach are shown in
Fig. 6 for each goal and world combination, where it can be
seenthatusingourfailuredetectionandrecoveryframework
improves the nominal planner’s performance.
(a) (b)
Fig. 7. Experiment case in which unexpected occluded obstacles would
havecausedamotionplannerfailurewithoutourapproach.
VII. CONCLUSIONSANDFUTUREWORK
In this work, we have presented a novel GP-based, proac-
tive failure detection and recovery scheme to prevent a
mobile robot system from colliding with obstacles. Our
approach is shown to improve the performance over a
traditional safe corridor motion planner in both simulation
and experimental case studies. Furthermore, our approach
Fig.6. Navigationsuccessrateswith(blue)andwithout(orange)failure is model- and sensor-agnostic and can be applied without
detectionandrecoveryfordifferentsimulationworldandgoalcombinations.
prior real-world training data due to the careful selection of
features.
VI. PHYSICALEXPERIMENTS Future work aims to enhance the system by incorporating
Theproposedapproachwasvalidatedwithmultiplerobots distributional learning for failure detection, eliminating the
acrossseveralexperiments,allofwhichareshowninthesup- need for multiple GP regressions. Additionally, we would
plementary material and website. Presented in this paper are like to utilize this approach for planner switching within a
two experiments with two real robotics platforms: a Boston Simplex Architecture and incorporate dynamic obstacles.
Dynamics Spot quadruped, and the same Jackal differential
VIII. ACKNOWLEDGEMENTS
drive UGV used in simulations. For each platform, the same
Funding for this research are provided by an Amazon
motionplanningpipelinewasusedtogeneratetrajectoriesτ
Research Award and by CoStar group.REFERENCES [22] R. Tedrake and the Drake Development Team, “Drake: Model-based
design and verification for robotics,” 2019. [Online]. Available:
[1] X. Xiao, Z. Xu, Z. Wang, Y. Song, G. Warnell, P. Stone, T. Zhang, https://drake.mit.edu
S.Ravi,G.Wang,H.Karnan,J.Biswas,N.Mohammad,L.Bramblett,
R. Peddi, N. Bezzo, Z. Xie, and P. Dames, “Autonomous ground
navigation in highly constrained spaces: Lessons learned from the
benchmarkautonomousrobotnavigationchallengeaticra2022[com-
petitions],” IEEE Robotics & Automation Magazine, vol. 29, no. 4,
pp.148–156,2022.
[2] N. Mohammad and N. Bezzo, “A robust and fast occlusion-based
frontiermethodforautonomousnavigationinunknownclutteredenvi-
ronments,”in2022IEEE/RSJInternationalConferenceonIntelligent
RobotsandSystems(IROS),2022,pp.6324–6331.
[3] X.Zhang,Y.Shu,Y.Chen,G.Chen,J.Ye,X.Li,andX.Li,“Multi-
modallearningandrelaxationofphysicalconflictforanexoskeleton
robot with proprioceptive perception,” in 2023 IEEE International
Conference on Robotics and Automation (ICRA), 2023, pp. 10490–
10496.
[4] T. Ji, A. N. Sivakumar, G. Chowdhary, and K. Driggs-Campbell,
“Proactive anomaly detection for robot navigation with multi-sensor
fusion,” IEEE Robotics and Automation Letters, vol. 7, no. 2, pp.
4975–4982,2022.
[5] G. Kahn, P. Abbeel, and S. Levine, “Badgr: An autonomous self-
supervised learning-based navigation system,” IEEE Robotics and
AutomationLetters,vol.6,no.2,pp.1312–1319,2021.
[6] S. Liu, M. Watterson, K. Mohta, K. Sun, S. Bhattacharya, C. J.
Taylor,andV.Kumar,“Planningdynamicallyfeasibletrajectoriesfor
quadrotors using safe flight corridors in 3-d complex environments,”
IEEERoboticsandAutomationLetters,vol.2,no.3,pp.1688–1695,
2017.
[7] F. Gao, W. Wu, Y. Lin, and S. Shen, “Online safe trajectory gener-
ation for quadrotors using fast marching method and bernstein basis
polynomial,”in2018IEEEInternationalConferenceonRoboticsand
Automation(ICRA),2018,pp.344–351.
[8] L. Wang and Y. Guo, “Speed adaptive robot trajectory generation
based on derivative property of b-spline curve,” IEEE Robotics and
AutomationLetters,vol.8,no.4,pp.1905–1911,2023.
[9] J. Tordesillas and J. P. How, “FASTER: Fast and safe trajectory
plannerfornavigationinunknownenvironments,”IEEETransactions
onRobotics,2021.
[10] Z.Wang,X.Zhou,C.Xu,andF.Gao,“Geometricallyconstrainedtra-
jectoryoptimizationformulticopters,”IEEETransactionsonRobotics,
vol.38,no.5,pp.3259–3278,2022.
[11] Y. Ren, F. Zhu, W. Liu, Z. Wang, Y. Lin, F. Gao, and F. Zhang,
“Bubble planner: Planning high-speed smooth quadrotor trajectories
usingrecedingcorridors,”in2022IEEE/RSJInternationalConference
onIntelligentRobotsandSystems(IROS),2022,pp.6332–6339.
[12] M. J. R. R. A. and S. A. Ning, Unconstrained Gradient-Based
Optimization. CambridgeUniversityPress,2022.
[13] S. Bansal, M. Chen, S. Herbert, and C. J. Tomlin, “Hamilton-jacobi
reachability: A brief overview and recent advances,” in 2017 IEEE
56th Annual Conference on Decision and Control (CDC), 2017, pp.
2242–2253.
[14] A.DevonportandM.Arcak,“Data-drivenreachablesetcomputation
usingadaptivegaussianprocessclassificationandmontecarlometh-
ods,”in2020AmericanControlConference(ACC),2020,pp.2629–
2634.
[15] E. Yel, T. J. Carpenter, C. Di Franco, R. Ivanov, Y. Kantaros,
I. Lee, J. Weimer, and N. Bezzo, “Assured runtime monitoring and
planning:Towardverificationofneuralnetworksforsafeautonomous
operations,” IEEE Robotics & Automation Magazine, vol. 27, no. 2,
pp.102–116,2020.
[16] D. Harabor and A. Grastien, “Online graph pruning for pathfinding
on grid maps,” in Proceedings of the AAAI Conference on Artificial
Intelligence,vol.25,no.1,2011,pp.1114–1119.
[17] J. Tordesillas and J. P. How, “Minvo basis: Finding simplexes with
minimumvolumeenclosingpolynomialcurves,”Computer-AidedDe-
sign,vol.151,p.103341,2022.
[18] H. Oleynikova, M. Burri, Z. Taylor, J. Nieto, R. Siegwart, and
E.Galceran,“Continuous-timetrajectoryoptimizationforonlineuav
replanning,” in IEEE/RSJ International Conference on Intelligent
RobotsandSystems(IROS),2016.
[19] C. E. Rasmussen and C. K. I. Williams, Gaussian Processes for
Machine Learning (Adaptive Computation and Machine Learning).
TheMITPress,2005.
[20] A. Majumdar and M. Pavone, “How should a robot assess risk?
towardsanaxiomatictheoryofriskinrobotics,”inRoboticsResearch:
The18thInternationalSymposiumISRR. Springer,2020,pp.75–84.
[21] G.Kahn,P.Abbeel,andS.Levine,“Land:Learningtonavigatefrom
disengagements,”IEEERoboticsandAutomationLetters,vol.6,no.2,
pp.1872–1879,2021.