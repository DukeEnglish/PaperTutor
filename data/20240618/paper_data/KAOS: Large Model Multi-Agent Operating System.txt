KAOS: LARGE MODEL MULTI-AGENT OPERATING SYSTEM
ZhaoZhuo RongzhenLi KaiLiu
ChongqingUniversity ChongqingUniversity ChongqingUniversity
zhuozhao1212@163.com lirongzhen@nudt.edu.cn liukai0807@gmail.com
HuhaiZou KaiMaoLi JieYu
ChongqingUniversity ChongqingUniversity NationalUniversityofDefenseTechnology
huhaizou@outlook.com leekaimao@stu.cqu.edu.cn yj@nudt.edu.cn
TianhaoSun QingboWu
ChongqingUniversity NationalUniversityofDefenseTechnology
sthing@cqu.edu.cn qingbo.wu@nudt.edu.cn
June18,2024
ABSTRACT
Theintelligentinteractionmodelbasedonlargemodelsreducesthedifferencesinuserexperience
acrossvarioussystemplatformsbutfaceschallengesinmulti-agentcollaborationandresourcesharing.
To demonstrate a uniform user experience across different foundational software platforms and
addressresourcecoordinationmanagementchallenges,thispaperproposesamulti-agentoperating
system based on the open-source Kylin. The research method involves empowering agents with
large models to serve applications. First, by introducing management role agents and vertical
multi-agentcollaborationtoconstructorreplacetypicalapplicationsoftware. Second,bystudying
system-levelsharedresourceschedulingstrategiestoenhanceuserexperienceandoptimizeresource
utilization. Andfinally,byvalidatingtheefficiencyandsuperiorityofthelargemodelmulti-agent
operatingsystemthroughrealapplicationsandscoringintelligence. Thefeasibilityofthissystemis
demonstrated,providinganewperspectiveforthedevelopmentofmulti-agentoperatingsystems.
Experimentalresultsshowsignificantadvantagesofmulti-agentcollaborationinvariousapplication
scenarios.
1 Introduction
In recent years, with the rapid advancement of artificial intelligence technologies, large language models (LLMs)
have found widespread applications across various domains. The application of LLM-based agents in the field of
operatingsystems(OS)isemergingasapopularresearchdirection. Comparedtotraditionalrule-basedOS,integrating
LLMagentsintotheOSallowsforbetterunderstandingofuserneedsandoffersapersonalized,intelligentinteractive
experience. UserscanengageinnaturallanguageconversationswiththeOS,askvariousquestions,andreceivetimely
andaccurateresponses. Additionally,LLMscanassistusersinroutineofficetaskssuchasdraftingdocumentsand
emails,significantlyenhancingworkefficiency. Clearly,intelligentagentsasamodeoffunctionalsoftwareproviding
morenaturalandfriendlyinteractionswillbeafuturetrend.
Usersofmainstreamoperatingsystemscurrentlyexhibitsignificantdifferencesinusagehabits. WindowsandLinux,
as the two primary desktop operating systems, feature different user interfaces, command systems, and software
ecosystems,whichcancauseinconvenienceforusers. Thereisagrowingexpectationforoperatingsystemstoprovide
moreintelligentandpersonalizedservicestomeettheirincreasingdemandsforinformationretrievalandtaskprocessing.
ByintroducingLLMs,seamlessswitchingandconvenientuserexperiencesbetweenthesetwooperatingsystemscan
beachieved,therebyimprovinguserproductivityandcomfort. TheLLM-basedagentinteractionmodelreducesthe
4202
nuJ
71
]AM.sc[
1v24311.6042:viXraAPREPRINT-JUNE18,2024
differences in using various operating systems; for example, organizing meetings on Linux through an agent is as
straightforwardasonWindows,makingplatformdifferencesimperceptibletousers.
However,LLM-basedmulti-agentsystemsfacesignificantchallengesincooperativeinteractionandresourcesharing.
Presently,LLM-basedOSmodelsprimarilyinvolvesingleagentsindependentlyfulfillinguserrequirements,andthe
collaborativecompletionoftasksbymultipleagentsisstillinitsdevelopmentalstages. Similartohowhumanssolve
complexproblems,collaborationamongmultipleagentscanprovidebettersolutions. Thisrequiresnotonlyconsidering
resourcesharingamongmultipleindependentagentsbutalsoresearchinghowtooptimallyschedulemultipleagentsfor
resource-efficientcooperativetaskcompletion.
To address these challenges, this paper proposes the first LLM-based multi-agent operating system built on the
user-friendlyopen-sourceKylinplatform. Themaininnovationsinclude:
1. Amanagementroleagentwithdesktopknowledgebaseandtoolenhancementcapabilitiesisproposed. This
managementagentassistsindecision-makingandstatemaintenancethroughacustomizeddesktopknowledge
baseandtools. Thedesktopknowledgebaseintegrateseasilyaccessibleinformationresources,includingsome
withprivacyrights,andtoolenhancementprovidesasetofcustomizedsoftwaretoolssuchasBingSearch,
ArxivSearch,andhotelrecommendations,aidingthemanagementroleinmoreefficientlycompletingtasks.
2. Alow-resourceconsumptionverticalmulti-agentcollaborationmodelisintroduced. Inthisverticalstructure,
agents have clear roles, with the management agent receiving user tasks and intelligently assigning them,
ensuring each agent handles only its specialized part, thus reducing redundant computation and lowering
communicationoverhead. Multipleagentscollaborateusingasharedresourcepooltomaximizeresource
utilization,suchassharedcomputingpoweranddatastorage.
3. Atimesharingresourceschedulingstrategyisresearchedandimplementedtooptimizeresourceutilization.
This strategy divides resource usage time into multiple time slices, with different agents using resources
indifferentslicestoavoidconflicts. Thisapproachmaximizesresourceutilizationefficiency,ensuringthe
multi-agentsystemoperatesstablyandefficientlyunderhighloadconditions.
Thestructureofthispaperisasfollows: Section1reviewsrelatedresearchonLLM-basedagentoperatingsystems;
Section2introducesthesystemarchitectureandmethods; Section3validatestheeffectivenessoftheLLM-based
multi-agentoperatingsystem;Section4providesconclusionsandfutureoutlook.
2 RelatedWork
IntelligentagentsbasedonLargeLanguageModels(LLMs)havegarneredwidespreadattentioninthefieldofartificial
intelligence. These agents utilize large language models, trained on vast amounts of data, as their foundation for
knowledge and capabilities, demonstrating language understanding, commonsense reasoning, and task execution
abilitiesthatcloselyresemblethoseofhumans. Comparedtotraditionalrule-basedormachinelearning-basedagents,
LLM-basedagentspossessbroaderanddeeperknowledge, enablingthemtoflexiblyaddressavarietyofcomplex
problemsandtasks. Thestructureoftheseagentscanbedividedintofourcomponents: thelargemodel,planningskills,
experientialmemory,andtoolusage. Consequently,LLM-basedagentsexhibitadegreeofautonomouslearningand
decision-makingabilities,expandingtheirperceptionandactionspacethroughmultimodalperceptionandtoolusage.
Theycontinuallyrefinetheirbehaviorstrategiesthroughinteractionwiththeirenvironment[1].
ResearchonLLM-basedagentsisprimarilycategorizedintosingle-agentsystemsandmulti-agentsystems[2]. Single-
agentsystemsrelyonthelanguageunderstandingandgenerationcapabilitiesofLLMs,enablingsmoothandnatural
interactionswithhumansorothersystems. LLMsnotonlyprocessinformationbutalsoserveasthedecision-making
core,receivingnaturallanguageinput,parsingit,andgeneratingresponsesrangingfromsimpleanswerstocomplex
actionplans. Throughiterativeoptimization,single-agentsystemsgraduallyenhancetheirperceptionanddecision-
makingcapabilities.
Currently,single-agentsystemsarecapableofnotonlyengaginginnaturallanguageinteractions[3]butalsooperating
virtual devices, utilizing configured tools[4, 5, 6, 7], executing API calls[7, 8, 9, 10, 11], executing code[12], or
managingwebcontent[4,13,14,15,16]. Forinstance,Khotetal.[17]proposedamodularapproachthatdecomposes
complex tasks into sub-tasks and uses prompts to guide the model in generating outputs, thereby enhancing task
performanceandmodelinterpretability.
Despite the strong natural language understanding and generation capabilities of single-agent systems[18], their
independentoperationlimitstheirabilitytoacquireknowledgethroughteamwork. Incontrast,multi-agentsystems
achievecommongoalsthroughcooperationandcompetition,offeringgreaterfunctionalityandbecomingafocalpoint
ofresearch[19]. Inmulti-agentsystems,multipleagentscollaborateandcompetetoachievecommonobjectives[20].
2APREPRINT-JUNE18,2024
Someagentsareresponsibleforrecognition,whileothershandledecision-makingandplanning,workingtogetherto
solvecomplextaskssuchascodedevelopment[21,22,23,24]andsocialsimulation[25,26]. Competitivemechanisms
arealsonecessaryforcertaintasks,suchassolvingdebateproblems[27,28,29].
Multi-agentsystemsleveragetheunifiedlanguageplatformprovidedbyLLMsforcommunicationandcollaboration[21],
significantly enhancing the systemâ€™s flexibility and scalability. Different agents communicate their intentions and
needsthroughnaturallanguage,understandingfeedbackandsuggestions. Hamiltonetal.[30]proposedadecision-
makingmethodthatsimulatesthebehavioroftheU.S.SupremeCourtbyfollowingthemajorityopinion. Wanget
al.[31]designedasystemthatgeneratesfinalanswersbyintegratingfeedbackfrommultipleagents,emphasizingthe
importanceofeffectivelyconsolidatinginformation.
Researchersarealsoexploringvariousmethodstoimprovedecision-makingcapabilities,suchashavingagentsimitate
humanbehavior. Manyapplicationsbasedonthisideahavebeeninvestigated[21,22,27,32,33,34]. Forexample,
MetaGPT[21]encodesstandardoperatingprocedures(SOPs)intopromptsequences,incorporatinghumanworkflows
intoLLM-basedmulti-agentcollaboration. TheadvantageofthisapproachisthatSOPsguideagentsingenerating
structured intermediate outputs, such as high-quality requirement documents, design documents, flowcharts, and
interfacespecifications. Byusingstructuredintermediateoutputs,humanworkflowsareseamlesslyintegratedinto
multi-agentcollaboration,resultinginsmootherworkflows,fewererrors,andmorecoherentsolutions.
InthesystemproposedbyDuetal.[27],multipleagentscandebatedecisions. Whendifferentlanguageagentsare
requiredtocommunicatewitheachother,theyoftenchangetheirviews,leadingtomoreaccurateconsensusanswers.
Thisstudysuggeststhatexistinglargelanguagemodelsarepronetoerrorsandhallucinations,andthemulti-agent
debateapproachcansignificantlyenhancethemathematicalandstrategicreasoningcapabilitiesofthemodelswhile
reducingtheseissues.
Insummary,althoughsingle-agentsystemsarepowerful,theirlimitationsinindependentoperationhaveprompted
researcherstofocusmoreonmulti-agentcollaborativesystems. Exploringefficientcollaborationanddecision-making
mechanismsisamajorchallengewithsignificantpotential. Throughcollaborationandoptimization,futureagentswill
bebetterequippedtohandlecomplextasks,achievinghigherlevelsofintelligenceandautomation.
3 SystemArchitectureandMethodology
3.1 BasicArchitecture
AsshowninFigure1,theproposedsystemarchitectureisdividedintothreelayers: theagentapplicationlayer,the
kernellayerwiththeoperatingsystemkernel(OSkernel)andthelargelanguagemodelkernel(LLMkernel), and
the heterogeneous hardware layer. This layered design aims to achieve an efficient, flexible, and easy-to-manage
environmentforagentoperation.
Attheagentapplicationlayer,thedevelopmentanddeploymentofagentapplications,suchasdocumentagentsand
meetingagents,arecarriedout. UtilizingthetoolkitprovidedbyAIOS[35],amulti-agentcoordinationmechanism
is designed to abstract and encapsulate the complex underlying system functions and resources into user-friendly
interfaces. Thissignificantlysimplifiesthedevelopmentprocess,allowingdeveloperstofocusontheimplementationof
businesslogicandintelligentalgorithmswithoutdelvingdeeplyintotheunderlyingsystem.
Thekernellayeristhecoreoftheentiresystemarchitecture,dividedintotwomaincomponents: theOSkerneland
theLLMkernel. TheOSkernelisresponsibleformanagingthesystemâ€™sbasicresources(suchasprocesses,memory,
andfiles)tomaintainitsstabilityandcompatibility. TheLLMkernelisdesignedspecificallytosupportlarge-scale
agentoperationsandincludesseveralkeymodules,suchasthesystemcallinterface,agentscheduler,contextmanager,
memorymanager,storagemanager,toolmanager,andaccessmanager. Thesemodulesworktogethertoensurethe
normalandefficientoperationofagents,andfacilitatemanagementandmaintenance.
Theheterogeneoushardwarelayerincludesthesystemâ€™sphysicalcomponents,suchasCPUs,GPUs,NPUs,memory,
disks,andperipherals. TheOSkernelactsasabridgebetweensoftwareandhardware,managingandschedulingthese
resourcesandprovidingsupportfortheLLMkernel. Thisdesignensuressystemsecurityandstability,preventing
potentialrisksthatcouldarisefromagentsdirectlyoperatingonhardware.
3.2 ManagementAgentsEnhancedwithDesktopKnowledgeBaseandTools
This paper proposes a management role agent equipped with a desktop knowledge base and tool enhancement
capabilities. Thedesktopknowledgebaseprovidesanintegratedandeasilyaccessibleinformationresourcerepository
3APREPRINT-JUNE18,2024
Figure1: systeminfrastructure
forthemanagementroleagent,containingbothsensitiveandnon-sensitivebusinessinformation. Thetoolenhancement
offersasetofcustomizedsoftwaretoolstohelpthemanagementagentefficientlycompletedecisionsanddailytasks.
Thedesktopknowledgebaseinteractswiththecontextmanagerandstoragemanagerofthekernellayertoachievedata
integrationandquickaccess. Dataiscollectedfromthefilesystemandexternalresources(suchaswebinformation),
cleaned and formatted using data cleansing and integration tools, and stored in the knowledge base. Data in the
knowledgebaseisclassifiedaccordingtosensitivity,withdifferentaccesspermissionssetbytheaccessmanagerto
ensurethatonlyauthorizedagentscanaccessspecificdata.
Toenhancemanagementefficiency,theagentprovidesasetofcustomizedsoftwaretools. Thesetoolsareintegratedinto
theagentâ€™sworkenvironmentthroughthetoolmanager,suchasBingsearch,Arxivquery,andhotelrecommendation.
3.3 LowResourceConsumptionVerticalMulti-AgentCollaboration
AsshowninFigure2,thelowresourceconsumptionverticalmulti-agentcollaborationdiffersfromtraditionalagent
operatingsystems. Usersinteractonlywiththemanagementagent,regardlessofthetasktype. Themanagementagent
identifiestheuserâ€™sneedsthroughLLManalysisandthendelegatestaskstosuitableagents. Forexample,whena
userneedstowriteadocument,themanagementagentusesLLMtoidentifytherequirementandassignsthetasktoa
writingagent.
For different types of agents, this paper designs two task decomposition methods: procedural and adaptive. The
proceduralmethodusesaworkflow-likedesignmodeltoorganizelimitedfunctionslogically. Foragentswithfixed
tasks(suchaswritingagentsandmeetingagents), theproceduraldesignisadopted. Researchersmanuallydesign
sub-tasks. Forinstance,whenauserinputsatasktogenerateadocumentwithagivenwritingtopic,thewritingagent
4APREPRINT-JUNE18,2024
decomposesthetaskintosteps: generatingatitle,outline,draft,checkinggrammarandlogic,andfinallysavingthe
document. Thisdecompositionmethodissuitableforagentswithfixedtaskcontent.
Figure2: LowResourceConsumptionVerticalMulti-AgentCollaboration
AsshowninFigure3,acaseofproceduralsub-taskdecompositionbasedonintentdisassemblyforschedulingmeetings
isillustrated. Theagentneedstounderstandthemeetingâ€™stheme,time,andplatform. Uponreceivingtheuserâ€™sinput,
themeetingagentinteractswiththeLLMtoutilizeitsnaturallanguageunderstandingcapabilitiestoanalyzethetheme,
time,andplatformforthemeeting.
Theadaptivedecompositionmethodissuitableforagentswithhightaskuncertainty,suchassearchagents. Forthese
agents,theLLMisusedtoautomaticallydecomposetasks. Forexample,whensearching"Whatarethedifferences
betweenPyTorchandTensorFlow?",thesearchagentdelegatesthetasktotheLLM,whichdecomposesitintosub-
questionslike"WhatisPyTorch?","WhatisTensorFlow?","WhatarethemainfeaturesofPyTorchandTensorFlow?",
"WhatarethedifferencesinprogrammingmodelsandAPIdesignsbetweenPyTorchandTensorFlow?",etc. Afterthe
searchagentanswersallsub-questions,itsummarizesandorganizestheanswerstoprovideacompleteresponse. This
decompositionmethodleveragesthepowerfulnaturallanguageprocessingcapabilitiesoftheLLMtoefficientlyhandle
complextasks,suitableforagentswithhightaskuncertainty.
Forcomplexuserqueries,themulti-agentoperatingsystemwithalargemodelalsohascountermeasures. Forinstance,
whenauserneedsanagenttosearchthewebforinformationandwriteitintoadocument,thesearchagentcollaborates
withthedocumentagent. Thesearchagentgathersandsummarizesinformation,whilethedocumentagentorganizes
andwritesitintoadocument. Thiscollaborationensuresefficienttaskcompletionandoptimizesresourceutilization.
Figure3: AgentandLargeModelInteraction
3.4 Time-SharingMulti-AgentResourceSchedulingStrategy
This paper develops and implements a time-sharing resource scheduling strategy based on time slices, aiming to
optimizeresourceutilizationefficiencyinamulti-agentenvironmentthroughrefinedtimemanagementandallocation
strategies. Thecoreofthismechanismistodividecontinuousresourceusageperiodsintomultiplediscretetimeslices,
allocatingexclusiveresourceaccessperiodsfordifferentagents.
Thisschedulingstrategyeffectivelyalleviatesresourcecompetitionissues,avoidingpotentialresourceconflictsand
ensuringsmoothsystemoperation. Byexecutingconcurrently,thesystemâ€™sthroughputissignificantlyimproved,agents
5APREPRINT-JUNE18,2024
donotoccupyeachotherâ€™sresources,therebyreducingtheaveragewaitingtimeandturnaroundtimeforeachagent,
andallowinguserstoreceivefeedbackfromagentsassoonaspossible.
4 Experiments
4.1 ExperimentalSetup
Theexperimentsinthispaperwereconductedusingthefollowingequipmentconfiguration: Inteli9-9300Hprocessor,
GTX4090graphicscard,128GBRAM,runningontheopen-sourceKirin2.0platform. Theprogrammingenvironment
includedPython3.11,PyTorch2.0.1,andCUDA11.8. Fivetypesofintelligentagentswereused: (1)amanagement
agentfortaskallocationandmanagement,(2)awritingagentfortextgeneration,(3)asearchagentforwebsearches,
(4)ameetingagentforinitiating,recording,andforwardingmeetingcontent,and(5)atextscoringagentforevaluating
thetextsgeneratedbytheagents.
Threesetsofexperimentsweredesignedtotestthecollaborativeefficiencyofverticallyintegratedmulti-agentsystems,
theresourceschedulingstrategyoftime-sharedmulti-agentsystems,andtheperformanceofdifferentlargemodels.
Theexperimentalsetupisdetailedasfollows.
Experiment1: VerticalMulti-AgentCollaboration. Experiment1includesanexperimentalgroupandacontrol
group,usingatextgenerationtaskasanexample. Theexperimentalgroupconsistedofamanagementagentanda
writingagent. Thetaskwasfirstsenttothemanagementagent,whichanalyzedthetaskandthenassignedittothe
writingagent,providingseveralsuggestions. Thecontrolgroupconsistedofonlyawritingagent,andthetaskwas
directlysenttothisagentforcompletion. Additionally,atextscoringagentevaluatedthetextsgeneratedbyboththe
experimentalandcontrolgroups. Ninetasksweredesigned(seeTable1),andbothgroupscompletedthesetasksto
generatetexts.
Table1: Theninetextgenerationtaskscoveringvariousdimensionsfrompersonalreflections,technologicaloutlooks,
literarycreationstosocialissues,showcasingthecomprehensivenessanddiversityoftheexperiment.
TaskNumber TaskDescription
1 WriteatravelbiographyofFujian.
2 Writeyourviewsonthefuturedevelopmentofartificialintelligence.
3 Writeanarticleontheimportanceofenvironmentalprotection.
4 Writeareviewofabookyourecentlyread.
5 Writeaboutanunforgettabletravelexperience.
6 Discusstheimpactofmoderntechnologyonhumanlife.
7 Writealettertoyourfutureself.
8 Explainblockchaintechnologyanditspotentialapplications.
9 Writeashortstoryaboutanunexpectedadventure.
Experiment2: Time-SharedMulti-AgentResourceSchedulingStrategy. Experiment2testedtheperformance
of three agents (writing agent, meeting agent, and search agent) under a time-shared resource scheduling strategy.
Performancemetricsincludedthewaitingtime,turnaroundtime,andresponsetimeofeachagent,wheretheresponse
time refers to the interval from the user submitting a request to the first response. The experiment also tested the
performanceofdifferentlargemodelsrunningagents,usingQwen-14B-Chat-g4f32_1-MLC(referredtoasQwen-MLC)
andQwen-plusmodels,testedthroughlocalandApplicationProgrammingInterface(API)calls. Theparametersofthe
largemodelsareshowninTable2.
Table2: Parametersofthelargemodels.
ModelName Qwen-MLC Qwen-plus Gemini-pro gpt-3.5-turbo
OpenSource 14B Notdisclosed 100B Notdisclosed
InvocationMethod Local API API API
Experiment3: TestingtheTextGenerationCapabilityofDifferentLargeModels. Experiment3evaluatedthe
textgenerationperformanceofdifferentlargemodelswithinthesystem,withonlythewritingagentrunning. Unlike
Experiment1,thisexperimentusedthreedifferentlargemodels(Qwen-plus,Gemini-pro,gpt-3.5-turbo)togenerate
textsbasedontheninetasksinTable1,andatextscoringagentevaluatedthegeneratedtexts.
6APREPRINT-JUNE18,2024
Throughtheaboveexperimentalsetup,theeffectivenessandperformanceofmulti-agentcollaborationandresource
schedulingstrategiescanbecomprehensivelyevaluated.
4.2 AnalysisofVerticalMulti-AgentCollaborationExperiments
This study designed and implemented experiments on vertical multi-agent collaboration to explore the impact of
introducingamanagementagentonimprovingtextqualityandcompletionefficiencyintextgenerationtasks. Alltasks
weremeticulouslydesigned,coveringmultipledimensionsfrompersonalreflections,technologicaloutlooks,literary
creationstosocialissues,asshowninTable1,ensuringthecomprehensivenessanddiversityoftheexperiment.
The results in Table 3 highlight the advantages of involving a management agent. Across five evaluation dimen-
sionsâ€”contentquality,languagefluency,structureandlogic,topicrelevance,andreaderengagementâ€”theexperimental
groupâ€™sperformancegenerallysurpassedorequaledthatofthecontrolgroup. Notably,theexperimentalgroupachieved
fullornear-fullscoresinmosttasks,withanoverallaveragescoreof43.89,significantlyhigherthanthecontrolgroupâ€™s
43.11. Thisfindingindicatesthecrucialroleofthemanagementagentintaskallocation,strategyoptimization,and
providingcreativesuggestions,effectivelyenhancingtheoverallqualityoftextgeneration.
Meanwhile,thecontrolgroupalsoscoredhighincertaintasks,suchasTask9,indicatingthatasinglewritingagentcan
performexcellentlyinspecificcontexts. However,thecontrolgroupexhibitedsignificantscorefluctuations,especially
intasksrequiringdeepthinkingandinnovation(suchasTasks2,6,and8),withlowerscoresinstructureandlogicand
readerengagement,revealingthelimitationsoflackingcoordinationbyamanagementagent.
Additionally,thecontrolgroupshowedasmallergapwiththeexperimentalgroupintermsoflanguagefluencyand
topicrelevance,indicatingthatasingleagentdoesnotfallshortinbasictextgenerationcapabilities. However,the
experimentalgroup,throughtheeffectiveinterventionofthemanagementagent,furtherenhancedthecreativity,depth,
andattractivenessofthetexts,particularlyinimprovingstructurallogicandenhancingthereaderâ€™sreadingexperience,
demonstratingsignificantcollaborativeadvantages.
Table3:Comparisonofmulti-agentcollaborationandsingle-agentperformance.Theindividualscoresrepresentthefive
evaluationdimensions: contentquality,languagefluency,structureandlogic,topicrelevance,andreaderengagement,
coveringallaspectsoftextgeneration.
ComparisonHeader
TaskNumber IndividualScores TotalScore
1 9,9,9,9,9 45
2 9,9,9,9,9 45
3 9,9,9,9,9 45
4 9,8,9,9,8 43
ManagementAgentandWritingAgent
5 9,9,9,9,9 45
6 8,9,8,9,7 41
7 9,9,9,9,9 45
8 9,8,9,9,8 43
9 9,8,9,9,8 43
1 9,8,9,9,8 43
2 9,8,9,9,8 43
3 9,9,9,9,8 44
4 9,8,9,9,8 43
SingleWritingAgent 5 9,8,9,9,8 43
6 9,8,9,9,8 43
7 9,9,8,9,8 43
8 8,9,8,9,7 41
9 9,9,9,9,9 45
Inconclusion,thisexperimentstronglydemonstratestheefficiencyandsuperiorityofverticalmulti-agentsystems,
particularly the collaboration between management and execution agents, in text generation tasks. This not only
provides a new perspective for intelligent text creation but also lays a theoretical and practical foundation for the
optimizeddesignandexpansionofapplicationscenariosforfuturemulti-agentsystems.
7APREPRINT-JUNE18,2024
4.3 AnalysisofTime-SharingMulti-AgentResourceScheduling
Thispaperanalyzestheperformancedifferencesoftime-slicescheduling,FIFOscheduling,andnoschedulingstrategies
formulti-agentcollaborativeapplications,asshowninTable4. Theexperimentsdemonstratethatthetime-sharing
scheduling strategy is more beneficial for improving the overall performance of multi-agent systems. In terms of
waitingtime, time-sliceschedulingshowsacompromise: althoughitsaveragewaitingtimeisslightlyhigherthan
FIFO,especiallyforthewritingandsearchagents,itsignificantlyreducesthewaitingperiodforthemeetingagent
comparedtonoscheduling,highlightingitsadvantageinhigh-demandtasks. Thisstrategicbalancepromotesoverall
systemresourcebalance,increasingresourceavailabilityatthecostofslightlysacrificingsomeagentsâ€™immediate
responsiveness.
Theevaluationofturnaroundtimerevealstheflexibilityoftime-sliceschedulinginhandlingcomplextasks. Although
theturnaroundtimeofthemeetingagentunderthisstrategyincreasescomparedtoFIFO,thesignificantreduction
inturnaroundtimecomparedtonoschedulingprovesitseffectivenessinalleviatinghigh-loadtaskpressure. Forthe
writingandsearchagents,time-sliceschedulingresultsinaslightincreaseinturnaroundtimeorissimilartoFIFO,but
itissignificantlybetterthannoscheduling,effectivelymaintainingmulti-taskbalance.
Response time is a key metric for user experience. This study finds that time-slice scheduling has limited impact
on the writing and search agents, performing similarly to FIFO; however, the response time of the meeting agent
increasessignificantly,suggestingpossibleinterruptionscausedbyfrequenttime-sliceswitching. Nonetheless,the
overallanalysisshowsthattime-sliceschedulingeffectivelycurbsresponsedelayscausedbyresourcemonopolization
byfairlyreallocatingcomputingresources,maintainingthesystemâ€™soverallresponsiveness.
Table4: EvaluationMetricsforDifferentSchedulingMethods
EvaluationMetrics Qwen-MLC Qwen-plus
SchedulingMethod
WritingAgent SearchAgent MeetingAgent WritingAgent SearchAgent MeetingAgent
Time-Sliced WaitingTime 3.07Â±2.86 1.19Â±1.79 3.14Â±1.79 2.42Â±3.63 1.03Â±1.00 6.67Â±1.50
Scheduling
TurnaroundTime 28.89Â±2.20 52.61Â±4.65 104.33Â±13.00 36.64Â±5.01 54.23Â±3.17 114.69Â±6.69
ResponseTime 10.53Â±8.62 7.01Â±5.46 11.78Â±5.41 8.66Â±10.90 8.34Â±1.49 22.21Â±4.63
FIFOScheduling WaitingTime 1.20Â±1.80 0.91Â±0.68 4.81Â±0.15 1.07Â±1.60 0.84Â±0.81 4.56Â±0.56
TurnaroundTime 27.55Â±3.10 56.96Â±2.44 118.55Â±7.85 33.17Â±4.31 51.57Â±5.30 106.00Â±12.18
ResponseTime 4.94Â±5.36 6.19Â±2.02 16.78Â±0.37 4.58Â±5.15 5.71Â±2.52 16.20Â±1.65
NoScheduling WaitingTime 0.00Â±0.00 20.75Â±4.60 60.20Â±9.56 0.00Â±0.00 28.03Â±6.80 64.64Â±10.21
TurnaroundTime 20.75Â±4.60 60.20Â±9.56 170.55Â±29.02 28.03Â±6.80 64.64Â±10.21 171.63Â±22.80
ResponseTime 1.31Â±0.07 24.17Â±4.77 62.69Â±9.65 0.93Â±0.13 31.52Â±7.66 66.50Â±10.65
Insummary,thetime-sharingmulti-agentresourceschedulingstrategyintheexperimentalframeworkdemonstrates
itscapabilitytobalanceresourceutilizationandtaskschedulinginmulti-taskscenarios,particularlyinalleviatingthe
burdenofhigh-loadtasks. Despitesomeimpactontheresponsetimeofspecificagents,thiscanbeseenasanecessary
compromiseforoverallefficiencyimprovement. Futureexplorationwillfocusonfine-tuningthetime-sliceallocation
tofurtherreduceresponsedelayswhilemaintainingorevenenhancingthecomprehensiveperformanceandstabilityof
thesystem.
4.4 PerformanceAnalysisofLargeModelsinTextGeneration
In Experiment 3, we evaluated the text generation capabilities of three different large models within our system.
Specifically,asinglewritingagentranthesethreemodelsascorestogeneratetextforninetaskslistedinTable1. The
generatedtextswerethenscoredbyatextevaluationagent. TheexperimentalresultsarepresentedinTable5.
Fromtheexperimentalresults,itcanbeseenthatgpt-3.5-turboperformedthebest,withthehighestaveragescoreof
44.67acrossalltasks,demonstratingoptimaltextgenerationcapabilities. Gemini-profollowedcloselywithanaverage
scoreof43.33. Qwen-plushadaslightlyloweraveragescoreof43.11comparedtotheothertwo. Intermsofstability,
gpt-3.5-turboshowedbalancedscoresacrossalltasks,maintainingascoreofaround9pointsinalmosteverytask,
reflectingstrongconsistencyandreliability. Gemini-proalsoexhibitedstableperformance,withslightfluctuationsin
Tasks3and4. Qwen-plusshowedaslightdropinscoreforTask8butgenerallymaintainedahighleveloverall.
Regardingtask-specificperformance,allmodelshadveryclosescoresinmosttasks,particularlyinTasks1,5,and9,
indicatingthatthesetasksmightbelesseffectiveindifferentiatingthecapabilitiesofthemodels.
Insummary,gpt-3.5-turboexhibitedthebesttextgenerationcapabilitieswithinoursystem,showinghighstabilityand
consistency. Meanwhile,Qwen-plusandGemini-proalsoperformedexceptionallywell.
8APREPRINT-JUNE18,2024
Table5:Textgenerationcapabilitiesofdifferentlargemodelswithintheframework.Thescoresinthetablerepresentfive
evaluationdimensions: contentquality,languagefluency,structureandlogic,topicrelevance,andreaderengagement.
TaskID Qwen-plus Gemini-pro gpt-3.5-turbo
1 9,8,9,9,8 9,9,9,9,9 9,9,9,9,9
2 9,8,9,9,8 9,9,9,9,9 9,9,9,9,8
3 9,9,9,9,8 8,9,8,9,7 9,9,9,9,8
4 9,8,9,9,8 8,9,8,9,7 9,9,9,9,9
5 9,8,9,9,8 9,9,9,9,9 9,9,9,9,9
6 9,8,9,9,8 9,9,9,9,8 9,9,9,9,9
7 9,9,8,9,8 9,9,9,9,9 9,9,9,9,9
8 8,9,8,9,7 8,9,8,9,7 9,9,9,9,8
9 9,9,9,9,9 9,9,8,9,8 9,9,9,9,9
AverageScore 43.11 43.33 44.67
5 ConclusionandFutureWork
ThispaperexplorestheinnovativeapplicationsofanLLM-basedmulti-agentoperatingsystemontheuser-friendly,
open-sourceKirin2.0platform. Wedesignedanintelligent,efficient,andresource-optimizedmulti-agentcollaboration
system featuring a management role agent to improve work efficiency. The study also investigated low-resource
verticalcollaboration,intelligenttaskallocation,andreductionofredundantcomputation. Finally,wedevelopedand
implementedatime-sharingresourceschedulingstrategytoavoidresourceconflicts,optimizeresourceutilization,and
ensuresystemstabilityandefficiencyunderhighloadconditions.
While this paper demonstrates the feasibility of multi-agent collaborative applications, there are some limitations.
Duringtheresearch,weidentifiedseveralareasforimprovement. Forinstance,theconfigurationoftoolAPIparameters
bytheagentswasadjustedbyresearchers. Futureworkcanfocusonenablingthelargemodelstolearnhowtouse
varioustoolAPIsindependently. Schedulingmethodswillberefinedforfinergranularity,optimizingagentresponse
timesbyincorporatingreal-timescheduling,shortestjobfirst,andpriorityschedulingalgorithms. Additionally,weplan
todevelopsoftwaredevelopmentagentsandsystemdiagnosticagentsontheopen-sourceKirinplatform,leveragingthe
advantagesofopen-sourcecode.
OurresearchandexperimentsindicatethatLLM-basedmulti-agentoperatingsystemshavesignificantdevelopment
potentialfromboththeoreticalandpracticalperspectives. Suchsystemscanachieveseamlessdesktopoperatingsystem
integrationandleadthewayintheintelligentdevelopmentofoperatingsystems. LLM-basedmulti-agentsystemswill
realizegreaterpotentialinfutureadvancements.
References
[1] ZhenXi,WeiChen,XiangGuo,etal. Theriseandpotentialoflargelanguagemodelbasedagents: Asurvey.
arXivpreprintarXiv:2309.07864,2023.
[2] TaoGuo,XuanChen,YingWang,etal. Largelanguagemodelbasedmulti-agents: Asurveyofprogressand
challenges. arXivpreprintarXiv:2402.01680,2024.
[3] SahithDambekodi,SpencerFrazier,PrithvirajAmmanabrolu,andMarkO.Riedl. Playingtext-basedgameswith
commonsense. arXivpreprintarXiv:2012.02757,2020.
[4] ReiichiroNakano,JacobHilton,SuchirBalaji,etal. Webgpt: Browser-assistedquestion-answeringwithhuman
feedback. arXivpreprintarXiv:2112.09332,2021.
[5] Chenfei Wu, Shengming Yin, Weizhen Qi, et al. Visual chatgpt: Talking, drawing and editing with visual
foundationmodels. arXivpreprintarXiv:2303.04671,2023.
[6] MichaelAhn,AnthonyBrohan,NoahBrown,etal. Doasican,notasisay: Groundinglanguageinrobotic
affordances. arXivpreprintarXiv:2204.01691,2022.
[7] Aaron Parisi, Yao Zhao, and Noah Fiedel. Talm: Tool augmented language models. arXiv preprint
arXiv:2205.12255,2022.
[8] YingqiangGe,WenyueHua,KaiMei,etal. Openagi: Whenllmmeetsdomainexperts. AdvancesinNeural
InformationProcessingSystems,36,2024.
9APREPRINT-JUNE18,2024
[9] TimoSchick,JaneDwivedi-Yu,RobertoDessÃ­,etal. Toolformer: Languagemodelscanteachthemselvestouse
tools. AdvancesinNeuralInformationProcessingSystems,36,2024.
[10] ShunyuYaoandKarthikNarasimhan. Languageagentsinthedigitalworld: Opportunitiesandrisks. https:
//princeton-nlp.github.io/language-agent-impact/,July2023.Accessed: 2023-07-24.
[11] QiaoyuTang,ZiliangDeng,HongyuLin,etal. Toolalpaca: Generalizedtoollearningforlanguagemodelswith
3000simulatedcases. arXivpreprintarXiv:2306.05301,2023.
[12] KechiZhang,GeLi,JiaLi,etal. Toolcoder: Teachcodegenerationmodelstouseapiswithsearchtools. arXiv
preprintarXiv:2305.04032,2023.
[13] ShunyuYao,HowardChen,JohnYang,andKarthikNarasimhan. Webshop: Towardsscalablereal-worldweb
interactionwithgroundedlanguageagents. AdvancesinNeuralInformationProcessingSystems,35:20744â€“20757,
2022.
[14] XiangDeng,YuGu,BoyuanZheng,etal. Mind2web: Towardsageneralistagentfortheweb. AdvancesinNeural
InformationProcessingSystems,36,2024.
[15] Hiroki Furuta, Kuang-Huei Lee, Ofir Nachum, et al. Multimodal web navigation with instruction-finetuned
foundationmodels. arXivpreprintarXiv:2305.11854,2023.
[16] ShuyanZhou,FrankF.Xu,HaoZhu,etal. Webarena: Arealisticwebenvironmentforbuildingautonomous
agents. arXivpreprintarXiv:2307.13854,2023.
[17] TusharKhot,HarshTrivedi,MatthewFinlayson,etal. Decomposedprompting: Amodularapproachforsolving
complextasks. arXivpreprintarXiv:2210.02406,2022.
[18] TheodoreR.Sumers,ShunyuYao,KarthikNarasimhan,andThomasL.Griffiths. Cognitivearchitecturesfor
languageagents. arXivpreprintarXiv:2309.02427,2023.
[19] YasharTalebiradandAmirhosseinNadiri. Multi-agentcollaboration: Harnessingthepowerofintelligentllm
agents. arXivpreprintarXiv:2306.03314,2023.
[20] YingqiangGe,YujieRen,WenyueHua,etal. LLMasOS,AgentsasApps: EnvisioningAIOS,Agentsandthe
AIOS-AgentEcosystem. arXive-prints,pagesarXivâ€“2312,2023.
[21] Sirui Hong, Xiawu Zheng, Jonathan Chen, et al. Metagpt: Meta programming for multi-agent collaborative
framework. arXivpreprintarXiv:2308.00352,2023.
[22] QingyunWu,GaganBansal,JieyuZhang,etal. Autogen: Enablingnext-genllmapplicationsviamulti-agent
conversationframework. arXivpreprintarXiv:2308.08155,2023.
[23] Chen Qian, Xin Cong, Cheng Yang, et al. Communicative agents for software development. arXiv preprint
arXiv:2307.07924,2023.
[24] MartinJosifoski,LarsKlein,MaximePeyrard,etal. Flows: Buildingblocksofreasoningandcollaboratingai.
arXivpreprintarXiv:2308.01285,2023.
[25] GuohaoLi,HasanHammoud,HaniItani,etal. Camel: Communicativeagentsfor"mind"explorationoflarge
languagemodelsociety. AdvancesinNeuralInformationProcessingSystems,36,2024.
[26] JoonSungPark,JosephOâ€™Brien,CarrieJunCai,etal. Generativeagents:Interactivesimulacraofhumanbehavior.
Proceedingsofthe36thAnnualACMSymposiumonUserInterfaceSoftwareandTechnology,pages1â€“22,2023.
[27] YilunDu,ShuangLi,AntonioTorralba,etal. Improvingfactualityandreasoninginlanguagemodelsthrough
multiagentdebate. arXivpreprintarXiv:2305.14325,2023.
[28] Chi-MinChan,WeizeChen,YushengSu,etal. Chateval:Towardsbetterllm-basedevaluatorsthroughmulti-agent
debate. arXivpreprintarXiv:2308.07201,2023.
[29] JiachangLiang,ShuyanZhou,LianminZheng,etal. Encouragingdiverseandconsistentbehaviourinmulti-agent
systemswithlanguagemodels. arXivpreprintarXiv:2309.16834,2023.
[30] KellinHamilton,MichaelWick,andNathanaelChambers. Blinddebate: Acontrastivelearningframeworkfor
debater-agnosticverdictmodels. arXivpreprintarXiv:2310.12221,2023.
[31] DiyiWang,BoLi,ShuyanZhou,etal. Unleashingthepowerofllmagents: Challengesandopportunities. arXiv
preprintarXiv:2311.02019,2023.
[32] Zhecheng Zhang, Aohan Zeng, Hui Liu, et al. Proagent: Towards proactive large language model based
autonomousagents. AdvancesinNeuralInformationProcessingSystems,36,2024.
[33] MuhammadHassan,QiangChen,ShuaiZhao,etal. Chatgpt-eval: Anopen-sourcellmevaluatorwithGPT-4level
performance. arXivpreprintarXiv:2310.13870,2023.
10APREPRINT-JUNE18,2024
[34] Yanan Liu, Xiang Deng, Haotian Ye, et al. Training multi-agent decision making with machine-in-the-loop
interaction. arXivpreprintarXiv:2311.10788,2023.
[35] YingqiangGe,YujieRen,WenyueHua,etal. AIOSandLLM-Agents: Next-GenerationLLMArchitectures,
ApplicationsandEcosystem. arXivpreprintarXiv:2401.01587,2024.
11