A Large Language Model-based multi-agent manufacturing
system for intelligent shopfloor
Zhen Zhaoa, Dunbing Tanga,*, Haihua Zhua , Zequn Zhanga, Kai Chena, Changchun Liua, Yuchen Jia
aCollege of Mechanical and Electrical Engineering, Nanjing University of Aeronautics and Astronautics,
Nanjing 210016, Peopleâ€™s Republic of China
Abstract: As productivity advances, the demand of customers for multi-variety and small-batch
production is increasing, thereby putting forward higher requirements for manufacturing systems. When
production tasks frequent changes due to this demand, traditional manufacturing systems often cannot
response promptly. The multi-agent manufacturing system is proposed to address this problem. However,
because of technical limitations, the negotiation among agents in this kind of system is realized through
predefined heuristic rules, which is not intelligent enough to deal with the multi-variety and small batch
production. To this end, a Large Language Model-based (LLM-based) multi-agent manufacturing system
for intelligent shopfloor is proposed in the present study. This system delineates the diverse agents and
defines their collaborative methods. The roles of the agents encompass Machine Server Agent (MSA),
Bid Inviter Agent (BIA), Bidder Agent (BA), Thinking Agent (TA), and Decision Agent (DA). Due to
the support of LLMs, TA and DA acquire the ability of analyzing the shopfloor condition and choosing
the most suitable machine, as opposed to executing a predefined program artificially. The negotiation
between BAs and BIA is the most crucial step in connecting manufacturing resources. With the support
of TA and DA, BIA will finalize the distribution of orders, relying on the information of each machine
returned by BA. MSAs bears the responsibility for connecting the agents with the physical shopfloor.
This system aims to distribute and transmit workpieces through the collaboration of the agents with these
distinct roles, distinguishing it from other scheduling approaches. Comparative experiments were also
conducted to validate the performance of this system.
Keywords: Large Language Model (LLM), multi-agent, manufacturing system, intelligent shopfloor.
1 Introduction
Mass personalization is on the horizon. As productivity advances, unique product requirements from
customers are becoming progressively more frequent. This demand for multi-variety and small-batch
production necessitates frequent changes among manufacturing resources. Consequently, it places a
heightened emphasis on the capacity of the manufacturing system to organize and manage these
resources effectively.
Manufacturing systems serve the purpose of organizing manufacturing resources within shopfloors
or larger areas for efficient production. Traditional production approaches necessitate production
schedulers to orchestrate workpieces, drawing on their experience and real-time on-site conditions.
Manual scheduling often calls for collaboration across multiple machines and departments, with
schedules set over a long time and typically resistant to change. This rigidity struggles to accommodate
the fluctuating demands of production. Conventional manufacturing is apt for large-scale manufacturing,
focusing on uniform and standardized workpieces. However, the production of personalized custom
products poses a requirement for multi-variety and small-batch production. For such production demands,
to build a production line specially is both uneconomical and inefficient. In this respect, flexible
1manufacturing emerges as a more suited alternative. It is capable of organizing product processing
according to some scheduling methods, thus facilitating the production of complex and variable products.
Currently, the scheduling methods in flexible manufacturing are primarily conducted through
heuristic rules, metaheuristic algorithms, and Deep Reinforcement Learning (DRL) algorithms. Heuristic
rules, engineered by human intellect, provide a swift reaction but with less performance compared to
subsequent methods. Metaheuristic algorithms employ calculations in generating scheduling solutions,
taking into account present production orders and manufacturing resources. However, this kind of
method is time-consuming in iterative calculation, and the resulting adjustments when orders or resources
change are typically subpar. DRL algorithms provide a more efficient way, capable of swiftly seeking
scheduling solutions and dealing with dynamic disturbances. Although the performance of metaheuristics
and DRL is excellent in small-scale manufacturing resource scheduling, as manufacturing resources
increase, the poor performance is shown as the complexity of these algorithms amplifies rapidly.
Therefore, the challenges are the complexity reduction and minimizing solution time when seeking a
scheduling solution, while avoiding loss of precision.
Distinct from the aforementioned approach, the multi-agent manufacturing system is a novel
architecture of organizing flexible manufacturing resources. It treats manufacturing resources as different
agents and organizes them through interactions. The processing machine of workpiece will be only
defined after the previous processing step is completed, which differ from metaheuristic algorithms.
Therefore, the machine to be processed for each workpiece is not defined in advance, which provides the
flexibility to make decisions based on immediate condition of shopfloor. Neither conventional nor the
proposed multi-agent manufacturing system need to establish a mathematical model to train the decision-
making model in advance, which is different from DRL algorithms. Under the architecture of multi-agent
manufacturing system, the question of optimization shifts towards discovering an intelligent negotiation
mechanism. Nevertheless, conventional negotiation mechanism in this system primarily relies on
heuristic rules, suggesting that it is not sufficiently intelligent to choose the optimal or suitable machine
based on various information of orders and machines.
Large Language Model (LLM) offers a promising way to enhance the capabilities of agents in the
multi-agent manufacturing system. LLMs, exemplified by ChatGPT, have sparked a fresh wave of
revolution in Artificial Intelligence (AI). Throughout its training process, LLMs acquire a substantial
volume of text information, furnishing it with robust and human-like language-generating ability. It can
be projected that replacing heuristic rules with LLMs to enhance the intelligence of the negotiation
process is a viable solution. For the purpose of reducing the difficulty while improving the accuracy of
manufacturing resource scheduling, an LLM-based multi-agent manufacturing system is proposed in the
present study. The proposed system avoids the iterative calculation in metaheuristic algorithms and the
pre-training in DRL algorithms. Conversely, this system can initiate and alter objectives through
designing prompts, similar to engaging in conversation with a human. The main contributions of the
present study can be summarized as follows:
(1) The system assigns diverse agents to each manufacturing resource and defines their LLM-based
collaborative methods. With the support of TA and DA, LLM-based negotiation avoids the drawback that
a single heuristic rule cannot choose suitable machine promptly according to the current shopfloor
2situation. Agents can negotiate the overall processing task based on the production task using natural
language, which is different from other scheduling methods. Shopfloor leaders can integrate and utilize
LLMs through a straightforward dialogue, thereby customizing the system to align with their individual
objectives.
(2) In this system, not only data collection and training processes in conventional AI methods are
avoided, but also the complexity of scheduling is notably reduced. Because of this, this system can be
swiftly adapted to the target manufacturing scenario at a low-cost defining BAs and BIAs, with
satisfactory outcomes attainable.
(3) Far from being confined to theoretical exploration, this system utilizes the bridge provided by
MSA to interface with manufacturing resources. With the support of MSA, this system can directly
regulate the orders of manufacturing resources, even autonomously executing the complete processing
cycle of a product by negotiation between agents without human interference.
The remainder of this paper is organized as follows. Section 2 provides a description of the related
works. In Section 3, the LLM-based multi-agent manufacturing framework is discussed in detail. Section
4 provides a detailed description of the agents proposed in Section 3. Experiments were designed to
compare the performance of the proposed system with other heuristic rules, which are discussed in
Section 5. Finally, a summary is provided in Section 6 by outlining the main contents of the present study.
2 Related work
The multi-modal capabilities of LLMs will introduce new intelligence into the manufacturing
system. As Industrial Internet of Things (IIOT) has become prevalent in the manufacturing system,
intelligence has emerged as a new requirement for the system. In order to enhance the intelligence of the
manufacturing system, present scheduling approaches are primarily based on metaheuristic and DRL
algorithms. This section outlines the existing efforts regarding scheduling methods of the manufacturing
system and applications of LLMs.
2.1 Scheduling methods of the manufacturing system
For an extended period, researchers have concentrated on the scheduling problem in the
manufacturing system. Graey et al. [1] proved shortest-length schedule and minimum mean-flow-time
schedule in flow-shop is NP-complete. This work guides researchers to find acceptable solutions instead
of optimal solutions in the flow-shop. Analogous to the traveling salesman problem, researchers have
shifted their focus from procuring mathematical analytical solutions to finding acceptable ones. The most
recent scheduling techniques in manufacturing systems are chiefly categorized into metaheuristic
algorithms, DRL algorithms, and other methodologies.
The scheduling methods based on the meta-heuristic algorithm demonstrate high precision but
require additional time to compute the solution. Consequently, this kind of method is effectively suitable
for static scheduling problems within manufacturing systems. Liu et al. [2] formulated a mathematical
model that aims to optimize the minimum production cycle for the dual-resource batch scheduling in a
flexible job shop. To address this issue, they developed an enhanced nested optimization algorithm,
whose efficacy has been substantiated through the examination of real-world scenarios. For the purpose
of addressing the scheduling challenge within a flexible job shop that utilizes segmented automatic
guided vehicles, Liu et al. [3] developed a dual-resource optimization model for machine tools and
3automatic guided vehicles, with the objective of minimizing the makespan. This study introduced an
enhanced genetic algorithm tailored to resolve the aforementioned problem. Concurrently, Li et al. [4]
introduced an innovative, adaptive memetic algorithm that draws upon popularity-based principles. This
algorithm was designed to rectify certain shortcomings and is applied to the energy-efficient distributed
flexible job shop scheduling problem, with the dual objectives of minimizing both the makespan and
energy consumption.
The scheduling methods based on DRL necessitate pre-training stages, making it fitting for
addressing the dynamic scheduling problems in manufacturing systems. Liu et al. [5] proposed a
predictive maintenance approach for machine tools for DRL approaches to excavate features in shopfloor.
Gui et al. [6] proposed a DRL approach to minimize the mean tardiness, which selected the most
appropriate weights for dispatching rules. An AI-based scheduling system that employs composite
reward functions was introduced by Zhou et al. [7]. This system was designed for data-driven dynamic
scheduling of manufacturing jobs within the context of a smart factory, where uncertainty is a factor.
This scheduler demonstrated the ability to enhance multi-objective performance metrics associated with
production scheduling challenges. Du et al. [8] proposed a DQN model to solve a multi-objective flexible
job shop problem with crane transportation and setup times. Considering the complexity of this problem,
this study also designed an identification rule to organize the crane transportation in solution decoding.
Liu et al. [9] proposed a hierarchical and distributed architecture to solve the dynamic flexible job shop
scheduling problem to facilitate real-time control. Luo [10] proposed a deep Q-network to cope with
continuous production states and learn the most suitable action at each rescheduling point. Wang et al.
[11] proposed a scheduling algorithm that is tailored to address job scheduling problems within a resource
preemption context, leveraging multi-agent reinforcement learning. Chen et al. [12] introduced a self-
learning genetic algorithm framework, which utilizes the genetic algorithm as its foundational
optimization technique, with its pivotal parameters being intelligently tuned through DRL. This work
merges these two algorithms utilizing DRL in conjunction with the meta-heuristic method to address
dynamic disturbance issues.
Several other alternatives also exist, the multi-agent manufacturing system is gradually becoming a
notable one. Qin et al. [13] conducted a comprehensive review of the literature on self-organizing
manufacturing systems and introduced a comprehensive concept of self-organizing manufacturing
networks. This concept is positioned as the next evolutionary step in manufacturing automation
technologies, specifically aimed at facilitating mass personalization. Building upon this, Qin et al. [14]
developed a reinforcement learning-based approach that combines static training with dynamic execution.
This approach is designed to address dynamic job shop scheduling issues within the framework of a self-
multi-agent manufacturing network. Additionally, Kim et al. [15] introduced a smart manufacturing
system that employs a multi-agent system and reinforcement learning. This system is distinguished by
its use of intelligent agents embedded within machines, which enable the system with autonomous
decision-making capabilities, the ability to interact with other systems, and the intelligence to adapt to
dynamically changing environments. Wang et al. [16] proposed a smart factory framework that integrates
industrial networks, cloud technology, and supervisory control terminals with smart shop-floor objects.
This framework leverages the feedback and coordination by the central coordinator in order to achieve
4high efficiency.
The multi-agent manufacturing system is characterized by its swift processing speed and obviates
the need for pre-training, thereby serving as an effective procedure for migrating and augmenting the
manufacturing system. However, the negotiations among agents within this system cannot change their
policy of machine selection based on the real-time conditions of the shopfloor, which still requires
completion.
However, the negotiations among agents within this system cannot alter their policy of machine
selection based on the real-time conditions of the shop floor, a task that still requires completion.
2.2 Applications of LLMs
Transformer [17] has emerged as a novel, universal technique in Natural Language Processing
(NLP), particularly within the context of LLM. As advancements in computing power and data
accumulation have continued, there has been a commensurate escalation in the capabilities of LLMs,
such as the GPT series [18â€“21]. This progression is renowned for GPT-3.5 version, popularly known as
ChatGPT [22], which introduced groundbreaking multimodal functionality and convincingly realistic
conversational abilities. To enable generative agents, Park et al. [23] proposed an architecture to extend
LLM, which allows users to interact with a small town of twenty-five agents using natural language.
LLMs have demonstrated their capabilities in various fields. In biology, researchers have achieved
immense progress building upon the use of LLMs. Boiko et al. [24] introduced Coscientist, an AI system
powered by GPT-4. This system is capable of autonomously designing, planning, and executing intricate
experiments. It achieves this through the integration of LLMs that are augmented with various tools,
including internet and documentation search capabilities, code execution, and experimental automation
functionalities. Lin et al. [25] demonstrated direct inference of full atomic-level protein structure from
primary sequence using an LLM. Furthermore, Luo et al. [26] proposed a domain-specific model that
has been pre-trained on a vast corpus of biomedical literature. Their case study highlights the benefits of
using a specialized LLM for generating coherent and informative descriptions of biomedical terms within
the context of biomedical literature.
In the field of chemistry, researchers focused on enhancing the understanding of LLMs and swift
application to chemical tasks. Jablonka et al. [27] fine-tuned GPT-3 to answer chemical questions in
natural language with the correct answer. Kim et al. [28] proposed a neural network that meets some
desired multiple target conditions based on a deep understanding of chemical language. This network
could have a deeper understanding of molecular structures beyond the limitations of chemical language
itself. Irwin et al. [29] presented a Transformer-based model that can be quickly applied to both sequence-
to-sequence and discriminative cheminformatics tasks.
Researchers have also dedicated extensive efforts towards enhancing the coding ability based on
LLMs. Xu et al. [30] proposed PolyCoder, with 2.7B parameters based on the GPT-2 architecture. In the
C programming language, PolyCoder outperforms all models. Nijkamp et al. [31] introduced CODEGEN
which is up to 16.1B parameters and investigated the multi-step paradigm for program synthesis.
The domain of robotics and manufacturing is also a crucial area for the deployment of LLMs. Ichter
et al. [32] showed how low-level skills can be combined with LLMs so that the language model provides
high-level knowledge about the procedures for performing complex and temporally extended instructions.
5Huang et al. [33] used the composed value maps in a model-based planning framework to zero-shot
synthesize closed-loop robot trajectories with robustness to dynamic perturbations. Belkhale et al. [34]
proposed RT-H which builds an action hierarchy using language motions. This method first learned to
predict language motions and conditioned on this along with the high-level task, and then predicts actions,
using visual context at all stages. Fan et al. [35] proposed a comprehensive framework to delve into the
potential of LLM agents for industrial robotics, which included autonomous design, decision-making,
and task execution within manufacturing contexts. Xia et al. [36] developed an error-assisted fine-tuning
approach aimed at calibrating LLMs specifically for manufacturing. This approach sought to dismantle
the intricate domain knowledge and distinct software paradigms inherent to the manufacturing system.
LLM excels remarkably across numerous fields. From the most basic task of responding to the
inquiries of users as an assistant to its deep integration into diverse scenarios, LLM has changed the
original workflow across numerous fields. However, due to the complexity of the industry, particularly
in manufacturing systems, the usage of LLM is still limited. Hence, the system proposed in this article
can also serve as an example.
2.3 Research gaps
From the aforementioned work, significant progress has been made in the research fields of
scheduling methods of the manufacturing system and applications of LLMs. However, there are still the
following deficiencies worthy of further improvement:
(1) Nowadays, the applications of LLMs have emerged in various fields. However, the application
of LLMs in manufacturing, particularly in manufacturing systems, is virtually non-existent.
The present study offers a novel approach for integrating LLMs into multi-agent manufacturing
systems.
(2) The researchers in flexible manufacturing resource scheduling are primarily based on
metaheuristic algorithms and DRL algorithms. This study presents a multi-agent manufacturing
system based on LLMs, offering a new approach to resolving this issue.
(3) For the purpose of maintaining high scalability and real-time response, conventional multi-
agent manufacturing system typically employ single heuristic dispatching rules. The proposed
LLM-based multi-agent manufacturing system can circumvent this constraint and flexibly
select manufacturing resources. Thereby it expands the solution space for problem resolution
while preserving high scalability and real-time response.
3 LLM-based multi-agent manufacturing framework for intelligent shopfloor
As illustrated in Figure 1, the present study proposes an LLM-based multi-agent manufacturing
system, including LLM Engine layer, Negotiation layer, and Physical resources layer. Compared with
conventional multi-agent manufacturing systems, the capabilities of accessing LLMs are indeed
integrated.
(1) LLM Engine layer:
LLM engines are provided in this layer. The inference and training of LLMs requires large-scale
Graphics Processing Units (GPUs), while it is impossible to employ them in a shopfloor or even a factory.
Therefore, the communication between the manufacturing system and LLMs, deployed within a
computer center enhanced by multiple GPUs, is established through an Application Programming
6Interface (API), thereby enabling the agents of manufacturing resources in the shopfloor to operate more
effectively. However, for application scenarios that are extremely sensitive to data security or other
reasons, open-source LLMs represented by Large Language Model Meta AI (LLaMA) can also become
an alternative plan. However, it is no doubt that this will definitely affect the performance of agents.
Figure 1 LLM-based multi-agent manufacturing framework
(2) Negotiation layer:
This layer serves as the crucial middleware for manufacturing resources to interact with LLMs
within the multi-agent manufacturing system. Although the shopfloor comprises a variety kind of
manufacturing resources, these can be effectively abstracted and interpreted as machines. For instance,
the raw material warehouse, traditionally used to dispatch orders, can be conceptualized as a machine
with the processing time is zero. In fact, this issue becomes a Flexible Job-shop Scheduling Problem
(FJSP) in this way.
Each machine is equipped with a workpiece buffer designed to hold workpieces awaiting processing.
7Upon completion of a workpiece, this system confronts the challenge of determining the subsequent
machine for the finished workpiece within the workflow. This issue is also the focal point of the current
study. Through this process, workpieces can reach completion through negotiation among various agents,
ultimately finishing their technological process.
Figure 2 Negotiation process of manufacturing agents
For the purpose of realizing the communication among machines and completing the process of
workpieces in shopfloor, agents are equipped for each manufacturing resource in the present study,
including Machine Server Agent (MSA), Bid Inviter Agent (BIA), Bidder Agent (BA), Thinking Agent
(TA), Decision Agent (DA). MSA is directly linked with manufacturing resources, serving to actualize
their intelligence. BIA and BA are used to negotiate and communicate among manufacturing resources,
thereby completing the process of workpieces among machines. DA and BA link LLMs with the purpose
of selecting the appropriate machine to process the workpiece according to the information of order and
shopfloor.
The negotiation process among agents for decision is shown in Figure 2. By receiving and analyzing
manufacturing resource information in the shopfloor, agents make decisions based on the current
situation and optimization objectives. Within the negotiation process, BIA serves as the center of
actualizing the delivery of the workpiece to be processed.
1) Event trigger. Each machine (manufacturing resource) is equipped with a MSA, which is
responsible for monitoring its machine. When the decision time arises in the machine of
processing, MSA would initiate the subsequent procedure and activate BIA.
2) Prepare to invite bidders. Upon receiving the trigger from the MSA, BIA initiates preparing the
information for potential bidders. The responsibility of BIA includes summarizing the details
of workpieces that are required by the next available machine.
3) Invite bidders. BIA, in its role, will invite available BAs and transmit the information of the
workpieces to be processed.
4) Prepare to bid. Once the invitations from the BIA are received, BA undertakes the task of
preparing the bidding document. This document encompasses information relating to its
machine and an analysis of the workpiece to be processed.
85) Delivery of bidding documents. All BAs of available machines would deliver the bidding
documents to the initial BIA.
6) Generate question document. When receiving the documents from the BAs, BIA consolidates
all the information in the shopfloor and optimization objective into a question document. The
primary purpose of this question document is to delineate the decision-making issue.
7) Delivery of question documents. BIA sends the generated question documents to TA, which is
interconnected with LLMs and the system prompts have been established.
8) Generate suggestions. TA devises comprehensive solutions to the question document by
utilizing the multi-modal capabilities of LLMs.
9) Delivery of suggestions. TA sends the generated suggestion to DA, which is also interconnected
with LLMs and the system prompts have been established.
10) Generate decision. DA makes the final decision founded on the suggestion from TA.
11) Decision. DA sent the final decision to the BIA.
12) Decision trigger. After BIA receives the final decision, it triggers the MSA and actually realizes
the delivery of the workpiece to be processed.
(3) Physical layer:
This layer encompasses all the physical entities located in the shopfloor. Within this layer, each
manufacturing resource is connected to the manufacturing system. And via IIOT, a linkage is established
between this layer and the negotiation layer. The event trigger of MSA would activate the negotiation
layer if any manufacturing resource requires a decision. In the same vein, the negotiation layer returns
the decision to the relevant manufacturing resource by decision trigger. Both of these triggers are
employed in MSA. Fundamentally, MSA imparts intellectual capacity to the physical manufacturing
shopfloor.
4 Negotiation Agents in Manufacturing System
Numerous agents and their negotiation process are delineated in Section 3. This section aims to
delve into the specifics of how these agents achieve such abilities. As illustrated in Figure 3, a
comprehensive example of agent negotiation within a manufacturing system is provided.
(1) Machine Server Agent
Machine Server Agent is a bridge between physical manufacturing resources and other agents.
Consequently, the manufacturing system is linked to intelligence. The majority manufacturers of
manufacturing resources supply corresponding application programming interfaces, which solely offer
users the proficiency to automate the operation of machines via programming. MSAs, proposed in this
study, serve as the capability providers that render manufacturing resources intelligent. The example code
of MSA in Figure 3 is programmed in C# to control the milling machine. And in the present study, each
MSA corresponds to a manufacturing resource. Through cooperation among the MSAs, the arrival of the
decision time can be detected. If it ensues, the negotiation process outlined in Figure 2 is initiated to
facilitate the production of a workpiece.
Once the production task of a workpiece is assigned, the MSA is also responsible for transforming
the production data into the execution documents necessary for the manufacturing resources. For instance,
9in the case of numerical control machine tools, the execution documents would be the numerical control
code relevant to the corresponding process.
(2) Bid Inviter Agent
Each BIA is directly involved in the bidding process, which is equipped with MSA. Assisted by
other agents, BIA designates the next processing machine for the current workpiece.
Figure 3 An example of agent negotiation within the LLM-based multi-agent manufacturing system
10Initially, upon receiving the event trigger from MSA, BIA filters out those BAs whose
manufacturing resources are capable of completing the next process of the workpiece to be processed.
Subsequently, BIA dispatches process invitations to BAs and waits for the response of BAs.
Subsequently, after receiving the replies from BAs, BIA will integrate the information of the
workpiece with the bidding document of BA. As shown in Figure 3, based on the integrated information,
a question document is generated and transmitted to TA. This document is written in natural language,
thereby guaranteeing its readability and maintainability. When required, the functions of BIA can be
temporarily supplemented by human intervention or manual modifications to ensure that the question
document adapts to the current complex production scenarios.
Ultimately, in the end of the negotiation process, BIA dispatches the decision to its MSA when
receiving the decision from DA, and subsequently propelling the workpiece to continue processing.
(3) Bidder Agent
Bidder Agent is responsible for generating bidding documents, indicating a required collaboration
with MSA. When receiving an invitation from the BIA, the process owned by BA is initiated. After
verifying the accuracy of the invitation, BA would acquire the status of its associated manufacturing
resource from the MSA, such as whether it is in the midst of processing or in an idle state. Subsequently,
BA summarizes the information obtained from the MSA and generates a bidding document. This
document is then returned to BIA for subsequent negotiations. A comprehensive illustration of a bidding
document is depicted in Figure 3.
(4) Thinking Agent
Thinking Agent serves to impart intelligence to other agents, thereby rendering it a pivotal
component of the current study. The role of the TA involves making decisions based on the question
document received from BIA and selecting the most suitable BA. The intelligence inherent in TA is
derived from LLMs, which are invoked through prompts. As illustrated in Figure 3, prompts in the red
box are employed to predefine the behavior of LLMs. For instance, by predetermining "You are a useful
helper. Analyze whether my input is positive or negative." such prompts can create an agent for semantic
sentiment analysis.
To fully leverage the capabilities of LLMs, the present study employs the format of Markdown to
delineate the behavior of LLMs from multiple perspectives, encompassing the character of the agent,
objectives, knowledge, answers, and constraints, as illustrated in Figure 4. The character of the agent is
utilized to establish the role. It represents a macro-level definition of the behavior of the agent. The
objective is the direction that the agent selects. It is elaborated in detail via natural language to facilitate
comprehension for LLMs. Knowledge refers to the pre-existing information artificially provided to the
agent, such as the length of the waiting buffer. In addition, as shown in Figure 4, the knowledges which
can help agents make decision are also included, such as some heuristic rules. Answers serve to delineate
information associated with the response of the agent. For instance, to address costs, decision-making
results can be directly outputted. However, to fully utilize its cognitive capacity, the present study
employs the widely used Chain of Thought, which involves guiding the agent to deliberate on decision-
making processes incrementally. Constraints are employed to limit irregular behaviors. In the present
11study, the agent might output and select machines incapable of processing the current workpiece without
constraints, which is unacceptable. With the implementation of these constraints, such scenarios can be
more effectively prevented.
By defining the user prompts and inputting question document into TA, the analysis result of TA
can be acquired. This outcome is then forwarded to the Decision Agent for the generation of final
decisions.
Figure 4 Details of Thinking Agent and Decision Agent
(5) Decision Agent
The final decision of this negotiation process is completed by Decision Agent. TA conducts a
thorough analysis of the question document from BIA. However, comprehending this analysis for MSA
or even BIA proves challenging, given their lack of LLMs. Therefore, it is necessary to send the decision
results directly to the BIA.
Decision Agent is required to extract the final decision outcome from the analysis document of TA.
As depicted in Figure 4, following the defining the behavior of DA, a dependable decision can be
generated by inputting the analysis document of TA. This decision will be conveyed by the DA to the
BIA, and subsequently by the BIA to the relevant MSA. The MSA will finally utilize the corresponding
manufacturing resource to execute the decision result.
5 Experiments
For the purpose of verifying the performance of the proposed LLM-based multi-agent
12manufacturing system, several experiments are conducted in test instances for flexible job shop
scheduling problem [37]. Subsequently, this system is implemented in a shopfloor equipped with MSAs.
The entire design was coded in a computer equipped with 32GB RAM and an Intel Core i5-13600KF
running at 4.8 GHz, with NVIDIA RTX 3080. The present study employs Qwen, provided by Alibaba,
as the LLM engine for experimentation.
5.1 Validation experiments
The present study initially validates this system using selected test instances. In these instances, the
number of machines varies from 5 to 15, and the number of orders varies from 10 to 30. Through these
instances, the applicability of the proposed system can be confirmed.
For comparative purposes, this study introduces other methods as benchmarks for experimentation,
specifically Shortest Machine Processing Time (SMPT), Work in Queue (WINQ), and Random. SMPT
signifies the selection of the machine with the shortest operation processing time. WINQ represents the
choice of the machine with the least workload. Random implies the arbitrary selection of a machine.
Due to the lack of consideration regarding the selection of the processing workpieces from the
waiting buffer, this research also introduces heuristic rules, such as First In First Out (FIFO), First In Last
Out (FILO), and Shortest Processing Time (SPT). FIFO signifies the selection of the workpiece which
enters the waiting buffer first. Conversely, FILO signifies the selection of the latest workpiece entering
the waiting buffer SPT signifies the selection of the workpiece with the shortest processing time.
The comparison results of the system proposed in the present study and the aforementioned methods
are shown in Table 1, Table 2 and Table 3. The bold text in the tables signifies the optimal results on the
current test instance.
Table 1 Makespan on test instance with FIFO
Instance Machine number Job Number Random SMPT WINQ LLM
mk01 6 10 103 72 57 48
mk02 6 10 55 45 60 40
mk03 8 15 282 338 273 207
mk04 8 15 112 188 83 76
mk05 4 15 265 241 220 191
mk06 10 10 155 108 162 94
mk07 5 20 289 217 240 199
mk08 10 20 654 587 525 531
mk09 10 20 562 466 407 346
mk10 15 20 414 353 385 285
mk11 5 30 740 905 704 716
mk12 10 30 699 784 644 552
mk13 10 30 920 646 635 464
mk14 15 30 1144 1146 806 778
mk15 15 30 612 663 567 461
13Table 2 Makespan on test instance with FILO
Instance Machine number Job Number Random SMPT WINQ LLM
mk01 6 10 74 75 62 49
mk02 6 10 80 53 51 39
mk03 8 15 361 355 280 292
mk04 8 15 148 196 111 116
mk05 4 15 255 258 236 196
mk06 10 10 160 120 159 94
mk07 5 20 368 230 279 259
mk08 10 20 734 676 632 601
mk09 10 20 585 524 426 384
mk10 15 20 546 402 373 304
mk11 5 30 894 963 843 749
mk12 10 30 815 885 710 644
mk13 10 30 1038 773 678 550
mk14 15 30 1391 1246 966 892
mk15 15 30 707 776 678 458
Table 3 Makespan on test instance with SPT
Instance Machine number Job Number Random SMPT WINQ LLM
mk01 6 10 98 70 51 50
mk02 6 10 52 45 55 40
mk03 8 15 339 333 293 216
mk04 8 15 89 190 83 85
mk05 4 15 234 239 241 218
mk06 10 10 145 116 152 101
mk07 5 20 267 217 291 185
mk08 10 20 640 604 571 523
mk09 10 20 548 472 456 359
mk10 15 20 405 368 436 266
mk11 5 30 861 929 752 740
mk12 10 30 747 743 659 577
mk13 10 30 882 654 723 514
mk14 15 30 1205 1127 951 789
mk15 15 30 685 682 526 484
The experimental findings demonstrate that the approach proposed in the present study consistently
outperforms other approaches in the majority of cases. Although there are instances where the results are
not as optimal as heuristic rules, the differences are relatively minor. Upon analyzing all the examples, it
becomes evident that apart from the system proposed in this research, only WINQ can achieve
14advantages in a few instances. This suggests that this rule could serve as a contingency plan. In addition,
despite the combination of the method in the present study with various machine selection rules, the
results remain relatively stable.
(a) LLM-based system
(b) Random
Figure 5 Gantt chart of machine selection with FIFO on the mk01
For the purpose of delving deeper into the experimental findings, this study selects two sets of Gantt
charts for analysis, as shown in Figure 5 and Figure 6. As shown in Figure 5, it is evident that the
workload is more evenly distributed across each machine in the proposed system, and the makespan is
approximately half of that in randomly choosing.
Another case is the result of applying FILO on mk15, which is significantly larger in scale than
mk01, as depicted in Figure 6. On the one hand, it is evident that the gap in the Gantt chart of WINQ is
considerably larger than that of the LLM-based system. This suggests that the current study can still
maintain effective scheduling even when dealing with large-scale problems, which WINQ cannot achieve.
On the other hand, when comparing the optimization objectives (makespan in the present study) of the
15two Gantt charts, WINQ exceeds the approach proposed in the present study by 48%.
(a) LLM-based system
(b) WINQ
Figure 6 Gantt chart of machine selection with FILO on the mk15
5.2 Applications of LLM-based multi-agent manufacturing system
For the purpose of validating the applicability of the proposed system in the physical intelligent
shopfloor, the present study tested this system in an intelligent manufacturing factory laboratory located
in Wuxi, China, which is shown in Figure 7. This laboratory has achieved automatic control of various
manufacturing resources through the utilization of MSAs, which can directly operate these
manufacturing resources. Therefore, the proposed system is integrated with the physical laboratory. The
manufacturing resources in this laboratory include warehouses, AGVs, lathes, milling machines,
engraving machines, and manipulators. A series of random orders, based on historical production
information, were also generated to assess the performance of this system.
Without loss of generality, this study considers all physical machines through which workpieces
flow as abstract machines. For instance, the raw material warehouse can be regarded as a machine with
the processing time is zero. Moreover, as the initial machine for all workpieces to enter, the raw material
16warehouse also assumes the responsibility of identifying the capable set of machines for each production
process of the workpieces, based on the actual conditions in the shopfloor.
Figure 7 An intelligent factory testbed for performance evaluation of LLM schedulers with physical
case studies
Figure 8 Makespan corresponding to scheduling approaches
In order to implement the proposed system in the shopfloor, several adjustments are required.
Initially, leveraging the completed work of this laboratory, MSAs established the capability of controlling
each machine. Subsequently, each machine involved in the negotiation process is equipped with BA and
BIA to facilitate the transfer of processing tasks. Finally, the pre-defined DA and TA are integrated with
17this shopfloor laboratory. The proposed system is deployed following these adjustments to evaluate the
applicability of this system. As illustrated in Figure 7, this shopfloor acquired the capability of
negotiation and decision-making.
The present study tested different scheduling methods on this instance, and the respective makespan
for each method is depicted in Figure 8. These experiments employed methods similar to those in Section
5.1 for the selection of processing workpieces. It is evident that, in cooperation with different methods,
the makespan corresponding to the current system (designated as LLM in this figure) is the smallest,
implying that the current system can adapt to various workpiece selection methods. Notably, the results
of the WINQ in this figure are even consistently worse than Random, regardless of the machine selection
approach, indicating that a single heuristic rule struggles to adapt to different problems. However, this
issue does not affect the LLM-based system proposed in this study.
6 Conclusion
The swift advancement of LLMs offers fresh opportunities for multi-agent manufacturing systems.
In order to incorporate the powerful capabilities of LLMs into manufacturing systems, the present study
proposed an LLM-based multi-agent manufacturing system for intelligent shopfloors. By defining agents
for manufacturing resources in the physical shopfloor, this framework facilitates the entire process from
control to decision-making. Simultaneously, these agents also serve as a conduit between the multi-agent
manufacturing system and the emerging LLM technology, enhancing system performance while
significantly diminishing the complexity of modifying other conditions.
This system is equipped with multiple agents for the shopfloor or factory and defines the cooperation
methods among the agents. The agents defined in this system include Machine Server Agent (MSA),
Bidding Inviter Agent (BIA), Bidder Agent (BA), Thinking Agent (TA), and Decision Agent (DA). TA
and DA are directly powered by LLM, exhibiting compatibility with several LLM engines, thereby
allowing independent selection based on specific requirements. Through collaborative consultation, BA
and BIA facilitate the exchange of information among diverse manufacturing resources. MSA directly
manages these machines and offers comprehensive support to all agents. The essence of agents is no
abstraction inherent in each single individual. In its reality it is the ensemble of the productional relations.
It is the collaboration among these agents that facilitates the LLM-based manufacturing system to
autonomously negotiate production. During the collaboration process, the information depends on LLM
in this system, which utilizes natural language, significantly reduces the maintenance and modification
expenses of the proposed system. For the purpose of verifying the performance of this system,
experiments were also designed on several test instances.
Acknowledgments
This work was supported by the National Key Research and Development Program of China [grant
number 2021YFB1716300] and the National Natural Science Foundation of China [grant numbers
92267109, 52075257, 52305539]. This work is partially supported by High Performance Computing
Platform of Nanjing University of Aeronautics and Astronautics.
Declaration of Generative AI and AI-assisted technologies in the writing process
18During the preparation of this work the authors used ChatGPT in order to improve readability and
language of this paper. After using this service, the authors reviewed and edited the content as needed
and takes full responsibility for the content of the publication.
References
[1] Garey MR, Johnson DS, Sethi R. The Complexity of Flowshop and Jobshop Scheduling. Mat
hematics of OR 1976;1:117â€“29. https://doi.org/10.1287/moor.1.2.117.
[2] Liu Q, Gao Z, Li J, Li S, Zhu L. Research on Optimization of Dual-Resource Batch Schedul
ing in Flexible Job Shop. Computers, Materials & Continua 2023;76:2503â€“30. https://doi.org/
10.32604/cmc.2023.040505.
[3] Liu Q, Wang N, Li J, Ma T, Li F, Gao Z. Research on Flexible Job Shop Scheduling Optimi
zation Based on Segmented AGV 2023.
[4] Li R, Gong W, Wang L, Lu C, Zhuang X. Surprisingly Popular-Based Adaptive Memetic Alg
orithm for Energy-Efficient Distributed Flexible Job Shop Scheduling. IEEE Trans Cybern 20
23:1â€“11. https://doi.org/10.1109/TCYB.2023.3280175.
[5] Liu C, Zhu H, Tang D, Nie Q, Zhou T, Wang L, et al. Probing an intelligent predictive main
tenance approach with deep learning and augmented reality for machine tools in IoT-enabled
manufacturing. Robotics and Computer-Integrated Manufacturing 2022;77:102357. https://doi.o
rg/10.1016/j.rcim.2022.102357.
[6] Gui Y, Tang D, Zhu H, Zhang Y, Zhang Z. Dynamic scheduling for flexible job shop using a
deep reinforcement learning approach. Computers & Industrial Engineering 2023;180:109255.
https://doi.org/10.1016/j.cie.2023.109255.
[7] Zhou T, Tang D, Zhu H, Wang L. Reinforcement learning with composite rewards for produc
tion scheduling in a smart factory. IEEE Access 2020;9:752â€“66.
[8] Du Y, Li J, Li C, Duan P. A Reinforcement Learning Approach for Flexible Job Shop Sched
uling Problem With Crane Transportation and Setup Times. IEEE Trans Neural Netw Learnin
g Syst 2022:1â€“15. https://doi.org/10.1109/TNNLS.2022.3208942.
[9] Liu R, Piplani R, Toro C. Deep reinforcement learning for dynamic scheduling of a flexible j
ob shop. International Journal of Production Research 2022:1â€“21. https://doi.org/10.1080/0020
7543.2022.2058432.
[10] Luo S. Dynamic scheduling for flexible job shop with new job insertions by deep reinforcem
ent learning. Applied Soft Computing 2020;91:106208. https://doi.org/10.1016/j.asoc.2020.106
208.
[11] Wang X, Zhang L, Lin T, Zhao C, Wang K, Chen Z. Solving job scheduling problems in a r
esource preemption environment with multi-agent reinforcement learning. Robotics and Comp
uter-Integrated Manufacturing 2022;77:102324. https://doi.org/10.1016/j.rcim.2022.102324.
[12] Chen R, Yang B, Li S, Wang S. A self-learning genetic algorithm based on reinforcement lea
rning for flexible job-shop scheduling problem. Computers & Industrial Engineering 2020;14
9:106778. https://doi.org/10.1016/j.cie.2020.106778.
[13] Qin Z. Self-organizing manufacturing network: A paradigm towards smart manufacturing in
mass personalization. Journal of Manufacturing Systems 2021:13.
[14] Qin Z, Johnson D, Lu Y. Dynamic production scheduling towards self-organizing mass perso
nalization: A multi-agent dueling deep reinforcement learning approach. Journal of Manufactu
ring Systems 2023;68:242â€“57. https://doi.org/10.1016/j.jmsy.2023.03.003.
19[15] Kim YG, Lee S, Son J, Bae H, Chung BD. Multi-agent system and reinforcement learning a
pproach for distributed intelligence in a flexible smart manufacturing system. Journal of Man
ufacturing Systems 2020;57:440â€“50. https://doi.org/10.1016/j.jmsy.2020.11.004.
[16] Wang S, Wan J, Zhang D, Li D, Zhang C. Towards smart factory for industry 4.0: a self-org
anized multi-agent system with big data based feedback and coordination. Computer Network
s 2016;101:158â€“68. https://doi.org/10.1016/j.comnet.2015.12.017.
[17] Vaswani A, Shazeer N, Parmar N, Uszkoreit J, Jones L, Gomez AN, et al. Attention is All Y
ou Need. In: Guyon I, Luxburg UV, Bengio S, Wallach H, Fergus R, Vishwanathan S, et al.,
editors. Advances in Neural Information Processing Systems, vol. 30, Curran Associates, Inc.;
2017.
[18] Radford A, Narasimhan K, Salimans T, Sutskever I, others. Improving language understandin
g by generative pre-training 2018.
[19] Radford A, Wu J, Child R, Luan D, Amodei D, Sutskever I, et al. Language models are uns
upervised multitask learners. OpenAI Blog 2019;1:9.
[20] Brown T, Mann B, Ryder N, Subbiah M, Kaplan JD, Dhariwal P, et al. Language models are
few-shot learners. In: Larochelle H, Ranzato M, Hadsell R, Balcan MF, Lin H, editors. Adv
ances in neural information processing systems, vol. 33, Curran Associates, Inc.; 2020, p. 187
7â€“901.
[21] OpenAI, Achiam J, Adler S, Agarwal S, Ahmad L, Akkaya I, et al. GPT-4 technical report.
arXiv Preprint arXiv:230308774 2024.
[22] OpenAI. Introducing ChatGPT n.d. https://openai.com/blog/chatgpt.
[23] Park JS, Oâ€™Brien JC, Cai CJ, Morris MR, Liang P, Bernstein MS. Generative agents: Interact
ive simulacra of human behavior. In the 36th annual ACM symposium on user interface soft
ware and technology (UIST â€™23), New York, NY, USA: Association for Computing Machiner
y; 2023.
[24] Boiko DA, MacKnight R, Kline B, Gomes G. Autonomous chemical research with large lang
uage models. Nature 2023;624:570â€“8. https://doi.org/10.1038/s41586-023-06792-0.
[25] Lin Lin, Akin Akin, Rao Rao, Hie Hie, Zhu Zhu, Lu Lu, et al. Evolutionary-scale prediction
of atomic-level protein structure with a language model. Science 2023;379:1123â€“30. https://do
i.org/10.1126/science.ade2574.
[26] Luo R, Sun L, Xia Y, Qin T, Zhang S, Poon H, et al. BioGPT: generative pre-trained transfo
rmer for biomedical text generation and mining. Brief Bioinform 2022;23:bbac409. https://doi.
org/10.1093/bib/bbac409.
[27] Jablonka KM, Schwaller P, Ortega-Guerrero A, Smit B. Leveraging large language models fo
r predictive chemistry. Nature Machine Intelligence 2024;6:161â€“9. https://doi.org/10.1038/s422
56-023-00788-1.
[28] Kim H, Na J, Lee WB. Generative chemical transformer: Neural machine learning of molecul
ar geometric structures from chemical language via attention. Journal of Chemical Informatio
n and Modeling 2021;61:5804â€“14. https://doi.org/10.1021/acs.jcim.1c01289.
[29] Irwin R, Dimitriadis S, He J, Bjerrum EJ. Chemformer: a pre-trained transformer for comput
ational chemistry. Machine Learning: Science and Technology 2022;3:015022. https://doi.org/1
0.1088/2632-2153/ac3ffb.
[30] Xu FF, Alon U, Neubig G, Hellendoorn VJ. A systematic evaluation of large language model
s of code. Proceedings of the 6th ACM SIGPLAN international symposium on machine progr
20amming, New York, NY, USA: Association for Computing Machinery; 2022, p. 1â€“10. https://
doi.org/10.1145/3520312.3534862.
[31] Nijkamp E, Pang B, Hayashi H, Tu L, Wang H, Zhou Y, et al. CodeGen: An open large lang
uage model for code with multi-turn program synthesis. The eleventh international conference
on learning representations, 2023.
[32] ichter brian, Brohan A, Chebotar Y, Finn C, Hausman K, Herzog A, et al. Do as I can, not
as I say: Grounding language in robotic affordances. 6th annual conference on robot learning,
2022.
[33] Huang W, Wang C, Zhang R, Li Y, Wu J, Fei-Fei L. VoxPoser: Composable 3D value maps
for robotic manipulation with language models. In: Tan J, Toussaint M, Darvish K, editors. P
roceedings of the 7th conference on robot learning, vol. 229, PMLR; 2023, p. 540â€“62.
[34] Belkhale S, Ding T, Xiao T, Sermanet P, Vuong Q, Tompson J, et al. RT-H: Action hierarchi
es using language. https://arxiv.org/abs/2403.01823, 2024.
[35] Fan H, Liu X, Fuh JYH, Lu WF, Li B. Embodied intelligence in manufacturing: leveraging l
arge language models for autonomous industrial robotics. Journal of Intelligent Manufacturing
2024. https://doi.org/10.1007/s10845-023-02294-y.
[36] Xia L, Li C, Zhang C, Liu S, Zheng P. Leveraging error-assisted fine-tuning large language
models for manufacturing excellence. Robotics and Computer-Integrated Manufacturing 2024;
88:102728. https://doi.org/10.1016/j.rcim.2024.102728.
[37] Behnke D, Geiger MJ. Test Instances for the Flexible Job Shop Scheduling Problem with Wo
rk Centers. Arbeitspapier / Research Paper / Helmut-Schmidt-UniversitÃ¤t, Lehrstuhl FÃ¼r Betrie
bswirtschaftslehre, Insbes Logistik-Management 2012. https://doi.org/10.24405/436.
21