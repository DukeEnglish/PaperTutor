VITAMIN: A Compositional Framework for
Model Checking of Multi-Agent Systems
Angelo Ferrando1[0000−0002−8711−4670] and Vadim Malvone2[0000−0001−6138−4229]
1 University of Genoa, Italy
angelo.ferrando@unige.it
2 T´el´ecom Paris, France
vadim.malvone@telecom-paris.fr
Abstract. TheverificationofMulti-AgentSystems(MAS)posesasig-
nificant challenge. Various approaches and methodologies exist to ad-
dress this challenge; however, tools that support them are not always
readily available. Even when such tools are accessible, they tend to be
hard-coded, lacking in compositionality, and challenging to use due to
a steep learning curve. In this paper, we introduce a methodology de-
signed for the formal verification of MAS in a modular and versatile
manner,alongwithaninitialprototype,thatwenamedVITAMIN.Unlike
existingverificationmethodologiesandframeworksforMAS,VITAMINis
constructed for easy extension to accommodate various logics (for spec-
ifying the properties to verify) and models (for determining on what to
verify such properties).
Keywords: Formal Verification · Model Checking · Multi-Agent Sys-
tems · Software Engineering.
1 Introduction
Software and hardware systems are notoriously challenging to verify. This dif-
ficulty generally arises from their complexity, making formalisation and proper
analysis arduous. At times, it is due to their size, rendering exhaustive verifi-
cation impractical unless appropriately abstracted or optimised (e.g., through
symbolic techniques). Regardless of the cause, formally verifying software and
hardware systems is a complex task demanding deep expertise in formal meth-
ods.Giventhatsuchexpertiseisoftenscarce,formalverificationtechniquesfind
limited usability in real-world software and hardware development.
MovingfrommonolithicsystemstoMulti-AgentSystems(MAS),formalver-
ification becomes even more complex to achieve. In fact, the process of test-
ing[18],debugging[21],andverifying[7]suchsystemscanbequitecomplex.So-
lutions which make the development more reliable are of uttermost importance.
Similartothechallengesmentionedformonolithicsystems,MASsencounterthe
same issues in verification. Moreover, as distributed systems comprising intelli-
gent and independent components (the agents), their verification becomes even
4202
raM
4
]AM.sc[
1v07120.3042:viXra2 Angelo Ferrando & Vadim Malvone
more demanding. This is due to the fact that MAS properties may rely on the
rationality of the agents and on how they interact with each other.
One significant development in formal verification is Alternating-Time Tem-
poral Logic (ATL)[1],enablingreasoningaboutagents’strategieswithtemporal
goals as payoff. However, ATL’s implicit treatment of strategies limits its suit-
ability for certain concepts, leading to the introduction of more powerful for-
malisms like Strategy Logic (SL) [17]. SL treats strategies as first-order objects,
providing a richer framework for strategic reasoning. While SL’s expressivity is
high, it comes at the cost of non-elementary complete model-checking and un-
decidable satisfiability [17]. To address this, fragments like Strategy Logic with
Simple-Goals [3] have been proposed, offering better computational properties
while still subsuming ATL. In the context of MAS, considering agents’ visibil-
ity is crucial. The distinction between perfect and imperfect information MAS
impacts model-checking complexity, with imperfect information scenarios often
modelled using indistinguishability relations over MAS states [20]. This distinc-
tionbecomesparticularlyrelevant,forinstance,inrenderingATLundecidablein
the context of imperfect information and memoryful strategies [8]. To overcome
this problem, some works have either focused on an approximation to perfect
information [2], developed notions of bounded memory [4], or developed hybrid
techniques [10,11].
Even with strong theoretical foundations, the formal verification of MAS
heavilydependsontoolsthatsupportsuchtechniques.Notably,sometoolsstand
out as pillars in this field, including MCMAS [16] and STV [15].
MCMAS is recognized as one of the most widely used model checkers for
the strategic verification of multi-agent systems, primarily due to being one of
the earliest tools developed, which served as a foundational proof-of-concept for
researchers. Despite the widespread use of MCMAS in the academic commu-
nity, it exhibits issues that hinder its broader adoption, particularly outside the
MASresearchcommunityitself.Specifically,itsverificationprocessisinherently
hard-coded.Infact,eventhoughMCMAShasbeenextendedinvariousways,it
lacks modularity and does not allow a clear separation between different logics
and models that causes maintainability issues. That is, both from a user and
a developer viewpoint, MCMAS lacks the capability of being transparently ex-
tended with new logics and models for the verification of MASs. Furthermore,
while it does offer a graphical interface, users may find its execution challeng-
ing, as it requires additional tools, such as Eclipse, for installation. Moreover,
the tool lacks comprehensive external documentation to assist developers, and
its internal documentation may prove helpful only to those familiar with its
original development. It is important to acknowledge that the observed limita-
tions in MCMAS arise from its primary function as a research tool dedicated
to proving theoretical contributions. Regarding STV, it is designed to address
specific verification goals in a predetermined way. Consequently, the resulting
tool lacks compositional nature and only supports certain types of logics and
models for the MAS verification. If users wish to verify the MAS against differ-
ent logics or models, such flexibility is unavailable to them. Moreover, the toolVITAMIN: A Compositional Framework for Model Checking of MAS 3
lackscomprehensivedocumentationtoassistusersanddevelopers.Additionally,
bothMCMASandSTVrequireastrongbackgroundinformalmethods,making
them challenging for non-expert users to employ them. In summary, although
widely used and with a history of successes, both MCMAS and STV tend to
lack modularity and usability.
Thesetwoaspectsaretheoneswedecidedtotacklebyengineeringanddevel-
oping a formal verification framework for MAS, called VITAMIN (VerIficaTion of
A MultI-ageNt system), which aims at being both highly compositional, in terms
of the logic and model formalisms that can be employed, and highly usable, in
terms of the user experience (from a developer and end-user side). The concept
behind our methodology is to generalise MAS verification without being tied to
any specific logic or model formalism. VITAMIN, even though still under devel-
opment, achieves compositionality through its design, minimising assumptions
about the types of logics and models that can be employed. Its end-user’s us-
ability is enhanced through a user experience that guides the entire verification
process. It is worth noting that, VITAMIN’s compositionality facilitates straight-
forward extension of its components by external developers. In this paper, we
refrainfrompresentingexperimentalresultsorbenchmarksfortwoprimaryrea-
sons. Firstly, an empirical evaluation would be beyond the scope of our work,
which focuses on the engineering of VITAMIN and its foundational aspects. Sec-
ondly, due to VITAMIN’s inherent compositionality, it can readily accommodate
the integration of both new and existing verification techniques. Consequently,
comparingVITAMINwithexistingverificationtoolsforMASwouldnotbemean-
ingful, as each tool would essentially be compared, in theory, with itself. At the
time of the submission, the VITAMIN’s architecture is the core of an European
patent application [12].
2 VITAMIN: architecture
Inthissection,wefocusontheengineeringofourapproach.Todoso,wepresent
an overview of the tool, named VITAMIN, in Figure 1, showcasing the main com-
ponents of the latter. First and foremost, there is a clear separation between
the logics and models used in our verification methodology. This separation of
concerns is of paramount importance as it enables the tool to evolve indepen-
dentlyinbothdirections.Thelogicsandmodelsshouldnotbetiedtoeachother,
providing a more flexible environment where different logics can be verified on
distinct models.
Another noteworthy aspect in Figure 1 is the presence of an interface dedi-
cated to handling the actual formal verification. Further details on this aspect
are discussed in the subsequent sections. It is crucial to emphasise that, similar
to the logics and models, the verification component foreseen in our methodol-
ogy is independent and highly compositional. As an illustration, we can choose
to verify ATL properties on a Concurrent Game Structure (CGS) [1], and such
verification can be executed in different ways. For instance, we may opt for an
explicit verification based on fix-point (similar to what is done in the case of4 Angelo Ferrando & Vadim Malvone
User
Non-Expert Expert
GUI GUI
High-Level Model Logic High-Level
Developer Developer
ModelChecker
Interface
Low-Level
Developer
Fig.1. VITAMIN’s architecture.
CTL properties), or alternatively, symbolically encode the model as a Binary
Decision Diagram (BDD) and perform symbolic (i.e., implicit) model check-
ing, or finally, abstract the model to cope with its complexity and perform
the verification on the resulting abstracted model. These examples underscore
how the actual verification, considering a logic and a model, can be achieved in
variousways.Importantly,thisaspectiskeptseparatefromthetool’secosystem
to avoid hard-coding within it.
One additional aspect to note in Figure 1 is the type of users envisioned
in our approach. Rather than the standard end-user, we assume the presence of
threeusercategories.Thefirstonecorrespondstowhatwecommonlyrefertoas
an end-user: a user who utilises the verification approach solely for verifying an
existing MAS, without the intention or objective of extending or modifying the
toolitself.InadditiontothestandardUser,weenvisagetheaccesstotwolevels
ofdeveloperusers:theHigh-Level Developer,whoconcentratesonformalver-
ification aspects, and the Low-Level Developer, who focuses on optimisation
and low-level implementation.
High-Level Developer users possess experience in model checking within
Multi-Agent Systems and are responsible for developing the Model and Logic
components.Theycanachievethisbyextendingexistingmodelsandlogicsorby
introducing entirely new ones into the architecture. Importantly, as each model
in the Model component and each logic in the Logic component is developed as
an independent module, the enrichment of these components with new modules
doesnotintroduceerrorsintopreviouslyvalidatedmodules.Thesedevelopersare
primarily concerned with properly defining and verifying the models and logics
in the system, without delving into the intricacies of creating high-performance
software solutions.VITAMIN: A Compositional Framework for Model Checking of MAS 5
The task of optimising such implementations is undertaken by Low-Level
Developer users who possess expertise not only in model checking within MAS
but also in software engineering. They are responsible for enhancing the im-
plementation provided by High-Level Developers by leveraging optimisation
techniques, which can encompass both algorithmic and data structure improve-
ments. For example, a High-Level Developer may propose a logic and its ver-
ification on an explicit model, and a Low-Level Developer, starting from such
an implementation, may offer an optimised solution based on the verification of
an implicit model, such as through BDDs.
Tobridgethegapbetweenthesetwotypesofdevelopers,wehaveintroduced
the Model Checker Interface component in our methodology. This compo-
nent, developed by low-level developers, is intended to be utilised by end-users
and high-level developers to seamlessly use the optimisations.
Thanks to the presented architecture, the strengths of our approach include:
Modularity: it allows transparent extension without the need for core engine modifica-
tions.
User-Friendlyness: it enables clients to use the software without requiring expertise in formal
verification.
Distribution: thecompositionalityoftheverificationcomponentsenablestheirdistribution
on different machines.
Documentation: we prioritise the development of internal and external documentation to
assist users and developers in effectively utilising and extending the tool.
3 VITAMIN: detail on the architecture modules
We now delve more into the details of the components of the architecture be-
hind our verification methodology. To help us present it, we report a diagram
foreachofsuchcomponents.Notethat,thecoloursareconsistentwiththeones
used in Figure 1, which denotes the more general diagram of the architecture
and its components in a whole. Specifically, we can see how the compositional-
ity is achieved through hierarchical structures; where in the root we have the
general notion, and going deeper into the resulting hierarchy, we have various
instantiations to serve different verification purposes.
3.1 Models
As illustrated in Figure 2, the model component is structured hierarchically. At
theroot,wefindtheconceptofamodel,whilefurtherdowninthehierarchy,two
crucial branches of system models emerge: Monolithic and Multi-Agent. The
former represents the standard model for software and hardware systems, such
asKripkeStructures[5]andLabelledTransitionSystems[14].Thesemodelsare
commonly used to depict the behaviour of centralised systems. However, such
modelstypicallydonotaccountforthepresenceofautonomousentities(suchas
agents) and lack a proper means to characterise their independent and rational6 Angelo Ferrando & Vadim Malvone
behaviours. To address this aspect, the methodology also supports the notion
of multi-agent models, including Concurrent Game Structures (CGSs) [1] and
Interpreted Systems (IS) [9].
Model
Monolithic Multi-Agent
Kripke Labelled Interpreted ConcurrentGame
Structure TransitionSystem System Structure
... ...
Fig.2. Model component insights.
It is worth noting that, we envision the possibility of further extending the
structure of the hierarchy for the model component. Nevertheless, in its initial
phase, we have chosen to consider the two most influential and commonly used
branches of models, particularly for specifying system behaviour (at least for
verification purposes).
3.2 Logics
AsdepictedinFigure3,anindependentstructureisinplacetomanagethevar-
ious logics available. The necessity for such a hierarchy arises from the diverse
natureofthelogicsthatcanbeemployedfortheverificationofMulti-AgentSys-
tems (MAS). Specifically, in our methodology we distinguish between two types
of formalisms for denoting properties to be verified: Temporal and Strategic.
The former encompasses more standard temporal logics, such as Linear Tempo-
ral Logic (LTL) [19] or Computation Tree Logic (CTL) [6]. The latter involves
more recent strategic logics, with examples including Alternating-Time Tempo-
ral Logic (ATL) [1] or Strategy Logic (SL) [17].
Givenourmethodology’sintrinsiccompositionalapproachtohandlinglogics,
it allows for the addition of further branches in the hierarchy. However, in its
initial phase, we selected the two most studied and commonly used branches of
logics for verification purposes.
3.3 Model Checker Interface
Once the model and logic are chosen, the next step in our methodology is their
verification.ThisisobtainedthroughtheModel Checker Interface,presentedVITAMIN: A Compositional Framework for Model Checking of MAS 7
Logic
Temporal Strategic
LinearTemporal ComputationTree Alternating-time Strategy
Logic Logic TemporalLogic Logic
... ...
Fig.3. Logic component insights.
in Figure 4. Notice that, each leaf of Figure 4 represents a meta-node that can
be further decomposed as shown in Figure 5 for the case of Strategy Logic.
ModelChecker
Interface
Temporal Strategic
ModelChecker ModelChecker
LinearTemporal ComputationTree Alternating-time Strategy
Logic Logic TemporalLogic Logic
... ...
Fig.4. Model Checker Interface insights.
To better comprehend the role of such a component, it is noteworthy that
our methodology incorporates a selection mechanism connected to the model
checker interface. This mechanism enables the discernment of the appropriate
model checker usage, considering the selected model and logic. The interface is
configuredtoanalysethemodeldescriptionandlogicalformula,determiningthe
classofmodelamongasetofpredefinedmodelclassestowhichthemodelbelongs
(Model component). Simultaneously, it identifies the class of logics among a set
of predefined logic classes to which the formula belongs (Logic component).
Then, given the model and logic, the model checker interface selects the most
efficient verification method. For instance, by assuming the number of states8 Angelo Ferrando & Vadim Malvone
Strategy
Logic
ExplicitMC AbstractMC ImplicitMC
Fig.5. Meta-node for Strategy Logic.
as main parameter of the problem, the model checker interface could select an
explicit method for models with less than fifty states, an implicit method for
models with less than one-hundred states, and an abstract method with more
than one-hundred states.
3.4 User interface
In this section, we focus on the way the end-user can interact with VITAMIN’s
environment. As mentioned earlier in the paper, we may have both expert and
non-expertusers.Inbothcases,beingend-usersofthesystem,theywouldbenefit
from a Graphical User Interface (GUI) to guide them through the verification
of their systems.
In our approach, we categorise end-users based on their expertise in formal
methods. Specifically, we distinguish between Expert and Non-Expert users.
In Figure 6, we present an ideal interaction flow for both types of users.
Ontheleft,wedepicttheinteractioninvolvinganexpertuser,whichismore
straightforward and direct. Since the user is experienced with formal methods,
theycansimplyuploadthecorrespondingfilesforthemodelandformulathrough
a GUI. These files must be compatible with the format expected by the specific
instantiation. Once these files are provided as input, the verification continues.
On the right, the interaction is guided, as the non-expert user lacks experi-
ence with formal methods. To address this, our methodology solicits details and
information about the model and the formula. These information can be gath-
ered through a sequence of questions to the user. For instance, the user may be
asked about the number of agents he/she thinks to employ in the MAS, or, how
many and which kind of actions are available for such agents. These examples
serve only as illustrations, demonstrating the system’s potential to guide non-
expertusers.Byfollowingsuchaconstrainedstep-by-stepprocess,anon-expert
user can interact in a more natural way. Once information about the model
is supplied, we may continue by seeking additional details about the formula.
Thecommunicationinthisphasecanalsobehandledthroughnaturallanguage.
Questions during this step may inquire about the specific property of interest,
which might involve considering temporal information. It is worth noting that
thisstepisinspiredbywhatiscommonlydoneintheFRETframework[13](andVITAMIN: A Compositional Framework for Model Checking of MAS 9
Non-ExpertUser
ExpertUser Numberofagents? Whichactions? Existsastrategys.t....
Numberofstates? Eventually...
Globally...and
GUI
Model Formula Model Formula
GUI
Parsing Parsing
Model Formula
Internalmodel Internalformula
representation representation
Whichmodel? Whichlogic?
ModelChecker
Selection
ModelChecker
Interface
Temporal Strategic
ModelChecker ModelChecker
... Alternating-time Strategy
TemporalLogic Logic
...
Actualverificationwith
selectedmodelchecker
Verify
Outcome
Fig.6. Our methodology’s flowchart.
yficepS Specify
gniledomdediug-IA
NLP-basedspecification10 Angelo Ferrando & Vadim Malvone
similar ones), where users can describe formal properties in a constrained natu-
ral language, and it is the system’s responsibility to generate the corresponding
formal property in the chosen formalism.
At the conclusion of the guided process, akin to the expert user, the non-
expert user can proceed with the verification steps illustrated in Figure 6. This
processinitiateswithaparsingstep,whereinthemodelandformulaareparsed,
leading to the creation of an internal representation. Following the parsing step,
the verification process advances with the careful selection of an appropriate
model checker to address the verification of the provided model against the
given formula. Subsequently, the verification result is returned to the user.
4 Implementation
In this section, we focus on the instantiation of VITAMIN and what the tool
currently supports.
VITAMINisimplementedinPythonanditsGraphicalUserInterfaceisacces-
sible through a web browser (https://vitamin.streamlit.app/), which makes the
tool cross-platform. This accessibility is facilitated by utilising the Streamlit3
Python library, which supports the transparent sharing of Python programs via
HTTP protocol.
As mentioned in the paper, VITAMIN supports the interaction with both ex-
pert and non-expert users.
4.1 Non-Expert user experience in VITAMIN
Figure 7 reports a screenshot of VITAMIN’s GUI where the user is asked about
the number of agents to employ in the MAS to verify. In this specific example,
the user wants to create a MAS comprising two agents, named A0 and A1.
Afterthenumberofagentshavebeengiventothesystem,theprocessgoeson
with the number of states. As reported in Figure 8, the user inserts the number
of states he/she wishes to add in the model of the MAS under analysis. In this
specific case, the user chooses to add four states, which are then named: S0, S1,
S2, and S3.
Once both agents and states have been gathered, VITAMIN asks for the ac-
tions that the agents can perform in the states. Figure 9 reports the step where
VITAMIN asks the user for the actions to be assigned to the previously created
agents, in the previously added states. In this specific scenario, the user decides
that the agents can perform three actions, that are named: A, B, and C.
Now that the agents have actions to perform, VITAMIN requires the user to
specify which actions can be performed by which agent in which state. This
process allows a natural definition of transitions amongst states through agents’
actions.ThetransitionsarereportedbytheuserthroughVITAMIN’sGUI.InFig-
ure10,wereportonlyasubsetof A1’stransitionstoimprovereadability.Inthis
3 https://streamlit.io/VITAMIN: A Compositional Framework for Model Checking of MAS 11
Fig.7. VITAMIN asks the user for the agents to employ in the model of the MAS.
Fig.8. VITAMIN asks the user for the states of the model of the MAS.
specificscenario,agentA1canperformonlyactionAinstateS1tomovetostate
S2,andactionsBandCtomovetostateS3.Fortheremainingtransitions,both
for A0 and A1, the reader can refer to Figure 11.
Atthispoint,VITAMINhasalltheinformationitneedstorepresentthegraph
of the model created by the user. To allow the user to validate the resulting
model, VITAMIN shows the graph result to the user, as reported in Figure 11.
VITAMINsupportsthegraphicalvisualisationofthemodelandallowstheuserto12 Angelo Ferrando & Vadim Malvone
Fig.9. VITAMIN asks the user for the actions the agents can perform.
Fig.10. VITAMIN asks the user for transitions amongst states.
validateitbeforemovingtotheactualverification,byaskingtheactualformula
to verify upon the latter.
Finally, given the model produced step-by-step by guiding the user through
all the details needed to populate the model, VITAMIN can conclude the process
by asking the formula to verify on the obtained model. Figure 12 reports the
laststepoftheVITAMIN’sprocesswheretheusercanspecifytheformalproperty
to verify on the model. In this specific case, the user decides to specify an ATL
formula and, in particular, to verify whether the agents can reach state S3 by
collaborating. Such a property is verified then by VITAMIN and concluded as
satisfied on the current model of the MAS.
VITAMIN’scurrentinstantiationrequirestheformulatobespecified,however,
asimilarstep-by-stepmechanismcouldbeemployedaswell.Nonetheless,differ-VITAMIN: A Compositional Framework for Model Checking of MAS 13
Fig.11.VITAMINshowsthegraphresultingfromtheinformationgatheredinthepre-
vious steps to allow the user to validate it.
ently from the model scenario, the formula may require additional engineering
since it may largely depend on the formalism chosen by the user.
Fig.12.VITAMINaskstheuserfortheformulatoverifyonthepreviouslyconstructed
model of the MAS.14 Angelo Ferrando & Vadim Malvone
4.2 Expert user experience in VITAMIN
Inthissection,weshowhowanexpertuserinteractswithVITAMIN.Specifically,
thisisachievedbythedefinitionofthemodeloftheMASandtheformalproperty
theuserwishestoverify.Differentlyfromthenon-expertuser,VITAMINdoesnot
guide the expert user, but it expects the model and formula as input.
As discussed before, VITAMIN is born to handle different kind of models and
logics. Thanks to its design, it is not limited to any specific model (resp., logic)
since each model (resp., logic) can be seen as an independent component of the
system.However,tomakeanexample,weshowhowtodefineamodelofaMAS
as a CGS in VITAMIN. Figure 13 reports a screenshot of VITAMIN’s GUI where
the user can upload the CGS of the MAS to verify. The model has to follow
a specific format that has been chosen for the definition of CGSs in VITAMIN.
Naturally, because of its compositionality, these format choices related exclu-
sively to how VITAMIN handles CGSs and does not concern the development of
otherformalismsfortherepresentationofmodels.Thatis,if VITAMINsupported
Interpreted Systems (like MCMAS), it would be free to choose the format that
best suit such models, without be concerned on how CGSs are modelled, and
vice versa.
Afterthemodelhasbeenuploadedbytheuser,VITAMINexpectstheformula
to be verified on the latter. This step, similarly to the non-expert user scenario,
is obtained by letting the user fill a field box in the VITAMIN’s GUI. Figure 14
reports a screenshot of the GUI where the user fills the box with the formula of
interest to verify on the model.
Once both the model and formula are given, the verification process may
start and the result of the verification is returned back to the user.
5 Conclusions and Future Work
Inthispaper,weintroducedVITAMIN,acomprehensiveandversatileframework
designed for model checking of Multi-Agent Systems and beyond. Our emphasis
was on the engineering aspects and decisions made during the development of
VITAMIN.
We acknowledge that VITAMIN is an ongoing project that will necessitate
additionalrefinement,butwerecognisethatitscurrentstatealreadyrepresentsa
noteworthyadvancementintherealmoftoolsfortheformalverificationofMAS.
This is especially notable given its potential for further study and extension,
facilitated by its inherent compositionality.
It is important to note that VITAMIN is currently in a prototype stage. Cer-
tainaspectspresentedinthispaper,particularlythoseconcerningusability,such
asNaturalLanguageProcessing(NLP)supportfornon-expertusers,arestillin
development.However,everythingrelatedtoverificationandcompositionalrep-
resentation in VITAMIN has already been implemented and tested across various
scenarios, each highlighting different models and formulas for verification.VITAMIN: A Compositional Framework for Model Checking of MAS 15
Fig.13. Screenshot of VITAMIN’s GUI with an example.
Fig.14. Screenshot of VITAMIN’s GUI with an example of property to be verified.
Our future plans include the continued expansion of VITAMIN, along with
sharingitwiththeMAScommunity.Additionally,weintendtopresentitsexten-
sions in future research endeavours, exploring possible instantiations of models
and logics within the tool. While this work has primarily focused on VITAMIN’s16 Angelo Ferrando & Vadim Malvone
engineering and architecture, future research will delve into specific instantia-
tions and applications (of what we called the VITAMIN’s components).
Acknowledgements. WethankHi!Paris(www.hi-paris.fr)fortheirsupportin
the initial development of VITAMIN. We also thank all the students that collab-
orated on the project by developing some of its components. Finally, we thank
Aniello Murano for his valuable feedback and support to this project.
References
1. Alur, R., Henzinger, T.A., Kupferman, O.: Alternating-time temporal logic. J.
ACM49(5),672–713(2002).https://doi.org/10.1145/585265.585270,https://doi.
org/10.1145/585265.585270
2. Belardinelli, F., Ferrando, A., Malvone, V.: An abstraction-refinement
framework for verifying strategic properties in multi-agent sys-
tems with imperfect information. Artif. Intell. 316, 103847 (2023).
https://doi.org/10.1016/j.artint.2022.103847, https://doi.org/10.1016/j.artint.
2022.103847
3. Belardinelli,F.,Jamroga,W.,Kurpiewski,D.,Malvone,V.,Murano,A.:Strategy
logic with simple goals: Tractable reasoning about strategies. In: Kraus, S. (ed.)
ProceedingsoftheTwenty-EighthInternationalJointConferenceonArtificialIn-
telligence, IJCAI 2019, Macao, China, August 10-16, 2019. pp. 88–94. ijcai.org
(2019). https://doi.org/10.24963/IJCAI.2019/13, https://doi.org/10.24963/ijcai.
2019/13
4. Belardinelli, F., Lomuscio, A., Malvone, V., Yu, E.: Approximating perfect recall
when model checking strategic abilities: Theory and applications. J. Artif. Intell.
Res.73,897–932(2022).https://doi.org/10.1613/jair.1.12539,https://doi.org/10.
1613/jair.1.12539
5. Chellas, B.F.: Modal Logic - An Introduction. Cambridge University Press
(1980). https://doi.org/10.1017/CBO9780511621192, https://doi.org/10.1017/
CBO9780511621192
6. Clarke, E.M., Emerson, E.A.: Design and synthesis of synchronization skele-
tons using branching-time temporal logic. In: Kozen, D. (ed.) Logics of
Programs, Workshop, Yorktown Heights, New York, USA, May 1981. Lec-
ture Notes in Computer Science, vol. 131, pp. 52–71. Springer (1981).
https://doi.org/10.1007/BFB0025774, https://doi.org/10.1007/BFb0025774
7. Dennis, L.A., Fisher, M., Webster, M.P., Bordini, R.H.: Model check-
ing agent programming languages. Autom. Softw. Eng. 19(1), 5–63
(2012). https://doi.org/10.1007/S10515-011-0088-X, https://doi.org/10.1007/
s10515-011-0088-x
8. Dima,C.,Tiplea,F.L.:Model-checkingATLunderimperfectinformationandper-
fect recall semantics is undecidable. CoRR abs/1102.4225 (2011), http://arxiv.
org/abs/1102.4225
9. Fagin, R., Halpern, J.Y., Moses, Y., Vardi, M.Y.: Reasoning About Knowledge.
MIT Press (1995). https://doi.org/10.7551/MITPRESS/5803.001.0001, https://
doi.org/10.7551/mitpress/5803.001.0001
10. Ferrando, A., Malvone, V.: Towards the combination of model checking and
runtime verification on multi-agent systems. In: Dignum, F., Mathieu, P., Cor-
chado, J.M., de la Prieta, F. (eds.) Advances in Practical Applications of Agents,VITAMIN: A Compositional Framework for Model Checking of MAS 17
Multi-Agent Systems, and Complex Systems Simulation. The PAAMS Collec-
tion - 20th International Conference, PAAMS 2022, L’Aquila, Italy, July 13-15,
2022, Proceedings. Lecture Notes in Computer Science, vol. 13616, pp. 140–152.
Springer (2022). https://doi.org/10.1007/978-3-031-18192-4 12, https://doi.org/
10.1007/978-3-031-18192-4 12
11. Ferrando,A.,Malvone,V.:Towardstheverificationofstrategicpropertiesinmulti-
agentsystemswithimperfectinformation.In:Agmon,N.,An,B.,Ricci,A.,Yeoh,
W.(eds.)Proceedingsofthe2023InternationalConferenceonAutonomousAgents
andMultiagentSystems,AAMAS2023,London,UnitedKingdom,29May2023-
2June2023.pp.793–801.ACM(2023).https://doi.org/10.5555/3545946.3598713,
https://dl.acm.org/doi/10.5555/3545946.3598713
12. Ferrando, A., Malvone, V.: System and method for verifying properties of multi-
agents systems (EU Patent 243052354, Feb 2024 (under evaluation))
13. Giannakopoulou, D., Pressburger, T., Mavridou, A., Rhein, J., Schumann, J.,
Shi, N.: Formal requirements elicitation with FRET. In: Sabetzadeh, M., Vogel-
sang, A., Abualhaija, S., Borg, M., Dalpiaz, F., Daneva, M., Condori-Ferna´ndez,
N., Franch, X., Fucci, D., Gervasi, V., Groen, E.C., Guizzardi, R.S.S., Her-
rmann, A., Horkoff, J., Mich, L., Perini, A., Susi, A. (eds.) Joint Proceedings
ofREFSQ-2020Workshops,DoctoralSymposium,LiveStudiesTrack,andPoster
Track co-located with the 26th International Conference on Requirements En-
gineering: Foundation for Software Quality (REFSQ 2020), Pisa, Italy, March
24, 2020. CEUR Workshop Proceedings, vol. 2584. CEUR-WS.org (2020), https:
//ceur-ws.org/Vol-2584/PT-paper4.pdf
14. Keller, R.M.: Formal verification of parallel programs. Commun. ACM 19(7),
371–384(1976).https://doi.org/10.1145/360248.360251,https://doi.org/10.1145/
360248.360251
15. Kurpiewski, D., Jamroga, W., Knapik, M.: STV: model checking for strategies
under imperfect information. In: Elkind, E., Veloso, M., Agmon, N., Taylor, M.E.
(eds.) Proceedings of the 18th International Conference on Autonomous Agents
and MultiAgent Systems, AAMAS ’19, Montreal, QC, Canada, May 13-17, 2019.
pp. 2372–2374. International Foundation for Autonomous Agents and Multiagent
Systems (2019), http://dl.acm.org/citation.cfm?id=3332116
16. Lomuscio, A., Qu, H., Raimondi, F.: MCMAS: an open-source model checker
for the verification of multi-agent systems. Int. J. Softw. Tools Technol. Transf.
19(1), 9–30 (2017). https://doi.org/10.1007/S10009-015-0378-X, https://doi.org/
10.1007/s10009-015-0378-x
17. Mogavero,F.,Murano,A.,Perelli,G.,Vardi,M.Y.:Reasoningaboutstrategies:On
themodel-checkingproblem.ACMTrans.Comput.Log.15(4),34:1–34:47(2014).
https://doi.org/10.1145/2631917, https://doi.org/10.1145/2631917
18. Nguyen,C.D.,Perini,A.,Bernon,C.,Pavo´n,J.,Thangarajah,J.:Testinginmulti-
agent systems. In: Gleizes, M., Go´mez-Sanz, J.J. (eds.) Agent-Oriented Software
Engineering X - 10th International Workshop, AOSE 2009, Budapest, Hungary,
May 11-12, 2009, Revised Selected Papers. Lecture Notes in Computer Science,
vol.6038,pp.180–190.Springer(2009).https://doi.org/10.1007/978-3-642-19208-
1 13, https://doi.org/10.1007/978-3-642-19208-1 13
19. Pnueli, A.: The temporal logic of programs. In: 18th Annual Symposium
on Foundations of Computer Science, Providence, Rhode Island, USA, 31
October - 1 November 1977. pp. 46–57. IEEE Computer Society (1977).
https://doi.org/10.1109/SFCS.1977.32, https://doi.org/10.1109/SFCS.1977.3218 Angelo Ferrando & Vadim Malvone
20. Reif, J.H.: The complexity of two-player games of incomplete information.
J. Comput. Syst. Sci. 29(2), 274–301 (1984). https://doi.org/10.1016/0022-
0000(84)90034-5, https://doi.org/10.1016/0022-0000(84)90034-5
21. Winikoff, M.: Debugging agent programs with why?: Questions. In: Larson, K.,
Winikoff, M., Das, S., Durfee, E.H. (eds.) Proceedings of the 16th Conference on
Autonomous Agents and MultiAgent Systems, AAMAS 2017, Sa˜o Paulo, Brazil,
May 8-12, 2017. pp. 251–259. ACM (2017), http://dl.acm.org/citation.cfm?id=
3091166