An Agent-Centric Perspective on Norm
Enforcement and Sanctions
Elena Yan1[0009−0000−6660−9378], Luis G. Nardin1[0000−0002−4506−2745], Jomi F.
Hu¨bner2[0000−0001−9355−822X], and Olivier Boissier1[0000−0002−2956−0533]
1 Mines Saint-Etienne, Univ Clermont Auvergne, INP Clermont Auvergne, CNRS,
UMR 6158 LIMOS, F-42023 Saint-Etienne France
elena.yan@emse.fr,luisgustavo.nardin@emse.fr, olivier.boissier@emse.fr
2 Department of Automation and Systems Engineering, Federal University of Santa
Catarina, Florian´opolis, Brazil jomi.hubner@ufsc.br
Abstract. In increasingly autonomous and highly distributed multi-
agent systems, centralized coordination becomes impractical and raises
the need for governance and enforcement mechanisms from an agent-
centric perspective. In our conceptual view, sanctioning norm enforce-
ment is part of this agent-centric approach and they aim at promoting
normcompliancewhilepreservingagents’autonomy.Thefewworksdeal-
ing with sanctioning norm enforcement and sanctions from the agent-
centric perspective present limitations regarding the representation of
sanctionsandthecomprehensivenessoftheirnormenforcementprocess.
To address these drawbacks, we propose the NPL(s), an extension of
the NPL normative programming language enriched with the represen-
tationofnormsandsanctionsasfirst-classabstractions.Wealsopropose
aBDInormativeagentarchitectureembeddinganengineforprocessing
theNPL(s)languageandasetofcapabilitiesforapproachingmorecom-
prehensively the sanctioning norm enforcement process. We apply our
contributions in a case study for improving the robustness of agents’
decision-making in a production automation system.
Keywords: Sanctions·NormativeProgrammingLanguage·Normative
Agent Architecture · Norm Enforcement.
1 Introduction
Theconceptsusedforconceivingamulti-agentsystem(MAS)areofteninspired
byhumansocieties,e.g.,abstractionsofagent,environment,interaction,andor-
ganization [3]. Agents are autonomous entities that make independent decisions
and act to achieve their goals [30]. In Normative MAS (NMAS), the agents’ ac-
tions are regulated by norms. A set of norms comprises an explicit and formal
specification of the behaviors that agents ought to comply with for the system
to achieve its overall objectives. Agent’s autonomy, however, allows agents to
behave nonconforming to the prescribed norms [7], which may lead the system
into undesirable states.
4202
raM
22
]AM.sc[
1v82151.3042:viXra2 E. Yan et al.
Enforcement mechanisms are introduced to nudge agents to act conform-
ing to the norms aiming to steer the system towards its overall objectives [13].
The institutional, or organization-centric, norm enforcement approach relies on
a central authority to control and enforce the norms. This approach has two
drawbacks.First,thisapproachbecomesimpracticalinhighlydistributedlarge-
scale systems. Second, it usually employs regimented enforcement mechanisms
that prevent agents from violating the norms, limiting the agents’ autonomy. A
solutiontoovercomethesedrawbacksandbalanceagents’autonomyandsystem
regulation is to employ a social, or agent-centric, norm enforcement approach,
in which agents supervise and regulate the behavior of others.
In our conceptual view, sanctioning is part of this agent-centric norm en-
forcementapproach.Sanctioningisacommonenforcementmechanismthatuses
sanctions to encourage agents to comply with norms. Sanctions are reactions to
a behavior, yet not all reactions can count as sanctions [12].
The NMAS community has focused on incorporating normative capabilities
into agent architectures [23]. In these architectures, agents should represent the
norms and be able to (i) recognize new norms, (ii) recognize actions affected by
thenorms,(iii)reasonaboutthenorms,and(iv)decidewhetherornottocomply
with them. Assuming that a sanctioning enforcement mechanism is adopted,
agentsshouldalsorepresentsanctionsandbeableto(i)identifynormcompliance
and violation, (ii) decide for the most appropriate sanctions depending on the
situation, and (iii) apply the decided sanctions.
Despite the representation of norms and agents’ capabilities for handling
them have been well investigated in the context of NMAS, few works have pro-
posed a comprehensive perspective on sanctioning norm enforcement from an
agent-centric perspective. To reduce this disparity, we advance in norm enforce-
ment by (i) enriching a normative programming language with the ability to
represent norms and sanctions as first-class abstractions, and (ii) embedding
sanctioning norm enforcement capabilities into a BDI agent architecture to en-
able agents to deliberate on their normative state when deciding to act.
Thereminderofthepaperisorganizedasfollows.InSection2,weintroduce
the concepts of norms and sanctions, and discuss normative agent architectures
and normative programming languages from the perspective of their support
to norm enforcement. We then extend a normative programming language by
adding sanction as a first-class abstraction (Section 3) and extend a BDI agent
architecturewithsanctioningcapabilities(Section4).Next,weillustratetheuse
ofourcontributionsinanindustrialcasestudy(Section5).Finally,weconclude
with some discussions and potential future research directions (Section 6).
2 Related Work
Norm is an important concept in human societies that has been investigated
in a wide range of disciplines. Norms prescribe how members of a group ought
to behave in a given situation [29]. They are expected standards of behavior
sociallysharedandenforcedbygroupmembers[13].InMAS,normsaretypicallyAn Agent-Centric Perspective on Norm Enforcement and Sanctions 3
represented as obligations, permissions, or prohibitions; they are used to enable
a degree of control over the autonomous agents’ actions.
The agents’ decision-making processes depend and intervene through their
decisions,onthestateofthenorms(e.g.,recognized,adopted,orcomplied).The
transitions between these norm states define what we call the norm’s life cycle.
2.1 Norm’s life cycle
Global overview. Therearevariousproposalsregardingthelifecycleofnorms
in the literature. They often share a similar structure and process but differ in
specific details. Hollander and Wu [13] present the norm life cycle as an overall
end-to-endevolutionaryprocess.Thenorm’slifecyclebeginswiththecreationof
norms by system designers at design time or by autonomous normative agents
at runtime (creation phase). In the latter, norms emerge as a consequence of
the agents’ interactions. Once the norms exist, they are spread in the society
from one agent to another through active or passive transmission (transmission
phase).Next,enforcementmechanisms(e.g.,sanctioning)ornormcompliersare
used to encourage agents to adopt new norms and to comply with the adopted
ones (enforcement phase). The norms adoption leads to their use in the agents’
decision-making (internalization phase). As conditions change, norms may be-
come invalid or lose their effectiveness, which cause them to be forgotten (for-
gotten phase).
Next, we describe the enforcement phase in more detail since this paper
focuses on norm enforcement.
Norm Enforcement. Therearethreetraditionalapproachestonormenforce-
ment: (i) the institutional approach, in which there is a single authority that
enforces agents’ behaviors; (ii) the social approach, in which a subset of agents
are equipped with enforcement mechanisms (e.g., police agents) used to enforce
other agents’ behaviors; and (iii) the self-enforcement approach, in which agents
enforce the norms on themselves.
Cross-cutting these three approaches, the norm enforcement can be regi-
mented or regulated. In the regimented norm enforcement, agents are prevented
from violating the norms, possibly limiting agents’ autonomy. In the regulated
norm enforcement, agents can act in violation to the norms, but mechanisms,
such as sanctioning, can be used to inflict consequences to their misbehavior in
order to encourage their future compliance with the norms.
Intheregulatednormenforcement,sanctionscanbeusedasameanstosteer
agentcompliancetothenorms.Sanctionisanegativeorapositivereactiontoa
violation of or a compliance with a norm. A comprehensive set of dimensions to
classify sanctions and an accompanying sanctioning norm enforcement process
model has been proposed in [26]. The proposed typology of sanctions enables
identifying the types of sanctions that are more or less effective in reducing vi-
olation or increasing compliance. The sanctioning process model combines the
institutional, the social, and the self-enforcement approaches offering opportu-
nities for agents to reason about and decide for the most appropriate sanctions4 E. Yan et al.
to apply in each situation. This model has two normative resources: the De
Jure that stores the representation of norms and sanctions and the De Facto
that stores the historical information about sanction decisions, executions, and
outcomes. The model is enacted by five capabilities: (i) the Detector perceives
the environment and detects any action regulated by the norms in the De Jure;
(ii) the Evaluator obtains the norms and sanctions regulating the detected ac-
tionfromtheDe Jure todeterminewhethertheactionviolatesorcomplieswith
the norms. The Evaluator also combines this information with the historical in-
formation from the De Facto to decide the sanctions that should be applied, if
any; (iii) the Executor applies the sanctions decided by the Evaluator; (iv) the
Controller watches the regulated actions previously sanctioned to assess the ef-
ficacyofthesanctions;(v)theLegislator assessestheDe Jure inthelightofthe
De Facto information and updates the norms and sanctions in the De Jure.
Next, we review normative agent architectures (Section 2.2) and normative
programming languages (Section 2.3) from the perspective of their support to
norm enforcement.
2.2 Normative Agent Architectures
Focusing on the BDI (Belief-Desire-Intention) agent model, the literature pro-
poses normative architectures using various approaches to enforce norms.
Mostarchitecturesregimentnormsbypreventingagentsfromperformingac-
tions that violate them. The BOID (Beliefs-Obligations-Intentions-Desires) [6]
architecture adds the concept of obligations as a mental state that may conflict
withtheagent’sintentionsordesires.BOIDagentsuseapredefinedstaticprior-
ity function to resolve conflicts among these concepts. The priority ordering al-
lows classifying agents in different categories, e.g., selfish (i.e., prioritize desires)
or socially responsible (i.e., prioritize obligations). Although BOID does not
explicitly implement a norm enforcement mechanism, social responsible agents
regiment norms since they always choose actions that fulfill their obligations.
Other architectures, like NoA [18] and NBDI [28], regiment norms by filter-
ing out actions or desires that violate norms. In the NoA architecture, agents
use filtering functions to simply exclude actions that violate adopted norms. In
theNBDIarchitecture,agentsupdatetheirbeliefs,desires,intentionsandsetof
adopted norms independently. When selecting desires, NBDI agents only select
thosethatarecompliantwiththeadoptednorms.Usingyetadifferentapproach,
the Normative AgentSpeak(L) [24] architecture enables agents to change their
plans at runtime to conform to new norms. The approach consists in modifying
the agent’s plans library, i.e., create new plans when new obligation norms are
adopted and suppress plans containing actions forbidden by prohibition norms.
TheN-Jason[21]extendstheNormativeAgentSpeak(L)capabilitiesbyschedul-
ing intentions considering deadline and priority for runtime norm compliance.
A NoA extension [19] and the Nu-BDI [25] architectures relax the regimen-
tation constraint allowing the agents to violate the norm, but diminishing the
negativeimpactthattheviolationmayhave.IntheextendedNoAarchitecture,
agents have deliberation mechanisms to annotate actions that violate norms;An Agent-Centric Perspective on Norm Enforcement and Sanctions 5
these annotations can be later used by the agents to decide whether or not to
perform actions leading to the violation of norms. In the Nu-BDI architecture,
agents annotate each step of the plans within the scope of a norm with con-
straints stemming from that norm, and rank the plans using a utility function
based on these annotations. When selecting plans, Nu-BDI agents choose the
plan that violates the norms less (i.e., highest ranked plan).
L´opez y L´opez et al. [22] implicitly incorporate regulated norm enforcement
mechanismsintotheiragentframework.Theydefinetwolevelsofnorms,inwhich
the secondary norms are activated as a result of the fulfillment or violation of
the primary norms. So, the secondary norms can be seen as sanctions inflicted
on agents fulfilling or violating norms.
Few normative agent architectures deal explicitly with regulated norm en-
forcement. EMIL-A (EMergence in the Loop Architecture) [2] is a normative
BDI agent architecture developed for norm emergence, innovation, and spread.
EMIL-A is endowed with modules that allow (i) norm recognition (i.e., recog-
nition and representation of norms as mental states), (ii) norm adoption (i.e.,
detection and dynamic updating of the norms salience that corresponds to the
perceived prominence of a norm within a relevant reference group), (iii) norm
compliance(i.e.,decisiontocomplywiththeadoptednorms),and(iv)normen-
forcement (i.e., detection of norm compliance and violation, and the application
of sanctions). The n-BDI architecture [8] also incorporates a norm enforcement
mechanism that always rewards or punishes the agents as a consequence to, re-
spectively, the compliance with or violation of a norm. AORTA [16] proposes a
normative agent module that provides normative reasoning capabilities to the
agents. These agents are able to reason about norms, automatically detect vio-
lations as soon as they become aware of the violation state, and produce a new
belief about the violation that may trigger another norm or plan.
In addition to those BDI-based normative agent architectures, Fagundes et
al. [10] extend the Markov Decision Process (MDP) framework for creating self-
interested agents able to reason about norms. The framework uses an enforce-
ment mechanism based on the imperfect observation of the system state and
agents, and inflicts a cost on agents if a violation is detected [11]. Agents make
decisions based on the expected utility of conforming with or violating a norm,
whichtakesintoaccountthecostofviolatingthenormandtheprobabilitythat
the norm violation will be detected.
2.3 Normative Programming Languages
Normative programming languages provide abstractions that enable agents to
deliberateabouttheiractionsboundedbythenormativeregulations.Theselan-
guagescomplementthenormativeagentarchitecturesastheyprovideanexplicit
representationofandenablethehandlingofnormativeconcepts(e.g.,obligation,
permission, prohibition, sanction). There has been extensive work on normative
programminglanguageswithanorganization-centricperspective[9,15];however,
there has been limited interest in languages with an agent-centric perspective.6 E. Yan et al.
One of the first normative programming languages with an agent-centric
perspective is the NoA language [17]. The language, whose semantics are im-
plemented by the NoA architecture, contains constructs for the specification of
beliefs, goals, plans and norms. Norm specifications can regulate states (i.e., the
achievement of a particular state of the world) or actions (i.e., the performance
ofexplicitactions).Inthislanguage,normativestatementsareexpressedasobli-
gations,permissions,prohibitions,andsanctions.Althoughsanctionexistsasan
independentconstruct,itisasyntacticsugarthatsetsanobligationforanagent
to pursue certain activities that represent such sanctions.
TheNormativeProgrammingLanguage(NPL)[14],albeitusedmainlywithin
the organization-centric perspective [15], is a general language dedicated to the
development of normative programs based on two primitive constructs: obli-
gation and regimentation. Other constructs like prohibition, permission, and
sanction are represented using these primitive constructs. Prohibitions are ac-
complished by regimentation or by delegating to someone an obligation to deal
with the situation. Permissions are defined by omission, i.e., NPL adopts the
open-world assumption. Likewise the NoA language, the NPL also represents
sanctions as obligations.
TheN-2APL[1]isanextensiontotheagentprogramminglanguage2APL[9].
The N-2APL provides support for representing beliefs, goals, plans, norms (i.e.,
obligations or prohibitions), sanctions, deadlines, and durations. A sanction is
a consequence to the violation of an obligation or prohibition, i.e., specify the
updates to be applied on the environment due to the violation of a norm. In
N-2APL,sanctionispartofthenormspecification,thustightlyassociatedtoit.
2.4 Remarks
In our conceptual view, sanctions are part of social mechanisms (i.e., agent-
centric perspective) for norm enforcement as they are consequences of norms
violation or compliance. Although sanctioning mechanisms are built on top of
norms and their state, sanctions are not simply triggered depending on norms
state, but also depending on the context in which the compliance or violation
take place. Tackling these requirements call for a normative programming lan-
guage that disentangles sanctions representation from, yet letting it associated
to,norms,andanormativeagentarchitecturethattriggerssanctionsfromanor-
mative state contingent upon the agent’s contextual situation in order to fulfill
the agent-centric perspective.
In the next sections, we propose an extension to the NPL [14] normative
languageandtotheJaCaMoagent[4]totackletheserequirements.Wechoseto
extendNPLbecause,tothebestofourknowledge,itistheonlygeneralpurpose
normativeprogramminglanguageavailable,andtheJaCaMoagentbecauseNPL
has already been integrated into it in an organization-centric perspective [15].An Agent-Centric Perspective on Norm Enforcement and Sanctions 7
3 NPL(s): Extending NPL with Sanctions
HereweextendtheNPL[14]languagetointroducetheconceptofsanctionsasa
first-classabstraction.Ourapproachconsistsofhavinganenrichedandseparated
descriptioninformallanguageofsanctionsandtheconditionsthatallowthemto
betriggered.Thislanguageisinterpretedatrun-timebasedonthecurrentstate
of the normative system. In addition, the NPL interpreter should be extended
to compute new sanctions. The new language, named NPL(s), is thus presented
in the sequel by its syntax and (informal) semantics.
A normative program np in NPL(s) is composed of a set of: (i) facts and
inference rules (based on a syntax similar to the one used in Jason [4]), (ii)
norms,(iii)sanctionrules.WhilethetwofirstcomponentscomefromNPL,the
lastoneistheextensionintroducedbyNPL(s).WebrieflyintroduceNPLnorms
in this paper, but the formal semantics and more details are available at [14].
An NPL norm has the general form:
norm id : φ -> ψ .
where id is a unique identifier of the norm; φ is a formula that determines the
activation condition for the norm; and ψ is the consequence of the activation of
thenorm.Amongthepossibleconsequences,herewefocusonobligations(other
possible consequences are permissions, prohibitions and failures).
ψ =obligation(a,m,g,d):representsthecasewhereanobligationforsome
agent a is created. Argument m is the maintenance condition for the obli-
gation; g is the formula that represents the obligation itself (a state of the
world that the agent must try to bring about, i.e., a goal it has to achieve);
and d is the deadline condition to fulfill the obligation.
The informal semantics defines that whenever φ is true, an obligation for a
is created and its initial state is active. If m becomes false, the obligation
state changes to inactive. If g becomes true before d is true, the obligation
state changes to fulfilled. If d becomes true before g is true, the obligation
state changes to unfulfilled. The final state of an obligation may thus be
unfulfilled, fulfilled, or inactive.
InNPL(s),anormcanbefollowedbysanctionrulestobeevaluatedaccording
to the final state of an obligation (see tsr in Table 1):
norm id : φ -> ψ
if fulfilled: sr (args),sr (args),...,sr .
1 2 n
A sanction rule has the following general form (see srule in Table 1):
sanction-rule sr (args) : ρ -> sanction(a, s) .
i
where sr is a unique identifier of the sanction rule; args are terms passed as
i
parameters (optional); ρ is a formula that determines the activation condition
forthesanction(optional,assumedtrueifnotspecified);aisthetargetagentof8 E. Yan et al.
np ::= “np” atom “{” ( rule | norm | srule )* “}”
rule ::= atom [ “:-” formula ] “.”
norm ::= “norm” id “:” formula “->” ( fail | obl | per | pro ) (tsr)* “.”
fail ::= “fail(” atom “)”
obl ::= “obligation” dargs
per ::= “permission” dargs
pro ::= “prohibition” dargs
dargs ::= “(” (var | id) “,” formula “,” formula “,” (time | formula) “)”
tsr ::= “if” (“fulfilled” | “unfulfilled” | “inactive”) “:” ( atom )*
srule ::= “sanction-rule” atom “:” formula “->” “sanction(” (var | id) “,” atom “)”
formula ::= atom | “not” formula | atom ( “&” | “|”) formula
time ::= “‘” number ( “second” | “minute” | ...) “‘”
Table 1. EBNF of the Normative Programming Language for Sanctions — NPL(s).
Non-terminalsatom,id,var,andnumber correspond,respectively,topredicates,iden-
tifiers, variables, and numbers as used in Prolog.
thesanction;andsisthesanctioncontent.Sanctionrulescanbereadas“Inthe
case that a norm has triggered the sanction rule sr because it is (un)fulfilled
i
or inactive, if ρ is true, then the sanction s is created for agent a.” A simple
example to illustrate the language is given below. Two norms are defined, each
associated with a sanction-rule. Norm n1 specifies that alice is obligated to
achieve b(0) within 3 seconds. Unfulfillment to do so activates sanction-rule
sr1, resulting in the imposition of a fine to alice. If the sanction is created
and the condition extra(C) is met, norm n2 is activated. This delegates bob to
apply the fine to alice in 2 seconds. In the event of non-compliance, a sanction
is issued to remove bob from the system.
// * NORMS *
// alice has 3 seconds to achieve b(0), or else evaluate sr1
norm n1: vl(X) & X > 5
-> obligation(alice,true, b(0), ‘3 seconds‘)
if unfulfilled: sr1(alice,X) .
// bob is obliged to apply fines in 2 seconds
norm n2: sanction(A,fine(X)) & extra(C)
-> obligation(bob,true, apply_fine(A,X*C), ‘2 seconds‘)
if unfulfilled: sr2 .
// * SANCTION RULES *
// if A is not in an emergency, create fine sanction for it
sanction-rule sr1(A,V) : not emergency(A) -> sanction(A,fine(V)) .
sanction-rule sr2 -> sanction(bob,remove_from_systems) .An Agent-Centric Perspective on Norm Enforcement and Sanctions 9
Based on this NPL(s) example, we can have the following example story line:
1. A fact v(20) is produced and norm n1 is triggered.
2. alice is thus obliged to achieve b(0) in 3 seconds.
3. After3seconds,alicedoesnotfulfilltheobligation,triggeringthesanction
rule sr1(alice,20).
4. Since alice has no fact like emergency(alice), the sanction rule sr1 pro-
duces the sanction(alice,fine(20)) fact.
5. This new sanction fact together with the fact extra(10) triggers the norm
n2 that obliges agent bob to apply fine(alice,200) in 2 seconds.
6. Supposing that bob fulfills its obligation, the story ends here.
7. However, if bob does not fulfill the obligation, the sanction rule sr2 is trig-
geredandthesanction(bob,remove from systems)factisproduced.Here,
weassumetheenvironmentiscapableofhandlingandapplyingthesanction.
Fromthisstory,wecannoticethattheNPL(s)interpreterislimitedtocompute
sanction facts. The impact of these sanctions on the running system depends
on something else that reads the sanction fact and implements it. This could be
integrated in an agent-, environment-, or organization-centric perspective. For
instance, it could be an agent that reads the sanction fact and decides to run a
procedure to implement it. However, it could be the case that the environment
is capable of reading sanction facts and implementing them, as it is the case
of automatic fines created when we cross red traffic lights. Finally, the NPL(s)
interpreter itself can read sanction facts, as in the example of the activation of
norm n2. In this paper we focus on the agent-centric perspective.
4 Normative Agent Architecture
Here we describe an extension of the JaCaMo BDI agent architecture to handle
normative states as illustrated in Fig. 13.
This normative architecture integrates an NPL(s) Engine enabling agents
to interpret and compute the current state of norms and sanctions specified
in the NPL(s) language (Section 2.3). Additionally, the normative architecture
draws inspiration from the sanctioning norm enforcement process model pro-
posed in [26] (Section 2.1) to define the specialized resources and enforcement
capabilitiesneededtoimplementanormativeagent.Althoughthesecapabilities
arepresentinthearchitecture,theyareimplementedasplansthataretriggered
bynormativefacts.Thischaracteristicgivesmodularityandflexibilitytoagents
implementingthisarchitectureas(i)notallcapabilitieshavetobeimplemented
in each agent and (ii) different agents can implement these capabilities differ-
ently, i.e., agents can deal differently with norms and sanctions. An exception is
the Detector capability, which, in practice, is performed by the NPL(s) Engine.
3 The source code of the normative agent architecture is available at https://github.
com/moise-lang/npl/blob/master/src/main/java/npl/NormativeAg.java
4 Notethatthisarchitecturedepictsonlynormenforcementcapabilities.Otherswere
omitted due to our interest in norm enforcement in this paper.10 E. Yan et al.
Fig.1. Normative BDI agent architecture extended to handle normative states.4
The De Jure is a normative program, i.e., norms, sanction rules, and sanc-
tions, specified in NPL(s) language. The specification is read once and used by
the NPL Engine to together with the belief base information of the agent deter-
mine the current state of norms and sanctions, as well as add normative facts
in the belief base. Once added into the belief base, these normative facts may
trigger specific capabilities (i.e., plans). For instance, once a norm is activated,
anobligationisaddedtothebeliefbasecausingtheexecutionofaplan;oronce
norm is unfulfilled, a sanction rule is triggered producing sanction facts in the
agent’s belief base. Contrary to the De Jure, the De Facto is part of the belief
base of the agent that contains particular types of beliefs, i.e., beliefs related to
the decision and application of sanctions and their efficacy.
5 Case Study: Laboratory Plant MyJoghurt
Here we present a case study illustrating the practical potential of the extended
normative programming language NPL(s) integrated into the proposed norma-
tive agent architecture. The use case is focused on improving the robustness of
agents’ decision-making in a production automation system. We took as refer-
encetheindustrialusecaseofthelaboratoryplantmyJoghurt introducedin[20].
The myJoghurt is composed of filling stations responsible for filling recipe-
specific liquids (e.g., yogurt, milk) into bottles that are transported by the lo-
gistics system. Orders are received and the filling tasks are distributed among
the process plant. The orders and filling process are controlled by a multi-agent
system (illustrated in Fig. 2), whose agents control the process plant into filling
the correct amount of liquid in the bottles according to the order received.An Agent-Centric Perspective on Norm Enforcement and Sanctions 11
Fig.2. myJoghurt multi-agent architecture (based on [20]).
The myJoghurt control system is composed of five types of components: bottle,
plant, unit, container, and valve. They are controlled by four types of agents
thatinteractwitheachotherandtwotypesofartifacts.Thebottleagent receives
and sends filling orders from customers with the type and the amount of liquid
to the plant agent. The plant agent manages the process at the cell level and
negotiates with the unit agent when orders are received. The plant agent then
selects and assigns the order to unit agents based on their availability. The
unit agent, which controls the filling station, interacts with the filling station’s
container and valve artifacts for the filling process. The container, represented
as an artifact, manages the level of liquids in the container. The valve agent
estimatestheflowrateconsideringthetypeofliquid(e.g.,aliquidwithahigher
viscosity leads to a faster flow) and whether the valve is clogged (e.g., residues
ofliquidcouldclogthevalveovertime).Basedontheestimatedvalue,thevalve
agent controls the opening window of the valve through the valve artifact.
Enforcement mechanisms and sanctions are used to steer the decisions of
agents to improve the accuracy of the flow rate estimation in various types of
liquid and in the presence of non-deterministic situations. The norms defined in
this use case refer to ensuring the correct fulfillment of order requests of each
bottle (i.e., bottles filled with the correct liquid and volume within a specified
tolerance range). The system considers the deviation and learning factors to de-
termine whether and which sanctions to apply. The deviation factor comprises
polarity, determined by whether an action is complied with (positive polarity)
or violated (negative polarity), and magnitude that measures the degree of de-
viation from the expected fill level. The learning factor considers the historical
behavior of the valve agents, represented by the image of the agent (i.e., assess-
mentbasedondirectexperiencewiththeagent[27]),thefrequencyofviolations,
and the efficacy of sanctions applied.
Table 2 illustrates the sanctions defined for the case study. The activation
conditions of sanctions are evaluated based on the compliance or violation of
the norm, and sanctions are applied accordingly. All sanctions have a negative
polarity [26], intended to punish the valve or the unit agent for their misbe-12 E. Yan et al.
havior. S1 aims to guide the valve agent by adjusting its estimated flow rate,
while all other sanctions aim to reduce (e.g., S3) or prevent future misbehavior
temporarily (e.g., S2 and S5) or permanently (e.g., S4).
IdSanctionerTargetSanction Pre-condition
S1unit valve AdjusttheestimatedflowrateTheimageisbelowathreshold
S2unit valve Activate the self-cleaning pro-The violation occurs three
cedure consecutive times
S3plant unit Adjust the unit agent’s image Theimageisbelowathreshold
S4plant unit Disregard the unit agent asThe violation occurs five con-
an option for subsequent fill-secutive times
ing orders
S5plant unit Require manual interventionThe violation occurs five con-
to repair the filling station secutive times
Table2.Sanctionsdefinedforthecasestudy.Thesanctioneragentappliesthesanction
to the target agent if the activation pre-condition holds.
WeusedJaCaMo[3]withtheextendedNPL(s)normativelanguagetoimplement
the case study5.
5.1 Representation of Norms and Sanctions
Here,wepresenthownormsandsanctionsarerepresentedintheDeJurerepos-
itory using the NPL(s) normative language (see Section 3). The listing below il-
lustratestheUnit De Jure repositorywiththerepresentationoftheunit agent’s
norms, sanction rules, and sanctions6.
norm n1: fill_bottle(LQ, X, MN, MX) & .my_name(U)
-> obligation(U, n1, fill(LQ,X,MN,MX), level(X,L) & (L<MN | L>MX)).
norm n2: level(V,X,L) & .my_name(U)
-> obligation(U, n2, update_factors(V,X,L),
deviation_factor(V,X,"negative",_) & learning_factor(V,X,I,_,_,_) &
threshold(T,_) & I<T)
if unfulfilled: s1(V,X), s2(V,X).
sanction-rule s1(V,X): learning_factor(V,X,_,_,_,C) & threshold(_,T) & C<T
-> sanction(V, adjust_flow_rate(X)).
sanction-rule s2(V,X): learning_factor(V,X,_,_,_,C) & threshold(_,T) & C>=T
-> sanction(V, self_cleaning(X)).
The working principle of the multi agent-centric sanctioning mechanism in-
cluding the NPL(s) engine operates as follows. The NPL(s) activates the norm
n1 whenever the unit agent receives a filling request fill bottle(LQ, X, MN,
5 The source code available at https://github.com/yan-elena/myjoghurt-case-study
6 The plant agent’s norms, sanction rules, and sanctions are available at https://
github.com/yan-elena/myjoghurt-case-study/blob/main/src/npl/plant de jure.nplAn Agent-Centric Perspective on Norm Enforcement and Sanctions 13
MX) from the plant agent. This norm produces an obligation fill(LQ, X, MN,
MX) for the unit agent to fill the current bottle X with the liquid type LQ within
the filling level range MN-MX. Once the bottle is filled, the norm n2 is activated
and produces an obligation for the unit agent updating the deviation and learn-
ing factors based on the bottle filled. If the polarity is negative and the image
drops below a threshold, the norm becomes unfulfilled and one of two sanc-
tion facts is produced, i.e., s1 and s2. If the number of consecutive violations
(C) of the valve agent (V) is less than a threshold T, then the sanction fact s1
is produced ordering the valve agent (V) to adjust its flow rate; otherwise, the
sanction fact s2 is produced ordering the valve agent (V) to activate the self
cleaning procedure in the valve artifact.
Nexttheimplementationofthissanctioningenforcementmechanismisshown
in the context of the myJoghurt MAS architecture.
5.2 myJoghurt MAS architecture
Fig.3.OverviewofintegrationofenforcementmechanismsintotheMASArchitecture.
ThenormativeagentarchitectureequippedwiththeNPL(s)engineproposed
inSection4isusedtodesignagentsinthemyJoghurt MASarchitecture(Fig.3).
The plant agent and unit agents set the norms and sanctions in their De Jure
repository and they are endowed with the enforcement. Because the applied
agent architecture is modular, we can adapt each agent to specific requirements
of the myJoghurt architecture. So, the plant agent and the unit agents imple-
mentthecapabilitiesofDetector,Evaluator,andExecutor,whilethevalveagent
implements only the capability of Executor.14 E. Yan et al.
TheDetectorcapabilityoftheunitagent andplantagent perceivesthefilling
level information of each completed bottle and detects any violation or compli-
ance with the norms.
Once a violation is detected, both the plant agent and unit agents calculate
andupdatethefactorstodeterminewhetherandwhichsanctionstoapplyusing
their Evaluator capability. The Evaluator considers the norms in the De Jure
andthehistoricalinformationintheDeFactotomakethesedecisions.Basedon
the sanctions identified in Table 2, the unit agent may apply sanctions S1 and
S2 to the valve agent responsible for the violation. S2 and S3 are applied by the
plant agent to itself in order to indirectly update the unit agents’ image or even
remove it from the considerations of future orders. S5 is not represented in the
diagram since it is a sanction to be sent to an external actor in the system (e.g.,
a human operator) responsible for repairing the filling station.
TheExecutorcapabilitiesofplant agent,unit agents,andvalve agent handle
the actual enforcement of the sanctions. We assume Executors are obedient and
they enforce the sanctions chosen by the Evaluator. However, there may be
casesinwhichtheExecutormaydecidewhetherornottoenforcethesanctions.
The actual sanction enforcement is specified in the agent code as a plan. The
following listing shows the unit agent internal plan for reacting to the sanction
fact of sanction S1 linked to adjusting the valve agent flow rate estimation.
+sanction(V, adjust_flow_rate(X))
<- //...
.send(V, signal, update_estimation(M)).
Forthesakeofsimplicityinthispaper,wehavenotconsideredtheController
and Legislator capabilities.
6 Conclusion and Future Work
In this paper, we have presented an agent-centric perspective on norm enforce-
ment and sanctions by proposing a twofold contribution. We have extended the
normativeprogramminglanguageNPLtoNPL(s)withanexplicitrepresentation
of sanctions as first-class abstraction in the definition of a normative program.
Thanks to it, normative programs gain flexibility and expressivity enabling the
association of sanctions with different norms on one hand, and, on the second
hand, open the possibility for agents to locally decide on sanctions and how to
enforce them.
Basedonthisenrichednormativeprogramminglanguage,weproposedanor-
mative agent architecture able to reason explicitly on norms and sanctions. The
useofthesenewfeatureshasbeenillustratedinamulti-agentbasedcontrolpro-
ductionsysteminthecontextoftheindustrialcasestudyofthelaboratoryplant
myJoghurt. We have shown how this normative agent-centric architecture opens
a comprehensive, modular, and flexible perspective on norm enforcement and
sanctions in a multi-agent system. Future work is to experiment the case study
intherealsettingofthemyJoghurt planttoassesstheenforcementapproachandAn Agent-Centric Perspective on Norm Enforcement and Sanctions 15
to evaluate the agent’s performance. From a theoretical point of view, our pro-
posalopensthepathtoexploretransparencyandexplainabilityofthenormative
functioning of multi-agent systems taking profit of this agent-centric reasoning
on norms and sanctions extending the approach proposed in [31]. Future exten-
sionistoconsiderthedistinctionsbetweendifferenttypesofobligations(i.e.,an
obligation as an action to be performed and/or to achieve a certain state) and
how agents adapt their sanctioning strategy effectively, especially in complex
social scenarios. Another extension concerns the connection of our sanctioning
mechanisms with the approach developed in Situated Artificial Institution by
connecting the sanctioning process directly to the environment [5].
Acknowledgment
Partially funded by ANR-FAPESP NAIMAN project (ANR-22-CE23-0018-01),
GFA through RAMP-UP II project, and CAPES, The Brazilian Agency for
Higher Education, under the project PrInt CAPES-UFSC “Automation 4.0”.
References
1. Alechina,N.,Dastani,M.,Logan,B.:Programmingnorm-awareagents.In:Conitzer,V.,
Winikoff,M.,Padgham,L.,vanderHoek,W.(eds.)Proceedingsofthe11thInternational
Conference on Autonomous Agents and Multiagent Systems (AAMAS 2012). vol. 2, pp.
1057–1064.IFAAMAS,Valencia(2012)
2. Andrighetto,G.,Conte,R.,Turrini,P.,Paolucci,M.:Emergenceintheloop:Simulating
the two way dynamics of norm innovation. In: Dagstuhl Seminar Proceedings. Schloss
Dagstuhl-Leibniz-Zentrumfu¨rInformatik(2007)
3. Boissier, O., Bordini, R.H., Hubner, J., Ricci, A.: Multi-agent oriented programming:
programmingmulti-agentsystemsusingJaCaMo.MitPress(2020)
4. Bordini, R.H., Hu¨bner, J.F., Wooldrige, M.: Programming Multi-Agent Systems in
AgentSpeakusingJason.JohnWiley&Sons(2007)
5. deBrito,M.,Hu¨bner,J.F.,Boissier,O.:Couplingthenormativeregulationwiththecon-
stitutivestatemanagementinsituatedartificialinstitutions.TheKnowledgeEngineering
Review34(2019)
6. Broersen,J.,Dastani,M.,Hulstijn,J.,Huang,Z.,vanderTorre,L.:Theboidarchitecture:
Conflictsbetweenbeliefs,obligations,intentionsanddesires.In:ProceedingsoftheFifth
InternationalConferenceonAutonomousAgents.pp.9–16.ACM,NewYork,NY(2001)
7. Conte,R.:Emergent(info)institutions.CognitiveSystemsResearch2(2),97–110(2001)
8. Criado,N.,Argente,E.,Noriega,P.,Botti,V.:Reasoningaboutnormsunderuncertainty
indynamicenvironments.InternationalJournalofApproximateReasoning 55(9),2049–
2070(2014)
9. Dastani,M.,Tinnemeier,N.A.M.,Meyer,J.J.C.:Aprogramminglanguagefornormative
multi-agentsystems.In:Dignum,V.(ed.)HandbookofResearchonMulti-AgentSystems:
SemanticsandDynamicsofOrganizationalModels.pp.397–417.IGGlobal,Hershey,PA
(2009)
10. Fagundes, M.S., Billhardt, H., Ossowski, S.: Normative reasoning with an adaptive self-
interestedagentmodelbasedonmarkovdecisionprocesses.In:Kuri-Morales,A.,Simari,
G.R.(eds.)AdvancesinArtificialIntelligence–IBERAMIA2010.pp.274–283.Springer
(2010)
11. Fagundes, M.S., Ossowski, S., Meneguzzi, F.: Imperfect norm enforcement in stochastic
environments: An analysis of efficiency and cost tradeoffs. In: Bazzan, A.L., Pichara,
K. (eds.) Advances in Artificial Intelligence – IBERAMIA 2014. pp. 523–535. Springer
InternationalPublishing,Cham(2014)
12. Gibbs,J.P.:Sanctions.SocialProblems14(2),147–159(1966)16 E. Yan et al.
13. Hollander,C.D.,Wu,A.S.:Thecurrentstateofnormativeagent-basedsystems.Journal
ofArtificialSocietiesandSocialSimulation14(2), 6(2011)
14. Hu¨bner,J.F.,Boissier,O.,Bordini,R.H.:Anormativeprogramminglanguageformulti-
agent organisations. Annals of Mathematics and Artificial Intelligence 62(1-2), 27–53
(2011)
15. Hu¨bner, J.F., Boissier, O., Kitio, R., Ricci, A.: Instrumenting multi-agent organisations
with organisational artifacts and agents: “giving the organisational power back to the
agents”.JournalofAutonomousAgentsandMulti-AgentSystems20(3),369–400(2010)
16. Jensen,A.S.:TheAORTAReasoningFramework–AddingOrganizationalReasoningto
Agents.Ph.D.thesis,DanmarksTekniskeUniversitet(DTU)(2015)
17. Kollingbaum, M.J., Norman, T.J.: Supervised interaction: Creating a web of trust for
contracting agents in electronic environments. In: Proceedings of the First International
Joint Conference on Autonomous Agents and Multiagent Systems: Part 1. p. 272–279.
AAMAS’02,ACM(2002)
18. Kollingbaum,M.J.,Norman,T.J.:NoA-Anormativeagentarchitecture.In:Gottlob,G.,
Walsh,T.(eds.)ProceedingsoftheEighteenthInternationalJointConferenceonArtificial
Intelligence.pp.1465–1466(2003)
19. Kollingbaum,M.J.,Norman,T.J.:Informeddeliberationduringnorm-governedpractical
reasoning.In:Boissier,O.,Padget,J.,Dignum,V.,Lindemann,G.,Matson,E.,Ossowski,
S., Sichman, J.S., V´azquez-Salceda, J. (eds.) Coordination, Organizations, Institutions,
andNormsinMulti-AgentSystems.pp.183–197.SpringerBerlinHeidelberg,Berlin,Hei-
delberg(2006)
20. Land,K.,Nardin,L.,Vogel-Heuser,B.:Increasingrobustnessofagents’decision-making
inproductionautomationusingsanctioning.In:2023IEEE21stInternationalConference
onIndustrialInformatics(INDIN).pp.1–6(2023)
21. Lee,J.,Padget,J.,Logan,B.,Dybalova,D.,Alechina,N.:N-jason:Run-timenormcom-
pliance in agentspeak(l). In: Dalpiaz , F., Dix , J., Birna van Riemsdiijk, M. (eds.) En-
gineering Multi-Agent Systems. Lecture Notes in Computer Science (including subseries
Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), vol. 8758,
pp. 367–387. Springer (2014), 2nd International Workshop on Engineering Multi-Agent
Systems,EMAS2014;Conferencedate:05-05-2014Through06-05-2014
22. L´opez y L´opez, F., Luck, M., d’Inverno, M.: A normative framework for agent-based
systems.Computational&MathematicalOrganizationTheory12,227–250(2006)
23. Luck, M., Mahmoud, S., Meneguzzi, F., Kollingbaum, M., Norman, T.J., Criado, N.,
Fagundes, M.S.: Normative agents. In: Ossowski, S. (ed.) Agreement Technologies, pp.
209–220.Springer(2013)
24. Meneguzzi,F.,Luck,M.:Norm-basedbehaviourmodificationinbdiagents.In:Proceed-
ingsoftheInternationalJointConferenceonAutonomousAgentsandMultiagentSystems,
AAMAS.vol.1,pp.177–184(2009)
25. Meneguzzi,F.,Vasconcelos,W.,Oren,N.,Luck,M.:Nu-bdi:norm-awarebdiagents.In:
Proceedings of the 10th European Workshop on Multi-Agent Systems, Dublin, Ireland
(2012)
26. Nardin,L.G.,Balke-Visser,T.,Ajmeri,N.,Kalia,A.K.,Sichman,J.S.,Singh,M.P.:Clas-
sifyingsanctionsanddesigningaconceptualsanctioningprocessmodelforsocio-technical
systems.TheKnowledgeEngineeringReview31(2),142–166(2016)
27. Sabater-Mir, J., Paolucci, M., Conte, R.: Repage: Reputation and image among limited
autonomouspartners.JournalofArtificialSocietiesandSocialSimulation9,1–18(2006)
28. dosSantosNeto,B.F.,daSilva,V.T.,deLucena,C.J.:Developinggoal-orientednormative
agents: The nbdi architecture. In: Agents and Artificial Intelligence: Third International
Conference,ICAART2011,Rome,Italy,January,28-30,2011.RevisedSelectedPapers3.
pp.176–191.Springer(2013)
29. Ullmann-Margalit,E.:Theemergenceofnorms.OxfordUniversityPress(1977)
30. Wooldridge, M.: An Introduction to MultiAgent Systems. Wiley Publishing, 2nd edn.
(2009)
31. Yan,E.,Burattini,S.,Hu¨bner,J.F.,Ricci,A.:Towardsamulti-levelexplainabilityframe-
workforengineeringandunderstandingbdiagentsystems.In:Falcone,R.,Castelfranchi,
C., Sapienza, A., Cantucci, F. (eds.) Proceedings of the 24th Workshop “From Objects
toAgents”(WOA2023).CEURWorkshopProceedings,vol.3579.CEUR-WS.org,Rome
(2023)