A theoretical framework for the design and analysis of
computational thinking problems in education
Giorgia Adorni · Alberto Piatti · Engin Bumbacher · Lucio Negrini ·
Francesco Mondada · Dorit Assaf · Francesca Mangili · Luca
Gambardella
Abstract The field of computational thinking educa- work provides a catalogue of computational thinking
tion has grown in recent years as researchers and ed- skills that can be used to understand the relationship
ucators have sought to develop and assess students’ between problem features and competencies activated.
computationalthinkingabilities.Whilemuchofthere- Thisstudycontributestothefieldofcomputational
search in this area has focused on defining computa- thinkingeducationbyofferingatoolforevaluatingand
tional thinking, the competencies it involves and how revisingexistingproblemstoactivatespecificskillsand
to assess them in teaching and learning contexts, this for assisting in designing new problems that target the
worktakesadifferentapproach.Weprovideamoresit- development of particular competencies. The results of
uated perspective on computational thinking, focusing this study may be of interest to researchers and educa-
on the types of problems that require computational tors working in computational thinking education.
thinking skills to be solved and the features that sup-
Keywords Computational thinking · Competence
port these processes.
development · Educational framework · Learning
Wedevelopaframeworkforanalysingexistingcom-
contexts · Situated cognition
putationalthinkingproblemsinaneducationalcontext.
We conduct a comprehensive literature review to iden-
tify prototypical activities from areas where computa- 1 Introduction
tional thinking is typically pursued in education. We
identify the main components and characteristics of Computational thinking (CT) has emerged as a cru-
these activities, along with their influence on activat- cial skill for students to acquire in the 21st century.
ing computational thinking competencies. The frame- As a result, there has been an increased effort to inte-
grate computer science education into K-12 classrooms
(Weintrop et al. 2021). This initiative was triggered by
G.Adorni·F.Mangili·L.Gambardella
JeannetteWing’sintroductionofthetermCTin(Wing
Dalle Molle Institute for Artificial Intelligence (IDSIA), Univer-
sitàdellaSvizzeraItalianaandUniversityofAppliedSciencesand 2006).Despitetheimpressivegrowthintools,activities
ArtsofSouthernSwitzerland(USI-SUPSI),Lugano,Switzerland andcurriculaforteachingCT,significantchallengesre-
A.Piatti·L.Negrini main in successfully integrating this new concept into
DepartmentofEducationandLearning(DFA),UniversityofAp- schools. One critical challenge is the lack of a precise,
plied Sciences and Arts of Southern Switzerland (SUPSI), Lo-
universally accepted definition of CT, a relatively am-
carno,Switzerland
biguous concept (Weintrop et al. 2021). Instead, dif-
E.Bumbacher
ferent definitions with varying purposes, each focusing
Haute école pédagogique du canton de Vaud (HEP-VD), Lau-
on different aspects of CT, have been proposed (La-
sanne,Switzerland
fuente Martínez et al. 2022). This lack of consensus
F.Mondada
has made it difficult for the field to advance beyond
MobileRoboticSystemsGroup(MOBOTS),EcolePolytechnique
FédéraledeLausanne(EPFL),Lausanne,Switzerland the exploratory stage. To address this issue and sys-
tematically develop and evaluate different approaches
D.Assaf
School of Education, University of Applied Sciences and Arts to teaching, developing, and assessing CT, it is neces-
NorthwesternSwitzerland(FHNW),Windisch,Switzerland sary to have a precise and comprehensive formalisation
4202
raM
82
]CH.sc[
1v57491.3042:viXra2 GiorgiaAdornietal.
of the concept and to identify widespread best prac- thoughtprocessesinvolvedinformulatingproblemsand
tices. Therefore, efforts are needed to establish a clear their solutions so that the solutions are represented in
and standardised definition of CT that reflects the di- a form that an information-processing agent can effec-
verse perspectives and purposes of the field. However, tively carry out.” – which has been widely cited and
there is no easy way to define CT (Shute et al. 2017). considered the foundation of the field of CT, with the
Prevailing approaches have focused on decomposing it situated theories of learning (Roth and Jornet 2013;
intosub-dimensionsandexplicitlyspecifyingeach,e.g., Heersmink 2013).
Brennan and Resnick (2012); Grover and Pea (2017). ToavoidcreatinganovelCTcompetencemodel,we
These dimension-based approaches have been used to haveadoptedstate-of-the-artframeworks(Brennanand
categoriseexistingassessmenttasksbasedonanalysing Resnick 2012; Weintrop et al. 2016; Shute et al. 2017)
the underlying skills associated with a task, e.g., La- and reviewed relevant literature (Tikva and Tambouris
fuente Martínez et al. (2021). However, creating tasks 2021;Bocconietal.2016,2022).Ourapproachresulted
for developing and assessing these sub-dimensions has in a catalogue of commonly recognised CT competen-
been difficult. A recent study developed a reliable and cies widely used to develop and assess student abilities
validated CT assessment for adults by combining ex- in CT. These competencies, also called dimensions or
isting items (Lafuente Martínez et al. 2022). While ex- skills,representtheessentialcapacitiesstudentsneedto
perts identified several CT sub-dimensions to be ad- develop to solve CTPs effectively. We established a di-
dressed by the items, statistical analyses suggested a rectlinkbetweenourcatalogueofCTcompetenciesand
one-dimensionalmodelasthebestsolution.Acoreprob- our framework by showing how specific skills are more
lemisthatsub-dimensionssuchasdecomposition,gen- likely to be activated when solving CTPs with specific
eralisation, or pattern recognition are closely interwo- characteristics. Finally, the framework is applied to a
ven and hard to separate (Lafuente Martínez et al. variety of prototypical problems from standard CT do-
2021). Similar issues are observed with other complex mains, demonstrating that it allows for systematically
constructs, such as scientific inquiry or practices, as analyse and evaluate CTPs based on the competencies
noted by previous studies (Osborne 2014; Ford 2015). theyareintendedtoelicitandtoassessstudentabilities
In this article, we propose an alternative, more sit- in a targeted and efficient manner.
uated approach by focusing on the types of problems Answeringresearchquestionssuchas“Whatarethe
that require CT to be solved, which we call compu- characteristicsofproblemsrequiringCTtobesolved?”,
tational thinking problems (CTPs). This approach is “Which characteristics should a CTP have to activate
based on the idea that CT can be better understood one (or more) CT competencies?” and “Which CT di-
by examining the problems that elicit it and the fea- mensions are activated in a CTP with certain charac-
tures that support CT processes rather than attempt- teristics?”, can provide a better understanding of how
ing to define CT itself. The idea behind incorporating to design and assess CTPs that effectively develop CT
a situated approach in this context is that CT is not skills. Our proposed framework offers a systematic ap-
just a collection of skills. Still, it is also closely tied to proach for identifying the characteristics of CTPs and
the specific context in which it is being applied and the corresponding CT competencies required to solve
allows understanding the complexity of CT. The theo- them. This approach enables the selection or design of
ries of situated learning proposed by (Roth and Jornet tasks effective in developing and assessing the desired
2013; Heersmink 2013) stress that learning is most ef- skills,ultimatelyimprovingthequalityofthetasksand
fectivewithinauthenticandmeaningfulcontexts.They assessment process.
argue that knowledge is constructed through interac- This article is divided into four main sections. Sec-
tions with the environment and the community rather tion 2 presents a theoretical framework for analysing,
than abstract instruction. evaluating,revisinganddesigningCTPs.Thisapproach
Our framework for analysing, evaluating and revis- is based on a catalogue of CT skills, which are com-
ingexistingCTPanddesigningnewCTPisfirstbased monly used to develop and evaluate student abilities.
on the theory proposed by Piatti et al. (2022). They To determine how the characteristics of a CTP impact
emphasise that CT should be considered a situated ac- the development of CT skills, we defined a mapping
tivity and contextualised and embedded in real-world betweenskillsandcharacteristics,whichisdiscussedin
problem-solvingsituations.TheyalsohighlightthatCT detailinAppendixA.Section3validatestheframework
should be seen as a dynamic and adaptive problem- throughaqualitativeanalysisofvariousCTPsfoundin
solving process rather than a fixed set of competencies the literature, focusing on unplugged, robotic, and vir-
or skills. Their view combines the original definition of tual activities. It is important to note that readers are
CTfromWing(2006)–“Computationalthinkingisthe notrequiredtoreadtheentiresection.TheycanchooseAtheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 3
to read one example per category or skip this section (Wing2006)withthesituatedtheoriesoflearning(Roth
altogetherandmovedirectlytoSections4and5.Addi- and Jornet 2013; Heersmink 2013). According to Piatti
tionally,AppendixBprovidesgraphicaltemplatesthat et al. (2022), CT activities are shaped by the physical
offeravisualrepresentationofhoweachCTPdiscussed and social context in which they occur and involve ex-
inthearticlealignswiththeCTcompetenciesoutlined ternal cognitive artefacts. Piatti et al. (2022) proposed
inthestudy.Section4,includesanoverviewoftherela-
tionship between CT competencies and different activ-
ity domains. It outlines the strengths, weaknesses and
areas for improvement of each category analysed. Sec-
tion 5, summarises the study’s key contributions, limi-
tationsandimplicationsforfutureresearchandpractice assessment ? iiinnnttt aaa === 888;;;
in the field of CT competencies development. </>
algorithm ? iiinnnttt aaa === 888;;;
2 Methods </>
This section presents a theoretical framework for anal- problem setting ? iiinnnttt aaa === 888;;;
ysing,evaluating,revisinganddesigningcomputational </>
thinking problems (CTPs) in educational contexts. inactive role formal
Through a thorough analysis of prototypical activ- non-autonomous symbolic
i
c
it doi ee
m
ns
p
tf
iu
fr yo tam
t ti
hov ena ar mi lo atu
h
is ninc
k
cla hins as
g
ri ac
(
cCa ter
T
re i)a ss
ti is
co sf tyt aph nie
c
dal li clt ye or mpat puu
r
or
s
ne
u ee
nw
d
th
,
se wr oe
e
f
aa uc toti nv oe
m
r yole
a au cto tin vo em roo lu es embod aie rtd
efactual
environment
theseproblems.Relyingonexistingframeworksandlit- Fig. 1 Visualisation of the computational thinking cube
erature on CT competencies, we present a catalogue of (CT-cube) (From Piatti et al. (2022)).Thismodelconsid-
ersthetypeofactivity(problemsetting,algorithm,assessment),
skills typically used to assess student abilities in this
the artefactual environment (embodied, symbolic, formal), and
area. We then define a mapping between the identified
theautonomy(inactiverole,non-autonomousactiverole,orau-
characteristics of the CTPs and these competencies to tonomousactiverole).
determinehowthesefeaturesinfluencethedevelopment
of CT abilities.
a framework called computational thinking cube (CT-
cube), illustrated in Fig. 1, for the design of CTPs and
2.1 Computational thinking problems (CTPs) theassessmentofCT.Thismodelconsidersthetypeof
CT activity being performed or required (problem set-
The increasing emphasis on the development and as- ting, algorithm, assessment), the artefactual environ-
sessment of students’ CT skills has led to a need for a ment in which the activities occur, represented by the
structured approach to analyse, evaluate, revise, and toolsused(embodied,symbolic,formal),andthesocial
design CTPs. Although several initiatives have been interactions and individual’s level of autonomy a priori
launched to introduce computer science education in and/or during the task (inactive role, non-autonomous
classrooms, there is currently no universally accepted active role, or autonomous active role). It is important
definition of CT. This lack of a standardised defini- tonotethatthestepsintheactivitydimensionmaybe
tion presents significant challenges in creating appro- iterated as needed to arrive at a satisfactory solution.
priateassessmenttasksandidentifyingthevarioussub- Based on the formulation of CT from Piatti et al.
dimensions of CT. Therefore, it is crucial to establish (2022), we define CTPs by considering the context in
a clear and precise definition of CT that reflects the whichtheactivityisbeingperformed.Accordingtoour
diverse perspectives and purposes of the field to facil- framework,everyCTPsconsistsofseveralcomponents:
itate the development and assessment of effective CT thesystem,comprisingtheenvironmentandtheagent,
pedagogical interventions. the problem solver, and the task.
To address this issue, we followed the approach in Theenvironment isaphysicaland/oravirtualspace,
Piatti et al. (2022), which is more closely aligned with characterised by one or more variables, called “descrip-
thecomplex,multi-facetedsettingsinwhichCTistyp- tors”,whichmaychangeovertimeaccordingtothedy-
ically activated, such as educational environments or namics of this space.
situations involving multiple people and rich physical The agent is a human, robotic or virtual being ca-
environments. They combine the original view of Wing pable of performing “actions” on the environment to
ytivitca4 GiorgiaAdornietal.
change the value of its descriptors and therefore alter
Artefactual environment
its state. An algorithm is a finite set of instructions
Reasoning tools
Problem solver
that an agent should follow to perform actions in the
Interaction tools
environment to solve the task. Algorithms for different
typesofagentscantakevariousforms,suchascodefor
a virtual agent, behaviour for a robot, or a verbal or Agent Environment
written set of instructions for a human agent.
Task
The problem solver is a human or group of peo-
Final
ple who can solve tasks that require the use of algo- state
rithms, such as designing, implementing, or communi-
System
cating them to an agent to change the state of an en-
vironment. They have access to reasoning tools, which Initial
arecognitiveartefactsusedtothinkaboutthetask,for state
example, whiteboards employed to organise ideas and
understand the logic of a problem or solution. Some of Actions Descriptors
these tools, known as interaction tools, also allow the
Fig.2 VisualisationofthecomponentsofaCTP.Accord-
problem solver to interface with the system. An exam-
ingtotheframework,aCTPincludes:(1)theproblemsolver(in
pleisaprogrammingplatformusedtowriteaprogram
green)characterisedbytheartefactualenvironment,i.e.,theset
thatcontrolsaroboticarm.Inthiscase,thetoolserves ofreasoningandinteractiontools,(2)thesystem,whichconsists
as both a reasoning tool, enabling the problem solver ofanenvironmentwithitsdescriptors(inblue)andanagentwith
its actions (in violet), and (3) the task (in yellow) characterised
toplananddesignthecode,andasaninteractiontool,
bythesetofinitialstates,algorithmsandfinalstates.
allowing the execution of the algorithm and the obser-
vation of its effect on the system. The set of all tools
is collectively known as artefactual environment and is
described in the works of Heersmink (2013) and Piatti
worlds of mathematics by Tall (2006, 2013, 2020). In
et al. (2022).
particular, tools can be distinguished into “embodied”
Thetask istheactivitythattheproblemsolverper-
orecologicalandiconicrepresentationalcognitivearte-
forms to find one or more solutions to a CTP. A solu-
facts based on embodiment and perception, “symbolic”
tion is a combination of initial states, algorithms, and
cognitive artefacts used to conceive and apply proce-
final states that meets the system’s requirements for
dures and rules, and “formal” cognitive artefacts used
a particular environment, with its set of states, and a
to create, generalise and represent structures.
givenagent,withitssetofalgorithms.Theinitialstate
is the starting configuration of the environment, while
the final state is the state of the environment after the Definition 2 (Tools functionalities) Specificfea-
algorithm is performed. For a solution to be valid, the tures and functions provided by a tool or resource
executionofthealgorithmontheinitialstatemustpro- that enable a problem solver to express a wide
duce the final state. range of instructions and operations to the agent.
Fig.2conveystheframework’scomponentsandtheir
interactions. Each component is depicted in a distinct
colour consistently throughout the article. Another aspect of CTPs that is closely related to the
The proposed framework, in addition to defining previous one is the set of tools functionalities. These
CTPs and their components, allows classify them ac- functionalities can include defining and manipulating
cording to their characteristics, which are relevant for “variables”,usingdifferenttypesof“operators”,creating
elicitingandassessingCTskillsineducationalcontexts. “sequences” ofactions,“repeating” actions,using“condi-
tional” statements,defining“functions”,executingtasks
in “parallel” and triggering “events”. For example, a
Definition 1 (Artefactual environment) Tools
symbolic artefact, such as a block-based programming
and resources used by a problem solver to reason,
platform, may have many functionalities, such as se-
understand a problem or interact with a system.
quences, repetitions, conditionals, etc. In contrast, the
programminginterfacemayhavelimitedfunctionalities
The first characteristic we defined in our framework is duringaroboticactivity,forexample,itcouldonlycon-
the artefactual environment, in line with the definition sent to the use of operators (like moving forward) or
from Piatti et al. (2022) and the model of the three events.
mhtiroglAAtheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 5
Definition 3 (Problem domain) The category Definition 5 (System observability) Theprop-
ofanactivitydependingonthenatureoftheagent erty of a system that pertains to the ability of
and of the environment in which the task is per- theproblemsolvertoobservetheeffectsofactions
formed. taken within the system and their impact on the
system’s state.
The domain classification of a CTP is useful for gain-
Observability is another aspect that can vary between
ing insights into the task’s context and identifying its
CTPs.Systemscanbeclassifiedaspartiallyobservable,
specific characteristics, challenges, and considerations.
in which only the aggregate effects of a limited number
Threemaincategoriesofdomainsarecommonlyrecog-
ofactionscanbeperceived,totallyobservable,inwhich
nised in cognitive task paradigms, these include: “un-
every single action and its consequences are visible, or
plugged” activities, which involve a human agent and
not observable, in which the problem solver is unable
a physical environment, “robotic” activities, in which
todirectlyseetheresultsoftheagent’sactionsandthe
the agent is a robot and the environment is physical,
system’sstateandmustinferitfromotherinformation.
and “virtual” activities, where both agent and environ-
Forexample,inachessgame,theproblemsolvercansee
mentarevirtual,suchasasimulatedentity.Itisworth
thestateoftheboardandthepiecesallthetime,mak-
noting that the agent may be “embedded“ in the en-
ingthesystemfullyobservable.Inagameofpoker,con-
vironment, so its descriptors may likewise be used to
versely, the problem solver can only see his own cards
describe it. Furthermore, in some cases, the problem
and the community cards, but not those held by the
solver and agent may be “overlapped”, meaning they
other players, making the system partially observable.
are the same entity.
In a scenario where the problem solver remotely con-
trolsarobottoexploreanundergroundcave,theperson
Definition 4 (System resettability) Theprop- cannotdirectlyseetheenvironmentandrobot’sactions
erty of a system to be restored to its initial state. and must rely on sensor data to determine its location
It can be achieved either through the direct in- andprogress.Asaresult,thesystemisnon-observable,
tervention of the problem solver on the system and decisions are based on limited information.
(agentsandenvironment)orindirectlythroughthe
reversibility of actions within the system. Definition 6 (Task type) Thecategoryofanac-
tivity influenced by both the number and type of
objectives that need to be achieved to solve the
task.
Resettability is another characteristic of CTPs. An ac-
tion is reversible if it is possible to undo its effects,
allowing the system to be restored to a previous state. The last important set of CTP features are those re-
A system is considered non-resettable if it cannot be lated to the task. Each element that composes the task
returned to its initial state. This characteristic is cru- (initial state, algorithm, final states) can be “given” or
cial in educational contexts as it enables the problem is “to be found”. The tasks are divided into six cate-
solver to experiment, make mistakes and try different gories, which differ depending on the number of objec-
solutionswithoutbeingconstrainedbythepreviousac- tives. Tasks with a single objective are classified into
tions. Imagine a task where the problem solver must the following types: (1) find the initial state: given the
draw a picture on a piece of paper using a pencil. If he finalstateandthealgorithmthatproducedit,theprob-
makes a mistake, he can easily erase it and start over. lem solver must infer the initial state on which the al-
The system is directly resettable because the problem gorithm was applied; (2) find the algorithm: given the
solvercandirectlyinterveneandresetthesystemtoits initial and the final states, the problem solver must de-
initial state. Alternatively, the system is not resettable vise and describe an algorithm, or a part of it, that the
if the problem solver can only use a pen. If he makes a agentcanexecutetotransformthesystemfromtheini-
mistake, it can not be erased, and the problem solver tial to the final state; (3) find the final state: given the
must continue with the picture in its current state. An initial state and an algorithm, the problem solver must
example of indirect resettability would be if the prob- derive the final state. Tasks with multiple objectives
lem solver is drawing a picture on a digital tablet. He fall into the following types: (4) creation act: given an
canusetheundobuttontowipeoutthepreviousaction initial state, the problem solver must determine a de-
and return to a previous state. sired final state and an algorithm that the agent can6 GiorgiaAdornietal.
use to transform the system from the initial to the fi- The position of the ball can be described either explic-
nal state; (5) application act: given an algorithm, the itlyusingcoordinates,orimplicitlybystatingthatitis
problemsolvermustidentifyoneormorepairsofinitial located in the playground.
and final states on which the algorithm can be applied
successfully; (6) project act: given a desired final state,
Definition 9 (Task constraints) Thelimitations
the problem solver must define an initial state and an
or specific requirements that must be adhered to
algorithm that the agent should use to transform the
on the elements of a task to be found for the solu-
system from the initial to the final state.
tion to be considered as valid.
Definition 7 (Task cardinality) Theproportion
betweenthenumberofgivenelementstothenum-
ber of elements to be found to solve the task. A CTP can be distinguished by the type of constraints
on the elements of the task that need to be found.
In particular, the elements that have to be found are
In a task, it is possible for each of the given elements distinguished in “unconstrained”, meaning they can be
and elements that need to be found to be singular or freely chosen from all possible states and algorithms,
multiple.Therelationshipbetweenthenumberofgiven without any limitations or specific requirements that
elements and the number of elements to be found can needtobemettoconsiderthesolutionvalid,and“con-
be “one-to-one”, “many-to-one” or “many-to-many”. For strained”,meaningtheymustbelongtoaspecifiedsub-
example, a task with a one-to-one cardinality can be setoftherespectiveuniversesetofstatesoralgorithms.
one where the problem solver is provided with a single Referring to the previous example, the algorithm to be
initial and final state and is expected to find a single found can be unconstrained if the robot can perform
algorithmthattransformstheinitialstateintothefinal any action to find the ball (moving in a random di-
state.Incontrast,ataskwithamany-to-onecardinality rection, using sensors to detect the ball, or following
can be one where multiple initial states are given, and a predefined path) or constrained if the programming
theproblemsolverisexpectedtofindasinglealgorithm platform limits the commands the robot can execute
that transforms all the initial states into a single final (moving only in specific directions, using only specific
state. Finally, a task with a many-to-many cardinality sensorsorfollowingaparticularsetofpredefinedpaths
can be one where the problem solver is provided with to find the ball).
multiple initial states and a single final state and is
expected to find multiple algorithms that transform all
Definition 10 (Algorithm representation) The
possible initial states into the desired final state. This
mean by which an algorithm is conveyed.
type of task can be traced back to many tasks with a
many-to-one cardinality.
Definition 8 (Task explicitness) Thelevelofex-
Finally,howthealgorithmisrepresentedisasignificant
plicitnessorimplicitnessinthepresentationofthe
task characteristic. An algorithm can be “manifest” if
given task’s elements.
it is directly expressed or “latent” if it is not stated but
is tacit or inferred by the problem solver. Manifest al-
gorithms can be further classified as “written” if it is
Thewaytheelementsofthetaskarestatedcanbeused
represented by an external and persistent representa-
todistinguishaCTPbyitslevelofexplicitness.Atask
tion of it, such as through a programming language, or
with “explicitly” specified elements is directly usable in
“not written” if it is communicated verbally or through
the problem-solving process, while a task with “implic-
other non-permanent means. When the problem solver
itly” expressed through constraints requires additional
and the agent are the same entity, the algorithm used
interpretationtobeunderstood.Forexample,inatask
to solve the task is often not explicitly expressed or
wherearobotmustturnonitslightsassoonasitfinds
writtendown,astheproblemsolveriscarryingoutthe
a ball in a playground, the given elements are the ini-
steps of the algorithm directly through their actions as
tial state (the robot lights switched off, the robot and
the agent.
the ball positions) and the final state (the robot lights
turnedonandtherobotpositionedinfrontoftheball),
while the element to be found is the algorithm (the set Fig. 3 graphically represent the components and
of actions the robot should perform to find the ball). characteristics of a CTP according to our framework.Atheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 7
Problem solver System
☐ single ☐ group ☐ unplugged ☐ robotic ☐ virtual
☐ resettable ☐ not resettable
Artefactual environment
☐ (partly) observable ☐ not observable
☐ variables ☐ operators ☐ sequences ☐ repetitions
☐ conditionals ☐ functions ☐ parallelism ☐ events
Agent Environment
Reasoning tools ☐ human ☐ robotic ☐ virtual ☐ physical ☐☐ vviirrttuuaall
RT _R2T _1
☐ e☐m ebmodbieodd ie☐d s☐ym sbymolibco ☐lic f☐or mfoarlmal
Actions Descriptors
Interactions tools I ☐T_ eI ☐2T m _ eb1 mo dbieodd ie☐d s☐ym sbymolibco ☐lic f☐or mfoarlmal A ☐3 r A ☐e2 v er A ☐ers1 v ier b erlsveie b☐ rlse i bn☐lo e t n ☐roe tv n eroer tsv ierb erlsveiebrlseible D3 D2 D1
Task
☐ find the initial state ☐ find the algorithm ☐ find the final state ☐ creation act ☐ application act ☐ project act
☐ one-to-one cardinality ☐ many-to-one cardinality
Algorithm
Initial state Final state
☐ manifest ☐ latent
If given: ☐ written ☐ not written If given:
☐ explicit ☐ implicit If given: ☐ explicit ☐ implicit
☐ one ☐ many ☐ ☐ w eri xtt pe ln icit ☐ not ☐wr i it mte pn licit ☐ one ☐ many
If to be found: ☐ one ☐ many If to be found:
☐ constrained ☐ unconstrained If to be found: ☐ constrained ☐ unconstrained
☐ one ☐ many ☐ constrained ☐ unconstrained ☐ one ☐ many
☐ one ☐ many
Fig. 3 Graphical template for the analysis of CTPs.TemplatesuitableforgraphicallyanalysingthecomponentsofanyCTP
accordingtoourframework.ColoursrepresenttheCTPcomponentsandcharacteristicsfollowingthesamecolourschemeofFig.2.
2.2 A catalogue of computational thinking (CT) skills (2017). They developed a competence model based on
a review of the relevant definitions of CT in the liter-
ature, including those of Brennan and Resnick (2012)
In this study, we have identified a set of CT competen-
and Weintrop et al. (2016).
cies commonly used to assess student abilities in CT.
These competencies, also called dimensions or skills,
representthefundamentalabilitiesstudentsneedtode- Tofacilitatetheassessmentofcompetenciesanden-
velop to solve CT problems effectively. We decided to sure that it is focused and efficient, we have organised
draw from various state-of-the-art competency models CTskillsintoahierarchywithlayersofdimensionsand
to select and define our taxonomy of CT competencies sub-dimensions, depicted in Fig. 4. The skills taxon-
rather than relying on a single model. Our selection omy is based on the activity dimension of the CT-cube
process was inspired by the literature reviews of Tikva framework by Piatti et al. (2022), introduced in the
and Tambouris (2021) and Bocconi et al. (2016, 2022), previous section, representing the individual’s role in
which provides a comprehensive overview of CT skills the cognitive system at each moment of the task. The
and their potential for compulsory education. Of great activitysub-dimensionshavebeendevelopedmainlyus-
importance is the framework of Brennan and Resnick ing the frameworks of Brennan and Resnick (2012);
(2012). They proposed a list of CT skills divided into Shute et al. (2017); Weintrop et al. (2016). Competen-
threedimensions:computationalconcepts,practices,and cies related to the activity dimension involve a wide
perspectives. This characterisation is often used in lit- range of operations and cognitive processes. For ex-
erature, but it was limited for our purposes because ample, the “problem setting” competence may require
it only considered virtual activities, while we also in- recognising and understanding various components of
vestigated robotics and unplugged ones. Therefore, we the framework within the given CTPs, as well as mod-
extended this list by partially following the taxonomy elling the problem. The “algorithm” competence may
of CT in Science, Technology, Engineering and Math involvethecomprehension andexploitationofdifferent
(STEM) courses proposed by Weintrop et al. (2016). instructions with varying difficulty levels, often influ-
Thisclassificationconsistsoffourmaincategories:data enced by the type of artifactual environment involved.
practices, modelling and simulation practices, compu- The “assessment” competence may consider determin-
tational problem-solving, and systems thinking prac- ing whether a solution is correct or its quality is sat-
tices. Another work we based on is that of Shute et al. isfactory. Table 1 summarises the competencies of the8 GiorgiaAdornietal.
Assessment
Correctness Effectiveness
Algorithm System state Constraints
Optimisation Generalisation
debugging verification validation
Algorithm
Control
Variables Operators Functions Parallelism Events
structures
Sequences Repetitions Conditionals
Problem setting
Analysing Modelling Representing
Data Pattern Decomposition Abstraction
collection recognition
Fig.4 Visualisationofour taxonomy ofCTcompetencies.TheoverallstructureisbasedontheCT-cube(Piattietal.2022).
Thesub-skillsarederivedfromvalidatedCTmodels(BrennanandResnick2012;Weintropetal.2016;Shuteetal.2017).Thethree
skillsgroupsarerepresentedwiththesamecolourschemeusedfortheCT-cubedimensionsinFig.1.
first level of the hierarchy, defining all the possible val-
ues that the activity dimension can assume.
Table 2 Problem setting sub-competencies and their
definition. The skills listed are based on leading-edge compe-
Table1 Maincompetenciesoftheframeworkandtheir tencemodels(BrennanandResnick2012;Shuteetal.2017;Thal-
definition. The skills listed are based on the values of the ac- heim2000;Weintropetal.2016;Wing2011;Bocconietal.2016;
tivitydimensionoftheCT-cubeframework(Piattietal.2022). Selby and Woollard 2013; Angeli et al. 2016; Csizmadia et al.
2015;Selby2014;BarrandStephenson2011).
Competence Definition
Competence Definition
Recognise, understand, reformulate or
Problem setting modelaCTPanditscomponentssothat Collect, examine and interpret data
itssolutioncanbecomputed.a Analysing about the system: environment descrip-
torsandagentactions.
Conceive and represent a set of agent’s
actionsthatshouldbeexecutedbyahu- Data
Algorithm Gatherdetailsaboutthesystem.
man, artificial or virtual agent to solve collection
thetask.b
Pattern Identify similarities, trends, ideas and
Evaluatethequalityandvalidityofthe recognition structureswithinthesystem.
Assessment
solutioninrelationtotheoriginaltask.c
Restructure, clean and update knowl-
Modelling
edgeaboutthesystem.
aSeeTable2forsub-competencies.
Divide the original task into sub-tasks
bSeeTable3forsub-competencies. Decomposition
thatareeasiertobesolved.
cSeeTable4forsub-competencies.
Simplify the original task, focus on key
Abstraction
conceptsandomitunimportantones.
Tables 2 to 4 provide a detailed breakdown of the Illustrate or communicate information
Representing
sub-dimensions for the three possible values of the CT- aboutthesystemandthetask.Atheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 9
cube activity class (problem setting, algorithm, assess- Table 4 Assessment sub-competencies and their defi-
ment).Inthetables,eachrowrepresentsaspecificskill. nition. The skills listed are based on leading-edge competence
models(BrennanandResnick2012;Shuteetal.2017;Weintrop
The parent skill is distinguished from the lower-level
etal.2016;Bocconietal.2016).
skills by a dashed line, while the lower-level competen-
ciesofaparticularcompetenceareseparatedbydotted
Competence Definition
lines. This helps to visually organise the table to dif-
ferentiate between the different skill levels and make it Correctness Assess whether the task solution is cor-
rect.
easier to understand their relationships.
Evaluate whether the algorithm is cor-
Algorithm rect, identifying errors and fixing bugs
debugging that prevent it from functioning cor-
Table 3 Algorithm sub-competencies and their defini-
rectly.
tion. The skills listed are based on leading-edge competence
models(BrennanandResnick2012;CuiandNg2021;Rodríguez- Evaluate whether the system is in the
Martínezetal.2020;Bocconietal.2016,2022;Shuteetal.2017). System states expectedstate,detectingandsolvingpo-
Thefollowingdefinitionsareaboutthealgorithmicconceptsre- verification tentialissues.
latedtotheskillsincetheskilldefinitionvariesbasedonthearti-
factualenvironment:inembodiedcontexts,itinvolvesrecognis- Evaluate whether the solution satisfies
ingordescribingconceptsthroughsenses;insymboliccontexts, Constraints the constraints established for the sys-
itinvolvesapplyingthem;andinformalcontexts,itinvolvesun- validation tem and the algorithm, looking for and
derstandingpropertiestostructurecomplexalgorithms. correctingeventualproblems.
Effectiveness Assesshoweffectiveisthetasksolution.
Competence Definition
Evaluate whether the solution meets
Entitythatstoresvaluesaboutthesys- the standards in a timely and resource-
Variables Optimisations
temorintermediatedata. efficientmanner,andeventuallyidentify
waystooptimisetheperformance.
Mathematical operators (such as addi-
tion (+), subtraction (−) etc.), logi- Formulate the task solution in such a
cal symbols (such as and (&), or (|), Generalisation waythatcanbereusedorappliedtodif-
and not (!)) or for comparison (such as ferentsituations.
Operators
equalto(==),greaterthan(>),andless
than (<)), or even specific commands
or actions (such as “turn left” or “go
straight”).
Statements that define the agent ac-
Control
tionsflow’sdirection,suchassequential,
structures
repetitive,orconditional.
competencies, for example, to activate these skills it
Sequences Linearsuccessionofagentactions. is necessary to consider the tool used to represent the
algorithm and the type of abstraction of the reason-
Repetitions Iterativeagentactions.
ing required. In embodied environments, knowledge is
Conditionals Agentactionsdependentonconditions.
represented through sensory experiences, such as see-
Setofreusableagentactionswhichpro- ing, hearing, or touching. In this context, these skills
Functions
ducearesultforaspecificsub-task. may be activated simply by recognising and describ-
Parallelism Simultaneousagentactions. ing algorithmic concepts using physical interactions. In
symbolic environments, knowledge is represented using
Variations in the environment descrip-
symbols,suchaswordsandnumbers,orlanguages,such
Events tors that trigger the execution of agent
actions. as natural or formal languages. Common types of for-
mallanguageincludethoseusedtocode,suchasblock-
basedandtextualprogramminglanguages.Inthiscon-
It is important to note that the activation of the text,reasoningrequirestheproblemsolvertobeableto
activitysub-dimensions,especiallythealgorithmicone, applythesecompetenciestosolveproblemsandaccom-
iscloselyrelatedtothetypeofartefactualenvironment plishtasks.Informalenvironments,knowledgeisrepre-
being considered. The task-related artefactual environ- sentedwithabstractions,suchasmathematicalmodels,
mentcombinesthetoolsgivenandthetypeofproblem logical systems and proofs. In this context, it is neces-
involved. The activation of a competence may vary de- sarytohaveadeeperunderstandingofhowtheseskills
pending on the context in which it is being applied or work and what their properties are to be able to struc-
whetherthetaskisperformedwithembodied,symbolic, tureandapplythemeffectively,creatingacomplexsys-
or formal artefacts. When considering algorithmic sub- tem.10 GiorgiaAdornietal.
2.3 Map CTP characteristics to CT skills Table 5 Overview of the notation for representing the
relationship between characteristics and skills.
To formalise our framework, clarifying the role of CTP
characteristics in CT skills assessment, we utilise the Symbol Meaning
previouslyestablisheddefinitionofCTPtoidentifythe ✓ The characteristic is required for the compe-
components of these problems and their characteristics tenceactivation
andtounderstandhowdifferentfeaturesmayinfluence
✗ Thecharacteristicpreventsthecompetenceac-
the assessment of CT competencies. We establish a di- tivation
rectlinkbetweenourcatalogueofCTcompetenciesand
The characteristic promotes the competence
+
theproposedframework,demonstratinghowparticular activation
CT dimensions are more likely to be activated when
Thecharacteristicisirrelevantforthecompe-
solvingCTPswithspecificcharacteristics.Thelinkbe- none tenceactivation
tween the two is discussed in detail in Appendix A,
The characteristic is one of the possible char-
whichexplainshowthevariouscharacteristicsofCTPs ✓* acteristicsrequiredforthecompetenceactiva-
can impact the development of CT competencies and tion
howcertainskillsaremorelikelytobeusedwhensolv-
The characteristic is required for / prevents
ing CTPs with specific characteristics. This approach ✓SF /✗SF thecompetenceactivationinthesymbolicand
enablestheassessmentofstudentabilitiesinatargeted formalenvironments
and efficient manner.
The characteristic is required for / prevents
Our analysis of the relationships between charac- ✓F /✗F the competence activation in the formal envi-
teristics and competencies revealed four different types ronment
of connections. From the perspective of the features, a
certain characteristic can either be required to activate
If the CT competencies to be measured have not been
a certain competence, prevent its activation, trigger its
specified in the activity, the framework can be used to
activationorbeirrelevanttoitsactivation.Conversely,
determine which skills can be assessed from the avail-
from the perspective of the competencies, a skill is ac-
able features. On the other hand, if the CT competen-
tivated if it has all required features and none of the
cies are outlined, the framework can be used to com-
preventing ones, can be encouraged by triggering fea-
paretheproblem’scharacteristicswiththoseassociated
turesorisinhibitedifithasapreventingfeatureoronly
withthespecifiedcompetenciesanddeterminetheCTP
irrelevant features. The relationship between features
effectivenessforintendededucationalpurposes.Theef-
and skills can vary based on the type of environment
fectivenessofaCTPcanbeclassifiedintofivecategories
in which the problem is presented. Table 5 provides a
based on the relationship between its features and the
comprehensive explanation of the symbols used to rep-
CT competencies.
resent the relationship between the characteristics of a
CTP and CT competencies.
Table 6 has been realised to offer a practical under- Definition 11 (Minimal CTP) Acompleteand
standing of the relationship between different features optimised CTP in which its characteristics per-
of CTPs we identified and our catalogue of CT com- fectly match the features essential to activate the
petencies enabling us to assess student abilities in a CT competence it is intended to elicit.
targeted and efficient manner. Each column is a char-
acteristic of the CTP and every row represents a skill.
In other words, the problem is designed to activate the
Overall,thistableprovidesaclearvisualrepresentation
intended CT skill with the minimum required features
of how different features of the CTP can influence the
without any irrelevant or distracting elements.
assessment of CT competencies and how the different
dimensions of CT skills are more likely to be activated
when solving CTPs with specific characteristics. Definition 12 (Extensive CTP) Acompleteand
richCTPthat,inadditiontohavingallofthenec-
This framework, supported by Table 6, is intended
essarycharacteristicstoactivateacertainCTcom-
to be used as a tool to analyse existing CTPs, under-
petence,alsohasfeaturesthatactasastimulusto
stand which CT competencies can be assessed by the
activate that skill or others.
availablefeatures,evaluatetheproblemeffectivenessfor
intended educational purposes and eventually revise it
if it is unsuitable. To use the framework, the first step These additional features make the problem more en-
istoidentifytheCTPprofileandlistallofitsfeatures. gaging and provide additional opportunities for stu-Atheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 11
Table 6 Comprehensive overview of the relationship between different CTP characteristics and CT competencies.
The table shows the relationship between the characteristics of CTPs (columns) and CT competencies (rows). The CTP features
considered include the tools’ functionalities, the system’s property, and the task trait. The meaning of the symbols used is provided
inTable5.ThesamecolourschemesusedfortheCT-cubedimensionsinFig.1andfortheCTPcomponentsinFig.2areemployed
topresenttheskillsandfeatures,respectively.
Tool functionalities System Task
Data collection ✓ + + + + + + + + + + + + +
Pattern recognition + + ✓* + ✓* + + + + + + + + + + + + + +
Decomposition + + ✓* + + ✓* + + + + + + + + + + + + + +
Abstraction ✓ + + + ✓ + + + + + + + + + + +
Data representation ✓ + + + + + + + + + + + + +
Variables ✓ + + + + + + + + + ✓F + + + + + + + + +
Operators + ✓ + + + + + + + + ✓F + + + + + + + +
Sequences + + ✓ + + + + ✓F + + + + + + +
Repetitions + + + ✓ + + ✓F + + + + + + + +
Conditionals + + ✓ + + + ✓F + + + + + + + + +
Functions + + + + ✓ + ✓F + + + + + + + +
Parallelism + + ✓ + ✓F + + + + + +
Events + + + ✓ + ✓F + + + + +
Algorithm debugging + + + + + + + + ✓ ✗ + ✓ + ✓ ✗ ✓F ✗F
System state verification ✓ ✗ + ✓ + ✓SF ✗SF ✓F ✗F
Constraints validation + + + + + + + + ✓ ✗ + ✗ ✓
Optimisation + + + + + + + + ✓ ✗ +
Generalisation ✓ + + + ✓ + ✓ ✗ + + + +
dentstodemonstratetheirCTabilities.Theproblemis
Definition 14 (Adjustable CTP) ACTPwhere
consideredcompleteandrich,astheadditionalfeatures
some essential features required to activate a cer-
enhance the overall learning experience and provide a
tain competence are missing.
more comprehensive evaluation of the student’s skills.
Definition 13 (Unfocused CTP) ACTPinwhich This type of problem can be modified to include the
some of the features are irrelevant to activate the missing features, optimising it to activate the relevant
skill it is intended to elicit. CT skills. This can be done by modifying the problem
statement, the system, or the artefactual environment.
These irrelevant features can create confusion and dis-
Definition 15 (Unsuitable CTP) ACTPthat
tractthestudentsfromfocusingontheessentialaspects
is not appropriate for its intended purpose, which
oftheproblem,hinderingtheoptimisationoftheprob-
lackssomeessentialfeaturesbuthassomeunwanted.
lem in activating the desired competencies and affect-
ing theaccuracy ofthe assessment.An unfocusedCTP
should be revised to remove these unnecessary features Thistypeofproblemmakesitdifficultorimpossibleto
to improve its effectiveness. effectively used to assess certain CT competencies and
selbairaV srotarepO secneuqeS snoititepeR slanoitidnoC snoitcnuF msilellaraP stnevE
elbatteser
metsyS
elbatteser
ton
metsyS
elbavresbo
)yllaitrap(
metsyS
elbavresbo
ton
metsyS
dnuof
eb
ot etats
lanfi
ro
laitinI
dnuof
eb
ot mhtiroglA
ytilanidrac
eno-ot-enO
ytilanidrac
eno-ot-ynaM
stnemele
ticilpxE
stnemele
ticilpmI
stnemele
deniartsnocnU
stnemele
deniartsnoC
tsefinam
mhtiroglA
tnetal
mhtiroglA
nettirw
mhtiroglA
nettirw
ton
mhtiroglA12 GiorgiaAdornietal.
it would require too many changes to be useful, and puter science concepts through hands-on and tangible
it may be better to design or choose another problem activities before they are introduced to more abstract,
instead. technology-basedactivities(Belletal.2009).Examples
Additionally, Table 6 can be used when creating or of unplugged CTPs include puzzles, games, and other
choosing a new CTP to assess specific CT competen- activities that involve manipulating physical materials,
cies. The first step, in this case, would be to define the such as blocks or cards.
skills to be evaluated and then use the table to list the
necessary features and those that are not needed. The
3.1.1 Cross Array Task
table can also be used to find existing problems that
match the list of characteristics or to design a new ac-
TheCrossArrayTaskisanunpluggedactivitydesigned
tivity from scratch.
by Piatti et al. (2022) using the CT-cube to assess the
developmentofalgorithmicskillsincompulsoryschools.
3 Results
To examine and validate our method in-depth, we ap- support
plied the proposed framework to a range of computa- schema
tional thinking (CT) activities that are widely recog-
nised as representatives in educational settings. We fo- colouring
schema
cused on three categories of computational thinking
problems (CTPs), unplugged, robotic, and virtual ac-
tivities, to provide a more nuanced understanding of
each type of activity’s unique features and challenges.
The selection of activities serves as a means to demon-
strate the effectiveness and practicality of the frame-
reference
work and is not exhaustive. Through this analysis, we schema
aim to provide a comprehensive account of the frame-
work’s applicability and identify best practices and ar- screen
eas for improvement in the design and assessment of Fig. 5 The Cross Array Task activity adapted from Pi-
CT activities, with the ultimate goal of contributing to atti et al. (2022). The task requires the problem solver to in-
struct the agent to reproduce a reference schema solely through
the field of CT education.
verbalcommunication,withtheoptionofsupplementinginstruc-
ForeachCTPpresentedinthissection,weprovided tions via gesturing on a support schema if deemed necessary. A
in Appendix B the graphical template used for their removablescreenseparatestheparticipantandresearchertoreg-
analysis, describing the component and the character- ulatepotentialvisualcues.
istics of the CTP, and the table that summarises the
relationship between the characteristics of the CTPs
and the CT competences the that can be activated or
Components TheCrossArrayTask,illustratedinFig.5,
not.
involves a student and a researcher in a classroom set-
ting, seated at a table and separated by a removable
3.1 Unplugged activities screen. The student has to communicate an algorithm
tocolourawhitecrossarraytomatchareferenceschema.
In the context of CT, an unplugged activity is an ac- – Problem solver: the student who has to communi-
tivity that does not involve the use of a computer or cate an algorithm corresponding to the sequence of
technology (Brackmann et al. 2017; Del Olmo-Muñoz instructions to reproduce the colouring of the ref-
etal.2020).Asperourframework,unpluggedactivities erence schema. The artefactual environment com-
refer to CTPs where the agent is a human rather than prises cognitive tools such as the support and the
a virtual or robotic agent. These activities have a com- colouring schemes, available to the problem solver
monfeatureofinvolvingphysicalandnon-technological to reason about the task. Additionally, the prob-
artefactualenvironments,astheyrequiremanipulating lem solver can interact with the system to com-
physical objects rather than using technology for ma- municate the algorithm. This can be achieved us-
nipulation. Unplugged activities are designed to help ing a natural language such as the voice (symbolic)
studentsdevelopCTskillsoftenrelatedtoproblemset- or gestures (embodied) on the empty cross array.
ting,suchaspatternrecognitionandfundamentalcom- Moreover, by removing the screen that separates
tnegA solver
PronlemAtheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 13
the problem solver from the agent, he can have vi- Enablingfeaturesforcompetenciesdevelopment There-
sual feedback (embodied) of the cross array being lationship between features and skills is summarised in
coloured. Appendix B in Table B.1. This paragraph explores the
– Agent:theresearcher,executoroftheproblemsolver’s enabling characteristics that support the development
instructions,responsibleforfillingthecolouringschema of competencies within the task.
according to the problem solver’s algorithm. The – Problem setting: all competencies can be activated
agent’s actions are not resettable. thanks to the presence of variables, sequences, rep-
– Environment: the cross array to be coloured, whose etitions and functions in the tool functionalities.
state is described by the colour of each dot (white, The presence of many tool functionalities, the non-
yellow, blue, green, or red). resettability of the system and the algorithm rep-
– Task: find the algorithm. The system’s state is de- resentation positively affect and boost problem set-
fined by the colouring cross status, initially white ting skills. The system observability supports data
and, at the end the same as the reference schema. collection and pattern recognition. The one-to-one
The algorithm is the set of agent instructions to cardinality, in addition, stimulates decomposition.
achieve this transformation. Theexplicitandunconstraineddefinitionofthetask
elements also promotes pattern recognition, decom-
Characteristics Thecharacteristicsofthisactivityhave position and abstraction.
been analysed using the graphical templates shown in – Algorithm: all competencies associated with the al-
Fig. B.1 in Appendix B. gorithmic concepts enabled by the tool functionali-
ties, meaning variables, operators, sequences, repe-
– Tool functionalities:voiceandgesturesprovidevar-
titions and functions, can be activated in all three
iousfunctionalitiesassociatedwithalgorithmiccon-
artefactual environments and promote one another.
cepts,suitabletodesignthealgorithm,including(i)
The form of representation of the algorithm, the
variables canrepresentdifferentcoloursofthecross
system observability, and the explicit and uncon-
array dots; (ii) operators are used to change the
strained definition of the task elements further en-
colourofthedotsperformingactionssuchascolour-
hancethese.Theone-to-onecardinalityhelpstoen-
ing a dot, a row, a square and so on; (iii) sequences
hance some of these skills as well.
determine the order in which the actions should be
– Assessment: since the system is not resettable, no
executedtoachievethedesiredoutcome;(iv)repeti-
assessment skills can be developed.
tions allow for repeating specific sequences of oper-
ations,suchascolouringthefirstcolumninredand
repeating it every two columns; (v) functions con- Inhibiting features for competencies development
sist of operations that perform a specific task and – Conditionalsandevents:non-activableasthesefunc-
can be applied to different inputs, for example, cre- tionalitiesareunavailableintheplatform.Awayto
atingapatternofalternatingredandyellowdotsin make conditionals available in the tool functionali-
asquareandapplyingittodifferentpositionsofthe tieswouldbeallowingtheproblemsolvertochange
cross array; (vi) parallelism involves executing mul- adotcolour,forexamplebycommunicatinginstruc-
tiple actions simultaneously and can be associated tions such as: “if the dot is red, then colour it yel-
with using symmetries to describe the pattern. low”.Bydoingthis,theproblemsolverengageswith
– System resettability: the system is not resettable theconceptofconditionalsandcandeveloptheiral-
since it is impossible to reverse the agent’s actions. gorithmic skills. The completion of each row in the
– System observability:thesystemispartiallyobserv- crossarraycanbeconsideredanevent.Theproblem
able since the cross array being coloured by default solvercanspecifythattheywanttofillthecrossline
isnotseenuntiltheendofthetaskunlesstheprob- by line, and once a line is complete, the researcher
lem solver demands otherwise. will move on to the next line. This allows the prob-
– Taskcardinality:thetaskhasaone-to-onemapping, lem solver to list only the sequence of colours with-
with given one initial and one final state, and an out repeating the instructions for where to go. The
algorithm to be found. change in the environment (completing a row) trig-
– Task explicitness: all elements are given explicitly. gers the researcher to move to the next row. Us-
– Task constraints: the algorithm is unconstrained. ingconditionals andeventscan greatlyenhance the
– Algorithm representation: the algorithm is repre- complexity of the solutions that can be generated
sented through voice commands or gestures. It is and help develop advanced CT skills.
consideredmanifest,becauseitcanbeseen,butnot – Assessment skills: the inability to reset the system
writtensinceitisnotstoredinapermanentformat. impairsthedevelopmentofthestudent’sskills.One14 GiorgiaAdornietal.
possible solution to this issue is enabling the stu- Components (part 1) The first part of the activity is
dent to reset the colouring scheme using a voice illustrated in Fig. 6.
command. This would return the schema to its ini- – Problem solver: the student who writes the set of
tial blank state, allowing the student to start the instructions for the agent to follow. The artefactual
task from the beginning and practice their assess- environment comprises cognitive tools such as the
mentskills.Todevelopsystemstateverification,itis reference schema (embodied) and the support and
alsoessentialtonotrevealtheinitialorfinalstates. the set of arrow symbols (embodied) available to
Moreover, constraints should be imposed on the al- the problem solver to reason about the task. Ad-
gorithm to develop constraint validation skills, for ditionally, the problem solver can interact with the
example, limiting the use of specific operators or system to communicate the algorithm, writing the
the number of times they can be used, allowing the arrow symbols in the steps array (symbolic). These
problemsolvertodeveloptheabilitytothinkabout can be considered as a programming language and
the constraints and limitations in their algorithms. its programming platform.
– Agent: the other student who executes the problem
3.1.2 Graph Paper Programming solver’s instructions by filling the colouring schema
accordingly. Its actions are not resettable.
Graph Paper Programming is an unplugged activity – Environment: the schema to be coloured, described
from Code.org (2015), a nonprofit organisation that by the colour of each square (white or black).
aims to provide students with the opportunity to learn – Task: find the algorithm. The system’s state is de-
computer science as part of their education, offering finedbythecolouringschemastatus,initiallywhite
various activities designed to increase diversity in com- and, at the end the same as the reference schema.
puter science and reach students at their skill level and The algorithm is the set of agent instructions to
in ways that inspire them to continue learning. achieve this transformation.
The Graph Paper Programming activity can be di-
vided into two parts, each with a different task. In the
Read the program above and draw the image that it describes.
first part, the student is given a 4×4 grid of white and
black squares and asked to write explicit instructions
for another classmate to reproduce the image without
lettingtheotherpersonseetheoriginaldrawing.Inthe
second part, the same student follows the instructions program
they previously wrote to reproduce the image. By di-
viding the activity into these two parts, we can gain
a deeper understanding of the cognitive processes and
skills involved in each task and understand the poten-
colouring schema
tial for this activity to support the development of CT
Fig. 7 The second part of the Graph Paper Program-
abilities.
ming (GPP) activity, adapted from Code.org (2015).
The task requires the problem solver to fill the empty colouring
schemafollowingtheprogramprovided.Thefigureillustratesthe
Use the symbols to write a program that would draw the image. expectedfinalstate.
Components (part 2) Thesecondpartoftheactivityis
reference schema symbols illustrated in Fig. 7.
– Problem solver and Agent: they overlap and corre-
spond to the student who follows the instructions
to recreate the image. The only action the agent
steps array can perform is to paint the colouring schema with-
out the possibility of undoing it. The artefactual
Fig. 6 The first part of the Graph Paper Programming
(GPP) activity, adapted from Code.org (2015).Thetask environment comprises cognitive tools such as the
requirestheproblemsolvertoinstructtheagenttoreproducethe colouring schema (embodied) available to the prob-
referenceschemawithinstructionswrittenonastepsarrayusing
lem solver to reason about the task. As before, the
apredefinedsetofarrowsymbols.
arrowsymbolsonthestepsarray(symbolic)arealso
used to interact with the system. Moreover, beingAtheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 15
theagentandtheproblemsolveroverlapped,visual The presence of many tool functionalities, the non-
feedback (embodied) is always given. resettability of the system and the algorithm rep-
– Environment: the schema to be coloured, described resentation positively affect and boost problem set-
by the colour of each square (white or black). ting skills. In the first part of the activity, the in-
– Task: find the final state. The system’s state is de- ability to observe the systems further supports the
finedbythecolouringschemastatus,initiallywhite. development of all these competencies, while in the
However, the final state is not given and has to be second part, the system observability sustains only
found using the provided algorithm. data collection and pattern recognition. The one-
to-one cardinality in addition stimulates data col-
Characteristics Thecharacteristicsofthisactivityhave
lection and pattern recognition but also decompo-
been analysed using the graphical template presented
sition. The explicit and unconstrained definition of
in Appendix B. Fig. B.2 refers to the first part of the
thetaskelementsalsopromotespatternrecognition,
activity, while Fig. B.3 refers to the second.
decomposition and abstraction.
– Tool functionalities: in both parts of the activity,
– Algorithm: the competencies associated with algo-
the tools provide various functionalities associated
rithmic concepts, including variables, operators, se-
with algorithmic concepts suitable to design the al-
quences, repetitions, and functions, can be devel-
gorithm,including(i)variables canrepresentdiffer-
oped in the first part of the activity through the
entcoloursoftheschemasquares;(ii)operators cor-
useofthetoolfunctionalitiesinallartefactualenvi-
respond to the arrow symbols used to instruct the
ronments. However, in the second part of the activ-
agenttomovefromonesquaretoanother,determin-
itywherethealgorithmisgiven,thesecompetencies
ingwhetherasquareiscolouredblackorwhite;(iii)
cannot be developed in the formal environment but
sequences determine the order in which the actions
only in the embodied and symbolic environments.
should be executed to achieve the desired outcome;
The algorithm representation, the system observ-
(iv)repetitions allowforrepeatingspecificsequences
ability, and the explicit and unconstrained defini-
of operations; (v) functions can be represented by
tion of the task elements further enhance all these
a group of instructions that perform a specific task,
skills.
such as colouring a particular shape on the grid,
– Assessment: since the system is not resettable, no
that can be used multiple times.
assessment skills can be developed.
– System resettability: the system is not resettable
since it is impossible to reverse the agent’s actions.
Inhibiting features for competencies development
– Systemobservability:inthefirstpartoftheactivity,
– Conditionals, parallelism and events: non-activable
the system is not observable, as there is no visual
as these functionalities are unavailable in the plat-
feedback about the agent’s actions; in the second
form. Activating conditionals would be allowed by
part of the activity, the visual feedback consented
providing a new arrow symbol that determines the
thankstotheproblemsolverandagentoverlapping,
colour of a square based on certain conditions, for
makes the system totally observable.
example,thecolourofthesquareabove.Parallelism
– Task cardinality:bothtaskshaveaone-to-onemap-
can be enabled by operating a new arrow symbol
ping, with one initial state, final state and algo-
instructingtheagenttocolourtwosquaressimulta-
rithm.
neously. An event that could be taken into account
– Task explicitness: the task elements are explicit.
is that every time a cell is filled with black, the in-
– Task constraints: the final state is unconstrained.
structions in the steps array move to the next row
– Algorithm representation: the algorithm is manifest
rather than continuing from that specific cell.
andwritten,representedthroughthearrowsymbols
– Assessment skills: the inability to reset the system
written in the steps array.
impairs the development of the student’s skills. In
Enabling features for competencies development This the first part of the activity, where the problem
paragraphexplorestheenablingcharacteristicsthatsup- solveriswritingthesetofinstructionsfortheagent,
portthedevelopmentofcompetencieswithinthisCTP. to solve this issue the system can be reset by sim-
The relationship between features and skills in the two ply starting over with a new blank graph array and
parts of the activity are summarised in Appendix B in writing a new set of instructions, or simply offering
Tables B.2 and B.3. the possibility to use pencil and eraser. In the sec-
– Problem setting: all competencies can be activated ond part of the activity, where the problem solver
thanks to the presence of variables, sequences, rep- and the agent are the same people, the system can
etitions and functions in the tool functionalities. be reset by either using a new colouring schema or16 GiorgiaAdornietal.
erasing the previously produced image and starting – Problem solver and Agent: they overlap and corre-
over. spond to the player who must determine the most
efficientsequenceofmovestoremoveallthepegson
3.1.3 Triangular Peg Solitaire the board. The only action the agent can perform
is to move the pegs on the board without the pos-
Triangular Peg Solitaire is a strategy game that can sibility of undoing it. The artefactual environment
be played in two variants: the classic, on a triangu- comprises tools for reasoning and interacting with
lar board with 15 holes and pegs, and the paper and the system. Being the agent and the problem solver
pencil modality. The board is initially filled with pegs, overlapped, visual feedback (embodied) of the state
except for one hole, which is left empty (see the top of the board is always given. Moreover, the prob-
of Fig. 8). This game is often used to teach problem- lem solver can physically interact with the system
solving, logic and strategy skills, requiring the player by moving the pegs on the board (embodied).
to determine the most efficient sequence of moves to – Environment: the wooden board, described by the
remove all the pegs on the board except one. Research number of pegs on it.
has shown that the second activity variant can effec- – Task: find the algorithm. The system’s initial state
tively promote problem-solving skills even in older stu- is the board with 14 pegs. The final state is the
dents (Barbero 2020). The game is played by following boardwithonepeg.Thealgorithmtobefoundspec-
the rules, which dictate that a peg can only be moved ifies the sequence of moves to remove all the pegs.
by jumping over a neighbouring peg on the diagonal or
horizontal lines (see the bottom of Fig. 8). By analy-
singthetwoversionsofthisgame,weaimtounderstand
theirimpactonpromotingproblem-solvingandcritical
thinking skills, evaluating advantages and limitations
and providing insights into how they can be used for
CT development.
vacate b3
b5-b3, d4-b4, d5-b5, b2-d4, a2-c4, a4-a2,
e5-c3-c5, b5-d5, a1-a3-c5, d5-b5, a5-c5
11 moves
Fig. 9 A Triangular Peg Solitaire solution adapted
from Bell (2007, 2008) and Barbero and Gómez-Chacón
(2018).Thetaskrequirestheproblemsolvertosolvethegame
using paper and pencil by meticulously documenting their en-
tire thought process. The solution can be presented in multiple
ways,suchasgraphicallyusingaCartesiannotation(top)orby
numberingtheboxesprogressivelyandexpressingthemovements
used(bottom).
Components (paper & pencil variant) The first variant
of the activity, illustrated in Fig. 9, requires solving
Fig. 8 The Triangular Peg Solitaire. The game is played the game with paper and pencil by documenting the
onaboardcontaining15spots,with14pegsplacedonitatthe
thought process and devising a winning strategy.
startofthegame(top).Thetaskrequirestheproblemsolverto
– Problem solver and Agent: they overlap and corre-
strategicallymoveonepegatatimetoeliminateallotherpegson
the board until only one remains (bottom), jumping a peg over spond to the player who must determine the most
aneighbouringpegonthediagonalorhorizontallines,withthe efficient sequence of moves to remove all the pegs
constraintthattheremustbeafreelandingspotforthejumping
on the board. The only action the agent can per-
peg(adaptedfromBerlekampetal.(2004)).
form is to write the thinking process and strategy
to remove the pegs on the board without the pos-
sibility of undoing it. The artefactual environment
Components(boardvariant) Thefirstvariantoftheac- comprises tools for reasoning and interacting with
tivity,illustratedinFig.8,requiressolvingthegameon the system. Being the agent and the problem solver
a physical board. overlapped, visual feedback (embodied) of the stateAtheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 17
is always given. Moreover, the problem solver can since the task instruction does not specify which is
physically interact with the system by writing the the position of the last remaining peg.
thinking process (symbolic). – Task constraints: the algorithm is constrained by
– Environment: the board drawn in the thinking pro- thegameruleswhichdictatethatapegcanonlybe
cess, described by the number of pegs on it. moved by jumping over a neighbouring peg on the
– Task: find the algorithm. The system’s initial state diagonal or horizontal lines and that there must be
is the board with 14 pegs. The final state is the a free landing spot for the jumping peg.
boardwithonepeg.Thealgorithmtobefoundspec- – Algorithm representation: in the board variant of
ifies the sequence of moves to remove all the pegs. the game, the algorithm is latent since it is per-
formed physically through the player’s moving the
pegs, it is not permanently recorded and cannot be
revisited.Ontheotherhand,inthepaperandpencil
Characteristics Thecharacteristicsofthisactivityhave
modality,theplayerwritesdownthealgorithm,and
beenanalysedusingthegraphicaltemplatepresentedin
itbecomesapermanentrecordthatcanbereviewed
Appendix B. In particular, Fig. B.4 refers to the board
andusedasareference.Thisallowstheplayertoex-
versionoftheactivity,whileFig.B.5referstothepaper
periment freely and change their approach without
and pencil variant.
having to start over each time. The written repre-
– Tool functionalities:inbothvariantsoftheactivity,
sentation of the algorithm in the paper and pencil
the tools provide various functionalities associated
modality provides a clear and concrete way to rep-
with algorithmic concepts suitable to design the al-
resent the player’s thought process and strategy.
gorithm, including (i) variables can represent the
state of the board and in particular the number of
pegs on it; (ii) operators correspond to the moves Enabling features for competencies development This
madebytheplayertochangethestateoftheboard paragraphexplorestheenablingcharacteristicsthatsup-
by removing or moving pegs from one hole to an- portthedevelopmentofcompetencieswithinthisCTP.
other; (iii) sequences determine the order of moves The relationship between features and skills in the two
made by the player; (iv) repetitions allow for re- activity variants are summarised in Appendix B in Ta-
peating certain moves or sequences of moves; (v) bles B.4 and B.5.
conditionals refer to the possible decisions that the – Problem setting: all competencies can be activated
plays may need to make, such as where to jump in in both variants of the game thanks to the presence
one direction or another; (vi) functions can be rep- of variables, sequences, repetitions and functions in
resented by a group of instructions that perform a the tool functionalities. The presence of many tool
specific task, for example, a function to delete pegs functionalities, the non-resettability of the system
in a row which can be applied to several rows. (in the board version of the game), the implicit
– System resettability: in the board variant, the sys- and constrained definition of the task elements and
tem is not resettable meaning that once the player the algorithm representation positively affect and
has made a move, it cannot be undone. However, boost problem setting skills. The system’s observ-
the system is resettable in the paper and pencil ability sustains data collection and pattern recogni-
version, even though the player’s actions are not tion skills, while the one-to-one cardinality and the
reversible. This is because the informal setting, in resettability of the system (in the paper and pencil
which the player documents their thought process, variant of the game) also stimulate decomposition.
allows for experimentation and exploration without – Algorithm: the competencies associated with algo-
fearofjudgementornegativeconsequences.Inother rithmic concepts, including variables, operators, se-
words, the player can freely make mistakes, express quences,repetitions,conditionalsandfunctions,can
uncertainty, and experiment with different strate- be developed in all artefactual environments. The
gies without permanently impacting the game. system observability, the implicit and constrained
– System observability: in both variants, the system definition of the task elements, and the manifest
is observable because the agent and problem solver, written representation of the algorithm (in the pa-
thatoverlap,canseethestateoftheboardanytime. per and pencil variant of the game) can further en-
– Task cardinality: both activity variants have a one- hance these skills.
to-onemapping,withoneinitialstate,onefinalstate – Assessment: no assessment skills can be developed
and one algorithm. intheboardvariantoftheactivitysincethesystem
– Task explicitness: the initial state of the system is is not resettable. In the paper and pencil version of
givenexplicitly,whilethefinaloneisgivenimplicitly the activity, algorithm debugging can be activated18 GiorgiaAdornietal.
in all artefactual environments due to the resetta- alignwiththestandardinterfacesusedbyorganisations
bility of the system and the manifest and written universallyrecognisedinthiscontext,suchasCode.org,
representation of the algorithm; constraint valida- whichutilisevisualblockstoteachcoding.Thetestcon-
tion can be developed because there are constraints sists of 28 multiple-choice questions. However, we will
on the algorithm that can be verified since the sys- only analyse two.
tem is resettable; optimisation can be activated as
it only requires the resettability of the system; gen-
eralisation can be activated through the system’s The instructions should make the artist draw the following
rectangle once (50 pixels wide and 100 pixels high).
resettabilityandthepresenceofvariablesandfunc-
In which step of the instruction is there a mistake?
tions. Tool functionalities as well as the system ob-
servability help develop these competencies.
step 1
Inhibiting features for competencies development
step 2
– Parallelism and events:non-activableasthesefunc-
step 3
tionalitiesareunavailableintheplatform.Itispos-
step 4
sible to develop parallelism and events in the game
by incorporating a variant where multiple pegs can
be moved simultaneously or by introducing multi-
ple players who can make moves simultaneously. A Fig. 10 Item 7 of the Computational Thinking Test
way to incorporate events would be to use technol- (CTt)adaptedfromRomán-Gonzálezetal.(2017b).The
task requires the problem solver to correct a set of instructions
ogy such as a computer program or app to play the
thatshouldmaketheagentdrawarectangle.
game,creatingprogrammedeventsthattheplayer’s
actions could trigger. For example, if the player re-
moves a certain peg, the computer could trigger an
event that changes the board’s appearance or dis-
plays a message. However, it is important to note Components (item 7) The first CTP analysed, called
that these changes would result in a different game “item7”,isdepictedinFig.10andhasbeendesignedto
withadifferentsetofobjectives andchallengesand evaluate the student’s ability to identify and fix errors
might not necessarily have the same educational incode,inascriptthatdoesnotinvolvecomputational
benefits as the original Triangular Peg Solitaire. nesting concepts but only the concept of repetitions.
– Assessment skills: the inability to reset the system – Problemsolver:thestudenttakingthetestpresented
impairs the development of the student’s skills in with a wrong code script that must be fixed. The
the first variant of the activity. In the paper and artefactualenvironmentcomprisesonlycognitivetools,
pencilversion,onlysystemstateverificationisnon- thusisimpossibletointeractwiththesystem,which
activable because both the initial and final states isconsideredstatic.Thereasoningtoolprovidedin-
are provided. The task can be adjusted by modify- cludes the sketch in the problem description (em-
ing the game such that only the initial state is pro- bodied) and the visual blocks interface (symbolic),
vided and the final state is unknown. For example, whichallowsthestudenttothinkabouttheinstruc-
letting the player determine the specific peg posi- tions and imagine to test different solutions.
tionforthelastpegThiswouldmakethetaskmore – Agent:theartistresponsiblefordrawingtherectan-
challenging and require the player to develop their gle according to the instructions provided. It is an
skills in system state verification. abstract representation, not a physical entity that
can be observed or interacted with. The actions it
3.1.4 Computational Thinking Test (CTt) canperformaremovingandturning,consideredre-
versible since they must be corrected.
The Computational Thinking Test (CTt) is an assess- – Environment: the place where the imaginary rect-
menttooldesignedtoevaluatetheCTskillsofstudents angle should be drawn, described by the number of
between the ages of 12 and 13 (Román-González 2015; drawn rectangle segments, length and orientation.
Román-Gonzálezetal.2017b,a;Román-Gonzálezetal. – Task: find the algorithm. The system’s initial state
2018). It aligns with the work of researchers such as istheimaginaryrectanglenotyetbeingdrawn,while
Brennan and Resnick (2012); Kalelioğlu (2015), who thefinalstateisthe50×100pixelsrectangledrawn.
have identified key computational concepts related to The algorithm is not valid, for this reason, the final
algorithmic skills. Additionally, the CTt is designed to and correct version of it has to be found.Atheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 19
Which instruction take Pac-Man to the ghost by the path – Task: find the algorithm. The system’s initial state
marked out? corresponds to the Pac-Man and the Ghost in their
startingposition,whileinthefinalstate,Pac-Manis
infrontoftheGhostandhascrossedthepredefined
path. The algorithm is not given since four sets of
codes are provided, and the correct one has to be
found to reach the desired outcome.
Characteristics Thecharacteristicsofthisactivityhave
been analysed using the graphical template presented
in Figs. B.6 and B.7 in Appendix B.
option A option B
– Tool functionalities:inbothvariantsoftheactivity,
the tools provide various functionalities associated
with the visual blocks interface, including (i) vari-
ables;(ii)operators correspondtotheagentactions
containedintheblocksinturquoise;(iii)sequences;
(iv) repetitions represented by the loop in the pink
blocks; (v) conditionals described by the if state-
ments in the blue blocks (only in the second activ-
ity); (vi) functions.
– System resettability:eveniftheproblemsolvercan-
not interact with the system, the system is reset-
table in both activities since the algorithm has to
option C option D
be correct or selected from a set.
Fig. 11 Item 14 of the Computational Thinking Test – Systemobservability:inbothtests,thesystemisnot
(CTt)adaptedfromRomán-Gonzálezetal.(2017b).The
observablebecausetheagentsinquestion,theartist
task requires the problem solver to select the correct set of in-
and Pac-Man, are imaginary entities and their ac-
structions to make the agent cross a predefined path to reach a
desiredposition. tions,suchasdrawingormoving,arenotphysically
visible.Theproblemsolvermustrelyontheinstruc-
tions provided to understand the actions taken by
theagent,andcannotobservetheiractualoutcome.
Components(item14) ThesecondCTPanalysed,called
– Task cardinality:bothCTPhaveaone-to-onemap-
“item 14”, is depicted in Fig. 11 and has been designed
ping, with one initial state, final state and algo-
to evaluate the student’s ability to organise a set of
rithm.
commands in a logical and orderly manner in a script
– Task explicitness: all elements are given explicitly.
that does not involve computational nesting concepts
– Task constraints: the algorithms in both tasks are
but only two specific computational concepts: repeti-
constrained since the computational concepts ad-
tions and conditionals.
dressed are already determined and limited to the
– Problem solver: the student taking the test is given specific notions presented.
four sets of code scripts from which he must select – Algorithm representation: the algorithm is manifest
theappropriatesetofmovinginstructions.Thearte- and written in both activities.
factual environment comprises only cognitive tools,
including the sketch of the maze in the problem de- Enabling features for competencies development This
scription(embodied)andthefoursetsofinstruction paragraphexplorestheenablingcharacteristicsthatsup-
in the form of visual blocks (symbolic), thus is im- portthedevelopmentofcompetencieswithinthisCTP.
possible to interact with the system. The relationship between features and skills in the two
– Agent:Pac-Man,arepresentationofanabstracten- activity variants is summarised in Appendix B in Ta-
tity that can move in the maze to reach the Ghost bles B.6 and B.7.
followingthepredefinedpatternmarkedout.Itsac- – Problem setting: all competencies can be activated
tions are reversible since they must be corrected. inbothactivitiesthankstothepresenceofvariables,
– Environment: the maze, described by the Pac-Man sequences,repetitionsandfunctionsinthetoolfunc-
and the Ghost positions, and the path to be fol- tionalities. The presence of many tool functionali-
lowed. ties, the system’s non-observability, the algorithm’s20 GiorgiaAdornietal.
constrained definition, and its written representa- like Blockly or Scratch (Shin et al. 2014). Some plat-
tionpromotethedevelopmentofallproblemsetting formsalsoallowforembodiedphysicalinteractions,en-
skills. The system resettability, the one-to-one car- ablinguserstomanipulatetherobotthroughtouchbut-
dinality and the explicit representation of elements tonsortangiblesymbolsthatarescannedandexecuted
support other competencies. (Bers and Horn 2010; Mussati et al. 2019).
– Algorithm: the competencies associated with algo- In this section, we aim to analyse various activities
rithmicconceptsprovidedbythetoolfunctionalities basedondifferenttypesofagents,includingtheThymio
can be developed in all artefactual environments. II, the Ozobot, and the Micro:bit.
The non-observability of the system, the explicit
andconstraineddefinitionofthetaskelements,and 3.2.1 Thymio Lawnmower Mission
themanifestwrittenrepresentationofthealgorithm
ThymioLawnmowerMissionisaneducationalrobotics
can further enhance these skills.
activity designed by Chevalier et al. (2020) to promote
– Assessment: algorithm debugging can be activated
thedevelopmentofstudents’CTskillsthroughtheThymio
in all artefactual environments due to the resetta-
II robot. The Thymio II, for instance, is a widely used
bilityofthesystemandthewrittenalgorithm;since
educational robot equipped with various sensors, in-
the system can be reset, also the constraints on the
cluding proximity sensors, an accelerometer, a remote
algorithmcanbecheckedandcorrected,allowingfor
controlreceiver,motors,aspeaker,andLEDs,distributed
the development of constraint validation; similarly
throughout its body (Riedo et al. 2013; Shin et al.
optimisationcanbeactivatedsincetheresettingca-
2014). The authors aimed to address the issue of stu-
pabilityissufficient;generalisationcanbedeveloped
dents spending excessive time programming and not
thankstothesystem’sresettabilityandthepresence
enough time problem-solving, referred to as the trial-
of variables and functions. The tool functionalities
and-error loop, by conducting an instructional inter-
availablefurtherencouragethedevelopmentofthese
vention on two groups of primary school students.
competencies.
Components IntheThymioLawnmowerMission,illus-
Inhibiting features for competencies development
trated in Fig. 12, the Thymio II robot must systemati-
– Conditionals:non-activableinthefirstactivitysince
cally traverse all green lawn squares, much like a lawn-
this functionality is not present in the visual blocks
mower would mow a lawn.
provided to the students.
– Problem solver: the group of students performing
– Parallelism and events:non-activableinbothactiv-
the task who must program the agent’s lawnmower
ities,asbefore,becausetheyarenotavailableinthe
behaviour. The artefactual environment comprises
visual blocks provided to the students. To activate
toolsdesignedforreasoningandinteraction,includ-
theseskills,thevisualblocksmustincludethetools
ingagraphicalprogrammingenvironmentcalledVPL
forcreatingparallelismandeventsinthealgorithm.
(symbolic), which allows for the creation of sensor-
– System state verification:non-activablebecausethe
action relationships to determine the robot’s be-
initial and final states are provided.
haviour, the agent (embodied) and the visual feed-
back (embodied).
3.2 Robotics activities – Agent:theThymioII,whoseactionsconsistinmov-
ingaroundtheplayground,bychangingvelocityand
In robotics, educational robotics and physical comput- orientation, and using sensors to detect obstacles.
ing activities involve using physical robotic hardware All actions are considered irreversible.
equippedwithcontrollers,sensors,andactuators.These – Environment: the playground, i.e., a lawn area sur-
robotic agents are programmed to perform specific be- roundedbyafence,dividedintoeightgreensquares
haviours in response to the environment. To achieve and one grey square, the garage. Its state is defined
this, problem solvers are typically provided with a pro- by the grass condition or the number of squares
grammingplatformallowinginteractionwiththerobot. passed over by the agent.
Therearenumerouscommerciallyavailableprogram- – Task: find the algorithm. The initial state is the
ming platforms for educational robots, each offering lawnwithtallgrass,meaningtherobotisnotpassed
its own set of hardware and programming platforms over any of the squares that compose it. The final
(Bravo et al. 2017). The agents can be programmed stateisthesamelawnwiththegrassmowed,mean-
using formal textual programming languages, such as ing the robot passes over all green squares. The al-
Python (Noone and Mooney 2018), or symbolic visual gorithm is the set of moving actions to reach the
programminglanguages,whichareoftenbasedonblocks, system’s final state from the initial.Atheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 21
Fig. 12 The Thymio Lawnmower Mission adapted from Chevalier et al. (2020). A group of pupils must program the
ThymioIIrobottopassoveralleightgreenlawnsquaresandavoidthefence(left).Aspecialvisualprogramminglanguageplatform,
withgraphicaliconsthatarestraightlyinterpretable,isusedforthistask(right).
Characteristics IntheThymioLawnmowerMission,the rectly interact with the agent and cannot modify
students who participated in the activity were divided the algorithm since it has to be first written and
into two groups, the control group and the test group, then executed.
to which different conditions were imposed. The con- – Systemobservability:theplatformprovidesreal-time
trol group was allowed to complete the task without visual feedback, making the system observable.
any constraints. In contrast, the test group was sub- – Taskcardinality:thetaskhasaone-to-onemapping,
jected to an instructional intervention that blocked the with an initial and final state and an algorithm.
programminginterfaceatcertaintimestoovercomethe – Task explicitness:theelementsofthetaskaregiven
trial-and-error loop. As a result, the two activity vari- explicitly, as the student is provided with clear in-
ants have distinct characteristics, analysed using the structions on what the outcome should look like.
graphical templates shown in Figs. B.8 and B.9 in Ap- – Task constraints: the algorithm is unconstrained.
pendix B. – Algorithm representation: the algorithm is written
in the workspace and expressed by the set of blocks
– Tool functionalities: the system provides a compre-
and their connections.
hensive set of tools for the problem solver to create
and control the behaviour of the agent to solve the
task, including (i) variables such as the values of Enabling features for competencies development This
sensors or the state of the robot; (ii) operators rep- paragraphexplorestheenablingcharacteristicsthatsup-
resentthebasicactionsthattheagentcanperform; port the development of competencies within the task.
(iii)sequences arenotrepresentedbyaspecificblock The relationship between features and skills in the two
intheVPLinterface,butcanbecreatedbyarrang- activity variants are summarised in Appendix B in Ta-
ing blocks in a specific order; (iv) functions are not bles B.8 and B.9.
represented by blocks in the VPL but refer to the – Problem setting: all competencies can be activated
possibility of conceptually grouping blocks of code thanks to the presence of variables, sequences and
associated with a particular behaviour to produce functions in the tool functionalities. The presence
outputs given inputs; (v) events are directly rep- of many tool functionalities positively affects and
resented in the graphical interface by sensor-action boostsproblemsettingskills.Themanifestandwrit-
relationships, allowing the robot to perform actions ten representation of the algorithm can further en-
inresponsetostimuli,suchasdetectinganobstacle. courage the development of these skills. In the con-
– System resettability: in the control group, the prob- trol group, being the system resettable, data col-
lem solvers can reset the system directly by phys- lection, pattern recognition and decomposition are
ically moving the Thymio II agent in the environ- promoted, while in the test group, abstraction and
ment and restarting the task by repositioning it in data representation are also encouraged. The one-
the garage. On the other hand, those in the test to-one cardinality of data elements also facilitates
group do not have this option as they cannot di- data collection, pattern recognition and decompo-22 GiorgiaAdornietal.
sition. The system observability also supports data Mondadaetal.(2016)topromoteScience,Technology,
collection and pattern recognition. Engineering and Math (STEM) education in schools
– Algorithm: all competencies associated with the al- and encourage students towards careers in these fields.
gorithmic concepts enabled by the tool functionali-
Components The R2T2 activity, illustrated in Fig. 13,
ties, meaning variables, operators, sequences, func-
is a rescue operation on a Mars station, whose goal is
tions and events, can be activated in all three arte-
to assess the damage of the power plant and restart
factualenvironmentsandpromoteoneanother.These
the main generator by remotely controlling 16 Thymio
are further enhanced by the manifest and written
II robot. The activity is divided into five phases, each
algorithm representation, system observability, and
with a specific objective. In the first phase, the robots
theexplicitandunconstraineddefinitionofthetask
mustenterthestationandpushawayanobstacleblock-
elements. The one-to-one cardinality helps to de-
ingthemaindoor.Inthesecondphase,therobotsmust
velop variables and operators further.
stand on control spots to activate access to the gener-
– Assessment:regardingthecontrolgroup,algorithm
ator. In the third phase, the robots must look into the
debugging can be activated in all artefactual envi-
generatorthroughasmallwindow.Inthefourthphase,
ronments since the algorithm has to be found, the
therobotsmustturnonalightwhendetectingthegen-
system is resettable, and the algorithm is manifest
erator rotor using proximity sensors and off when it is
and written; optimisation can be developed thanks
no longer visible, thus estimating the generator speed.
totheresettabilityofthesystem;generalisationcan
In the final phase, the generator is restarted, and the
be activated through the system’s resettability and
mission is completed.
the presence of variables and functions. The tool
– Problem solver: the group of students performing
functionalities available and the system observabil-
the task who must program the agents’ behaviours
ity help develop these skills as well. On the other
to restart the main generator. The artefactual en-
hand,thesystemisnon-resettableinthetestgroup,
vironment comprises tools designed for reasoning,
and no assessment skills can be developed.
suchaspaperandpencilsandanotherrobotthatis
physically accessible. Tools available also to inter-
Inhibiting features for competencies development The
act with the system include the programming plat-
lack of specific features may hinder the development of
form (symbolic) with the two available program-
particular skills.
ming environments, VPL and ASEBA, a textual
– Repetitions,conditionalsandparallelism:non-activable
programming language (Magnenat et al. 2011), and
inbothcontrolandtestgroups,asthesefunctional-
the five webcams, installed around the playground,
ities are unavailable in the VPL programming plat-
provide a delayed continuous visual feedback (em-
form. Therefore, to develop these skills, it is nec-
bodied) through YouTube video streams.
essary to change the programming language to a
– Agent: the 16 remote-controlled Thymio II, which
textual programming language such as ASEBA.
can move around the playground accelerating and
– Algorithmdebugging:non-activableinthetestgroup
rotating,useproximitysensorsandturnsomelights
since the system is not resettable.
on and off. All actions are considered irreversible.
– Systemstateverification:non-activable,inbothcon-
– Environment:theplayground,i.e.,theMarsstation,
trol and test groups, because the initial and final
characterisedbydifferentdescriptorsusedinthedif-
statesofthesystemaregiven,andinthetestgroup,
ferentmissionstages,suchastheobstructionbythe
also because the system is not resettable.
obstacle, covering of the control spots and finally,
– Constraintvalidation:non-activable,inbothcontrol
the restart of the generator.
and test groups, due to the absence of constraints
– Task: find the algorithm. In the initial state, the
on the algorithm, and in the test group because the
generatorisnotworking,whileithasbeenrestarted
system is not resettable.
at the end. The algorithm is the set of moving ac-
– Optimisation: non-activable in the test group be-
tions to reach the system’s final state from the ini-
cause the system is not resettable.
tial.
– Generalisation: non-activable in the test group due
to the non-resettability of the system. Characteristics Fig. B.10 in Appendix B provides the
graphicaltemplateusedtoanalysethetaskcomponents
3.2.2 Remote Rescue with Thymio II (R2T2) and characteristics.
– Tool functionalities: the system provides a compre-
Remote Rescue with Thymio II (R2T2) is another col- hensive set of tools for the problem solver to cre-
laborative educational robotics activity, presented by ate and control the agent’s behaviour to solve theAtheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 23
Fig. 13 The Remote Rescue with Thymio II (R2T2) mission on Mars adapted from Mondada et al. (2016). Sixteen
worldwideteamsofpupilscollaboratewith16ThymiotorestartthemaingeneratorofasimulateddamagedpowerMarsstation(left)
infivephasesusingavisualprogramminglanguageortextualprogramminglanguageprogrammingplatforms(right).
task, depending on the programming environment cardinality,inadditiontotheseskills,stimulatesde-
used.VPLoffersthepossibilitytousevariables,op- composition. The explicit and unconstrained defi-
erators, sequences, functions and events. Addition- nition of the task elements also promotes pattern
ally, ASEBA offers control flows such as repetitions recognition, decomposition and abstraction.
and conditionals. Furthermore, parallelism is pos- – Algorithm:competenciesacrossallartefactualenvi-
sible since it refers to the ability to run multiple ronments can be triggered since the tool’s function-
processes simultaneously, in this case, the Thymio alities enable all algorithmic concepts. The system
II robots performing the rescue operation in paral- observability, the explicit and unconstrained defini-
lel. The agents can execute their tasks concurrently tion of the task elements, and the manifest written
without waiting for each other to complete them. algorithm representation further enhance these.
– System resettability:thesystemcannotberesetdue – Assessment:sincethesystemisnotresettable,there
to the irreversible nature of the actions carried out are no assessment skills activable.
by the robots. Once the robots take an action, the
changeinthesystem’sstatusispermanentandcan-
notbeundone.Furthermore,thephysicalseparation Inhibiting features for competencies development The
between the problem solvers and the system means inability to reset the system restricts the activation of
no immediate way to reset the system. allassessmentskills.Thetaskcanbeadjustedbyincor-
– Systemobservability:thedelayedbutcontinuedsys- poratingamechanismforresettingthesystemtoapre-
tem visual feedback makes it totally observable. vious state, enabling the problem solver to correct er-
– Taskcardinality:thetaskhasaone-to-onemapping, rors made during the implementation of the algorithm,
with an initial and final state and an algorithm. explore different solutions, and learn from their mis-
– Task explicitness: all elements are given explicitly. takes.Additionally,itisnecessarytoomittheinitialor
– Task constraints: the algorithm is unconstrained. finalstatestoverifythesystem’sstate.Furthermore,to
– Algorithm representation: the algorithm is manifest developtheconstraintvalidationskill,itisnecessaryto
and written in the programming platform. incorporate constraints into the algorithm.
Enablingfeaturesforcompetenciesdevelopment There-
lationship between features and skills is summarised in 3.2.3 Ozobot maze
Appendix B in Table B.10.
– Problem setting: all competencies can be activated The Ozobot Maze activity is a screenless robotics task
thanks to the presence of variables, sequences and proposedbyBryndováandMališů(2020)aimedatteach-
functionsinthetoolfunctionalities.Thepresenceof ing primary school students in the Czech Republic CT
all tool functionalities, the manifest written repre- skills. The educational robot used in this task is the
sentation of the algorithm and the non-resettability Ozobot, a small programmable robot, used to intro-
of the system further encourage the development of duce students to coding, equipped with sensors to fol-
theseskills.Thesystemobservabilitysupportsdata low black lines and read colour patterns called Color
collection and pattern recognition. The one-to-one Codes to change speed, direction and movements.24 GiorgiaAdornietal.
– Tool functionalities: the system provides a compre-
hensive set of tools for the problem solver to create
and control the behaviour of the agent to solve the
task,including(i)variables canbeusedtostoreval-
ues such as the position of the robot in the maze;
(ii) operators are basic actions that the agent can
perform, represented by Direction Codes such as
movingstraight,turningleftorright;(iii)sequences
represent the set of instructions used to control the
behaviouroftherobotinastep-by-stepmannerand
that the Ozobot must follow to complete the task;
(iv) repetitions are a way of repeating the same in-
structionsmultipletimesandrefertothepossibility
of repeating the same Color Code multiple times,
Left at Intersection Right at Intersection Straight at Intersection
for example, if the agent encounters the same type
GBKR BRG BBKR of intersection repeatedly in the path and the same
Fig. 14 The Ozobot maze adapted from Bryndová and ColorCodeisusedtospecifythedirectiontheagent
Mališů (2020). The task requires the pupil to instruct the should take; (v) conditionals are used to make de-
Ozobottocrossamazeavoidingobstaclesandreachingtheroom
cisionsbasedoncertainconditions,forexampleun-
wheretheredpersonis.Commandssuchasincreasingthespeed,
derstandingwhattodoatanintersection;(vi)func-
changing direction and making some cool movements (spinning
likeatornado)aregiveninColorCodes. tions canbereflectedinthedifferenttypesofColor
Codesthatcanbereusedindifferentsituationsand
map inputs to outputs, such as mapping a specific
Components In the Ozobot Maze activity, illustrated
type of intersection to a specific direction.
in Fig. 14, the robot should be guided through a maze
– System resettability: the system is not resettable
to reach the room where the red person is.
sinceitisimpossibletochangetheColorCodesonce
– Problem solver: the student who creates a suitable
they have been filled in.
sequence of instructions using Color Codes to guide
– System observability: the real-time visual feedback
theOzobotthroughthemaze.Theartefactualenvi-
makes the system observable.
ronment comprises tools for reasoningand interact-
– Taskcardinality:thetaskhasaone-to-onemapping.
ing with the system. Predefined stickers or mark-
– Task explicitness:theelementsofthetaskaregiven
ers to fill the empty Codes with colour sequences
explicitly, as the student is provided with clear in-
(embodied) are used to give the robot the correct
structions on what the outcome should look like.
instructions to achieve the goal. The visual feed-
– Task constraints: the algorithm is unconstrained.
back(embodied)letstheproblemsolverobservethe
– Algorithm representation: the algorithm is manifest
agent and its movements in the playground.
and written, expressed by the set of Color Codes.
– Agent: the Ozobot agent, which can move around
intheplaygroundbychangingvelocityandorienta-
tion. This action is not reversible. Enablingfeaturesforcompetenciesdevelopment There-
– Environment: the playground, i.e., the house map, lationship between features and skills is summarised in
whose state is defined by the agent’s position rela- AppendixBinTableB.11.Thisparagraphexploresthe
tive to the red person. enabling characteristics that support the development
– Task: find the algorithm. The initial state is the of competencies within the task.
empty maze with the Ozobot positioned near the – Problem setting: all competencies can be activated
startingpoint.Thesystem’sfinalstateistheOzobot thanks to tool functionalities such as variables, se-
reaching the end of the maze, in the room with the quencesandfunctions.Themanifestandwrittenal-
redperson,andalltheColorCodesbeingfilled.The gorithmrepresentation,aswellasthenon-resettability
algorithm is the set of agent instructions, shown by of the system, can further encourage the develop-
the Color Codes, to reach the system’s final state ment of these skills. The system observability sup-
from the initial. ports data collection and pattern recognition. The
one-to-one cardinality, in addition, stimulates de-
Characteristics Thecharacteristicsofthisactivityhave composition.Theexplicitandunconstraineddefini-
been analysed using the graphical templates shown in tion of the task elements promotes pattern recogni-
Fig. B.11 in Appendix B. tion, decomposition and abstraction.Atheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 25
– Algorithm: all competencies associated with the al-
gorithmic concepts enabled by the tool functionali-
ties,meaningvariables,operators,sequences,repeti-
tions,conditionalsandfunctions,canbeactivatedin
all three artefactual environments and promote one
another. These are further enhanced by the mani-
festandwrittenrepresentationofthealgorithm,the
system observability, and the explicit and uncon-
straineddefinitionofthetaskelements.Theone-to-
onecardinalityhelpstoenhancesomeoftheseskills
as well.
– Assessment:sincethesystemisnotresettable,there Fig.15 TheBBCmicro:bit(left)anditsblockprogram-
ming interface (right).
are no assessment skills activable.
One such physical computing activity is the Mini-
Inhibiting features for competencies development
golf challenge, proposed by Assaf et al. (2021). In this
– Parallelism and events: non-activable since the re-
activity,studentsaretaskedwithprogrammingamini-
lated features are missing in the tool functionali-
golf lane’s moving and interactive elements using the
ties. To develop these skills, it is possible to switch
BBC micro:bit (Ball et al. 2016; Microbit 2016). The
to a different interaction tool, such as OzoBlockly,
micro:bit, depicted in Fig. 15, is a pocket-sized com-
a visual programming language designed to code
puterthatcanbeprogrammedusingMicrosoft’sMake-
Ozobots Evo and includes these functionalities.
Code editor (Makecode 2016), which provides a user-
– Assessment skills:Thenon-resettablefeatureofthe
friendly interface with colour-coded blocks similar to
system hinders the development of assessment abil-
Scratch and the ability to switch to JavaScript to view
ities. In this sense, by allowing the problem solver
the text-based code.
to reset the system to a previous state, for exam-
plebylettingthemchangetheColorCodesstickers
and move the robot back to the starting position,
theactivitycanbeimproved.Thisway,theproblem
solvercancorrectanymistakesmadeduringtheim-
plementationofthealgorithm,experimentwithdif-
ferent solutions, and learn from their mistakes. To
develop system state verification, it is also essential
to not reveal the initial or final states. Moreover,
constraints should be imposed on the algorithm to
develop constraint validation skills.
Fig. 16 The Mini-golf challenge challenge adapted from
Assafetal.(2021).Thetaskrequiresagroupofpupilstodefine
thebehaviourofthemini-golflanemovableobstacles,sounds,and
3.2.4 Mini-golf challenge with micro:bit lightsbyprogrammingtheBBCmicro:bit.
In robotics, physical computing activities involve us-
ingmicrocontrollers,sensors,andotherelectroniccom-
ponents to build and program interactive systems. To Components In the Mini-golf challenge, illustrated in
enhance the learning experience, various off-the-shelf Fig. 16, the objective is to program a mini-golf lane’s
robotic kits have been developed that allow students moving and interactive elements.
to construct robots easily and control them through a – Problem solver: the group of students who must
graphical user interface. programthemicro:bit.Theartefactualenvironment
In these activities, students are often engaged in an disposed of paper and pencil (embodied), a cogni-
initial phase of actively constructing the system using tive tool to support the thinking phase. Other tools
recycledmaterials,electroniccircuitsandprogramming are provided to interact with the system, including
the robot. These activities evaluate the students’ un- the toolkit (embodied) whose components can be
derstanding of algorithmic concepts, problem-solving assembled and disassembled at will, the visual pro-
skills, knowledge of physics and engineering, creativity, gramminglanguageofferedbytheMakeCodeeditor
and ability to work collaboratively. (symbolic), and the visual feedback (embodied).26 GiorgiaAdornietal.
– Agent:themicro:bit,whichcanusesensors,control andpatternrecognition,whiletheone-to-onecardi-
themovementandactionsofthemini-golfelements, nality also encourages decomposition. The uncon-
and turn LEDs and speakers on and off. All actions strained definition of task elements fosters pattern
are considered not reversible. recognition, decomposition, and abstraction.
– Environment: the assembled toolkit, which consists – Algorithm: all competencies can be activated since
of various components, including a ball, speakers, the tool functionalities enable all algorithmic con-
and lights. Its state is described by the state of its ceptsinallthreeartefactualenvironments.Thesys-
elements, including the ball position, lights illumi- tem observability, the implicit and unconstrained
nation and speakers ignition. definition of the task elements and the algorithm’s
– Task: creation act. The initial state is given by the manifestwrittenrepresentationfurtherenhancethese.
toolkit assembled. The system’s final state and the The one-to-one cardinality helps to enhance some
students’ algorithm are open-ended, which defines algorithmic skills as well.
the mini-golf station elements’ behaviour. – Assessment: algorithm debugging and system state
verification can be developed in all artefactual en-
vironments by the direct resettability of the system
Characteristics Thecharacteristicsofthisactivityhave
andthewrittenrepresentationofthealgorithm;op-
been analysed using the graphical templates shown in
timisationcanbeactivatedastheresettabilityofthe
Fig. B.12 in Appendix B.
system alone is sufficient; generalisation is enabled
– Toolfunctionalities:theMakeCodeeditorallowsus-
through the system’s resettability and the presence
ing all the tool functionalities we defined.
of variables and functions. Tool functionalities, sys-
– System resettability: the system can be directly re-
tem observability and the implicit definition of the
setbyphysicallymovingtheballbacktoitsstarting
task elements further support their development.
position, and resetting the state of the lights and
speakers, for example, by turning them off. Addi- Inhibiting features for competencies development The
tionally,theMakeCodeeditorincludesaconvenient constraint validation skill cannot be developed as the
button to streamline the agent’s reset process. algorithm and the final state to be found are uncon-
– System observability: the real-time visual feedback strained. To encourage the development of this compe-
makes the system observable. tence, the activity can be adapted by introducing de-
– Taskcardinality:thetaskhasaone-to-onemapping. finedconstraints,suchasamaximumnumberofmoves
– Task explicitness: the initial state of the toolkit, in- for the ball to reach the hole or that certain elements
cluding the ball’s position, the state of the lights, of the mini-golf station must be activated in a specific
and the speakers, is not specified. order. These constraints will require students to evalu-
– Task constraints:noconstraintsareimposedonthe atethefeasibilityoftheirsolutionswithinthespecified
two elements to be found. limitationsandassesstheiradherencetotheestablished
– Algorithm representation: the algorithm is manifest criteria.
and written in the programming platform.
3.3 Virtual activities
Enablingfeaturesforcompetenciesdevelopment Themap-
ping between features and skills is summarised in Ap- The last domain of educational activities analysed in-
pendixBinTableB.12.Thispassageanalysesthechar- cludes CTPs characterised by the presence of a virtual
acteristics that support the development of competen- system. These activities typically involve programming
cies within the task. a virtual agent to perform a specific or a set of tasks
– Problem setting: all competencies can be activated in a virtual environment. In contrast to CTPs with a
thanks to the presence of variables, sequences and physical environment, virtual activities always provide
functions in the tool functionalities. The availabil- avirtualinterface,oftenincludingacomprehensivepro-
ity of numerous tool functionalities, the written al- gramming platform that allows the problem solver to
gorithm representation and the non-resettability of use different types of programming languages, such as
the system encourage the development of problem textualprogramminglanguageandvisualprogramming
setting skills. The implicit description of the task language.Insomevirtualgames,theproblemsolvercan
elements creates an environment of uncertainty, al- interact directly with the agent by clicking on it. This
lowing for multiple interpretations and solutions, allows for greater flexibility in terms of how the prob-
stimulatingproblemsettingskills.Thesystem’sob- lemsolvercan programthe virtualagent.Additionally,
servabilityallowsthedevelopmentofdatacollection virtual activities often include debugging tools, whichAtheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 27
allow the problem solver to identify and fix errors in final, the characters are in the same position. The
their code. algorithm is the set of moving actions to reach the
system’s final state from the initial.
3.3.1 Classic Maze
In addition to unplugged activities, Code.org is a plat-
formthatoffersmanycodingactivitiesforchildrenbased Characteristics
on Blockly, a Google framework for block-based pro-
– Tool functionalities: the programming platform en-
gramming (Lovett 2017). The Classic Maze is part of
ables problem solvers to reason about the task at
the Hour of Code offered by Code.org, a worldwide
hand and program the movements of the red bird
effort to broaden participation in the computer sci-
byemployingasetof predefinedblocks,each repre-
ence field (Studio.code.org 2020b). Participants must
senting a specific action the agent is authorised to
useblock-basedprogrammingtoguidedifferentcharac-
perform: (i) variables, while not explicitly delivered
ters through a maze in this activity. The creatures in-
in the blocks of the programming platform, can be
cludeonesfrompopularfranchisessuchasAngryBirds,
inferred from the visual feedback provided by the
PlantsvsZombies,andScratfromIceAge.Inthisway,
system, allowing the problem solver to store values
they learn the foundations of computer science and al-
such as the position of the characters; (ii) opera-
gorithmic concepts by successfully guiding the charac-
tors represent the basic actions that the agent can
ters through the maze. We decided to analyse two ac-
perform, such as moving or turning and are repre-
tivities of the Classic Maze. Appendix B includes the
sentedbydistinctblocksinthevisualprogramming
graphicaltemplateusedtoanalysethecomponentsand
language depicted in cyan by the platform; (iii) se-
characteristicsofthetask,foundinFigs.B.13andB.14,
quences are a series of blocks to be executed in a
and the mapping between the CTP features and the
specific order and are implicitly conveyed by the
competencies in Tables B.13 and B.14.
collection of blocks; (iv) functions, which are self-
containedblocksofcodethatperformaspecifictask
Components In the first activity of the Classic Maze, andcanbeexecutedmultipletimeswithdifferentin-
presented in Román-González et al. (2018) and illus- puts (e.g., different initial positions of characters),
trated in Fig. 17, the Angry Bird should be guided areaconceptofrelativecomplexity.Itisnotcertain
through a maze to reach and hit a Green Pig. that the problem solver will recognise them as such
– Problemsolver:thestudentperformingthetaskwho rather than just blocks.
must program the agent’s behaviour. The artefac- – System resettability: the platform provides a direct
tual environment comprises tools designed for rea- means of resetting the task through the “start over”
soning and interacting with the system simultane- button, even if some agent actions are irreversible.
ously,includingtheprogrammingplatformcomposed Thisallowstheproblemsolvertostartoverandtry
ofthevirtualscenario(embodiedartefact),theblocks a different approach if necessary.
and the workspace (symbolic artefacts). The sys- – System observability: the system provides real-time
tem also furnishes various hints to users (embodied visual feedback through animations and graphical
artefact),includingvideotutorials,guidanceonhow representations of the system state and its changes,
to use the platform, command recommendations, making it observable. The problem solver can mon-
suggestions on the number of blocks required to itor the effects of the agent’s actions on the system,
solvethetask,andfeedbackontheproblemsolver’s allowing him to have a complete understanding of
progress towards a solution. thesystem’scurrentstateandtomakeinformedde-
– Agent: the Angry Bird, programmed to navigate a cisions in their problem-solving process.
maze and hit the other character. The agent’s ac- – Taskcardinality:thetaskhasaone-to-onemapping,
tions comprise moving forward, turning left, and with only one starting position for the animal ele-
right.Movingforwardisconsideredanon-reversible ments, one final position for the Angry Bird to be
action, whereas the turning is reversible, as a turn placed, and only one algorithm to be found.
left can be easily undone by a turn right, and vice – Task explicitness:theelementsofthetaskaregiven
versa. explicitlythroughthedepictionofthescenariothat
– Environment: the virtual scenario where the two clearly shows the animals’ positions.
creatures are located, described by their positions. – Task constraints: there are no constraints on the
– Task: find the algorithm. The initial state corre- elements to be found. All the blocks provided are
spondstotheanimals’initialpositions,whileinthe available without limitations.28 GiorgiaAdornietal.
Fig. 17 The Angry Bird hitting the Green Pig maze adapted from Studio.code.org (2020a). The problem solver must
writeaprogramtogettheAngryBirdthroughthemazetohittheGreenPig(left)byselectingtheinstructionblocks(middle)and
assemblingthemintheworkspace(right).
Fig. 18 The Plants vs Zombies maze adapted from Studio.code.org (2020c).Theproblemsolvermustwriteaprogramto
get the Zombie through a maze to eat the plant (left) by selecting the instruction blocks (middle) to be assembled in the workspace
(right).
– Algorithm representation: the algorithm is written recognition. Using variables boosts pattern recog-
in the workspace and expressed by the set of blocks nitionanddecomposition,whileexplicitanduncon-
and their connections. strained elements, in addition to these two skills,
encourage abstraction. Sequences positively affect
Enabling features for competencies development This pattern recognition, abstraction and data represen-
paragraphexplorestheenablingcharacteristicsthatsup- tation, which is also facilitated by functions. Oper-
port the development of competencies within the task. ators also encourage decomposition.
Certain features play a crucial role in activating skills, – Algorithm: all competencies associated with the al-
whileotherscanfurtherenhanceandencouragethede- gorithmic concepts enabled by the tool functional-
velopment of these competencies. ities, meaning variables, operators, sequences, and
– Problem setting: all competencies can be activated functions, can be activated in all three artefactual
thanks to the presence of variables, sequences, and environments.Featuressuchasvariables,operators,
functions in the tool functionalities. The manifest sequences, and functions help activate the algorith-
and written algorithm representation can further mic skills in a task. These are further enhanced by
encouragethedevelopmentoftheseskills.Thereset- the manifest and written algorithm representation,
tability of the system and the one-to-one cardinal- system observability, and the explicit and uncon-
ity of data elements facilitate data collection, pat- straineddefinitionofthetaskelements.Theone-to-
tern recognition and decomposition. Observing the one cardinality enhances variables and operators.
system also supports data collection and patternAtheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 29
– Assessment: algorithm debugging can be activated by France-IOI, for learning the basics of programming
in all artefactual environments due to the resetta- (ALGOREA 2020; France-IOI.org 2004). The activity
bility of the system and the manifest and written isdesignedtoteachstudentsproblem-solvingskillsand
representationofthealgorithm;optimisationcanbe programming concepts using a visual block-based pro-
activated as it only requires the resettability of the gramming language. The activity is part of a series of
system;generalisationcanbeactivatedthroughthe progressive difficulty courses and exercises available on
system’s resettability and the presence of variables the France-IOI website.
and functions. Features such as variables, opera-
tors, sequences, functions and system observability Components In this activity, illustrated in Fig. 19, the
helpdevelopalgorithmdebuggingandoptimisation, robot should pick up the marble on his path and drop
while sequences can also foster generalisation. it into a hole.
– Problem solver: the student who must program the
Inhibiting features for competencies development This
agent’sbehaviour.Theartefactualenvironmentcom-
paragraph explores the impact of missing features on
prises tools designed for reasoning and interacting
skill activation, focusing on how adjusting the task can
with the system simultaneously, including the pro-
enable the development of certain competencies.
grammingplatformcomposedofthevirtualscenario
– Repetitions,conditionals,parallelism,andevents:non-
(embodied artefact), the blocks and the workspace
activable due to the absence of specific tool func-
(symbolicartefacts).Thesystemalsofurnishessug-
tionalities. These competencies cannot be triggered
gestions on the number of blocks required to solve
until these functionalities are added to the tool.
the task (embodied artefact), but it does not pro-
– Systemstateverification:non-activablebecauseboth
vide additional hints beyond this information.
theinitialandfinalstateareprovided.Thetaskcan
– Agent: the virtual robot, programmed to move on
be adjusted to activate this skill by making one of
thepathtocollectthemarbleanddroptheminthe
these states to be found. For instance, by not pro-
hole.Theagent’sactionscomprisemovingeastward,
viding the position of the Green Pig to the problem
picking up a marble, and dropping a marble. The
solver, who must then determine its location, the
simplemovementisconsideredirreversible,whereas
system’s final state becomes unknown, and the sys-
picking up and dropping a marble are considered
tem state verification activable.
reversible actions, as they are the reverse of each
– Constraint validation:non-activablebecausetheal-
other.Theagent’sactionscomprisemovingforward,
gorithm to be found is unconstrained. Some con-
turning left, and right. Moving forward is consid-
straints can be imposed on the blocks used in the
ered a non-reversible action, whereas the turning is
task’s programming platform to activate this skill,
reversible, as a turn left can be easily undone by a
such as limiting the agent’s ability to turn right.
turn right, and vice versa.
– Environment: the virtual scenario where the robot
Comparison of two Classic Maze activities The activi-
and the marble are located, which is described by
ties proposed in the Classic Maze exhibit a progressive
their respective positions.
increase in difficulty. For example, the Plants vs Zom-
– Task: find the algorithm. The initial state corre-
biesmaze,illustratedinFig.18,isasimilartaskrequir-
sponds to the robots’ initial positions and the maze
ingfindingthealgorithm.Themaindifferencesbetween
distribution of marbles. The final state corresponds
this task and the previous are the characters involved,
totherobotpositionedontheholeandthemarbles
the difficulty of the path that the agent, in this case,
insideit.Thealgorithmisthesetofmovingactions
the Zombie, must traverse to reach the plant, and the
to reach the system’s final state from the initial.
set of actions available to the agent. The programming
platformforthisactivityalsoincludesthepossibilityof
using repetitions, represented in pink, adding another Characteristics Fig. B.15 in Appendix B provides the
layer of difficulty. The features of the CTP remain un- graphicaltemplateusedtoanalysethetaskcomponents
changedfromtheprevioustask,exceptfortheaddition and characteristics.
oftherepetitionfunctionalityinthetool,whichenables – Tool functionalities: the system provides a compre-
the activation of the related competence. hensive set of tools for the problem solver to imple-
ment the algorithm to solve the task, including (i)
3.3.2 Store the Marbles variables allows the problem solver to store values
such as the position of the robot, marble, and hole;
Store the Marbles is a virtual programming activity, (ii) operators represent the basic actions that the
presented by Algorea, an online resource designated agent can perform, such as moving or turning and30 GiorgiaAdornietal.
Program the robot to pick up the marble,
9 blocks remaining out of 15
then drop it in the hole. advance eastward
Be careful, your program must work on all three tests.
pick up the marble Robot program
West
repeat until on a marble
drop the marble
advance eastward
West
on a marble
pick up the marble
repeat until
West advance eastward
drop the marble
not
Fig. 19 The Store the Marbles activity adapted from ALGOREA (2020). Thetaskrequirestheproblemsolvertoprogram
therobottoproduceanalgorithmvalidfordifferentsituationsusingavisualprogramminglanguage.
arerepresentedbytheblueblocksofthevisualpro- Enabling features for competencies development This
gramming language; (iii) sequences are obtained by paragraphexplorestheenablingcharacteristicsthatsup-
concatenating a series of blocks to be executed in a port the development of competencies within the task.
specific order, allowing the problem solver to plan The relationship between features and skills is sum-
and execute a series of actions to reach the goal; marised in Appendix B in Table B.15.
(iv)repetitions areofferedbyaspecificorangeblock
– Problem setting: all competencies can be activated
and allow the problem solver to repeat a sequence
thanks to the presence of variables, sequences, rep-
ofactionsuntilaspecificconditionismet;(v)func-
etitions and functions in the tool functionalities.
tions are self-contained blocks of code that perform
Themanifestandwrittenrepresentationofthealgo-
a specific task and can be executed multiple times,
rithm and the many-to-one cardinality can further
providing a flexible and reusable component in the
encourage the development of these skills. The re-
algorithm design. The platform places importance
settability of the system facilitates data collection,
on the design of the algorithm as a function that
patternrecognitionanddecomposition.Thesystem
can adapt to changing inputs, such as the different
observability supports data collection and pattern
starting conditions of the task.
recognition. Using variables boosts pattern recog-
– System resettability: the platform allows for reset-
nition and decomposition, while explicit and un-
ting the task through a button, enabling the prob-
constrained elements in addition to these two skills
lemsolvertostartoverandtryadifferentapproach.
encourage abstraction. The use of sequences posi-
– Systemobservability:theplatformprovidesreal-time
tively affects pattern recognition, abstraction and
visual feedback, making the system observable.
datarepresentation,whichisalsofacilitatedbyfunc-
– Task cardinality: the task has a many-to-one cardi-
tions.Operatorsalsoencouragedecomposition,while
nality, with many initial and final states given and
repetitions promote decomposition abstraction and
onlyonealgorithmtobefound.Thechallengeinthis
data representation.
activityisfortheprogramtoworkwithmultipleini-
– Algorithm: all competencies associated with the al-
tial states, as the problem solver is given three dif-
gorithmic concepts enabled by the tool functionali-
ferent configurations of marble and hole positions.
ties,i.e.,variables,operators,sequences,repetitions
Thesolutionmustsuccessfullysortthemarblesinto
and functions, can be activated in all three artefac-
the correct locations.
tual environments. Features such as variables, op-
– Task explicitness: the task elements are given ex-
erators, sequences, repetitions and functions help
plicitly through the depiction of the scenario that
activate the algorithmic skills in a task. These are
clearlyshowsthepositionsoftherobot,marble,and
further enhanced by the manifest and written rep-
hole.
resentation of the algorithm, system observability,
– Task constraints: the algorithm is unconstrained.
theexplicitandunconstraineddefinitionofthetask
– Algorithm representation: the algorithm is manifest
elements, and the many-to-one cardinality.
and written, expressed through a set of blocks.
– Assessment: algorithm debugging can be activated
in all artefactual environments due to the resetta-
bility of the system and the manifest and writtenAtheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 31
representationofthealgorithm;optimisationcanbe Zoombinis to cross the bridge. Each cliff accepts differ-
developed as it only requires the resettability of the ent attributes of the creatures. who must find the cor-
system;generalisationcanbeactivatedthroughthe rectcombinationofZoombiniattributesthatwillallow
system’s resettability and the presence of variables each creature (the agents) to cross the bridge
and functions. Features such as variables, opera- – Problemsolver:theplayerwhomustfindthecorrect
torsandfunctionshelpdevelopalgorithmdebugging combination of Zoombini attributes that will allow
andoptimisation.Sequences,repetitionsandsystem each creature to cross the bridge. The artefactual
observability foster algorithm debugging, optimisa- environment comprises tools designed for reasoning
tion,andgeneralisation.Themany-to-onecardinal- and interacting with the system simultaneously, in-
ity influences the development of generalisation as cludingtheclickanddragplatform(embodiedarte-
well. fact) and the visual feedback of the virtual scenario
(embodied artefact). The system provides feedback
on whether the Zoombini’s attributes match the re-
Inhibiting features for competencies development The
quirementsofthebridge(embodiedartefact),allow-
absence of certain features can limit the activation of
ing the player to adjust their strategy accordingly.
certain skills.
– Agent:theZoombinischaracter,whichcanbedragged
– Conditionals, parallelism, and events:non-activable
totheentranceofabridgeandtheonlyactionisal-
as the platform does not supply them.
lowed to do is to cross it or be sent back in case of
– System state verification:non-activablebecausethe
failure. This action cannot be reset.
initial and final states of the system are given. The
– Environment: the virtual scenario described by the
skill can be promoted by making the initial or final
Zoombinis’ positions and the number of Zoombinis
state to be found.
that have crossed a bridge.
– Constraint validation: non-activable due to the al-
– Task:findthealgorithm.thestateofthesystemde-
gorithm’s absence of constraints. The task is ad-
pends on the number of creatures that crossed the
justable by imposing constraints on it.
bridge, initially none and at the end all. The algo-
rithm is the set of moving actions to reach the final
3.3.3 Zoombinis Allergic Cliffs Puzzle
state. The problem solver can try different combi-
nations of attributes, testing one attribute’s value
The Zoombinis activity is a popular CT learning game
by holding one attribute constant and testing the
where the player must guide little blue creatures with
others, or even proceed by changing values and at-
distinctpersonalitiesandappearancesthroughdifferent
tributesuntilallZoombinishavecrossedthebridges.
puzzlestoescapeimprisonment(Zoombinis2021;Rowe
et al. 2021).
Characteristics Fig. B.16 in Appendix B provides the
graphicaltemplateusedtoanalysethetaskcomponents
and characteristics.
– Toolfunctionalities:(i)variables areusedtoreferto
the attributes of the Zoombinis such as hair colour
or eye shape, which can have different values and
must be combined correctly to cross the bridge; (ii)
operators canbeusedtocombinetheconditionsfor
the Zoombinis to cross the bridge, for example the
player could use a logical AND operator to require
that the creature have two specific attributes in or-
der to cross the bridge; (iii) sequences can be the
Fig. 20 The Allergic Cliffs Puzzle from Zoombinis orderinwhichtheZoombinisaremovedtocrossthe
(2021). The player must find out which characteristics allow bridge;(iv)repetitions areusedtotrymultiplecom-
the Zoombinis to cross the bridge without being sent back. The
binations of Zoombini attributes until the problem
bottom cliff does not accept creatures with flat hair, while the
topcliffrejectsallothers. solver find the correct solution; (v) conditionals are
reflectedintherequirementofthebridgestoaccept
certain attributes of the Zoombinis, as the player
must determine if the Zoombini’s attributes match
Components In the Allergic Cliffs Puzzle, depicted in the requirements of the bridge; (vi) functions are
Fig. 20, the task is to find a procedure that allows all the combination of Zoombini attributes that allows32 GiorgiaAdornietal.
all creatures to cross the bridges, as it maps inputs explicitandunconstraineddefinitionofthetaskele-
(theZoombiniattributes)tooutputs(thesuccessor ments. The one-to-one cardinality helps to enhance
failure of the Zoombinis crossing the bridges); (vii) variables, operators ad conditionals further.
events correspond to the Zoombini being sent back – Assessment: optimisation can be activated by the
asitoccursasaresultofawrongplayer’scombina- resettability of the system while generalisation can
tion of Zoombini attributes. bedevelopedthroughthesystem’sresettabilityand
– System resettability: the platform provides a direct the presence of variables and functions. The tool’s
means of resetting the game. functionalities and the system’s observability aid in
– System observability: the system provides real-time developing these skills.
visual feedback through animations and graphical
representations of the system state and its changes,
making the system observable.
Inhibiting features for competencies development This
– Task cardinality: the task presented in the scenario
activity has some missing features on skill activation,
is a one-to-one mapping.
with a focus on how adjusting the task can enable the
– Task explicitness: the system’s state is explicit and
development of certain competencies.
isrepresentedbythenumberofZoombinisthathave
crossed the bridge. – Parallelism:non-activableduetotheabsenceofthe
– Task constraints: there are no constraints on the specifictoolfunctionalities.Thedesignoftheactiv-
elements to be found. All the blocks provided are ity could be altered to include multiple Zoombinis
available without limitations. actingatthesametime,allowingforthesimultane-
– Algorithmrepresentation:thealgorithmislatentbe- ous execution of multiple actions.
causetheproblemsolveronlyperformsactionssuch – Algorithm debugging: non-activable because the al-
asdraggingthecharactersacrossthebridge,butthe gorithm is implicit and in the form of dragging and
underlying logic and steps to reach the final goal of dropping the characters to cross the bridge. With-
havingallZoombiniscrossthebridgearenotexplic- out the ability to debug, the problem solver must
itly defined by the player. rely on their understanding of the rules and ability
toidentifyanyissuesthroughtrialanderror.Toin-
tegrate debugging, the algorithm needs to be made
Enabling features for competencies development Cer-
explicit, either by writing down the steps as text or
tainfeaturesplayacrucialroleinactivatingskills,while
in code form. Then the user can test and debug the
others can further enhance and encourage the develop-
algorithmbycheckingifeachstepisperformedcor-
ment of these competencies. The relationship between
rectly and if the final result matches expectations,
features and skills is summarised in Appendix B in Ta-
thereby improving their debugging skills.
ble B.16.
– Systemstateverification:non-activablebecauseboth
– Problem setting: all competencies can be activated
theinitialandfinalstateareprovided.Thetaskcan
thanks to the presence of variables, sequences, and
be adjusted to activate this skill by making one of
functions in the tool functionalities. The latent al-
these states to be found.
gorithm can further encourage the development of
– Constraint validation: non-activable since the algo-
these skills. The resettability of the system and the
rithmtobefoundisunconstrained.Constraintscan
one-to-onecardinalityfacilitatedatacollection,pat-
be imposed to activate this skill, such as the order
tern recognition and decomposition. Observing the
in which the Zoombinis can cross the bridge.
system also supports data collection and pattern
recognition.Explicitandunconstrainedelementsboost
patternrecognition,decompositionandabstraction.
Moreover,alltoolfunctionalitieshaveapositiveim-
pact on the problem setting learning process, help- 4 Discussion
ing the problem solver to understand the problem
and find a solution more effectively. This study provides a theoretical framework for anal-
– Algorithm: all competencies associated with the al- ysing, evaluating and revising existing computational
gorithmic concepts enabled by the tool functionali- thinking problems (CTPs) and designing new ones for
tiescanbeactivatedinallthreeartefactualenviron- educational contexts. By analysing prototypical activi-
ments, and foster the development also of the other tiesfromvariousclassicareasoftheliterature,weiden-
algorithmic concepts related skills. These are fur- tifiedtheprincipalcharacteristicsoftheseproblemsand
ther enhanced by the systeme observability and the the competencies they can activate.Atheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 33
4.1 Relating problem domain features to the proach to problem setting that can activate compe-
activation of CT skills tencies such as abstraction, decomposition, and al-
gorithmicthinking.Ontheotherhand,itmaymake
This section aims to provide a comprehensive overview it more difficult for students to experiment and ex-
of computational thinking (CT) skills and their rela- plore different approaches to a problem, hindering
tionship to different activity domains, including un- theactivationofcompetenciesrelatedtoassessment
plugged,robotics,andvirtual.Itisisimportanttonote and evaluation such as debugging.
that the characteristics and design of CTPs can signif- – Systemobservability:unpluggedactivitieshavevary-
icantly vary, impacting the activation of CT skills and ing degrees of observability. Some CTPs may be
the effectiveness of the CTP in achieving its intended highly observable, with clear steps and processes
competencies.Byexploringtheseareas,weaimtogain that are easy to follow and understand, while oth-
adeeperunderstandingoftheuniquefeaturesandchal- ers may be more abstract or open-ended, making
lengesofeachtypeofproblemdomain.Ultimately,this it more challenging to observe and analyse the pro-
will provide insights into how CT skills can be devel- cesses involved. In activities with a higher level of
oped across various contexts and how the characteris- observability,learnersmayeasilyidentifyandapply
tics of CTP can influence the activation of competen- CTcompetencies.Conversely,activitieswithalower
cies. Our goal is to identify the problem domains that levelofobservabilitymayrequirelearnerstoengage
are most suitable for activating specific CT competen- in more exploratory, creative thinking, potentially
cies, facilitating the choice and design of more effective activating problem setting competencies.
CTPs in educational contexts. – Task type: typically, unplugged activities are de-
signedwithasingleobjectivethatrequiresthelearner
to find one specific element, such as the algorithm,
4.1.1 Unplugged activities
initial state, or final state. Different aspects of CT
competencies can be developed depending on the
Unplugged activities are a popular teaching method in
task’s specific objective. For example, tasks that
computerscienceeducation,usedtofosterthedevelop-
focus on the development of algorithms are par-
ment of CT competencies without relying on a com-
ticularly effective in fostering learners’ algorithmic
puter. These activities can involve various materials
thinking skills. In a formal learning environment,
such as paper & pencil, physical objects and manip-
suchtaskscangivelearnersadeeperunderstanding
ulatives,whichallowlearnerstodeveloptheirproblem-
of algorithm design principles and an opportunity
solving and algorithmic skills in a hands-on and tangi-
topracticealgorithmcreationandrefinement.Con-
ble way.
versely, tasks that focus on identifying the initial
To better understand the relationship between un-
or final state may be particularly useful in develop-
plugged activities’ features and CT competencies’ acti-
ing learners’ problem setting skills. By recognising
vation,weanalysedfourprototypicalunpluggedactivi-
and defining a problem’s key elements, learners can
tiesfromtheliterature,includingtheCrossArrayTask,
developthenecessaryskillstoconstructeffectiveso-
Graph Paper Programming, Triangular Peg Solitaire,
lutions and assess them.
andComputationalThinkingTest(CTt).Throughthis
– Task cardinality: unplugged activities often involve
analysis, we identified the key characteristics of these
tasks with low cardinality, meaning they can be
problems and provided insights into how different as-
completedinsmallsteps.Thiscanbeadvantageous
pects of a CTP can influence the development of CT
for CT skill development, as learners can focus on
competencies.
developing specific skills.
– Tool functionalities: unplugged activities often rely
– Task explicitness: in unplugged activities, the given
on simple tools that can help develop problem set-
task elements are often explicit and easy to under-
ting skills such as abstraction, decomposition and
stand, which can be beneficial for novice learners
pattern recognition.
who are in the early stages of developing their CT
– System resettability: it is common for unplugged
skills. This feature can aid in developing algorithm
activities to lack system resettability. In such in-
design and problem setting skills.
stances,studentscannoteasilyundotheiractionsor
– Task constraints: unplugged activities often have
resetthesystemtoapreviousstate,whichcanposi-
fewconstraints,allowinglearnerstoexperimentand
tivelyornegativelyaffecttheactivationofCTskills.
explore different solutions. This can help develop
On the one hand, the lack of reset functionality can
computationalproblemsettingcompetenciesaswell
encouragestudentstoplanandthinkmorecarefully
as algorithmic concepts.
abouttheiractions,leadingtoamorethoughtfulap-34 GiorgiaAdornietal.
– Algorithm representation: in unplugged activities, these activities often provide a reset functionality,
the algorithm is often represented visually or phys- which enables students to test and refine their de-
ically, which can encourage the development of al- signsthroughiterativeexperimentation.Theability
gorithm design and problem setting skills. to reset the system allows for efficient debugging,
Basedonthefeatures,specificCTcompetenciesare a critical component of problem-solving and CT.
more likely to be activated in unplugged activities, in- However, it is worth noting that the trial-and-error
cluding problem setting skills, such as pattern recogni- approach to programming, where the algorithm is
tion, decomposition and abstraction, and fundamental developedincrementallybasedonfeedbackreceived,
computer science concepts. can be time-consuming and may not be an optimal
However, unplugged activities also have some limi- learning strategy for all students.
tations,suchaslimitedtoolfunctionalities,thefrequent – System observability:inroboticsactivities,theabil-
lack of a tool to write the algorithm, and the inability ity to observe the system is of paramount impor-
to reset the system. These drawbacks can hinder the tance, as it enables students to monitor the robot’s
developmentofassessmentcompetenciesandshouldbe behaviourandanalysetheresultsoftheiralgorithms.
consideredwhenusingordesigningCTactivitiestoen- The system’s observability, coupled with the reset
sureabalancebetweendevelopingdifferentCTcompe- feature,allowsstudentstotestandrefinetheiralgo-
tencies. rithmsbasedontherobot’sbehaviour.Nevertheless,
relyingsolelyonthisapproachcanresultinanend-
lesscycleoftrialanderror.Byphysicallyseparating
4.1.2 Robotics activities
the problem solvers from the system, and providing
limitedvisualfeedbackthatisasynchronousandde-
Robotic activities can be an effective means of pro-
layed,studentsareencouragedtocultivateproblem
moting the activation of CT skills. In this discussion,
setting skills in addition to algorithmic ones, over-
we will analyse the enabling and inhibiting features
coming the trial and error limitation.
of four different robotic activities, namely the Thymio
– Tasktype:thetypeoftaskusedineducationalrobotics
Lawnmower Mission, Remote Rescue with Thymio II,
and physical computing activities can significantly
Ozobot maze and Mini-golf challenge with micro:bit,
impact the development of students’ competencies.
and how these features relate to the activation of CT
While educational robotics tasks typically have a
skills.
singleobjective,usuallyfindingthealgorithm,phys-
– Tool functionalities: robotics activities typically in-
ical computing activities often involve multiple ob-
volve a wide range of tool functionalities that stu-
jectives,whichrequirestudentstoachievemanygoals
dentscanaccess,spanningfrombasicprogramming
to complete the task successfully. For example, a
concepts, such as variables and sequences, to more
physical computing task may require finding both
advanced ones like loops, parallelism, and events.
thealgorithmandthefinalstateoftherobot.Novice
This abundance of functionalities enables diverse
learners may find activities with a single objective
problem-solving approaches, but it may also pro-
more beneficial, as they provide a clear and specific
mote a trial-and-error approach, where students re-
goalforthelearnertoworktowards.Suchtasksalso
sort to trying out various functionalities without
enable students to apply appropriate strategies and
comprehending their underlying principles or the
techniques to solve the task, thereby promoting the
most effective ways to use them. To overcome this
development of algorithmic thinking skills in a for-
limitation, robotics activities often encourage the
malenvironment.However,thisapproachmaylimit
developmentofproblemsettingcompetenciesbylim-
thedevelopmentofadvancedproblemsettingskills,
iting access to the programming interface. While
which are essential for tackling complex real-world
still allowing students to explore and experiment
problems. Therefore, physical computing activities
with the tool functionalities, it can foster deeper
with multiple objectives may be more effective in
engagement with the problem and facilitate cog-
developing these skills, as they require learners to
nitive processes related to problem understanding,
engage in more extensive problem-solving activities
ideageneration,andsolutionformulation,whichare
and develop their skills in identifying and assessing
critical components of CT abilities.
the critical components of a problem.
– System resettability: in the context of robotics ac-
– Task cardinality: in educational robotic activities,
tivities, it is common for problem solvers to have
the task cardinality is often one-to-one.
direct control over the system by repositioning the
– Task explicitness: in educational robotic activities,
agent in the environment and restarting the task.
the tasks are typically characterised by explicit in-
Additionally, the programming platforms used forAtheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 35
structions and well-defined elements. On the other ingbeforeexecutingtheirsolutions.Disincentivestrate-
hand, physical computing activities tend to have gies such as blocking access to the programming inter-
fewer explicit elements and may require more criti- face,physicallyseparatingthesystemfromtheproblem
cal thinking and problem-solving skills. Tasks with solver,andinsertingatimedelayinthevisualfeedback
more explicit elements may limit critical thinking can encourage students to think critically about their
and require less problem setting, as students can solutions and develop a comprehensive understanding
relymoreonfollowinginstructions.Incontrast,less of the problem at hand.
explicit tasks require students to engage in prob-
lem setting, utilising skills such as pattern recogni-
4.1.3 Virtual activities
tion,abstraction,decomposition,anddatarepresen-
tation. Consequently, in the former case, students
Virtual activities offer a wide range of possibilities for
may be more inclined to jump directly into pro-
the development of CT skills, making them an ideal
grammingthe agent’s behaviour,whilein thelatter
tool for CTP implementation. The three virtual activ-
case, they may focus more on analysing the task’s
ities presented in this study, Classic maze, Store the
elements to develop a solution.
Marbles,andZoombinisAllergicCliffsPuzzle,havedif-
– Taskconstraints:roboticsactivitiesaretypicallyun-
ferent characteristics and features that impact the ac-
constrained, providing students with more freedom
tivation of CT skills and the overall effectiveness of the
and opportunities to experiment with various ap-
CTP in eliciting the competencies they are intended to
proachestoalgorithmdesignwithoutnecessarilyun-
develop.
dergoing a rigorous problem setting phase. Novice
– Toolfunctionalities:typically,virtualactivitiesoffer
learners may benefit from this feature, as it can en-
programming platforms or virtual games, with the
courage them to be more creative and exploratory
former providing more tool functionalities than the
in their problem-solving process. However, it may
latter.Despitetheavailabilityoftoolfunctionalities
also limit the development of more advanced com-
invirtualactivities,conceptssuchasparallelismand
petencies.
eventsareoftenoverlookedinbothcases.Activities
– Algorithm representation: in robotics activities, the
that offer a wide range of tool functionalities can
algorithm is an essential component, which is typ-
enablelearnerstoexperimentwithvariousconcepts,
ically manifest and written. Engaging students in
providing opportunities for them to explore their
activities that involve a written algorithm can of-
functions and ultimately develop their CT skills.
fer several benefits, such as promoting more logical
– System resettability: virtual activities offer the con-
thinking and problem-solving skills. By requiring
venience of a reset function, allowing learners to
the students to read and interpret the algorithm,
startovertheactivityeasily.Thischaracteristicren-
they are encouraged to think critically about the
dersvirtualactivitiesusefulfordevelopingalgorith-
problemanduselogicalreasoningtounderstandthe
mic thinking and performing assessment tasks. For
steps required to achieve the task’s objectives.
instance, learners can utilise this feature to debug
Robotics activities effectively promote the develop- the code and verify the solution’s correctness. Fur-
mentofarangeofCTcompetencies.Thenatureofthe thermore,learnerscanleveragetheresetfunctionto
activity,aswellasitsgoalsandconstraints,playanim- explore the generalisation and optimisation of the
portant role in developing different types of CT skills. solution, promoting more advanced competencies.
Some activities emphasise the cultivation of problem This unique feature offers a significant advantage
setting skills, promoting critical and logical thinking, over other learning activities, which may not offer
whileothersprioritisealgorithmicthinking,fosteredby the same level of flexibility for learners to test dif-
trial and error approaches. ferent solutions and refine their approaches.
While robotics activities have many benefits for de- – Systemobservability:virtualactivitiesprovidelearn-
veloping CT skills, they also have some limitations. ers with a high degree of observability, as they of-
Robotics activities typically involve specific tasks or ten include features that offer immediate feedback
challenges that limit students’ ability to explore their on the outcome of a user’s decisions. Such real-time
ideasandcreativity.Thisoftenleadstoatrialanderror feedback can be highly valuable in promoting the
approach,whereinstudentsfocussolelyonfindingaso- development of CT skills, allowing learners to ex-
lution that works rather than developing a robust and periment with different strategies and observe their
efficientalgorithmthatunderliestheproblem.Nonethe- impact in real time. Moreover, the observability of
less, strategies can be implemented to mitigate such is- virtual activities, combined with the ability to re-
suesthatencouragestudentstoengageindeeperthink- set the system, can also enhance learners’ problem36 GiorgiaAdornietal.
setting skills by enabling them to analyse a given strategiestoprogressthroughthegameratherthan
situationandevaluatetheeffectivenessoftheircho- following predefined coding concepts.
sen strategy based on the system’s outcomes. When considering the development of CT compe-
– Tasktype:invirtualactivities,thereistypicallyonly tencies through virtual activities, the specific compe-
one objective, often centred around finding the al- tencies that are activated can vary depending on the
gorithm to solve a problem. While this approach characteristicsoftheactivity.Oneadvantageofvirtual
can effectively develop learners’ algorithmic think- activities is their high degree of observability, allow-
ing skills in a controlled environment, it may not ingforimmediatefeedbackandtheopportunityforex-
fully represent the complexity of real-world prob- perimentation and iteration, which can lead to the de-
lems often requiring multiple objectives. velopment of assessment skills such as debugging, sys-
– Taskcardinality:virtualactivitiesofteninvolvemany- tem state verification, constraint verification optimisa-
to-onecardinalityoftasks,whichcanprovidelearn- tion and generalisation. Virtual coding activities aim
ers with opportunities to develop and practice dif- primarily at developing learners’ algorithmic thinking
ferent CT skills. This feature can enhance learn- skills, typically providing learners with tools and func-
ers’ ability to develop problem setting skills such tionalitiestoexperimentwithdifferentconceptsandex-
asdecompositionandpatternrecognition,asmulti- ploretheirfunctions.Ontheotherhand,virtualgames
ple scenarios must be considered to achieve a task aredesignedtoenhancelearners’problemsettingskills,
solution. As a result, learners are encouraged to ex- such as problem decomposition, pattern recognition,
plore multiple ways of approaching a problem, ex- and abstraction.
perimentingwithdifferentsolutions,practisingbreak- Despite their potential benefits in developing CT
ing complex problems into smaller, more manage- skills,virtualactivitiesmayhavesomelimitations.Firstly,
able parts and identifying common patterns that some virtual activities may require learners to rely on
can be applied to solve related problems. This can trial and error, limiting their ability to develop prob-
helplearnersdeveloptheirabstractionandalgorith- lem setting skills. Secondly, the absence of physical ob-
mic thinking skills by identifying and implementing jects in virtual activities may undermine learners’ in-
reusable strategies for solving related problems. volvementandpleasureinthelearningprocess.Finally,
– Task explicitness: virtual activities typically pro- virtual activities may provide limited creativity, explo-
vide learners with explicit instructions for complet- ration,andexperimentationopportunities.Thesedraw-
ing the task, which can limit their critical thinking backs highlight the importance of designing virtual ac-
and problem setting skills. This is because learners tivities that balance the development of various CT
arenotrequiredtoengageintheprocessofidentify- competencies while considering learners’ engagement,
ing the problem or generating possible solutions on motivation, and enjoyment.
their own. Instead, they are presented with a spe-
cificproblemandgivenclearinstructionsforsolving
it.
5 Conclusion
– Task constraints: virtual activities often lack con-
straints, limiting the development of critical think-
In this article, we presented a comprehensive frame-
ingandproblemsolvingskillsamonglearners.With-
workforevaluatingandrefiningexistingcomputational
out constraints, learners may not be challenged to
thinking problems (CTPs) in education or problems
think deeply about how to approach a problem and
that require computational thinking (CT) skills to be
maynotconsidermultiplepossiblesolutionsoreval-
solved and creating new ones, to assess CT competen-
uate the effectiveness of their chosen solution.
cies effectively.
– Algorithm representation: virtual activities that re-
One of the main contributions of this study is that
quire learners to engage in coding can provide op-
CTPs consist of several components, including the sys-
portunitiesforthemtodevelopalgorithmicthinking
tem, problem solver, and task. The system comprises
skills and practice debugging. In contrast, virtual
theenvironmentandtheagent,whiletheproblemsolver
games that allow the problem solver to interact di-
is a human or group of people who can solve tasks re-
rectly with the environment without using external
quiring algorithms. Our study has identified that the
tools may limit the debugging abilities. However,
artefactualenvironment,orthesetofreasoningandin-
theymaypromotemoreproblemsettingskills,such
teraction tools available to the problem solver, plays a
as identifying patterns and developing strategies to
crucial role in developing CT abilities.
tackle complex situations. This is because learners
The proposed framework allows for the systematic
must rely on their own problem-solving skills and
analysisofCTPsaccordingtotheircharacteristics,whichAtheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 37
are relevant for eliciting and assessing CT skills in ed- activities are not as effective in formally developing
ucational contexts. These characteristics include tool algorithmic competencies, as they do not provide the
functionalities, system observability and resettability, same level of complexity and sophistication as robotic
taskdetails,suchastype,cardinality,constraintandex- and virtual activities.
plicitness,andthealgorithmrepresentation.Ourstudy Forthedevelopmentofassessmentskills,virtualac-
provides a catalogue of skills typically used to assess tivitiesarethebestchoice,astheyoftenprovideimme-
student abilities in this area and defines a mapping be- diate feedback and allow learners to test and improve
tween the identified characteristics of the CTPs and their solutions, whereas unplugged and robotic activi-
these competencies, drawing from existing frameworks tiesdonotofferthesameleveloffeedbackorrefinement
and literature. This mapping can be used to deter- options.
mine how these features influence the development of Inconclusion,theproposedframeworkenablesedu-
CT abilities, offering a clear understanding of the rela- cators not only to determine which skills are developed
tionship between the features of the problems and the by a particular CTP and to revise it appropriately to
CT skills they activate, those that can be promoted alignwiththedesiredlearningobjectivesbutalsotose-
or cannot be activated. This framework ultimately can lect activities that target specific CT skills, thereby fa-
be used to define, analyse, revise, and create learning cilitating efficient and effective learning. Moreover, the
activities. framework can be used to create new CTPs in educa-
Thedevelopedframeworkwasdemonstratedthrough tional settings.
its application to a diverse set of CTPs from the liter- Notwithstandingthecontributionsofthisstudy,there
ature, including unplugged, robotic, and virtual educa- arelimitationstoconsider.Thepresentedframeworkis
tionalactivities.Theresultinganalysisprovidedacom- based on a restricted set of activities, which may not
prehensive understanding of each activity category’s represent all possible scenarios. To improve the frame-
unique features and challenges, as well as the specific work’svalidityandapplicability,futureresearchshould
CT competencies they activate. With this information, expandthissetandfurthervalidateandrefinetheframe-
it is possible to identify the best category of activities work.Additionally,thestudy’sfocusonaspecificsetof
to develop a specific category of expertise. CT skills, which may not cover the full range of com-
Unpluggedactivitiesarethebest-suitedcategoryof petencies that can be developed through CTPs. There-
CTPs fordevelopingproblem setting skillsdue totheir fore,furtherempiricalstudiesshouldaimtovalidatethe
hands-on and tangible approach, which allows learners framework and the catalogue of competencies. While
to engage with problems physically and interactively. theframeworkisprimarilydesignedforCTPsineduca-
Virtual games can also effectively develop problem set- tional contexts, future research could explore its appli-
ting skills as they often provide a contextualised and cability in other contexts and investigate the impact of
engagingenvironment.Physicalcomputingactivitiesin different task types, age groups, cultural backgrounds,
theroboticsdomaineffectivelydevelopproblemsetting and educational levels on the framework’s validity and
skills. These activities necessitate programming robots generalisability.
toattainmultipleobjectivesinvolvingthemanipulation
andinteractionofreal-worldobjects.Asaresult,learn-
ersmustusecriticalthinkingwhenattemptingtosolve Abbreviations
problems and consider all factors of the task at hand.
Additionally, the implicit elements within these activ- CT computational thinking
ities, which may not be immediately obvious, further CT-cube computational thinking cube
promote the ability to set achievable goals and identify CTP computational thinking problem
the necessary steps to attain them. CTt Computational Thinking Test
Whenitcomestodevelopingalgorithmicskills,both R2T2 Remote Rescue with Thymio II
robotic and virtual activities are the most effective. STEM Science, Technology, Engineering and Math
Robotic activities, in particular, provide an excellent
opportunitytoenhancealgorithmicthinkingbyinvolv-
ing learners in designing the algorithmic sequence for Conflict of interest
the robot to fulfil the given task. Virtual coding activ-
ities, on the other hand, focus on developing learners’ The authors declare that they have no known com-
algorithmicthinkingskillsbyprovidingthemwithtools peting financial interests or personal relationships that
andfunctionalitiestoimplementalgorithmsandexper- could have appeared to influence the work reported in
iment with different concepts. In contrast, unplugged this paper.38 GiorgiaAdornietal.
Funding Thinking Skills through Unplugged Activities in Primary
School.In:Proceedingsofthe12thWorkshoponPrimaryand
This research was funded by the Swiss National Sci- Secondary Computing Education, Association for Comput-
ingMachinery,NewYork,NY,USA,WiPSCE’17,p65–72,
ence Foundation (SNSF) under the National Research
DOI10.1145/3137065.3137069
Program 77 (NRP-77) Digital Transformation (project BravoFA,GonzálezAM,GonzálezE(2017)Areviewofintuitive
number 407740_187246). robot programming environments for educational purposes.
In:2017IEEE3rdColombianConferenceonAutomaticCon-
trol(CCAC),IEEE,pp1–6
References Brennan K, Resnick M (2012) New frameworks for studying
andassessingthedevelopmentofcomputationalthinking.In:
Proceedingsofthe2012annualmeetingoftheAmericanedu-
ALGOREA AFi (2020) Ranger les billes. https://parcours.
cationalresearchassociation,Vancouver,Canada,vol1,p25
algorea.org/contents/4707-4702-1471479157476024035-
Bryndová L, Mališů P (2020) Assessing the current level of the
1312565015631453321-1609762309306083784-
computational thinking within the primary and lower sec-
4230985342204608/,[Accessed24January2022]
ondary school students using educational robotics tasks. In:
Angeli C, Voogt J, Fluck A, Webb M, Cox M, Malyn-Smith J,
2020 The 4th International Conference on Education and
Zagami J (2016) A k-6 computational thinking curriculum
MultimediaTechnology,AssociationforComputingMachin-
framework: Implications for teacher knowledge. Journal of
ery, New York, NY, USA, ICEMT 2020, p 239–243, DOI
EducationalTechnology&Society19(3):47–57
10.1145/3416797.3416819
Assaf D, Betschart S, Moser A, Curtins J, Steiner M, Walker N
Chevalier M, Giang C, Piatti A, Mondada F (2020) Foster-
(2021)«iMake-IT»:Invent,Code,andShapeYourWorld!a
ing computational thinking through educational robotics: a
workshop live stream from a science communication project
model for creative computational problem solving (CCPS).
where 5th grade students work in a makerspace on open-
InternationalJournalofSTEMEducation39,DOI10.1186/
ended projects. In: FabLearn Europe/MakeEd 2021-An In-
s40594-020-00238-z
ternational Conference on Computing, Design and Making
Codeorg(2015)InstructorHandbook-CodeStudioLessonPlans
inEducation,pp1–3
for Courses One, Two, and Three. https://code.org/
Ball T, Protzenko J, Bishop J, Moskal M, De Halleux J, Braun
curriculum/docs/k-5/complete.pdf,[Accessed4May2022]
M, Hodges S, Riley C (2016) Microsoft touch develop and
Csizmadia A, Curzon P, Dorling M, Humphreys S, Ng T, Selby
the bbc micro: bit. In: 2016 IEEE/ACM 38th International
C, Woollard J (2015) Computational thinking-a guide for
Conference on Software Engineering Companion (ICSE-C),
teachers. Tech. rep., Computing at School, URL https:
IEEE,pp637–640
//eprints.soton.ac.uk/424545/
Barbero M (2020) Backward reasoning in problem-solving situ-
Cui Z, Ng OL (2021) The interplay between mathematical and
ations: a multidimensional model. PhD thesis, Universidad
computational thinking in primary school students’ mathe-
ComplutensedeMadrid,FacultaddeCienciasMatemáticas
maticalproblem-solvingwithinaprogrammingenvironment.
Barbero M, Gómez-Chacón IM (2018) Analysing regressive rea-
JournalofEducationalComputingResearch59(5):988–1012
soningatuniversitylevel.In:INDRUM2018
Del Olmo-Muñoz J, Cózar-Gutiérrez R, González-Calero JA
Barr V, Stephenson C (2011) Bringing computational think-
(2020)Computationalthinkingthroughunpluggedactivities
ing to k-12: What is involved and what is the role of
inearlyyearsofPrimaryEducation.Computers&Education
the computer science education community? ACM Inroads
150:103832,DOI10.1016/j.compedu.2020.103832
2(1):48–54, DOI 10.1145/1929887.1929905, URL https://
Ford MJ (2015) Educational Implications of Choosing “Prac-
doi.org/10.1145/1929887.1929905
tice” to Describe Science in the Next Generation Science
Bell GI(2007) Triangular pegsolitaire unlimited. https://doi.
Standards. Science Education 99(6):1041–1048, DOI https:
org/10.48550/ARXIV.0711.0486
//doi.org/10.1002/sce.21188
BellGI(2008)Solvingtriangularpegsolitaire.JournalofInteger
France-IOIorg (2004) France-IOI. http://www.france-ioi.org,
Sequences11(2):3
[Accessed24January2022]
BellT,AlexanderJ,FreemanI,GrimleyM(2009)Computersci-
GroverS,PeaR(2017)ComputationalThinking:ACompetency
enceunplugged:schoolstudentsdoingrealcomputingwith-
Whose Time Has Come. Computer science education: Per-
out computers. The New Zealand Journal of Applied Com-
spectivesonteachingandlearninginschool19:1257–1258
putingandInformationTechnology13
HeersminkR(2013)Ataxonomyofcognitiveartifacts:Function,
Berlekamp ER, Conway JH, Guy RK (2004) Winning ways for
information, and categories. Review of Philosophy and Psy-
your mathematical plays, volume 4. AK Peters/CRC Press,
chology4(3):465–481,DOI10.1007/s13164-013-0148-1
LocationNewYork
Kalelioğlu F (2015) A new way of teaching programming skills
BersMU,HornMS(2010)Tangibleprogramminginearlychild-
to K-12 students: Code.org. Computers in Human Behavior
hood.High-techtots:Childhoodinadigitalworld49:49–70
52:200–210,DOI10.1016/j.chb.2015.05.047
BocconiS,ChioccarielloA,DettoriG,FerrariA,EngelhardtK,
Lafuente Martínez M, Lévêque O, Benítez Baena I, Hardebolle
KampylisP,PunieY(2016)Developingcomputationalthink-
C,DehlerZuffereyJ(2021)AssessingComputationalThink-
ing: Approaches and orientations in k-12 education. In: Ed-
ing:DevelopmentandValidationoftheAlgorithmicThinking
Media+InnovateLearning,AssociationfortheAdvancement
TestforAdults.JournalofEducationalComputingResearch
ofComputinginEducation(AACE),pp13–18
DOI10.1177/07356331211057819
Bocconi S, Chioccariello A, Kampylis P, Dagiene˙ V, Wastiau P,
Lafuente Martínez M, Lévêque O, Benítez I, Hardebolle C,
Engelhardt K, Earp J, Horvath MA, Jasute˙ E, Malagoli C,
Zufferey JD (2022) Assessing computational thinking: De-
etal.(2022)ReviewingComputationalThinkinginCompul-
velopment and validation of the algorithmic thinking test
sory Education. Tech. rep., Joint Research Centre (Seville
for adults. Journal of Educational Computing Research p
site),DOI10.2760/126955
07356331211057819
BrackmannCP,Román-GonzálezM,RoblesG,Moreno-LeónJ,
Casali A, Barone D (2017) Development of ComputationalAtheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 39
Lovett A (2017) Coding with Blockly. Cherry Lake Publishing, SelbyC,WoollardJ(2013)Computationalthinking:thedevelop-
AnnArbor,Michigan ing definition. Tech. rep., University of Southampton, URL
MagnenatS,RétornazP,BonaniM,LongchampV,MondadaF https://eprints.soton.ac.uk/356481/
(2011)Aseba:Amodulararchitectureforevent-basedcontrol SelbyCC(2014)Howcantheteachingofprogrammingbeused
ofcomplexrobots.IEEE/ASMETransactionsonMechatron- to enhance computational thinking skills? PhD thesis, Uni-
ics16(2):321–329,DOI10.1109/TMECH.2010.2042722 versityofSouthampton
Makecode (2016) Microsoft MakeCode for Micro:bit. https:// ShinJ,SiegwartR,MagnenatS(2014)Visualprogramminglan-
makecode.microbit.org,[Accessed4May2022] guage for thymio ii robot. In: Conference on interaction de-
Microbit (2016) BBC’s Make It Digital initiative, Micro:bit Ed- signandchildren(idc’14),ETHZürich
ucational Foundation. https://microbit.org, [Accessed 4 Shute VJ, Sun C, Asbell-Clarke J (2017) Demystifying compu-
May2022] tationalthinking.EducationalResearchReview22:142–158,
Mondada F, Bonnet E, Davrajh S, Johal W, Stopforth R DOI10.1016/j.edurev.2017.09.003
(2016) R2t2: Robotics to integrate educational efforts in Studiocodeorg (2020a) Angry birds hitting the green pig
south africa and europe. International Journal of Advanced maze. https://studio.code.org/hoc/1, [Accessed 24 Jan-
Robotic Systems 13(5):1729881416658165, DOI 10.1177/ uary2022]
1729881416658165 Studiocodeorg(2020b)ClassicMaze.https://studio.code.org/
Mussati A, Giang C, Piatti A, Mondada F (2019) A Tangible s/hourofcode,[Accessed24January2022]
ProgrammingLanguagefortheEducationalRobotThymio. Studiocodeorg(2020c)PlantsvsZombiesmaze.https://studio.
In: 2019 10th International Conference on Information, In- code.org/hoc/12,[Accessed24January2022]
telligence, Systems and Applications (IISA), IEEE, pp 1–4, Tall D (2006) A Theory of Mathematical Growth Through Em-
DOI10.1109/IISA.2019.8900743 bodiment, Symbolism and Proof. ANNALES de DIDAC-
Noone M, Mooney A (2018) Visual and textual programming TIQUEetdeSCIENCESCOGNITIVES,IREMdeSTRAS-
languages: a systematic review of the literature. Journal of BOURG11:195–215
ComputersinEducation5(2):149–174 TallD(2013)HowHumansLearntoThinkMathematically:Ex-
Osborne J (2014) Teaching Scientific Practices: Meeting the ploring the Three Worlds of Mathematics. Cambridge Uni-
Challenge of Change. Journal of Science Teacher Education versityPress,Cambridge,DOI10.1017/CBO9781139565202
25(2):177–196,DOI10.1007/s10972-014-9384-1 Tall D (2020) Making Sense of Mathematical Thinking over the
Piatti A, Adorni G, El-Hamamsy L, Negrini L, Assaf D, Gam- LongTerm:TheFrameworkofThreeWorldsofMathematics
bardella L, Mondada F (2022) The CT-cube: A framework andNewDevelopments.MINTUS:Beiträgezurmathematis-
forthedesignandtheassessmentofcomputationalthinking chen,naturwissenschaftlichenundtechnischenBildungWies-
activities.ComputersinHumanBehaviorReports5:100166, baden: Springer URL https://homepages.warwick.ac.uk/
DOIhttps://doi.org/10.1016/j.chbr.2021.100166 staff/David.Tall/pdfs/dot2020a-3worlds-extension.pdf
Riedo F, Chevalier M, Magnenat S, Mondada F (2013) Thymio Thalheim B (2000) The database design process. In: Entity-
ii, a robot that grows wiser with children. In: 2013 IEEE Relationship Modeling, Springer,Berlin, Heidelberg, pp13–
workshoponadvancedroboticsanditssocialimpacts,IEEE, 28
pp187–193 Tikva C, Tambouris E (2021) Mapping computational thinking
Rodríguez-Martínez JA, González-Calero JA, Sáez-López JM throughprogramminginK-12education:Aconceptualmodel
(2020) Computational thinking and mathematics using basedonasystematicliteratureReview.Computers&Edu-
scratch:anexperimentwithsixth-gradestudents.Interactive cation162:104083,DOI10.1016/j.compedu.2020.104083
LearningEnvironments28(3):316–327 Weintrop D, Beheshti E, Horn M, Orton K, Jona K, Trouille
Román-GonzálezM(2015)Computationalthinkingtest:Design L, Wilensky U (2016) Defining computational thinking for
guidelines and content validation. In: EDULEARN15 Pro- mathematicsandscienceclassrooms.JournalofScienceEd-
ceedings,IATED,pp2436–2444 ucationandTechnology25(1):127–147
Román-GonzálezM,Moreno-LeónJ,RoblesG(2017a)Comple- Weintrop D, Rutstein DW, Bienkowski M, McGee S (2021) As-
mentary Tools for Computational Thinking Assessment. In: sessing computational thinking: an overview of the field.
Proceedings of International Conference on Computational Computer Science Education 31(2):113–116, DOI 10.1080/
ThinkingEducation(CTE2017),S.CKong,JSheldon,and 08993408.2021.1918380
K.YLi(Eds.).TheEducationUniversityofHongKong,pp Wing J (2011) Research notebook: Computational think-
154–159 ing—whatandwhy.Thelinkmagazine6:20–23
Román-González M, Pérez-González JC, Jiménez-Fernández C Wing JM (2006) Computational thinking. Communications of
(2017b) Which cognitive abilities underlie computational theACM49(3):33–35,DOI10.1145/1118178.1118215
thinking? criterion validity of the computational thinking Zoombinis (2021) Zoombinis. https://www.terc.edu/
test.Computersinhumanbehavior72:678–691 zoombinis/about/,[Accessed4May2022]
Román-González M, Pérez-González JC, Moreno-León J, Rob-
lesG(2018)Cancomputationaltalentbedetected?Predic-
tive validity of the Computational Thinking Test. Interna-
tionalJournalofChild-ComputerInteraction18:47–58,DOI A The relationship between CTP and CT skills
10.1016/j.ijcci.2018.06.004
Roth WM, Jornet A (2013) Situated cognition. Wiley Inter-
ThissectionprovidesadetailedanalysisofthecontentofTable6,
disciplinary Reviews: Cognitive Science 4(5):463–478, DOI
organised by the main levels of the activity dimension: problem
10.1002/wcs.1242
setting, algorithm, and assessment. For each dimension, we first
Rowe E, Almeda MV, Asbell-Clarke J, Scruggs R, Baker R,
describe the link between skills and the required features, then
Bardar E, Gasca S (2021) Assessing implicit computational
the link between the skills and the characteristics that act as
thinking in Zoombinis puzzle gameplay. Computers in Hu-
catalysts.
manBehavior120:106707,DOI10.1016/j.chb.2021.106707
Thecomputationalthinkingproblem(CTP)featureswecon-
sidered are the functionalities allowed to the problem solver by40 GiorgiaAdornietal.
the tools, the property of the system, such as resettability and solver,givingachancetoexploredifferentsolutions.Incontrast,
observability,andfinally,thetraitofthetask,includingtheele- a non-resettable system may require more creativity to find a
mentsrequiredtobefound,thetypeofcardinalityoftheelements solution. If the system is observable, the problem solver would
given and to be found, the presence of constraints and the type likely use skills related to “data collection”, as he can directly
ofrepresentationofthealgorithm. perceive and then gather information about the system’s state
and properties. Additionally, he may use skills related to “pat-
tern recognition”, such as identifying patterns or trends in the
data collected. These skills can help the problem solver under-
A.1 Indispensable features to activate problem setting
stand the system’s current state and make informed decisions
competencies
about how to solve the task. Conversely, suppose the system is
notobservable.Inthatcase,theproblemsolvermayneedtorely
Starting from the problem setting skills, to activate the “data onabstractandhypotheticalreasoningtodeviseasolution,acti-
collection” competence, the only requirement is that the tools vating “pattern recognition”, “decomposition”, and “abstraction”
availableallowtheuseandrecognitionofvariables.Withoutvari- to understand the problem and identify possible solutions. Also
ables, there would be nothing to collect data on. The “pattern “data collection” may be necessary to gather information about
recognition” competence requires the presence of repetitions or thesystemanditsbehaviour,evenifthatinformationisnotdi-
functionssincetheyallowtheidentificationofrepeatingpatterns rectlyobservable.Additionally,the“datarepresentation”skillcan
in the data. The “decomposition” competence requires the pres- beusedtoorganiseandinterprettheinformationtheyhavecol-
ence of functions or sequences that can be used to break down lectedtomakesenseoftheproblemanddevelopasolution.When
a complex problem into smaller more manageable components. there is a many-to-one cardinality in the system, it means that
The“abstraction” competencedemandsthepresenceofvariables there is a large amount of data that needs to be processed, and
torepresentkeyconceptsandfunctionstoencapsulateandreuse multipleinputsorsourcesofinformationcanbeusedtoachieve
specificbehaviourwithinasingle,self-containedunit,simplifying a single goal or outcome. In this scenario, the “data collection”
theoriginaltaskandallowingtheproblemsolvertoreasonabout skillwilllikelybeactivatedbecausetheproblemsolverneedsto
the problem at a higher level of abstraction. Finally, the “data gatheralargeamountofinformationtounderstandtheproblem
representation” competence requires only variables to represent andfindasolution.Sincetherearemultipleinstancesofacertain
data. elementorpattern,recognisingthecommonalitiesanddifferences
amongthemwouldbeessentialtounderstandtheoverallsystem,
leading to the use of more complex data collection and analysis
A.2 Features triggering problem setting competencies strategies, thereby activating the “pattern recognition” compe-
tence.The“decomposition” andthe“abstraction” skillswillalso
likelybeactivatedastheproblemsolverneedstobreakdownthe
Generally,theattributesoftheproblemnotrequireddirectlyto
problem into smaller manageable parts and find the underlying
activatetheskillscaninfluencetheminsomeway.Inthecaseof
principlesandconceptsintheproblemtounderstandtheoverall
the characteristics of the tools, for example, variables also play
systemandfindasolution.Finally,astherearemultipleinstances
a role in “pattern recognition” and “decomposition”, as they can
ofaspecificelement,itwouldbeessentialtocommunicatethem
be used to store patterns or parts of a complex problem. Then,
clearly and concisely, thus activating the “data representation”
operators can be useful for the “decomposition” of the problem
skill. By contrast, if there is a one-to-one cardinality in the sys-
into smaller parts. At the same time, sequences can contribute
tem, the competencies of problem setting that are likely to be
totheprocessesof“patternrecognition” and“abstraction”,help-
activatedinclude“datacollection”,“patternrecognition”,and“de-
ing the problem solver to identify patterns or regularities in the
composition”. The skills “abstraction” and “data representation”
data,aswellasthekeyconceptsoressentialelementsofaprob-
arelesslikelytobeactivatedsincethedirectcorrespondencebe-
lem, but also in “data representation” to organise and present
tweenthesystemelementsmeansthereislessneedtoabstractor
data in a clear and meaningful way. Repetitions can influence
represent the information. It can be assumed that with implicit
the activation of the problem setting skills of “decomposition”,
elements, the “data collection”, “pattern recognition”, “decompo-
“abstraction”, and “data representation” because they can make
sition” and “abstraction” competencies may be activated as the
the task more complex thus requiring the problem solver to use
problemsolverneedstoinferinformationfromthecontextorthe
thesepractices.Similarly,conditionalscanhelptostructureand
environment,understandtheunderlyingconceptsorpatternsin
simplify a problem, making it more manageable and easier to
thetask,decomposetheproblemintosmallersub-problems,and
solve, enabling “pattern recognition”, “decomposition”, “abstrac-
createabstractrepresentationsofthesystem.Thesamereasoning
tion” and “data representation”. Functions can influence the ac-
can be applied to constrained elements. Moreover, it is possible
tivation of “data representation” by helping the problem solver
that the competence “data representation” may be activated as
organiseandstructuredata.Parallelismcaninfluencetheactiva-
implicitorconstrainedelementsmayrequiretheproblemsolver
tion of the problem-solving skill of “decomposition” as it allows
tothinkabouthowtorepresentthedatainawaythataccurately
forbreakingtheproblemintoindependentsubtasksthatcanbe
reflectstheunderlyinginformationorconstraints.Likewise,with
executedsimultaneously.Finally,eventscantrigger“datacollec-
explicitelements,the“patternrecognition”,“decomposition”,and
tion” ataspecificpointintime.Forthesakeofthecharacteristic
“abstraction”competenciesmayalsobeactivated,astheproblem
of the system, resettability allows the problem solver to start
solverneedstounderstandandmakesenseofthegiveninforma-
over and try different approaches to solving the problem, thus
tion,andthepresenceofunconstrainedelementstobefoundmay
stimulating can problem setting skills such as “data collection”,
allowformoreflexibilityandcreativityinproblem-solving,poten-
“pattern recognition”, and “decomposition”, as they can test dif-
tiallyactivatingtheseskills,asproblemsolversmayneedtofind
ferent strategies and collect data on their effectiveness. On the
novelwaystoorganiseormakeconnectionsamongtheelements.
other hand, if the system is not resettable, the problem solver
In this scenario, the “data collection” and “data representation”
mayhavetorelymoreon“abstraction”and“datarepresentation”
competencies may be more straightforward and not as crucial,
skills to find a solution, as they cannot try different approaches
especially when the elements are explicit and thus the informa-
andmustworkwiththeinformationtheyhaveavailable.Ingen-
tion is already provided in a structured format. Regarding the
eral, a resettable system allows more freedom for the problemAtheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 41
representationofthealgorithm,overallallproblemsettingcom- “repetition”canbeusedtoiterateovertheinputs.Similarly,“con-
petencies may be activated. Nevertheless, a manifest algorithm ditionals”canbeusedifthetaskrequiresselectingoneoutputout
makestheproblemsolver’staskeasierbyprovidingaclearsetof of multiple possibilities based on certain conditions. In contrast
instructionsandreducingtheneedfor“patternrecognition” and “functions” canbeusedtomodularisethecodeandmakeitmore
“decomposition”.However,anotmanifestalgorithmcanpromote organisedandmaintainable.Finally,“parallelism” canbeusedto
more“patternrecognition”,“decomposition”,and“abstraction”as speed up the processing of multiple inputs by running multiple
theproblemsolverneedstoinferthealgorithmfromtheproblem iterationssimultaneously.Further,explicitelementsprovideclear
statementandavailableinformationandcannotrepresentit. andspecificinformationaboutthetaskthatmustbesolved,al-
lowing the problem solver to use all the algorithmic structures
tomanipulateandworkwiththatinformationtoachievethede-
sired outcome. Besides, the presence of implicit elements in the
A.3 Indispensable features to activate algorithmic taskmakesitmoredifficultfortheproblemsolvertounderstand
competencies and determine the necessary steps to solve the task, thus some
algorithmic structures may need to be used to compensate for
thisshortcoming.Forexample,“variables” wouldbenecessaryto
For the algorithm dimension, each competence to be activated
store and track the values of implicit elements, “operators”, “se-
requires that the corresponding characteristic of the tool is en-
quences”,“repetitions”,“conditionals”,and“functions” wouldhelp
abled.Forexample,toactivatethe“variable” skill,thetoolsused
makedecisionsandperformactionsbasedonthevaluesofthese
by the problem solver should include variables. Moreover, in a
variables.Thesealgorithmicstructureswouldallowtheproblem
formal artefactual environment, the task requires that the algo-
solver to explain the implicit elements effectively and develop
rithmisnotgivenbuthastobefound.Otherwise,itispossible
more sophisticated and efficient solutions. Similarly, the space
onlytoassesstheproblemsolverabilitytorecognisetheseskills
for possible solutions is limited when constrained elements are
andapplythem,butnotcreateanalgorithmfromscratch.
involved in the task and it may be necessary to use some algo-
rithmicstructurestoensurethoseconstraintsaremet.Forexam-
ple,whilesolvingapuzzle,thefinalstateandalgorithmhaveto
A.4 Features triggering algorithmic competencies be found, and they have constraints: the problem solver has to
fitseveralpiecestogethertoformacompleteimage,piecesmust
fittogethertoformaspecificfigure,andcertainpiecescanonly
Again, some characteristics can also influence the activation of
beplacedincertainorientations.Tosolvethistask,theproblem
algorithmic competencies. Regarding the characteristics of the
solvermightuseacombinationofalgorithmicstructuressuchas
tools, for example, the presence of variables may influence the
“variables”tokeeptrackofthecurrentstateofthepuzzleandthe
activation of all the other algorithmic skills, since they provide
position of the pieces, “operators” to manipulate the pieces and
afundamentalbuildingblockforcreatingalgorithmsandcanbe
move them around, “sequences” to try different combinations of
usedinconjunctionwithotheralgorithmicstructures.Similarly,
pieces, “repetitions” to keep trying different combinations until
operators influence the activation of all algorithmic skills. The
the puzzle is complete, and “conditionals” to check if the cur-
presenceofsequencesmayinfluencetheactivationof“variables”,
rent combination of pieces meets the constraints. Additionally,
“operators”, “repetitions” and “functions”; repetitions may influ-
“functions” couldalsobeusedtogroupsetsofrepeatedactions.
ence the activation of “variables”, “operators”, “sequences” and
Finally,howthealgorithmisrepresentedcanaffecttheactivation
“functions”; the presence of conditionals may influence the acti-
of various algorithmic structures depending on the type of rep-
vationof“variables”,“operators” and“events”;functionsmayin-
resentation used. Considering different types of tools, each can
fluencetheactivationof“variables”,“operators”,“sequences” and
bemoresuitedtoactivatingoneskillratherthananother.Ifthe
“repetitions”; the presence of parallelism may influence the acti-
algorithm is represented in a mathematical notation, the use of
vationof“variables” and“operators”;whileeventsmayinfluence
“operators” may be more prominent. On the one hand, if the
theact“variables”,“operators”and“conditionals”.Theresettabil-
algorithm is represented in a visual block-based programming
ityornon-resettabilityofasystemisnotrelevantforactivating
language,theuseof“sequences”,“repetitions” and“conditionals”
or not algorithmic competencies. The system’s observability, or
maybemoreintuitiveandeasiertoactivate.Ontheotherhand,
theabilitytoobservetheagent’sactionsandthesystem’sstate,
ifthealgorithmisrepresentedinatext-basedprogramminglan-
allows tracking of how the algorithm is executing and makes it
guage,theuseof“variables”and“functions”maybemorenatural
easier for the problem solver to identify these procedures used
to activate. Finally, robotic programming languages are usually
bytheagent.Instead,anon-observablesystemmayactivatethe
designedfordetectingandrespondingto“events”,suchassensor
skills of “variables”, “operators”, “sequences”, and “conditionals”,
readingsorotherinputs.Theyoftenhavebuilt-infunctionalities
sincetheproblemsolvermayneedtorelymoreheavilyontheir
for concurrent execution of multiple instructions, allowing “par-
abilitytoreasonaboutthesystemandmakeinferencesbasedon
allelism”.Overall,thechoiceofrepresentationcanaffecttheease
limited information. Regarding the ratio of elements given and
andfamiliarityofactivatingdifferentalgorithmicstructuresand
to be found, from one side, a one-to-one cardinality may influ-
mayalsoshapetheproblemsolver’sunderstandingandabilityto
ence the activation of the algorithmic skill “variables” that can
applythemeffectively.
beusedtodefinethedirectcorrespondencebetweentheelements
in the system and their representations, but also of “operators”
and “conditionals” proper to manipulate them and necessary to
ensure the correct mapping. On the other side, a many-to-one
A.5 Indispensable features to activate assessment
cardinality can make it more challenging to understand the re-
competencies
lationship between the given elements and those to be found,
impacting the ability to understand the algorithm and its parts
andenforcingtheuseofcertaintypesofstructures.Forexample, Finally,intheassessmentcategory,allskillshaveincommonthe
the problem solver can keep track and map multiple instances needforthesystemtoberesettablefortheskilltobeactivated.
to a single object using “variables”. If the task at hand involves Forexample,in“algorithmdebugging”,iftheinstructioncannot
processingmultiplepiecesofdataandproducingasingleresult,a bereversed,itisimpossibletoreviseandtestthepreviouscode42 GiorgiaAdornietal.
versions.Thus,resettabilityisnecessarytodebugthealgorithm samealgorithmtodifferentpartsofaproblemortask.Similarly,
inacontrolledandrepeatableenvironment.Thesameappliesto the inclusion of conditionals allows for the application of differ-
correctingerrorsinthestateandconstraintsandimprovingthe ent algorithms depending on the specific conditions of the task.
solution’s performance or generalising it. In the specific case of Furthermore,thepresenceofeventsinthetoolsetallowsforcre-
“algorithmdebugging”,thisskillcanbeactivatedinallthearte- atingalgorithmsthatcanrespondtodifferenttriggerswithinthe
factualenvironmentsifthealgorithmhastobefoundandifitis problem, leading to a greater generalisation of the solution and
manifestbecauseitallowstheusertounderstandandcheckthe the ability to adapt to changes within the problem. In terms of
logic and the flow of the algorithm. This is essential to identify observability,an observablesystemallowstheproblemsolverto
andfixanybugsorerrorsinthealgorithm.Whileitbecomesin- haveaclearunderstandingofthesystem’sstateandtheoutputof
creasinglyimportanttohaveawrittenalgorithmasthedifficulty thealgorithm,whichcanaidinidentifyingandaddressingerrors
leveloftheartifactualenvironmentrises,itmaystillbepossible and inefficiencies and performance issues, as well as recognising
tosolvetheproblemwithoutone.However,theabsenceofawrit- patternsorregularitiesthatcanbegeneralisedtonewordifferent
tenalgorithmmaymakeitmorechallengingtoanalyseormodify situations.However,itisessentialtonotethatwhileobservabil-
the solution in a formal setting, as the artefactual environment itycanaidinallassessmentskills,itisnotstrictlynecessaryfor
is more abstract and requires a more in-depth understanding. theiractivation.Forexample,onecouldstillperform“algorithm
For this reason, we considered the skill required in this context. debugging” and “system state verification” on a non-observable
The“systemstateverification”competencecanbeactivatedinall system, though it may be more difficult. Similarly, “generalisa-
threeartefactualenvironmentsifatleastonebetweentheinitial tion” canstilloccurwithoutperfectobservability,butitmaybe
andfinalstatesmustbefound.Inembodiedenvironments,direct hardertoidentifypatternsandregularitieswithoutdirectaccess
physical interactions with the system provide a way to observe tothesystemstate.Ifthesystemhasamany-to-onecardinality,
itsstatewithoutneedingamanifestalgorithm.However,insym- thecompetenceof“generalisation” maybeactivatedasitwould
bolic and formal environments, a manifest representation of the be necessary to apply the same algorithm to different inputs or
algorithm,writteninthecaseofformalenvironments,iscrucial outputs.Ifthesystemcontainsimplicitelements,thecompeten-
to fully understand its logical flow, verify the system state, and cies“algorithmdebugging”and“systemstateverification”maybe
performformalreasoningaboutitscorrectness.Thismayinvolve activated as the problem solver may need to identify and trou-
analysing the symbolic representation to understand how it im- bleshootanyissueswiththealgorithmthatarenotimmediately
pacts the system state. To activate the “constraints validation” apparent or infer the current state of the system based on the
competence, it is blatant that the other necessary characteristic implicitinformationprovided.Also“generalisation” maybeacti-
is having constraints on the states to be found. To enable “op- vatedastheproblemsolvermayneedtoapplythealgorithmto
timisation”, additional features are not required, while for “gen- different situations based on the implicit information provided.
eralisation”, variables and functions are necessary to reuse and Finally, suppose in the system there are elements to be found
applythetasksolutiontodifferentproblems. with constraints. In that case, the “generalisation” skill may be
activatedbecauseitrequirestheproblemsolvertoadaptthetask
tothe specific constraints andcanbeintendedas solvinganew
A.6 Features triggering assessment competencies problemusingtheknowledgeacquiredinaprevioussituationand
adaptingittoanewone.
Each tool functionality available to the problem solver can be a
potentialcauseoferrorinthealgorithm.Forexample,iftheprob-
lemsolverisunfamiliarwithoneofthemordoesnotunderstand B Analysis of the 16 prototypical CTPs
howtouseitcorrectly,hemaynotuseitatallormisuseit.This
can lead to errors in the algorithm and potentially result in the Thissectionprovidessupplementarymaterialsforthe16activi-
problem not being solved correctly. This is why functionalities tiesexaminationpresentedinthe“Results” sectionofthisstudy.
ofthetoolsifavailablecanactivate“algorithmdebugging”.Also Forthispurpose,weadaptedthegraphicaltemplatefromFig.3
for “constraints validation”, all the characteristics of the tools describingthevariouscomponentsandcharacteristicsofthespe-
are influential. Above all, variables, operators, conditional and cific computational thinking problems (CTPs). Additionally, we
functions may allow the problem solver to perform various cal- adjustedTable6toillustratetherelationshipbetweentheCTP
culationsandcomparisonstocheckifthevaluesassignedtothe characteristics and the computational thinking (CT) competen-
variablesmeetthespecifiedconstraints.Further,itcouldbethat cies. Notably, the tables highlight the columns corresponding to
the constraint imposed is precisely on the algorithm and pro- the activity features in light grey, while white columns indicate
hibits using some of these structures. The functionality of the the absence of a given feature. In addition, the tables highlight
toolsavailabletotheproblemsolvercangreatlyimpactthe“op- thegreencheckmarksandtheredcrosses,respectivelygreenand
timisation”ofthealgorithminseveralways.Parallelismallowsfor red,toindicatewhichfeaturesenableorinhibitaparticularskill.
multipletasksorprocessestobeexecutedsimultaneously,which Furthermore, the tables include an additional column absent in
can greatly reduce the overall time required to complete a task. theoriginalTable6.ThiscolumnprovidesinsightintowhichCT
Sequencesandotherstructures,suchasloops,canalsohelptoim- competencies can be activated based on the various characteris-
proveefficiencybyallowingfortheautomationofrepetitivetasks ticsoftheCTP.
andtheabilitytoperformactionsinaspecificorder.Additionally, By providing a comprehensive analysis of activity features
usingfunctionsandsubroutinescanimprovethereadabilityand andtheirpotentialimpactonCTdevelopment,thissectionsup-
maintainabilityofthealgorithm,makingiteasiertoidentifyand ports the findings presented in the “Results” section. This in-
fixanyerrorsthatmayoccur.However,havingaccesstoawide formation could be useful for educators seeking to integrate CT
range of functionalities can make it challenging for the problem into their teaching practices, as it offers practical insights into
solvertochoosetheappropriateoneforaspecifictask,leadingto how specific activities can be used to promote the development
arevisionofthesolutiontoincreaseefficiencyandperformance. ofCTcompetencies.
Thecompetence“generalisation” canalsobeinfluencedbyother
characteristics of the tools. The presence of sequences and rep-
etitions in the toolset enables the problem solver to apply theAtheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 43
Problem solver System
☐✓ single ☐ group ☐✓ unplugged ☐ robotic ☐ virtual
☐ resettable ☐✓ not resettable
Artefactual environment
☐✓ (partly) observable ☐ not observable
☐✓ variables ☐✓ operators ☐✓ sequences ☐✓ repetitions
☐ conditionals ☐✓ functions ☐✓ parallelism ☐ events
Agent Environment
Reasoning ☐✓ human ☐ robotic ☐ virtual ☐✓ physical ☐☐ vviirrttuuaall
Interactions
tools Visual feedback
Support schema tools ☐✓ embodied Actions Descriptors
☐✓ embodied
Paint the colouring schema Colours of the dots on the
Reference schema Gestures Voice ☐ reversible ☐✓ not reversible colouring schema
☐✓ embodied ☐✓ symbolic
☐✓ embodied
Task
☐ find the initial state ☐✓ find the algorithm ☐ find the final state ☐ creation act ☐ application act ☐ project act
☐✓ one-to-one cardinality ☐ many-to-one cardinality
Algorithm
Initial state Final state
☐✓ manifest ☐ latent
Given: white colouring schema ☐ written ☐✓ not written Given: colouring schema same as the reference
☐ ☐✓ ✓ e ox np elicit ☐ ☐ i mm ap nli ycit To b☐e wforuitntedn: set of co☐lou nriontg w arcitttieonns ☐ ☐✓ ✓ e ox np elicit ☐ ☐ i mm ap nli ycit
☐ constrained ☐✓ unconstrained
☐✓ one ☐ many
Fig. B.1 GraphicaltemplateforanalysingtheCrossArrayTask.
Table B.1 RelationshipbetweentheCrossArrayTaskcharacteristicsandCTcompetencies.
Tool functionalities System Task
(cid:86) (cid:86) (cid:86) (cid:86) (cid:79) (cid:86) (cid:86) (cid:79) (cid:79) (cid:86) (cid:86) (cid:79) (cid:79) (cid:86) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:79) (cid:86)
Datacollection ✓ ✓ + + + + + + + + + + + + +
Patternrecognition ✓ + + ✓* + ✓* + + + + + + + + + + + + + +
Decomposition ✓ + + ✓* + + ✓* + + + + + + + + + + + + + +
Abstraction ✓ ✓ + + + ✓ + + + + + + + + + + +
Datarepresentation ✓ ✓ + + + + + + + + + + + + +
Variables ✓ ✓ + + + + + + + + + ✓F + + + + + + + + +
Operators ✓ + ✓ + + + + + + + + ✓F + + + + + + + +
Sequences ✓ + + ✓ + + + + ✓F + + + + + + +
Repetitions ✓ + + + ✓ + + ✓F + + + + + + + +
Conditionals ✗ + + ✓ + + + ✓F + + + + + + + + +
Functions ✓ + + + + ✓ + ✓F + + + + + + + +
Parallelism ✓ + + ✓ + ✓F + + + + + +
Events ✗ + + + ✓ + ✓F + + + + +
Algorithmdebugging ✗ + + + + + + + + ✓ ✗ + ✓ + ✓ ✗ ✓F ✗F
Systemstateverification ✗ ✓ ✗ + ✓ + ✓SF ✗SF ✓F ✗F
Constraintsvalidation ✗ + + + + + + + + ✓ ✗ + ✗ ✓
Optimisation ✗ + + + + + + + + ✓ ✗ +
Generalisation ✗ ✓ + + + ✓ + ✓ ✗ + + + +
selbairaV srotarepO secneuqeS snoititepeR slanoitidnoC snoitcnuF msilellaraP
stnevE
elbattesermetsyS
elbattesertonmetsyS
elbavresbometsyS
elbavresbotonmetsyS
dnuofebotetatS
dnuofebotmhtiroglA ytilanidraceno-ot-enO ytilanidraceno-ot-ynaM
stnemeleticilpxE stnemeleticilpmI
stnemeledeniartsnocnU stnemeledeniartsnoC
tsefinammhtiroglA tnetalmhtiroglA nettirwmhtiroglA
nettirwtonmhtiroglA44 GiorgiaAdornietal.
Problem solver System
☐✓ single ☐ group ☐✓ unplugged ☐ robotic ☐ virtual
☐ resettable ☐✓ not resettable
Artefactual environment
☐ (partly) observable ☐✓ not observable
☐✓ variables ☐✓ operators ☐✓ sequences ☐✓ repetitions
☐ conditionals ☐✓ functions ☐ parallelism ☐ events
Agent Environment
Reasoning
Symbols Reference schema
☐✓ human ☐ robotic ☐ virtual ☐✓ physical ☐☐ vviirrttuuaall
tools ☐✓ embodied ☐✓ embodied
Actions Descriptors Colours of the squares
Interactions Paint the colouring schema on the colouring schema
tools Steps array ☐ reversible ☐✓ not reversible Symbols on
☐✓ symbolic the steps array
Task
☐ find the initial state ☐✓ find the algorithm ☐ find the final state ☐ creation act ☐ application act ☐ project act
☐✓ one-to-one cardinality ☐ many-to-one cardinality
Algorithm
Initial state Final state
☐✓ manifest ☐ latent
Given: white colouring schema ☐✓ written ☐ not written Given: colouring schema same as the reference
☐ ☐✓ ✓ e ox np elicit ☐ ☐ i mm ap nli ycit To b☐e wforuitntedn: set of sym☐b noolst ownri tttheen steps array ☐ ☐✓ ✓ e ox np elicit ☐ ☐ i mm ap nli ycit
☐ constrained ☐✓ unconstrained
☐✓ one ☐ many
Fig. B.2 GraphicaltemplatefortheanalysisoftheGraphPaperProgramming(part1).
Table B.2 RelationshipbetweentheGraphPaperProgramming(part1)characteristicsandCTcompetencies.
Tool functionalities System Task
(cid:86) (cid:86) (cid:86) (cid:86) (cid:79) (cid:86) (cid:79) (cid:79) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79)
Datacollection ✓ ✓ + + + + + + + + + + + + +
Patternrecognition ✓ + + ✓* + ✓* + + + + + + + + + + + + + +
Decomposition ✓ + + ✓* + + ✓* + + + + + + + + + + + + + +
Abstraction ✓ ✓ + + + ✓ + + + + + + + + + + +
Datarepresentation ✓ ✓ + + + + + + + + + + + + +
Variables ✓ ✓ + + + + + + + + + ✓F + + + + + + + + +
Operators ✓ + ✓ + + + + + + + + ✓F + + + + + + + +
Sequences ✓ + + ✓ + + + + ✓F + + + + + + +
Repetitions ✓ + + + ✓ + + ✓F + + + + + + + +
Conditionals ✗ + + ✓ + + + ✓F + + + + + + + + +
Functions ✓ + + + + ✓ + ✓F + + + + + + + +
Parallelism ✗ + + ✓ + ✓F + + + + + +
Events ✗ + + + ✓ + ✓F + + + + +
Algorithmdebugging ✗ + + + + + + + + ✓ ✗ + ✓ + ✓ ✗ ✓F ✗F
Systemstateverification ✗ ✓ ✗ + ✓ + ✓SF ✗SF ✓F ✗F
Constraintsvalidation ✗ + + + + + + + + ✓ ✗ + ✗ ✓
Optimisation ✗ + + + + + + + + ✓ ✗ +
Generalisation ✗ ✓ + + + ✓ + ✓ ✗ + + + +
selbairaV srotarepO secneuqeS snoititepeR slanoitidnoC snoitcnuF msilellaraP
stnevE
elbattesermetsyS
elbattesertonmetsyS
elbavresbometsyS
elbavresbotonmetsyS
dnuofebotetatS
dnuofebotmhtiroglA ytilanidraceno-ot-enO ytilanidraceno-ot-ynaM
stnemeleticilpxE stnemeleticilpmI
stnemeledeniartsnocnU stnemeledeniartsnoC
tsefinammhtiroglA tnetalmhtiroglA nettirwmhtiroglA
nettirwtonmhtiroglAAtheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 45
Problem solver (Agent) System
☐✓ single ☐ group ☐✓ unplugged ☐ robotic ☐ virtual
☐ resettable ☐✓ not resettable
Artefactual environment
☐✓ (partly) observable ☐ not observable
☐✓ variables ☐✓ operators ☐✓ sequences ☐✓ repetitions
☐ conditionals ☐✓ functions ☐ parallelism ☐ events
Agent (Problem solver) Environment
Reasoning ☐✓ human ☐ robotic ☐ virtual ☐✓ physical ☐☐ vviirrttuuaall
tools Couloring schema
☐✓ embodied Actions Descriptors Colours of the squares
Interactions Paint the colouring schema on the colouring schema
tools Visual feedback Steps array ☐ reversible ☐✓ not reversible Symbols on
☐✓ embodied ☐✓ symbolic the steps array
Task
☐ find the initial state ☐ find the algorithm ☐✓ find the final state ☐ creation act ☐ application act ☐ project act
☐✓ one-to-one cardinality ☐ many-to-one cardinality
Algorithm
Initial state Final state
☐✓ manifest ☐ latent
Given: white colouring schema ☐✓ written ☐ not written To be found: schema reproducing the program
☐ ☐✓ ✓ e ox np elicit ☐ ☐ i mm ap nli ycit Give☐n :w sreittt eonf symbols ☐on n tohte w srtiettpesn array ☐ ☐✓ c oo nn estrained ☐ ☐✓ u mn ac no ynstrained
☐✓ explicit ☐ implicit
☐✓ one ☐ many
Fig. B.3 GraphicaltemplateforanalysingtheGraphPaperProgramming(part2).
Table B.3 RelationshipbetweentheGraphPaperProgramming(part2)characteristicsandCTcompetencies.
Tool functionalities System Task
(cid:86) (cid:86) (cid:86) (cid:86) (cid:79) (cid:86) (cid:79) (cid:79) (cid:79) (cid:86) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79)
Datacollection ✓ ✓ + + + + + + + + + + + + +
Patternrecognition ✓ + + ✓* + ✓* + + + + + + + + + + + + + +
Decomposition ✓ + + ✓* + + ✓* + + + + + + + + + + + + + +
Abstraction ✓ ✓ + + + ✓ + + + + + + + + + + +
Datarepresentation ✓ ✓ + + + + + + + + + + + + +
Variables ✓ES ✓ + + + + + + + + + ✓F + + + + + + + + +
Operators ✓ES + ✓ + + + + + + + + ✓F + + + + + + + +
Sequences ✓ES + + ✓ + + + + ✓F + + + + + + +
Repetitions ✓ES + + + ✓ + + ✓F + + + + + + + +
Conditionals ✗ + + ✓ + + + ✓F + + + + + + + + +
Functions ✓ES + + + + ✓ + ✓F + + + + + + + +
Parallelism ✗ + + ✓ + ✓F + + + + + +
Events ✗ + + + ✓ + ✓F + + + + +
Algorithmdebugging ✗ + + + + + + + + ✓ ✗ + ✓ + ✓ ✗ ✓F ✗F
Systemstateverification ✗ ✓ ✗ + ✓ + ✓SF ✗SF ✓F ✗F
Constraintsvalidation ✗ + + + + + + + + ✓ ✗ + ✗ ✓
Optimisation ✗ + + + + + + + + ✓ ✗ +
Generalisation ✗ ✓ + + + ✓ + ✓ ✗ + + + +
selbairaV srotarepO secneuqeS snoititepeR slanoitidnoC snoitcnuF msilellaraP
stnevE
elbattesermetsyS
elbattesertonmetsyS
elbavresbometsyS
elbavresbotonmetsyS
dnuofebotetatS
dnuofebotmhtiroglA ytilanidraceno-ot-enO ytilanidraceno-ot-ynaM
stnemeleticilpxE stnemeleticilpmI
stnemeledeniartsnocnU stnemeledeniartsnoC
tsefinammhtiroglA tnetalmhtiroglA nettirwmhtiroglA
nettirwtonmhtiroglA46 GiorgiaAdornietal.
Problem solver (Agent) System
☐✓ single ☐ group ☐✓ unplugged ☐ robotic ☐ virtual
☐ resettable ☐✓ not resettable
Artefactual environment
☐✓ (partly) observable ☐ not observable
☐✓ variables ☐✓ operators ☐✓ sequences ☐✓ repetitions
☐✓ conditionals ☐✓ functions ☐ parallelism ☐ events
Agent (Problem solver) Environment
Reasoning Interactions ☐✓ human ☐ robotic ☐ virtual ☐✓ physical ☐☐ vviirrttuuaall
tools tools Movements on the board
☐✓ embodied Actions Descriptors
Move the pegs
Visual feedback ☐ reversible ☐✓ not reversible Number of pegs on board
☐✓ embodied
Task
☐ find the initial state ☐✓ find the algorithm ☐ find the final state ☐ creation act ☐ application act ☐ project act
☐✓ one-to-one cardinality ☐ many-to-one cardinality
Algorithm
Initial state Final state
☐ manifest ☐✓ latent
Given: full board with one peg missing ☐ written ☐ not written Given: empty board with only one peg present
☐ ☐✓
✓
e ox np elicit ☐
☐
i mm ap nli ycit To b☐e wforuitntedn: set of mo☐vi nngo ta wctriiottnesn ☐
☐✓
e ox np elicit ☐ ☐✓ i mm ap nli ycit
☐✓ constrained ☐ unconstrained
☐✓ one ☐ many
Fig. B.4 GraphicaltemplateforanalysingtheTriangularPegSolitaire(boardvariant).
Table B.4 RelationshipbetweentheTriangularPegSolitaire(boardvariant)characteristicsandCTcompetencies.
Tool functionalities System Task
(cid:86) (cid:86) (cid:86) (cid:86) (cid:86) (cid:86) (cid:79) (cid:79) (cid:79) (cid:86) (cid:86) (cid:79) (cid:79) (cid:86) (cid:86) (cid:79) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:79)
Datacollection ✓ ✓ + + + + + + + + + + + + +
Patternrecognition ✓ + + ✓* + ✓* + + + + + + + + + + + + + +
Decomposition ✓ + + ✓* + + ✓* + + + + + + + + + + + + + +
Abstraction ✓ ✓ + + + ✓ + + + + + + + + + + +
Datarepresentation ✓ ✓ + + + + + + + + + + + + +
Variables ✓ ✓ + + + + + + + + + ✓F + + + + + + + + +
Operators ✓ + ✓ + + + + + + + + ✓F + + + + + + + +
Sequences ✓ + + ✓ + + + + ✓F + + + + + + +
Repetitions ✓ + + + ✓ + + ✓F + + + + + + + +
Conditionals ✓ + + ✓ + + + ✓F + + + + + + + + +
Functions ✓ + + + + ✓ + ✓F + + + + + + + +
Parallelism ✗ + + ✓ + ✓F + + + + + +
Events ✗ + + + ✓ + ✓F + + + + +
Algorithmdebugging ✗ + + + + + + + + ✓ ✗ + ✓ + ✓ ✗ ✓F ✗F
Systemstateverification ✗ ✓ ✗ + ✓ + ✓SF ✗SF ✓F ✗F
Constraintsvalidation ✗ + + + + + + + + ✓ ✗ + ✗ ✓
Optimisation ✗ + + + + + + + + ✓ ✗ +
Generalisation ✗ ✓ + + + ✓ + ✓ ✗ + + + +
selbairaV srotarepO secneuqeS snoititepeR slanoitidnoC snoitcnuF msilellaraP
stnevE
elbattesermetsyS
elbattesertonmetsyS
elbavresbometsyS
elbavresbotonmetsyS
dnuofebotetatS
dnuofebotmhtiroglA ytilanidraceno-ot-enO ytilanidraceno-ot-ynaM
stnemeleticilpxE stnemeleticilpmI
stnemeledeniartsnocnU stnemeledeniartsnoC
tsefinammhtiroglA tnetalmhtiroglA nettirwmhtiroglA
nettirwtonmhtiroglAAtheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 47
Problem solver (Agent) System
☐✓ single ☐ group ☐✓ unplugged ☐ robotic ☐ virtual
☐✓ resettable ☐ not resettable
Artefactual environment
☐✓ (partly) observable ☐ not observable
☐✓ variables ☐✓ operators ☐✓ sequences ☐✓ repetitions
☐✓ conditionals ☐✓ functions ☐ parallelism ☐ events
Agent (Problem solver) Environment
Reasoning Interactions ☐✓ human ☐ robotic ☐ virtual ☐✓ physical ☐☐ vviirrttuuaall
tools tools Written thinking process
☐✓ embodied Actions Descriptors
Write the thinking process
Visual feedback ☐ reversible ☐✓ not reversible Number of pegs on board
☐✓ embodied
Task
☐ find the initial state ☐✓ find the algorithm ☐ find the final state ☐ creation act ☐ application act ☐ project act
☐✓ one-to-one cardinality ☐ many-to-one cardinality
Algorithm
Initial state Final state
☐✓ manifest ☐ latent
Given: full board with one peg missing ☐✓ written ☐ not written Given: empty board with only one peg present
☐ ☐✓
✓
e ox np elicit ☐
☐
i mm ap nli ycit To b☐e wforuitntedn: winning s☐tr antoetg ywritten ☐
☐✓
e ox np elicit ☐ ☐✓ i mm ap nli ycit
☐✓ constrained ☐ unconstrained
☐✓ one ☐ many
Fig. B.5 GraphicaltemplateforanalysingtheTriangularPegSolitaire(paper&pencilvariant).
Table B.5 RelationshipbetweentheTriangularPegSolitaire(paper&pencilvariant)characteristicsandCTcompetencies.
Tool functionalities System Task
(cid:86) (cid:86) (cid:86) (cid:86) (cid:86) (cid:86) (cid:79) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:79) (cid:86) (cid:86) (cid:79) (cid:79) (cid:86) (cid:79) (cid:86) (cid:86) (cid:79) (cid:86) (cid:79)
Datacollection ✓ ✓ + + + + + + + + + + + + +
Patternrecognition ✓ + + ✓* + ✓* + + + + + + + + + + + + + +
Decomposition ✓ + + ✓* + + ✓* + + + + + + + + + + + + + +
Abstraction ✓ ✓ + + + ✓ + + + + + + + + + + +
Datarepresentation ✓ ✓ + + + + + + + + + + + + +
Variables ✓ ✓ + + + + + + + + + ✓F + + + + + + + + +
Operators ✓ + ✓ + + + + + + + + ✓F + + + + + + + +
Sequences ✓ + + ✓ + + + + ✓F + + + + + + +
Repetitions ✓ + + + ✓ + + ✓F + + + + + + + +
Conditionals ✓ + + ✓ + + + ✓F + + + + + + + + +
Functions ✓ + + + + ✓ + ✓F + + + + + + + +
Parallelism ✗ + + ✓ + ✓F + + + + + +
Events ✗ + + + ✓ + ✓F + + + + +
Algorithmdebugging ✓ + + + + + + + + ✓ ✗ + ✓ + ✓ ✗ ✓F ✗F
Systemstateverification ✗ ✓ ✗ + ✓ + ✓SF ✗SF ✓F ✗F
Constraintsvalidation ✓ + + + + + + + + ✓ ✗ + ✗ ✓
Optimisation ✓ + + + + + + + + ✓ ✗ +
Generalisation ✓ ✓ + + + ✓ + ✓ ✗ + + + +
selbairaV srotarepO secneuqeS snoititepeR slanoitidnoC snoitcnuF msilellaraP
stnevE
elbattesermetsyS
elbattesertonmetsyS
elbavresbometsyS
elbavresbotonmetsyS
dnuofebotetatS
dnuofebotmhtiroglA ytilanidraceno-ot-enO ytilanidraceno-ot-ynaM
stnemeleticilpxE stnemeleticilpmI
stnemeledeniartsnocnU stnemeledeniartsnoC
tsefinammhtiroglA tnetalmhtiroglA nettirwmhtiroglA
nettirwtonmhtiroglA48 GiorgiaAdornietal.
Problem solver System
☐✓ single ☐ group ☐✓ unplugged ☐ robotic ☐ virtual
☐✓ resettable ☐ not resettable
Artefactual environment
☐ (partly) observable ☐✓ not observable
☐✓ variables ☐✓ operators ☐✓ sequences ☐✓ repetitions
☐ conditionals ☐✓ functions ☐ parallelism ☐ events
Agent Environment
Reasoning ☐✓ human ☐ robotic ☐ virtual ☐✓ physical ☐☐ vviirrttuuaall
tools Sketch in the problem description
☐✓ embodied Actions Descriptors Number of drawn
segments
Move/Turn
Drawing instructions ☐✓ reversible ☐ not reversible Segment length Segment direction
☐✓ symbolic
Task
☐ find the initial state ☐✓ find the algorithm ☐ find the final state ☐ creation act ☐ application act ☐ project act
☐✓ one-to-one cardinality ☐ many-to-one cardinality
Algorithm
Initial state Final state
☐✓ manifest ☐ latent
Given: the artist has not yet drawn any segment ☐✓ written ☐ not written Given: the artist has drawn a 50X100px rectangle
☐ ☐✓ ✓ e ox np elicit ☐ ☐ i mm ap nli ycit To b☐e wforuitntedn: set of dra☐w innogt iwnsrittrtuecntions ☐ ☐✓ ✓ e ox np elicit ☐ ☐ i mm ap nli ycit
☐✓ constrained ☐ unconstrained
☐✓ one ☐ many
Fig. B.6 GraphicaltemplateforanalysingtheComputationalThinkingtest(item7).
Table B.6 RelationshipbetweentheComputationalThinkingtest(item7)characteristicsandCTcompetencies.
Tool functionalities System Task
(cid:86) (cid:86) (cid:86) (cid:86) (cid:79) (cid:86) (cid:79) (cid:79) (cid:86) (cid:79) (cid:79) (cid:86) (cid:79) (cid:86) (cid:86) (cid:79) (cid:86) (cid:79) (cid:79) (cid:86) (cid:86) (cid:79) (cid:86) (cid:79)
Datacollection ✓ ✓ + + + + + + + + + + + + +
Patternrecognition ✓ + + ✓* + ✓* + + + + + + + + + + + + + +
Decomposition ✓ + + ✓* + + ✓* + + + + + + + + + + + + + +
Abstraction ✓ ✓ + + + ✓ + + + + + + + + + + +
Datarepresentation ✓ ✓ + + + + + + + + + + + + +
Variables ✓ ✓ + + + + + + + + + ✓F + + + + + + + + +
Operators ✓ + ✓ + + + + + + + + ✓F + + + + + + + +
Sequences ✓ + + ✓ + + + + ✓F + + + + + + +
Repetitions ✓ + + + ✓ + + ✓F + + + + + + + +
Conditionals ✗ + + ✓ + + + ✓F + + + + + + + + +
Functions ✓ + + + + ✓ + ✓F + + + + + + + +
Parallelism ✗ + + ✓ + ✓F + + + + + +
Events ✗ + + + ✓ + ✓F + + + + +
Algorithmdebugging ✓ + + + + + + + + ✓ ✗ + ✓ + ✓ ✗ ✓F ✗F
Systemstateverification ✗ ✓ ✗ + ✓ + ✓SF ✗SF ✓F ✗F
Constraintsvalidation ✓ + + + + + + + + ✓ ✗ + ✗ ✓
Optimisation ✓ + + + + + + + + ✓ ✗ +
Generalisation ✓ ✓ + + + ✓ + ✓ ✗ + + + +
selbairaV srotarepO secneuqeS snoititepeR slanoitidnoC snoitcnuF msilellaraP
stnevE
elbattesermetsyS
elbattesertonmetsyS
elbavresbometsyS
elbavresbotonmetsyS
dnuofebotetatS
dnuofebotmhtiroglA ytilanidraceno-ot-enO ytilanidraceno-ot-ynaM
stnemeleticilpxE stnemeleticilpmI
stnemeledeniartsnocnU stnemeledeniartsnoC
tsefinammhtiroglA tnetalmhtiroglA nettirwmhtiroglA
nettirwtonmhtiroglAAtheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 49
Problem solver System
☐✓ single ☐ group ☐✓ unplugged ☐ robotic ☐ virtual
☐✓ resettable ☐ not resettable
Artefactual environment
☐ (partly) observable ☐✓ not observable
☐✓ variables ☐✓ operators ☐✓ sequences ☐✓ repetitions
☐✓ conditionals ☐✓ functions ☐ parallelism ☐ events
Agent Environment
Reasoning ☐✓ human ☐ robotic ☐ virtual ☐✓ physical ☐☐ vviirrttuuaall
tools Sketch in the problem description
☐✓ embodied Actions Descriptors
Path
Move/Turn
Four sets of moving instructions ☐✓ reversible ☐ not reversible Pac-Man position Ghost position
☐✓ symbolic
Task
☐ find the initial state ☐✓ find the algorithm ☐ find the final state ☐ creation act ☐ application act ☐ project act
☐✓ one-to-one cardinality ☐ many-to-one cardinality
Algorithm
Initial state Final state
☐✓ manifest ☐ latent
Given: Pac-Man and Ghost starting positions ☐✓ written ☐ not written Given: Pac-Man has reached the Ghost position
☐ ☐✓ ✓ e ox np elicit ☐ ☐ i mm ap nli ycit To b☐e wforuitntedn: instructio☐ns ndoets wcrriibttienng the path ☐ ☐✓ ✓ e ox np elicit ☐ ☐ i mm ap nli ycit
☐✓ constrained ☐ unconstrained
☐✓ one ☐ many
Fig. B.7 GraphicaltemplateforanalysingtheComputationalThinkingtest(item14).
Table B.7 RelationshipbetweentheComputationalThinkingtest(item14)characteristicsandCTcompetencies.
Tool functionalities System Task
(cid:86) (cid:86) (cid:86) (cid:86) (cid:86) (cid:86) (cid:79) (cid:79) (cid:86) (cid:79) (cid:79) (cid:86) (cid:79) (cid:86) (cid:86) (cid:79) (cid:86) (cid:79) (cid:79) (cid:86) (cid:86) (cid:79) (cid:86) (cid:79)
Datacollection ✓ ✓ + + + + + + + + + + + + +
Patternrecognition ✓ + + ✓* + ✓* + + + + + + + + + + + + + +
Decomposition ✓ + + ✓* + + ✓* + + + + + + + + + + + + + +
Abstraction ✓ ✓ + + + ✓ + + + + + + + + + + +
Datarepresentation ✓ ✓ + + + + + + + + + + + + +
Variables ✓ ✓ + + + + + + + + + ✓F + + + + + + + + +
Operators ✓ + ✓ + + + + + + + + ✓F + + + + + + + +
Sequences ✓ + + ✓ + + + + ✓F + + + + + + +
Repetitions ✓ + + + ✓ + + ✓F + + + + + + + +
Conditionals ✓ + + ✓ + + + ✓F + + + + + + + + +
Functions ✓ + + + + ✓ + ✓F + + + + + + + +
Parallelism ✗ + + ✓ + ✓F + + + + + +
Events ✗ + + + ✓ + ✓F + + + + +
Algorithmdebugging ✓ + + + + + + + + ✓ ✗ + ✓ + ✓ ✗ ✓F ✗F
Systemstateverification ✗ ✓ ✗ + ✓ + ✓SF ✗SF ✓F ✗F
Constraintsvalidation ✓ + + + + + + + + ✓ ✗ + ✗ ✓
Optimisation ✓ + + + + + + + + ✓ ✗ +
Generalisation ✓ ✓ + + + ✓ + ✓ ✗ + + + +
selbairaV srotarepO secneuqeS snoititepeR slanoitidnoC snoitcnuF msilellaraP
stnevE
elbattesermetsyS
elbattesertonmetsyS
elbavresbometsyS
elbavresbotonmetsyS
dnuofebotetatS
dnuofebotmhtiroglA ytilanidraceno-ot-enO ytilanidraceno-ot-ynaM
stnemeleticilpxE stnemeleticilpmI
stnemeledeniartsnocnU stnemeledeniartsnoC
tsefinammhtiroglA tnetalmhtiroglA nettirwmhtiroglA
nettirwtonmhtiroglA50 GiorgiaAdornietal.
Problem solver System
☐ single ☐✓ group ☐ unplugged ☐✓ robotic ☐ virtual
☐✓ resettable ☐ not resettable
Artefactual environment
☐✓ (partly) observable ☐ not observable
☐✓ variables ☐✓ operators ☐✓ sequences ☐ repetitions
☐ conditionals ☐✓ functions ☐ parallelism ☐✓ events
Agent Environment
Reasoning Interactions ☐ human ☐✓ robotic ☐ virtual ☐✓ physical ☐☐ vviirrttuuaall
tools tools Thymio II
☐✓ embodied Actions Use sensors Descriptors
☐ reversible ☐✓ not reversible
Visual feedback Programming platform Move Number of crossed squares
☐✓ embodied ☐✓ symbolic ☐ reversible ☐✓ not reversible
Task
☐ find the initial state ☐✓ find the algorithm ☐ find the final state ☐ creation act ☐ application act ☐ project act
☐✓ one-to-one cardinality ☐ many-to-one cardinality
Algorithm
Initial state Final state
☐✓ manifest ☐ latent
Given: Thymio has not yet crossed the playground ☐✓ written ☐ not written Given: Thymio crossed all the playground squares
☐ ☐✓ ✓ e ox np elicit ☐ ☐ i mm ap nli ycit To b☐e wforuitntedn: set of mo☐vi nngo ta wctriiottnesn ☐ ☐✓ ✓ e ox np elicit ☐ ☐ i mm ap nli ycit
☐ constrained ☐✓ unconstrained
☐✓ one ☐ many
Fig. B.8 GraphicaltemplateforanalysingtheThymioLawnmowerMission(controlgroup).
Table B.8 RelationshipbetweentheThymioLawnmowerMission(controlgroup)characteristicsandCTcompetencies.
Tool functionalities System Task
(cid:86) (cid:86) (cid:86) (cid:79) (cid:79) (cid:86) (cid:79) (cid:86) (cid:86) (cid:79) (cid:86) (cid:79) (cid:79) (cid:86) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79)
Datacollection ✓ ✓ + + + + + + + + + + + + +
Patternrecognition ✓ + + ✓* + ✓* + + + + + + + + + + + + + +
Decomposition ✓ + + ✓* + + ✓* + + + + + + + + + + + + + +
Abstraction ✓ ✓ + + + ✓ + + + + + + + + + + +
Datarepresentation ✓ ✓ + + + + + + + + + + + + +
Variables ✓ ✓ + + + + + + + + + ✓F + + + + + + + + +
Operators ✓ + ✓ + + + + + + + + ✓F + + + + + + + +
Sequences ✓ + + ✓ + + + + ✓F + + + + + + +
Repetitions ✗ + + + ✓ + + ✓F + + + + + + + +
Conditionals ✗ + + ✓ + + + ✓F + + + + + + + + +
Functions ✓ + + + + ✓ + ✓F + + + + + + + +
Parallelism ✗ + + ✓ + ✓F + + + + + +
Events ✓ + + + ✓ + ✓F + + + + +
Algorithmdebugging ✓ + + + + + + + + ✓ ✗ + ✓ + ✓ ✗ ✓F ✗F
Systemstateverification ✗ ✓ ✗ + ✓ + ✓SF ✗SF ✓F ✗F
Constraintsvalidation ✗ + + + + + + + + ✓ ✗ + ✗ ✓
Optimisation ✓ + + + + + + + + ✓ ✗ +
Generalisation ✓ ✓ + + + ✓ + ✓ ✗ + + + +
selbairaV srotarepO secneuqeS snoititepeR slanoitidnoC snoitcnuF msilellaraP
stnevE
elbattesermetsyS
elbattesertonmetsyS
elbavresbometsyS
elbavresbotonmetsyS
dnuofebotetatS
dnuofebotmhtiroglA ytilanidraceno-ot-enO ytilanidraceno-ot-ynaM
stnemeleticilpxE stnemeleticilpmI
stnemeledeniartsnocnU stnemeledeniartsnoC
tsefinammhtiroglA tnetalmhtiroglA nettirwmhtiroglA
nettirwtonmhtiroglAAtheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 51
Problem solver System
☐ single ☐✓ group ☐ unplugged ☐✓ robotic ☐ virtual
☐ resettable ☐✓ not resettable
Artefactual environment
☐✓ (partly) observable ☐ not observable
☐✓ variables ☐✓ operators ☐✓ sequences ☐ repetitions
☐ conditionals ☐✓ functions ☐ parallelism ☐✓ events
Agent Environment
Reasoning Interactions ☐ human ☐✓ robotic ☐ virtual ☐✓ physical ☐☐ vviirrttuuaall
tools tools Thymio II
☐✓ embodied Actions Use sensors Descriptors
☐ reversible ☐✓ not reversible
Visual feedback Programming platform Move Number of crossed squares
☐✓ embodied ☐✓ symbolic ☐ reversible ☐✓ not reversible
Task
☐ find the initial state ☐✓ find the algorithm ☐ find the final state ☐ creation act ☐ application act ☐ project act
☐✓ one-to-one cardinality ☐ many-to-one cardinality
Algorithm
Initial state Final state
☐✓ manifest ☐ latent
Given: Thymio has not yet crossed the playground ☐✓ written ☐ not written Given: Thymio crossed all the playground squares
☐ ☐✓ ✓ e ox np elicit ☐ ☐ i mm ap nli ycit To b☐e wforuitntedn: set of mo☐vi nngo ta wctriiottnesn ☐ ☐✓ ✓ e ox np elicit ☐ ☐ i mm ap nli ycit
☐ constrained ☐✓ unconstrained
☐✓ one ☐ many
Fig. B.9 GraphicaltemplateforanalysingtheThymioLawnmowerMission(testgroup).
Table B.9 RelationshipbetweentheThymioLawnmowerMission(testgroup)characteristicsandCTcompetencies.
Tool functionalities System Task
(cid:86) (cid:86) (cid:86) (cid:79) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:86) (cid:79) (cid:79) (cid:86) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79)
Datacollection ✓ ✓ + + + + + + + + + + + + +
Patternrecognition ✓ + + ✓* + ✓* + + + + + + + + + + + + + +
Decomposition ✓ + + ✓* + + ✓* + + + + + + + + + + + + + +
Abstraction ✓ ✓ + + + ✓ + + + + + + + + + + +
Datarepresentation ✓ ✓ + + + + + + + + + + + + +
Variables ✓ ✓ + + + + + + + + + ✓F + + + + + + + + +
Operators ✓ + ✓ + + + + + + + + ✓F + + + + + + + +
Sequences ✓ + + ✓ + + + + ✓F + + + + + + +
Repetitions ✗ + + + ✓ + + ✓F + + + + + + + +
Conditionals ✗ + + ✓ + + + ✓F + + + + + + + + +
Functions ✓ + + + + ✓ + ✓F + + + + + + + +
Parallelism ✗ + + ✓ + ✓F + + + + + +
Events ✓ + + + ✓ + ✓F + + + + +
Algorithmdebugging ✗ + + + + + + + + ✓ ✗ + ✓ + ✓ ✗ ✓F ✗F
Systemstateverification ✗ ✓ ✗ + ✓ + ✓SF ✗SF ✓F ✗F
Constraintsvalidation ✗ + + + + + + + + ✓ ✗ + ✗ ✓
Optimisation ✗ + + + + + + + + ✓ ✗ +
Generalisation ✗ ✓ + + + ✓ + ✓ ✗ + + + +
selbairaV srotarepO secneuqeS snoititepeR slanoitidnoC snoitcnuF msilellaraP
stnevE
elbattesermetsyS
elbattesertonmetsyS
elbavresbometsyS
elbavresbotonmetsyS
dnuofebotetatS
dnuofebotmhtiroglA ytilanidraceno-ot-enO ytilanidraceno-ot-ynaM
stnemeleticilpxE stnemeleticilpmI
stnemeledeniartsnocnU stnemeledeniartsnoC
tsefinammhtiroglA tnetalmhtiroglA nettirwmhtiroglA
nettirwtonmhtiroglA52 GiorgiaAdornietal.
Problem solver System
☐ single ☐✓ group ☐ unplugged ☐✓ robotic ☐ virtual
☐ resettable ☐✓ not resettable
Artefactual environment
☐✓ (partly) observable ☐ not observable
☐✓ variables ☐✓ operators ☐✓ sequences ☐✓ repetitions
☐✓ conditionals ☐✓ functions ☐✓ parallelism ☐✓ events
Agent Environment
Reasoning
Thymio Paper & pencils
☐ human ☐✓ robotic ☐ virtual ☐✓ physical ☐☐ vviirrttuuaall
tools
☐✓ embodied ☐✓ embodied
Actions Use sensors / lights Descriptors Control spots
I tn ot oe lsractions V ☐✓is eu mal
b
f oe de id eb dack P ☐✓r o sg yr mam bom licing platform M ☐o rv ee
v ersible
☐
☐✓
r e nv oe
t
r rs eib vele
r
s☐✓
ib
lenot reversible G coe nn de itr ia ot nor O obb ss tt ra uc cl te io n coverage
Task
☐ find the initial state ☐✓ find the algorithm ☐ find the final state ☐ creation act ☐ application act ☐ project act
☐✓ one-to-one cardinality ☐ many-to-one cardinality
Algorithm
Initial state Final state
☐✓ manifest ☐ latent
Given: the generator is not working ☐✓ written ☐ not written Given: the generator has been restarted
☐ ☐✓ ✓ e ox np elicit ☐ ☐ i mm ap nli ycit To b☐e wforuitntedn: set of mo☐vi nngo ta wctriiottnesn ☐ ☐✓ ✓ e ox np elicit ☐ ☐ i mm ap nli ycit
☐ constrained ☐✓ unconstrained
☐✓ one ☐ many
Fig. B.10 GraphicaltemplateforanalysingtheR2T2mission.
Table B.10 RelationshipbetweentheR2T2missioncharacteristicsandCTcompetencies.
Tool functionalities System Task
(cid:86) (cid:86) (cid:86) (cid:86) (cid:86) (cid:86) (cid:86) (cid:86) (cid:79) (cid:86) (cid:86) (cid:79) (cid:79) (cid:86) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79)
Datacollection ✓ ✓ + + + + + + + + + + + + +
Patternrecognition ✓ + + ✓* + ✓* + + + + + + + + + + + + + +
Decomposition ✓ + + ✓* + + ✓* + + + + + + + + + + + + + +
Abstraction ✓ ✓ + + + ✓ + + + + + + + + + + +
Datarepresentation ✓ ✓ + + + + + + + + + + + + +
Variables ✓ ✓ + + + + + + + + + ✓F + + + + + + + + +
Operators ✓ + ✓ + + + + + + + + ✓F + + + + + + + +
Sequences ✓ + + ✓ + + + + ✓F + + + + + + +
Repetitions ✓ + + + ✓ + + ✓F + + + + + + + +
Conditionals ✓ + + ✓ + + + ✓F + + + + + + + + +
Functions ✓ + + + + ✓ + ✓F + + + + + + + +
Parallelism ✓ + + ✓ + ✓F + + + + + +
Events ✓ + + + ✓ + ✓F + + + + +
Algorithmdebugging ✗ + + + + + + + + ✓ ✗ + ✓ + ✓ ✗ ✓F ✗F
Systemstateverification ✗ ✓ ✗ + ✓ + ✓SF ✗SF ✓F ✗F
Constraintsvalidation ✗ + + + + + + + + ✓ ✗ + ✗ ✓
Optimisation ✗ + + + + + + + + ✓ ✗ +
Generalisation ✗ ✓ + + + ✓ + ✓ ✗ + + + +
selbairaV srotarepO secneuqeS snoititepeR slanoitidnoC snoitcnuF msilellaraP
stnevE
elbattesermetsyS
elbattesertonmetsyS
elbavresbometsyS
elbavresbotonmetsyS
dnuofebotetatS
dnuofebotmhtiroglA ytilanidraceno-ot-enO ytilanidraceno-ot-ynaM
stnemeleticilpxE stnemeleticilpmI
stnemeledeniartsnocnU stnemeledeniartsnoC
tsefinammhtiroglA tnetalmhtiroglA nettirwmhtiroglA
nettirwtonmhtiroglAAtheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 53
Problem solver System
☐✓ single ☐ group ☐ unplugged ☐✓ robotic ☐ virtual
☐ resettable ☐✓ not resettable
Artefactual environment
☐✓ (partly) observable ☐ not observable
☐✓ variables ☐✓ operators ☐✓ sequences ☐✓ repetitions
☐✓ conditionals ☐✓ functions ☐ parallelism ☐ events
Agent Environment
Reasoning Interactions ☐ human ☐✓ robotic ☐ virtual ☐✓ physical ☐☐ vviirrttuuaall
tools tools Color Codes / Markers
☐✓ embodied Actions Descriptors
Red person position
Move
Visual feedback ☐ reversible ☐✓ not reversible Ozobot position
☐✓ embodied
Task
☐ find the initial state ☐✓ find the algorithm ☐ find the final state ☐ creation act ☐ application act ☐ project act
☐✓ one-to-one cardinality ☐ many-to-one cardinality
Algorithm
Initial state Final state
☐✓ manifest ☐ latent
Given: Ozobot startign position ☐✓ written ☐ not written Given: Ozobot reached the red person
☐ ☐✓ ✓ e ox np elicit ☐ ☐ i mm ap nli ycit To b☐e wforuitntedn: set of mo☐vi nngo ta wctriiottnesn ☐ ☐✓ ✓ e ox np elicit ☐ ☐ i mm ap nli ycit
☐ constrained ☐✓ unconstrained
☐✓ one ☐ many
Fig. B.11 GraphicaltemplateforanalysingtheOzobotmaze.
Table B.11 RelationshipbetweentheOzobotmazecharacteristicsandCTcompetencies.
Tool functionalities System Task
(cid:86) (cid:86) (cid:86) (cid:86) (cid:86) (cid:86) (cid:79) (cid:79) (cid:79) (cid:86) (cid:86) (cid:79) (cid:79) (cid:86) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79)
Datacollection ✓ ✓ + + + + + + + + + + + + +
Patternrecognition ✓ + + ✓* + ✓* + + + + + + + + + + + + + +
Decomposition ✓ + + ✓* + + ✓* + + + + + + + + + + + + + +
Abstraction ✓ ✓ + + + ✓ + + + + + + + + + + +
Datarepresentation ✓ ✓ + + + + + + + + + + + + +
Variables ✓ ✓ + + + + + + + + + ✓F + + + + + + + + +
Operators ✓ + ✓ + + + + + + + + ✓F + + + + + + + +
Sequences ✓ + + ✓ + + + + ✓F + + + + + + +
Repetitions ✓ + + + ✓ + + ✓F + + + + + + + +
Conditionals ✓ + + ✓ + + + ✓F + + + + + + + + +
Functions ✓ + + + + ✓ + ✓F + + + + + + + +
Parallelism ✗ + + ✓ + ✓F + + + + + +
Events ✗ + + + ✓ + ✓F + + + + +
Algorithmdebugging ✗ + + + + + + + + ✓ ✗ + ✓ + ✓ ✗ ✓F ✗F
Systemstateverification ✗ ✓ ✗ + ✓ + ✓SF ✗SF ✓F ✗F
Constraintsvalidation ✗ + + + + + + + + ✓ ✗ + ✗ ✓
Optimisation ✗ + + + + + + + + ✓ ✗ +
Generalisation ✗ ✓ + + + ✓ + ✓ ✗ + + + +
selbairaV srotarepO secneuqeS snoititepeR slanoitidnoC snoitcnuF msilellaraP
stnevE
elbattesermetsyS
elbattesertonmetsyS
elbavresbometsyS
elbavresbotonmetsyS
dnuofebotetatS
dnuofebotmhtiroglA ytilanidraceno-ot-enO ytilanidraceno-ot-ynaM
stnemeleticilpxE stnemeleticilpmI
stnemeledeniartsnocnU stnemeledeniartsnoC
tsefinammhtiroglA tnetalmhtiroglA nettirwmhtiroglA
nettirwtonmhtiroglA54 GiorgiaAdornietal.
Problem solver System
☐ single ☐✓ group ☐ unplugged ☐✓ robotic ☐ virtual
☐✓ resettable ☐ not resettable
Artefactual environment
☐✓ (partly) observable ☐ not observable
☐✓ variables ☐✓ operators ☐✓ sequences ☐✓ repetitions
☐✓ conditionals ☐✓ functions ☐✓ parallelism ☐✓ events
Agent Environment
Reasoning ☐ human ☐✓ robotic ☐ virtual ☐✓ physical ☐☐ vviirrttuuaall
Interactions
tools tools P ☐✓r o sg yr mam bom licing platform Actions Use speakers / lights Descriptors
Speakers ignition
Paper & pencils ☐ reversible ☐✓ not reversible
☐✓ embodied Visual feedback Toolkit Use sensors Lights illumination Ball position
☐✓ embodied ☐✓ embodied ☐ reversible ☐✓ not reversible
Task
☐ find the initial state ☐ find the algorithm ☐ find the final state ☐✓ creation act ☐ application act ☐ project act
☐✓ one-to-one cardinality ☐ many-to-one cardinality
Algorithm
Initial state Final state
☐✓ manifest ☐ latent
Given: toolkit assembled ☐✓ written ☐ not written To be found: mini-golf station
☐
☐✓
e ox np elicit ☐ ☐✓ i mm ap nli ycit To b☐e wforuitntedn: instructio☐n fnoor tt hwer itmteicnro:bit ☐
☐✓
c oo nn estrained ☐ ☐✓ u mn ac no ynstrained
☐ constrained ☐✓ unconstrained
☐✓ one ☐ many
Fig. B.12 GraphicaltemplateforanalysingtheMini-golfchallenge.
Table B.12 RelationshipbetweentheMini-golfchallengecharacteristicsandCTcompetencies.
Tool functionalities System Task
(cid:86) (cid:86) (cid:86) (cid:86) (cid:86) (cid:86) (cid:86) (cid:86) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:86) (cid:86) (cid:79) (cid:79) (cid:86) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79)
Datacollection ✓ ✓ + + + + + + + + + + + + +
Patternrecognition ✓ + + ✓* + ✓* + + + + + + + + + + + + + +
Decomposition ✓ + + ✓* + + ✓* + + + + + + + + + + + + + +
Abstraction ✓ ✓ + + + ✓ + + + + + + + + + + +
Datarepresentation ✓ ✓ + + + + + + + + + + + + +
Variables ✓ ✓ + + + + + + + + + ✓F + + + + + + + + +
Operators ✓ + ✓ + + + + + + + + ✓F + + + + + + + +
Sequences ✓ + + ✓ + + + + ✓F + + + + + + +
Repetitions ✓ + + + ✓ + + ✓F + + + + + + + +
Conditionals ✓ + + ✓ + + + ✓F + + + + + + + + +
Functions ✓ + + + + ✓ + ✓F + + + + + + + +
Parallelism ✓ + + ✓ + ✓F + + + + + +
Events ✓ + + + ✓ + ✓F + + + + +
Algorithmdebugging ✓ + + + + + + + + ✓ ✗ + ✓ + ✓ ✗ ✓F ✗F
Systemstateverification ✓ ✓ ✗ + ✓ + ✓SF ✗SF ✓F ✗F
Constraintsvalidation ✗ + + + + + + + + ✓ ✗ + ✗ ✓
Optimisation ✓ + + + + + + + + ✓ ✗ +
Generalisation ✓ ✓ + + + ✓ + ✓ ✗ + + + +
selbairaV srotarepO secneuqeS snoititepeR slanoitidnoC snoitcnuF msilellaraP
stnevE
elbattesermetsyS
elbattesertonmetsyS
elbavresbometsyS
elbavresbotonmetsyS
dnuofebotetatS
dnuofebotmhtiroglA ytilanidraceno-ot-enO ytilanidraceno-ot-ynaM
stnemeleticilpxE stnemeleticilpmI
stnemeledeniartsnocnU stnemeledeniartsnoC
tsefinammhtiroglA tnetalmhtiroglA nettirwmhtiroglA
nettirwtonmhtiroglAAtheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 55
Problem solver System
☐✓ single ☐ group ☐ unplugged ☐ robotic ☐✓ virtual
☐✓ resettable ☐ not resettable
Artefactual environment
☐✓ (partly) observable ☐ not observable
☐✓ variables ☐✓ operators ☐✓ sequences ☐ repetitions
☐ conditionals ☐✓ functions ☐ parallelism ☐ events
Agent Environment
Reasoning Interactions ☐ human ☐ robotic ☐✓ virtual ☐ physical ☐☐✓ vviirrttuuaall
tools tools System hints
☐✓ embodied Actions Turn Descriptors Green pig position
☐✓ reversible ☐ not reversible
V ☐✓is eu mal b f oe de id eb dack P ☐✓r o sg yr mam bom licing platform M ☐o rv ee v ersible ☐✓ not reversible Angry bird position
Task
☐ find the initial state ☐✓ find the algorithm ☐ find the final state ☐ creation act ☐ application act ☐ project act
☐✓ one-to-one cardinality ☐ many-to-one cardinality
Algorithm
Initial state Final state
☐✓ manifest ☐ latent
Given: animals starting positions ☐✓ written ☐ not written Given: Angry bird has reached the Green pig
☐ ☐✓ ✓ e ox np elicit ☐ ☐ i mm ap nli ycit To b☐e wforuitntedn: set of mo☐vi nngo ta wctriiottnesn ☐ ☐✓ ✓ e ox np elicit ☐ ☐ i mm ap nli ycit
☐ constrained ☐✓ unconstrained
☐✓ one ☐ many
Fig. B.13 GraphicaltemplateforanalysingtheAngryBirdClassicMaze.
Table B.13 RelationshipbetweentheAngryBirdClassicMazecharacteristicsandCTcompetencies.
Tool functionalities System Task
(cid:86) (cid:86) (cid:86) (cid:79) (cid:79) (cid:86) (cid:79) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:79) (cid:86) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79)
Datacollection ✓ ✓ + + + + + + + + + + + + +
Patternrecognition ✓ + + ✓* + ✓* + + + + + + + + + + + + + +
Decomposition ✓ + + ✓* + + ✓* + + + + + + + + + + + + + +
Abstraction ✓ ✓ + + + ✓ + + + + + + + + + + +
Datarepresentation ✓ ✓ + + + + + + + + + + + + +
Variables ✓ ✓ + + + + + + + + + ✓F + + + + + + + + +
Operators ✓ + ✓ + + + + + + + + ✓F + + + + + + + +
Sequences ✓ + + ✓ + + + + ✓F + + + + + + +
Repetitions ✗ + + + ✓ + + ✓F + + + + + + + +
Conditionals ✗ + + ✓ + + + ✓F + + + + + + + + +
Functions ✓ + + + + ✓ + ✓F + + + + + + + +
Parallelism ✗ + + ✓ + ✓F + + + + + +
Events ✗ + + + ✓ + ✓F + + + + +
Algorithmdebugging ✓ + + + + + + + + ✓ ✗ + ✓ + ✓ ✗ ✓F ✗F
Systemstateverification ✗ ✓ ✗ + ✓ + ✓SF ✗SF ✓F ✗F
Constraintsvalidation ✗ + + + + + + + + ✓ ✗ + ✗ ✓
Optimisation ✓ + + + + + + + + ✓ ✗ +
Generalisation ✓ ✓ + + + ✓ + ✓ ✗ + + + +
selbairaV srotarepO secneuqeS snoititepeR slanoitidnoC snoitcnuF msilellaraP
stnevE
elbattesermetsyS
elbattesertonmetsyS
elbavresbometsyS
elbavresbotonmetsyS
dnuofebotetatS
dnuofebotmhtiroglA ytilanidraceno-ot-enO ytilanidraceno-ot-ynaM
stnemeleticilpxE stnemeleticilpmI
stnemeledeniartsnocnU stnemeledeniartsnoC
tsefinammhtiroglA tnetalmhtiroglA nettirwmhtiroglA
nettirwtonmhtiroglA56 GiorgiaAdornietal.
Problem solver System
☐✓ single ☐ group ☐ unplugged ☐ robotic ☐✓ virtual
☐✓ resettable ☐ not resettable
Artefactual environment
☐✓ (partly) observable ☐ not observable
☐✓ variables ☐✓ operators ☐✓ sequences ☐✓ repetitions
☐ conditionals ☐✓ functions ☐ parallelism ☐ events
Agent Environment
Reasoning Interactions ☐ human ☐ robotic ☐✓ virtual ☐ physical ☐☐✓ vviirrttuuaall
tools tools System hints
☐✓ embodied Actions Turn Descriptors Plant position
☐✓ reversible ☐ not reversible
V ☐✓is eu mal b f oe de id eb dack P ☐✓r o sg yr mam bom licing platform M ☐o rv ee v ersible ☐✓ not reversible Zombie position
Task
☐ find the initial state ☐✓ find the algorithm ☐ find the final state ☐ creation act ☐ application act ☐ project act
☐✓ one-to-one cardinality ☐ many-to-one cardinality
Algorithm
Initial state Final state
☐✓ manifest ☐ latent
Given: Zombie and Plant starting positions ☐✓ written ☐ not written Given: Zombie has reached the Plant
☐ ☐✓ ✓ e ox np elicit ☐ ☐ i mm ap nli ycit To b☐e wforuitntedn: set of mo☐vi nngo ta wctriiottnesn ☐ ☐✓ ✓ e ox np elicit ☐ ☐ i mm ap nli ycit
☐ constrained ☐✓ unconstrained
☐✓ one ☐ many
Fig. B.14 GraphicaltemplateforanalysingthePlantvsZombieClassicmaze.
Table B.14 RelationshipbetweenthePlantvsZombieClassicMazecharacteristicsandCTcompetencies.
Tool functionalities System Task
(cid:86) (cid:86) (cid:86) (cid:86) (cid:79) (cid:86) (cid:79) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:79) (cid:86) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79)
Datacollection ✓ ✓ + + + + + + + + + + + + +
Patternrecognition ✓ + + ✓* + ✓* + + + + + + + + + + + + + +
Decomposition ✓ + + ✓* + + ✓* + + + + + + + + + + + + + +
Abstraction ✓ ✓ + + + ✓ + + + + + + + + + + +
Datarepresentation ✓ ✓ + + + + + + + + + + + + +
Variables ✓ ✓ + + + + + + + + + ✓F + + + + + + + + +
Operators ✓ + ✓ + + + + + + + + ✓F + + + + + + + +
Sequences ✓ + + ✓ + + + + ✓F + + + + + + +
Repetitions ✓ + + + ✓ + + ✓F + + + + + + + +
Conditionals ✗ + + ✓ + + + ✓F + + + + + + + + +
Functions ✓ + + + + ✓ + ✓F + + + + + + + +
Parallelism ✗ + + ✓ + ✓F + + + + + +
Events ✗ + + + ✓ + ✓F + + + + +
Algorithmdebugging ✓ + + + + + + + + ✓ ✗ + ✓ + ✓ ✗ ✓F ✗F
Systemstateverification ✗ ✓ ✗ + ✓ + ✓SF ✗SF ✓F ✗F
Constraintsvalidation ✗ + + + + + + + + ✓ ✗ + ✗ ✓
Optimisation ✓ + + + + + + + + ✓ ✗ +
Generalisation ✓ ✓ + + + ✓ + ✓ ✗ + + + +
selbairaV srotarepO secneuqeS snoititepeR slanoitidnoC snoitcnuF msilellaraP
stnevE
elbattesermetsyS
elbattesertonmetsyS
elbavresbometsyS
elbavresbotonmetsyS
dnuofebotetatS
dnuofebotmhtiroglA ytilanidraceno-ot-enO ytilanidraceno-ot-ynaM
stnemeleticilpxE stnemeleticilpmI
stnemeledeniartsnocnU stnemeledeniartsnoC
tsefinammhtiroglA tnetalmhtiroglA nettirwmhtiroglA
nettirwtonmhtiroglAAtheoreticalframeworkforthedesignandanalysisofcomputationalthinkingproblemsineducation 57
Problem solver System
☐✓ single ☐ group ☐ unplugged ☐ robotic ☐✓ virtual
☐✓ resettable ☐ not resettable
Artefactual environment
☐✓ (partly) observable ☐ not observable
☐✓ variables ☐✓ operators ☐✓ sequences ☐✓ repetitions
☐ conditionals ☐✓ functions ☐ parallelism ☐ events
Agent Environment
Reasoning Interactions ☐ human ☐ robotic ☐✓ virtual ☐ physical ☐☐✓ vviirrttuuaall
tools tools System hints
☐✓ embodied Actions Descriptors
Pick up / Drop the marble Marble position
☐✓ reversible ☐ not reversible
Visual feedback Programming platform Move
☐✓ embodied ☐✓ symbolic ☐ reversible ☐✓ not reversible Robot position Hole position
Task
☐ find the initial state ☐✓ find the algorithm ☐ find the final state ☐ creation act ☐ application act ☐ project act
☐ one-to-one cardinality ☐✓ many-to-one cardinality
Algorithm
Initial state Final state
☐✓ manifest ☐ latent
Given: Marble out of the hole ☐✓ written ☐ not written Given: Marble in the hole
☐ ☐✓ e ox np elicit ☐ ☐✓ i mm ap nli ycit To b☐e wforuitntedn: set of mo☐vi nngo ta wctriiottnesn ☐ ☐✓ e ox np elicit ☐ ☐✓ i mm ap nli ycit
☐ constrained ☐✓ unconstrained
☐✓ one ☐ many
Fig. B.15 GraphicaltemplateforanalysingtheStoretheMarblesactivity.
Table B.15 RelationshipbetweentheStoretheMarblescharacteristicsandCTcompetencies.
Tool functionalities System Task
(cid:86) (cid:86) (cid:86) (cid:86) (cid:79) (cid:86) (cid:79) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:79) (cid:86) (cid:79) (cid:86) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79)
Datacollection ✓ ✓ + + + + + + + + + + + + +
Patternrecognition ✓ + + ✓* + ✓* + + + + + + + + + + + + + +
Decomposition ✓ + + ✓* + + ✓* + + + + + + + + + + + + + +
Abstraction ✓ ✓ + + + ✓ + + + + + + + + + + +
Datarepresentation ✓ ✓ + + + + + + + + + + + + +
Variables ✓ ✓ + + + + + + + + + ✓F + + + + + + + + +
Operators ✓ + ✓ + + + + + + + + ✓F + + + + + + + +
Sequences ✓ + + ✓ + + + + ✓F + + + + + + +
Repetitions ✓ + + + ✓ + + ✓F + + + + + + + +
Conditionals ✗ + + ✓ + + + ✓F + + + + + + + + +
Functions ✓ + + + + ✓ + ✓F + + + + + + + +
Parallelism ✗ + + ✓ + ✓F + + + + + +
Events ✗ + + + ✓ + ✓F + + + + +
Algorithmdebugging ✓ + + + + + + + + ✓ ✗ + ✓ + ✓ ✗ ✓F ✗F
Systemstateverification ✗ ✓ ✗ + ✓ + ✓SF ✗SF ✓F ✗F
Constraintsvalidation ✗ + + + + + + + + ✓ ✗ + ✗ ✓
Optimisation ✓ + + + + + + + + ✓ ✗ +
Generalisation ✓ ✓ + + + ✓ + ✓ ✗ + + + +
selbairaV srotarepO secneuqeS snoititepeR slanoitidnoC snoitcnuF msilellaraP
stnevE
elbattesermetsyS
elbattesertonmetsyS
elbavresbometsyS
elbavresbotonmetsyS
dnuofebotetatS
dnuofebotmhtiroglA ytilanidraceno-ot-enO ytilanidraceno-ot-ynaM
stnemeleticilpxE stnemeleticilpmI
stnemeledeniartsnocnU stnemeledeniartsnoC
tsefinammhtiroglA tnetalmhtiroglA nettirwmhtiroglA
nettirwtonmhtiroglA58 GiorgiaAdornietal.
Problem solver System
☐✓ single ☐ group ☐ unplugged ☐ robotic ☐✓ virtual
☐✓ resettable ☐ not resettable
Artefactual environment
☐✓ (partly) observable ☐ not observable
☐✓ variables ☐✓ operators ☐✓ sequences ☐✓ repetitions
☐✓ conditionals ☐✓ functions ☐ parallelism ☐✓ events
Agent Environment
Reasoning Interactions ☐ human ☐ robotic ☐✓ virtual ☐ physical ☐☐✓ vviirrttuuaall
tools tools System hints
☐✓ embodied Actions Descriptors
Cross the bridge Number of Zoombinis
Visual feedback Click and drag platform ☐ reversible ☐✓ not reversible who have crossed the bridge
☐✓ embodied ☐✓ embodied
Task
☐ find the initial state ☐✓ find the algorithm ☐ find the final state ☐ creation act ☐ application act ☐ project act
☐✓ one-to-one cardinality ☐ many-to-one cardinality
Algorithm
Initial state Final state
☐ manifest ☐✓ latent
Given: no Zoombinis have crossed the bridge ☐ written ☐ not written Given: all Zoombinis have crossed the bridge
☐ ☐✓ ✓ e ox np elicit ☐ ☐ i mm ap nli ycit To b☐e wforuitntedn: set of mo☐vi nngo ta wctriiottnesn ☐ ☐✓ ✓ e ox np elicit ☐ ☐ i mm ap nli ycit
☐ constrained ☐✓ unconstrained
☐✓ one ☐ many
Fig. B.16 GraphicaltemplateforanalysingtheZoombinisAllergicCliffsPuzzle.
Table B.16 RelationshipbetweentheZoombinisAllergicCliffsPuzzlecharacteristicsandCTcompetencies.
Tool functionalities System Task
(cid:86) (cid:86) (cid:86) (cid:86) (cid:86) (cid:86) (cid:79) (cid:86) (cid:86) (cid:79) (cid:86) (cid:79) (cid:79) (cid:86) (cid:86) (cid:79) (cid:86) (cid:79) (cid:86) (cid:79) (cid:79) (cid:86) (cid:79) (cid:79)
Datacollection ✓ ✓ + + + + + + + + + + + + +
Patternrecognition ✓ + + ✓* + ✓* + + + + + + + + + + + + + +
Decomposition ✓ + + ✓* + + ✓* + + + + + + + + + + + + + +
Abstraction ✓ ✓ + + + ✓ + + + + + + + + + + +
Datarepresentation ✓ ✓ + + + + + + + + + + + + +
Variables ✓ ✓ + + + + + + + + + ✓F + + + + + + + + +
Operators ✓ + ✓ + + + + + + + + ✓F + + + + + + + +
Sequences ✓ + + ✓ + + + + ✓F + + + + + + +
Repetitions ✓ + + + ✓ + + ✓F + + + + + + + +
Conditionals ✓ + + ✓ + + + ✓F + + + + + + + + +
Functions ✓ + + + + ✓ + ✓F + + + + + + + +
Parallelism ✗ + + ✓ + ✓F + + + + + +
Events ✓ + + + ✓ + ✓F + + + + +
Algorithmdebugging ✗ + + + + + + + + ✓ ✗ + ✓ + ✓ ✗ ✓F ✗F
Systemstateverification ✗ ✓ ✗ + ✓ + ✓SF ✗SF ✓F ✗F
Constraintsvalidation ✗ + + + + + + + + ✓ ✗ + ✗ ✓
Optimisation ✓ + + + + + + + + ✓ ✗ +
Generalisation ✓ ✓ + + + ✓ + ✓ ✗ + + + +
selbairaV srotarepO secneuqeS snoititepeR slanoitidnoC snoitcnuF msilellaraP
stnevE
elbattesermetsyS
elbattesertonmetsyS
elbavresbometsyS
elbavresbotonmetsyS
dnuofebotetatS
dnuofebotmhtiroglA ytilanidraceno-ot-enO ytilanidraceno-ot-ynaM
stnemeleticilpxE stnemeleticilpmI
stnemeledeniartsnocnU stnemeledeniartsnoC
tsefinammhtiroglA tnetalmhtiroglA nettirwmhtiroglA
nettirwtonmhtiroglA