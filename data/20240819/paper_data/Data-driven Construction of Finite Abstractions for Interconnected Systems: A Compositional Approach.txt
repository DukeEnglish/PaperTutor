DATA-DRIVEN CONSTRUCTION OF FINITE ABSTRACTIONS FOR
INTERCONNECTED SYSTEMS:
A COMPOSITIONAL APPROACH
DANIELAJELEYEANDMAJIDZAMANI
Abstract. Finite-stateabstractions(a.k.a. symbolicmodels)presentapromisingavenuefortheformalveri-
ficationandsynthesisofcontrollersincontinuous-spacecontrolsystems. Theseabstractionsprovidesimplified
models that capture the fundamental behaviors of the original systems. However, the creation of such ab-
stractions typically relies on the availability of precise knowledge concerning system dynamics, which might
notbeavailableinmanyreal-worldapplications. Inthiswork, weintroduceaninnovative, data-driven, and
compositionalapproachtogeneratefiniteabstractionsforinterconnectedsystemsthatconsistofdiscrete-time
controlsubsystemswithunknowndynamics. Thesesubsystemsinteractthroughanunknownstaticintercon-
nectionmap. Ourmethodologyforabstractingtheinterconnectedsysteminvolvesconstructingabstractions
for individual subsystems and incorporating an abstraction of the interconnection map. Within our data-
drivenframework,wecollectdatasamplesfromunknownsubsystemsandcollectinput-outputdatafromthe
interconnectionmaptoconstructfiniteabstractionswhileensuringtheircorrectness. Nevertheless,thecom-
putationalcomplexityofbuildingfiniteabstractionsforinterconnectedsystemsbasedonthoseofsubsystems
can still become formidable, especially depending on the structure of the interconnection map. To address
this challenge, we introduce intermediate variables that streamline the process, breaking down the intercon-
nection and abstraction tasks into more manageable computations. To demonstrate the effectiveness of our
approach, we present results for two numerical benchmarks: the construction of a finite abstraction for a
32-dimensionalsystembycombiningabstractionsof32scalarsubsystems,andthesynthesisofacontrollerfor
an8-dimensionalsystembasedonitsconstructedfiniteabstraction,aimedatachievingaconsensusobjective.
1. Introduction
Designing controllers for continuous-space systems with complex control objectives presents a formidable
challenge. Fortunately, recent advances have introduced several techniques to address these obstacles. A
particularly effective approach involves the creation of finite abstractions for the original control systems
[Tab09]. These abstractions provide concise representations of dynamical systems, designed in such a way
thatadiscretecontroller,initiallyconstructedtoenforcespecificpropertiesonthefinitemodel,canbefurther
refined into a hybrid controller that upholds these properties on the actual concrete system. However, the
process of constructing symbolic models for large-scale systems composed of many subsystems is inherently
intricate. To overcome this challenge, an effective strategy is to begin by constructing symbolic models for
individualsubsystems. Subsequently,throughacompositionalframework,onecanassembleafiniteabstraction
of the entire network by integrating these individual abstractions.
In this work, we introduce a novel data-driven technique for constructing a finite abstraction of a system
composedofsmallerinteractingcomponents,i.e.,subsystems. Inparticular,ourapproachentailsthecollection
of data from multiple initializations of these unknown subsystems, thereby enabling us to construct a data-
driven finite abstraction for each individual subsystem. This abstraction process is performed concurrently
and independently, as each subsystem’s internal state remains isolated from the others through input-state
interfaces. The interplay between these subsystems is governed by an interconnection map, which constraints
the values of internal variables spanning the various subsystems.
ThisworkwassupportedbytheNSFundergrantCNS-2145184.
1
4202
guA
61
]YS.ssee[
1v79480.8042:viXra2 DANIELAJELEYEANDMAJIDZAMANI
Furthermore, the interconnection maps are also approximated by finite abstractions. We present a composi-
tional result, which demonstrates the existence of a feedback refinement relation [RWR16] that bridges the
abstract interconnections with the concrete ones. Borrowing insights from [GKA17], we introduce a sparsity
constrainttothedata-drivenapproximationoftheinterconnectionmap,resultinginasparsematrixrepresen-
tation of the nonlinear interconnection map. This approach facilitates the incorporation of latent variables,
capturing intermediate computations, and thus breaking down the interconnection and abstraction tasks into
more manageable components. Ultimately, this approach significantly reduces the overall complexity of the
abstraction process. Finally, we illustrate the efficacy of our approach by applying it to two numerical bench-
marks: the construction of a finite abstraction for a 32-dimensional system by combining abstractions of 32
scalarsubsystems,andthesynthesisofacontrollerforan8-dimensionalsystembasedonitsconstructedfinite
abstraction, aimed at achieving a consensus objective.
Related Work. Limited research has been dedicated to constructing finite abstractions using data-driven
methods. These findings encompass various systems, including unknown monotone systems [MGF21], in-
crementally input-to-state stable control systems [LF22], and continuous-time perturbed systems [KMS+22].
Furthermore, approaches like [XZEL20, FQMV17, CPMJ22] focus predominantly on data-driven techniques
for verifying unknown systems while offering probabilistic guarantees. However, it is crucial to recognize that
all of these aforementioned results adopt a monolithic perspective, abstracting the entire system. It is im-
portant to acknowledge that the monolithic abstraction approach encounters scalability issues. These issues
stem from the exponential increase in complexity based on the number of state variables in the model, pri-
marily because of the gridding of state sets. As a consequence, these techniques tend to face computational
limitations, especially in state spaces that exceed four dimensions.
Ourapproachisapplicabletoallclassesofnon-lineardiscrete-timecontrolsystems,incontrasttotheworkby
[MGF21], which is exclusively suited for monotone systems. While the result in [LF22] imposes incremental
stability requirements on the underlying systems, and similar to [XZEL20], [FQMV17] and [CPMJ22] provide
finiteabstractionswithprobabilisticguarantees,ourapproachstandsoutbyofferingacompositionalconstruc-
tion of sound abstractions with a 100% correctness guarantee. Importantly, our method does not necessitate
anystabilityassumptionsonthesubsystems,nordoesitimposeanyimplicitconditionsregardingthenumber
of subsystems.
In recent years, significant progress has been made in developing a compositional framework for the con-
struction of finite abstractions for networks of control systems. Noteworthy contributions in the literature
include [HAT17, KAZ18, MGW17], which construct sound symbolic models of interconnected systems in a
compositionalmanner. Regrettably, alloftheseworksonthecompositionalconstructionoffiniteabstractions
require the availability of system models, which are often absent in many real-world applications. To address
this challenge, one might explore various indirect data-driven strategies to come up with models for unknown
dynamicalsystemsthroughidentificationtechniques(e.g.,[Lju98,FS18,HW13]andreferencestherein). How-
ever, obtaining an accurate model can be arduous, time-intensive, and computationally expensive in itself.
2. Preliminaries and Definitions
2.1. Notation. SymbolsR, R , andR , respectively, representsetsofreal, positive, andnon-negativereal
>0 ≥0
numbers. Notations ∪, ∩, and \ indicate, respectively, set union, intersection, and set difference. Similarly, ∧
denotes the logical conjunction. The symbol N denotes the set of natural numbers and ∀n∈N∪{0}, symbol
N = {l ∈ N∪{0} | l ≥ n}. In the case where a,b ∈ N and a < b, we employ the notations [a;b], (a;b),
≥n ≥0
[a;b), and (a;b] to represent respectively the closed, open, half-open from the right, and half-open from the
left intervals in N . Alternatively, for a,b ∈ R and a < b, we use [a,b], (a,b), [a,b), and (a,b] to denote
≥0
the corresponding intervals in R. For any non-empty set Q and n ∈ N, we denote the cardinality of Q as
C d(Q), while Qn indicates the Cartesian product of n duplicates of Q. Given N vectors x
i
∈Rni, n
i
∈N, and
(cid:80)
i ∈ {1,...,N}, we use x = [x ;...;x ] to denote the corresponding column vector of dimension n . The
1 N i i
vector1 ∈Rn isdefinedas[1;1;...;1]∈Rn. Notationdim(Z)∈N denotesthedimensionofagivensetZ
n ≥0DATA-DRIVEN CONSTRUCTION OF FINITE ABSTRACTIONS FOR INTERCONNECTED SYSTEMS:A COMPOSITIONAL APPROACH3
within a vector space. For any p¯,q¯∈ Rn and relational operator ≃ ∈ {≤,<,=,>,≥}, where p¯= [p ;...;p ]
1 n
and q¯ = [q ;...;q ], p¯ ≃ q¯ is interpreted as p ≃ q , ∀l ∈ {1,...,n}, i.e., component-wise comparison.
1 n l l
Assuming p¯<q¯, then the compact hyper-interval [p¯,q¯] is given as [p ,q ]×···×[p ,q ]. Furthermore, given
1 1 n n
c=[c ;...;c ]∈Rn, we define the sum ⊕ as c⊕[p¯,q¯]:=[p +c ,c +q ]×···×[p +c ,c +q ]. Notation
1 n 1 1 1 1 n n n n
|c| means the entry-wise absolute value of c ∈ Rn i.e., [|c |;...;|c |], while ∥c∥ means the infinity norm of
1 n
c. Similarly, ∥c∥ gives the ℓ -norm of c for some p ≥ 1. For any r¯∈ Rn and c ∈ Rn, notation Φ (c ) is
p p >0 0 r¯ 0
interpretedasc ⊕[−r¯,r¯]. Foragivencompacthyper-intervalH anddiscretizationparametervectorη ∈Rn ,
0 h >0
(cid:83)
we create a partition of H into cells Φ (h) such that H ⊆ Φ (h), where [H] represents a finite
set of representative points selected
froη mh
those partition
sets.h∈ F[H or]ηh anyηh
ϑ ∈ Rn×m,
∥ϑ∥ηh
denotes the infinity
norm of ϑ.
2.2. Discrete-Time Control Systems. Here, we investigate discrete-time control systems (cf. next defini-
tion) encompassing both internal and external inputs. Internal variables facilitate interconnection with other
systems, whereas external ones serve as interfaces for controllers.
Definition 2.1. A discrete-time control system (dt-CS) Ξ is represented via a tuple
(2.1) Ξ=(X,U,U,f),
where X,U, and U denote the state set, external input set, and internal input set of the control system,
respectively. These sets are assumed to be nonempty subsets of normed vector spaces with finite dimensions.
The transition function, denoted as f : X ×U ×U ⇒ X, is a set-valued map. The dt-CS Ξ is characterized
by difference inclusions of the following form:
(2.2) x(k+1)∈f(x(k),u(k),w(k)),
where at time k ∈ N, x(k) ∈ X, u(k) ∈ U, and w(k) ∈ U represent the state, external, and internal input,
respectively.
A dt-CS Ξ=(X,U,U,f) is referred to as deterministic when C (f(x,u,w)) is at most 1 ∀x∈X, ∀u∈U, and
d
∀w ∈U. Otherwise, the dt-CS Ξ is considered non-deterministic. In addition, Ξ is classified as finite if X, U,
and U are finite sets, and Ξ is said to be infinite otherwise.
Remark 2.2. If a dt-CS Ξ does not have internal inputs, the tuple (2.1) in Definition 2.1 simplifies to a simple
system
(2.3) Ξ=(X,U,f),
where the set-valued map f becomes f :X×U ⇒X. Consequently, the formulation in (2.2) is reduced to:
(2.4) x(k+1)∈f(x(k),u(k)).
Subsequently, we utilize the notion of the dt-CS in equations (2.3) and (2.4), to specifically refer to an
interconnected dt-CS. This dt-CS is constructed by interconnecting several subsystems described as in (2.1)
and (2.2). Next, we introduce the notion of feedback refinement relation, which provides a relation between
two dt-CSs in terms of controller synthesis.
2.3. Feedback Refinement Relations. Here,werecallthenotionoffeedbackrefinementrelations[RWR16]
that establish a relationship between two dt-CSs, as described in Definition 2.1 and quantify the relationship
between them in terms of controller synthesis [Tab09].
Definition 2.3. Consider two dt-CS Ξ = (X ,U ,U ,f ), where i ∈ {1,2}, such that U ⊆ U . There is a
i i i i i 2 1
feedback refinement relation from Ξ to Ξ if there exist nonempty relations Q ⊆ X ×X and R ⊆ U ×U
1 2 1 2 1 2
such that, ∀(x ,x )∈Q ∀w ∈U ∃w ∈U such that (w ,w )∈R and the next two conditions hold:
1 2 1 1 2 2 1 2
• U (x ,w ) ⊆ U (x ,w ), where U (x ,w ) := {u ∈ U | f (x ,u ,w ) ̸= ∅} is the set of admissible
Ξ2 2 2 Ξ1 1 1 Ξi i i i i i i i i
external inputs for state x ∈X and internal input w ∈U , ∀i∈{1,2};
i i i i4 DANIELAJELEYEANDMAJIDZAMANI
• if u∈U (x ,w ), then Q(f (x ,u,w ))⊆f (x ,u,w ).
Ξ2 2 2 1 1 1 2 2 2
Furthermore, whenever there is a feedback refinement relation as in Definition 2.3 from dt-CS Ξ to Ξ , we
1 2
denote it by Ξ ⪯ Ξ . When there are no internal inputs, Definition 2.3 simplifies to the next one.
1 Q 2
Definition 2.4. Consider two dt-CSs Ξ = (X ,U ,f ), where i ∈ {1,2}, such that U ⊆ U . There is a
i i i i 2 1
feedback refinement relation from Ξ to Ξ if there exists a nonempty relation Q ⊆ X × X such that,
1 2 1 2
∀(x ,x )∈Q the following two conditions hold:
1 2
• U (x ) ⊆ U (x ), where U (x ) := {u ∈ U | f (x ,u ) ̸= ∅} is the admissible input set for state
Ξ2 2 Ξ1 1 Ξi i i i i i i
x ∈X , ∀i∈{1,2};
i i
• if u∈U (x ), then Q(f (x ,u))⊆f (x ,u).
Ξ2 2 1 1 2 2
3. Systems Interconnection
In this section, our focus lies in the analysis of interconnected systems, comprised of several dt-CSs.
3.1. Interconnected dt-CSs. Now, we define an interconnection of several dt-CSs.
Definition 3.1. Consider N ∈ N dt-CSs Ξ = (X ,U ,U ,f ), where i ∈ [1;N]. An interconnection I
≥1 i i i i i
betweentheN subsystemsisdefinedbythetupleI
=((cid:81)N
X
,(cid:81)N
U ,M),whereMistheinterconnection
i=1 i i=1 i
map and defined as,
N N
(cid:89) (cid:89)
(3.1) M: X → U .
i i
i=1 i=1
For the sake of simple presentation, an interconnection I as in Definition 3.1 is concisely written as tuple
I =(XI,UI,M) where XI =(cid:81)N X and UI =(cid:81)N U . Next, we define the interconnected dt-CS.
i=1 i i=1 i
Definition3.2. ConsideracollectionofN ∈N subsystemsΞ =(X ,U ,U ,f ),wherei∈[1;N],alongwith
≥1 i i i i i
an interconnection I = (XI,UI,M) that defines the coupling among these subsystems. The interconnected
dt-CS Ξ=(X,U,f) is denoted by I(Ξ ,...,Ξ ), and defined as follows:
1 N
• X
=(cid:81)N
X and U
=(cid:81)N
U ;
i=1 i i=1 i
• for any state x=[x ;...;x ]∈X and input
1 N
u=[u ;...;u ]∈U, it holds that
1 N
(3.2) f(x,u):={[x′;...;x′ ] | x′ ∈f (x ,u ,w ) ∀i∈[1;N]},
1 N i i i i i
where [w ;...;w ]=M([x ;...;x ]).
1 N 1 N
Definitions3.1and3.2highlighttheroleofinternalinputswithinanetworkofdt-CSs. Theseinternalvariables
facilitate the construction of independent abstractions for subsystems.
The following definition introduces a notion of abstract interconnection.
Definition 3.3. Consider interconnections I
i
= (XIi,UIi,M i), where i ∈ {1,2} such that dim(XI1) =
dim(XI2) and dim(UI1)=dim(UI2). Interconnection I
2
is called an abstraction of I
1
if there exist relations
Q˜ ⊆XI1 ×XI2 and R˜ ⊆UI1 ×UI2 such that ∀(x,xˆ)∈Q˜ ∀w ∈M(x) ∃wˆ ∈Mˆ(xˆ) such that (w,wˆ)∈R˜.
The mentioned interconnection abstraction is employed to construct abstractions of interconnected dt-CSs
using the subsystems’ abstractions compositionally. Next subsection introduces the main problem which we
aim at solving.DATA-DRIVEN CONSTRUCTION OF FINITE ABSTRACTIONS FOR INTERCONNECTED SYSTEMS:A COMPOSITIONAL APPROACH5
3.2. Problem Formulation. In this work, we assume that we have N infinite, deterministic dt-CSs denoted
by Ξ , as described in (2.1) and (2.2), where i ∈ [1;N]. The transition maps f in (2.2) are considered to be
i i
unknown. Furthermore,theseN subsystemsareinterconnectedviaaninterconnectionmapMasinDefinition
3.1 which is assumed to be unknown as well.
TheprimaryobjectiveofthisworkistoconstructafiniteabstractionofaninterconnectionofN dt-CSsΞ ,for
i
the sake of synthesizing controllers using the constructed abstraction. In our setting, although the underlying
dynamicsofΞ (denotedbyf in(2.2))areunknown,weassumethatsampleddatapointsfromtheirtrajecto-
i i
riesareavailable. WegatherthesedatasamplesinasetD :={(x ,u ,w ,x′)|x′ =f (x ,u ,w ) where x ∈
NCi l l l l l i l l l l
X , u ∈U , and w ∈U , l∈[1;N ]}. Note that we abuse notation by using x and w later to represent the
i l i l i Ci l l
datapointforthestateoftheinterconnecteddt-CSsandthevectorcontainingallinternalinputs,respectively
(cf. Subsection 4.2). Although the interconnection map in (3.1) is presumed to be an unknown nonlinear
function, we possess a sufficient set of input-output data points for this mapping. These collected data-points
are stored in the set D := {(x ,w ) ∈ XI ×UI | w = M(x ), l ∈ [1;N ]}. Under these assumptions, we
NI l l l l I
formulate the main problem that we aim to address in this work.
Problem 3.4. Consider an interconnected dt-CS Ξ as in Definition 3.2 composed of N subsystems Ξ , i ∈
i
[1;N], where transition maps f and the interconnection map M are unknown. Develop a compositional,
i
data-driven approach based on the sets of data D NCi, i∈[1;N], and D NI, to construct a finite abstraction Ξ(cid:98)
such that Ξ⪯
Q
Ξ(cid:98), where Q is a feedback refinement relation.
In the next section, we introduce a data-driven approach for constructing abstractions of subsystems within a
network and the interconnection abstraction as in Definition 3.3.
Figure 1. InterconnectionofN finiteabstractionsΞ(cid:98)i whilemaintainingthefeedbackrefine-
ment relation Q. This interconnection is achieved by leveraging the compositionality result
(cf. Theorem 4.10).
4. Data-Driven Construction of Finite Abstractions
In this section, we tackle Problem 3.4 in a step-by-step fashion, commencing with the creation of finite
abstractions for individual subsystems. Then, we develop a finite approximation of the interconnection.6 DANIELAJELEYEANDMAJIDZAMANI
Finally, we integrate these constructed subsystem abstractions and the interconnection approximation to
construct an overall abstraction, encompassing the behavior of the entire interconnected system.
4.1. Symbolic Abstractions for Subsystems. Consider N dt-CSs Ξ = (X ,U ,U ,f ), where i ∈ [1;N],
i i i i i
which are interconnected by a map M. To tackle Problem 3.4, we first raise the following assumptions.
Assumption 1. For any u∈U , the transition map f is Lipschitz continuous with respect to x and w, with
i i
Lipschitz constants L (u) and L (u), respectively, for all i∈[1;N].
xi wi
Assumption 2. The interconnection map M is Lipschitz continuous with a Lipschitz constant L .
M
Remark 4.1. Note that the results presented in [WZ96] can be employed to estimate the Lipschitz constants
mentioned in Assumption 1 and 2 for the unknown maps. This estimation is achieved by utilizing finite data
setsD andD ,obtainedfromtheunknowninterconnectedsystem. Nevertheless,inthiswork,weassume
NCi NI
that we know precise estimates of the Lipschitz constants. As a result, we do not consider any confidence
over the estimations of these constants. For implementation details, Appendix-A provides an elaboration on
the estimation process for the Lipschitz constants mentioned in Assumptions 1 and 2. This process involves
leveraging finite datasets, D and D , collected from the unknown system.
NC NI
For simplicity, in the remainder of this subsection we omit the index i from the representations of the sub-
systems. Let us denote by η ∈ (R )dim(X), η ∈ (R )dim(U) and η ∈ (R )dim(U) the discretization
x >0 u >0 w >0
parameters for X, U, and U, respectively. Hence, we generate symbolic state set Xˆ := [X] , Uˆ := [U] ,
ηx ηu
and Uˆ := [U] . Accordingly, the exact reachable set of states from a grid cell centered at xˆ ∈ Xˆ, under an
ηw
internal input grid cell centered at wˆ ∈ Uˆ, and under an external input uˆ ∈ Uˆ, is defined as R(xˆ,uˆ,wˆ) :=
{f(x,uˆ,w) | x ∈ Φ (xˆ) and w ∈ Φ (wˆ)}. Our objective is to construct an over-approximation of
ηx/2 ηw/2
R(xˆ,uˆ,wˆ) for any (xˆ,uˆ,wˆ)∈Xˆ×Uˆ ×Uˆ using a function called growth bound, formally defined as follows.
Definition 4.2. Given a dt-CS Ξ = (X,U,U,f) with corresponding symbolic sets Xˆ, Uˆ, and Uˆ, a function
κ:Rdim(X)×Xˆ×Uˆ ×Uˆ →Rdim(X) satisfying
≥0 ≥0
(4.1) |x′ −x′|≤κ(|x −x |,xˆ,uˆ,wˆ),
1 2 1 2
wherex′ =f(x ,uˆ,w )andx′ =f(x ,uˆ,w ),foranyx ,x ∈Φ (xˆ),w ,w ∈Φ (wˆ),iscalledagrowth
1 1 1 2 2 2 1 2 ηx/2 1 2 ηw/2
bound of Ξ.
We now formally define finite abstractions of subsystems.
Definition 4.3. Given a dt-CS Ξ = (X,U,U,f) and a growth bound κ, a finite dt-CS Ξ(cid:98) = (Xˆ,Uˆ,Uˆ,fˆ) is
a finite abstraction of Ξ, with the transition map fˆ: Xˆ×Uˆ ×Uˆ ⇒ Xˆ if for any xˆ ∈ Xˆ, wˆ ∈ Uˆ and uˆ ∈ Uˆ,
xˆ′ ∈fˆ(xˆ,uˆ,wˆ) for all xˆ′ ∈Xˆ where (f(xˆ,uˆ,wˆ)⊕[−q′,q′])∩Φ (xˆ′)̸=∅, with q′ =κ(η ,xˆ,uˆ,wˆ).
ηx/2 x
In addition, we present the following theorem, which shows the usefulness of finite abstractions in Definition
4.3byestablishingafeedbackrefinementrelation(namelysetmembershiprelation)betweenaconcretedt-CS
and its finite abstraction. Establishing a feedback refinement relation [RWR16] between a dt-CS and its finite
abstractionensuresthatanyrobustcontrollerdesignedfortheabstraction,whichenforcesaspecification(e.g.,
LTL [BK08], ω-regular properties described by universal co-Bu¨chi automata [AZ24], reach-avoid [AMP22],
e.t.c.) can be refined back to the dt-CS to achieve the same specification.
Theorem 4.4. Consider a dt-CS as in Definition 2.1, and let Ξ(cid:98) = (Xˆ,Uˆ,Uˆ,fˆ) be its finite abstraction
according to Definition 4.3. Then Ξ ⪯
Q
Ξ(cid:98), where the feedback refinement relation Q is defined as (x,xˆ) ∈ Q
if x∈Φ (xˆ).
ηx/2
The proof is similar to that of [RWR16, Theorem VIII.4] and is omitted here. Remark that a version of
the growth bound satisfying (4.1) is introduced in [RWR16] for model-based and continuous-time settings.DATA-DRIVEN CONSTRUCTION OF FINITE ABSTRACTIONS FOR INTERCONNECTED SYSTEMS:A COMPOSITIONAL APPROACH7
However, considering scenarios where the subsystem dynamics is unknown and to reduce the dependency
on the subsystem dynamics, we adopt a parametrized function [KMS+22, ALZ23] presented in (4.2), as a
candidate growth bound.
For any r¯ ∈ Rdim(X), xˆ ∈ Xˆ, uˆ ∈ Uˆ and wˆ ∈ Uˆ, we present the parametrized candidate growth bound as
≥0
follows:
(4.2) κ (r¯,xˆ,uˆ,wˆ):=ϑ (xˆ,uˆ,wˆ)r¯+ϑ (xˆ,uˆ,wˆ),
ϑ 1 2
whereϑ ∈Rdim(X)×dim(X),ϑ ∈Rdim(X),andϑ∈Rp isacolumnvectorformedbystackingthoseofϑ and
1 ≥0 2 ≥0 ≥0 1
ϑ , with p=dim(X)(dim(X)+1). Remark that for every abstract state, parameters of ϑ and ϑ are locally
2 1 2
defined, resulting in a less conservative growth bound. The following lemma, the proof of which is provided
in Appendix B, plays a pivotal role in demonstrating the results of Theorem 4.6 later on.
Lemma 4.5. Consider a pair (uˆ,wˆ) ∈ Uˆ ×Uˆ. By Assumption 1, suppose that for any x ,x ∈ Φ (xˆ),
1 2 ηx/2
w ,w ∈Φ (wˆ),
1 2 ηw/2
∥f(x ,uˆ,w )−f(x ,uˆ,w )∥≤L (uˆ)∥x −x ∥
1 1 2 2 x 1 2
(4.3)
+L (uˆ)∥w −w ∥.
w 1 2
Then one obtains
(4.4) ∥ϑ (xˆ,uˆ,wˆ)∥≤L (uˆ), ∀xˆ∈Xˆ, ∀uˆ∈Uˆ and ∀wˆ ∈Uˆ.
1 x
We now present a data-driven approach utilizing data set D to compute a candidate growth bound as in
NC
(4.2). Our approach also offers a formal correctness guarantee for (4.2) implying that it is a growth bound for
dt-CS in (2.2) (cf. Theorem 4.6). The primary objective is to seek a growth bound that is less conservative
in terms of over-approximating the reachable sets. In our proposed framework, we initially formulate the
candidate growth bound in (4.2) as the following robust convex program:
 min 1⊤ϑ
s.t.ϑ ϑ∈[0p
,ϑ¯],∀x ,x ∈Φ (xˆ),
(4.5) RCP: 1 2 ηx/2
 ∀ |xw ′1 −,w x′2 |−∈ κΦ η (w |x/2( −wˆ x),
|,xˆ,uˆ,wˆ)≤0,
1 2 ϑ 1 2
wherex′ =f(x ,uˆ,w ),x′ =f(x ,uˆ,w ),p=dim(X)(dim(X)+1),andϑ¯∈Rp isasufficientlylargevector
1 1 1 2 2 2 >0
component-wise.
One can readily verify that a feasible solution of the RCP in (4.5) provides a growth bound as in (4.1) for
dt-CS in (2.2). Unfortunately, a precise knowledge of the dynamic is required for solving the problem. To
resolvetheseissues,wecollectdatasamplesfromtrajectoriesofunknowndt-CSandproposeascenarioconvex
program (SCP) corresponding to the original RCP. To do so, consider a set of N data points D collected
C NC
within cells Φ (x˜) where x˜ ∈ [Φ (xˆ)] , which are sub-grids themselves within the cell Φ (xˆ), where
ηˆx/2 ηx/2 ηˆx ηx/2
1
ηˆ := √ η (cf. Fig. (2)). The proposed size of the sub-grid cells is due to extracting N data points
x x C
dim(X)N
C
from the primary cell Φ (xˆ), which has a dimension of dim(X). By leveraging the data set D , for any
ηx/2 NC
(xˆ,uˆ,wˆ)∈Xˆ×Uˆ ×Uˆ, we propose the SCP associated to the RCP in (4.5) for a cell Φ (xˆ) as
ηx/2

min 1⊤ϑ
 ϑ p
(4.6) SCP: s.t. ϑ∈[0,ϑ¯], ∀ l,¯l∈{1,...,N },
C
 |x′ l−x ¯′ l|−ϑ 1(xˆ,uˆ,wˆ)|x l−x¯l|−ϑ 2(xˆ,uˆ,wˆ)+ϱ≤0,
where ϱ∈Rdim(X) can be obtained as outlined in the following theorem.
≥08 DANIELAJELEYEANDMAJIDZAMANI
Theorem 4.6. Consider a dt-CS Ξ = (X,U,U,f). For any (xˆ,uˆ,wˆ) ∈ [X] ×[U] ×[U] , suppose for a
ηx ηu ηw
1
cell [Φ (xˆ)], [Φ (xˆ)] is constructed where ηˆ := √ η . Then, the solution of (4.6) provides a
ηx/2 ηx/2 ηˆx x
dim(X)N
x
C
growth bound as in (4.1) corresponding to (xˆ,uˆ,wˆ), where
(4.7) ϱ:=2L (uˆ)ηˆ +L (uˆ)∥η ∥1 ,
x x w w dim(X)
L (uˆ) and L (uˆ) are Lipschitz constants as in Assumption 1.
x w
Proof. It can be readily verified that the optimization problem (4.6) admits a feasible solution. For any fixed
(xˆ,uˆ,wˆ)∈[X] ×[U] ×[U] , let
ηx ηu ηw
β(ϑ,x ,x ,w ,w ):=|f(x ,uˆ,w )−f(x ,uˆ,w )|
1 2 1 2 1 1 2 2
−ϑ (xˆ,uˆ,wˆ)|x −x |−ϑ (xˆ,uˆ,wˆ),
1 1 2 2
for any x ,x ∈ Φ (xˆ) and w ,w ∈ Φ (wˆ). In addition, let ϑ∗ be the optimal solution of SCP (4.6).
1 2 ηx/2 1 2 ηw/2
By considering x 1,x
2
∈ Φ ηx/2(xˆ) and picking samples x l,x¯l from cells Φ ηˆx/2(x l),Φ ηˆx/2(x¯l) ⊂ Φ ηx/2(xˆ), and
w′,w′ ∈Φ (wˆ), one gets
1 2 ηw/2
∥β(ϑ∗,x 1,x 2,w 1,w 2)−β(ϑ∗,x l,x¯l,w 1′,w 2′)∥
≤∥f(x ,uˆ,w )−f(x ,uˆ,w′)∥+∥ϑ (xˆ,uˆ,wˆ)∥∥x −x ∥
1 1 l 1 1 1 l
+∥f(x 2,uˆ,w 2)−f(x¯l,uˆ,w 2′)∥+∥ϑ 1(xˆ,uˆ,wˆ)∥∥x 2−x¯l∥
(using Lemma 4.5)
≤2L x(cid:0) ∥x 1−x l∥+∥x 2−x¯l∥(cid:1) +L w(cid:0) ∥w 1−w 1′∥+∥w 2−w 2′∥(cid:1)
≤2L ∥ηˆ ∥+L ∥η ∥.
x x w w
The above inequality implies that
(4.8) β(ϑ∗,x 1,x 2,w 1,w 2)≤β(ϑ∗,x l,x¯l,w 1′,w 2′)+ϱ,
where ϱ := 2L ηˆ + L ∥η ∥1 . Therefore, within any cell Φ (xˆ), (4.8) implies that any optimal
x x w w dim(X) ηx/2
solution of SCP (4.6) is always feasible for RCP (4.5). In particular, any feasible solution of (4.6) results in a
growth bound κ of the form (4.2) that satisfies inequality (4.1), which concludes the proof. □
ϑ
WeproposeAlgorithm1toillustratetherequiredproceduresinTheorem4.6forthedata-drivenconstruction
of finite abstractions of subsystems. We present a visual representation of the transition function fˆ(xˆ,uˆ,wˆ)
for a finite abstraction of a subsystem in Fig. 2.
Algorithm 1 Construction of Subsystems Abstractions (SA)
Require: SA(X, U, U, η , η , η )
x u w
1: Construct: Xˆ =[X] ηx, Uˆ =[U] ηu, Uˆ =[U] ηw
2: for each (xˆ,uˆ,wˆ)∈(Xˆ,Uˆ,Uˆ) do
3: Initiate: fˆ(xˆ,uˆ,wˆ)=∅, γ =0
4: Obtainc=f(xˆ,uˆ,wˆ)bysimulatingdt-CS(2.4)fromtheinitialconditionxˆ undertheinputpair(uˆ,wˆ)
5: Compute ϱ∈Rdim(X) as in (4.7)
≥0
6: AsoutlinedinTheorem4.6, generate[Φ ηx/2(xˆ)] ηˆx andselectN C sampleddatapoints(x l,uˆ,wˆ,x′ l)from
it.
7: Obtain the optimal value ϑ∗(xˆ,uˆ,wˆ) for the SCP in (4.6)
8: Update γ =κ ϑ∗(η x,xˆ,uˆ,wˆ)
9: fˆ(xˆ,uˆ,wˆ)={xˆ′ ∈Xˆ | Φ ηx/2(xˆ′)∩Φ γ(c)̸=∅}∪fˆ(xˆ,uˆ,wˆ)
10: end for
Ensure: Ξ(cid:98) =(Xˆ,Uˆ,Uˆ,fˆ)DATA-DRIVEN CONSTRUCTION OF FINITE ABSTRACTIONS FOR INTERCONNECTED SYSTEMS:A COMPOSITIONAL APPROACH9
Figure 2. A 2-dimensional depiction of a finite abstraction for a subsystem, constructed
using Algorithm 1.
Remark 4.7. Utilizing Theorem 4.6 across all partition sets enables the establishment of a set membership
relation ⪯
Q
(cf. Theorem 4.4) between a concrete subsystem Ξ and its data-driven finite abstraction Ξ(cid:98). This
abstraction is constructed by solving SCP (4.6) over the grid cells.
4.2. Finite Abstractions for Interconnections. Upon obtaining the subsystem abstractions, as in the
preceding subsection, we proceed to the second phase of addressing Problem 3.4. This phase involves creating
a symbolic representation of the interconnection. The construction of arbitrary interconnections can, in the
worst-case scenario, exhibit exponential complexity with respect to the number of subsystems N. To mitigate
this,weintroducesupplementaryvariablesthataccountforintermediatecomputationswithintheabstraction
construction. This not only introduces sparsity but also reduces the computational load associated with the
abstraction process.
Consider an interconnection I = (XI,UI,M) as in Definition 3.1. Note that the interconnection map M
(3.1) is an unknown nonlinear map. However, we have access to the input-output data points as in D . Our
NI
goal is to derive a linear approximation M of M, serving as the basis for constructing an abstraction Iˆ. To
do so, we first frame the search for the linear estimate as a regression problem. The estimator is subject to
regularization via an ℓ -norm penalty term, promoting sparsity. This is detailed as follows:
1
(4.9)
argmin(cid:110)(cid:13) (cid:13)Ω−XM(cid:13) (cid:13)2 +α(cid:13) (cid:13)M⊤(cid:13)
(cid:13)
(cid:111)
,
2 1
M
where for data points {(x ,w )}N¯ I in D , Ω and X are the stack of {w } and {x }, respectively, with
l l l=1 NI l l
l ∈ [1;N¯ ] such that N¯ < N . Note that it is not necessary to utilize all data points in D to formu-
I I I NI
late equation (4.9) for estimating M. Instead, we rely on only a subset of D . Note that for a network
NI
comprising of N interconnected subsystems governed by a linear interconnection map, one can readily verify
that acquiring dim(UI)×dim(XI) input-output data points of the interconnection map is sufficient for ac-
curately estimating the map (cf. Subsection 5.2). Note that α >0 denotes the regularization parameter and
M ∈ Rdim(UI)×dim(XI). The term α(cid:13) (cid:13)M⊤(cid:13) (cid:13) in (4.9) enforces sparsity on M row by row, thereby reducing
1
the computational effort needed for constructing the overall abstraction. However, to accomplish the desired
sparsity on M from (4.9), an appropriate value must be selected for parameter α. One may opt for the
processoftuningthepenaltytermthroughcross-validation[Lju98],involvingsystematicallyassessingarange
of penalty values on validation data.
It is important to note that the regression formulation in (4.9) is numerically solvable, guaranteeing the
existence of a solution for the specified optimization problem. Consequently, given x ∈XI, the actual value
l10 DANIELAJELEYEANDMAJIDZAMANI
w = M(x ) ∈ UI is estimated by Mx , accounting for a residual error. We present the next lemma, which
l l l
plays a crucial role in the process of constructing an abstraction for an interconnection I.
Lemma 4.8. Consider a data point (x ,w ) ∈ D and a neighbourhood Φ (x ) ⊂ XI of x , where ρ ∈
l l NI ρx l l x
Rdim(XI). Then, for any x′ ∈Φ (x ), there exists εˆ(ρ ,w ,x′)∈R such that
>0 ρx l x l >0
M(x′)∈Mx′⊕[−εˆ(ρ ,w ,x′)1 , εˆ(ρ ,w ,x′)1 ].
x l dim(UI) x l dim(UI)
Proof. Consider any x′ ∈XI where |x −x′|≤ρ . Then the following inequalities hold:
l x
∥M(x′)−Mx′∥≤∥M(x′)−M(x )∥+∥M(x )−Mx′∥
l l
≤L ∥x′−x ∥+∥w −Mx′∥
M l l
≤L ∥ρ ∥+∥w −Mx′∥.
M x l
Now, let
(4.10) εˆ(ρ ,w ,x′):=L ∥ρ ∥+∥w −Mx′∥.
x l M x l
Therefore, for any x′ ∈Φ (x ), ∥M(x′)−Mx′∥≤εˆ(ρ ,w ,x′), which concludes the proof. □
ρx l x l
Observe that the parameter εˆ(ρ ,w ,x′) depends on the data point (x ,w ) ∈ D , along with the distance
x l l l NI
ρ ∈ Rdim(XI) of the neighborhood around x , considering the particular point x′ within the neighborhood.
x >0 l
Using M to derive an over-approximation of M(x′) in accordance with Lemma 4.8 implies creating an in-
terconnection abstraction in a monolithic fashion. This approach necessitates a brute-force traversal of the
set XI. The computational complexity of this brute-force exploration experiences an exponential increase
with the number of subsystems N. Hence, we illustrate how integrating additional variables, representing
intermediate computations through the decomposition of M, can reduce the runtime of the interconnection
abstraction. This reduction occurs because the brute-force traversal is conducted over lower-dimensional
subspaces, consequently alleviating the computational burden associated with the abstraction process.
Consider a x∈Φ (x ) according to Lemma 4.8. Let
ρx l
(4.11) w =Mx+εˆ(ρ ,w ,x)1 .
x l dim(UI)
We proceed by transforming the sparse matrix M∈Rdim(UI)×dim(XI) into a weighted directed acyclic graph
(WDAG) G=(V,E) such that the following hold:
• The sets of vertices w ={w ,...,w } and x ={x ,...,x } satisfy w ∪x ⊆V.
I 1 N I 1 N I I
• The edge function e:x ×w →R ∪{invalid} is defined as:
I I >0
(cid:40)
invalid if M =0
(4.12) e(x ,w ):= ij
j j
M otherwise.
ij
• The set of edges E ={(v,v′)∈V ×V | e(v,v′) is not invalid}.
We emphasize that an edge (v,v′)∈V ×V is considered invalid if it is not included in the graph G, meaning
(v,v′) ∈/ E. Additionally, for any vertex v ∈ V, we define the set D(v) := {v′ | e(v′,v) is not invalid}.
Consequently, the indegree of v, denoted as deg(v), is defined as C (D(v)). We proceed to decompose the
d
matrix M by leveraging its corresponding WDAG, applying the procedures outlined in Algorithm 2. It is
important to mention that Algorithm 2 takes a user-specified hyperparameter σ ∈ N as an input, which
≥1
governs the number of nodes in the ultimate layer of the WDAG. In order to avoid possible computational
challenges (refer to Lines 4 to 8 of Algorithm 3), it is recommended that σ is limited to a maximum value of
4.
In Fig. 3 (top), we provide an example of a WDAG of M ∈ R1×8 with a uniform weight of 1/8 on each
>0
edge. This example is further explained in Subsection 5.2. The graph features a shared node w such thatDATA-DRIVEN CONSTRUCTION OF FINITE ABSTRACTIONS FOR INTERCONNECTED SYSTEMS:A COMPOSITIONAL APPROAC1H1
Figure 3. An illustration of a WDAG with the application of Algorithm 2 where σ =4.
deg(w)=8. Applying Algorithm 2 with σ =4 yields the lower part of the figure. Two intermediate variables
{z ,z }havebeenintroducedtothegraph,effectivelydecomposingM∈R1×8 toM ∈R1×2 andM ∈R1×4.
1 2 >0 1 >0 2 >0
In the abstraction process, instead of over-approximating Mxˆ for a xˆ∈XI ⊂R8 , we leverage the decompo-
≥0
sition of M to compute the over-approximation. Thus, in this example, (4.11) which involves computations
in R8 is decomposed into computations in R2 and R4. Consequently, the set Mxˆ⊕[−εˆ(ρ ,w ,xˆ), εˆ(ρ ,w ,xˆ)]
x l x l
is over-approximated as
{(cid:81)2
(M x ⊕[−εˆ(ρ ,w ,xˆ), εˆ(ρ ,w ,xˆ)]) | xˆ = [x ;x ]}, and grids of dimension 2
i=1 i i x l x l 1 2
and 4 are availed instead of dimension 8 for the abstraction.
Furthermore, we propose Algorithm 3 to outline the process of constructing the interconnection abstraction.
Note that in line 5 of Algorithm 3, the computational burden associated with traversing a higher-dimensional
space XIˆ is mitigated through the decomposition of M in line 4. This decomposition is utilized in the
construction of the over-approximation, as outlined in line 8. Additionally, we formally establish that the
interconnectioncreatedbyusingAlgorithm3isacorrectabstractionoftheconcreteunknown interconnection.
Theorem 4.9. Consider an interconnection I = (XI,UI,M) where the map M is unknown. Let ρ ∈
x
Rdim(XI) and ρ ∈ Rdim(UI) be discretization parameters utilized to form symbolic sets XIˆ = [XI] and
>0 w >0 ρx
UIˆ = [UI] . Suppose Iˆ = (XIˆ,UIˆ,Mˆ) is constructed using Algorithm 3. Then Iˆ is an abstraction of I as
ρw
in Definition 3.1.12 DANIELAJELEYEANDMAJIDZAMANI
Algorithm 2 Matrix Decomposition (MDec)
(cid:0) (cid:1)
Require: MDec M,σ
1: Generate the corresponding WDAG G=(V =w I ∪x I,E)
2: Initiate matrix set MS =∅
3: while deg(v)>σ ∀v ∈V do
4: Initiate set of auxilliary variables Z ℓ =∅ with layer ℓ=1
5: Pick d∈[1;σ] and create vertices z i where 1≤i≤d
6: Let p:=C d(w I) and create matrix M ℓ ∈Rp >× 0d with entries e(z i,v) set to null ∀v ∈w I and 1≤i≤d
7: for each v ∈w I do
8: if deg(v)≤σ then
9: Continue
10: else
11: Set e(z i,v):=1/d and let d′ :=C d(D(v))
12: D :=[v′;v′;...;v′ ] where v′ ∈D(v) ∀j ∈[1;d′]
1 2 d′ j
13: Set e(D[j],z i):=e(D[j],v)/e(z i,v) until all vertices D[j] has been connected to a vertex z i where
1≤j ≤d′ and 1≤i≤d
14: E =E\{(v′,v)∈V ×V | v′ ∈D(v)}
15: Z ℓ =Z ℓ∪{z i | 1≤i≤d}
16: end if
17: end for
18: w I =Z ℓ, ℓ=ℓ+1 and MS =MS∪{M ℓ}
19: end while
Ensure: MS
Algorithm 3 Construction of Interconnection Abstraction (IA)
Require: IA(XI, UI, ρ , ρ )
x w
1: Initiate: XIˆ =[XI] ρx and UIˆ =[UI] ρw
2: Collect data in set D NI = {(x l,w l) ∈ XI ×UI | x l ∈ Φ ρx(xˆ) where xˆ ∈ XIˆ, l = 1,...,N I} and select
appropriate value for σ
3: Using N¯ I <N I data points, solve (4.9) to obtain M
4: Obtain MS :=MDec(M, σ) and let q :=C d(MS)
5: for each xˆ∈XIˆ do
6: Initiate Mˆ(xˆ)=∅ and compute εˆ:=εˆ(ρ x,w l,xˆ)>0 as in (4.10)
7: Construct lower dimensional grids [XI]i where i∈[1;q]
8:
B:={(cid:81)q
i=1(M ix i⊕[−εˆ1 i, εˆ1 i]) |
xˆ=[x∥ 1ρ ;x .∥ .1 .i
;x q]}
9: Mˆ(xˆ)={wˆ′ ∈UIˆ | Φ ρw(wˆ′)∩B ̸=∅}∪Mˆ(xˆ)
10: end for
Ensure: Iˆ =(XIˆ,UIˆ,Mˆ)
Proof. Suppose (x,xˆ) ∈ XI ×XIˆ such that |x−xˆ| ≤ ρ and w = M(x). Line 1 of Algorithm 3 implies
x
that there exists wˆ ∈ UIˆ such that w ∈ Φ (wˆ). Upon solving (4.9), we obtain an approximation M of M.
ρw
Then Lemma 4.8 implies that there exists εˆ= εˆ(ρ ,w ,xˆ) > 0 such that |M(x)−Mx| ≤ εˆ1 . Hence,
x l dim(UI)
w ∈Φ (Mx),whichimpliesthatΦ (wˆ)∩Φ (Mx)̸=∅. Therefore,line9ofAlgorithm3yields
εˆ1 dim(UI) ρw εˆ1 dim(UI)
that wˆ ∈Mˆ(xˆ), which satisfies the condition outlined in Definition 3.3, concluding the proof. □
4.3. Compositional Construction of Abstraction. Here, we begin by presenting a compositional re-
sult that establishes a feedback refinement relation between an interconnected abstraction and the concreteDATA-DRIVEN CONSTRUCTION OF FINITE ABSTRACTIONS FOR INTERCONNECTED SYSTEMS:A COMPOSITIONAL APPROAC1H3
interconnected dt-CS. This result leverages the feedback refinement relations from individual concrete sub-
systems to their respective abstractions. Subsequently, we outline a scheme for integrating the subsystem
abstraction and the interconnection abstraction in a compositional manner. Suppose we have N subsystems
Ξ
i
= (X i,U i,U i,f i), accompanied by their finite abstractions Ξ(cid:98)i = (Xˆ i,Uˆ i,Uˆ i,fˆ i), and feedback refinement
relations Q
i
from Ξ
i
to Ξ(cid:98)i, where i ∈ [1;N] (cf. Theorem 4.4). We present the following theorem, which
establishes a feedback refinement relation between a concrete interconnected dt-CS and the data-driven finite
abstractions of the subsystems that have been composed together.
Theorem 4.10. Consider an interconnected dt-CS Ξ=I(Ξ ,...,Ξ ), consisting of N ∈ N subsystems
1 N ≥1
Ξ
i
and an interconnection I = (XI,UI,M). Let each subsystem Ξ
i
admits a data-driven abstraction Ξ(cid:98)i
constructed as in Algorithm 1 such that Ξ
i
⪯
Qi
Ξ(cid:98)i ∀i∈[1;N] (e.g. as in Theorem 4.4). Additionally, assume
that Iˆ =(XIˆ,UIˆ,Mˆ) is an abstraction of I constructed as in Algorithm 3. Consider a relation Q⊆XI×XIˆ
such that ∀(x,xˆ)∈Q where x=[x ;...;x ] and xˆ=[xˆ ;...;xˆ ], (x ,xˆ )∈Q ∀i∈[1;N]. Then relation Q
1 N 1 N i i i
is a feedback refinement relation from Ξ to Iˆ(Ξ(cid:98)1,...,Ξ(cid:98)N).
Proof. GiventhatΞ
i
⪯
Qi
Ξ(cid:98)i, ∀i∈[1;N], letuˆ:=[uˆ 1;...;uˆ N]∈U Iˆ(Ξ(cid:98)1,...,Ξ(cid:98)N)(xˆ)wherexˆ=[xˆ 1;...;xˆ N]∈XIˆ.
Thus, ∃xˆ′ ∈ fˆ(xˆ,uˆ), and by (3.2) fˆ(xˆ,uˆ) := {[xˆ′;...;xˆ′ ] | xˆ′ ∈ fˆ(xˆ ,uˆ ,wˆ ) ∀i ∈ [1;N]} where ∀w :=
1 N i i i i i
[w ;...;w ] = M([x ;...;x ]) ∃wˆ := [wˆ ;...;wˆ ] ∈ Mˆ(xˆ) and there is a relation R˜ ⊆ UI ×UIˆ such that
1 N 1 N 1 N
(w,wˆ) ∈ R˜. Suppose that (x,xˆ) ∈ Q where x = [x ;...;x ] ∈ XI and (x ,xˆ ) ∈ Q , ∀i ∈ [1;N]. Thus,
1 N i i i
uˆ ∈ U (xˆ ,wˆ ) =⇒ Q (f (x ,uˆ ,w )) ⊆ fˆ(xˆ ,uˆ ,wˆ ) ∀i ∈ [1;N]. Since xˆ ∈ fˆ(xˆ ,uˆ ,wˆ ), ∀i ∈ [1;N],
i Ξˆ
i
i i i i i i i i i i i i i i
and by Definition 2.3, ∃w ∈ U and x′ ∈ X such that x′ = f (x ,uˆ ,w ) ∀i ∈ [1;N]. Therefore, x′ =
i i i i i i i i i
f(x,uˆ) := {[x′;...;x′ ] | x′ = f (x ,uˆ ,w ) ∀i ∈ [1;N]}, and as a result, uˆ ∈ U (x), which implies that
1 N i i i i i Ξ
U (xˆ) ⊆ U (x). Now, suppose that xˆ′ ∈ Q(f(x,uˆ)), then xˆ′ ∈ Q (f (x ,uˆ ,w )) ∀i ∈ [1;N]. This
Iˆ(Ξ(cid:98)1,...,Ξ(cid:98)N) Ξ i i i i i
implies xˆ′ ∈ fˆ(xˆ ,uˆ ,wˆ ), ∀i ∈ [1;N], which implies that xˆ′ ∈ fˆ(xˆ,uˆ). Hence, Q(f(x,u)) ⊆ fˆ(xˆ,uˆ), and the
i i i i i
conditions in Definition 2.4 are satisfied, concluding the proof. □
Remark 4.11. Theorem 4.10 enables the construction of a finite abstraction of a network of subsystems by
utilizing finite abstractions of individual subsystems, as depicted in Fig. 1.
TheabstractionsderivedforboththesubsystemsandtheinterconnectionviaAlgorithm1and3,respectively,
are encoded using binary decision diagrams (BDD) [Bry86]. This selection of the data structure efficiently
encodes the abstractions as Boolean-valued functions. Hence, each subsystem abstraction have an encoding
(xˆ ,uˆ ,wˆ ,xˆ′)−fˆ → {true,false}, ∀i ∈ [1;N]. Similarly, the interconnection abstraction is encoded as
i i i i i
(xˆ,wˆ′)−Mˆ → {true,false}. Consequently, we utilize this representation of abstractions to combine and
interconnect the subsystem abstractions through Boolean conjunctions, taking into account all conditions as
delineated in Definition 3.2. Thus, we outline the complete solution to Problem 3.4 in Algorithm 4.
Algorithm 4 Data-Driven Compositional Abstraction (CA)
Require: CA(cid:0) I(Ξ ,...,Ξ ), {η ,η ,η }N , ρ , ρ (cid:1)
1 N xi ui wi i=1 x w
1: Initiate Abs=true
2: for each i∈[1;N] do
3: Abs′ = SA(Ξ i,η xi,η wi)
4: Abs=Abs∧Abs′
5: end for
(cid:0) (cid:1)
6: Abs=Abs∧ IA I(Ξ 1,...,Ξ N), ρ x, ρ w
Ensure: Abs14 DANIELAJELEYEANDMAJIDZAMANI
5. Case Studies
In this section, we demonstrate the efficacy of our proposed approaches by applying them to two numerical
benchmarks models, which were borrowed from [KAZ18]. However, we have assumed that these models and
their interconnection maps are unknown in applying our approach. The abstractions for both subsystems and
the interconnection are symbolically represented using Boolean functions, which have been implemented with
theCUDDtoolbox[Som97]. Allimplementationsfortheconstructionofthedata-drivenfiniteabstractionshave
been carried out in a modified version of the toolbox SCOTS [RZ16], using a 64-bit MacBook Pro with 64GB
RAM (3.2 GHz).
5.1. Experimental Evaluation for Scalability. We now present an example designed to illustrate the
scalability of the interconnection decomposition introduced in Algorithm 2 for a range of N subsystems.
ConsideracollectionofN scalarsubsystemsΞ =(X ,U ,U,f )whereX =[0,32], U =[0,7], U =[0,32]and
i i i i i i
x (k+1)=f (x (k),u (k),w(k))
i i i i
(5.1)
=min(0.75(x (k)+u (k)),w(k)+1,32),
i i
such that there is a single variable w(k)∈U shared amongst all subsystems, i.e.,
(5.2) w(k)=max(x (k),...,x (k)).
1 N
It is evident from models in (5.1) and (5.2) that a one-time-step evolution of any subsystem depends on
the previous state of other subsystems. Utilizing these models, we generate the data sets D and D ,
NCi NI
respectively. Furthermore,weestimatetheLipschitzconstantsasL =L =L =1.0(cf. Remark4.1and
xi wi M
[SLSZ24, Lemma A.2.]). In Algorithm 1, we employed N =150 samples. The abstract sets Xˆ and Uˆ were
Ci i
constructed using grid parameters η =η =1 for all i∈[1;N], while the external input grid was defined as
Uˆ =[U ] . Toconstructtheinterconx ni ectiow nabstractionIˆ =(cid:0)(cid:81)N Xˆ,Uˆ,Mˆ(cid:1) ,wesolved(4.9)usingN¯ =200
i i 1 i=1 i I
input-outputdatapointsfrom(5.2). AfterobtainingM∈RN,adecompositionM := 1M·[1 1 ]follows
1 N N N
from Algorithm 2 to introduce intermediate variables as follows:
z =M ·[x ;x ]⊤,
1 1 1 2
(5.3) z =M ·[z ;x ]⊤, ∀i∈[2;N −2],
i 1 i−1 i+1
w =M ·[z ;x ]⊤,
1 N−2 N
where the intermediate variables z , ∀j ∈ [1;N −2], belongs to Xˆ. Fig. 4 reports the runtimes required to
j i
construct both the N abstract subsystems and the abstract interconnection, as well as their composition.
5.2. Consensus-Driven Network of Logistic Systems. We consider a network consisting of N subsys-
tems, each characterized by state sets X =[0,32] and input sets U =[−2,2], where i∈[1;N]. Additionally,
i i
the subsystems share an internal input U =[0,32]. The dynamics governing each subsystem Ξ are defined as
i
follows:
x (k+1)=f (x (k),u (k),w (k))
i i i i i
(5.4)
=GLOG (x (k)+u (k)+0.1(x (k)−w(k))),
[a,b] i i i
whereGLOG (·)representsageneralizedlogisticfunctionover[a,b]⊆[0,32],producingoutputvalueswithin
[a,b]
the range [0,32]. Mathematically, this function is defined as:
32
GLOG (x):= .
[a,b] 1+e−0.2(x−b+ 2a)
The function GLOG (·) is characterized by its sigmoid shape and ensures that the output is bounded within
[a,b]
the specified range. The interconnected system must satisfy a persistent objective, ensuring it reaches andDATA-DRIVEN CONSTRUCTION OF FINITE ABSTRACTIONS FOR INTERCONNECTED SYSTEMS:A COMPOSITIONAL APPROAC1H5
Figure 4. Theruntimeinsecondsforsystemsin(5.1)andinterconnectionin(5.2)areshown
for varying N. The cumulative runtime is represented by the horizontal bar, segmented
into three colors: purple (left) represents abstracting and stacking of the abstraction BDD
representations for all subsystems, yellow (middle) denotes the time for approximating the
interconnection, and green (right) indicates composing the subsystems and interconnection
abstractions.
maintains a state within the consensus region defined by:
(cid:32)N (cid:33)
(cid:95) (cid:94)
(5.5) φ= (∥x −ϕ∥≤2.5) .
i
ϕ∈[0;31] i=1
This signifies that all agents have states x within a neighborhood of a common value ϕ. Once the consensus
i
region is attained, the value of ϕ may still change over time as the interconnected system evolves. If ϕ was
a known and fixed constant, achieving this objective would be trivially decomposable into N distinct tasks,
and a controller could be synthesized for each subsystem independently. However, because ϕ may vary and
is not predetermined, it becomes non-trivial to synthesize a controller for each subsystem Ξ individually,
i
particularly if the controllers only have access to the local state x . The reach and remain objective can be
i
succinctly expressed in a temporal logic formula as (cid:51)□φ [BK08].
Two inherent subsystem’s properties exhibit challenges in achieving (cid:51)□φ. Firstly, with fixed values of u =0
i
and w = 0, system (5.4) has an unstable equilibrium at x∗ = 16 and two stable equilibria at x∗ = 1.45
i i
and x∗ = 30.5. This bimodal behavior introduces difficulties, particularly, when the subsystems have initial
i
statesbothaboveandbelow16,leadingtodivergence. Secondly,theinteractionbetweenthesubsystemsadds16 DANIELAJELEYEANDMAJIDZAMANI
complexity. The concrete interconnection map is defined as the average state among all subsystems:
N
1 (cid:88)
(5.6) w = x ,
N i
i=1
where w ∈ [0,32], ∀[x ;...;x ] ∈
(cid:81)N
X . If u (k) = 0, then the term 0.1(x −w) acts to push the state x
1 N i=1 i i i i
away from the average, destabilizing the consensus region φ.
Here, we consider a network of 8 subsystems described by (5.4) and interconnected with (5.6). Hence, the
exogenous input w relies on 8 values (cf. Fig. 3 (top)), making the construction of the interconnection
abstraction in a monolithic way very difficult. To address this, we collect 100 and 20 data points (denoted
as N for the subsystems and N¯ for the interconnection) using the models in (5.4) and (5.6). Furthermore,
Ci I
we estimated the Lipschitz constants as L = L = 1.599 and L = 1 (cf. Remark 4.1). The abstract
xi wi M 8
sets Xˆ and Uˆ were generated using grid parameters η =η =0.5, while the abstract external input set for
subsysi tems was defined as Uˆ = [U ] . To construct x thi e intw erconnection abstraction Iˆ = (cid:0)(cid:81)8 Xˆ,Uˆ,Mˆ(cid:1) ,
i i 1 i=1 i
we solved (4.9) using N¯ sampled input-output data points obtained from (5.6). Upon obtaining M ∈ R8
I
picking σ = 4, we applied a decomposition of the form M := 4M·[1 1 ] and M := 2M·[1 1 1 1 ]
1 8 8 2 8 8 8 8
to introduce the following intermediate variables. For any [x ;...;x ]∈(cid:81)8 Xˆ, we define:
1 8 i=1 i
z =M ·[x ;x ;x ;x ]⊤ ∈[X ] ,
1 2 1 2 3 4 i 2
(5.7) z =M ·[x ;x ;x ;x ]⊤ ∈[X ] ,
2 2 5 6 7 8 i 2
w =M ·[z ;z ]⊤ ∈Uˆ.
1 1 2
Theabstractinterconnectedsystemhas1.406×1012 statesandtheconsensusregionφencompasses9.49×106
discrete states. The processes of abstracting and stacking of the abstraction BDD representations of the
subsystems took 15.28s, and constructing the interconnection abstraction took 3.89s. Then, we synthesized a
controller on the interconnected abstraction, with the objective of persistently maintaining the system within
the φ region. At each state xˆ ∈ (cid:81)8 Xˆ, the controller provides a set of permissible inputs C(xˆ) ⊆ Uˆ.
i=1 i
Ensuring uˆ(k) ∈ C(xˆ(k)) for all time steps guarantees satisfaction of the specification for the interconnected
system. As demonstrated, the controller effectively ensures the persistence of the interconnected system’s
trajectory within region φ, as depicted in Fig. 5. The controller’s domain encompasses 70.6×109 states. Fig.
5 illustrates two sets of trajectories corresponding to an inactive controller and an enforcing controller, which
respectivelyviolateandensuresatisfactionof(cid:51)□φ. InFig. 5, controlinputsuˆ(k)arerandomlyselectedfrom
C(xˆ(k)).
Appendix A. Data-Driven Estimation of Lipschitz Constant
Inthissection,weleveragetheresultspresentedin[WZ96]tointroducethefollowingalgorithmforestimating
the Lipschitz constants of the dynamics and the interconnection map. This is accomplished using a finite set
of data points collected from the system.
Through the implementation of Algorithm 5, the Lemma A.1, sourced from [WZ96], guarantees that the
estimated Lipschitz constant converges towards its actual value in the limit.
Lemma A.1. Consider a dt-CS Ξ with unknown transition function. By applying Algorithm 5, the estimated
Lipschitz constants, L and L , converges to their actual value if and only if δ gets arbitrarily small and P,L
x w
becomes very large.
Remark A.2. ItisimportanttonotethatwedonotconsideranyconfidenceboundforestimatingtheLipschitz
constants in our approach. Instead, we choose a very small value for δ and use large values for P and L. This
way, Algorithm 5 can give us a very accurate estimate for the Lipschitz constant. In addition, it is worth
mentioning that one can modify Algorithm 5 to estimate the Lipschitz constant L for the interconnection
M
map.DATA-DRIVEN CONSTRUCTION OF FINITE ABSTRACTIONS FOR INTERCONNECTED SYSTEMS:A COMPOSITIONAL APPROAC1H7
Figure 5. Thetopsub-figuredepictstwo8-dimensionaltrajectories,whichareillustratedas
twosetsofeightscalar-valuedtrajectories. Eachlinerepresentsatrajectoryx (k)fori∈[1;8].
i
Solid lines correspond to a controller enforcing (cid:51)□φ, while dashed lines represent an inactive
controller with u (k)=0 for all systems i and time steps k. Both sets of trajectories initiate
i
fromthesameinitialstatex[0]=[14.8;15.8;15.5;15.1;16.6;18.1;26.5;17.4],whichliesoutside
the consensus region φ and supports the bimodal property of (5.4). The bottom sub-figure
depicts the piecewise constant control inputs required to enforce (cid:51)□φ. The depiction is with
slight vertical and horizontal perturbations for visual clarity.18 DANIELAJELEYEANDMAJIDZAMANI
Algorithm 5 Estimation of Lipschitz constant for dt-CS
1: For a given input uˆ ∈U, select P,L∈N with points x l,x¯ l ∈Xˆ such that ∥x l−x¯′ l∥≤δ ∀l ∈[1;L] where
δ >0
2: for j ∈[1;P] do
3: for l∈[1;L] do
4: Simulate the dt-CS from initial states x l and x¯ l in one time-step to obtain x′ l and x¯′ l, respectively
5: Compute slope ∆ l :=∥x′ l−x¯′ l∥(cid:14) ∥x l−x¯ l∥
6: end for
7: Obtain the maximum slope ∆∗
j
:=max{∆ 1,...,∆ L}
8: Fit{∆∗,...,∆∗}intoaReverseWeibulldistribution[WZ96]toobtaintheparameterstermedlocation,
1 P
scale and shape
9: end for
10: The estimated Lipschitz constant L x(uˆ) is the obtained location parameter
Appendix B. Proof of Lemma 4.5
Proof. We establish the proof by contradiction. Suppose (4.4) does not hold, i.e., ∥ϑ (xˆ,uˆ,wˆ)∥ > L (uˆ).
1 x
Then by applying (4.3), it holds that ∀x′ ∈X, ∀xˆ∈Xˆ and given (uˆ,wˆ)∈Uˆ ×Uˆ with w ,w ∈Φ (wˆ),
1 2 ηw/2
∥f(x′,uˆ,w )−f(xˆ,uˆ,w )∥
∥ϑ (xˆ,uˆ,wˆ)∥>L (uˆ)≥ 1 2
1 x ∥x′−xˆ∥
1 ∥η ∥
− L (uˆ) w .
2 w ∥x′−xˆ∥
The latter inequality leads to
(B.1) ∥f(x′,uˆ,w )−f(xˆ,uˆ,w )∥≤∥ϑ ∥∥x′−xˆ∥+L (uˆ)∥η ∥.
1 2 1 w w
By employing (4.1), (4.2), and then applying the infinity norm on the resulting inequality, one obtains
(B.2) ∥f(x′,uˆ,w )−f(xˆ,uˆ,w )∥≤∥ϑ ∥∥x′−xˆ∥+∥ϑ ∥.
1 2 1 2
Bysubtracting(B.1)from(B.2),andwithoutlossofgeneralitysupposethatL (uˆ)∥η ∥>1,onehas1≤∥ϑ ∥,
w w 2
which does not hold for every ϑ ∈Rdim(X) and, thus, concludes the proof. □
2 ≥0
References
[ALZ23] DanielAjeleye,AbolfazlLavaei,andMajidZamani.Data-drivencontrollersynthesisviafiniteabstractionswithformal
guarantees.IEEE Control Systems Letters,7:3453–3458,2023.
[AMP22] DanielAjedamolaAjeleye,TommasoMasciulli,andGiordanoPola.Outputfeedbackcontrolofnondeterministicfinite–
state systems with reach–avoid specifications. In 2022 30th Mediterranean Conference on Control and Automation
(MED),pages1012–1017.IEEE,2022.
[AZ24] DanielAjeleyeandMajidZamani.Data-drivencontrollersynthesisviaco-bu¨chibarriercertificateswithformalguar-
antees.IEEE Control Systems Letters,2024.
[BK08] ChristelBaierandJoost-PieterKatoen.Principles of model checking.MITpress,2008.
[Bry86] Randal E Bryant. Graph-based algorithms for boolean function manipulation. Computers, IEEE Transactions on,
100(8):677–691,1986.
[CPMJ22] RudiCoppola,AndreaPeruffo,andManuelMazoJr.Data-drivenabstractionsforverificationofdeterministicsystems.
arXiv preprint arXiv:2211.01793,2022.
[FQMV17] ChuchuFan,BolunQi,SayanMitra,andMaheshViswanathan.DryVR:Data-drivenverificationandcompositional
reasoning for automotive systems. In International Conference on Computer Aided Verification, pages 441–461.
Springer,2017.
[FS18] SalarFattahiandSomayehSojoudi.Data-drivensparsesystemidentification.In2018 56thAnnual Allerton Confer-
ence on Communication, Control, and Computing (Allerton),pages462–469.IEEE,2018.
[GKA17] FelixGruber,EricSKim,andMuratArcak.Sparsity-awarefiniteabstraction.In2017IEEE56thAnnualConference
on Decision and Control (CDC),pages2366–2371.IEEE,2017.DATA-DRIVEN CONSTRUCTION OF FINITE ABSTRACTIONS FOR INTERCONNECTED SYSTEMS:A COMPOSITIONAL APPROAC1H9
[HAT17] OmarHussien,AaronAmes,andPauloTabuada.Abstractingpartiallyfeedbacklinearizablesystemscompositionally.
IEEE Control Systems Letters,1(2):227–232,2017.
[HW13] Zhong-Sheng Hou and Zhuo Wang. From model-based control to data-driven control: Survey, classification and
perspective.Information Sciences,235:3–35,2013.
[KAZ18] EricSKim,MuratArcak,andMajidZamani.Constructingcontrolsystemabstractionsfrommodularcomponents.In
Proceedingsofthe21stInternationalConferenceonHybridSystems: ComputationandControl(partofCPSWeek),
pages137–146,2018.
[KMS+22] MiladKazemi,RupakMajumdar,MahmoudSalamati,SadeghSoudjani,andBenWooding.Data-drivenabstraction-
basedcontrolsynthesis.arXiv preprint arXiv:2206.08069,2022.
[LF22] AbolfazlLavaeiandEmilioFrazzoli.Data-drivensynthesisofsymbolicabstractionswithguaranteedconfidence.IEEE
Control Systems Letters,7:253–258,2022.
[Lju98] LennartLjung.Systemidentification.InSignal analysis and prediction,pages163–173.Springer,1998.
[MGF21] Anas Makdesi, Antoine Girard, and Laurent Fribourg. Efficient data-driven abstraction of monotone systems with
disturbances.IFAC-PapersOnLine,54(5):49–54,2021.
[MGW17] Pierre-Jean Meyer, Antoine Girard, and Emmanuel Witrant. Compositional abstraction and safety synthesis using
overlappingsymbolicmodels.IEEE Transactions on Automatic Control,63(6):1835–1841,2017.
[RWR16] GuntherReissig,AlexanderWeber,andMatthiasRungger.Feedbackrefinementrelationsforthesynthesisofsymbolic
controllers.IEEE Transactions on Automatic Control,62(4):1781–1796,2016.
[RZ16] MatthiasRunggerandMajidZamani.SCOTS:Atoolforthesynthesisofsymboliccontrollers.InProceedingsofthe
19th international conference on hybrid systems: Computation and control,pages99–104,2016.
[SLSZ24] AliSalamati,AbolfazlLavaei,SadeghSoudjani,andMajidZamani.Data-drivenverificationandsynthesisofstochastic
systemsviabarriercertificates.Automatica,159:111323,2024.
[Som97] FabioSomenzi.CUDD:CUdecisiondiagrampackage.Public Software, University of Colorado,1997.
[Tab09] PauloTabuada.Verificationandcontrolofhybridsystems: asymbolicapproach.SpringerScience&BusinessMedia,
2009.
[WZ96] GRWoodandBPZhang.Estimationofthelipschitzconstantofafunction.JournalofGlobalOptimization,8:91–103,
1996.
[XZEL20] BaiXue,MiaomiaoZhang,ArvindEaswaran,andQinLi.PACmodelcheckingofblack-boxcontinuous-timedynamical
systems.IEEETransactionsonComputer-AidedDesignofIntegratedCircuitsandSystems,39(11):3944–3955,2020.
Department of Computer Science, University of Colorado Boulder, USA
Email address: {daniel.ajeleye, majid.zamani}@colorado.edu
URL:https://www.hyconsys.com/members/dajeleye/
URL:https://www.hyconsys.com/members/mzamani/