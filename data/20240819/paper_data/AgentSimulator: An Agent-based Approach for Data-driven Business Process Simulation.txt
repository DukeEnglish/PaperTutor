AgentSimulator: An Agent-based Approach for
Data-driven Business Process Simulation
Lukas Kirchdorfer∗†, Robert Blu¨mel∗, Timotheus Kampik∗, Han van der Aa‡ and Heiner Stuckenschmidt†
∗SAP Signavio, Walldorf, Germany
Emails: lukas.kirchdorfer@sap.com, robert.bluemel@sap.com, timotheus.kampik@sap.com
†University of Mannheim, Mannheim, Germany
Email: heiner.stuckenschmidt@uni-mannheim.de
‡University of Vienna, Vienna, Austria
Email: han.van.der.aa@univie.ac.at
Abstract—Business process simulation (BPS) is a versatile In this paper, we argue that there are settings in which
technique for estimating process performance across various such control-flow-first simulation models cannot provide a
scenarios. Traditionally, BPS approaches employ a control-flow-
faithfulrepresentationofthedynamicsofreal-worldprocesses,
first perspective by enriching a process model with simulation
leadingtosimulationinaccuracies.Thisparticularlyappliesto
parameters. Although such approaches can mimic the behavior
of centrally orchestrated processes, such as those supported by processesinvolvingdistinctresourcebehaviorordecentralized
workflow systems, current control-flow-first approaches cannot decision-making. Although certain processes are indeed cen-
faithfully capture the dynamics of real-world processes that trally orchestrated, such as those supported by workflow sys-
involve distinct resource behavior and decentralized decision-
tems[1],otherprocessesprovidehigheroperationalflexibility
making.Recognizingthisissue,thispaperintroducesAgentSimu-
totheactorsinvolved.Insuchsettings,eachactorinaprocess
lator,aresource-firstBPSapproachthatdiscoversamulti-agent
system from an event log, modeling distinct resource behaviors performs their part from their own perspective and, to some
andinteractionpatternstosimulatetheunderlyingprocess.Our extent, in their own manner, i.e., they receive a case from a
experiments show that AgentSimulator achieves state-of-the-art co-worker, conduct one or more tasks they deem necessary,
simulation accuracy with significantly lower computation times
and pass on the case to the next individual or system. This
than existing approaches while providing high interpretability
can result in processes where specific traits or preferences of
andadaptabilitytodifferenttypesofprocess-executionscenarios.
actorscaninfluenceacase’sexecution.Suchcharacteristicsare
Index Terms—Business Process Simulation, Multi-Agent Sys- difficult for existing control-flow-first approaches to capture.
tem, Process Mining Therefore, we use this paper to propose AgentSimulator,
a resource-first approach for data-driven process simulation.
I. INTRODUCTION
By discovering a multi-agent system (MAS) from an event
Business process simulation (BPS) is a widely used tech- log, AgentSimulator can simulate the execution of a process
nique to estimate the impact of changes to a process with through autonomous and interacting agents, corresponding to
respect to key performance indicators, such as cycle time, real-world actors and systems. This allows AgentSimulator to
resource utilization, or waiting time for a given activity—a achieve various benefits in comparison to existing approaches
practice known as counterfactual reasoning or “what-if” anal- for data-driven process simulation:
ysis [1]. BPS has the potential to drastically reduce the risks • our approach provides full flexibility over the behavior
of process change and facilitate process improvement with of individual resources involved in a process, allowing
tangible outcomes, as decision makers can compare process to capture differences in terms of control-flow behavior,
designs without already having to implement the changes. interaction preferences, and capabilities;
Nevertheless, the effectiveness of BPS relies heavily on the • agent-based systems are highly interpretable and allow
availabilityofasimulationmodelthatpreciselymirrorsthedy- for a high degree of adaptability, which is crucial to per-
namics of a given process across dimensions such as control- forming what-if analyses, and thus provides a substantial
flow,time,andresourcebehavior.Manuallyconstructingthese advantage over black-box deep learning models;
simulation models is time-consuming and error-prone due to • our approach requires significantly lower run times than
several pitfalls [2]. Therefore, various approaches have been previous approaches, making it more feasible to run
developed for the automated discovery of process simulation a large number of simulations, which is necessary to
models based on historical execution data contained in event achieve stable and confident results given the stochastic
logs[3]–[7].Mostcommonly,suchdata-drivensimulationap- nature of simulation models;
proachesdiscoveraprocessmodel—capturingthecontrolflow • andfinally,ourapproachyieldsstate-of-the-artsimulation
of an entire process—and subsequently augment this model accuracy across a variety of event logs.
with simulation parameters, such as arrival rates, resources, The remainder starts with a motivating scenario (Section II),
and processing times. followed by the presentation of the AgentSimulator approach
4202
guA
61
]AM.sc[
1v17580.8042:viXraitself (Section III). Then, Section IV reports on evaluation
experiments,highlightingthebenefitsofourapproach.Finally,
SectionVdiscussesrelatedwork,beforeSectionVIconcludes
the paper.
II. MOTIVATION
This section illustrates the benefits of shifting simulation
modelsfromacontrol-flow-firsttoaresource-firstperspective.
Forthisillustration,weconsiderasimplifiedcreditapplica-
tion process, for which a schematic visualization is shown in Fig. 1: Sketch of the credit application process.
Figure 1. As depicted, the process starts when an application
is received by the system, after which the applicant’s credit
(e.g., Steve) needs to go through an additional verifica-
history and income sources need to be checked by a clerk
tion step performed by a Senior Clerk. Capturing such
(in any order). Once both checks have been completed, the
actor-dependent behavior is difficult and often generally
application is passed on to a credit officer, who assesses
omittedfromcontrol-flow-firstsimulationmodels,despite
the application and notifies the applicant of the outcome. As
it having a considerable impact on process execution.
shown, there are three clerks (Steve, Oliver, and Angela) and
twocreditofficers(MariaandPatrick)involvedintheprocess. • Interaction patterns. Finally, owing to a lack of central
orchestration, there may be specific interaction patterns
Even for such a simple scenario, we may observe various
among actors. For example, we may observe that Steve
waysinwhichtheinvolvementofspecificactorsinacasecan
always collaborates with Oliver, since they both work
influence its execution:
in Mannheim, while he has no contact with Angela in
• Process performance. The execution time of an activity
Hamburg. Such specific patterns influence the workload
may depend on the employee who performs it. For
of individual resources, e.g., leading to an imbalance
example, Steve (a less experienced, Junior Clerk) might
between Oliver and Angela, which is missed by general
need 45 minutes to check the credit history and the
simulationmodels.Furthermore,asdescribedabove,spe-
income sources, respectively. For the same activities,
cific interaction patterns may lead to additional delays
the Senior Clerks Oliver and Angela only need 15 to
when the availability of individual resources differs.
20 minutes. Considering these performance differences
All of the above factors influence the execution of cases
between resources is critical for accurate simulation, as
in a process. Therefore, process simulation models should
has been recently demonstrated [8].
reflect these as faithfully as possible in order to appropriately
• Resource availability. Employees involved in a process mimic the dynamics of a real-world process. The former
may have different availabilities, owing to factors such
two aspects have already been recognized and captured by
as part-time work and other duties. Such considerations
control-flow-first models [8]. However, especially the latter
areparticularlyrelevantindecentralizedprocesses,where
two can be much more naturally incorporated by an agent-
casesmaybehandedoverdirectlyfromemployeetoem-
based simulation model, where the behavior of each resource
ployee,ratherthanbyacentralworkflowsystemthatcan
isexplicitlycaptured.ThisisachievedbyourAgentSimulator
assignacasetothenextavailableperson.Forexample,if
approach, described next.
Angela hands over an application specifically to Patrick,
rather than to the next available credit officer, this can III. OURAPPROACH:AGENTSIMULATOR
lead to considerable delays in the case’s execution if This section introduces AgentSimulator, our data-driven
Patrick is not available for the next working days. Such agent-based business process simulation approach, with a
irregularities should be reflected in a simulation model, high-level overview in Figure 2. To adopt a resource-first
calling for individual resource calendars, as again was perspective, AgentSimulator models agents in a MAS (see
recently demonstrated to positively impact accuracy [8]. SectionIII-A),whichis(alongwithgeneralsimulationparam-
• Control-flowbehavior.Control-flow-firstsimulationmod- eters)discoveredfromaneventloginthediscoveryphase(see
els impose the assumption that the sequence of activities SectionIII-B).FollowingtheMASdiscovery,wecansimulate
performed for a given case is independent of the actors the process and generate a new event log (see Section III-C).
involved in it. However, there can be various reasons We detail our approach for both discovery and simulation,
why this is not the case. In our scenario, for example, alsodiscussingalternativedesignchoicesfordifferentprocess
we may observe that Angela always checks the credit types, highlighting AgentSimulator’s adaptability.
historyfirst,beforecheckingtheincomesources,whereas
A. Definitions
other actors may alternate these orders. Furthermore,
there may even be actor-specific rules that influence the Inthissection,wedefineeventlogs,whichprovidetheinput
possible sequences of a case. For example, it may be of our approach (and its simulated output), before providing
necessary that any application handled by a Junior Clerk thedefinitionofagentsandaMASthatourapproachemploys.AgentSimulator
Phase 1: Discovery Phase 2: Simulation
Handle all running cases
Agent definition
Type Schedule
Determine
Determine Start activity
Capabilities Behavior responsible
next activity execution
Set of running agent
cases
Input General parameters Simulated
event log L event log L’
Inter-arrival distribution
Check for
new cases
Set of extraneous delays
Fig. 2: Overview of the end-to-end AgentSimulator approach.
Input. AgentSimulator takes as input an event log L, which theagentisavailabletoperformactivities.Thesimulation
we define as a finite multi-set of traces. A trace σ ∈ L is a needs to capture the distinct availabilities of agents (e.g.,
finite sequence of events, ⟨e ,...,e ⟩, recording the execution full-time vs. part-time) to faithfully reflect the temporal
1 n
of activities performed for a single case in an organizational dimension of the process.
process.Eachevente isatuple(act,ts ,ts ,res),with 3) c refers to capabilities of an agent, denoted as a tuple
i start end
act as the activity to which it corresponds, ts
start
and ts end, c=(ALLOC,PT), where:
respectively, as the start and end timestamps of the activity’s • ALLOC ⊆ ACT L is the set of activities that a can
execution, and res as the resource that executed the activity. execute, i.e., that can be allocated to agent a.
Notethatwefollow[8]byrepresentingeacheventwithastart • PT refers to a set of PDFs, where each f pt(act) ∈
andendtimestamp,whichisrequiredinsimulationsettingsto PT captures a distribution over processing times pt∈
consider activity durations, and ordering the events in a trace [0,∞) for an activity act∈ ALLOC. Defining PT per
based on their start timestamp. agent allows us to differentiate process performance
In the remainder, we commonly use dot notation to refer across resources.
to components of tuples, e.g., using e i.act as a shorthand to 4) breferstothebehaviorofanagent,capturinghowagent
refer to the activity of an event e i, whereas we use ACT L a handsa caseoverto continueits executionafterfinish-
and RES L to, respectively, refer to the sets of activities and inganactivity.Whatbexactlyentailsdependsonthekind
resources contained in the traces of event log L. of process being simulated. In a centrally orchestrated
Multi-agent system. The notion of an agent is a fundamental process,determiningthenextactivityishandledcentrally,
abstraction in Artificial Intelligence (AI) [9]. Agents perceive whereas in a more autonomous process, agents directly
their environment (including other agents) to reason about the hand over cases to others. Therefore, we provide further
perceptions and decide on an action, which is then executed details and exact definitions in the following sections.
against the environment. In a multi-agent system (MAS),
B. Phase 1: MAS Discovery
agents can collaborate to achieve joint goals. In our work,
In this section, we describe how AgentSimulator discovers
we define a MAS and an agent as follows:
the agents A and general simulation parameters p from an
Definition 1 (Multi-agent system). Wedefine aMASforour
event log L to define the MAS m. In the realm of business
AgentSimulator as a tuple m = (A,p). Here, A corresponds
processes, our generic definition of an agent offers numerous
to the set of agents used to simulate a process, whereas p is
implementationpossibilities.Thus,besidesdescribingourdis-
a tuple of general simulation parameters, reflecting aspects of
covery approach, we also discuss alternatives. The flexibility
the process’s environment. Here, p consists of a case inter-
of agent systems is a key advantage of our AgentSimulator,
arrival distribution and a set of probability density functions
enabling adaptation to diverse collaborative work dynamics.
(PDFs)overextraneousdelays(moredetailsinSectionIII-B).
Agent instantiation. In business process environments, re-
Definition 2 (Agent).Anagentinabusinessprocessenviron-
sources are the active entities performing actions. Therefore,
ment is an autonomous entity representing a real-world actor
we instantiate one agent a ∈ A for each resource res ∈
or system. We define an agent a∈A that acts in the MAS m
RES . For our motivating example, we thus instantiate six
L
as a tuple, denoted a=(t,s,c,b), where:
agents (five human actors and System). If certain events lack
1) t refers to the agent’s type. Agent types are used to resourceinformation,weadditionallygenerateadummyagent
indicate agents with similar characteristics, e.g., in terms for each distinct activity that lacks such information. We
of the activities they can perform. We use T to refer to noticed that events without resource information often refer
the set of types in A to either instantaneous activities or system resources. First,
2) s refers to a schedule (a set of intervals) during which explicitly modeling these as agents ensures that any activitycanbeassociatedwithatleastoneagent,whichisrequiredfor pendentofspecificagents.Weachievethisbylearningactivity
thesimulation.Second,itallowsdiscoveringdistinctbehaviors transition probabilities at the log level.
for these agents to simulate their activities appropriately, e.g., Specifically,wecomputethefrequentistprobabilityoftran-
to consider that performing instantaneous activities does not sitioning to an activity given the activity prefix of an ongoing
require waiting for a corresponding agent. case, where a prefix σ = ⟨e ,e ,...,e ⟩ is the sequence
prefix 1 2 k
Agent type. To assign a type to each agent, we use the of events from the beginning of σ up to event e k, with σ pa rc et
fix
algorithm from [10] that clusters agents into types based on being the corresponding activity sequence. This transition
the similarity of their executed activities. This algorithm is probability P(act|σact ) is computed by determining how
prefix
also used in [4] to group simulated resources. often each possible activity prefix σact in log L is followed
prefix
Schedule. We discover a schedule for each agent a ∈ A by each activity act ∈ ACT L. This is achieved by dividing
the number of times the specific transition from σact to act
by using the same algorithm as proposed in [8]. Note that prefix
happens by the number of times the activity prefix occurs in
discovering the schedule per agent type is also a possible
thelog.Notethat,incaseanactivityprefixσact hasnotbeen
design choice that our approach allows for. Furthermore, the prefix
observed in the log, we iteratively remove the first activity of
more recent approach to discovering probabilistic instead of
theprefixuntilwereachasubsequencethathasbeenobserved
crisp calendars [11] could also be integrated.
in L, e.g., if we have not seen ⟨a,b,c,d⟩, we next check for
Capabilities. The capabilities a.c of an agent a consist of a
occurrences of ⟨b,c,d⟩. To transition to the end of a case, we
set of activities and a set of PDFs over processing times.
introduceaplaceholderendeventfollowingthelastactivityin
Set of activities. We discover the set of activities a.c.ALLOC
each case. Furthermore, without loss of generality, transition
that agent a can execute by checking which activities from
probabilitiesmayalsobecomputedusingothermethods,such
ACT (the resource corresponding to) a has performed in L.
L as through next-activity prediction techniques [12], [13].
Processing times. The set of PDFs over processing times
Autonomous handovers. As argued in Section II, many pro-
a.c.PT contains one distribution for each activity that re-
cesses provide higher flexibility and decision power to the
flects how long agent a requires to execute each of these
agents involved. Therefore, our AgentSimulator can also be
activities. Following [4], we fit various distributions to the
used to discover decentralized MASs in which agents them-
activitydurations.Subsequently,weselectthedistributionwith
selves determine the next activity for a process instance and
the lowest error measured by the Wasserstein distance. The
which agent should perform it. In this case, activity transition
set of distributions includes the following ones: Exponential,
probabilities need to be learned locally instead of globally.
Gamma, Normal, Uniform, Log-Normal, and a fixed value
The locality can either be given by the individual agent or
to capture activities with fixed durations. However, instead
the agent type, i.e., activity and agent transition probabilities
of discovering one PDF per activity, we discover one PDF
can either be unique for each agent or generalized across all
for each combination of agent and activity, denoted as a
agents of the same type t ∈ T. The latter can make sense if
(cid:83)
mapping ACT ×A→PTT, where PTT = a.c.PT.
L a∈A only limited data is available per agent.
This ensures more realistic activity processing times, as, for
To compute transition probabilities from a given activity
example, a junior employee typically requires more time to prefix σact to an activity act∈ACT individually for each
perform the same activity than a senior employee. prefix L
agent a ∈ A, we can extend the computation described for
The properties type, schedule, and capabilities are aspects
orchestrated handovers and make it agent-depending. Thus,
commonly considered in non-agent-based simulation ap- P(act|σact ,a)iscomputedbycountingforeachagenta∈A
prefix
proaches as well, which is why we largely follow existing how often there happened to be a transition from σact to
prefix
works for their discovery. However, the distinctive agent
act with the last activity of the prefix being performed by a,
behaviorsserveasthemainingredientofourAgentSimulator. divided by the total number of occurrences of σact with its
prefix
Behavior. The behavior of an agent a.b describes its activity lastactivitybeingexecutedbya.ConsiderAngelainFigure1
transitionandagenthandoverpatterns.Therefore,thebehavior who,giventheprefixapplicationreceived,alwaysfirstchecks
of an agent determines (i) which activity is the next in the credit history before the income sources, whereas Steve
an ongoing case and (ii) who performs this activity. The and Oliver have no fixed order as they sometimes collaborate.
behavior can be learned in many different ways, leading to In addition to activity transitions, the autonomous handover
numerous design options for the architecture of the MAS. architecture also accounts for distinct interaction patterns
Below,weoutlinetwodistinctbehaviordiscoveryapproaches: among agents. Therefore, we compute the frequentist proba-
one suitable for capturing processes involving orchestrated bility of handing over a case from one agent to another agent.
handovers and one for processes with autonomous handovers. TheconditionalprobabilityP(a |a )ofhandingoveratask
i j
Orchestrated handovers. We use this first configuration to from agent a to a with i,j ∈ {1,...,|A|} is computed by
j i
mimic processes that are centrally orchestrated, such as those counting all occurrences where one activity is performed by
supported by a workflow or business process management a and the following activity is executed by a , divided by
j i
system [1]. In such processes, the execution of a case is the total number of activities performed by a . Following
j
centrally guided. Therefore, this kind of architecture only our example, this results in P(Maria|Angela) = 0.0 and
requiresdiscoveringglobalexecutionpatterns,whichareinde- P(Patrick|Angela)=1.0.There exist several other approaches to compute the han- (Line 7) either globally, modeling orchestrated handovers
dover probabilities. For instance, including the dependence of based on the current activity prefix (i.e., a global entity
thespecificactivityintheconditionalprobabilityP(a |a ,act) orchestrates the control-flow execution), or locally, modeling
i j
could make the interaction patterns even more precise. Com- autonomous handovers through the last active agent in the
paring different approaches for determining the interaction case. Note that a case’s first activity is always determined
patterns can be tackled in future work. globally as there is no prior agent.
The combination of P(act|σact ,a) and P(a |a ) defines b) Determine the responsible agent. After a new activity was
prefix i j
agent behavior in an autonomous handover architecture and determined for the given case, it requires an agent for the
captures agent-specifics that influence the progress of a case. execution. Based on the set of activities that an agent can
General simulation parameters. After having instantiated execute a.c.ALLOC, we identify possibly responsible agents
the set of agents A, we discover some general simulation p a (Line 11). To determine the specific agent (Line 12), we
parameters m.p = (f ,D), where f is a PDF of case again differentiate between the two architectures:
iat iat
inter-arrivaltimesandDasetofPDFsoverextraneousdelays. • Orchestratedhandovers.InaMASwithorchestratedhan-
Theseparametersarenotspecifictoanagent-basedsimulation dovers, there are no agent interaction patterns modeled.
model but are also used in other BPS approaches [4]. Thus, having determined the set of possibly responsible
Inter-arrival times. Inter-arrival times denote the duration agents, we order this set based on the agent availabilities
between the start of two consecutive cases. The PDF over and iteratively ask these agents to perform the next ac-
inter-arrival times is used during simulation to sample new tivity until one agent is available to execute it (which we
cases. For discovering the PDF over case inter-arrival times call iterative task allocation). Thus, the first agent to be
f , we follow [4] who fit different distributions to the inter- askedistheonethatoffers(basedonitsschedulea.sand
iat
arrival times and take the one with the smallest error. its current occupation) the earliest availability. An agent
Extraneous delays. Because different instances of a process refuses to accept the activity if its estimated duration
typically compete for limited resources and because resources (based on f pt(act) ∈ a.c.PT) collides with occupied or
do not always start an activity as soon as it can possibly be non-workingtimeslots.Ifnoneofthepossibleagentsare
performed,processesareaffectedbywaitingtimes.Extraneous available, the case cannot be processed for now and will
delays are waiting times that are not caused by resource be checked again in the next simulation step. Thus, the
contention or unavailability (e.g., a resource waits for the case receives waiting time due to contention (Line 14).
customer to return a phone call). They need to be modeled • Autonomoushandovers.InaMASwithautonomoushan-
explicitly.Followingthealgorithmin[14],wediscoveraPDF dovers,weusethecomputedagenthandoverprobabilities
over extraneous delays for each activity, resulting in a set of P(a i|a j) to determine the next agent. There are two
extraneous delay distributions D. designchoicesfortheirusage:(i)iterativetaskallocation
and (ii) direct task assignment.
C. Phase 2: Simulation
(i) Using iterative task allocation, we simulate (just as in
This section details how the AgentSimulator approach uses the orchestrated handovers) that agent a iteratively asks
j
thediscoveredMASmtosimulateaneventlogL′,illustrated other agents to take the activity. However, the difference
by the pseudo-code in Algorithm 1. The simulation proceeds is that here the order of to-be-asked agents is determined
in discrete steps, each representing a time tick. At each step, by the agent handover probabilities that are transformed
we check if new cases arrive and for each running case in the into a ranking, i.e., agent a is asked first if it has the
i
system, we verify if it is waiting to be processed (e.g., due highest handover probability from a .
j
to completion of the previous activity) to instantiate the next (ii) Using direct task assignment (not represented in
activity. The simulation step ends after all cases have been Algorithm 1), current agent a does not ask agents until
j
checked. In more detail, one simulation step looks as follows: oneisavailablebutassignsthetasktoanagentwhothen
1)Checkfornewcases.Basedonthediscoveredinter-arrival startsexecutingitassoonasitfindsthetime.Thiscanbe
distributionp.f iat,wefirstcheckifanewcasearrives(Line3). acommonagentinteractionpatterninreal-lifeprocesses,
Iftherearemultiplecasesinthesystem,theirprocessingorder for instance, if an employee forwards a case via e-mail
is determined in a first-in-first-out manner. Note that when to a colleague. For this direct assignment, we sample the
evaluating against a test log, we follow the convention of agent based on the agent handover probabilities.
Simod [4] and only simulate as many case arrivals as there Notethatacase’sfirstagentisalwaysdeterminedasdescribed
are cases to be simulated. However, for regular simulations, for orchestrated handovers.
we keep on letting cases arrive until we finish the simulation c) Start activity execution. If an agent could be identified, it
to avoid a cool-down phase, which is more realistic. beginsexecutingtheassignedactivity,withtheendtimestamp
2) Handle all running cases. The cases are processed one- being determined by sampling from the agent-specific activity
by-one (Line 4) until all cases have been addressed: durationdistributionf (act)∈a.c.PT andpotentiallyadding
pt
a) Determine next activity. First, we check if the given case extraneous delays using f (act)∈p.D (Line 16).
d
σ iswaitingtobeprocessed(Line5).Ifso,aneweventeis After each case is processed, a simulation step is completed.
prefix
createdwithitscorrespondingactivity e.actbeingdetermined A case exits the system once its final activity is executedAlgorithm 1 Simulation original Simod. DeepGenerator (DGEN) [12] is a pure Deep
Input:A:setofagents;n:numberofto-besimulatedcases Learning (DL) approach, and DeepSimulator (DSIM) [6] is a
Input:fiat,D:generalsimulationparameters
hybrid of DDPS and DL (more details in Section V).
1: Σ←{},L′←{} ▷init.setofrunningtracesΣandoutputlogL′
2: whilelen(L′)≤ndo Data split.WefollowevaluationsofexistingBPSapproaches
3: Σ←check for new cases(fiat,Σ,evaluation=False) [5], [6], [12] and perform a temporal hold-out split, excluding
4: forσ prefix inΣdo all cases that span the separation time between the train set
5: ifis waiting(σ prefix)then
6: e←() (first 80% of cases) and the test set (last 20% of cases).
7: e.act←get next activity(σ prefix) Hyperparameters. AgentSim has two automatically deter-
8: p a←{}
mined hyperparameters: the architecture (orchestrated or au-
9: forainAdo
10: ife.actina.c.ALLOCthen tonomous handovers) and whether to consider extraneous
11: p a←add to potential agents(a) delays, resulting in 4 possible configurations. We treat the
12: e.a←get agent(p a) latter as a hyperparameter because we noticed considerable
13: ife.a=Nonethen
differences regarding the benefit of considering extraneous
14: is waiting(σ prefix)←True
15: else delaysbetweendifferenteventlogs.Wedeterminebothhyper-
16: e.tsstart,e.ts end←execute act(e,D) parameters by initially simulating the last 20% of the training
17: σ prefix←add to prefix(e)
set for each of the 4 possible configurations and checking
18: ife.act=endthen
19: L′,Σ←exit and add to log(σ prefix) which simulation most closely resembles the training subset
in terms of cycle time. To ensure a fair comparison, we use
TABLE I: Description of log properties. the same option regarding extraneous delays for Simod.
Metrics. To evaluate and compare the different simulation
Log Type#Traces#Events#Activities#Resources#Agents
approaches, we use recently proposed metrics that are de-
LoanApplication syn 1000 7492 12 19 19 signedtoevaluatesimulationmodelsacrossthreedimensions:
P2P syn 608 9119 21 27 27
control-flow, time, and congestion, thus, providing a holistic
CVS syn 10000 103906 15 6 8
Confidential1000 syn 1000 38160 42 14 26 perspective [15]. All metrics compute the distance between
Confidential2000 syn 2000 77418 42 14 26 the simulated and test log, where a lower value indicates
ACR real 954 6870 18 432 432
a better result. To measure the control-flow, we use the N-
Production real 225 4503 24 41 41
BPI12W real 8616 59302 6 52 56 Gram Distance (NGD) that computes the difference in the
BPI17W real 30276 240854 8 136 136 frequencies of the n-grams observed in the event logs. To
measure the temporal performance of the simulation, we
use the Absolute Event Distribution (AED), the Circadian
(Line 19). The entire simulation concludes when the specified
EventDistribution(CED),andtheRelativeEventDistribution
number of cases has been processed and finished. The output
(RED). To measure the capability of a model to represent
of the simulation is an event log L′, where each event is a
congestion, we use the Cycle Time Distribution (CTD). We
tuple e=(act,ts ,ts ,a).
start end do not measure the Case Arrival Rate as we apply the same
casearrivalmethodasSimod,thus,wefocusonmetricswhere
IV. EXPERIMENTSANDRESULTS
AgentSim differs from other approaches.
This section presents the experiments used to evaluate
the performance of AgentSimulator. Table I summarizes the
B. Results
characteristics of the 9 publicly available event logs used in
ourexperiments,whicharecommonlyusedinBPSevaluations Overallresults.TableIIsummarizestheresultsforthe9event
[5], [6], [15] as they contain both start and end timestamps. logs,showingtheaveragemetricsfrom10simulationrunsfor
Ourimplementation,theeventlogs(withtrain-testsplits),and eachlog.Thebestvalueperlogandmetricismarkedinbold,
additional results are available through our public repository1. the second-best is underlined. Generally, no single approach
consistently outperforms the others across all datasets and
A. Experimental Setup metrics as also observed in previous BPS works [5], [6].
However, AgentSim stands out by most frequently achieving
Implementation. We implemented our approach in Python
using the agent-based modeling framework mesa [16]. the best performance within each metric across the 9 logs.
When looking more closely at the 3 dimensions captured by
Benchmark approaches. We empirically compare our
the metrics, we can obtain the following main insights:
AgentSimulator(AgentSim)againstthreecommondata-driven
BPS approaches. We adopt the state-of-the-art Data-driven Control-flow. Achieving the best NGD (N-gram distance) in
ProcessSimulation(DDPS)approachfrom[8],whichwerefer 4 out of 9 logs and considerably outperforming Simod and
to as Simod. It combines the original Simod [4] with the DSIM, the results indicate that our resource-first AgentSim
Prosimos simulator, which considers differentiated resource approach, which is independent of an underlying process
availabilityandperformanceandwasshowntooutperformthe model enhances the accuracy of the control-flow dimension
comparedtocontrol-flow-firstapproachessuchasSimod.This
1https://github.com/lukaskirchdorfer/AgentSimulator is particularly evident when analyzing the two real-life BPITABLE II: Comparison of simulation approaches. Train AgentSimulator Simod 1.0
0.8
Metrics
Log Method NGD AED CED RED CTD 0.6
0.4
Simod 0.15 13.55 0.40 9.22 20.42
DGEN 0.21 212.27 13.40 5.26 9.38 0.2
DSIM n/a n/a n/a n/a n/a
0.0
AgentSim 0.07 2.78 0.21 1.34 1.49 To Resource
Fig. 3: Resource interactions for the BPI12W log.
Simod 0.42 1044.25 2.21 840.19 677.05
DGEN 0.20 1481.46 2.55 828.09 670.05
DSIM 0.22 1310.03 1.15 722.33 566.63
AgentSim 0.25 1161.32 1.02 658.61 525.15
Here,Simod’ssimulatedlogsexhibitsignificantlylongercycle
Simod 0.44 52.95 0.44 39.43 54.59
timescomparedtoreality,primarilyduetoresourcecontention
DGEN 0.21 310.39 11.69 176.65 294.21
DSIM 0.20 36.23 8.98 19.74 52.43 and the consequent waiting times. AgentSim mitigates this
AgentSim 0.12 89.31 7.48 81.76 101.49 issue by recognizing that some agents do not require waiting
Simod 0.25 344.48 3.01 468.81 804.07 time, such as agents performing instantaneous activities.
DGEN 0.58 462.84 18.93 8.11 13.92
Impact of handover configuration. Simulating the same
DSIM 0.20 246.41 2.28 5.34 7.29
AgentSim 0.25 127.01 1.68 16.84 26.10 process using the two different handover configurations (cen-
trally orchestrated versus autonomous) reveals considerable
Simod 0.24 820.45 2.96 952.37 1614.91
DGEN 0.16 857.68 18.09 4.58 8.12 differences in results for some logs (full results for both
DSIM 0.18 591.13 2.84 1.7 2.26 options are in our repository). Overall, our automated method
AgentSim 0.26 212.54 1.41 9.29 17.87
of selecting the handover configuration in AgentSim leads to
Simod 0.23 287.27 2.60 32.46 93.51 5 of 9 processes being simulated with orchestrated handovers,
DGEN 0.31 559.67 17.84 30.87 95.11
e.g., P2P and Production, for which AgentSim, despite being
DSIM 0.26 273.46 4.64 15.62 48.24
AgentSim 0.36 333.28 7.95 27.12 76.50 a resource-first approach, still yields strong results. Some
logs strongly benefit from being simulated in an orchestrated
Simod 0.93 146.38 2.82 83.88 89.15
DGEN 0.52 224.45 9.30 70.11 90.82 instead of autonomous manner. For instance, the Production
DSIM 0.86 154.31 2.66 33.30 43.26 log shows an improvement in CTD from 45.65 to 25.79 and
AgentSim 0.61 65.29 5.83 14.20 25.79
in NGD from 0.77 to 0.61, aligning with the standardized
Simod 0.72 71.97 1.71 95.72 155.46
nature of production processes. By contrast, looking at the
DGEN 0.43 306.28 4.53 116.18 176.79
DSIM 0.65 78.62 2.88 119.12 173.49 logs that are simulated with autonomous handovers, we also
AgentSim 0.15 79.89 1.87 47.83 90.12 observe clear benefits of considering distinct agent behaviors
Simod 0.59 300.28 3.34 136.63 148.40 for certain processes. For instance, for the real-life BPI17W
DGEN 0.67 4557.19 3.39 118.84 172.94 log, we halve both the CTD and RED to 22.75 and 26.03,
DSIM 0.53 54.61 3.35 33.10 30.26
respectively,comparedtotheorchestratedconfiguration.Also,
AgentSim 0.30 220.98 1.64 26.03 22.75
C. 1000 and Loan Appl. show slightly better results across all
metrics using autonomous handovers. Overall, these insights
demonstrate AgentSim’s adaptability to diverse process types,
logs. Thus, putting the resource at the core of the simulation leading to considerable improvements in terms of results.
oftenallowstorepresentcontrol-flowbehaviormorefaithfully.
Post-hoc analysis on agent interactions. To exemplarily
Time. In terms of absolute (AED), circadian (CED), and demonstrateAgentSim’sabilitytorepresentagentinteractions,
relative (RED) event distributions over time, AgentSim is we compare its interaction patterns with Simod for the real-
the leader across all 3 metrics, followed by DSIM. Simod life BPI12W log. Figure 3 shows that AgentSim accurately
and DGEN stay on average significantly behind AgentSim. reflects the training log’s interaction dynamics, capturing the
TheseresultsindicatethatAgentSimcancapturethetemporal given activity chaining of resources (see diagonal). In con-
patterns in the logcomparatively well. trast, Simod exhibits random interactions and fails to capture
Congestion. Accurately capturing the cycle time of a process these patterns, thus showing the crucial nature of considering
instanceservesasacriticalindicatoroftheaccuracyofasimu- individual interaction patterns for certain processes.
lationapproach.TheCTDmetricisinfluencedbytheprocess- Runtime. Given the stochasticity of simulation, it is essential
ingtimesofindividualactivitiesandthecorrespondingwaiting to simulate numerous logs to achieve reliable predictions.
times, which in turn are dependent on resource availability. Therefore, runtime is a critical factor in the practical appli-
Consequently,thecycletimemetriccapturesacomprehensive cation of BPS. In this regard, it is important to note that
range of factors. AgentSim demonstrates superior accuracy in AgentSim consistently operates much faster than the bench-
capturing cycle times compared to the benchmarks, achieving marks. For instance, while AgentSim only requires around 30
thebestCTDin5outof9logs,againfollowedbyDSIMlead- seconds to discover and simulate the Production log (on a
ing in the remaining 4 logs. The advantage of AgentSim over machine with 32GB of RAM and an Intel Core i7 2.3 GHz
Simod is particularly pronounced with the Confidential logs. CPU), Simod runs 20 times and DSIM even 80 times longer.
.lppAnaoL
P2P
SVC
0001.C
0002.C
RCA
noitcudorP
W21IPB
W71IPB
ecruoseR
morFFor the BPI12W log, AgentSim requires around 9 minutes, approach successfully captures some agent-specific behaviors,
whereas DSIM takes more than 10 hours. it currently does not account for multitasking, batching, or
fatigue effects, which we want to incorporate in future work.
V. RELATEDWORK
Furthermore, we will explore the use of additional architec-
This section briefly discusses related work on automated tures for our multi-agent system itself.
BPS and agent-based modeling and simulation.
REFERENCES
Automated BPS. We can divide existing literature on au-
tomated BPS approaches into three categories: Data-Driven [1] M.Dumas,M.L.Rosa,J.Mendling,andH.A.Reijers,Fundamentals
ofBusinessProcessManagement. Springer,2013.
Process Simulation (DDPS), Deep Learning (DL), and hybrid
[2] W.M.P.vanderAalst,“Businessprocesssimulationsurvivalguide,”in
approaches. DDPS approaches automate simulation model HandbookonBusinessProcessManagement1,Introduction,Methods,
discovery from event logs by initially identifying a process and Information Systems, 2nd Ed, ser. International Handbooks on
InformationSystems,J.vomBrockeandM.Rosemann,Eds. Springer,
model and then enhancing it with simulation parameters. A
2015,pp.337–370.
semi-automated approach using colored Petri nets is proposed [3] A. Rozinat, R. S. Mans, M. Song, and W. M. P. van der Aalst,
in [3], while [7] introduces a data-driven approach without “Discoveringsimulationmodels,”Inf.Syst.,vol.34,no.3,pp.305–327,
2009.
considering resources. A more recent approach is Simod [4],
[4] M.Camargo,M.Dumas,andO.Gonza´lez-Rojas,“Automateddiscovery
which incorporates hyperparameter tuning. DL approaches of business process simulation models from event logs,” Decision
for BPS typically rely on recurrent neural networks. LSTM SupportSystems,vol.134,p.113284,2020.
[5] F. Meneghello, C. D. Francescomarino, and C. Ghidini, “Runtime
modelsareemployedin[13]topredicteventsandtimestamps,
integrationofmachinelearningandsimulationforbusinessprocesses,”
laterimproveduponbyDGEN[12]incorporatingn-gramsand inICPM. IEEE,2023.
embeddings.Duetotheirblack-boxnature,DLmodelsarenot [6] M.Camargo,M.Dumas,andO.G.Rojas,“Learningaccuratebusiness
process simulation models from event logs via automated process
applicableforwhat-ifanalysis.HybridmodelscombineDDPS
discoveryanddeeplearning,”inCAiSE. Springer,2022.
and DL approaches. DSIM [6] combines a stochastic process [7] I. Khodyrev and S. Popova, “Discrete modeling and simulation of
model with DL for event timestamping, extended by RIMS businessprocessesusingeventlogs,”inICCS. Elsevier,2014.
[8] O. Lo´pez-Pintado and M. Dumas, “Business process simulation with
that integrates predictions at runtime [5].
differentiatedresources:Doesitmakeadifference?”inBPM. Springer,
Agent-based modeling and simulation. Over the past 2022.
decades, the application of MAS to various domains has been [9] S. Russell and P. Norvig, Artificial Intelligence: A Modern Approach
(4thEdition). Pearson,2020.
studied extensively (cf. [17] for a review). Applying agents to
[10] M.SongandW.Aalst,“Towardscomprehensivesupportfororganiza-
Business Process Management (BPM) was initially proposed tionalmining,”DecisionSupportSystems,vol.46,pp.300–317,2008.
in the 1990’s [18], where a business process is modeled as [11] O.Lo´pez-PintadoandM.Dumas,“Discoveryandsimulationofbusiness
processes with probabilistic resource availability calendars,” in ICPM.
a system of negotiating agents. More recently, the concept
IEEE,2023.
of agent system mining has been introduced, recognizing [12] M. Camargo, M. Dumas, and O. G. Rojas, “Learning accurate LSTM
that processes often emerge from interactions of autonomous modelsofbusinessprocesses,”inBPM. Springer,2019.
[13] N. Tax, I. Verenich, M. L. Rosa, and M. Dumas, “Predictive business
agents [19], as demonstrated by an agent-based discovery
processmonitoringwithLSTMneuralnetworks,”inCAiSE. Springer,
algorithm in [20], and also shown for simulation in [21]. A 2017.
generalintroductiontoagent-basedBPScanbefoundin[22]. [14] D. Chapela-Campa and M. Dumas, “Enhancing business process sim-
ulation models with extraneous activity delays,” Information Systems,
However, such agent-based simulation approaches in BPM
vol.122,p.102346,2024.
rely on manual configurations to simulate a specific process, [15] D. Chapela-Campa, I. Benchekroun, O. Baron, M. Dumas, D. Krass,
e.g., in a factory production domain [23]. To the best of our andA.Senderovich,“CanItrustmysimulationmodel?measuringthe
quality of business process simulation models,” in BPM. Springer,
knowledge, our approach is the first to use event logs to
2023.
automatically infer MAS models for process simulation. [16] J.Kazil,D.Masad,andA.T.Crooks,“Utilizingpythonforagent-based
modeling:Themesaframework,”vol.12268. Springer,2020,pp.308–
VI. CONCLUSION 317.
[17] A.Dorri,S.S.Kanhere,andR.Jurdak,“Multi-agentsystems:Asurvey,”
This paper introduced AgentSimulator—an agent-based ap- IEEEAccess,vol.6,pp.28573–28593,2018.
proach for data-driven business process simulation. Given [18] N.R.Jennings,P.Faratin,M.J.Johnson,T.J.Norman,P.D.O’Brien,
and M. E. Wiegand, “Agent-based business process management,” Int.
an event log, our approach discovers a multi-agent system
J.CooperativeInf.Syst.,vol.5,no.2&3,pp.105–130,1996.
that represents real-world actors and systems, each modeled [19] A.Tour,A.Polyvyanyy,andA.A.Kalenkova,“Agentsystemmining:
withuniquebehaviorsandinteractionpatterns.Thediscovered Vision, benefits, and challenges,” IEEE Access, vol. 9, pp. 99480–
99494,2021.
multi-agent system is then used to simulate the execution
[20] A.Tour,A.Polyvyanyy,A.A.Kalenkova,andA.Senderovich,“Agent
of the process. Our resource-first approach provides more miner:Analgorithmfordiscoveringagentsystemsfromeventdata,”in
means to capture distinct resource behaviors and interactions BPM. Springer,2023.
[21] M.HalasˇkaandR.Sˇperka,“Isthereaneedforagent-basedmodelling
than traditional control-flow-first approaches and achieves
andsimulationinbusinessprocessmanagement?”Organizacija,vol.51,
state-of-the-art results with significantly reduced computation no.4,pp.255–269,2018.
times. The evaluation shows that centrally orchestrated and [22] E. Sulis and K. Taveter, Agent-Based Business Process Simulation - A
PrimerwithApplicationsandExamples. Springer,2022.
decentralized processes often need to be captured differently,
[23] M. Dornho¨fer, S. Sack, J. Zenkert, and M. Fathi, “Simulation of
with AgentSimulator being automatically adaptable to both. smart factory processes applying multi-agent-systems—a knowledge
Modeling human behavior is a complex task. Although our managementperspective,”JMMP,vol.4,no.3,2020.