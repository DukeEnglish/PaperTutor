1
A Step Towards a Universal Method for Modeling
and Implementing Cross-Organizational Business
Processes
Gerhard Zeisler†, Tim Tobias Braunauer†, Albert Fleischmann, Robert Singer
Abstract—The widely recognized Business Process Model and
Notation(BPMN),whileprevalentinindustrystandardsforbusi-
ness process modeling, faces limitations in terms of ambiguous
executionsemantics.Thisambiguitycanleadtovariedinterpreta-
tionsoftheexecutionlogic,contingentuponthespecificsoftware
used for implementation. In contrast, the Process Specification
Language(PASS)isdesignedtoofferformallydefinedsemantics,
addressingtheinterpretationalissuesinherentinBPMN.Despite
itsadvantages,PASShasnotachievedthesamelevelofindustry
adoption as BPMN.
This feasibility study introduces PASS as an intermediary
framework for translating and executing BPMN models. The
study involves developing a prototype translator that converts a
select subset of BPMN elements into a PASS-compatible format.
These translated models can be transformed into source code
and executed by our reference implementation of a workflow
Fig.1. Aspectsfordigitalisationofbusinessprocesses
environment.ThisapproachdiffersfromtypicalBPMNworkflow
implementations.
The findings demonstrate that this integrated approach not
only enhances compatibility between different modeling and Normally both aspects of a process specification are de-
execution tools but also offers a robust methodology for cross- scribed by business people using appropriate tools. For de-
organizational implementation of business processes. This study scribing activities, tools that are commonly used in system
pavesthewayforamoreunifiedandpreciseexecutionofbusiness
specifications can be utilised e.g. UML. This aspect is not
process models, potentially revolutionizing the way industries
investigated in this paper. There exists extensive literature
approach process modeling and execution.
about methods and tools to specify functions e.g. [1]. For this
IndexTerms—PASS,BPMN,subject-orientation,businesspro-
paper, it is assumed that the meaning of the used activities is
cess modeling, workflow engine, code generator, cross organiza-
described anyhow.In this paper, thefocus is onthe sequences
tional business processes, agent
in which these activities are executed.
Tospecifytheexecutionsequenceoftheseactivities,special
I. INTRODUCTION description concepts including corresponding tools are devel-
opede.g.EPC,BPMN.Theconceptsandtoolswhichareused
Business processes are highly relevant factors within a
forthisworkdependontheknow-howofthebusinesspeople.
modern company and are highly influential on the success of
Thecreatedmodelsarestoredinanappropriatefileformatand
a business. A business process defines the activities and the
aretheinputforanexecutionplatform.Anexecutionplatform
execution sequence of these activities to produce an intended
provides the required resources for executing processes. This
result. To improve processes and to reduce costs, today many
includes people, physical devices and software systems.
partsofabusinessprocessaredigitalised.Themajoraspectsof
Today, processes are defined across organisations. Each in-
the digitalisation of business processes are shown in Figure 1.
volved organisation may have its own execution platform,
There are two major aspects of creating a business process
therefore processes may be executed across various execution
model:
platforms.
• The activities which are executed in a process to get Thespecialityofbusinessprocessdigitisationistheimplemen-
the intended result. This includes the related entities and tation of the execution sequence the so-called control flow.
the operations defined on them. The results of operations This aspect is central to implementing business processes.
executed on objects influence which activity is executed Therefore in this article, this aspect is considered in more
next. detail. This paper aims to investigate to which extent different
• The sequence in which these activities are executed specification tools supporting different modelling types can
depending on the results of the operations. create models which can be understood and executed by
various execution platforms.
†Equalcontribution In this paper, not all aspects of such a general digitisa-
4202
nuJ
81
]ES.sc[
1v20321.6042:viXra2
tion environment for business processes are considered. This II. RELATEDWORK
feasibility study aims to evaluate if it is possible to create
In this section, related work to the problem statement of
business process models with BPMN based tools and a S-
this paper is evaluated.
BPM based tool, and that these models can be executed by
two different workflow engines. This enables the utilisation
of different modelling tools and different execution systems A. Does a storage language for different types of modelling
for the digitisation of a business process. This increases the languages already exist?
flexibility and reduces development and maintenance costs. In order to create models with different graphical-based
BPMN was chosen due to its wide adoption in the industry methods two sub-problems have to be solved. The meaning
and the availability of many modelling tools on the market. of the symbols in the various languages have to be mapped
ThestorageformatforBPMNmodelsisbasedonXMLbutthe oneachotherandbasedonthismappingthemodelshavetobe
execution semantic is described in natural language (see [2]). stored in the same file format. This means the storage format
S-BPMhasbeenchosenbecauseitistheonlybusinessprocess covers the semantics of the various constructs of process
modelling language for which an OWL [3] based storage modelling languages.
format has been defined. Based on that storage OWL format If graphical-based modelling languages are used, which
a formal execution semantic as an Abstract State Machine [4] is more or less the standard, the layout of the drawings
has been created. representing a process model has to be stored. This means
that there must exist a mapping of the graphical symbols
Previously we have also developed an OWL Ontology in-
to the corresponding data structure of the file format, the
cludingallelementsoftheBPMNstandard[5].Thisontology
positioning of the symbols in the drawings and the alignment
has been used to translate BPMN models from BPMN into S-
ofconnectionsbetweensymbolsrepresentingaprocessmodel.
BPMmodelsandviceversa.Thedevelopedontologycanalso
The authors could not find a storage language that allows
be used to test any BPMN model against the standard. This
storing different types of process models e.g., BPMN models,
demonstratesthatBPMNmodels(withconceptualrestrictions)
flowchart-based models, or Event-driven Process Chain (EPC,
can be translated into S-BPM models. For this work, we have
EPK) models in the same storage format including the graph-
decided to directly translate the models based on their origin
ical representation.
file structure to have more flexibility during the development
There exists an XML-based standard for BPMN [2]. This
cycle, as is explained in section VI. If a process model is
means that different BPMN modelling tools store models in
handled by different tools then each tool must understand its
thesamestandardformatasfarastheydonotcontainvendor-
syntax and semantics. section II of this paper outlines the
specificmodellingelements.Modelscanbeexportedfromone
related work according to the following questions: Does a
toolandimportedintoanothertool.Butonlyifthetoolsfollow
storage language for different types of modelling languages
strictlythestandard.ThisispossiblebecausetheXMLformat
already exist? Is there a storage language for which formal
which contains the business process description is enhanced
execution semantics are defined? Does a workflow engine
by information that covers graphical aspects like symbols, the
exist which is able to execute a process logic available in
position of symbols, lines etc..
a specific storage format that has been produced by different
In [8] the practical exchange of BPMN models between
methods and tools? In section III an overview of the structure
different tools is considered in more detail and in [9] a demo
of the feasibility study described in this paper is presented. In
is shown. In this demo, several interchange scenarios are
sectionIVandsectionVBPMNandS-BPM/PASSareshortly
investigated.
described.
This demo also shows that the interchange of models be-
Afterwards, in section VI, the BPMN elements used to
tween various modelling tools does not work without difficul-
model PASS processes are described. Furthermore, a short
ties (therefore this BPMN model interchange working group
descriptionofthetranslationprocessisgiven,includingwhich
exists). The interchange of models consisting of several pools
problems have been encountered and which possibilities the
with message exchange is not investigated in these demos [9]
translationprocessoffers.AfterwardsinsectionVII,aconcept
but for distributed business processes this aspect is essential.
for a workflow engine based on PASS models is described.
If graphical modelling languages are applied the graphical
In the subsequent chapter, the concept is implemented as a
representationofthesymbolsandtheirpositionsonadrawing
prototype including a translation from PASS to Python pro-
represents a process model. The BPMN standard includes a
gramcode.Asaresultofthecombinationwiththetranslation
languagewhichallowstodescribethegraphicalrepresentation
tool, the Python-based workflow engine can execute process
of models.
models described either in PASS or BPMN. At the end of
This means with some restrictions BPMN models can be
the paper in section X, the resulting prototypes as well as
handled by different modelling tools.
the ASM reference implementation are tested and verified
against a specific set of known process patterns in a variety
of scenarios involving multiple BPMN and PASS modelling B. Is there a storage language for which formal execution
tools. semantics are defined?
Moredetailsabouttheconceptsdescribedinthisarticlecan The authors could not find a storage format that can be
be found in [6] and [7]. interpreted by various workflow engines except for BPMN. In3
[10] the problems with the XML notation of BPMN and the
related semantics is discussed in detail.
For the BPMN storage format a semantic specification in
natural language exists. This semantic specification contains
“inconsistencies between descriptions of the same element,
while at the same time, the semantics of certain elements
remains ambiguous” [10]. Nevertheless, subsets of the BPMN
language can be directly interpreted by workflow engines.
A list of BPMN based workflow engines can be found in
Wikipedia [11]. These subsets mainly focus on the control
flow elements like action, xor etc.. In [10], for a great part of
BPMN elements a formal semantic has been created. But in Fig.2. Aspectsconsideredinfeasibilitystudy
this work, pools and swim lanes which are part of BPMN
are not considered. In the BPMN standard their usage is
BPMN is widely used in the industry since it is an OMG
not specified (see page 306 in [2]). Especially for business
standard and there are many business people trained in that
processesinnetworkedorganisations,modellingelementsthat
modelling method. The complete BPMN language consists of
can be used to express a network of organisations are needed.
around 160 different symbols, but in practice around 15 are
Thismeansthatthereareproblemsinmodellingprocessesfor
used.
networked organisations.
In [16] PASS and BPMN have been compared with each
TheBPMNlanguagesuffersfromalackofformalisation.This
otheranditshowsupthatatleastforbeginnersPASScouldbe
implies that the BPMN semantics is not precisely enough that
more easily learned than BPMN. For BPMN there exist many
it can be directly executed by a computer.
modelling tools and execution platforms but these execution
platforms understand only the BPMN-XML storage format.
C. Does a workflow engine exist which is able to execute a Due to the missing formal semantics, different workflow
process logic available in a specific storage format that has engine may interpret the same process model differently.
been produced by different methods and tools? The feasibility study described in this paper aims to com-
Currently,astorageformatthatisusedbyseveralmodelling bine PASS aspects with BPMN advantages. BPMN language
methodsandrelatedtoolscouldnotbefound.Thisalsoapplies featuresaremappedtoPASSlanguagefeatures.Whichresults
to a workflow engine which understands process models in a formal semantic for the corresponding BPMN language
created either by BPMN tools or EPK-based modelling tools. features.Thismeansthattheformaldefinitionsandsimplicity
of PASS is combined with the widely known and used
Since the BPMN storage format is standardised, different
modelling language BPMN.
workflow engines can understand BPMN-based process mod-
els created by different modelling tools. If models adhere to
this standard, in principle, different workflow engines should IV. OUTLINEOFPASS
understand BPMN models. However, because of some impre- The Parallel Activity Specification Schema (PASS) follows
cise definitions in the BPMN standard, some problems may theparadigmofsubject-orientationwhendescribingmodelsof
arise (see [9]) in the practical work. processes or rather process systems. In such models the term
”Subject” refers to active entities. They execute operations on
III. STRUCTUREOFTHEFEASIBILITYSTUDY objects and exchange data via messages to synchronise their
operations.Inthefollowing,aninformaloverviewispresented
Figure 1 shows the aspects which have to be considered if
.ApreciseandformaldefinitionofPASScanbefoundin[13].
several different modelling tools and execution platforms are
usedforthedigitisationofabusinessprocess.Inthisfeasibility
A. General concept of subject-orientation
study,thecombineduseofPASS-andBPMN-basedmodelling
tools and execution platforms is considered as a subset of Subject-oriented system development has been inspired by
those aspects. Figure 2 depicts the aspects considered in this various process algebras (see e.g. [13], [17], [18]. [19]), by
feasibility study. the basic structure of nearly all natural languages (subject,
The subject-oriented specification language PASS [12] has predicate, object) and the systemic sociology developed by
beenchosenduetoitsOWLstorageformatforwhichaformal NiklasLuhmann[17]andJu¨rgenHabermas[20].Intheactive
execution semantic has been defined [13]. For the definition voiceofmanynaturallanguages,acompletesentenceconsists
of the execution semantics, an Abstract State Machine (ASM) of the basic components subject, predicate and object. The
[13] has been created. Because the PASS language consists subject represents the active element, the predicate (or verb)
only of 5 basic symbols the execution semantics definition the action, and the object is the entity on which the action
does not need to be extensive (about 3 pages). For ASM is executed. According to the organisational theory developed
exists an interpreter called coreASM [14] which can execute byLuhmannandHabermas,thesmallestorganisationconsists
the OWL storage format of PASS-based models [15]. The of communication executed between at least two information
disadvantage of PASS is that it is not commonly used. processing entities (Note, this is a definition by a sociologist,4
notbyacomputerscientist).Figure3summarisesthedifferent
inspirations of subject-orientation.
Fig.3. Fundamentalsofsubject-orientation
Particularly, it describes how these various ingredients are
combined in an orthogonal way to a modelling language for
scenarios in which active entities play a prominent role like
in Industry 4.0.
B. Structure of models described in PASS
A PASS model (system) consists of two separate but in-
terconnected graph descriptions. First, the Subject Interaction
Diagram (SID) that denotes the existence of active entities
(thesubjects)andtheircommunicationrelationships,thatthey
can use to exchange data in a process context. Furthermore,
for each subject there can be an individual Subject Behavior
Diagram(SBD)thatdenotesitsspecificactivitiesinaprocess.
A subject acts upon (data) objects that are owned by the
subjectandcannotbeseenbyothersubjects.Itisimportantto
emphasise, that this specification is totally independent from
the implementation of subjects, objects, and the communica-
tionbetweensubjects.Thismeanssubjectsareabstractentities Fig.4. MaincomponentsofPASS
which communicate with each other and use their objects
independently from possible implementations. The mapping
to an actual implementation entity or technology is done behaviour of a subject may include multiple alternative paths.
in a succeeding step. When an implementation technology Branching in PASS is represented using multiple outgoing
is assigned (mapped) to a subject to execute its behaviour transitionsofastate,eachofwhichislabelledwithaseparate
(SBD) it becomes an actor/agent, e.g. a software agent. In condition. Merging of alternative paths is represented using
Figure 4 a PASS model is shown. The upper part of that multiple incoming transitions of a state. Within an SBD, all
figure shows the graphical representation of a PASS model splits and merges in the process are always explicitly of
with SID (upper diagram) and SBDs (lower diagrams). In the the XOR type. There are no AND or OR splits! Subjects
example subject ’Customer’ sends a message ’Order’ to the are executed concurrently. Triggering and synchronising con-
subject ’Companies’ and receives the messages ’Delivery’ or current behaviours is handled by the exchange of messages
’Decline’. betweentherespectivesubjects.Forasubject-orientedprocess
In principle, an SBD defines the behaviour of a subject as model to be complete and syntactically correct, all messages
a kind of state machine, interlinking three types of states (see specified in the SID (and only those) must be handled in
thelowerpartofFigure4).Send-states(greennodes)represent the SBDs of the two subjects involved. The SBD of the
the dispatch of messages to other subjects, receive-states sending subject needs to include a send-state specifying the
(red nodes) represent the reception of messages from other message and recipient name (see Figure 4). Correspondingly,
subjects,andfunction/do-states(yellownodes)representtasks the SBD of the receiving subject needs to include a receive-
that do not involve interaction with other subjects. States are state specifying the message and sender name. There is no
connectedusingtransitionsrepresentingtheirsequencing.The explicit diagrammatic association of the messages shown in5
the SID with the corresponding send and receive-states in the
SBDs. At runtime, any incoming message is placed in the
so-called input-pool of the receiving subject, which can be
thoughtofasamailbox.Whentheexecutionofthesubjecthas
reached a receive-state that matches the name and sender of a
messageintheinput-pool,thatmessagecanbetakenoutofthe
input-pool and behaviour execution can proceed as defined in
the SBD. The default communication mode is asynchronous.
Synchronous communication can be established by restricting
the maximum number of messages that can be stored in the
Fig.5. CorenotationelementsofBPMN
input-pool. The input-pool is not visualised in a diagram but
is an important concept in order to understand how messages
and behaviours are loosely coupled with subjects in PASS.
howeveronlywithintheconfinementsofpoolsorlanes.Pools
V. OUTLINEOFBPMN and lanes are constructs used to represent responsibilities in
distributed business processes. They are discussed in more
BPMN – the modelling language referred to as Business
detail below. If a connection is made across pool boundaries,
Process Modelling (and) Notation – was developed by IBM
it is modelled using message flows.
in 2002 and subsequently published by the BPMI (Business
Aprocessconsistsoftasks.Afterstartingaprocess(bymeans
Process Management Initiative). The aim was to create a
of an event), one task follows the other until the process ends
universally applicable standard to counter the multitude of
(with an event). Tasks can be atomic (i.e. not refined further)
process modelling languages used in academia and industry.
or can contain sub-processes. In such cases, tasks are refined
This language should adopt the essential characteristics of the
byanadditionalembeddedBPD,whichrepresentsitsdetailed
most common languages and make it possible, in addition to
sequenceofsub-tasks.Thisdetailedsequencecanbe”hidden”
thedocumentationofbusinessprocesses,tocreatemodelsthat
and is represented by a ”+” symbol at the bottom of the task.
allow for immediate IT-supported execution. BPMI in turn
Aprocessbeginswithastarteventandendswithanendevent.
was merged with the OMG (Object Management Group) in
BPMN offers a multitude of possibilities to define events that
2005. Thus, BPMN became an OMG standard. The BPMN
can trigger, complete, or influence the course of a process.
2.0standardwaspublishedin2010.Thisstandardincorporates
These will be discussed later.
several diagram types: the choreography diagram, the conver-
At this point, it is important to emphasise that a process can
sation diagram, and the collaboration diagram. In the follow-
start with one or more start events and can end on any path
ing, the basic elements of BPMN 2.0 that enable business
through the process (see sequence flow and gateways below)
processestoberepresentedatthebusinesslevelaredescribed.
with one or more end events. There must be a continuous
BPMN focuses on business processes, which it presents as
sequence flow from each start event to at least one end
a temporally logical sequence of activities (tasks) that are
event. Tasks, gateways, or intermediate events must not be
structured in accordance with organisational responsibilities.
endpoints in the process and therefore always require at least
The representation of data is not as comprehensive as in
one outgoing sequence flow. A gateway represents a branch
other modelling languages and only regarded in the context
in the control flow. The exclusive (XOR) gateway requires a
of process flows.
condition for each outgoing control flow, which according to
The BPMN language consists of more than 160 different
thestandardmustalwaysrefertotheresultofanimmediately
symbols. Many of these symbols focus on the description
preceding task.
of control flows (similar to flowcharts, EPCs, or activity
The parallel (AND) gateway tracks all outgoing control flows
diagrams), but in this paper, mainly the processes running
independently and in parallel. The branched control flows
across different organisations are considered. This means
can be terminated separately with end events or explicitly
communication aspects are more relevant. Therefore there is
mergedagainwithanotherparallelgateway.Afterthismerger,
a focus mainly on these modelling elements.
the control flow only continues once all incoming control
flows have been completed (as with the split/join concept for
A. Notation elements for modelling process flows
activity diagrams). The inclusive (OR) gateway can follow
Process diagrams created with BPMN are called Business one or more paths, whereby a condition must be specified for
Process Diagrams (BPD). At its core a BPD follows the path selection (as with the exclusive gateway). This condition
principles of activity diagrams, which are subsequently sup- must already be testable at the time of the decision, so
plemented by elements that allow the representation of the the necessary data must have been generated in one of the
potentially more complex control flow in business processes previous tasks. Decisions, which cannot be made on the basis
(see Figure 5). ofpreviouslyexistingdata,canberepresentedusingtheevent
Asabasicprincipleofrepresentation,certainthingshaveto basedgateway.Thisrequiresaneventineachoutgoingbranch
be done in a process (tasks), but possibly only under certain immediately after the gateway (e.g., an incoming message
conditions (gateways), and things can happen (events). These event or a timer event). When one of these events occur, its
three objects are connected to each other via sequence flows, respective branch (and only this branch) is activated.6
B. Notation elements for modelling communication of communication processes, however, is only possible by
using explicit send and receive events.
BPMN also enables the modelling of distributed business
processes. Although BPMN clearly focuses on the process
flowduringmodelling(similartoflowcharts,EPCs,oractivity
diagrams), it also enables the structuring of the process in
accordance with the participants involved and their associated
responsibilities. The modelling elements available for this
purpose are described in this section (see Figure 6).
Fig.6. BPMNnotationelementsformodellingcommunication
A pool represents a company or an organisational unit in a Fig.7. ExampleBPMNdiagramshowingcommunication-orientedprocesses
company, such as a department. Each (swim) lane in a pool
TheexampleinFigure7showstwoprocesses(oneperpool)
represents a person or role involved in the process that is
that are linked by message flows. The company’s process is
assigned to this pool.
triggered by an incoming application, which is represented
BPMN allows the representation of the interaction of two
here in the first message flow. After checking the application,
or more processes. The aforementioned pools and lanes are
the decision can be made whether to send an invitation or
necessary for the representation of collaborations. Separate
rejecttheapplication.Intheupperpool,theapplicantwaitsfor
lanes are required for all persons or groups involved in a
ananswerforamaximumoftwoweeks(asrepresentedbythe
process, and separate pools are necessary for each process or
intermediate timer event). The event based gateway activates
organisational unit that is responsible for this process. Each
the process branch whose event occurs first. The related
pool thus contains its distinct processes with separate start
send and receive events are linked via message flows. It is
and end events. Nevertheless, these individual processes can
importanttonoteherethatmessageflowsalwaysrepresent1:1
strongly influence each other, in which case they are coupled
relationships – that is, a sent message can be received exactly
via message flows.
once and a receive event can react to exactly one message.
Message flows indicate that data is exchanged between dif-
This is a significant difference between PASS and BPMN. In
ferent processes. Therefore, no message flow can take place
PASS messages are exchanged via a so-called input-pool in
within a process (pool). Consequently, there are no message
which messages sent to the related subject are deposited. This
flowswithinalaneorbetweendifferentlanesofasinglepool.
meansthatsendingstatesinthesendingprocessdoesnotneed
Sequence flows show which activities are executed in which
aone-to-onerelationshiptothereceivingstateinthereceiving
order and do not explicitly constitute an exchange of data. In
subject(seesectionIV).InordertoemulatethatPASSfeature
contrast to message flows, they may only be used within a
in BPMN signal events are required which are not covered in
pool and not between different processes (pools).
the BPMN conversion (see Table I).
Message flows can be augmented with message elements,
which are used to explicitly represent the exchanged data
and contain a more precise specification of the transmitted
VI. TRANSFORMATIONOFBPMNMODELS
information. Message flows can be used in different ways: This section describes how BPMN processes are converted
they may either originate from pools and activities and also into PASS processes. This is done in two steps whereas
end there, or they can be explicitly sent by send message the XML-format which is used for storing BPMN models
events and received by receive message events. The first case is transformed into the OWL-format used for storing PASS
is useful for the descriptive modelling of business processes models.
in which a communication process is to be represented that First, the BPMN model is converted into a SimpleBPMN
does not necessarily have to be described exactly. A message model.Unnecessaryinformationandelementsarefilteredout.
originating from an activity or pool is sent at some point Inaddition,someinformationisaddedtotheelementsinorder
during task or process execution - the exact time remains tosimplifythesubsequentconversionintoaPASSmodel.The
unclear. A message ending at a pool only states that the SimpleBPMNelementsarethenconvertedintoPASSelements
represented organisation receives this message, but not which and exported in OWL-format.
activity it triggers or how it is handled within a process. This The process as a whole is not translated in the respective
can be useful when modelling external organisational units, steps, but each element is translated separately. At the end,
whose detailed behaviour is unknown. An exact specification the individual elements are reassembled into a fully translated7
process.Thisapproachbreaksdownthecomplexprobleminto In the following subsections, each element shown in the
several individual parts that can be solved individually. table is described briefly. It also briefly shows what had
Table I shows an overview of which BPMN elements are to be taken into account when implementing the translation
translated into which PASS elements. software.
1) Participants: One of the most important elements of
TABLEI a PASS process are subjects. These are generated from the
MAPPINGOFBPMNTOPASSELEMENTS Participant elements from BPMN.
BPMNelement PASSelement Each participant is converted to a subject.
Participant Subject 2) Message flow: Besides the subjects, the message flow
Messagespecification
is one of the main components of a PASS process. This is
Messageflow Messageexchange
Messageexchangelist generated from the MessageFlow elements.
Process Subjectbehaviourdiagram Each MessageFlow is converted into a MessageSpeci
Startevent Do-state(Initialstateofbehaviour) fication and a MessageExchange. These are then
Action
stored in a MessageExchangeList.
Receive-state(Initialstateofbehaviour)
Action IntheMessageSpecificationthecontentofthemes-
Messagestartevent
Receivetransition sageisstored.IntheMessageExchangethecorresponding
Receive-transition-condition
sender and receiver subject are stored. All this in-
Do-state(End-state)
Endevent Action formation is read from the MessageFlow element.
Do-state 3) Process: Each subject in a PASS process has a SBD
Task
Action
that is stored as SubjectBehavior. These elements are
Do-state
Exclusivegateway Action generated from the Process elements.
Sendstate Each Process is converted to a SubjectBehavior.
Intermediatethrow Action
4) Start event and message start event: In a PASS process
messageevent Send-transition
Send-transition-condition there is always a state which is an initial state of behaviour.
Receive-state This is created from the StartEvent or the Message
Eventbasedgateway
Action StartEvent element.
Receive-state
A StartEvent is converted the same as a Task ele-
Intermediatecatch Action
messageevent Receive-transition ment. A MessageStartEvent is converted the same as
Receive-transition-condition a IntermediateCatchMessageEvent element. In both
Do-state
cases the InitialStateOfBehavior attribute is set for
Intermediatecatch Action
timeevent Day-time-timer-transition the state.
Day-time-timer-transition-condition 5) End events: In a SBD of a PASS process there are
Sequenceflow Do-transition
always one or more states which are also end states. These
are created from the EndEvent elements.
An EndEvent is converted the same as a Task element.
A. Translation of the individual elements After that, the EndState attribute is set at the state.
This section describes how XML BPMN elements are 6) Taskandexclusivegateway: InaSBDofaPASSprocess
convertedintoOWLPASSelements.EachelementinaBPMN there are usually one or more do-states. These elements are
process has a unique ID. This is used to describe the con- created from the Task and ExclusiveGateway elements.
nections between the individual elements. During translation, 7) Intermediate throw message event: To send messages
the BPMN IDs become the ComponentId attributes that to other subjects, there are one or more send-states and send-
each PASS element needs. This allows the elements to be transitionsinaPASSprocess.Theseelementsarecreatedfrom
reassembled into a complete PASS model after translation. the IntermediateThrowMessageEvent elements.
Another advantage of this approach, where the BPMN IDs Each IntermediateThrowMessageEvent is con-
areusedforthePASSComponentIdattributes,isthatwhen verted to a SendState, a SendTransition and a Send
translating back, which must be done to validate the results, TransitionCondition.
the BPMN IDs can be restored. The SendTransitionCondition contains the corre-
The names of the BPMN elements are used to generate the sponding MessageExchange and the messageSentTo
ComponentLabel attributes of the PASS elements. attribute.
Each state in a PASS model has an associated action 8) Event based gateway: To wait for messages from other
element.Thestateandallassociatedtransactionsarestoredin subjects, there are one or more receive-states in a SBD
this element. When a state is generated during compilation, of a PASS process. These elements are created from the
the associated action element is also generated. Also, all EventBasedGateway elements, among others.
transactions are added to the correct action element when 9) Intermediate catch message event: To receive messages
created. from other subjects, there are one or more receive-states and
Each transition in a PASS model serves as a connection receive-transitions in a PASS process. These elements are
between two states and therefore possesses a sourceState created from the IntermediateCatchMessageEvent
element and a targetState element. elements.8
Each IntermediateCatchMessageEvent is con- Althoughthiswouldbethecorrectmodelling,forthiswork
verted to a ReceiveState, a ReceiveTransition and it was decided not to support it. First, this modelling style is
a ReceiveTransitionCondition. notintuitiveandalsounnecessarilycomplicatedformodellers.
If the IntermediateCatchMessageEvent is after a Furthermore, while this is possible with simple processes, as
EventBasedGateway, the ReceiveTransitions will moreelementsaremodelledtoit,thetranslationalsobecomes
be attached directly to the ReceiveState created from it. more difficult.
Otherwise, a separate ReceiveState must be created. In this paper, it was therefore decided that the tasks would
The ReceiveTransitionCondition contains the betranslatedintostatesandthesequenceflowsintotransitions.
corresponding MessageExchange and the messageSent In a subsequent project, however, the translation software
From attribute. could be adapted to this type of modelling.
10) Intermediate catch time event: To measure time and
thereby trigger state transitions, there are one or more day- VII. WORKFLOWENGINECONCEPT
time-timer-transitions in a PASS process. These elements Inthissection,aconceptforacode-generatingapproachfor
are created from the IntermediateCatchTimeEvent a PASS workflow engine is described. This workflow engine
elements. aims to fulfill the set of requirements for workflow engines
Each IntermediateCatchTimeEvent is converted to discussed in subsection VII-A. In subsection VII-B, the de-
a DayTimeTimerTransition and a DayTimeTimer veloped concept is introduced. Individual components such as
TransitionCondition.
actorsandtheuserinterfacearediscussedinsubsectionVII-C
If the IntermediateCatchTimeEvent is positioned and subsection VII-D. The overall goal of this concept is to
after an EventBasedGateway, the DayTimeTimer determine if the approach of generating code from models
Transition is attached directly to the ReceiveState is feasible in workflow engines while also fulfilling the re-
created from it. Otherwise, a separate DoState must be quirementsforsuchsystems.Asaresult,theworkflowengine
created. can serve as a validation tool for the execution logic of the
The DayTimeTimerTransitionCondition contains input models as well as the PASS standard. Especially when
the time duration after which the transition is triggered. compared to an independently developed alternative workflow
11) Sequence flow: Transitions are required between all engine. For the prototype concept and implementation, the
states in a PASS process. So far, all transitions have been cre- underlying conceptual similarities of PASS to the actor model
ated except for the do-transitions. The missing do-transitions incomputerscienceareutilised.Furthermore,theimplications
are created from the SequenceFlow elements. for a potential multi-enterprise scenario are discussed briefly
in subsection VII-F.
B. Different concepts
A. Requirements
Inthiswork,amajordesigndifferenceinmodellingbecame
apparent.IntheBPMNstandard,modellingisdonewithtasks. In [12] and [21] certain requirements for software concern-
In the PASS standard, modelling is done with states. ingtheexecutionofworkflowsaredefined.Thosearethebasis
This makes the translation of BPMN to PASS models on which the concept is developed.
difficult. Even though the use of tasks and states works • The ability to interpret or execute the process models.
very similarly in the respective standards and it is therefore • A user interface including a task list, as well as forms
reasonable to translate tasks into states, this is not entirely with editable and read-only data. Either manually gener-
correct. ated or based on the business objects.
One way around this problem is to model and name the • Storage for process models that are uploaded via the
tasks like states and the sequence flows like transitions. This interface.
waythetranslatedPASSmodelwouldbenamedandmodelled • Storage for business objects and a wide support of data
correctly. types.
However, if the model is to be completely correct, it would • Storage of information on which operations need to be
have to be modelled with intermediate events. performed.
This allows the software to convert BPMN intermedi- • A way of integrating other systems (e.g. Application
ate events into PASS states and BPMN tasks into PASS- Programming Interface (API) calls).
transitions. Figure 8 shows this type of modelling. • A method for mapping abstract roles or subjects to
organisationalstructures(e.g.MicrosoftActiveDirectory
(AD) integration).
• A permission system based on organisational structures.
• Offer users a way to maintain a task list.
• The possibility of message exchange.
• Monitoringaspectsaswellaslogfilegenerationtoallow
traceability.
• Scalabilityandabilitytohandlealargenumberofprocess
Fig.8. Subject-orientedBPMNprocesswithintermediateevents instances.9
• Persistence in case of restarts.
As defined as the goal of this paper, a main requirement
is the transformation of models into executable code. There-
fore, a code generator component is required to perform this
translation.
B. Overview
This workflow engine concept aims to be the basis of a
workflow engine which fulfils the requirements defined in
subsection VII-A. Those are requirement for the environment
the process lives in and not for the process itself. Therefore,
the main component are actor systems containing the actors.
Those systems are accompanied by external components for
enhanced functionality. Within this concept, the actor system
Fig.9. Highlevelview
can be seen as a separate program which is the underlying
platform for the actors to run in. It ensures that actors can
communicate with each other and also manages them (e.g. purpose, a web interface could be used which communicates
starting,stopping).Furthermore,itisabletoacceptnewactors through the management actor system (see Figure 9) with the
at runtime, so that it does not need to be restarted in case an serveractorsystem.Asaresult,theuserinterfaceisseparated
actor changes. and can exist on a different physical or virtual computer.
As previously mentioned, the actor system is the basis for However, in the depicted concept, the user interface is tightly
actors.Intheoverallconcept,actorsaregeneratedonthebasis coupled to an actor system which allows for utilisation of
of subjects within a PASS model. The main distinction is that the internal message exchange capabilities. This provides the
an actor is a program which is somehow linked to an user or benefit that the asynchronous nature of actor systems can
group, while the subject is an abstract role in the model. It is also be utilised in the interface and no separate means of
up to the execution environment to perform this translation. It communication have to be implemented.
is important that the behaviour of the actor code matches the
subject behaviour in the model.
C. Internal actors
Furthermore, the concept consists of multiple different
and potentially distributed interconnected actor systems. This As previously mentioned, the concept consists of at least
allows actors to communicate with each other even if not two different interconnected actor systems. This interconnec-
in the same actor system (i.e. allowing message exchange). tion allows communication between actors even if running
Since those actor systems can be distributed over multiple on other actor systems. Furthermore, the actor system itself
servers, redundancy, as well as performance, can be increased is able to communicate with actors and can therefore be
and scaled. This structure aims to fulfill the requirement of used for external communication. In addition, it can also
scalability and the ability to deal with a large number of be integrated into other components. This is used for the
processinstances.Inaddition,thisapproachpotentiallyallows managementactorsystemincludedinthewebinterfacewhere
inter-company execution of processes where multiple actor communication occurs between the management actor system
systemsrunningindifferentcompaniesareconnected.Insuch and actors running on the server-side actor system.
a scenario, actors from one company could directly interact However, since the actor system is volatile (actors can be
with actors from other companies while the actor systems started or stopped at any time) when it comes to the actor
act as a common basis for communication. A high-level view addresses as well as the number of actors running, two fixed
including two companies is depicted in Figure 9. actors, namely director and IO actor, are introduced. Those
On a high level, the basic functionalities are represented fixed points provide a stable reference for external tools to
using two different kinds of actor systems. While technically interact with the system. A detailed view of the structure
both perform the same functionality, they serve a different concerning the communication of those actors is depicted in
purpose in the concept. This includes the server-side actor Figure 10 and is discussed in the following section.
systemwheretheactualbusinesslogic(i.e.theactorgenerated 1) Director: Within a process model, the starting subjects
from a subject) is executed as well as the actor system (and therefore actors) are defined and started by the system
for management. The second is responsible for providing an on process instantiation. All subsequent ones are started on
interfaceforexternaltoolssuchasuserinterfaces.Thisisdone demand when a message is sent to them by another actor. As
byseparate(fixedandnotgenerated)actorsprovidinganentry part of the starting process, the address of the newly created
pointforexternalcommunication.AsshowninFigure9,those actorisknowntothesender.Sincethesenderisalsoincluded
actor systems could potentially exist in different companies. in the message, the recipient (newly started actor) also knows
Given that a network connection exists, they are able to the address of the sender. Therefore, in the simplest case, no
provide a way of communication between the companies. actual actor discovery is needed.
As previously defined it is a requirement that the users are However, this is only the case as long as only one start
abletointeractwiththesystem(seesubsectionVII-A).Forthis actor exists. In addition, the message flow can only occur10
Fig.10. Detailedviewoncommunicationpaths
in the order of actor creation which does not fit real-world
applications e.g. processes with multiple start actors or actors Fig.11. Actordiscovery
communicating with actors not started by them. To prevent
falsely starting actors, actor discovery is needed and imple-
interface component (i.e. database, and also hard-coded in
mented in the director actor.
the generated program code), the instance information is only
The director has to store a variety of information about
storedinthedirectoractorhenceinmemory.Thelatterisalso
the currently running actors. This includes the association of
applicable to business objects. As a result, the persistence of
actors to a specific instance to ensure that no messages are
the actor system is a factor to be considered.
sentbetweeninstances(resultingindataleakageandpotential
Thefunctionalityofthedirectorcanfurtherincludeinstance
confusion). To utilise the data of the director, each actor has
management such as starting and stopping actors. Since the
to perform a lookup of some sort before sending a message,
directorhasaknownaddress,itispossiblefortheinterfaceto
especially creating a new actor. It is then the responsibility of
communicate with the director through the management actor
the director to hand out the addresses of the already existing
system. As a result, the functionality of the director can be
actors. This is also depicted in the detailed communication
utilised in the web service as well (e.g. status page, starting
paths shown in Figure 10.
or stopping actors).
Themainpointofthedirectoractorapproachistoprovidea
centralpointforallactorstoresolvetheaddressesofmessage 2) IO actor: As defined in the requirements, a workflow
targets. This raises the question how the director gets this engine has to support user interactions. For this concept, this
information. This can be done by various approaches, where is defined as an input or output action to the user (i.e. reading
thefollowingwaschosenfortheprototypicalimplementation. or manipulating business objects). In the concept depicted in
This approach (Figure 11) places the create action to the Figure 10 this functionality is designed in two steps. First a
actorAiftheaddressofBisnotknown.IfBiscreatedbyA, separateactor,theIOactor,isused,toutilisetheactorsystem’s
itregistersitselfwiththedirectoractor.Thedirectorbroadcasts internal and external communication mechanisms. Second is
thisinformationtoallactorswithinthisinstance(includingB). the user interface which enables the user to communicate
Either due to the direct creation process or by the broadcast, with the IO actor. The user interface is discussed in detail
A is now aware of B and vice versa. This would also be the in subsection VII-D.
case for a fictional actor C which receives the broadcast and TheideabehindtheIOactorissimilartothedirector.Over-
stores the addresses locally. Therefore, for a fictional C, the all, it provides a known actor for performing user interaction.
locally stored address would be reused, and no actor creation Therefore, it is the responsibility of the director to spread the
wouldbeperformed.Therefore,itiscrucialthatnewlycreated informationaboutavailableIOactors(e.g.atcreationtime).In
actors register themselves with the director immediately after addition, it is important that internal communication (between
instantiation. actor, IO actor, and user interface) only includes business
Another task of the director is keeping process instances objectdata.ItisnottheresponsibilityoftheIOactortocreate
separated by grouping actors together. For this reason, the a form for the user. In the contrary, this task is subject to the
director needs some form of ID to identify correlated actors. user interface.
This ID has to be used by the actors to identify themselves Internally, in the first step, the process actors request a user
whilecommunicatingwiththedirector.Therefore,aparametri- interaction from the IO actor. Since users need some form
sation is necessary at translation and instantiation time. The of context, this request further includes information about the
first includes information about the model, such as the name instance or state the request originates from. This information
andtheactorsystemtheactorshouldrunat(e.g.thecompany is partly hard-coded as well as initially given out by the di-
inmulti-companyscenarios).Thesecondcontainsinformation rector on actor startup (see subsubsection VII-C1). In general,
about the instance, including the instance ID. this information also needs to be transformed into some form
As those steps are done in separate components in the of human-understandable names (e.g. instance name, model
concept, the information is also stored in different places. name). The next step is that some form of interface requests
While information at translation time is stored in the user the pending user interactions from the IO actor. The actual11
user interaction occurs purely in the user interface. Therefore, business objects) during the process execution. Furthermore,
the IO actor acts as an intermediary between process actors the user interface does not only act as a method of user
and user interfaces. interaction but also maps users to its corresponding subject
After the user has performed the interaction, the interface in the model. Therefore, it holds the user information and can
sends back a request to the IO actor. Afterwards, a lookup on also be synchronised with existing directory services such as
which actor the request belongs to is performed, and the data Lightweight Directory Access Protocol (LDAP) or AD. This
is sent to the originating actor. As a consequence, the request allows for integration into organisational structures. Based on
is served and deleted by the IO actor. In order to identify this mapping, work is distributed to the responsible users or
an interaction request throughout the whole process, IDs are groups. The mapping from PASS subject to user or group
needed.Theoverallprocessisdepictedasasequencediagram could be done manually or automatically based on rules. For
in Figure 12. example,mappingrulescouldbebasedonnamingconventions
of subjects.
Furthermore, the user interface also exposes the additional
functionality to the users (in respect to the roles described in
subsectionVII-D).Thisincludesuploadingmodelsorcreating
process instances. Since the user interface is also in charge
of integrating with organisational structures, it can restrict
functionality based on roles. Therefore, an access control
system can be implemented.
Within the interface, at least two main roles are defined
for a privilege separation. First is the admin role which is
responsible for compiling and loading the models into the
actor system and second the actual user which is assigned to
a specific subject in the model. This can be done directly or
indirectly via group assignment and maps the responsibilities
of users to the subject within the model. Depending on the
specified actor type, the user is also able to start a new
process instance, otherwise, the user is only notified when an
interaction is requested by an actor. Therefore, the functions
available on the interface vary depending on the user’s role.
However, due to the separation of the user interface and
server side actor system (shown in Figure 9), different means
Fig.12. SequencediagramofIOactorcommunicationanduserinteraction
of communication between the interface and server side actor
system could be chosen. For example, interfacing with web
Furthermore,itispossiblethatmultipleIOactorsexist.The
requests would be possible when the server side actor system
only requirement is that they are all known to the actors. As
provides a web service. A separate management actor system
previously mentioned, it is the taskof the director to make IO
would not be necessary in such a scenario.
actors known. A use case for multiple IO actors is to provide
In addition, the interface component is responsible for
a variety of communication techniques. For example, instead
storing and parsing the uploaded model further translating it
of utilising internal communication through the management
toanactorsourcecode.Asaresult,italsoplaysanimportant
actor system (and therefore the user interface), web requests
role when it comes to traceability and logging. The generated
or publish and subscribe systems could be used. In such a
sourcecodeisstoredtwiceinthesystem,onceintheinterface
scenario, some logic has to be in place in order to select the
component (in plain text, for debugging and traceability), and
IO actor within the model or at runtime.
in the actor system itself where it can then be executed in the
Therefore, the IO actor could also be used to communicate
correct actor system.
with external systems as it is a requirement for workflow
engines (see subsection VII-A). For example, it could handle
E. Logging and traceability
API calls in a centralised place. As an alternative, this logic
Logging and traceability are important requirements for
could be baked directly into the actor’s code, leading to
workflow engines as described in subsection VII-A. The pro-
reduced flexibility. For example, it would not be possible to
posed approach includes multiple layers of logging while also
changetheaddressofanAPIwithoutmodifyingthegenerated
providingwaystoensuretraceabilitywhichareinherenttothe
code (and also redeploying it).
codegeneratorapproach.First,basicloggingfunctionalitycan
beimplementedintheuserinterface(tologinformationabout
D. User interface and user roles
user interactions, access logs, etc.). Second is the logging
In order to provide a method for users to interact with the within the actors themselves. Given that a centralised logging
system, a user interface is necessary. In addition, as listed actor exists, the code generator can add log statements to the
in subsection VII-A, it has to provide a task list as well as code. Therefore, information about the execution can easily
a way for entering and manipulating data (i.e. working with be collected.12
The generated code is stored twice and in plain text. As a TABLEII
result, it is possible to read the code that is executed which SUMMARYOFSUPPORTEDPASSLANGUAGEELEMENTS
canbeusefultoidentifypotentialproblemsbeforetheyoccur.
Element Limitationsandrestrictions.
Subjects Supported,butwithoutmulti-subjectsupport.
F. Security and multi-company considerations Messages Supported,prioritiesandmulti-subjectsnotsupported.
Business ob- Onlybasicdatatypessuchasintegers,stringsanddates
As previously stated, multiple distributed actor systems
jects aresupported.
can be interconnected. This does bring benefits when it Send-states Supported,butwithoutalternativemessagesincasethe
comes to scalability and redundancy but also opens up the primaryonecouldnotbesentandwithoutmulti-subject
support.
possibility for multi-company deployments of the concept.
Receive-states Supported,withoutprioritiesandmulti-subjectsupport.
Conclusively, the execution of process models which include Do-states Supported,butonlywithuserinteraction.
subjects residing in different companies would be possible. Time- OnlyDayTimeTimerTransitionissupported.
transition
Theproposedapproachassumesthattheactorsgeneratedfrom
such models are executed on the actor systems running the
corresponding companies. Therefore, the placement of actors
A. Code generator
onactorsystemshastobecontrolled.Thisscenarioisalready
The code generator is responsible for parsing the model
depicted in Figure 9 with two different companies (Server
uploaded by the user using the web interface and translating
actor system 1 and 2).
it into Python code. According to literature [21], approaches
Furthermore,theinternalactorsneedadditionalmechanisms
utilisingtheAbstractSyntaxTree(AST)couldbeused.How-
in place to support multi-enterprise scenarios. Those mecha-
ever, for the sake of simplicity a templating approach is used
nisms would have to ensure that no internal information gets
in the prototype. This approach allows for easy integration
shared between companies and companies can be added in
withtheowlready2modulewhichbasicallygeneratesaPython
a hot-plug scenario. Additionally, user interaction as well as
class structure from the PASS ontology. This generated class
external service calls must be routed correctly.
structure can then be extended with methods which return
However, this adds complexity to the internal structure
template code. Therefore, it is only needed to iterate through
and some security considerations have to be taken. It is
the model to call the corresponding method and combine the
assumed that the communication between the actor systems is
templatesnippetsintoavalidactorsource,readytobeusedby
confidentialwhichcaneitherbeassuredbytheimplementation
Thespian. This approach is supported by the general structure
itself (e.g. communicating through encrypted protocols) or by
of the Thespian actor classes. The steps occurring within the
utilising a Virtual Private Network (VPN) [22].
code generator component are depicted in Figure 13
Furthermore, it has to be ensured that a company cannot
introduceandexecutemaliciouscodeintotheothercompany’s
actor system. This concept does not include an explicit per-
mission system for a company to select which actors can be
started by other companies. A possible solution would be the
use of a Public Key Infrastructure (PKI), to only allow signed
code to be executed.
VIII. WORKFLOWENGINEPROTOTYPE
Inthissectionaprototypicalimplementationoftheconcept
Fig.13. Internalprocedureofthecodegeneratorimplementation
presented in section VII is described in detail. Overall the
focus is on the basic constructs of PASS while additional
In the following sections, the code generated for each
elements are taken into consideration since they are needed
supported element in the OWL is described in detail. This
for the validation patterns. Extended language elements aim
includes the three main states along with time-transitions as
to reduce model complexity but can also be modelled using
well as the initialisation and exiting phases. All PASS models
onlythebasicconstructs[23].Therefore,itisbeyondthegoal
are created using the Microsoft Visio shapes developed by
oftheprototypetosupportthemaswell.InTableIIasummary
Matthes Elstermann in [25] and utilise the PASS language.
of supported elements along with their limitations is given.
1) Subjects: Each subject in the SID of a supported model
For the implementation the programming language Python is represented by a FullySpecifiedSubject in the
alongside the frameworks Thespian1 (for the actor system),
OWL. Those subjects are translated into actors which derive
Django2 (for the web interface) as well as owlready2 [24] from the ActorTypeDispatcher class, provided by the
and lxml3 (working with ontologies and XML) are used.
Thespian framework. As a result, for each subject, a file
In general, the structure matches the concept described in
containing a class is generated. This class contains the actual
sectionVII.Forthisreason,theinnerstructureisalsodepicted
behaviour of the subject and consists of multiple methods.
in Figure 10.
Those methods represent the state transitions while the logic
of the states is contained within those methods.
1https://pypi.org/project/thespian/
2https://www.djangoproject.com/ A method can only be triggered by an incoming message
3https://pypi.org/project/lxml/ and its type. Therefore, each method is (by its method name)13
linked to a data type or class. If a message of a data type tion VIII-C) and IO actor (described in subsection VIII-D).
is received by the actor, the corresponding method is called. To differentiate the requests, a type key is contained in the
Therefore, the class consists of a set of loosely coupled dictionary indicating the message type. This allows reusing
methods that are named after a data type or class (i.e. the initialisation method for other purposes such as handling
receiveMsg_dictincaseofadictionary).Automaticstate the broadcast originating from the director when a new actor
changes (e.g. after a send-transition) can be implemented by registers itself.
sending messages to the actor itself. The actual initialisation process consists of storing a set of
Furthermore, an annotation is used to ensure proper actor values received as part of the initialisation message, including
placement on the desired actor system. This ensures that no theaddressofthedirectorandIOactoraswellasinformation
actors are wrongly placed within the management actor sys- about the instance such as name and ID. Furthermore, this
tem. In multi-company scenarios, this could be used to ensure routineisresponsibleforregisteringthisactorwiththedirector
the correct placement of actors according to the association by its instance ID. After the initialisation routine is done the
with a company. behaviour continues as described in the SBD.
To summarise, a mapping of the PASS-transitions to the 3) Do-states: A do-state indicates the execution of an
ActorTypeDispatcher class is done by modelling the internal action or function. For this prototype, this is assumed
transitions as messages send to the actor itself. The state tobedonebyahumanfordemonstrationpurposes.Therefore,
logic is included in methods triggered on incoming messages. eachdo-stateresultsinauserinteraction.However,automated
Therefore, as a general structure, each state within the PASS tasks can be implemented by injecting arbitrary code instead
modelcorrespondstoamethodwhichistriggeredonadefined of a user interaction which could potentially lead to code
data type representing the incoming transition and sends a simplifications. For functions executed by humans, a user
message with the data type corresponding to the outgoing interaction is required which the prototype implements in a
transitiontoitself.InFigure14,thispatternisvisualisedusing two step process.
pseudocode and a pseudo model. Thefirstmethodistriggeredbytheincomingtransitiondata
type according to the overall concept (see Figure 14). This
firstmethodisresponsibleforsendinganIOrequesttotheIO
actor.Afterwards,amessagetypeisstoredlocally.Thereceive
method for this type represents the second step within this
process. After the IO actor responds, the initialisation routine
is triggered. This is due to the usage of Python dictionaries
(see subsubsection VIII-A2). Within this routine, a message
of the type previously stored is created and sent to the actor
itself triggering a state transition.
Boundtothereceivemethodofthistype(Pythondatatype,
(a)Generalstatestruc-
ture not dict at this point), is the second method. Included in
this message is a JSON string representing the user input.
class MyActor: This data is stored in local variables according to the data
func receive_IncomingTransition(): mapping defined in the model and, if multiple transitions are
ExecuteStateLogic(SomeState) possible,theselectedoneistriggered.Forfurtherclarification,
SendMessage(myself, OutgoingTransition) the sequence diagrams Figure 12 and Figure 15 are given.
(b)GeneralPythonstructuregeneratedfromastate
Fig.14. Visualisationandpseudocodeofinternalactorstructure
Toenforceastrictorderofexecution,eachstatechecksifit
is currently allowed to be executed. If this is not the case, the
methodsimplyexits.However,incaseamessagefromanother
actor is received, the message is stored in the input-pool for
further processing.
2) Initialisation and internal message dispatching: After
the initial start, the actor requires information about the
environment in order to operate correctly (e.g. address of
the director for registration, instance ID). This information
is given as a message by the creating actor and is processed
in an initialisation routine. This method is triggered when a
dictionary data type is received which can originate from the
director or another process actor, depending on the logic of
the mode.
Furthermore, built-in types (such as dictionaries) are also
used to communicate with the director (described in subsec- Fig.15. CommunicationofaprocessactorwiththeIOactor14
4) Receive-states: The receive-state is a simple construct. initialisation message is sent immediately. After the actual
It consists of a method which is triggered by a message message is transmitted, the outgoing transition message is
received from other actors. This matches with the overall triggered.
structure of the ActorTypeDispatcher class stemming 6) Time-transitions: Time-transitions can originate from
from Thespian. As a consequence, the overall logic is quite everystateandhaveanonblockingbehavioursimilartoanIO
simple, since it only includes data mapping and triggering request. If a state has an outgoing time-transition (the proto-
the outgoing transition. However, since it is also possible that type only supports the type DayTimeTimerTransition),
the receive-state represents an end-state, it can also trigger an the target state type is stored in a global variable and a wake-
ActorExitRequest. up message of the Thespian framework is scheduled. This
Furthermore, a receive-state is a method of acquiring the messageisreceivedbythereceiveMsg_WakeupMessage
address of another actor. This is used as a fallback in case method and a message of the type pending is generated.
an ”addressbook” request is not received in time, e.g. when However, if a time-transition is not triggered, there is no
the director responds after an initial send-state. As previously functionality offered by Thespian to cancel a pending wake-
mentioned, the receive-state is special when it comes to upmessage.Inthiscase,eachnewstate(omittedinalllistings)
enforcing execution order. clears the timeout variable. Then, if the wake-up message is
In the case of receive-states, the message is stored in a list received, it is simply ignored, since the pending variable is
(representing the input-pool in the PASS concept) if received empty. Similar to an actor exit, all pending IO requests are
outside of the correct state. Afterwards, each receive-state cancelled if the originating state was a do-state.
checksifamessageoftheneededtypeisalreadystoredinthe 7) Exiting: In general, actors are executed until an Actor
poolandprocessesitbysendingittoitself.Asaconsequence, ExitRequest is received. This message is handled in the
messages are processed in a FIFO manner, and if no needed same way as other messages, but after the corresponding
message can be found in the pool, the subject goes on to receiveMsg_ActorExitRequest method, the actor is
waitingfortherequiredmessage.Incasethemessageistaken killed by the actor system. Therefore, this behaviour is used
from the pool, the original sender address is not preserved. to ensure that all pending IO requests are cancelled and the
The messages triggering all other states originate from the actor deregisters itself from the director. However, if the actor
actor itself. If such a message is received outside an allowed has created any subsequent actors in its lifetime (child actors)
state,themessageissimplydiscardedtoensureaproperorder the request is propagated, and they are terminated as well.
of states. This behaviour generally does not match the independence of
5) Send-states: A send-state is, as the name implies, re- subjects and can be prohibited by setting the recursive flag to
sponsible for sending messages to another actor. However, false when creating an ActorExitRequest.
it is also the responsibility of a send-state to ensure that Furthermore, this approach does not fully comply with the
the other party exists. Therefore, the send-state generates a PASS specification where an end-state leads not necessarily
message according to the data mapping specified and tries to to the termination of a subject. Instead, a subject can be
findtheactoraddressoftherecipient.Thisprocessisdepicted reactivated and is only terminated when all other subjects
in Figure 16. At first, it is checked if the recipients address is within this process are also in an end-state. This behaviour
available locally. Usually, this information is acquired as part is not available in the prototype.
of the addressbook request, broadcasted by the director. 8) Data handling and classes: The core concept of the
Thespian ActorTypeDispatcher class are methods trig-
gered by the receipt of messages. The exact method depends
on the type of the message. Therefore, the types and mes-
sages are closely related to the code generator. As previously
mentioned, a file is generated for each subject in the model.
Besides that, a common file consisting only of data classes
is generated as well. This contains classes used for state
transitionsinternallyaswellasmessagedefinitions.Therefore,
a message content can simply be modelled by a class and
its variables. In case there is no data mapping available for
a message, a simple placeholder content is used. Internal
messages exhibit the same structure.
Inordertogenerateaformfortheuserwithintheinterface,
additionalinformationsuchasdisplaynameanddatatypeare
stored as well. This is needed since Python is a dynamically
Fig.16. Flowchartoftheinternalsend-statelogic
typed language and types are given in the model. Based on
If there is no actor address available that was broadcasted thedatatype,specialinputfieldssuchasdate-pickersfordate
before, a local variable is consulted. Actor addresses are and time data are generated.
stored in this variable when a message is received. This Data access within states is done by mappings (incoming
serves as a backup to ensure that a new actor is only created and outgoing) and data access mappings (within do-states,
when necessary. Otherwise, a new actor is created and the defining read/write variables). Data mappings simply result15
in variable assignments in do- and receive-states and a new seeninthedirectorcomponentoftheframework4.However,it
object instantiation in case of a send-state. isoutofscopefortheprototypewithinthispapertoimplement
However, a formal method of expressing data mappings is such a mechanism.
notstandardisedwithinthePASSstandard.Asaconsequence,
the XML-literals used are a result of the internal workings of
C. Director
the Microsoft Visio shapes [26].
9) Multi-subject support: Multi-subjects are not directly Thedirectoractorisresponsibleforholdingtheinformation
supported by the code generator. However, if the number of of currently running actors in the system as well as executing
subjects is known while modelling the desired behaviour can thestartandstopoperations.Therefore,allactorscorrespond-
be implemented manually. On the execution side, the actor ing to process instances can be seen as child of the director
systemuseddoesnotenforceanylimitationsonthenumberof actor. With this approach, the director always knows where
actorsrunning.Therefore,thesupportofmulti-subjectscomes the actors are located and gets informed by the system if
down to the code generator component. errors are occurring. Its main purpose is to serve as a central
In order to implement multi-subjects correctly, certain as- point for finding other actors within a process instance (actor
pects have to be taken into consideration. This includes discovery, subsubsection VII-C1). Furthermore, the director
questions regarding where actors are started (creating a new actor is highly involved in the initialisation process which is
oneversusreusinganexistingone),referringtoactors(which discussed in subsubsection VIII-A2.
instance is the correct recipient? how are references stored?), All actors generated by the code generator described in
and how data handling is done. Given that this information is subsection VIII-A register themselves with the director on
provided in the model as well as in the PASS definition, an startup. This also occurs when they are started by another
implementation is most likely possible. However, concerning actorinaninstance.Inaddition,theyalsosendaderegistering
those questions, some aspects may not be fully specified at message on exit. Since this includes messages across multiple
this point [26]. source code versions, only build in data types can be used. In
thiscase,thecommunicationheavilyreliesondictionaries(i.e.
the Python data type dict). Similar to the generated actors,
B. Runner
the director is also based on the ActorTypeDispatcher
The runner is a component within the web interface ap-
class.
plication and is responsible for administrative interaction be-
The director described should not be confused with the
tween the GUI and the Thespian actor system. This includes
integrated director of Thespian which provides similar func-
operations such as loading and unloading source code as
tionality. For a possible future implementation, this integrated
well as starting and stopping actors. This is done in close
director can be further examined. Furthermore, the director
coordination and interaction with the director actor described
plays an important role in multi-company scenarios. For
in subsection VIII-C. Internally, the runner starts an actor
this use case, further development regarding synchronising
system itself when called which connects to the server side
multiple instances could be needed. Additional considerations
actorsystemtoestablishawayofcommunication.Therunner
regarding this use-case are described in subsection VII-F.
itself only functions as an interface to the actor system and
does not act directly on actors. Instead, it interfaces with the
D. IO actor
director to perform its operations.
The IO actor is responsible for holding information about
pending interaction requests. Therefore, it is, alongside the
director actor, a main point of information for the runner. It
consists mainly of two Python dictionaries, the first holding a
JSONstringcontainingtheinformationnecessaryforthefront
end,suchasdatatypesandinputfields.Thesecondoneholds
the address of the actor requesting the interaction.
Fig.17. Placementandcommunicationoftherunnercomponent Thisislinkedwithaclasswideiterator,generatinganindex
which is also sent back to the requesting actor for further
In addition, the runner is responsible for managing the data
referencing this request (ioack message). A common use
transfer between the web interface and the IO actor described
caseforthisindexusedasID,isthecancellationofinteraction
in subsection VIII-D. All references as well as the actor
requests in case the requesting actor exits, or the state is
system object itself is held and managed through a singleton
changed by a time-transition. The overall concept is depicted
object. This ensures that only one actor system is used for
in Figure 15.
management and the references to the IO actor and director
are correct.
Apossiblesecurityconcernarisesfromthedynamicsource E. Web interface
loading functionality. It could open up an attack vector where Theinterfaceisrequiredtoallowforcomfortableinteraction
malicious code is introduced into the system. In order to for users with the system. In addition, it also integrates some
mitigate this problem, Thespian provides the possibility to
validate loaded sources via certificates. A reference can be 4https://thespianpy.com/doc/director.html(Retrieved:31.07.2022)16
of the previously mentioned components such as the runner Visio shapes. For BPMN models exported from Signavio and
and code generator. Furthermore, it serves as a repository for Camundaaretested.AllOWLfilesarecheckedusingProte´ge´
compiled models that can be loaded into the actor system on 5 and a reasoner to check if they conform to the standard
demand. Internally, a database (SQLite for the prototype) is PASS ontology. Furthermore, the models used are based on
usedforstorageandawidevarietyofdatabasesaresupported the service interaction patterns described in [27] and [28] and
due to the use of the Django ORM feature. their usage as language benchmark is suggested in [29]. The
modelsarefurtherheavilybasedontheBPMNinterpretations
described in the master’s thesis of Stefan Raß [30]. In an
F. Logging and monitoring
execution step, the behaviour shown is evaluated based on the
Thespian itself provides a central logging actor. Therefore,
descriptions available in literature.
eachactorisabletowriteloginformationwhichcanbewritten
toafile.Theexactformataswellasloglevelscanbedefined
on an actor system level. However, it is the responsibility of A. Modelling in MS-Visio and execution with coreASM work-
the actor itself to decide which information is logged. flow engine
Since the code of the actor is generated, logging statements In its original form the coreASM based workflow engine
can be injected into the template code by the code generator. is developed before or in parallel to the OWL standard. As
This approach allows for great flexibility considering which, a result some differences are to be expected. As a further
how and when data is logged within a running actor. When note, the current publicly available version of the ASM based
it comes to the web interface, the used framework Django workflow engine does not support importing OWL models.
alsoallowsintegrationwithstandardPythonloggingtoolsand However, the engine described in [31], [32] is able to handle
stores the models and the generated code for traceability. OWL models and was therefore used for testing. While the
tests succeeded and the desired execution behaviour was
shown, warnings indicated that enhanced checks performed
G. Additional limitations and possible improvements
by the workflow engine were not successful. This could be
The main goal is to prove the feasibility of the concept
a result of constraints as described in [33] as well as other
developed in section VII. Therefore, this prototype exhibits
currently unpublished work.
shortcomings and is not intended for real-world use.
A major limitation of the prototype is persistence. The
prototype heavily relies on the states and data stored within B. ModellinginMS-VisioandexecutionwithPythonworkflow
the actor system and in specific administrative actors (i.e. IO engine
actor,director).Currently,thereisnosysteminplacetopersist
The OWL exportedfrom MS-Visio was used asa reference
this data in case of a restart. However, mechanisms exist to
when developing and testing the workflow engine prototype.
achieve the desired behaviour as stated in the documentation
Therefore, the prototype is able to execute the models as
but are not included in the prototype.
expected. However, the MS-Visio OWL shapes (at the time
Furthermore, explicit handling of external API calls is not of development and testing, being also a work in progress)
included. This functionality only needs to be implemented in exhibitsomespecificswhichneededtobetakencareofinthe
thecodegeneratorsincePythonisabletomakeawidevariety prototype specifically on how business object definitions are
ofexternalcalls.Asaresult,theconceptisabletohandlethis stored.
requirement without conceptual changes.
The current implementation does not check any message
C. Modelling in BPMN with BPMN tool and execution with
priorities but just operates in a FIFO manner. Prioritisation
Python workflow engine
could be implemented by checking priorities when the mes-
sage is taken from the pool or by reordering the pool. This As a starting point for modelling BPMN the tools Signavio
forms basically an additional layer on top of the input queue and Camunda were used. Based on the exported XML the
of Thespian. converter was developed. The resulting OWL conforms to
Another limitation is the complete support for multiple the standard to such an extend that there where no specific
companies. While the actor systems can be distributed, the modifications of the workflow engine needed to handle the
director is implemented as a singleton. Therefore, it cannot executionofthosemodels.Inaddition,theexecutionlogicwas
synchronise with other directors. Furthermore, multiple IO identical to the models generated with the MS-Visio shapes.
actors are not supported which would be necessary to address
the correct user interface.
D. Modelling in BPMN with BPMN tool and execution with
coreASM workflow engine
IX. POSSIBLEUSECASESCENARIOS
As described in subsection IX-A, while showing that the
Due to the usage of PASS as an intermediary language a
workflow engine is able to execute the models under test,
varietyofusecasesbecomepossible.Inthefollowingchapter
somewarningswhereexhibitedwhichneedfurthertestingand
someofthemaretestedinasystematicmanner.Thevalidation
research.
procedureeitherstartswithaBPMNmodelwhichistranslated
toaPASS(OWL)modeloraPASSmodelgeneratedwiththe 5https://protege.stanford.edu/17
An incompatibility occurs within the timer-transition- between the two paradigms, only a subset of elements have
condition. The coreASM workflow engine requires a has been specified to be translatable. As a result of this trans-
DurationTimeOutTimeattributewiththedatatypexsd: lation, the well-known BPMN syntax is enhanced by the
duration. However, the translated models contain this at- formally described PASS execution semantics. Furthermore,
tribute with the data type xsd:string. Within the PASS the currently only available tool for modelling PASS was
ontology both data types are valid for this attribute. By verifiedtobeabletoimportthetranslatedPASSfilescorrectly.
manually changing the data type the execution of the models Both, translated files as well as directly modelled PASS files
with the coreASM workflow engine works. were then executed using two different PASS based workflow
engines. The first one is a reference implementation of the
E. Modelling in BPMN with BPMN tool and continue mod- formalPASSASMsemanticswhichalreadyexists.Thesecond
elling with MS-Visio one is a workflow engine also designed and developed in this
paper based around translating the OWL model to executable
The MS-Visio shapes are able to import models stored
Python code.
as ontology files by using an Visio plug-in6. Those models
The results show that the approach of PASS as in interme-
can then be further edited and exported again. However,
diary language between workflow engines could be feasible
since the translated models do not contain information about
to streamline interchangeability of execution logic between
the graphical representation, the graphical representation is
workflow engines.
generated by the plugin. In some cases this could lead to the
In the execution of business processes people, software,
need of manual repositioning of elements in order to simplify
physical devices and combinations of these implementation
the further modelling process.
techniquesareinvolved.Inourfeasibilitystudy,onlysoftware
and people as implementation technology are considered.
F. Modelling in PASS with MS-Visio and continue modelling
The integration of physical devices in business process is
with BPMN tool
the subject of further investigations. A general approach to
The converter is able to translate a PASS model back to resource management and authorisation is described in [34]
BPMN which adds another verification layer since it could [35]. In further research, it has to be investigated how these
be compared to the source file. However, information about conceptssupportmethod-andtool-independentdeploymentof
the graphical representation is lost in the translation process. business processes across various organisations.
Therefore it is currently not possibly to re-import the BPMN
file into Signavio or Camunda. The translation of the BPMN
REFERENCES
diagram interchange to OWL and vice versa could be subject
of further research. [1] R. Markus, C. Antonio, S. Bernd-Holger, S. Gerardo, and S. Siraj,
Ahmed, Formal Methods for Software Engineering: Languages, Meth-
ods, Application Domains (Texts in Theoretical Computer Science. An
X. CONCLUSION EATCSSeries). SpringerBerlinHeidelberg,2023.
[2] OMGWorkingGroup,“BPMN2BusinessProcessModelandNotation
In this paper, a feasibility study is described which aims
(SecondEdition),”OMGRecommendation,Tech.Rep.,2014.
to determine to which extent workflow engines are able to [3] W3COWLWorkingGroup,“OWL2WebOntologyLanguageDocu-
execute control flow logic specified in various modelling mentOverview(SecondEdition),”W3CRecommendation,Tech.Rep.,
2012.
paradigms. This is an important aspect if parts of a process
[4] E.Bo¨rgerandS.Robert,AbstractStateMachines:AMethodforHigh-
arerunningindifferentorganisations.Ifprocessmodelscanbe LevelSystemDesignandAnalysis. SpringerBerlinHeidelberg,2003.
specified by different modelling languages and corresponding [5] R. Singer, “An ontological analysis of business process modeling and
execution,”2019.
tools, organisations can use their preferred methods and tools.
[6] T. T. Braunauer, “BPMN zu PASS : U¨bersetzung von
Especially if complex cross-organisational processes have to Gescha¨ftsprozessmodellen,” Master’s thesis, FH JOANNEUM -
bedescribed,eachorganisationcanapplyitsexistingtoolsetif UniversityofAppliedSciences,2022.
[7] G.Zeisler,“Automaticcodegenerationfrombusinessprocessmodels,”
acommonstorageformatisused.Basedonthatstorageformat
Master’s thesis, FH JOANNEUM - University of Applied Sciences,
different execution platforms can be applied in the various 2022.
involved organisations. [8] M. Kurz, “Bpmn model interchange: The quest of interoperability,”
in Proceedings of the 8th International Conference on Subject-
In this study as paradigms under test the industry standard
Oriented Business Process Management - S-BPM One. ACM Press,
modellinglanguagesBPMNandPASShavebeenchosen.The 2016. [Online]. Available: https://dl.acm.org/doi/abs/10.1145/2882879.
first one due to its widespread adoption and the later for its 2882886
[9] B. M. I. W. Group, “2022 model interchange capability demo,” 2023.
formally described execution semantics.
[Online]. Available: start[BPMNModelInterchangeWorkingGroup]
Tofillthisgapbetweenthelanguagesaconceptwasdeveloped (omgwiki.org)
toallowbothmodellingparadigmstobeinterchangeablyused [10] F. Kossak, C. Illibauer, V. Geist, J. Kubovy, C. Natschla¨ger,
whenitcomestoexecutionofthecontrolflow.Thiswasdone T. Ziebermayr, T. Kopetzky, B. Freudenthaler, and K. Schewe, A
RigorousSemanticsforBPMN2.0ProcessDiagrams. Springer,2014.
by defining PASS as an intermediary layer due to its more
[Online].Available:https://doi.org/10.1007/978-3-319-09931-6
formal specification. Therefore, in the first step, a translator [11] Wikipedia, “List of bpmn 2.0 engines,” 2023. [Online].
from BPMN in its XML form to PASS in its OWL form Available: https://en.wikipedia.org/wiki/List of BPMN 2.0 engines,
lastaccessJune2023
was designed and implemented. Due to structural differences
[12] A. Fleischmann, W. Schmidt, and C. Stary, “A Primer to Subject-
OrientedBusinessProcessModeling,”inS-BPMONE–ScientificRe-
6https://github.com/MatthesElstermann/ALPS-Visio-Add-In search,ser.LectureNotesinBusinessInformationProcessing,C.Stary,18
Ed. SpringerBerlinHeidelberg,2012,vol.104,pp.218–240.[Online]. Transformation: 12th International Conference, S-BPM ONE 2020,
Available:http://link.springer.com/10.1007/978-3-642-29133-3 14 Bremen,Germany,December2-3,2020,Proceedings.Ed.:M.Freitag,
[13] A. Fleischmann, W. Schmidt, C. Stary, S. Obermeier, and E. Bo¨rger, ser.CommunicationsinComputerandInformationScience(CCIS),vol.
Subject-Oriented Business Process Management. Springer Berlin 1278. Springer,2020,pp.33–45.
Heidelberg,2012.[Online].Available:http://link.springer.com/10.1007/ [34] A. Lawall, T. Schaller, and D. Reichelt, “Resource management and
978-3-642-32392-8 authorizationforcloudservices,”inProceedingsofthe7thInternational
[14] R. Farahbod, V. Gervasi, and U. Gla¨sser, “An extensible asm execu- ConferenceonSubject-OrientedBusinessProcessManagement-S-BPM
tion engine,” in Proc. 12th International Workshop on Abstract State One. ACMPress,2015.
Machines,2005,p.153–165. [35] ——, “Role and rights management (1 ed.),” in S-BPM in the Wild:
[15] M. Elstermann, A. Wolski, a. Fleischmann, C. Stary, and S. Borgert, PracticalValueCreation. SpringerVerlag,2015.
“The combined use of the web ontology language (owl) and abstract
state machines (asm) for the definition of a description language for
business processes,” in Logic, Computation and Rigorous Methods.
Springer,2021,pp.283–300.
[16] H. Moattar, W. Bandara, M. Rosemann, and U. Kannengiesser, “Are
standardsalwaysbestforprocessmodelling?anexplorationofbpmnvs
s-bpm,”submittedforpublication,2021.
[17] N.Luhmann,SocialSystems. SuhrkampVerlag,1984.
[18] R.Milner,CommunicationandConcurrency. PrenticeHall,1989.
[19] A.Hoare,CommunicatingSequentialProcesses. PrenticeHall,1985.
[20] J. Habermas, Theory of Communicative Action Volume 1, Volume 2.
SuhrkampPaperbackScience,1981.
[21] R. Singer, “Agent-Based Business Process Modeling and Execution:
Steps Towards a Compiler-Virtual Machine Architecture,” in
Proceedings of the 8th International Conference on Subject-oriented
Business Process Management. ACM, 2016, pp. 1–10. [Online].
Available:https://dl.acm.org/doi/10.1145/2882879.2882880
[22] H. Hamed, E. Al-Shaer, and W. Marrero, “Modeling and Verification
of IPSec and VPN Security Policies,” in 13TH IEEE International
Conference on Network Protocols (ICNP’05). IEEE, 2005, pp. 259–
278.[Online].Available:http://ieeexplore.ieee.org/document/1544626/
[23] A. Fleischmann, “What Is S-BPM?” in S-BPM ONE – Setting
the Stage for Subject-Oriented Business Process Management, ser.
Communications in Computer and Information Science, H. Buchwald,
A. Fleischmann, D. Seese, and C. Stary, Eds. Springer Berlin
Heidelberg, 2010, vol. 85, pp. 85–106. [Online]. Available: http:
//link.springer.com/10.1007/978-3-642-15915-2 7
[24] J.-B. Lamy, “Owlready: Ontology-oriented programming in Python
with automatic classification and high level constructs for biomedical
ontologies,” Artificial Intelligence in Medicine, vol. 80, pp. 11–28,
2017. [Online]. Available: https://linkinghub.elsevier.com/retrieve/pii/
S0933365717300271
[25] M. Elstermann, “Proposal for Using Semantic Technologies as a
Means to Store and Exchange Subject-Oriented Process Models,”
in Proceedings of the 9th Conference on Subject-oriented Business
Process Management. ACM, 2017, pp. 1–9. [Online]. Available:
https://dl.acm.org/doi/10.1145/3040565.3040573
[26] ——,PersonalCommunication,2022.
[27] A.Barros,M.Dumas,andA.H.M.terHofstede,“Serviceinteraction
patterns,” in Business Process Management, W. M. P. van der Aalst,
B. Benatallah, F. Casati, and F. Curbera, Eds. Berlin, Heidelberg:
SpringerBerlinHeidelberg,2005,pp.302–318.
[28] A.Barros,M.Dumas,andA.Ter,“Serviceinteractionpatterns:Towards
a reference framework for service-based business process interconnec-
tion,”p.23,012006.
[29] M.Weske,BusinessProcessManagement:Concepts,Languages,Archi-
tectures,ser.SpringerLink:Springere-Books. Springer-VerlagBerlin
Heidelberg,2007.
[30] S. Raß, “Requirements for and Capabilities of Cloud Based BPMS,”
MasterThesis,FHJOANNEUM-UniversityofAppliedSciences,2013.
[31] M. Elstermann and A. Wolski, “Mapping Execution and Model
Semantics for Subject-Oriented Process Models,” in Subject-Oriented
Business Process Management. The Digital Workplace – Nucleus of
Transformation, ser. Communications in Computer and Information
Science, M. Freitag, A. Kinra, H. Kotzab, H.-J. Kreowski, and
K.-D. Thoben, Eds. Springer International Publishing, 2020, vol.
1278,pp.46–59.[Online].Available:https://link.springer.com/10.1007/
978-3-030-64351-5 4
[32] A. Wolski, S. Borgert, and L. Heuser, “A CoreASM based reference
implementation for subject-oriented business process management
execution semantics,” in Proceedings of the 11th International
Conference on Subject-Oriented Business Process Management -
S-BPM ONE ’19. ACM Press, 2019, pp. 1–15. [Online]. Available:
http://dl.acm.org/citation.cfm?doid=3329007.3329018
[33] M.ElstermannandA.Wolski,“Performanceinvestigationandproposal
for updates on the exchange standard for pass,” in Subject-Oriented
Business Process Management. The Digital Workplace – Nucleus of