Ramsey Theorems for Trees and a General
‘Private Learning Implies Online Learning’ Theorem
Simone Fioravanti∗ Steve Hanneke† Shay Moran‡,§,¶ Hilla Schefler‡
Iska Tsubari‡
Abstract
This work continues to investigate the link between differentially private (DP) and online
learning. Alon, Livni, Malliaris, and Moran [4] showed that for binary concept classes, DP
learnability of a given class implies that it has a finite Littlestone dimension (equivalently, that
it is online learnable). Their proof relies on a model-theoretic result by Hodges [36], which
demonstrates that any binary concept class with a large Littlestone dimension contains a large
subclass of thresholds. In a follow-up work, Jung, Kim, and Tewari [38] extended this proof to
multiclass PAC learning with a bounded number of labels. Unfortunately, Hodges’s result does
not apply in other natural settings such as multiclass PAC learning with an unbounded label
space, and PAC learning of partial concept classes.
This naturally raises the question of whether DP learnability continues to imply online
learnabilityinmoregeneralscenarios: indeed,Alon,Hanneke,Holzman,andMoran[5]explicitly
leave it as an open question in the context of partial concept classes, and the same question is
openinthegeneralmulticlasssetting. Inthiswork,wegiveapositiveanswertothesequestions
showing that for general classification tasks, DP learnability implies online learnability. Our
proof reasons directly about Littlestone trees, without relying on thresholds. We achieve this
byestablishingseveralRamsey-typetheoremsfortrees,whichmightbeofindependentinterest.
∗Department of Computer Science, Gran Sasso Science Institute (GSSI)
†Department of Computer Science, Purdue University
‡Department of Mathematics, Technion
§Departments of Computer Science, & Data and Decision Sciences, Technion
¶Google Research
4202
luJ
01
]GL.sc[
1v56770.7042:viXra1 Introduction
Ramsey Theory. In theoretical research, it often happens that a general result, born to address
a specific problem, proves to be of great interest by itself and inspires new original research. In-
deed, Frank P. Ramsey clearly set the primary goal of his seminal work [48] to be a problem of
formal logic and described his fundamental theorem in the abstract as a result of “independent
interest” useful in that specific setting. It was only a few years later, thanks to Erd˝os and Szekeres
[26], that Ramsey’s theorem, in its most well-known graph-theoretic variant, got the attention of
the mathematical community, marking the beginning of what is now a well-established branch of
mathematical research: Ramsey theory.
In a broad sense, Ramsey theory refers to a growing literature of results showing that, given a
partition of a mathematical structure into classes, if it is large enough, then it will admit a sub-
structure that is regular in some sense. The problem of quantifying what “large enough” means
is usually greatly challenging, and many existence results are not accompanied by quantitative
bounds on the so-called Ramsey numbers. As Erd¨os eloquently put it
Suppose aliens invade the earth and threaten to obliterate it in a year’s time unless human
beings can find the Ramsey number for red five and blue five. [...] within a year we could
probably calculate the value. If the aliens demanded the Ramsey number for red six and blue
six, however, we would have no choice but to launch a preemptive attack.
Open problems in Ramsey theory are of great independent interest, but are also significant in
combinatorics as a whole, since, as noted in [20], they were crucial in the development of different
theories (like random graphs and the probabilistic method [3]).
Applications of Ramsey theory, however, are not limited to combinatorics and formal logic but
extend to many areas of both mathematics and theoretical computer science: to name but a few,
number theory [53], convex geometry [9], ergodic theory [31], and lower bounds for computing
boolean functions [2]. A special mention goes to the quest for finding explicit constructions for
graphs witnessing the tightness of Ramsey theorems: these results raise great interest in theoretical
computer science because of their link with the theory of pseudorandomness. Some relevant works
on the subject are [18, 8, 29], while we refer to the book by Wigderson [56] for an overview.
We refer the interested reader to the book [34] for a detailed introduction to Ramsey theory and
to [50, 33, 49] for a broader survey of possible applications.
Ramsey Theory and Differential Privacy. Recently, Ramsey theory has been employed to
prove impossibility results in the differentially private PAC learning (or DP learning) model [41],
merging the requirements of differential privacy [23] with the ones of classical PAC learning [55].
Informally, arandomizedlearningalgorithm, denotedbyA, differentially-privatelylearnsaconcept
class H if (1) it is able to learn a target concept c ∈ H from a limited number of input data, and
also (2) given two training samples that differ by at most one example, the posterior distributions
over the outputs of A on the two of them are approximately the same.
In this context, it is natural to ask whether known PAC learnable classes can be learned by a
DP algorithm (i.e. assessing the “cost of privacy”). One of the most basic and best studied classes
is the one of linear classifiers (a.k.a. threshold functions) in Rd. While it is well known that this
class is PAC learnable, a seminal result by Bun, Nissim, Stemmer, and Vadhan [15] shows that it is
indeed impossible to properly DP learn it, by proving a lower bound on the sample complexity for
1one-dimensional thresholds. Later, in his thesis Bun [14] gave an alternative proof for this bound
using a Ramsey-theoretic argument.
A more recent work by Alon, Bun, Livni, Malliaris, and Moran [6] extends the same result to
improper PAC learners, again using a Ramsey-theoretic argument. Specifically, their result applies
more broadly to any class H of binary functions with unbounded Littlestone dimension LD(H) [42,
12]. This combinatorial parameter, defined as the maximal depth of a so-called Littlestone tree, is
known to control the online learnability of a class H. In particular, H is online learnable if and
only if LD(H) < ∞.
Interestingly, Bun, Livni, and Moran [16] demonstrated that a finite Littlestone dimension is
not only necessary but also sufficient for differentially private PAC learnability. This establishes
an equivalence between online learning and differentially private PAC learning for binary concept
classes. It is only natural to ask if similar methodologies could be employed to extend these results
to more general learning problems.
Online Learnability and Privacy: Beyond Binary Classes. While the application of Ram-
sey theory seems indeed promising, the proofs shown in [6] significantly rely on the equivalence
between LD(H) and the so-called Threshold Dimension TD(H) which is very specific to binary
classes. In other domains, in fact, even when it is possible to define a concept analogous to thresh-
olds (which is often not the case), such an equivalence is not guaranteed to exist.
An illuminating example comes from the domain of partial concept classes. These represent a
generalization of the usual notion of concept classes H (i.e., sets of binary functions X → {0,1})
to allow for partial functions X → {0,1,∗} (where “∗” denotes an undefined value); these are im-
portant for modeling within the PAC model natural data-dependent assumptions, such as learning
halfspaces with a margin. They were first considered by Long [44] and later developed further by
Alon, Hanneke, Holzman, and Moran [5]. Although some known principles holding for total con-
cepts remain valid for learning partial concepts (such as the equivalence between PAC learnability
and finite VC dimension), there are significant differences. In particular, Alon et al. [5] prove,
in fact, the existence of a binary partial concept class H having infinite LD(H) but TD(H) = 2,
as described in more detail in Section 2.1. Consequently, Alon et al. [5] leave as an open ques-
tion whether the relationship between online learning and private PAC learning extends to partial
concept classes.
A first extension of the result of Alon, Bun, Livni, Malliaris, and Moran [6] showing equivalence
of DP learnability to online learnability has been shown in [38, 52] for multi-valued concept classes
(or multiclasses): i.e., classes of total concepts for which the label space Y is not restricted to be
{0,1}. In particular, Jung, Kim, and Tewari [38] adapt the techniques used in [6] to prove that the
equivalence continues to hold in the case of a finite Y. However, such techniques break down in the
case of infinite label spaces Y, where in general the connection between LD(H) and threshold-like
notions no longer holds (see [35]).
Studying the relationship between private PAC learnability and online learnability in general
settings, such as partial concept classes or multiclasses with infinite label spaces Y, appears to
require techniques and results allowing to work on objects (like Littlestone trees) that are more
structuredthansimplethresholds. ThisinturnrequiresustoextendquantitativeresultsinRamsey
theory to such structures as well.
2Our Contribution. In this work, our contribution is twofold. First, we prove several Ramsey
theorems in the context of trees. In particular, we introduce a new notion of type for subsets
of vertices of a tree, and show its importance to build a flexible Ramsey theory for trees. By
differentiating subsets of vertices of a binary tree according to our definition of type, we are able
to show general existence results as well as quantitative ones in specific cases.
Second, we extend the impossibility result holding for binary DP learning to the more general
setting of partial concept classes with infinite label space Y. With the aid of our Ramsey theorems
ontrees, weareabletoarguedirectlyaboutLittlestonetreeswithoutpassingthroughthethreshold
dimension. In particular, our results address an open question in [5], by proving one direction of
the qualitative equivalence between DP and online learning for (binary) partial concept classes. It
remains open to show whether a finite Littlestone dimension implies DP-learnability in this case.
Moreover, we contribute to the understanding of this equivalence in the context of total multi-
classes, previously studied in [38, 52], by showing that DP-learnability implies online learnability
also in the case of an infinite label space Y. In this setting as well, it remains an open question
whether the opposite direction of the equivalence continues to hold.
Organization. The paper is organized as follows. The rest of this section provides a detailed
expositionofourmainresults inbothRamseytheoryandprivacyanddiscussesrelatedworks. Sec-
tion 2 highlights the technical aspects of our main proofs. Section 3 offers preliminary information
and relevant background. Lastly, Sections 4 and 5 present the full proofs of our results.
1.1 Main Results
This section presents the main technical contributions of the paper, focusing on the ideas and
intuitions behind them. In particular, Section 1.1.1 introduces our novel Ramsey-theoretic results
in the context of trees, in increasing order of complexity. Section 1.1.2 in turn focuses on their
application to private PAC learnability in the setting of partial concept classes and multiclass
classification.
1.1.1 Ramsey Theory for Trees
Ramsey stated his theorem in [48] for subsets of a given set. In its finite version, the theorem
states the following: for all d,m,k ∈ N, with m ≥ 2, there always exists a large enough number
n = n(d,m,k) ∈ N such that, given any set of size n, however we color its subsets of size m
with k colors, it admits a monochromatic subset of size d. Ramsey’s theorem can be considered as
a generalization of the pigeonhole principle, which corresponds to the case m = 1 and constitutes
a building block in the proof of the general theorem.
In our work, the main structure of interest is the complete binary tree T of a certain depth n.
Here, we consider to be a subtree of depth d any collection of 2d+1−1 vertices that is isomorphic
to the complete binary tree of depth d, in the sense that the left/right descendant relations are
preserved. Figure1aillustratesthisconcept. AsfortheclassicalRamseytheory, thefirstnecessary
step to build a solid Ramsey theory for trees is to prove the equivalent of a pigeonhole principle:
i.e., a result showing that, given d ∈ N and any coloring of a sufficiently deep tree T with k
colors, there exists a monochromatic subtree S of T with depth d. Such results already exist in
the literature. In particular, Hodges [36] show a version with our same definition of subtree, while
bothFurstenbergandWeiss[32]andPach, Tardos, andSolymosi[47]proveaquantitativelyweaker
3versionholdingforamorerestrictivedefinitionofsubtree. SeeProposition8foraformalstatement
of both versions.
(a)
(b)
Figure1: In(a)thecoloredverticesdenoteacandidateS forasubtree. Accordingtoourdefinition,
the S colored in red is the only legal subtree. The example in (b) shows a coloring of pairs
(coloring left relations, right relations, and incomparable relations in different colors) for which no
monochromatic subtree can exist.
Case of Pairs (m = 2). It is natural to ask if the existence of monochromatic subtrees is
possible if one considers colorings of subsets of vertices of a given size, as in the classical Ramsey’s
theorem. We argue that a na¨ıve extension like this one is not possible in the context of trees.
Let us consider the simplest possible case of coloring pairs of vertices of a complete binary tree T
of arbitrary depth. Consider coloring the pairs following the pattern depicted in Figure 1b; this
example admits neither a finite nor an infinite Ramsey theorem. The example works as follows.
Observe that, given any pair of vertices {u,v} of T, either u and v are comparable in the partial
orderinducedbythetreestructureortheyareincomparable. Defineacoloringχonpairsofvertices
as follows: χ({u,v}) = red if one of u or v is a left descendant of the other, χ({u,v}) = blue if one
of u or v is a right descendant of the other, and χ({u,v}) = green if u,v are incomparable. It is
straightforward to see that, if we color all pairs in a complete tree (finite or infinite) in this way,
any subtree of depth ≥ 1 cannot be monochromatic (in the sense of the original Ramsey theorem),
or even dichromatic (i.e. admitting at most 2 colors), since it will contain pairs colored red, blue,
and green. Let us say that a pair has type left/right, if one of the vertices is a left/right descendant
of the other, and incomparable otherwise.
Our first theorem shows that, if we consider subtrees admitting pairs colored with at most 3
colors (which we call trichromatic) we are able to prove existence:
Theorem A (Ramsey for pairs). For all d,k ∈ N there exists n = n(d,k) such that for every
coloring of all pairs of vertices in the complete binary tree of depth n with k colors, there
exists a trichromatic complete subtree of depth d.
Furthermore, the obtained subtree is type-monochromatic, in the sense that if two pairs are
of the same type then they are colored with the same color.
The proof of Theorem A is given in Section 4.1.
Remark 1 (Quantitative Bounds for Pairs). Theorem A states the existence of a trichromatic
subtree with the additional property of being type-monochromatic, i.e., pairs of the same type are
colored with the same color. As a direct consequence, if we color only pairs of a specific type (say
4All pairs Left Right Incomparable
(cid:0) twr (1)(cid:1)5k2logk ≤ twr (1) 2dklog(2k) 2dklog(2k) twr (1) ≤ twr (1)
(3dk+log⋆4k+4) (8dk) (3dk+log⋆4k+3) (7dk)
Table 1: The quantitative upper bounds described in Remark 1 for pairs. Each column reports the
bound holding when coloring only pairs of the according type(s).
only pairs of incomparable vertices), we obtain the existence of monochromatic subtrees. Moreover,
our proof implies upper bounds on the minimal n(d,k) witnessing Theorem A: in particular, if we
color all pairs, we obtain a bound of n(d,k) ≤ twr (1), where twr denotes the tower function
(8dk) (m)
(i.e., iterated exponentiation m times; see Section 3.3).
If we color only pairs of a specific type, however, we get better bounds that differ greatly based
on the type. Specifically, if the pairs are comparable (i.e., the chosen type is left or right), we obtain
an upper bound of 2dklog(2k) (see Proposition 14). This bound is comparable to the known bounds
for classical hypergraph Ramsey numbers (see Theorem C).
On the other hand, if we consider only incomparable pairs, we obtain a bound of n(d,k) ≤
twr (1), which is comparable to the bound holding for colorings of all pairs. The quantitative
(7dk)
results described are summed up in Table 1.
It is an interesting open question to assess whether the bounds shown in the remark could be
improved.
General Case (m ≥ 2). Next, we treat the more general case where the coloring is of subsets of
vertices of size m ≥ 2 (or m-subsets).
The first necessary step, as the case of pairs well illustrates, is to define a notion encoding
the partial order inherited from T as well as differentiate between left and right descendants and
incomparable vertices. A first natural attempt at defining such a concept could be to say that two
m-subsets are of the same type if there is a bijection from one set to the other that preserves the
left/right descendant relations between any pair of vertices. However, this approach immediately
fails as demonstrated in Figure 2. This example shows that one must consider also left/right
relationsbetweenverticesthatarenotcomparablewithrespecttothepartialorderofdescendancy.
Our first contribution for the case of general m is an appropriate formal definition of “type” for
sets of vertices of size m which avoids the above problem. Before stating this definition though, we
need to introduce the concept of closure.
Definition 2 (Closure). Let T be a complete binary tree and A a set of vertices of T. We say that A
is closed if for each u,v ∈ A, their lowest-common-ancestor LCA(u,v) is also in A. The closure A¯
of A in T is the minimal1 closed set that contains A (minimal with respect to set containment).
Differentexamplesofsetsofverticesalongwiththeirclosures,areshowninFigure3. Intuitively,
considering A¯ instead of A allows us to differentiate between sets like the middle and rightmost
in Figure 3. In fact, these two sets of vertices are symmetrical and the relations among each pair
are the same; however, if we consider their closures, the left (right) descendant relations are clearly
different. The following definition formalizes this exact reasoning:
1Note that the intersection of closed sets is closed, and hence any set A has a unique closure.
5(a) red triplet (b) blue triplet
Figure 2: This example shows two triplets of vertices that admit the same relations of left/right
descendant for each pair of vertices, for appropriate ordering of the vertices. However, consider
coloring red all triplets of the form as in (a) (the single vertex is to the right of the chain of size
two), and coloring blue all triplets of the form as in (b) (the single vertex is to the left of the chain
of size two). Then within any tree (finite or infinite) with every triplet of these two kinds colored
in this way, there is no monochromatic subtree of depth 2, as these two patterns must appear in
any such subtree.
Figure 3: In each of the examples, the vertices colored red represent A, while the vertices circled in
red are the ones in A¯\A. According to Definition 3, each example represents a subset of 3 vertices
of a different type.
Definition 3 (Types). Let T be a complete binary tree and A ,A two distinct subsets of vertices
1 2
of T. We say that A is isomorphic to A , and denote it by A ≃ A , if there is a bijection φ from
1 2 1 2
A¯ to A¯ such that φ(A ) = A and φ preserves the left (right) descendant relations between pairs
1 2 1 2
of vertices. The type of each set of vertices is then its induced equivalence class, and we say that
sets are of the same type if they are isomorphic to one another.
Our main result in this context employs the notion of type to effectively generalize Theorem A
to m-subsets, as summarized in the following:
Theorem B (Ramsey for m-subsets). Let us denote by τ(m) the number of possible types
of m-subsets. Then, for all d,m,k ∈ N there exists n = n(d,m,k) such that, for every
coloring of all m-subsets of the complete binary tree of depth n with k colors, there exists a
τ(m)-chromatic subtree of depth d (i.e. its m-subsets are colored with at most τ(m) colors).
Furthermore, the obtained subtree is type-monochromatic, in the sense that if two m-subsets
are of the same type then they are colored with the same color.
The proof of Theorem B appears in Section 4.2.
Remark 4 (Optimal Number of Colors). Note that τ(m) colors are optimal in the following sense:
if we color m-subsets of the complete infinite subtree with τ(m) colors according to their type, then
every complete subtree with depth ≥ m will contain at least one m-subset colored with each color.
6Moreover, observe that τ(m) depends exclusively on m, i.e. the size of the chosen subsets, and not
on k and d. In Appendix B, we show that τ(m) is upper bounded by
√23m−2
.
π·(m−1)
Remark 5 (Infinite Case). By compactness, Theorem B is equivalent to the following statement:
foreverycoloringofallm-subsetsofaninfinitecompletebinarytree2, thereexistsaτ(m)-chromatic
subtree of arbitrarily large finite depth. However, it is not true that there exists an infinite τ(m)-
chromatic subtree.
We discuss the infinite case in Appendix C. In particular, we show that the number of col-
ors τ (m) needed to guarantee the existence of an infinite τ (m)-chromatic subtree is strictly larger
∞ ∞
than τ(m); for example, for pairs we have τ (2) = 4 > 3 = τ(2). In the general case, we show
∞
that τ (m) = ω(τ(m)), meaning the optimal number of colors in the infinite case is asymptotically
∞
larger than in the finite case.
Our proof of Theorem B is qualitative and does not provide explicit bounds on the Ramsey
numbers. However, if we focus on m-chains (i.e., m-subsets totally ordered by the tree structure),
we can derive quantitative bounds. These results, summarized below, are crucial to our main result
in private PAC learning.
Theorem C (Ramsey for m-chains). For all d,k,m there exists
n ≤ twr
(5·2m−2dk2m−1
logk)
(m)
such that, for every coloring of m-chains in the complete binary tree of depth n, there exists a
2m−1-chromatic complete subtree of depth d (i.e. its m-chains are colored with at most 2m−1
colors).
Furthermore, the obtained subtree is type-monochromatic, in the sense that if two m-chains
are of the same type then they are colored with the same color.
The proof of Theorem C can be found in Section 4.3. Note that the number of possible types
of m-chains is exactly 2m−1. Indeed, since the closure of an m-chain is exactly the m-chain itself,
the type encodes the left/right descendant relations between all pairs of vertices in the chain. In
particular,sincetheleft/rightrelationsamongpairsofconsecutiveverticesinthechainaresufficient
to fully describe all the others, we get a total of 2m−1 types. As a consequence, Remark 4 made
above for Theorem B continues to hold in this case.
Remark 6 (TightnessoftheBound). Regarding the upper bound on the Ramsey number n provided
above, we do not know whether it is tight. However, if we restrict the coloring to m-chains of a
specific type, the bound significantly improves. Specifically, we obtain:
n ≤ twr (5·2m−2dklogk). (1)
(m)
This removes the 2m−1 from the exponent of k, making the bound comparable to the best known
upper bounds on hypergraph Ramsey numbers by Erd˝os and Rado [25]. Conversely, any lower bound
for classic Ramsey numbers on coloring m-subsets holds for m-chains of a specific type τ: indeed,
given a coloring χ of the m-subsets of [n], define a coloring χ′ of m-chains of type τ with the color χ
assigns to their set of levels. The obtained coloring χ′ admits complete monochromatic subtrees of
depth d if and only if χ admits monochromatic subsets of size d.
2An infinite complete binary tree is a tree such that every vertex has exactly two children.
71.1.2 Private PAC Learning Implies Finite Littlestone Dimension
In this section, we present our results concerning differentially private PAC learnability (from now
on DP-learnability) of partial multiclasses H: i.e., partial concept classes where the label space Y is
not constrained to be {0,1}. Throughout the discussion, we use some standard technical terms and
notation: for formal definitions, we refer the reader to Section 3.2. The following theorem shows
that the sample complexity of DP learning a partial multiclass H is lower bounded by a function
of its Littlestone dimension:
Theorem D. Let H be a (possibly partial) concept class over an arbitrary label space Y
with Littlestone dimension LD(H) ≥ d, and let A be an (10−4,10−4)-accurate learning algo-
rithm for H with sample complexity m satisfying (ϵ,δ)-differential privacy for ϵ = 10−3 and
δ ≤ 1 . Then the following bound holds:
103m2
m = Ω(log⋆d),
where the Ω notation conceals a universal numerical multiplicative constant.
Theorem D extends the result by [4], who handled total concept classes in the binary case,
and the result by [38], who handled total concept classes in the multiclass setting with k labels
(deriving a lower bound of log⋆ log kd , which depends on k). The proof of Theorem D can be found
k2
in Section 5. An immediate consequence of this lower bound is that it is impossible to privately
PAC learn a class H with an infinite Littlestone dimension.
Corollary E (DP-Learnability =⇒ FiniteLittlestoneDimension). Let H be a partial concept
class over an arbitrary label space Y. If H is DP-learnable, then it has a finite Littlestone
dimension, LD(H) < ∞. Equivalently, if H is DP-learnable, then it is also online learnable.
Alon, Hanneke, Holzman, and Moran [5] studied PAC learnability of partial concept classes in
the binary case. They asked whether the characterization of differentially private PAC learnability
by the Littlestone and threshold dimensions extends to this setting. They further exhibited a
class with an unbounded Littlestone dimension and a threshold dimension of 2, which shows that
the equivalence between threshold and Littlestone dimensions breaks for partial concept classes.
Combined with the above result, this implies that the threshold dimension does not characterize
private PAC learnability:
Corollary F(DP-Learnability̸=FiniteThresholdDimension). Thereexistsapartialconcept
class H ⊆ {0,1,⋆}X such that (i) H has a finite threshold dimension, and (ii) H is not
differentially privately PAC learnable.
It remains open whether a finite Littlestone dimension characterizes private PAC learnability
(Corollary E provides one direction; the other direction is yet to be decided).
Moreover, our results close a gap regarding the equivalence between online and DP-learnability
of (total) multi-valued concept classes. In fact, as already mentioned previously, the results in [38,
52]showedthattheequivalencecontinuestoholdinthecaseofafinitelabelspaceY. However,their
proof techniques do not extend to infinite label spaces (where the connection between Littlestone
8dimensionandthreshold-likestructuresnolongerholds[35]). OurresultsshowthatDP-learnability
continues to imply online learnability in the case of an infinite Y, leaving as an open question
whether the converse holds as well.
1.2 Additional Related Work
RamseyTheoryonTrees. Ingeneral,aRamseytheoremfortreesisastatementofthefollowing
form: for any coloring of m-subsets of a sufficiently deep tree, there exists a deep subtree that is
monochromatic (or has only a few colors). Various forms of these statements have been explored,
differing mainly in how a subtree is defined. In particular, the following variations have been
considered (see Figure 4):
(i) The simplest definition of a subtree preserves only the “descendant of” relation. That is, a
complete subtree of depth d of a binary tree T consists of any collection of 2d+1−1 vertices
in T that maintain the same “descendant of” relationships as in a complete binary tree of
depth d.
(ii) The definition we consider in this paper preserves also the relationships of left/right descen-
dants. Thus, every subtree in this case is also a subtree as defined in the first case, but not
vice versa.
(iii) The most studied definition also accounts for levels: on top of (ii), a subtree here must ensure
that any pair of vertices on the same level in the subtree is also on the same level in T.
Milliken’s theorem [45] is arguably the most celebrated Ramsey-type result for trees and is
stated with respect to Item (iii) above. We call subtrees as the ones in Milliken’s theorem level-
aligned and refer the reader to Section 3.1 for more details. The theorem states the following: if T
is a tree of infinite depth, where each vertex has a finite non-zero number of children, and we color
level-aligned subtrees of depth m with k colors, then there exists a monochromatic level-aligned
subtree S of infinite depth. Milliken also proved a finite version of the theorem, but without
providing any quantitative results; the strategy used in his proof makes it challenging to derive
non-trivial bounds for the associated Ramsey numbers. Moreover, Ramsey’s original result on sets
can be derived as a corollary of Milliken’s theorem. In their recent monograph, D’Auriac, Cholak,
Dzhafarov, Monin, and Patey [24] explore applications of Milliken’s tree theorem from the point
of view of computability theory. They focus on infinite level-aligned subtrees. In particular, they
provethatforeverycoloringofm-subsetsinaninfinitecompletebinarytree, thereexistsaninfinite
level-aligned subtree colored with at most τlvl(m) colors, and that the number of colors τlvl(m) is
∞ ∞
optimal. A Ramsey result regarding infinite trees within our setting (i.e. Item (ii) above) appears
in Appendix C.
Arecentlineof researchfurthered the studyof the pigeonholeprincipleconcerning level-aligned
subtrees, initiated by Furstenberg and Weiss [32]. In their work, the authors extend Furstenberg’s
ergodic-theoreticproofofSzemer´edi’stheoremonarithmeticprogressions[30,53]toproveapigeon-
hole principle for binary trees. Specifically, they show that, given a depth d and number of colors
k, there exists an n = n(d,k) such that in any coloring of the vertices of a complete binary tree of
depth n using k colors, there exists a level-aligned monochromatic subtree S whose levels form an
arithmetic progression in T. Notably, their argument did not provide any quantitative bounds on
n. In a follow-up work, Pach, Tardos, and Solymosi [47] gave a constructive proof of the pigeonhole
9principle within Milliken’s setting (Item (iii) above), where the levels of S are not required to form
an arithmetic progression in T. Specifically, they showed that, in this case, n = Θ(dklogk) is
sufficient and necessary. We use this result, which is formally stated in Proposition 8.
(a) (b) (c)
Figure 4: These three examples summarize the definitions of a subtree discussed in Section 1.2,
ordered by their restrictiveness. sub-Figure (a) shows a valid subtree only according to the most
relaxed definition, while sub-Figure (c) shows a valid subtree according to the most restrictive
definition (and thus according to all other definitions as well).
PAC Learning and Differential Privacy. PAC learnability of partial concept classes was
initially studied in the binary setting in [44] and [5] and further explored in [1]. In particular,
Alon, Hanneke, Holzman, and Moran [5] give a thorough overview of their PAC learnability in
general, highlighting the differences with total concept classes as well as relevant open questions.
Subsequent works have extended portions of that work to the online learning framework [19] and
the multiclass setting [13, 39, 46].
As mentioned in the Introduction, Jung, Kim, and Tewari [38] show that the equivalence of DP
learnabilityandonlinelearnabilitycontinuestoholdformulti-valuedconceptclasses. Inparticular,
they define a concept of thresholds allowing them to adapt the techniques used in [6]. Sivakumar,
Bun, and Gaboardi [52] significantly improve the lower bound shown in [38] to prove one direction
of the equivalence i.e. online learnability implies DP learnability.
Furthermore,extensiveresearchhasalsobeendevotedtostudyingthequestionofwhichlearning
tasks can be performed subject to pure differential privacy. Beimel et al. [10, 11] introduced
a quantity called representation dimension that characterizes pure DP learnability. In a follow-
up work, Feldman and Xiao [27] found an interesting connection with communication complexity
by associating every concept class H with a communication task whose complexity characterizes
whether H is pure DP learnable. Additionally, Alon, Moran, Schefler, and Yehudayoff [7] showed
a unified characterization for both pure and approximate differential privacy using cliques and
fractional cliques of a certain graph corresponding to H.
2 Proof Overview and Technical Highlights
In this section, we provide an outline of the proof ideas of the main theorems in this paper.
2.1 Privacy
The proof of Theorem D consists of two parts: consider a DP algorithm as in the premise of
Theorem D; the first part of the proof applies our developed Ramsey theorem for trees to identify a
10large subtree where the algorithm behaves in a ‘regular’ manner. The second part shows that such
algorithms can privately solve the interior point problem. This allows us to apply lower bounds for
the interior point problem and conclude the stated lower bound.
The first part is similar to the first step in the proof by Alon, Bun, Livni, Malliaris, and Moran
[6] for the binary case, with the crucial difference that we use the Ramsey theorem for trees that we
developed. Incontrast, theproofbyAlonetal.[6]reliesontherelationshipbetweentheLittlestone
dimension and the threshold dimension of binary classes. When considering partial concept classes
andmulticlassesoverinfinitelabelspaces,thisconnectionfailstohold,asdemonstratedinFigure5.
As a consequence, we needed to develop techniques allowing us to work directly with Littlestone
trees, which are more structured than simple thresholds.
x x x x x x x
1 2 3 4 5 6 7
x h = 0 0 ⋆ 0 ⋆ ⋆ ⋆
1 0
h = 0 0 ⋆ 1 ⋆ ⋆ ⋆
1
x x h = 0 1 ⋆ ⋆ 0 ⋆ ⋆
2 3 2
h = 0 1 ⋆ ⋆ 1 ⋆ ⋆
3
x x x x h = 1 ⋆ 0 ⋆ ⋆ 0 ⋆
4 5 6 7 4
h = 1 ⋆ 0 ⋆ ⋆ 1 ⋆
5
h h h h h h h h h = 1 ⋆ 1 ⋆ ⋆ ⋆ 0
0 1 2 3 4 5 6 7 6
h = 1 ⋆ 1 ⋆ ⋆ ⋆ 1
7
Figure5: ConsiderX asverticesofaninfinitecompletebinarydecisiontreesuchthateveryinternal
vertexislabeledwithauniquepointx ∈ X,anddefineapartialconceptclassH ⊂ {0,1,⋆}X which
n
consists of all the partial concepts that realize exactly one branch to depth n, and label every point
x ∈ X outside of those n vertices with ⋆. The Littlestone dimension of H is n, while the threshold
n
(cid:83)
dimensionis≤ 2. DefineH = H ,anditholdsthatLD(H) = ∞,whileTD(H) ≤ 2. Thisexample
n
can be easily modified to a multiclass H over an infinite label domain Y: for each hypothesis h,
instead of labeling off-branch examples with ⋆, label them by a label y ∈ Y unique to h.
h
Step 1: Reduction to Comparison-based Predictions. The reduction to algorithms that
learn thresholds allows Alon et al. [6] to exploit the structure of one dimensional thresholds and
use (the classic) Ramsey theorem to show the existence of what they refer to as an homogeneous
set of large size. Basically, a subset of an ordered domain X is homogeneous with respect to an
algorithm A, if the prediction of A on a test point x depends only on the labels of the sorted
input sample S and the position of x inside of S. This property amounts to the algorithm being
comparison-based, i.e. the algorithm makes all its decisions only based on how the elements of the
input sample and the test point compare to each other, and not on their absolute values/locations.
Weadaptthisnotiontotreesinanaturalway,anddefinecomparison-based predictions withrespect
to a binary decision tree. First, consider deterministic algorithms. Given a binary decision tree T,
a deterministic algorithm is comparison-based with respect to T if its prediction on a test point x
depends solely on the labels of the ordered input sample S, and the comparisons of the test point
with points in S, where comparisons are based on the partial order on T. A result of comparing
11two examples x′ and x′′ can be one of five outcomes: (i)+(ii) x′ is a left (right) descendant of x′′,
(iii)+(iv) x′′ is a left (right) descendant of x′, or (v) x′ and x′′ are incomparable. For a visual
example please refer to Figure 6. We extend this notion naturally to randomized algorithms; for
more details and formal definitions please refer to Section 5.
u
w v
Figure 6: The blue and the red labeled examples represent T-realizable (ordered) input samples
S and S . The labels of S and S are the same, and the comparisons of the point u and
blue red blue red
S are identical to the comparisons of v and S . Therefore a comparison-based deterministic
blue red
algorithm satisfies A(S )(u) = A(S )(v). Note that the comparisons of u and S are not the
blue red blue
same as the comparisons of w and S , since the second point of S is a right descendant of u
blue blue
while it is a left descendant of w.
We developed our Ramsey result for chains in order to show that given a tree T, any algorithm
is approximately comparison based on a large subtree. See Lemma 20 for more details.
Step2: LowerBoundforSampleComplexityofPrivateComparison-basedAlgorithms.
The second step of the proof consists of establishing a lower bound on the sample complexity of
private comparison-based algorithms. We do so by giving a reduction from the interior point
problem, which was introduced by Bun, Nissim, Stemmer, and Vadhan [15] in the context of
properly learning thresholds. A randomized algorithm solves the interior point problem on [n]
if for every input dataset X ∈ [n]m, with high probability it returns a point that lies between
minX and maxX (see Section 3.2). Bun et al. [15] showed that solving the interior point problem
in a private manner requires a dataset size of m ≥ Ω(log⋆n). We use this result to derive a lower
bound on the sample complexity. See Lemma 21 for more details.
Theideathatstandsbehindourreductionisthatthepredictionsofempiricalcomparison-based
algorithmshavehighcorrelationwiththebranchonwhichtheinputsampleS lieson. Togivesome
intuition about this idea, we will consider the following simple case. Let T be a binary decision tree
of depth n, and let A be a deterministic algorithm that operates as follows. Given a T-realizable
input sample S, A finds the left most branch B that realizes S and outputs an hypothesis that
labels every point on the branch according to the branch, and any point outside of it by 0. It might
be convenient to imagine that A outputs the branch B. Note that indeed A is comparison-based.
Now, given m points d ,...,d ∈
(cid:2)n(cid:3)
, representing an input dataset to the interior point problem,
1 m 2
pick uniformly at random a branch B in T, and associate each point d with the point x on B
i i
(cid:0) (cid:1)
of depth d . The first m/2 points define an input sequence S = (x ,y ),...,(x ,y ) , where
i 1 1 m/2 m/2
the labels y ’s are determined by B. Next, run A on S and denote its output by B . Since B was
i A
12chosen randomly, and A can only see up to first n turns of B, the depth of the first point on which
2
B and B deviates is (w.h.p.) an interior point of d ,...,d .
A 1 m
We note that in contrast with the first part of our proof (reduction to comparison based algo-
rithms), which can be seen as an adaptation of the first part of the proof by Alon et al. [6] (with
RamseyfortreesreplacingtheclassicalRamseyappliedonthresholds),thesecondpartinourproof
(involving a reduction from the interior point problem) is not an adaptation of the proof for the
binary case. Instead, Alon et al. [6] provided a direct privacy attack on homogeneous algorithms
that learn thresholds. Their attack is constructive and relies on specific properties of homogeneous
algorithms and the structure of one-dimensional thresholds. It remains unclear whether this attack
canbeadaptedtocomparison-basedpredictionswithinthecontextoftrees. Despiteourbestefforts
to construct a similar attack, we were unable to do so successfully.
Quantitatively, the two steps in our proof combine a bound on Ramsey numbers (Step 1)
and a lower bound for the interior point problem (Step 2). At first sight, it might seem that
composing these yields an Ω(log⋆log⋆d) lower bound rather than the single Ω(log⋆d) which is
stated in Theorem D. This initial impression arises because each of these arguments independently
involves a log⋆ cost. The Ramsey bound in the first step is of the same magnitude as the one in the
proof by Alon et al. [6], which yields a log⋆ cost. Additionally, the interior point problem also has
a log⋆ cost [15]. Hence, composing them sequentially might intuitively suggest that the resulting
boundwouldbeΩ(log⋆log⋆(d)). However,amorecarefulhandlingoftheimpliedcalculationsyields
a single log⋆, which is optimal [40].
Finally, it is worth noting that our proof not only generalizes the proof for the binary case to
broader settings, but also, by directly addressing Littlestone trees instead of taking an indirect
path through thresholds, illustrates that the Littlestone dimension serves as an inherent barrier
to privacy. This highlights a robust connection between the two, showcasing them as two forms
of stability.
2.2 Ramsey Theorems
In this section, we outline the main steps and ideas in the proofs of our Ramsey results on binary
trees. The counterexamples shown in Section 1.1.1 indicate that, if we color subsets of vertices
without differentiating according to a notion of type, no positive existence result is attainable.
The approach we take is to consider colorings of subsets of vertices of a specific type, rather than
colorings of all possible subsets of m-vertices. We then demonstrate that for any such coloring,
there exists a deep monochromatic subtree. Then, given an arbitrary coloring of all m-subsets, we
apply our argument to each of the τ(m) different types and obtain a subtree that contains at most
τ(m) (= number of types) many colors.3 The obtained subtree is in fact type-monochromatic:
whenever two m-subsets are of the same type, they are colored with the same color.
The distinction between incomparable and comparable pairs plays a key role in our results.
The quantitative bounds we obtain in these two cases are very different, and in fact, in the general
case m ≥ 2, we provide quantitative results only for m-chains: i.e. subsets of vertices that do not
contain incomparable pairs. This distinction is reflected in the infinite case as well. Indeed, we
claim that for any finite coloring of all subsets from a given type τ of an infinite binary tree, there
3ThisapproachyieldsloosequantitativeupperboundsontheRamseynumbers. InTheoremC,weobtainbetter
bounds by deriving the type-monochromatic subtree while considering all types ’in parallel’, rather than applying
the type-specific bound sequentially ’type-by-type’.
13exists an infinite monochromatic subtree if and only if τ is a chain. If τ is not a chain then one can
only guarantee monochromatic subtrees of (arbitrarily large) finite depth (see Appendix C). In the
proof overview we focus on the case of pairs (m = 2), and, as noted above, consider colorings of
pairs of a specific type. This case is not only simpler to describe but also effectively captures the
central ideas present in the proofs of the general results for m-subsets and m-chains.
Comparable Pairs (≡ Chains). The proof for comparable pairs (as well as for chains) follows
the same inductive procedure as described in the proof by Erd˝os and Rado [25] for the classic
Ramsey theorem, with this procedure being applied in parallel across the branches. The building
block of the proof is the pigeonhole principle for trees: for every vertex-coloring of a complete
binary tree of depth n with k colors, there exists a monochromatic subtree of depth
(cid:4)n(cid:5)
(see
k
Proposition 8).
Assume without loss of generality that the given coloring is a coloring of left-pairs4. We induc-
tively define an appropriate vertex-coloring such that the guaranteed monochromatic subtree from
the pigeonhole principle is also monochromatic with respect to the original coloring. The desired
vertex-coloring is defined as follows. We start from the root of T, and color every vertex in its
left subtree by the color of the pair consisting of itself and the root. By applying the pigeonhole
principle, there exists a monochromatic subtree S of the left subtree. The color of the root is set to
beexactlythecolorofS. Werepeattheexactsameprocessandcolorinthesamemannertheroots
of S and of the right subtree of T, and inductively proceed in this way. Observe that the subset of
vertices that we color via this procedure is a subtree of T. Moreover, the following property holds:
if v is colored with the color c, then for every colored vertex u that is a left descendant of v, the
pair {v,u} is also colored in the color c in the original coloring. Therefore, a monochromatic sub-
tree with respect to this vertex-coloring is indeed also monochromatic with respect to the original
left-pairs coloring.
It is interesting to note that the existence of Ramsey numbers for m-chains can be derived as
a corollary from Milliken’s theorem [45]. The finite version of Milliken’s theorem states that for
every positive integers d,m and k, there exists a number n = n(d,m,k) such that the following
holds: for every complete binary tree T of depth n and every coloring of level-aligned subtrees
of T of depth m with k colors, there exists a monochromatic level-aligned subtree of T of depth d.
Indeed, a coloring of m-chains of a fixed type τ induces a coloring of level-aligned subtrees of
depth m−1, since every level-aligned subtree contains exactly one m-chain of type τ. Therefore, a
weaker,qualitativeversionofourresultform-chainsfollowsbyMilliken. However,aswementioned
above, Milliken’s proof does not provide quantitative bounds and the methodology used to prove
it does not make it easy to obtain them as well. Our proof, instead, follows the line of the proof
of the quantitative version of Ramsey theorem by Erd˝os and Rado [25] and thus allows to obtain
non-trivial upper bounds for the Ramsey numbers.
Incomparable Pairs (≡ Non-Chains). The case of incomparable pairs (as well as the one
of general non-chain m-subsets) is more intricate, as indicated by the great difference between
the lower bound obtained in this case and the one for comparable pairs. Our proof is based on
an intermediate bipartite Ramsey result, which serves as a key component of it and might be of
independent interest. Informally, the bipartite Ramsey theorem says the following. Let L and R
be complete binary trees. Then, for every coloring of pairs of vertices {ℓ,r}, where ℓ ∈ L and r ∈ R
4A pair of vertices is a left-pair if one of the vertices is a left descendant of the other.
14there exist deep5 subtrees L′ and R′ of L and R, such that all pairs {ℓ′,r′},ℓ′ ∈ L′,r′ ∈ R′ have the
same color. For a formal statement see Theorem 16.
We begin by outlining the proof for incomparable pairs under the assumption of the bipartite
theorem, followed by an explanation of how we establish it. Given a coloring of incomparable pairs
of a treeT, we definea vertex-coloring as follows. First consider the root of T, and its left and right
subtrees. By applying the bipartite theorem on the left and right subtrees we obtain subtrees L′
and R′ such that all incomparable pairs of vertices from L′ and R′ are colored with the same color.
Set the color of the root to be exactly this color.
Repeat the same process and color the roots of L′ and R′ in the same manner. This procedure
yields a vertex-coloring of a subtree S of T, with the property that the color of every incomparable
pair {u,v} in S with respect to the original pair-coloring is identical to the color of LCA(u,v) in S.
Finally, by applying the pigeonhole principle on S, we obtain a subtree that is monochromatic with
respect to original pair-coloring, as desired.
We proceed by outlining the proof of the bipartite theorem. Let L and R be (deep enough)
complete binary trees and consider a coloring of pairs {l,r}, where l ∈ L,r ∈ R. We start these
interleaved colorings of vertices in L and vertices in R:
1. Given a vertex v ∈ R, color every vertex u ∈ L by the color of the pair {u,v}. Apply the
pigeonhole principle on L and obtain a monochromatic subtree T of depth d colored with c .
v v
2. Color v ∈ R by (T ,c ).
v v
3. DothesameforallverticesinR. ApplythepigeonholeprincipleonRandobtainamonochro-
matic subtree R′ colored with (L′,c), where L′ is a subtree of L.
where its color is a subtree of L, which we call L′, together with a color c.
By construction, all pairs {l′,r′} where l′ ∈ L′,r′ ∈ R′ are colored with the same color which is
exactly c. Note that the number of colors used in the vertex coloring of R is
|{subtrees of L of depth d}|·(number of colors in original coloring).
Therefore, in order for R′ to be deep, we need to control the number of colors, and hence L needs
to be much shallower than R. On the other hand, in order for L′ to be deep, L must be sufficiently
deep.
3 Preliminaries
3.1 Combinatorics
Definition 7 (Subtree). Let T be a binary tree. Define a subtree of T by induction on its depth d.
All vertices of T are subtrees of T of depth d = 0. For d ≥ 1 a subtree of depth d is obtained from
an internal vertex of T and a subtree of depth d−1 of the tree rooted at its left child, and a subtree
of depth d − 1 of the tree rooted at its right child. A subtree S of T is level-aligned if any two
vertices in the same level in S are also in the same level in T.
Proposition 8 (Pigeonhole Principle for Trees, [6, 47]). Let d ∈ N and let T be a complete binary
tree of depth n. Then, for every coloring of its vertices with k colors, the following hold:
5The depth of the obtained subtrees is a function of the depths of L and R and the number of colors.
15(i) If T has depth n ≥ dk, it admits a subtree S of depth d;
(ii) If T has depth n ≥ 5dklogk, it admits a level-aligned subtree S of depth d.
We remark that Alon et al. [6] gave a proof for Item (i) only for k = 2. For completeness, we
provide a full proof for Item (i) in Appendix D.1.
3.2 Learning
PAC Learning. We use standard notations from PAC learning; for more details see e.g. [51].
Let X be a domain and Y a label space. A partial concept is a partial function h from X
to Y. It is convenient to represent a partial concept as a total function h ∈ (Y ∪ {⋆})X, where
⋆ ∈/ Y, and h(x) = ⋆ means that h is undefined on x. The support of a partial concept h is
supp(h) = {x ∈ X|h(x) ̸= ⋆}. Given an hypothesis h : X → Y, the empirical loss of h with respect
to a sample S = (cid:0) (x ,y ),...,(x ,y )(cid:1) ∈ (X ×Y)m is defined as L (h) := 1 (cid:80)m 1[h(x ) ̸= y ].
1 1 m m S m i=1 i i
A sample S = (cid:0) (x ,y ),...,(x ,y )(cid:1) ∈ (X × Y)m is realizable by a (possibly partial) concept
1 1 m m
class H if there is h ∈ H such that {x ,...,x } ⊂ supp(h) and L (h) = 0. The population loss
1 m S
of h with respect to a distribution D over X ×Y is defined as L (h) := Pr [h(x) ̸= y]. A
D (x,y)∼D
distribution D over labeled examples is realizable with respect to H if inf L (h) = 0.
h∈H D
For a set Z, let Z⋆ = ∪∞ Zn. A learning rule A is a (possibly randomized) algorithm that
n=0
takes as input a sample S ∈ (X ×Y)⋆ and outputs an hypothesis h = A(S) ∈ YX. In the realizable
PAClearningmodel, theinputS issampledi.i.d. fromarealizabledistributionD, andthelearner’s
goal is to output an hypothesis with small population loss with respect to D. More precisely, let
m,α,β > 0. We say that an algorithm A is an (α,β)-accurate PAC learner for H, with sample
complexity m, if for every realizable distribution D, Pr [L (A(S)) ≥ α] ≤ β. Here, α is called
S∼Dm D
the error and β is called the confidence parameter. A class H is PAC learnable if there exist
vanishing α(m),β(m) → 0 and an algorithm A such that for all m, A is a (α(m),β(m))-learner
for H with sample complexity m.
Littlestone Dimension. TheLittlestonedimensionisacombinatorialparameterwhichcaptures
mistake and regret bounds in online learning [43, 12]. The definition of the Littlestone dimension
uses the notion of mistake trees. A mistake tree is a binary decision tree whose internal vertices
are labeled with instances from X, and whose edges are labeled by instances from a label space Y
such that each internal vertex has different labels on its two outgoing edges. A root-to-leaf path in
a mistake tree is a sequence of labeled examples (x ,y ),...,(x ,y ). The point x is the label of
1 1 d d i
the i’th internal vertex in the path, and y is the label of its outgoing edge to the next vertex in the
i
path. We say that a class H shatters a mistake tree if every root-to-leaf path is realizable by H.
The Littlestone dimension of H, denoted LD(H), is the largest number d such that there exists a
complete mistake tree of depth d shattered by H. If H shatters arbitrarily deep mistake trees then
we write LD(H) = ∞.
Threshold Dimension. The Threshold dimension TD(H) of a binary concept class H ⊂ {0,1}X
is the maximal number d such that there exist x ,...,x ∈ X and f ,...,f ∈ H such that
1 d 1 d
f (x ) = 1[i ≥ j] for all i,j ∈ [d]. If there are such x ,...,x ,f ,...,f for every arbitrarily large d
i j 1 d 1 d
then we write TD(H) = ∞.
16Differential Privacy. We use standard notations from differential privacy literature; for more
ϵ,δ
details see e.g. [22, 54]. Let ϵ,δ ≥ 0. For two numbers a and b, denote a ≈ b if a ≤ eϵ·b+δ, and
b ≤ eϵ·a+δ.
Definition 9 (Differential Privacy). Let ϵ,δ ≥ 0. A learning rule A is (ϵ,δ)-differentially private
if for every pair of training samples S,S′ ∈ (X ×Y)m that differ on a single example, and every
event E ⊆ YX,
ϵ,δ
Pr[A(S) ∈ E] ≈ Pr[A(S′) ∈ E].
Typically,ϵischosentobeasmallconstant(e.g. ϵ ≤ 0.1)andδisnegligible(i.e.δ(m) ≤ m−ω(1)).
An hypothesis class H is privately learnable (abbreviated DP learnable) if it is PAC learnable by an
algorithmAwhichis(ϵ(m),δ(m))-differentiallyprivate, whereϵ(m) = O(1)isanumericalconstant
and δ(m) = m−ω(1).
A basic property of differential privacy is that privacy is preserved under post-processing; it en-
ables arbitrary data-independent transformations to differentially private outputs without affecting
their privacy guarantees.
Proposition 10 (Post-Processing). Let M : Zm → R be any (ϵ,δ)-differentially private algorithm,
and let f : R → R′ be an arbitrary randomized mapping. Then f ◦ M : Zm → R′ is (ϵ,δ)-
differentially private.
Empirical Learners. Let H be a class. An algorithm A is (α,β)-accurate empirical learner with
sample complexity m if for every realizable sample S of size m,
Pr [L (h) ≥ α] ≤ β.
S
h∼A(S)
Bun,Nissim,Stemmer,andVadhan[15]provedthatanyprivatePAClearnercanbetransformed
into a private empirical learner, while the sample complexity is increased only by a multiplicative
constant factor.
Lemma 11 (Lemma 5.9 in [15]). Suppose A is an (ϵ,δ)-differentially private (α,β)-accurate PAC
learner for an hypothesis class H with sample complexity m. Then there is an (ϵ,δ)-differentially
private (α,β)-accurate empirical learner for H with sample complexity n = 9m.
We remark that Lemma 11 was proved in [15] within the context of binary (total) classes.
However, the proof also applies to partial concept classes with arbitrary label spaces.
Interior Point Problem. An algorithm A : [n]m → [n] solves the interior point problem on [n]
with probability 1−β if for every input sequence x ...x ∈ [n],
1 m
Pr[minx ≤ A(x ,...x ) ≤ maxx ] ≥ 1−β
i 1 m i
where the probability is taken over the randomness of A; the number of data points m is called the
sample complexity of A.
Theorem 12 (Theorem3.2in[15]). Let 0 < ϵ < 1/4 be a fix number and let δ(m) ≤ 1/50m2. Then
for every positive integer m, solving the interior point problem on [n] with probability at least 3/4
and with (ϵ,δ(m))-differential privacy requires sample complexity m ≥ Ω(log⋆n).
17Lemma 13. Let A : [n]m → [n] be an (ϵ,δ)-differentially private algorithm, and let C(n) ≤ log2n.
Assume that for every input sequence x ,...,x such that min |x −x | ≥ C(n),
1 m i̸=j i j
3
Pr[minx ≤ A(x ,...,x ) ≤ maxx ] ≥ .
i 1 m i
4
Then, m ≥ Ω(log⋆n).
Proof. By rescaling, A solves the interior point problem on a domain of size n , and therefore
C(n)
(cid:16) (cid:16) (cid:17)(cid:17) (cid:16) (cid:16) (cid:17)(cid:17)
the sample complexity satisfies m ≥ Ω log⋆ n = Ω log⋆ n = Ω(log⋆n). Indeed,
C(n) log2n
n
the second equality holds since by the definition of the log⋆ function, twr (t+2)(1) ≥ 2log2n, where
(cid:16) (cid:17) n
t = log⋆ n . Furthermore, 2log2n ≥ n for large enough n. Therefore, again by definition,
log2n
(cid:16) (cid:17)
t+1 ≥ log⋆n for large enough n, which implies that log⋆ n ≥ 1 log⋆n for large enough n.
log2n 2
3.3 Additional Notations
Iterated Logarithm and Tower Function. The tower function twr (x) is defined by the
(t)
recursion
(cid:40)
x i = 1;
twr (x) =
(i) 2twr (i−1)(x) i > 1.
The iterated logarithm log (x) is defined by the recursion
(t)
(cid:40)
x i = 0;
log (x) =
(i)
log(log (x)) i > 0.
(i−1)
(cid:0) (cid:1)−1
Note that for all t, twr (·) = log (·). Finally,
(t) (t−1)
log⋆(x) = min{t | log (x) ≤ 1}.
(t)
4 A Ramsey Theory for Trees
This section contains all the proofs of the Ramsey theorems for Trees by the order of appearance
in Section 1.1.1.
4.1 Pairs: Proof of Theorem A (Warm up)
In this section, we prove Theorem A. In order to prove the existence of a trichromatic subtree,
we take the following approach. Instead of considering colorings of all possible pairs, we con-
sider colorings of all pairs of a specific type and prove that, for any such coloring, there exists a
monochromatic subtree. Therefore, given an arbitrary coloring of all pairs, by applying our argu-
ments sequentially we are able to obtain a subtree that is trichromatic and also has the property
that each pair is colored according to its type.
Let us call a pair of vertices {u,v} an L-pair (R-pair) if one of u or v is a left (right) descendant
of the other and a U-pair if u and v are incomparable.
18Proposition 14 (Comparable Pairs). Let d,k ∈ N and τ ∈ {L,R} be fixed. Then there exists an
n = n(d,τ,k) ∈ N such that for every binary tree T of depth n and every coloring of τ-pairs in T
with k colors, T admits a monochromatic subtree of depth d. Moreover,
n(d,τ,k) ≤ 2dklog(2k).
Proposition 15 (Incomparable Pairs). Let d,k ∈ N. Then there exists an n = n(d,U,k) ∈ N such
that for every binary tree T of depth n and every coloring of U-pairs in T with k colors, T admits
a monochromatic subtree of depth d. Moreover,
n(d,U,k) ≤ twr (1).
(3dk+log⋆(224k)+1)
Theorem A is an immediate corollary of Propositions 14 and 15. Indeed, let d ∈ N be the
depth of the desired trichromatic subtree. Set n = n(n(n(d,L,k),R,k),U,k), then for any coloring
of all pairs of a tree of depth n, there exists a subtree of depth d that is trichromatic and also
type-monochromatic, in the sense that if two pairs are of the same type then they are colored
with the same color. Indeed, the outer-most n(·,·,·) guarantees a U-monochromaric subtree of
depth n(n(d,L,k),R,k), then the second n(·,·,·) yields a subtree of depth n(d,L,k) that is type-
monochromatic with respect to {R,U}, and finally the inner-most n(·,·,·) guarantees a subtree of
depth d that is type-monochromatic with respect to all types {L,R,U}.
We turn to prove Propositions 14 and 15.
4.1.1 Comparable Pairs: Proof of Proposition 14
Proof. Let T be a complete binary tree of depth n large enough, and let χ be a coloring of com-
parable pairs of a fixed type τ ∈ {L,R} with k colors. We can assume without loss of generality
that τ = L, i.e. we are coloring left pairs. We prove the result by constructing the desired subtree
in the following way. First, we introduce a recursive procedure that constructs a subtree of T,
denoted as T⋆ and define a suitable “meta-coloring” of the vertices of T⋆, which we call χ⋆. Then,
we apply Proposition 8 on T⋆, obtaining a monochromatic subtree T′ with respect to χ⋆. Thanks
to the definition of χ⋆, the subtree T′ will have the desired property that we seek.
Let r be the root of T and assign to each vertex v in the left subtree of r the color χ({r,v}).
ByProposition8thereexistsamonochromaticsubtreeS oftheleftsubtreeofcolorc. Letχ⋆(r) = c
0
and call S the right subtree of r. Now, for the next step, we can repeat this procedure on S ,S ,
1 0 1
color their roots, and obtain two new subtrees for each of S ,S . In general, for each subtree S in
0 1
the current step, we apply the same argument, color its root, and get the two subtrees S ,S of S
0 1
for the next step. Let S be any subtree received by this recursive procedure at some point, and
let S ,S be the two subtrees received after applying the reduction step on S, then the following
0 1
relations hold:
(cid:22) (cid:23)
depth(S)−1
depth(S ) ≥ ,
0
k
depth(S ) = depth(S)−1.
1
Let t be the maximal number of steps this procedure could be repeated, such that all subtrees
so far were non-empty. Let T⋆ be the subtree formed by the colored roots of all subtrees S
in this process. By one last application of the pigeonhole principle on T⋆ and χ⋆ we obtain a
19monochromatic subtree T′ of depth d = ⌊t/k⌋. We argue that T′ is monochromatic with respect to
the original χ. Indeed, if {v,w} is any left pair in T′, χ({v,w}) = χ⋆(v) by our construction and
by the definition of χ⋆, which implies the desired result.
It is left to prove a bound over t = dk. For convenience, for every time step i ∈ {0,1,...,t}
denote the depth of the subtree S by d . Therefore
i

 d 0 = n,
(cid:106) (cid:107)
 d ≥ di−1 .
i+1 k
(cid:106) (cid:107) (cid:106) (cid:107)
Notethat di−1 ≥ di foreverystepi < t(otherwise, di−1 = 0andtheproceduremustterminate
k 2k k
after this step). For the procedure to continue until time t we must have d ≥ 0, and this implies
t
that n ≥ 1. As a consequence, n ≥ (2k)dk = 2dklog(2k) is sufficient to guarantee that the depth
(2k)t
of S is d, giving the desired bound on the associated Ramsey number.
4.1.2 Incomparable pairs: Proof of Proposition 15
The technique used in this case is quite different from the one used before, but the main idea stays
the same: i.e. we will define a suitable coloring of vertices of T via a repeated use of Proposition 8.
The following theorem is the key element in the proof of the result for incomparable pairs.
Theorem 16 (Bipartite Theorem). Let L and R be complete binary trees of depth n. Then, for
every coloring with k colors of all pairs of the form {ℓ,r}, where ℓ ∈ L and r ∈ R, there exist
subtrees L′ of L and R′ of R of depth
log (5nlogk)
(2)
d(n,k) ≥
15klogk
such that all pairs {ℓ′,r′}, where ℓ′ ∈ L′ and r′ ∈ R′, are colored with the same color. Moreover, if
n ≥ 224k, then d(n,k) ≥ log (n+1).
(3)
Webeginwith provingProposition15, theresult forincomparablepairs, assumingTheorem 16.
First, observe that any incomparable pair {u,v} has a lowest common ancestor LCA(u,v) that is
distinct from both of them such that one of u,v is a left descendant of LCA(u,v) and the other is
a right descendant of LCA(u,v). In the course of the proof, we will define a new coloring χ⋆ with k
colors over internal vertices w, based on the coloring of pairs {u,v} such that LCA(u,v) = w. The
new coloring χ⋆ is defined in a recursive procedure where, as mentioned above, the key component
we use is Theorem 16.
Proof of Proposition 15. Let χ be a coloring of incomparable pairs with k colors. In the course of
the proof we define recursively a subtree T⋆ of T of depth dk, and define a vertex coloring χ⋆ of T⋆
with the following property: for every incomparable pair {u,v} in T⋆,
χ({u,v}) = χ⋆(LCA(u,v)),
where LCA(u,v) is the lowest-common-ancestor of u and v in T⋆. By applying the pigeonhole
principle on T⋆, we obtain a χ⋆-monochromatic subtree of depth d, and by the construction and
20theaboveproperty, thissubtreeisalsomonochromaticwithrespecttotheoriginalpairs-coloringχ,
as desired.
The main building block used in the inductive procedure is Theorem 16. Throughout the
proof we denote the vertices of T⋆ by u ,u ,u ,u ,u ,...,u ,where for a string σ ∈ {0,1}i,
∅ 0 1 00 01 1dk
i ∈ {0,...,dk−1}, u is the left descendant of u , and u is the right descendant of u .
σ0 σ σ1 σ
Define S = T and define u to be the root of S . Denote d = n the depth of S . Denote
∅ ∅ ∅ 0 ∅
by T and T the left and right subtrees of S , respectively. By applying Theorem 16, we obtain
0 1 ∅
subtrees S of T and S of T , of depth
0 0 1 1
d = d(d −1,k),
1 0
such that all of the pairs {u,v} with u ∈ S and v ∈ S are colored with the same color. We define
0 1
χ⋆(u ) to be exactly that color.
∅
We repeat this procedure inductively over S and S separately. Assume that S is defined
0 1 σ
where σ ∈ {0,1}i for i ≥ 0, and u is the root of S . Let T and T be the left and right subtrees
σ σ σ0 σ1
of S . By applying Theorem 16 on T and T , we obtain subtrees S , S of depth
σ σ0 σ1 σ0 σ1
d = d(d −1,k),
i+1 i
such that all incomparable pair {u,v} with u ∈ S and v ∈ S are colored with the same color.
σ0 σ1
Define χ⋆(u ) to be exactly that color.
σ
Assume that n is sufficiently large so this procedure can be continued t = dk steps, and for
every step i ≥ 1,
d = d(d −1,k) ≥ log (d ),
i i−1 (3) i−1
where the value of n will be specified later on. By applying this relation t times, we obtain
d ≥ log (n).
t (3t)
To ensure that the procedure can be continued t steps, by Theorem 16 it suffices to require
log (n) ≥ 224k =: n . Equivalently 3t = 3dk ≤ log⋆(n) − log⋆(n ). To conclude, by revers-
(3t) 0 0
ing the relation, there exists a monochromatic subtree of depth d if
n ≥ twr (1).
(3dk+log⋆(n0)+1)
We now turn to prove Theorem 16. We begin with proving a slightly more general version of
Theorem 16, where the depths of L and R may differ.
Lemma 17 (Bipartite Lemma). Let L and R be trees of depth d and d , respectively. Then, if χ
L R
is a coloring of all pairs of the form {ℓ,r},ℓ ∈ L,r ∈ R with k colors, then there exist subtrees L′
of L and R′ of R such that (i) all pairs {ℓ,r},ℓ ∈ L′,r ∈ R′ have the same color, (ii) the depth of L′
is at least dL , and the depth of R′ is at least dR , where α(d,k) = (cid:0) d (cid:1) ·2d2d/5klogk.
5klogk kα(dL,k) 1+d/5klogk
Before proving Lemma 17, however, we need the following technical lemma, which shows an
upper bound to the number of level-aligned subtrees of a fixed given size.
21Lemma 18. Let T be a complete binary tree of depth n. Then the number of its level-aligned
subtrees of depth d is upper bounded by (cid:0) n (cid:1) ·2n2d.
d+1
The proof of Lemma 18 is a technical calculation and deferred to Appendix D.2.
Proof of Lemma 17. For each r ∈ R we can define a coloring χ of the vertices in L in the following
r
way: χ (ℓ) = χ({ℓ,r}), i.e. ℓ is colored as the edge connecting it to r. By using Proposition 8,
r
since the number of colors is k, we obtain the existence of a monochromatic level-aligned subtree
T of depth d /5klogk for each one of these colorings. By Lemma 18, the possible number of such
r L
level-aligned subtrees in L is α(d L,k) = (cid:0) 1+dL/d 5L klogk(cid:1) ·2dL2dL/5klogk. If we consider as colors all
possible couples (S,j), where S is a subtree of depth d /5klogk of L and j ∈ [k], we can define
L
a new coloring over the vertices of R as follows: r is colored (S,j) where S = T and j = χ (ℓ)
r v
is the color of any ℓ ∈ T , which is well defined because T is monochromatic. By using again the
r r
pigeonhole principle (in its weaker version) we obtain a monochromatic (weakly embedded) subtree
R′ of depth at least d /kα(d ,k). Let (L′,j) be the color assigned to R′. The pairs between L′
R L
and R′ are all colored j by definition of the coloring and by the properties of L′, which implies the
result.
Finally, we are ready to formally prove Theorem 16.
Proof of Theorem 16. Let L and R be complete binary trees of depth n. Denote by L˜ a subtree
of L of depth d˜. Apply Lemma 17 on L˜ and R, we obtain a subtree L′ of depth
d˜
5klogk
and a subtree R′ of depth
n
,
kα(d˜,k)
where α(d,k) = (cid:0) d (cid:1) ·2d2d/5klogk. Note that if we set d˜= log (2)(5nlogk) , then the depth of R′
1+d/5klogk 3
is at least the depth of L′. Indeed,
n n
depth(R′) = ≥ (by the definition of α(d,k))
kα(d˜,k) k2d˜(2d˜/5klogk+1)
nd˜
≥ (∀d ≥ 1, d2d(2d/5klogk+1) ≤ 2d(2d+2) ≤ 223d)
k223d˜
d˜
= (by the definition of d˜)
5klogk
log (5nlogk)
= (2) = depth(L′).
15klogk
Now, assume that n ≥ 224k and set d˜= log (n+1)·5klogk. Then, the depth of R′ is still at
(3)
least the depth of L′, which is exactly log (n+1), as wanted. Indeed,
(3)
nd˜ d˜
depth(R′) ≥ ≥ = log (n+1) = depth(L′)
k223d˜ 5klogk (3)
22if and only if
223d˜ log(n+1)15klogk
n ≥ = ,
5logk 5logk
which holds since n ≥ 224k.
4.2 General m-Subsets: Proof of Theorem B
In this section, we prove Theorem B. The proof is based on the same approach as in the proof
of Theorem A for the case of pairs. That is, we consider colorings of m-subsets of a specific type
and prove that, for any such coloring, there exists a monochromatic subtree. Therefore, given an
arbitrary coloring of all m-subsets, by applying our argument on each type sequentially we obtain
a subtree that is colored with at most τ(m) colors and is also type-monochromatic, in the sense
that m-subsets of the same type are colored with the same color. Recall that a pair of vertices
{u,v} is an L-pair (R-pair) if one between u and v is a left (right) descendant of the other. Recall
that types of m-subsets in a tree T are defined by the following equivalence relation: two sets of
vertices A ,A in T are equivalent if there is a bijection φ from A¯ to A¯ such that φ(A ) = A
1 2 1 2 1 2
and for each u,v ∈ A¯ ,
1
1. {u,v} is an L-pair ⇔ {φ(u),φ(v)} is an L-pair,
2. {u,v} is an R-pair ⇔ {φ(u),φ(v)} is an R-pair,
where A¯is the closure of A, i.e. the minimal subset of vertices containing A such that for every pair
of vertices in A¯, their LCA is also in A¯. The type of an m-subset is its equivalence class. Note that
by definition all subsets of the same type have the same size. Consequently, the size of a type τ,
denoted by |τ|, is the size of any set of this type. Observe that any chain is closed (and hence the
closure of a chain is itself). Antichains are not closed and if m > 2 there exist m-antichains that
are not equivalent. (See Figure 7.)
Figure 7: Two 3-antichains with different closures, hence not equivalent. In general, the number of
different closures of m-antichains for specific value of m, is exactly the number of full binary trees
with m leaves, which is known to be the Catalan number C .
m−1
Tree-Definable Partitions. Let A be a set of m vertices in a tree. The LCA of A induces a
partition of the vertices in A: in the case where the LCA is not in A, the partition is into two
subsets, one A of all vertices in the left subtree of the LCA, and one A of all vertices in the right
1 2
subtree of the LCA. In the case where the LCA is in the set A, the partition is into three subsets,
23one A of all vertices in the left subtree of the LCA, one A of all vertices in the right subtree of
1 2
the LCA, and one that contains only the LCA. Observe that any two sets of vertices of the same
type admit the same partition in the following sense: let A ≃ B be two subsets of the same type;
let A ⊆ A be the set of vertices to the left of the LCA of A and let B ⊆ B be the set of vertices
1 1
to the left of the LCA of B, similarly, let A ⊆ A,B ⊆ B be the set of vertices to the right of the
2 2
respectiveLCA. ThenA ≃ B andA ≃ B . Thispropertyisexploitedintheproofforthegeneral
1 1 2 2
version of Ramsey theorem for trees in Theorem B. Also, observe that one side in the partition may
be empty, but in any case, the sizes of A ,A are both strictly less than m. This fact is another
1 2
important ingredient in the proof since it allows us to apply the inductive step on the size of the
sets m.
The proof uses induction on the size m of the sets, while the induction step follows the same
idea as that in the proof of Proposition 15 for the case of incomparable pairs. In particular, it relies
on a version of the bipartite Lemma for sets with size larger than 2.
Proof of Theorem B. The proof is based on the relationships between three types of Ramsey num-
bers. We start by defining these numbers, then establish the connections between them and finally
show their finiteness all together by double induction on the size m of colored sets and on the
desired depth d of the subtree.
Ramsey Number. Denote by R(d,τ,k) the minimal number n such that for any coloring of all
subsets of type τ in a complete binary tree of depth n with k colors, there exists a monochromatic
subtree of depth d.
Bipartite Ramsey Number. Denote by R (d,τ ,τ ,k) the minimal number n such that for any
b 1 2
complete binary trees T ,T of depth n, and any coloring of all pairs (A ,A ) where A is a subset
1 2 1 2 1
of type τ in T and A is a subset of type τ in T , with k colors, there exist two subtrees S of
1 1 2 2 2 1
T and S of T , of depth d such that all pairs (A ,A ) as described above such that A in S and
1 2 2 1 2 1 1
A in S are of the same color. This number captures a generalization of the bipartite Lemma
2 2
(Lemma 17).
LocalRamseyNumber. DenotebyR (d,τ,k)theminimalnumbernsuchthatforanycomplete
ℓ
binarytreeofdepthn,andanycoloringofallofitssubsetsoftypeτ withk colors,thereisasubtree
of depth d with the following local Ramsey property: for any vertex v in the subtree, all of the
subsets of type τ in the subtree having v as their LCA, are colored by the same color.
To simplify the proof we will use the following upper bounds for the above numbers:
R(d,m,k) := maxR(d,τ,k);
|τ|≤m
R (d,m,k) := max R (d,τ ,τ ,k);
b b 1 2
0<|τ1|,|τ2|≤m
R (d,m,k) := maxR (d,τ,k).
ℓ ℓ
|τ|≤m
For all d,m,k the following holds, provided that the right-hand-sides are finite:
1. R(d,m,k) ≤ R (d·k,m,k),
ℓ
24(cid:110) (cid:111)
2. R (d,m,k) ≤ 1+max R (R (d−1,m,k),m−1,k),R(R (d−1,m,k),m−1,k) ,
ℓ b ℓ ℓ
3. R (d,m,k) ≤
R(d,m−1,k·(cid:0)R(d,m−1,k)(cid:1)
),
b d T
where
(cid:0)n(cid:1)
stands for the number of subtrees of depth d in a tree of depth n.
d T
Justification for 1. Assume that we have a tree T of depth R (d·k,m,k) with k-coloring of all
ℓ
of m-subsets of some type. Then by definition of R , it admits a subtree of depth d·k with the
ℓ
local Ramsey property as described above. Then we can color each vertex in the subtree, by the
promised color from the property, apply the pigeonhole principle for trees on this coloring and get
the desired subtree of depth d·k/k = d.
Justification for 2. Assume that we have a tree T whose depth is at least the right-hand-side
of inequality 2 with k-coloring of all of m-subsets of some type τ. This coloring induces a natural
coloring on pairs in T × T where T is the left subtree of T and T is the right subtree of T;
1 2 1 2
each colored subset A in T, passes its color to the pair of subsets A ,A ⊆ A, where A = T ∩A.
1 2 i i
Notice that by the observation we made before, all the sets A ,A obtained like this have the same
1 2
pair of types τ ,τ of sizes |τ |,|τ | < m. We consider two cases: (i) both |τ |,|τ | > 0. Then the
1 2 1 2 1 2
left subtree T and the right subtree T of T are of depth ≥ R (R (d−1,m,k),m−1,k). By the
1 2 b ℓ
definition of R (·,·,·), it is promised that there are subtrees T′,T′ of T ,T accordingly of depth
b 1 2 1 2
R (d−1,m,k)suchthatallsuchpairsinT′×T′ arecoloredbythesamecolor. Then, whilekeeping
ℓ 1 2
the original coloring to these two subtrees T′,T′, and by the definition of R , it is promised that
1 2 ℓ
there are subtrees T′′,T′′ of T′,T′ accordingly of depth d−1 admitting the local Ramsey property.
1 2 1 2
Taking these two last subtrees with the root of T gives the desired subtree of depth d. (ii) In the
complementing case either |τ | = 0 or |τ | = 0. Assume without loss of generality that |τ | = 0.
1 2 2
Note that in this case, the LCA of τ belongs6 to τ, and hence |τ | = m−1. Notice that T has
1 1
depth ≥ R(R (d−1,m,k),m−1,k). By the definition of R(·,·,·), it is promised that there is a
ℓ
subtree T′ of T of depth R (d−1,m,k) such that all such sets of type τ in T′ are colored by
1 1 ℓ 1 1
the same color. Pick an arbitrary subtree T′ of T of depth R (d−1,m,k). Then, while keeping
2 2 ℓ
the original coloring to these two subtrees T′,T′, and by the definition of R , it is promised that
1 2 ℓ
there are subtrees T′′,T′′ of T′,T′ accordingly of depth d−1 admitting the local Ramsey property.
1 2 1 2
Taking these two last subtrees with the root of T gives the desired subtree of depth d.
(cid:16) (cid:17)
Justification for 3. AssumethatwehavetwotreesT ,T ofdepthR
d,m−1,k·(cid:0)R(d,m−1,k)(cid:1)
1 2 d T
with k-coloring of all pairs of m-subsets in T ×T of types τ ,τ . Take any subtree T′ of T of
1 2 1 2 2 2
depth R(d,m−1,k). Note that R(·,·,·) is monotonically increasing as a function of the number of
colors, so this operation is valid. Let A be an m-subset in T of type τ . A induces a k-coloring
1 1 1 1
on subsets in T′ of type τ ; color each m-subset A in T′ of this type with the original color of
2 2 2 2
(A ,A ). By the definition of R, there is a monochromatic subtree T′′ of T′ of depth d. Now color
1 2 2 2
the set A with the pair (T′′,c) where c is the color of the subsets in T′′. Apply this process for
1 2 2
each such A in T and get a coloring on T with
k·(cid:0)R(d,m−1,k)(cid:1)
) colors. By the definition of R,
1 1 1 d T
there is a monochromatic subtree T′ of T of depth d. Taking the pair of trees (T′,T′′) gives the
1 1 1 2
desired result since any colored pair of sets (A ,A ) in T′ ×T′′ has the same color.
1 2 1 2
6More precisely, every set of type τ contains its LCA.
25Double Induction. To finish the proof, we show the finiteness of these three Ramsey numbers
altogether. We prove by induction on m, that ∀d,k R(d,m,k),R (d,m,k),R (d,m,k) < ∞. The
ℓ b
base case m = 1 is the pigeonhole principle, and R(d,1,k),R (d,1,k),R (d,1,k) are finite for any
b ℓ
values of d,k. Also observe that for d < logm the theorem holds trivially for any value of k, since
any tree of depth d does not contain m-subsets for size m > 2d. For the induction step, suppose
that R(d,m,k),R (d,m,k),R (d,m,k) are finite for m < M and any values of d,k. From relation 3
b ℓ
we get that R (d,M,k) is finite for any values of d,k. In the next step, we aim to show that
b
R (d,M,k) < ∞ for any values of d,k. Using the finiteness of R (d,M −1,k),R(d,M −1,k) for
ℓ b
any values of d,k together with relation 2, we can infer by induction on d that R (d,M,k) < ∞,
ℓ
since we know for d < logM, so the base case holds. Now, combining this with the first relation 1,
we can now get that also R(d,M,k) < ∞ for any values of d,k.
4.3 Chains: Proof of Theorem C
In this section, we prove Theorem C. The proof in its core is similar to the proof of the classic
Ramsey theorem for sets given by Erd˝os and Rado [25].
Notethattheclosureofanm-chainC = {v < ... < v }isC itself,hencethetypeisdetermined
1 m
by the left/right descendant relations between all pairs of vertices in the chain. Moreover, since
in a chain, the relations among pairs of consecutive vertices determine all other relations, we can
exactly represent the type of an m-chain C as a tuple⃗t =⃗t(C) ∈ {0,1}m−1: that is, 0 (1) indicates
the next vertex in the chain is a left (right) descendant.
Denote by R(d,m,k) be the smallest n that satisfies the condition in Theorem C, i.e. R(d,m,k)
is the smallest n such that for every coloring of m-chains with k colors, there exists a type-
monochromatic subtree of depth d. The proof of Theorem C consists of two parts: the first
part shows that R(d,m,k) is well defined (i.e. R(d,m,k) < ∞), while the second part proves the
quantitative upper bound stated in theorem. The second part is deferred to Appendix A.
Proof of Theorem C. We prove the theorem by induction on m. The case m = 1 follows imme-
diately from Proposition 8 since a 1-chain is simply a vertex, hence a 1-chain coloring is a vertex
coloring, and the promised monochromatic subtree is in particular type-monochromatic.
Assumethatthestatementholdsform−1, anddenotet = R(d,m−1,k2). LetT beacomplete
binary tree of depth n, where n is sufficiently large (the size of n will be determined later on
in Appendix A). Let χ be an m-chain coloring of T using k colors. Following the footsteps of
the proof for comparable pairs (m = 2, see Proposition 14), we introduce a recursive procedure
constructing a subtree of T of depth t, denoted T⋆. Then, we define an (m − 1)-chain coloring
χ⋆ of T⋆, such that any χ⋆-type-monochromatic subtree of T⋆ is in fact type-monochromatic with
respect to χ. Finally, we apply the induction hypothesis on T⋆ and χ⋆, allowing us to obtain
the desired type-monochromatic subtree. Throughout the proof we denote the vertices of T⋆ by
u ,u ,u ,u ,u ,...,u ,whereforastringσ ∈ {0,1}i,i ∈ {0,...,t−1},u istheleftdescendant
∅ 0 1 00 01 1t σ0
of u , and u is the right descendant of u .
σ σ1 σ
We define by induction a sequence of trees S and vertices u as follows. For every σ ∈
σ σ
{0,1}≤(m−2),setu tobethevertexinT representedbythesequenceσ (therootofT isrepresented
σ
by the empty sequence, the left child of the root is 0, the right child is 1, etc.). Next, for every
σ ∈ {0,1}m−2 set S to be the subtree of T rooted at u . Assume the subtree S has been defined
σ σ σ
26and u is the root of S , where σ ∈ {0,1}i is a binary sequence of length i ≥ m−2. We define
σ σ
subtrees S and vertices u where b ∈ {0,1}, as follows.
σb σb
1. Consider the b’th-subtree of S , that is the left subtree of S for b = 0 and the right tree
σ σ
of S for b = 1. Define an equivalence relation on the vertices of the b’th-subtree of S as
σ σ
follows:
x ≡ y
⇐⇒
∀A ⊂ {u ,u ,...,u },|A| = m−2 : χ(A∪{u ,x}) = χ(A∪{u ,y}),
σ(0) σ(1) σ(i−1) σ σ
where σ(j) is the prefix of σ of length j (with σ(0) being the empty sequence). Note that
indeed every choice of m−2 vertices from the set {u ,u ,...,u }, together with u
σ(0) σ(1) σ(i−1) σ
and a vertex from the b’th-subtree of S , form an m-chain in T.
σ
Observethatanequivalenceclassisdeterminedbyasequenceof(cid:0) i (cid:1) colors, thereforethere
m−2
( i )
are at most k m−2 such equivalence classes.
2. Apply the pigeonhole principle for trees (Proposition 8) on the b’th-subtree of S , where the
σ
colors of the vertices are the equivalence classes defined in the previous step. Set S to be
σb
the promised monochromatic subtree, and set u to be its root.
σb
WechoosentobesufficientlylargesothisproceduremaybecontinueduntilT⋆ = {u }
σ σ∈{0,1}≤t
have been defined. See Appendix A for a more detailed discussion. Note that for every binary
sequence σ of length i, and every b ∈ {0,1},
(cid:22) (cid:23)
depth(S )−1
σ
depth(S ) ≥ . (2)
σb ( i )
k m−2
Next, define an (m−1)-chain coloring of T⋆, denoted χ⋆, as follows.
∀ (m−1)-chain C in T⋆ : χ⋆(C) = (cid:0) χ(C ∪{u }),χ(C ∪{u })(cid:1) ,
σ0 σ1
where u is any vertex from T⋆ that belongs to the b’th subtree emanating from the last vertex
σ
b
of the chain C. (If the last vertex in C is at level t, meaning it is a leaf of T⋆, we just pick an
arbitrary color for C out of the k2 possible colors.) Note that χ⋆ is well-defined. Indeed, take an
(m−1)-chain C in T⋆. If x,y are vertices that belong to the b’th subtree emanating from the last
vertex of the chain C, then by construction x ≡ y, meaning χ(C ∪{x}) = χ(C ∪{y}).
Finally,bytheinductionhypothesisappliedonT⋆andχ⋆,andbythechoiceoft = R(d,m−1,k2),
there exists a type-monochromatic subtree of T⋆ of depth d. In fact, this subtree is also type-
monochromatic with respect to the original m-chain coloring χ. Indeed, if C and C′ are two
m-chains with the same type, then the first m−1 vertices of C and C′ form an (m−1)-chains with
the same type that have the same color with respect to χ⋆. So by the definition of χ⋆ it is affirmed
that χ(C) = χ(C′). Therefore, we proved the finiteness of the Ramsey number R(d,m,k). It is left
to obtain from the recursive procedure described here the upper bound for R(d,m,k) that is stated
in the theorem. We provide a detailed calculation in Appendix A.
275 Impossibility Result for Private PAC Learning
In this section, we prove Theorem D. We first start with some notations and definitions that will
be useful throughout the proof.
Introducing Notations. Let T be a binary mistake tree whose vertices are labeled with in-
stances from a domain X and edges are labeled with labels from Y. Given a learning rule
A : (X ×Y)⋆ → YX, an input sequence S, and an unlabeled example x ∈ X, define
A (x) := Pr [h(x) = r ],
S x
h∼A(S)
where r ∈ Y is the label of the right outgoing edge from x in T. To ease the notations, from this
x
point onward we assume that the label of every left edge in T is 0, and the label of every right edge
is 1. In particular, by writing “0” we mean the left label, and by writing “1” we mean the right
one.7
Weidentify(m+1)-chainsinT withT-realizablesamplesofsizemasfollows. An(m+1)-chain
(cid:0) (cid:1)
C = {x < x < ... < x } in T corresponds to a sample S = (x ,y ),...,(x ,y ) , such that
1 2 m+1 1 1 m m
y = 0 if x belongs to the left subtree emanating from x , and y = 1 if x belongs to the right
i i+1 i i i+1
subtree emanating from x . Namely, (y ,...,y ) is the type8 of C,⃗t(C).
i 1 m
(cid:0) (cid:1)
LetS = (x ,y ),...,(x ,y ) beasamplethatisrealizablebyT, andassumeforconvenience
1 1 m m
that S is ordered, i.e. x < x < ... < x , where the order is the natural order induced by T . An
1 2 m
instance x is compatible with S if there exists a branch in T that realizes S and contains x. In such
a case we denote by
S+x := S ∪(x,y),
where y ∈ {0,1} is a label such that S∪(x,y) is T-realizable: note that if x appears earlier in the
branchthanx thenthereisauniquesuchy. Inthecomplementingcase,whenxappearsafterx ,
m m
both S∪(x,0) and S∪(x,1) are realizable by T. In that case we arbitrarily pick S+x = S∪(x,0)
and therefore S+x is well defined. The location of x in S is
loc (x) := max{i | x < x}.
S i
If x < x then define loc (x) := 0.
1 S
Step 1: Reduction to Approximately Comparison-Based Predictions. The first step
of the proof hinges on the Ramsey theory we developed for trees and consists of a reduction to
subtrees of Littlestone trees on which we can control the output of the algorithm. To define the
notion of comparison-based predictions, we first consider deterministic algorithms. Given a binary
decision tree T, a deterministic algorithm is comparison-based with respect to T if its prediction
on a test point x depends solely on the labels of the ordered input sample S, and the comparisons
of the test point with points in S, where comparisons are based on the partial order on T. A
7Note that in the case where |Y|>2, the probabilities of the learner labeling x as the label of a left turn, and as
thelabelofarightturn,doesnotnecessarilysumto1. However,everyalgorithmcanbeconvertedtoanalgorithmfor
which this sum is 1 (while maintaining utility and privacy), by a simple post-processing step: if the learner outputs
a hypothesis that predicts a label different from the left or right label, replace it with one of them.
8Recallthatthetypeofanm-chainC isdescribedasatuple⃗t=⃗t(C)∈{0,1}m−1 where⃗t =0ifandonlyifthe
i
i+1’th vertex in C is a left descendant of the i’th vertex.
28result of comparing two examples x′ and x′′ can be one of five outcomes: (i)+(ii) x′ is a left (right)
descendant of x′′, (iii)+(iv) x′′ is a left (right) descendant of x′, or (v) x′ and x′′ are incomparable.
We remark that later on we will focus on input samples that are T-realizable, and only consider
compatible test points, i.e. test points that are comparable with every point in the input sample.
For a visual example please refer to Figure 6.
We extend naturally this notion of comparison-based predictions to randomized algorithms. A
randomizedalgorithmiscomparison-basedwithrespecttoT ifforeverytestpointx,theprobability
that it labels x as 1 is determined by the labels of the ordered input sample S, and the comparisons
of the test point with points in S. A randomized algorithm is approximately comparison based
if its predictions are closed to the prediction of a comparison-based randomized algorithm. Note
that given a T-realizable input sequence S and a compatible test point x, the labels of S and the
comparisons of x and the training points in S are completely encoded by the chain-type of S+x,
and the location of x inside S. Therefore, we formally define approximately comparison-based
algorithms as follows.
Definition 19 (Approximately Comparison-Based Algorithm). A (randomized) algorithm A, de-
fined over input samples of size m, is approximately γ-comparison-based on T if the following
holds. There exist numbers p ∈ [0,1] for ⃗t ∈ {0,1}m+1 and i ∈ {0,...,m} such that for every
⃗t,i
input sample S of size m realizable by T, and for every x compatible with S,
|A (x)−p |≤ γ,
S ⃗t,i
where ⃗t =⃗t(S+x) is the type of the sample S+x, and i = loc (x) is the location of x in S.
S
As a consequence of the Ramsey theorems we proved for trees, it turns out that every algorithm
can be reduced to an approximately comparison-based algorithm.
Lemma 20 (Every Algorithm is Approx. Comparison-based on a Large Subtree). Let A be a
(possibly randomized) algorithm that is defined over input samples of size m over a domain X, and
let T be a decision tree of depth n whose vertices are labeled by instances from X. Then, there
exists a subtree T′ of T of depth log (m+1)(n) , where c < 35 is a universal numerical constant, such
2c2mmlogm
that A is (cid:0) 1 (cid:1) -comparison-based on T′.
100m
Step 2: Lower Bound the Sample Complexity of Private Approx. Comparison-based
Algorithms. Thesecondstepoftheproofisprovidingalowerboundonthesamplecomplexityof
privateapprox.comparison-basedalgorithmsthatlearnashatteredtreeT. NotethatbyLemma11
it is enough to provide a lower bound for algorithms that empirically learn T, since the sample
complexity increases only by a multiplicative constant factor. We do so by giving a reduction from
the interior point problem, introduced by Bun, Nissim, Stemmer, and Vadhan [15]. A randomized
algorithm solves the interior point problem on [n] if for every input dataset X ∈ [n]m, with high
probability it returns a point that lies between minX and maxX (see Section 3.2). Bun et al.
[15] showed that solving the interior point problem with respect to differential privacy requires a
dataset size of m ≥ Ω(log⋆n), we use that bound to derive a bound on the sample complexity.
The upcoming lemma, in conjunction with Lemma 20 from Step 1, implies Theorem D, as we
will prove shortly.
Lemma 21. [Sample Complexity for Privately Learning Trees] Let T be a decision tree of depth n
and let A be an algorithm defined over input samples of size m. Assume that
291. A is (ϵ,δ(m))-differentially private for some ϵ ≤ 10−3, and δ(m) ≤ 1/103m2.
2. A is (cid:0) 1 (cid:1) -comparison-based on T.
100m
3. A is an (α,β)-accurate empirical learner for T, where α = β = 10−4. Here, by empirical
learner for T, we mean an empirical learner with respect to input samples that are realizable
by (a branch of) T.
Then, m = Ω(log⋆n).
5.1 Proof of Theorem D
Theorem D follows from Lemmas 20 and 21.
Proof. Let H be a partial concept class over an arbitrary label domain Y, and assume that H
shatters a Littlestone tree T of depth d. Let A be any (ϵ,δ(m))-differentially private learner for H,
with ϵ,δ(m) as in Theorem D. We further assume that A is an (α,β)-accurate empirical learner
for H, for α = β = 10−4. This assumption is justified by Lemma 11, as the sample complexity of
a private empirical learner increases only by a multiplicative constant factor. By Lemma 20, there
exists a subtree T′ of T, of depth log (m+1)(d) for some universal numerical constant c < 35, such
2c2mmlogm
that A is (cid:0) 1 (cid:1) -comparison-based on T′. Finally, by Lemma 21 we conclude that
100m
(cid:18) (cid:18)log (d)(cid:19)(cid:19)
m ≥ Ω log⋆ (m+1) .
2c2mmlogm
Let t = log⋆(d) and suppose m ≤ t (else m = Ω(log⋆d) and we are done). We claim that
10
(cid:16) (cid:17)
log⋆ log (m+1)(d) = Ω(log⋆d), and therefore m ≥ Ω(log⋆(d)), which concludes the proof. Note that
2c2mmlogm
by the definition of the log⋆ function, twr (1) < d ≤ twr (1). The claim follows from the
(t) (t+1)
following calculation:
(cid:18)log (d)(cid:19)
(cid:16) (cid:17)
log⋆ (m+1) = 1+log⋆ log (d)−c2mmlogm (definition of log⋆)
2c2mmlogm (m+2)
≥
1+log⋆(cid:0)
twr
(1)−c2mmlogm(cid:1)
(d > twr (1))
(t−(m+2)) (t)
≥
1+log⋆(cid:0)
twr
(1)−c2mmlogm(cid:1)
(holds for t ≥ 5 since m ≤ t/10)
(t/2)
(cid:16) (cid:17)
≥ 1+log⋆ twr (1)−2t/2 (∀m : 35·2mmlogm ≤ 25m ≤ 2t/2)
(t/2)
=
1+log⋆(cid:0)
twr
(1)(cid:1)
(holds for t ≥ 10, see justification below)
(t/2)
= t/2. (definition of log⋆)
(cid:16) (cid:17)
Therefore, for large enough d, log⋆ log (m+1)(d) ≥ 1 log⋆d, as desired. It is left to justify the
2c2mmlogm 2
second-to-last equality. It is enough to show that twr (1)−2x > twr (1) for x ≥ 5. And
(x) (x−1)
indeed twr (1)−twr (1) ≥ 1twr (1) ≥ 2x for x ≥ 5.
(x) (x−1) 2 (x)
Therefore, it is left to prove Lemmas 20 and 21.
305.2 Proof of Lemma 20
Proof. Define a coloring of (m + 2)-chains of T as follows. Let C = {x < ... < x } be an
1 m+2
(cid:0) (cid:1)
(m+2)-chain. Recall that C corresponds to a sample S = (x ,y ),...,(x ,y ) of size m+1
1 1 m+1 m+1
where (y ,...,y ) = ⃗t(C) is the type of C. For each i ∈ {1,...,m + 1}, let S−i denote the
1 m+1
sample S\(x ,y ). Set q (C) to be the fraction of the form r that is closest to A (x ) (in case
i i i 100m S−i i
of ties pick the smallest such fraction). The color assigned to C is the list (q (C),...,q (C)). 9
1 m+1
Therefore, the total number of colors is at most k := (100m + 1)m+1. By Ramsey theorem
for Chains (Theorem C) there exists a subtree T′ that is type-monochromatic with respect to the
above coloring of depth
log (n)
(m+1)
d ≥
5·2mk2m+1logk
log (n)
(m+1)
=
5·2m(100m+1)(m+1)2m+1(m+1)log(100m+1)
log (n)
(m+1)
=
2log5+m+log(100m+1)(m+1)2m+1+log(m+1)+loglog(100m+1)
log (n)
(m+1)
≥ ,
2c2mmlogm
where 1 < c < 35 is a universal numerical constant. For every possible type ⃗t ∈ {0,1}m+1 and
i ∈ {0,...,m}, set p to be q (C) where C is any ⃗t-typed (m+2)-chain in T′. Note that p
⃗t,i i+1 ⃗t,i
is well defined since T′ is type-monochromatic. It is straightforward to verify that A is (cid:0) 1 (cid:1) -
100m
comparison-based on T′ with respect to {p }, as wanted.
⃗t,i
5.3 Proof of Lemma 21
The proof of Lemma 21 hinges on a reduction from the interior point problem. Before describing
the reduction, we will introduce notation which will be used in this proof. Given a branch B in a
tree and an example z on B, denote
(cid:40)
0, if (z,0) ∈ B
b = .
z
1, if (z,1) ∈ B
Reduction from Interior Point Problem. Let T be a tree of depth n, and A be an algorithm
as in Lemma 21. Let d ...d ∈ [n] be natural numbers, the input to the interior point problem.
1 m
Forconvenience,assumethattheyareorderedd ≤ ... ≤ d . Additionally,assumethatd −d >
1 m i+1 i
log2n for all 1 ≤ i < m. Define algorithm A˜ as in follows.
9Notice that the color assigned to C depends only weakly on the last vertex x via the label y . We find it
m+2 m+1
moreconvenientandlesscumbersometoincreasethesizeofthechainbyoneratherthankeepingtrackofthelabels.
31Algorithm 1 A˜ (Reduction from IPP)
Input: d ...,d .
1 m
- Sample uniformly at random a branch B ∼ Branches(T).
- S ← ((x ,y ),...(x ,y )), where x is the point of depth d in B, and y = b .
1 1 m m i i i xi
- Sample h ∼ A(S).
- Search for “long almost-correct intervals”: a long almost-correct interval is a sequences of
consecutive examples Z = (z ,...z ) on B of length l = ⌊log2n⌋, such that (cid:80)l 1[h(z ) = b ] ≥
1 l i=1 i zi
0.9·l, where n = depth(T).
(cid:8) (cid:9)
Output: Output max depth(z ) | Z = (z ...z ) is a long almost-correct interval .
1 1 l
In other words, output the depth of the first point of the deepest almost-correct interval. If
there are no long almost-correct intervals, return n.
Claim 22. A˜is(ϵ,δ(m))-differentially private, and with probability at least 3 its output lies between
4
d and d .
1 m
Lemma 21 is a direct corollary of Claim 22 and Lemma 13. In order to prove Claim 22, we first
need to collect some lemmas and definitions.
Definition 23. Given a pair of consecutive examples (x ,x ) in S, we define the following prop-
i i+1
erties.
1. “Sign change”: The pair is considered a sign-changing pair if y ̸= y .
i i+1
2. “Matching neighbors”: The pair is considered to have matching-label neighbors if there
exist examples x′ and x′′ compatible with B such that
x < x′ < x and b = y ,
i−1 i x′ i
x < x′′ < x and b = y .
i+1 i+2 x′′ i+1
In words, there exists an example before x with the same label as x , and there exists an
i i
example after x with the same label as x , and in addition, these examples located in the
i+1 i+1
i−1 and i+1 locations with respect to S, respectively.
3. “Correct”: The pair is considered correct if
|A (x )−y | ≤ ξ,
S i i
|A (x )−y | ≤ ξ,
S i+1 i+1
for ξ = 17(α + β) = 34 · 10−4. In other words, a random hypothesis sampled from A(S)
labels correctly x with probability at least 1−ξ, and labels correctly x with probability at
i i+1
least 1−ξ.
We will show that with high probability over the randomness of A˜, there exists a pair of
examples (x ,x ) that satisfies the above properties. Then, we will show that since A is private
i i+1
and approximately comparison-based, the interval between x and x is a long almost-correct
i i+1
interval (refer to Algorithm 1 for the definition of a ’long almost-correct interval.’).
32Lemma 24. There exists an index i such that the pair of examples (x ,x ) satisfies properties
i i+1
1,2 and 3 as in Definition 23, with probability ≥
1−2exp(cid:0) −m−3(cid:1)
where the probability is taken
16
over the randomness of A˜ (i.e. over the choice of the random branch).
Proof. For 1 < j < m−1, we define the following good events:
SC : The pair (x ,x ) satisfies property 1 (sign change).
j j j+1
MN : The pair (x ,x ) satisfies property 2 (matching neighbors), and in addition
j j j+1
dist (x′,x ),dist (x ,x′′) ≤ (log2n)/2,
T j T j+1
wherethedistancebetweentwocomparableexamplesz ,z inT isdist (z ,z ) := |depth(z )−depth(z )|.
1 2 T 1 2 1 2
Next, define random variables X = 1[SC ∩MN ] for 1 < j < m−1. Note that:
j j j
(a) X and X are independent if |j −j′| > 1, because the distance between every consecutive
j j′
examples x ,x in S is at least log2n. In particular, {X }⌊(m−2)/2⌋ are IID.
j j+1 2k k=1
(b) Denote D = ⌊(log2n)/2⌋. Then, since the branch B is sampled uniformly at random,
(cid:16) (cid:17)
E[X ] = 1− Pr[(SC )∁ ]+Pr[SC ]·Pr[(MN )∁ ] ( SC ,MN are independent)
j j j j j j
(cid:18) (cid:19)
= 1− 1 + 1 (cid:0) 2·2−D −2−2D(cid:1)
2 2
1
= −2−D +2−(2D+1)
2
(cid:80)⌊m−2⌋
Let X = 2 X . By Chernoff,
k=1 2k
(cid:20)(cid:12) (cid:22) (cid:23) (cid:12) (cid:22) (cid:23) (cid:21) (cid:18) (cid:22) (cid:23)(cid:19)
Pr (cid:12) (cid:12)X − m−2 ·E[X j](cid:12) (cid:12) ≥ m−2 · 1 ≤ 2exp −1 m−2
(cid:12) 2 (cid:12) 2 4 8 2
(cid:18) (cid:19)
m−3
≤ 2exp − .
16
Note that
 
 (cid:22) m−2(cid:23) (cid:18) 1 1 1 (cid:19) (cid:22) m−2(cid:23) 1 (cid:20) m−2 3 m−3 1(cid:21)
PrX > · − + − ·  ≤ Pr X > · − ·
 2 2 2D 22D+1 2 4 2 8 2 4
 
(cid:124) (cid:123)(cid:122) (cid:125)
E[Xj]
(cid:104) m(cid:105)
= Pr X > ,
16
where the inequality holds if E[X ] ≥ 3/8, which holds for n ≥ 8. Therefore, with probability at
j
least 1 −
2exp(cid:0) −m−3(cid:1)
, X > m/16, i.e. the number of pairs (x ,x ) that satisfy properties 1
16 j j+1
and 2 is at least m/16.
Considerthecasewhenthereexistatleastm/16pairssatisfyingproperties1and2, andassume
towardscontradictionthatallofthepairssatisfyingproperties1and2donotsatisfyproperty3. I.e.,
33if (x ,x ) is a sign-changing pair with matching-label neighbors, then either |A (x )−y | > ξ,
j j+1 S j j
or |A (x )−y | > ξ. Note that since A is an (α,β)-empirical learner,
S j+1 j+1
m m
1 (cid:88) 1 (cid:88)
E [L (h)] = Pr [h(x ) ̸= y ] = |A (x )−y | ≤ α+β,
h∼A(S) S m h∼A(S) i i m S i i
i=1 i=1
and by the assumption above it holds that
m
1 (cid:88) 1
|A (x )−y | > ξ.
S i i
m 16
i=1
But this is a contradiction to the choice of ξ = 34 · 10−4,α = 10−4,β = 10−4. Therefore, with
probability at least
1−2exp(cid:0) −m−3(cid:1)
, there exists 1 < i < m−1 such that the pair of examples
16
(x ,x ) satisfy properties 1,2 and 3 as wanted.
i i+1
Definition 25. A pair of consecutive points (x ,x ) on S is A-good with parameter ξ′ if the
i i+1
following holds. For every compatible point x between x and x (i.e. x < x < x under the
i i+1 i i+1
partial order induced by T),
|A (x)−b | ≤ ξ′.
S x
Lemma 26. There exists a pair of consecutive points (x ,x ) in S that is A-good with parameter
i i+1
ξ′ = 2(eϵ−1+δ(m))+ 2 +18(α+β), with probability ≥ 1−2exp(cid:0) −m−3(cid:1) over the randomness
100m 16
of A˜.
Proof. By Lemma 24, with high probability at least
1−2exp(cid:0) −m−3(cid:1)
over the choice of the sam-
16
ple S, there exists a pair of examples (x ,x ) such that
i i+1
1. y ̸= y ;
i i+1
2. there exist x < x′ < x and x < x′′ < x , such that b = y and b = y ;
i−1 i i+1 i+2 x′ i x′′ i+1
3. |A (x )−y | ≤ ξ and |A (x )−y | ≤ ξ.
S i i S i+1 i+1
It suffices to show that conditioned on this event there exists a A-good consecutive pair with
parameter ξ′. Let x be a compatible example between x and x such that b = y . Denote by S˜
i i+1 x i
the sample that is obtained by replacing (x ,y ) in S with (x′,y ), where x′ is the matching-label
i i i
neighbor of x . Observe that
i
⃗t(S˜+x) =⃗t(S˜+xi), and
loc (x) = loc (x ) = i,
S˜ S˜ i
where⃗t(S˜+z)isthetypeofS˜togetherwithz,andloc (z)isthelocationofz insideS˜. SeeFigure8
S˜
for an illustration. Therefore, since A is a (cid:0) 1 (cid:1) -comparison-based algorithm on T,
100m
2
|A (x)−A (x )| ≤ . (3)
S˜ S˜ i
100m
34x′ i’th example in S˜
x
i
x
x i+1(i+1)’th example in S˜
Figure 8: Both x and x lies between the ith and the (i+1)th examples of S˜, and both (x ,x )
i i i+1
and (x,x ) are y -pairs in T.
i+1 i
ϵ,δ ϵ,δ
Moreover, since A is (ϵ,δ)-differentially private, A (x) ≈ A (x) and A (x ) ≈ A (x ). Note
S S˜ S i S˜ i
ϵ,δ
that for every ϵ,δ ≥ 0, if a,b ∈ [0,1] satisfy a ≈ b, then |a−b| ≤ eϵ−1+δ. Indeed,
a−b ≤ (eϵ−1)·b+δ ≤ eϵ−1+δ,
b−a ≤ (eϵ−1)·a+δ ≤ eϵ−1+δ.
Therefore,
|A (x)−A (x)| ≤ eϵ−1+δ, (4)
S S˜
|A (x )−A (x )| ≤ eϵ−1+δ. (5)
S i S˜ i
Finally, by Equations (3) to (5) and Item 3
|A (x)−y | ≤ |A (x)−A (x)|+|A (x)−A (x )|+|A (x )−A (x )|+|A (x )−y |
S i S S˜ S˜ S˜ i S˜ i S i S i i
2
≤ 2(eϵ−1+δ)+ +ξ
100m
≤ ξ′,
by the choice of ξ′.
The case b = y is symmetric, therefore (x ,x ) is A-good pair as wanted.
x i+1 i i+1
Lemma 27. Let l = ⌊log2n⌋ and let Z = (z < z < ... < z ) be a sequence of consecutive
1 2 l
examples on B. Assume that Z starts below S on T, i.e. x < z . Then,
m 1
(cid:34) l (cid:35) (cid:18) (cid:19)
(cid:88) 4
Pr 1[h(z ) = b ] ≥ 0.9·l ≤ exp −2· ·l .
B,h∼A(S)
i zi
25
i=1
35Proof. WecanconceptualizetherandomnessofthereductionalgorithmA˜inthefollowingmanner:
Initially, a fair coin is independently tossed d +1 times (recall that d is the largest input). These
m m
cointossesdeterminethefirstd +1turnsofthebranchB, whichinturndeterminesthesampleS,
m
the input for A. Subsequently, the coin is independently tossed n−d −1 more times, completing
m
the determination of the branch B. This illustrates that, for every example z that is below S,
(cid:104) (cid:105)
A (z) is independent of b , and Pr[h(z) = b ] = 1/2. Therefore, E (cid:80)l 1[h(z ) = b ] = l/2, and
S z z i=1 i zi
the statement follows by applying a standard Chernoff bound.
We turn to prove Claim 22.
Proof of Claim 22. We start by showing that A˜is (ϵ,δ(m))-differentially private, and then we will
show that with probability at least 3/4 its output is an interior point.
Privacy: Let D and D′ be neighboring datasets. Consider the output distributions A˜(D) and
A˜(D′). We couple these distributions by selecting the same random branch B in the first step of
the algorithm. Hence, the samples S and S′ that are input to A are also neighbors. Since A is
(ϵ,δ)-DP, it follows that the distributions A(S) and A(S′) are (ϵ,δ)-indistinguishable. Since the
outputs A˜(D) and A˜(D′) are functions of A(S) and A(S′), by post-processing (Proposition 10), it
follows that A˜(D) and A˜(D′) are also (ϵ,δ)-indistinguishable. Hence, A˜ is (ϵ,δ)-DP.
Utility: Observe the following.
1. If(x ,x )isanA-goodpairwithparameterξ′,thenforanysequenceofconsecutiveexamples
i i+1
Z = (z ,...,z ) of length l = ⌊log2n⌋, such that x ≤ z < z ≤ x , it holds that
1 l i 1 l i+1
(cid:34) l (cid:35) l
(cid:88) (cid:12) (cid:88)
E 1[h(z ) ̸= b ] (cid:12) (x ,x ) is A-good with parameter ξ′ = |A (z )−b | ≤ ξ′·l.
B,h∼A(S) i zi (cid:12) i i+1 S i zi
i=1 i=1
By Markov’s inequality,
(cid:34) l (cid:35)
(cid:88)
Pr 1[h(z ) ̸= b ] ≥ 0.1·l ≤ 10·ξ′.
i zi
i=1
2. By Lemma 26 there are no A-good pairs with probability ≤
2exp(cid:0) −m−3(cid:1)
.
16
3. By Lemma 27,
(cid:18) (cid:19)
8
Pr[∃ a long almost-correct Z = (z ,...,z ) that starts below S] ≤ n·exp − log2n
1 l
25
Therefore, by applying a union bound,
(cid:18) (cid:19) (cid:18) (cid:19)
(cid:104) (cid:105) m−3 8
Pr A˜returnsapointthatis ≤ 10ξ′+2exp − +n·exp − log2n
notbetweend1 anddm 16 25
(cid:18) (cid:19)
20 m−3
= 20(eϵ−1+δ(m))+ +180(α+β)+2exp − +
100m 16
(cid:18) (cid:19)
8
+n·exp − log2n .
25
36Eachoneofthefivesummandsissmallerthan1/20, bythechoiceofϵ = 10−3,δ(m) = 1/103m,α =
10−4,β = 10−4, and for large enough10 m and n. Therefore, the claim follows.
Acknowledgements
We thank Noga Alon, Zachary Chase, Roi Livni, and Uri Stemmer, for insightful discussions.
SM is a Robert J. Shillman Fellow; he acknowledges support by ISF grant 1225/20, by BSF
grant 2018385, by an Azrieli Faculty Fellowship, by Israel PBC-VATAT, by the Technion Center
for Machine Learning and Intelligent Systems (MLIS), and by the the European Union (ERC,
GENERALIZATION,101039692). Viewsandopinionsexpressedarehoweverthoseoftheauthor(s)
only and do not necessarily reflect those of the European Union or the European Research Council
Executive Agency. Neither the European Union nor the granting authority can be held responsible
for them.
References
[1] Ishaq Aden-Ali, Yeshwanth Cherapanamjeri, Abhishek Shetty, and Nikita Zhivotovskiy. Opti-
mal pac bounds without uniform convergence. In Proc. 64th Symp. Foundations of Computer
Science (FOCS), pages 1203–1223, 2023.
[2] Noga Alon and Wolfgang Maass. Meanders, ramsey theory and lower bounds for branching
programs. In Proc. 27th Symp. Foundations of Computer Science (FOCS), pages 410–417,
1986.
[3] Noga Alon and Joel H. Spencer. The Probabilistic Method, Third Edition. Wiley-Interscience
series in discrete mathematics and optimization. Wiley, 2008.
[4] Noga Alon, Roi Livni, Maryanthe Malliaris, and Shay Moran. Private PAC learning implies
finitelittlestonedimension. InProc. 51st Symp. Theory of Computing (STOC),pages852–860,
2019.
[5] Noga Alon, Steve Hanneke, Ron Holzman, and Shay Moran. A theory of PAC learnability of
partial concept classes. In Proc. 62nd Symp. Foundations of Computer Science (FOCS), pages
658–671, 2021.
[6] Noga Alon, Mark Bun, Roi Livni, Maryanthe Malliaris, and Shay Moran. Private and online
learnability are equivalent. J. ACM, 69(4):28:1–28:34, 2022.
[7] Noga Alon, Shay Moran, Hilla Schefler, and Amir Yehudayoff. A unified characterization of
private learnability via graph theory, 2023.
[8] Boaz Barak, Guy Kindler, Ronen Shaltiel, Benny Sudakov, and Avi Wigderson. Simulating
independence: New constructions of condensers, ramsey graphs, dispersers, and extractors. J.
ACM, 57(4):20:1–20:52, 2010.
10Note that, without loss of generality, we may assume that m≥1/α=104 since A is an (α,β)-accurate learner
for T. Additionally, the assumption that n is large enough is concealed in the big Ω notation.
37[9] Imre B´ar´any and Gyula K´arolyi. Problems and results around the erd¨os-szekeres convex
polygon theorem. In Proc. Japanese Conf., Discrete and Computational Geometry (JCDCG),
pages 91–105, 2000.
[10] Amos Beimel, Kobbi Nissim, and Uri Stemmer. Characterizing the sample complexity of
private learners. In ITCS. ACM, 2013.
[11] Amos Beimel, Kobbi Nissim, and Uri Stemmer. Characterizing the sample complexity of pure
private learners. Journal of Machine Learning Research, 20(146):1–33, 2019. URL http:
//jmlr.org/papers/v20/18-269.html.
[12] Shai Ben-David, D´avid P´al, and Shai Shalev-Shwartz. Agnostic online learning. In Proc. 22nd
Conf. Learning Theory (COLT), 2009.
[13] Nataly Brukhim, Daniel Carmon, Irit Dinur, Shay Moran, and Amir Yehudayoff. A charac-
terization of multiclass learnability. In Proc. 63rd Symp. Foundations of Computer Science
(FOCS), pages 943–955. IEEE, 2022.
[14] Mark Bun. New Separations in the Complexity of Differential Privacy. PhD thesis, Harvard
University, Graduate School of Arts & Sciences, 2016.
[15] Mark Bun, Kobbi Nissim, Uri Stemmer, and Salil P. Vadhan. Differentially private release
and learning of threshold functions. In Proc. 56th Symp. Foundations of Computer Science
(FOCS), pages 634–649, 2015.
[16] Mark Bun, Roi Livni, and Shay Moran. An equivalence between private classification and on-
line prediction. In Sandy Irani, editor, 61st IEEE Annual Symposium on Foundations of Com-
puter Science, FOCS 2020, Durham, NC, USA, November 16-19, 2020, pages 389–402. IEEE,
2020. doi: 10.1109/FOCS46700.2020.00044. URL https://doi.org/10.1109/FOCS46700.
2020.00044.
[17] Yue Cai and Catherine Yan. Counting with borel’s triangle. Discrete Mathematics, 342(2):
529–539, 2019.
[18] Eshan Chattopadhyay and David Zuckerman. Explicit two-source extractors and resilient
functions. In Proc. 48th Symp. Theory of Computing (STOC), page 670–683, 2016.
[19] TsunMing Cheung, Hamed Hatami, Pooya Hatami, and Kaave Hosseini. Online learning and
disambiguations of partial concept classes. In Proc. 50th Intl. Coll. Autom. Lang. Program.
(ICALP), volume 261, pages 42:1–42:13, 2023.
[20] David Conlon, Jacob Fox, and Benny Sudakov. Recent developments in graph ramsey theory.
In Surveys in Combinatorics 2015, volume 424 of London Mathematical Society Lecture Note
Series, pages 49–118. 2015.
[21] Ronald D. Dutton and Robert C. Brigham. Computationally efficient bounds for the catalan
numbers. Europ. J. Comb., 7(3):211–213, 1986.
[22] Cynthia Dwork and Aaron Roth. The algorithmic foundations of differential privacy. Founda-
tions and Trends in Theoretical Computer Science, 9(3-4):211–407, 2014.
38[23] Cynthia Dwork, Frank McSherry, Kobbi Nissim, and Adam D. Smith. Calibrating noise to
sensitivity in private data analysis. In Proc. 3rd Conf. Theory of Cryptography (TCC), volume
3876, pages 265–284, 2006.
[24] P.E.A. D’Auriac, P.A. Cholak, D.D. Dzhafarov, B. Monin, and L. Patey. Milliken’s Tree
Theorem and Its Applications: A Computability-Theoretic Perspective. Memoirs of the Amer.
Math. Society. Amer. Math. Society, 2024.
[25] P. Erd˝os and R. Rado. Combinatorial theorems on classifications of subsets of a given set.
Proceedings of the London Mathematical Society, 3(2):417–439, 1952.
[26] Paul Erd˝os and George Szekeres. A combinatorial problem in geometry. Compositio Mathe-
matica, 2:463–470, 1935.
[27] Vitaly Feldman and David Xiao. Sample complexity bounds on differentially private learning
via communication complexity. SIAM Journal on Computing, 44(6):1740–1764, 2015.
[28] Christopher Francisco, Jeffrey Mermin, and Jay Schweig. Catalan numbers, binary trees, and
pointed pseudotriangulations. Europ. J. Comb., 45, 04 2015.
[29] Peter Frankl and Richard M. Wilson. Intersection theorems with geometric consequences.
Combinatorica, 1:357–368, 1981.
[30] Harry Furstenberg. Ergodic behavior of diagonal measures and a theorem of szemer´edi on
arithmetic progressions. Journal d’Analyse Math´ematique, 31:204–256, 1977.
[31] Harry Furstenberg. Recurrence in Ergodic Theory and Combinatorial Number Theory. Prince-
ton University Press, 1981.
[32] Hillel Furstenberg and Benjamin Weiss. Markov processes and ramsey theory for trees. Com-
binatorics, Probability and Computing, 12(5–6):547–563, 2003.
[33] William Gasarch. Applications of ramsey theory to computer science. https://www.cs.umd.
edu/~gasarch/TOPICS/ramsey/ramsey.html, 2022. Accessed: 25/03/2024.
[34] R.L. Graham, B.L. Rothschild, and J.H. Spencer. Ramsey Theory. Wiley Series in Discrete
Mathematics and Optimization. Wiley, 1991.
[35] Steve Hanneke, Shay Moran, and Jonathan Shafer. A trichotomy for transductive online
learning. In Proc. 37th Conf. Adv. Neural Information Processing Systems (NeurIPS), 2023.
[36] Wilfrid Hodges. A shorter model theory. Cambridge University Press, 1997.
[37] The OEIS Foundation Inc. On-line encyclopedia of integer sequences. https://oeis.org/,
2024. Accessed: 16/05/2024.
[38] Young Hun Jung, Baekjin Kim, and Ambuj Tewari. On the equivalence between online and
private learnability beyond binary classification. In Proc. 33rd Conf. Adv. Neural Information
Processing Systems (NeurIPS), 2020.
39[39] Alkis Kalavasis, Grigoris Velegkas, and Amin Karbasi. Multiclass learnability beyond the
PAC framework: Universal rates and partial concept classes. In Proc. 35th Conf. Adv. Neural
Information Processing Systems (NeurIPS), 2022.
[40] Haim Kaplan, Katrina Ligett, Yishay Mansour, Moni Naor, and Uri Stemmer. Privately
learningthresholds: Closingtheexponentialgap. InJacobD.AbernethyandShivaniAgarwal,
editors, Conference on Learning Theory, COLT 2020, 9-12 July 2020, Virtual Event [Graz,
Austria], volume 125 of Proceedings of Machine Learning Research, pages 2263–2285. PMLR,
2020.
[41] Shiva Prasad Kasiviswanathan, Homin K. Lee, Kobbi Nissim, Sofya Raskhodnikova, and
Adam D. Smith. What can we learn privately? SIAM J. Comput., 40(3):793–826, 2011.
[42] Nick Littlestone. Learning quickly when irrelevant attributes abound: A new linear-threshold
algorithm. In Proc. 28th Symp. Foundations of Computer Science (FOCS), pages 68–77, 1987.
[43] Nick Littlestone. Learning quickly when irrelevant attributes abound: A new linear-threshold
algorithm. Machine Learning, 2:285–318, 1988.
[44] Philip Long. On agnostic learning with {0,∗,1}-valued and real-valued hypotheses. In Proc.
14th Conf. Learning Theory (COLT), 2001.
[45] Keith R. Milliken. A ramsey theorem for trees. J. Comb. Theory, Series A, 26(3):215–237,
1979.
[46] Chirag Pabbaraju. Multiclass learnability does not imply sample compression. In Proc. 35th
Intl. Conf. Algorithmic Learning Theory (ALT), 2024.
[47] J´anos Pach, G´abor Tardos, and J´ozsef Solymosi. Remarks on a ramsey theory for trees.
Combinatorica, 32(4):473–482, 2012.
[48] F. P. Ramsey. On a problem of formal logic. Proceedings of the London Mathematical Society,
s2-30:264–286, 1930.
[49] Fred S. Roberts. Applications of ramsey theory. Disc. Appl. Math., 9(3):251–261, 1984.
[50] Vera Rosta. Ramsey theory applications. Electronic Journal of Combinatorics, 1000, 2004.
[51] Shai Shalev-Shwartz and Shai Ben-David. Understanding machine learning: From theory to
algorithms. Cambridge university press, 2014.
[52] Satchit Sivakumar, Mark Bun, and Marco Gaboardi. Multiclass versus binary differentially
private PAC learning. In Proc. 34th Conf. Adv. Neural Information Processing Systems
(NeurIPS), pages 22943–22954, 2021.
[53] Endre Szemer´edi. On sets of integers containing k elements in arithmetic progression. Acta
Arithmetica, 27:199–245, 1975.
[54] Salil P. Vadhan. The complexity of differential privacy. In Tutorials on the Foundations of
Cryptography, pages 347–450. Springer International Publishing, 2017.
40[55] Leslie G. Valiant. A theory of the learnable. Commun. ACM, 27(11):1134–1142, 1984.
[56] Avi Wigderson. Mathematics and Computation: A Theory Revolutionizing Technology and
Science. Princeton University Press, 2019.
41A Upper Bound for the Ramsey Number for Chains
In the proof of Theorem C we showed the existence of the Ramsey number R(d,m,k). Here we
give an explicit calculation for the sufficient depth n that is required for the proof. Subsequently,
we derive an upper bound for R(d,m,k).
TheproceduredescribedintheproofofTheoremCcanbecontinueduntilstept = R(d,m−1,k2)
if for every sequence σ of length t, depth(S ) ≥ 0. Consider a sequence σ of length t. To ease the
σ
notation, for every step i ∈ {m−2,...,t}, depth(S ) is denoted by d . Recall, by Equation (2)
σ(i) i
the following holds.

 d = n−(m−2),
 m−2
(cid:22) (cid:23) (6)
  d i+1 ≥ (di− i1 ) .
k m−2
( i )
Observe that if d i ≥ 2k m−2 then
(cid:22) (cid:23)
d −1 d d
i i i
d ≥ ≥ −1 ≥ . (7)
i+1 ( i ) ( i ) ( i )
k m−2 k m−2 2k m−2
( i )
If d i < 2k m−2 , then
(cid:22) (cid:23)
d −1
i
∈ {0,1} ,
( i )
k m−2
meaningthattheprocedureterminates,orcontinuesforonemorelaststep,thereforewecanassume
that the bound in Equation (7) holds in every step i. By induction, using the recurrence relation
in Equations (6) and (7),
n−(m−2) n−(m−2)
d ≥ = , (8)
i (cid:80)i−1 ( j ) ( i )
2i−(m−2)k j=m−2 m−2 2i−(m−2)k m−1
because (cid:80)i−1 (cid:0) j (cid:1) = (cid:0) i (cid:1) (the left-hand-side counts the number (m−1)-subsets S ⊆ [i],
j=m−2 m−2 m−1
by partitioning them according to the largest element). For the procedure to continue t steps we
require d ≥ 1. Together with Equation (8) we deduce the following bound:
t
n ≥
2t−(m−2)k( m−t 1)
+(m−2).
Notice that for every m,k ≥ 2 and t ≥ m−2,
2t−(m−2)k( m−t 1)
+(m−2) ≤
2t−(m−2)ktm−1
+(m−2) ≤
k2tm−1
.
Therefore, choosing n = k2tm−1 is sufficient. Recall that t = R(d,m − 1,k2), therefore the
following recursive relation is obtained.
R(d,m,k) ≤
k2R(d,m−1,k2)m−1
. (9)
From now on we will use the Knuth notation a ↑ b in place of ab to ease the calculations, and
recall that the Knuth’s operator is right-associative, i.e. a ↑ b ↑ c = a ↑ (b ↑ c). By applying
42Equation (9) repeatedly we obtain the following bound
R(d,m,k) ≤ k2 ↑ R(d,m−1,k2) ↑ (m−1)
≤ k2 ↑ (k2·2 ↑ (m−1)) ↑ R(d,m−2,k22 ) ↑ (m−2)
≤ k2 ↑ (k2·2 ↑ (m−1)) ↑ (k2·22 ↑ (m−2)) ↑ R(d,m−3,k23 ) ↑ (m−3)
≤ ...
≤ k2 ↑ (k2·2 ↑ (m−1)) ↑ (k2·22 ↑ (m−2)) ↑ ... ↑ (k2·2m−2 ↑ 2) ↑ R(d,1,k2m−1 ) ↑ 1
= k2 ↑ (k2·2 ↑ (m−1)) ↑ (k2·22 ↑ (m−2)) ↑ ... ↑ (k2·2m−2 ↑ 2) ↑ dk2m−1 ,
where R(d,1,k) = dk by the pigeonhole principle (Proposition 8). Denote
 dk2m−1 := R if i = 1;





R
i
= k2·2m−i·i·Ri−1 if 1 < i < m;




k2·Rm−1 if i = m.
Using this notation, R(d,m,k) ≤ R .
m
Claim 28. For 2 ≤ i ≤ m,
R ≤ twr (c ·2m−2Rlogk),
i (i) i
where11
(cid:88)i max{1,log (j−2)(2·2m−jjlogk)}
c = 4+ .
i 2m−2Rlogk
j=3
Proof of Claim 28. Proof by induction on i. For i = 2,
R = k4·2m−2·R = twr (c ·2m−2Rlogk).
2 (2) 2
For 2 < i < m,
R =
k2·2m−i·i·Ri−1
i
= twr (cid:2) 2·2m−iilogk·R (cid:3)
(2) i−1
≤ twr (cid:2) 2·2m−i·ilogk·twr (c ·2m−2Rlogk)(cid:3) (by induction.)
(2) (i−1) i−1
(cid:104) (cid:105)
= twr twr log (2·2m−iilogk)·twr (c ·2m−2Rlogk)
(2) (i−1) (i−2) (i−1) i−1
(cid:104) (cid:16) (cid:17) (cid:105)
≤ twr twr max{1,log (2·2m−iilogk)} ·twr (cid:0) c ·2m−2Rlogk(cid:1)
(2) (i−1) (i−2) (i−1) i−1
(cid:104) (cid:105)
≤ twr twr (max{1,log (2·2m−iilogk)})+c ·2m−2Rlogk) (⋆)
(2) (i−1) (i−2) i−1
= twr
(cid:2)
twr (c
·2m−2Rlogk)(cid:3)
(definition of c .)
(2) (i−1) i i
= twr (c ·2m−2Rlogk),
(i) i
11We use the convention (cid:80)n2 f(k)=0 if n <n , hence c =4.
k=n1 2 1 2
43where the inequality marked with (⋆) holds since
twr (x)·twr (y) ≤ twr (x·y)
(n) (n) (n)
for x,y ≥ 1,n ≥ 2.
The case i = m follows because R
m
= k2·Rm−1 ≤ k2m·Rm−1, and k2m·Rm−1 ≤ twr (m)(c
m
·
2m−2Rlogk), by using the above calculation for 2 < i < m one more time for i = m.
Corollary 29 (Upper Bound For Ramsey Number for Chains). For every integers m ≥ 2,d ≥
m,k ≥ 2,
R(d,m,k) ≤ twr
(5·2m−2dk2m−1
logk).
(m)
Proof. It suffices to bound
(cid:88)m max{1,log (j−2)(2·2m−jjlogk)}
c = 4+ .
m 2m−2Rlogk
j=3
Note that for every 3 ≤ j ≤ m,
log (2·2m−jjlogk) ≤ 2·2m−jlogk ≤ 2·2m−2logk.
(j−2)
Therefore,
(cid:88)m 2·2m−2logk 2(m−2)
c ≤ 4+ = 4+ ≤ 5.
m 2m−2Rlogk dk2m−1
j=3
B More About Types
Theorem B states that for every coloring of m-subsets of a complete binary tree, there exists a
deep subtree that is colored with at most τ(m) colors, where τ(m) is the number of possible types
of m-subsets. As we mentioned in Section 1.1.1, τ(m) is optimal in the sense that if we color
m-subsets according to their type, every subtree of depth at least m−1 must contain m-subsets of
all possible types, and therefore cannot see less then τ(m) colors. It is interesting to note that the
optimal number of colors τ(m) depends only on the size of the colored subsets m, rather than on d
or k, where d is the desired depth of the subtree and k is the number of colors used in the coloring.
We turn to calculate τ(m). Recall that a set of vertices A is closed if for all u,v ∈ A also
LCA(u,v) ∈ A, and the closure of A, denoted A¯, is the minimal closed set containing A. Two
sets A ,A are equivalent if there is an isomorphism φ : A¯ → A¯ that respects being left/ right
1 2 1 2
descendant relation, and also φ(A ) = A . The types of m-subsets are the induced equivalence
1 2
classes. (See Definitions 2 and 3.)
Proposition 30 (Number of Possible Types). The number of possible types for m-subsets τ(m)
corresponds to the generalized Catalan number denoted as C(2,m) in the On-line Encyclopedia of
Integer Sequences (OEIS) [37] (A064062), for all m ≥ 1. In particular, it holds that:
m (cid:88)−1 (cid:18) m+k−1(cid:19) 2k
τ(m) = (m−k) , for all m ≥ 1.
k m
k=0
44Proof. Let us first introduce the notion of branch-marked binary trees (as defined by Francisco,
Mermin, and Schweig [28]). Let T be any binary tree12 and v one of its vertices: we call v a
branching vertex if it has two children. If B is any set of branching vertices of T, we call the pair
(T,B) a branch-marked binary tree and unmarked all the vertices that are not in B. Now, Cai
and Yan [17] showed that the number of all possible branch-marked binary trees with m unmarked
vertices is exactly equal to C(2,m). As a consequence, it is sufficient to prove that there exists
a bijection between the possible types of m-subsets and such trees, to conclude the proof. In the
following, we will show such a bijection.
First, let A be an m-subset of a complete binary tree T of depth ≥ m and let A¯ be its closure.
Denote by T the binary tree that is isomorphic to A¯ as a subtree of T; i.e. there is a bijection φ
A
between A¯and the vertices of T that preserves the being left/right descendant relation. Note that
A
by the definition of type, A′ has the same type as A if and only if T = T and also A and A′ are
A A′
mapped to the same set of vertices in T / T .
A A′
Weclaimthatthepair(T ,φ(A¯\A))isabranch-markedbinarytreewithmunmarkedvertices.
A
In other words, each vertex v ∈ A¯\A corresponds to a branching vertex in T . Indeed, if φ(v)
A
were not a branching vertex then it would have either no children or only one child, and in both
cases A¯\{v} would be closed and containing A, which is a contradiction to the minimality of A¯.
Denote by Φ the map that sends the type of a subset A to the branched-marked binary tree
(T ,φ(A¯\A)). By the properties discussed above, Φ is well-defined and injective. It remains to
A
show that Φ is surjective. Given a branch-marked tree (S,B) with m-unmarked vertices, embed S
in a complete binary tree. We claim that the type of the m-subset containing all of the unmarked
vertices is mapped by Φ to (S,B). Denote by A the m-subset of the unmarked vertices. It suffices
to show that A¯= A∪B. It is clear that A¯⊆ A∪B since S is a tree (and therefore A∪B is closed).
On the other hand, if there exists v ∈ B\A¯, pick the deepest such v. Since v is a branching vertex
it is also the LCA of its two children, which are vertices in A¯ by the choice of v, and therefore must
be itself in A¯, a contradiction.
Corollary 31. The number of possible types for m-subsets τ(m) satisfies τ(m) ≤
√23m−2
, for all
π(m−1)
m ≥ 1.
Proof. We claim that the following chain of inequalities holds:
m (cid:88)−1 (cid:18) m+k−1(cid:19) 2k
τ(m) = (m−k)
k m
k=0
(cid:18) 2m−1(cid:19) (cid:18) 2m−2(cid:19) (2m−1)2m−1
≤ 2m−1 =
m−1 m−1 m
= C 2m−1(2m−1)
m−1
4m−1·2m−1·(2m−1) 23m−3(2m−1)
≤ =
(cid:112) (cid:112)
m π(m−1) m π(m−1)
23m−2
≤ ,
(cid:112)
π(m−1)
12The definition we consider for a binary tree is a directed tree of which every vertex has at most one left child
and at most one right child.
45where C is the (m−1)-th Catalan number. The first inequality holds by Proposition 30, if we
m−1
upper bound every 2k with 2m−1 and use the binomial equality:
n (cid:18) (cid:19) (cid:18) (cid:19)
(cid:88) m+k−1 m+n
= ,
k n
k=0
with n = m−1. The second-to-last inequality instead, where the right-hand quantity corresponds
also to the asymptotical limits of Catalan numbers, was proven by Dutton and Brigham [21] for
m ≥ 1.
C Ramsey for Infinite Trees
In this section, we discuss the case of coloring m-subsets of an infinite complete binary tree. By
compactness,TheoremBimpliesthatforeverysuchcoloring,thereexistsaτ(m)-chromaticsubtree
of arbitrarily large finite depth. However, we claim that this is not true that there exists an infinite
τ(m)-chromatic subtree.
For simplicity, we start by describing a coloring of pairs in an infinite tree that does not admit
an infinite trichromatic subtree. Given two incomparable vertices u,v, we say that u is the left
vertex and v is the right vertex if u is a left descendant of LCA(u,v), and v is a right descendant
of LCA(u,v). Consider the following pairs-coloring of an infinite complete binary tree T:
• if {u,v} is a left-pair then χ({u,v}) = red;
• if {u,v} is a right-pair then χ({u,v}) = blue;
• if {u,v} are incomparable, and the depth of the left vertex is at least the depth of the right
vertex, then χ({u,v}) = green;
• if {u,v} are incomparable, and the depth of the left vertex is smaller than the depth of the
right vertex, then χ({u,v}) = yellow.
Indeed, every infinite subtree admits all four colors. Suppose by contradiction that there exists
an infinite trichromatic subtree T′, and without loss of generality assume that it is colored by
{red,blue,green}. Take a vertex u in the left subtree of T′ and denote by d its depth in the original
tree T. Since T′ is infinite, there is a vertex v in the right subtree of T′ with a depth in T′ that is
larger than d, hence its depth in T is also larger than d. By the definition of the coloring, we must
have χ({u,v}) = yellow which is a contradiction.
This example can be generalized for m ≥ 2: color all m-chains according to their type, and
color all m-anti-chains (i.e. m-subsets such that every two vertices are incomparable) according to
the permutation of their depths when ordering the vertices from left to right.
Corollary 32. The minimum number τ (m) needed to guarantee the existence of an infinite
∞
τ (m) - chromatic subtree for any given coloring of m-subsets, satisfies τ (m) ≥ m! + 2m−1.
∞ ∞
In particular, τ = ω(τ(m)).
∞
46D Additional Proofs
D.1 Proof of the Pigeonhole Principle for Trees
We prove here a more general version of Item (i) of Proposition 8.
Proposition 33 (Pigeonhole Principle on Trees). Let T be a complete binary tree of depth n, and
let k ∈ N. Then for every vertex coloring of T with k colors c ,...,c , and every a ,...,a ∈ N
1 k 1 k
such that a +...+a = n, there exists a c -monochromatic subtree of depth a for some i ∈ [k].
1 k i i
Indeed, Item (i) follows from Proposition 33 by setting each a to be at least d, which is the
i
desired depth for the monochromatic subtree in the statement of Proposition 8.
Proof. We first prove the statement for k = 2. We use induction on the depth d of the tree.
The base case d = 0 is trivial. Consider an arbitrary coloring of a tree T of depth d with two
colors, c ,c . Assume without loss of generality that the color of the root v is c . Let T ,T
1 2 root 1 0 1
be the left and right subtrees of v , respectively. If there exists a c -monochromatic subtree of
root 2
depth a of either T or T , then we are done. If not, since (a −1)+a = d−1, by induction
2 0 1 1 2
there exist c -monochromatic subtrees T′ and T′ of T and T of depth a −1. v together with
1 0 1 0 1 1 root
T′ and T′ yield a c -monochromatic subtree of T of depth a .
0 1 1 1
For k > 2, induct on the number of colors k. Consider a coloring of T with k colors c ,...,c ,
1 k
and let a +...+a = n. Define a new coloring using k−1 colors by considering c and c as
1 k k−1 k
the same new color c′. By induction, either there exists a c -subtree of depth a for 1 ≤ i ≤ k−2,
i i
or there exists a c′-subtree of depth a +a . If the latter holds, then by the base case, when
k−1 k
considering again c and c as distinct colors, we are done.
k−1 k
D.2 Proof of Lemma 18
Lemma (RestatementofLemma18). Let T be a complete binary tree of depth n. Then the number
of its level-aligned subtrees of depth d is upper bounded by (cid:0) n (cid:1) ·2n2d.
d+1
Proof. By hypothesis, the subtrees are level-aligned i.e. the vertices at the same distance from the
root lie at the same level in the original tree. For a fixed subtree S, we consider its levels to be
labeled by numbers between 0, corresponding to the root of S, and d corresponding to its leaves.
Let l (for i = 0,...,d) be the level in T corresponding to level i in S and let a = l −l (for
i i i i−1
i = 1,...,d).
Forafixedsequence{l }d ,wefirstupperboundthenumberofpossiblesubtreesS thatrespect
i i=0
this choice of levels. Observe the following: for any vertex v at a level i the number of possible
choices for children at level i+1 is exactly 22(ai+1−1). Indeed, the number of left descendants of v at
level l
i+1
is 2ai+1/2, and the same goes for the right descendants, which implies that the number of
possible couples is 22(ai+1−1). The number of possible choices for a root instead is 2l0. The number
of possible subtrees respecting the choice of levels is then:
47d
2l0 ·(cid:89) 22(ai−1)2i−1 =
i=1
2l0+(cid:80)d i=12i(ai−1)
≤
2l0+2d(cid:80)d i=1(ai−1) ≤
2l0+2d(n−d−l0)
≤
2n2d
where we employed the fact that l
+(cid:80)d
a ≤ n. Given that the number of possible choices
0 i=1 i
of levels is (cid:0) n (cid:1) , we obtain the desired result.
d+1
48