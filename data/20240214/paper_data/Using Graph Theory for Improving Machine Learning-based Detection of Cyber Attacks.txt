Using Graph Theory for Improving Machine
Learning-based Detection of Cyber Attacks
Giacomo Zonneveld, Lorenzo Principi, Marco Baldi
Department of Information Engineering
Universita` Politecnica delle Marche
Ancona, Italy
Abstract—Early detection of network intrusions and cyber Themainlimitationsinusingthesefeaturesarethat:i)they
threats is one of the main pillars of cybersecurity. One of the have loose correlation with the actual presence of a malware,
most effective approaches for this purpose is to analyze network
ii)eachterminalisconsideredindividually,ratherthanlooking
traffic with the help of artificial intelligence algorithms, with
at the network as a whole, iii) attackers could camouflage
the aim of detecting the possible presence of an attacker by
distinguishingitfromalegitimateuser.Thisiscommonlydoneby their behavior by using evasive techniques such as packet
collecting the traffic exchanged between terminals in a network manipulation to hinder detection and iv) the use of secure
and analyzing it on a per-packet or per-connection basis. In this protocols exploiting encrypted payloads limits the ability to
paper, we propose instead to perform pre-processing of network
analyse packets.
trafficunderanalysiswiththeaimofextractingsomenewmetrics
Inthiswork,weproposeanalternativeapproachrelyingon on which we can perform more efficient detection and overcome
some limitations of classical approaches. These new metrics are aggregated network features derived from graph theory rather
based on graph theory, and consider the network as a whole, thanusingtheaforementionedspecificnetworkfeatures.More
rather than focusing on individual packets or connections. Our indetail,weproposetoperformdetectionbasedonagraphical
approachisvalidatedthroughexperimentsperformedonpublicly
representation of the network, which only uses information
available data sets, from which it results that it can not only
concerning the identity of connected terminals (e.g. their IP
overcome some of the limitations of classical approaches, but
also achieve a better detection capability of cyber threats. address) and the times each connection occurs.
IndexTerms—Cybersecurity,graphtheory,intrusiondetection, We validate our approach through numerical simulations
machine learning, network traffic. considering the openly available CIC-IDS2017 data set [5],
and we show that the graph-based detection approach we
I. INTRODUCTION propose is able to outperform classical approaches relying on
network protocol features.
We study network intrusion detection techniques based on
Several works exist in the literature on the use of ML
the analysis of network traffic through machine learning tech-
techniques for network intrusion detection, in most cases
niques, which represent one of the most promising techniques
exploiting classical network protocol features.
todayforpromptlydetectingcyberthreatsandthusincreasing
In [1] classification results obtained by selecting features
cybersecurity. According to classical approaches, intrusion
throughanauto-encoderandPCAarecomparativelyassessed.
detection based on the analysis of network traffic focuses on
In[3]acombinationofcorrelationanalysiswithanexhaustive
network protocol characteristics like:
search is exploited to find the best subset of features. Both
• networklayerprotocolparameters(IPaddresses,etc.)[1],
[1] and [3] use a Random Forest classifier, with the approach
[2],
in [1] achieving better results than that in [3]. In [2] feature
• transportlayerprotocolparameters(TCP/UDPport,TCP
selection based on the chi-square test is proposed and an
session [3], etc.) [1], [2],
ensemble classifier is adopted, showing that applying such an
• traffic-related features (number of packet transmissions,
ensemble classifier to selected features through the chi-square
etc.) [1]–[3],
test provides good classification performance.
• content-related features (payload length, TCP flags, etc.)
Compared with these previous works, which use traditional
[1]–[3],
protocol features, our approach is novel in that it uses other
• time-related features (connection duration, etc.) [1]–[3],
features, derived through the use of graph theory concepts.
• DNS-based features, since malicious P2P networks use
Graphsarenotnewinthiscontextandinfacttheyhavealready
DNS to establish connections [4].
beenusedtorepresentinteractionsbetweennetworkendpoints.
Machine learning (ML) techniques are then used to learn For example, in [6] graph-based metrics (also considered in
different behaviours by analyzing these network features in this work) are used to decide where security tools such as
order to be able to detect the presence of anomalies. firewalls and IDS should be installed in a complex network.
In [7], such metrics are used to identify most vulnerable
This work was supported in part by the GiBIDS (Graph-Based Intrusion
Detection System) research project, funded by GE´ANT under the GE´ANT systems within a network, in particular by considering edges
InnovationProgramme. generation. In [8], structural changes in graphs are used to
4202
beF
21
]RC.sc[
1v87870.2042:viXradetermine whether an attack has occurred or not. This is
done on a daily basis, by applying clustering techniques and
analyzing the overall shape of daily graphs. In [9] and [10], it
is proposed to use ML algorithms to classify different types
ofmalwarebygeneratinggraph-basedfeaturesextractedfrom
a graph representing system calls made by such malware.
Differentlyfromthesepreviousworks,weusegraphtheory
concepts to extract a set of new features from network traffic
data sets, and we use such new features for supervised ML-
based detection of single malicious network connections.
Thepaperisorganizedasfollows:inSectionIIweintroduce
some background notions and the notation we use, in Section
III we describe how the graph-based features we consider
are extracted from network traffic data sets, in Section IV
we introduce and tune ML-based classifiers for analyzing the
data set we consider, in Section V we validate our approach
through numerical simulations and in Section VI we draw
some conclusive remarks.
Fig.1. Exampleofgraphrepresentingnetworktraffic
II. BACKGROUND,TOOLSANDDATASETS
TABLEI
A graph G=(V,E) is a pair of a finite set of nodes V = GRAPH-BASEDMETRICS
(cid:12)
{v 1,...,v n} and a finite set of edges E = {(v i,v j) (cid:12) 1 ≤
i,j ≤ n}, which represent a link between two nodes. If the Metricname Domain Weighteffect
graph is oriented, then each edge can be traversed in only Degreecentrality N+ Connectionstrength
one-way, going from v to v , and is defined by an ordered In-Degreecentrality N Connectionstrength
i j Out-Degreecentrality N Connectionstrength
pair of vertices (v ,v ), meaning that (v ,v ) will represent
i j j i Closenesscentrality [0,1]∪{-10}2 Traversalcost
anotheredge.Otherwise,eachedgeisdefinedbyanunordered Betweennesscentrality [0,1]∪{-10}2 Traversalcost
pair of vertices. Furthermore, to each edge we can associate a Eigenvectorcentrality [0,1]∪{-10}2 Traversalcost
weight,i.e.,anumericalvalueusedanddifferentlyinterpreted Clusteringcoefficientd=1 [0,1] Noweights
Clusteringcoefficientd=2 [0,1] Noweights
by the metric algorithms defined later. We denote by e =
{(v ,v ),w}agenericedgelinkingv ,v ∈V wherew isthe
i j i j
associated weight, since that we use oriented graphs1.
• The Eigenvector centrality evaluates the extent to which
In our work, each network terminal provided with an IP
the given node is directly connected to nodes that are
address is considered as a node in a graph, while edges are
themselves stronglyconnected to therest of thenetwork.
the occurred connections between any two terminals, oriented
• The Clustering coefficient (CC) measures for the given
from source to destination. This way, we obtain graphs of the
node how much nearby nodes are directly connected to
type reported in Fig. 1.
each other. For its evaluation we consider the formu-
lation defined in [12] and implemented in [13]. Such
A. Graph-based metrics
formulation allows evaluating the measure taking nodes
Given a populated graph G=(V,E), for each node v ∈V at a chosen distance from the given node instead of only
we can calculate some classical graph theory metrics [11], directly connected nodes. The considered distances are
namely: d=1 (default) and d=2.
• The Degree centrality (DC) and its variants expresses The aforementioned metrics are summarized in Table I, along
how much the node is directly connected with all the with their variability domains and weight interpretation.
other nodes. If the graph is oriented, this metric can be
B. ML-based classification
evaluated for outgoing edges with Out-Degree centrality,
and for incoming edges with In-Degree centrality. We use the metrics introduced above to feed ML classifica-
• The Closeness centrality considers how much the node tionalgorithmsbasedontheso-calledSupportVectorMachine
is near all the other nodes. (SVM),introducedin[14].Suchanalgorithm,bymappingthe
• The Betweenness centrality (BC) considers how many input data into a higher dimensional feature space through
timesthenodeisacrossingpointinalltheshortestpaths the application of a chosen non-linear function, can solve
evaluated for each couple of nodes. classification problems by defining a linear decision surface
capable of separating data instances belonging to different
1Althoughsomemetricsrequireanon-orientedgraph,sinceswitchingfrom
anoriented toa non-orientedgraph isstraightforward (andnot thereverse), 2Infinitevalueshavebeentransformedinto−10,whichisanout-of-range
eachedgewillbeconsideredoriented. value,butotherchoicesarepossible.classes.Thisisdonebyselectingcertaindatainstances,called • ω = ωu (unweighted case): add a new edge e =
supportvectors,thatareclosetothedecisionsurface.Thenon- {(v ,v ),1} to E if not already present, do nothing
a b
linear function we consider in this work is the well-known otherwise.
Radial Basis Function, defined as • ω = ωw (weighted case): add a new edge e =
{(v ,v ),1}toE ifnotalreadypresent,otherwiseupdate
RBF(x,y)=e−γ||x−y||2 , (1) a b
the existing edge incrementing its weight w by one.
where γ is a coefficient that controls the impact of each We remark that the graph is oriented, which means that
traininginstanceonthedefinitionofthedecisionsurface.The (v ,v ) and (v ,v ) represent two different edges having two
a b b a
higheritsvalue,thelessregularthesurfacewillbe.Apenalty different weights.
parameter C is used to adjust for misclassification of training Sincethegraphispopulatediteratively,givenalistofedges
samples due to a non-perfectly definable separation surface. e=[e ,e ,e ,...], we have that
0 1 2
Large values of C force the classifier to separate training
G =Λ(G ,e ) (2)
instances correctly, but reduce generality, leading to possible i i-1 i
overfitting problems when classifying test instances. is the intermediate graph resulting after insertion of the i-th
entryofe,startingfromG (theemptygraph).Finally,givena
III. GRAPH-BASEDDATASETGENERATION -1
populatedgraphGandanodev ∈V,wedefineanextraction
i
In this section we explain how graph-based features can
function as
be extracted from network traffic data sets. In particular, we
Φ(G,v )={f ,f ,...,f } (3)
consider labeled data sets containing lists of connections.
i i0 i1 i7
By connection we mean an information record representing where f ik are the graph metrics we consider, listed in Table
the summary of a communication happened between two I, computed with respect to v i.
network terminals using some network protocol3. Each con-
B. Feature extraction
nection is also labelled as benign or malicious, in the latter
As mentioned, we start from a data set containing a
case also including the attack name, when available. More in
chronologically ordered list of network connections. Since
detail, the generic i-th connection c is defined by:
i
each connection is a link between two terminals identified by
• z is and z id, the source and the destination IP addresses, the source and destination IP addresses, each c can define an
i
respectively.
edge which links the vertices zs and zd. This means that we
• t i, a timestamp corresponding to transmission of the first can see the data set D as an ari ray of i edges and we can use
packet.
it to iteratively populate a graph according to (2), which we
• m i, a parameter indicating if the connection is benign or can rewrite as:
malicious.
• a i = {a i0,...,a ina-1}, a set of na metrics calculated by Λ(cid:0) G i-1,(cid:0) z is,z id(cid:1)(cid:1) =G i =(V i,E i),
the network tool considering all the packets belonging to
where zs,zd ∈c ∈D. Hence, V and E are populated until
the i-th connection (as stated above, we refer to these as i i i i i
the i-th connection.
the classic features).
In order to follow the evolution of the graph with good
We can hence define a data set
granularity,letusdividethedatasetintoblocksandintroduce
D =[c ,...,c ] a parameter (σ ≤ N) that defines the size of each block of
0 N−1
connections that is progressively used to populate the graph.
as an array of chronologically ordered connections, with This way, the i-th connection is associated to the metrics
c ={zs,zd,t ,m ,a }. computed on a block-wise populated graph G ϕ, where
i i i i i i
(cid:40)
A. Graph population σ·⌈i/σ⌉−1 if ⌈i/σ⌉<⌈N/σ⌉,
ϕ=
Given a graph G = (V,E) in which we want to insert a N −1 otherwise.
new edge e=(v a,v b), we define the updating function For example, for N = 129 and σ = 50, the connection
Λ(G,e)=G+ =(V+,E+), corresponding to i = 63 will be associated to the metric
computed on G , while the connection corresponding to
99
where i=114 will be associated to the metrics computed on G .
128
V+ =V ∪{v }∪{v } We can consequently update (3) into
a b
E+ =ε(E,(v a,v b),ω) Φσ(z i)=Φ(G ϕ,z i), (4)
andεisafunctionthatdependsontheparameterω andworks and, for each c i ∈ D, we can compute the associated graph-
as follows: based features sets as:
3Whichnetworkpacketsareincludedinaconnectionisobviousforthose f is =Φσ(z is), (5)
protocols where the beginning and end of the communication are explicit fd =Φσ(zd). (6)
(suchasTCP),otherwisetimeboundariesareused. i iAfter computing the set of graph-based features for each • We take all the malicious connections of the second day
connection c , we can generate the new data set D∗ as (13835). Such connections belong to FTP-Patator and
i
SSH-Patator.
D∗ =[c∗,c∗,...,c∗ ], (7)
0 1 N−1 • Weperformanundersamplingstepofthebenignclassby
randomly choosing as many benign samples as the total
where
number of malicious ones chosen in the previous step,
c∗ ={zs,zd,m ,fs,fd} (8)
i i i i i i and discard the rest.
Itisimportanttonotethat,inthenewdatasetD∗,theclassical Table II shows the class distribution of the CIC-IDS2017
featuresa arenotincluded,aswenolongerconsiderthemin data set and the sizes of the training and test data sets we
i
the classification phase. From now on we will refer to graph created for each class. It turns out that the training set is
metrics sets f as graph features. 0,98%oftheentiredataset,whilethetestsetis65,53%.Itis
i
Followingtheproceduredescribedabove,andstartingfrom important to note that the test set was solely used to evaluate
a data set containing a list of connections, we can generate the performance of the model, whereas all the training steps,
different new data sets, according to the following criteria: i.e., steps 2) to 5) described next, are performed only on the
training set.
• The parameter ω can be changed to generate weighted
or unweighted graphs. Moreover, we can also consider
TABLEII
a mixed case (which we denote as ωm), in which the
CIC-IDS2017DATASETANDTRAININGANDTESTINGDATASETS
weightisconsideredonlyfortheDegreecentralityrelated COMPOSITION
features.
• The σ parameter has the effect to populate the data set Total Training Test
Benign
followingtheevolutionoftheconnectionsestablishedby
Total 2273097 13835 1311105
each IP address. For example, if σ = N, we perform % 0,61% 57,68%
graph-based feature extraction only once after collecting Malicious
all network traffic, such that all connections c∗ involving Bot 1966 0 1966
DDoS 128027 0 128027
the same network node have the same graph feature
DoSGoldenEye 10293 0 10293
set. If σ < N, we instead perform ⌈N/σ⌉ extractions DoSHulk 231073 0 231073
basedon⌈N/σ⌉differentgraphs,whichareprogressively DoSSlowhttptest 5499 0 5499
DoSslowloris 5796 0 5796
populated from connections, following the evolution of
FTP-Patator 7938 7938 0
each network terminal behaviour. This allows the model Heartbleed 11 0 11
to learn on progressive steps of the network behaviour Infiltration 36 0 36
PortScan 158930 0 158930
and not only on the final snapshot.
SSH-Patator 5897 5897 0
WebAttack-BruteForce 1507 0 1507
IV. MACHINELEARNING-BASEDDETECTION WebAttack-SqlInjection 21 0 21
WebAttack-XSS 652 0 652
We consider a binary classification problem using only Total 557646 13835 543811
graph-based features generated according to our approach, % 2,48% 97,52%
with a Support Vector Machine algorithm in the non-linear
Total 2830743 27670 1854916
version (SVM-RBF). By leveraging the Radial Basis Function %overwhole 0,98% 65,53%
as the kernel trick, we achieve a transformed space in which
the data are linearly separable. Afterhavinggeneratedthegraph-baseddatasetasdescribed
For our experiments we consider the CIC-IDS2017 data set above, the following subsequent steps need to be performed
[5].Itcontainsnetworktraffic,collectedin5consecutivedays, in order to use it for the purposes of our work. From now on
characterised by 80 traffic-related features extracted with the with model we mean the SVM-based ML classifier, and with
CICFlowMetersoftware[15].Eachconnectionincludedinthe model configuration we denote the training parameter set and
data set has a label m representing the normal behaviour or the feature selection process.
the attack category. 1) Features Scaling: the technique used involves standard-
Starting from the network traffic data set described above, isation based on the means and standard deviations
the first step that must be performed is the generation of the computedfromthetrainingset,andthenappliedtoboth
graph-based data set D∗, as described in the previous section. the training and the test sets. This procedure has only
After this, the generated data set must be split into training beenperformedonfeatureswithanunrestricteddomain,
and testing sets. Considering that the traffic observed during namely Degree centrality and its variants (Table I).
the first day only includes normal behaviour, we use the first 2) Feature Selection: we consider Forward Feature Selec-
two days of traffic for the training set definition, while the tion (FFS) with a SVM-RBF estimator to find a space
test set consists of the traffic observed during the last three in which data is successfully separable. A maximum
days. Specifically, for the training set definition, we adopt the of eight features has been chosen as an upper bound.
following approach on the first two days of traffic: Selections are not pursued if F1 score saturation isTABLEIII
FEATURESELECTION,HYPERPARAMETERSTUNING,MODELROBUSTNESSANDMODELPERFORMANCERESULTS
ωu ωw ωm
σ1 σ5 σN σ1 σ5 σN σ1 σ5 σN
Featureselection
F1 0.9999 0.9999 1 1 1 1 0.9999 0.9999 1
#features 2 2 2 4 3 2 2 2 2
Mostsignificantfeature CC CC CC CC CC DC CC CC DC
HyperparametersTuning
F1scorebeforetuning 0.9999 0.9999 1 1 1 1 0.9999 0.9999 1
F1scoreaftertuning 0.9999 0.9999 1 1 1 1 0.9999 0.9996 1
Percentageincrement 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% -0.3% 0.00%
Chosenγ 1 1 1 1 1 0,1 1 1 0,1
ChosenC 102 102 10 1 1 1 102 102 1
Modelrobustness
F1avg 0.9999 0.9999 1 0.9999 0.9999 1 0.9999 0.9999 1
F1dev.std 0.0001 0.0001 0 0.0001 0.0001 0 0.0001 0.0001 0
Supportvectors 9 9 27 93 94 282 9 9 282
Modelperformanceontestdataset
F1weightedavg 0.9988 0.9988 0.9987 0.6016 0.60 0.9988 0.9988 0.9988 0.9988
Negatives/Benign
Errors(FalsePositives) 283 272 439 1635 1642 133 283 272 133
F1 0.9991 0.9991 0.9991 0.8311 0.8306 0.9992 0.9991 0.9991 0.9992
FPR 0.0002 0.0002 0.0003 0.0012 0.0012 0.0001 0.0002 0.0002 0.0001
Positives/Attacks
Errors(FalseNegatives) 2016 2016 2016 530382 532505 2016 2016 2016 2016
F1 0.9979 0.9979 0.9977 0.0480 0.0406 0.9980 0.9979 0.9979 0.9980
FNR 0.0037 0.0037 0.0037 0.9753 0.9792 0.0037 0.0037 0.0037 0.0037
reached. The results were validated through a 5-fold thesourcecodeusedtoperformthesimulationshasbeenmade
cross-validation. publicly available4. Based on the results of our experiments,
3) Hyperparameters tuning: the SVM-RBF requires tuning which are reported in Table III, the following considerations
of the hyperparameters γ and C, which must be chosen are in order.
accurately. We optimized them through a 5-fold cross- 1) Feature Selection: We observe that, except for the
validated grid search with weightedcasewith{σ1,σ5},alwaystwofeaturesareselected.
• C ={0.1, 1, 5, 10, 102, 103, 104, 105} Such features allow to obtain an almost perfect separation
• γ ={0.01, 0.1, 0.5, 1} of training data instances (F1 ≥ 0.9999). In all cases, the
ClusteringCoefficient(CC)isthemostsignificantfeature,i.e.,
4) Model robustness: once the best model configuration
the most capable measure to separate training data, except for
has been found, 10-fold cross-validation has been used
the weighted and mixed cases with σ =N, for which such a
for calculating, for each fold, the performance metrics
role is played by the Degree Centrality (DC).
of the fold-trained model. In particular, we look at the
2) Hyperparameters tuning: Having achieved an almost
F1 score standard deviation, which provides an insight
perfect separation of the training data instances, tuning the
into the consistency of the model’s performance and its
model hyperparameters doesn’t produce any significant im-
ability to generalise to unseen data. A lower standard
provement in the F1 score. Nevertheless, such a step is
deviation indicates a more stable and reliable model,
important for minimising the complexity of the hyperplane.
which corresponds to our case as shown in Table III.
We observe that for the hyperparameter γ the largest possible
5) Model training: we perform training on the whole train-
value is chosen, except for the weighted and mixed cases
ingset.Theresultingmodelisthenusedforperforming
with σ = N. For the hyperparameter C, small values are
testsonthetestdataset.Theclassificationperformance,
always chosen (C ≤102). Such results show that the training
so obtained, is reported in Table III.
instances are already well separated and do not require a
The above process has been repeated for each combination
complex hyperplane definition. In particular in the weighted
of the following two parameter sets:
and mixed cases cases with σ = N, the minimum value is
• ω parameter set: {ωw,ωw,ωm}. chosen for both hyperparameters.
• σ parameter set: {σ1,σ5,σN}. 3) Modelrobustness: WeobservethattheaverageF1score
isneversmallerthan0.9999andthatthestandarddeviationis
V. RESULTSANDDISCUSSION
nevergreaterthan0.0001,regardlessofthevaluesofσ andω,
The approach and techniques described in the previous
demonstratinggoodrobustnessofthemodelperformance.For
sectionshavebeenvalidatedthroughnumericalsimulations.In
order to ensure maximum reproducibility of our experiments, 4https://github.com/secomms/GiBIDSTABLEIV them, we are able to overcome some known limitations of
COMPARISONWITHTHESTATEOFTHEART previous approaches, like difficulty of analyzing encrypted
packets and of detecting malicious behaviours when attackers
IDSModel %train-test #ftrs F1 FPR
use elusive techniques. We validated our approach through
Sharafaldinetal.[5] N.A. 49 0.98 N.A.
experiments considering the CIC-IDS2017 data set, showing
Abdulhammedetal.[1] 70-30 10 0.997 0.1%
Rodriguezetal.[3] 50-50 6 0.990 N.A. that it is indeed capable of achieving better results than pre-
Thockchometal.[2] 80-20 13 0.9963 0.43% vious approaches, which analyse each connection as a stand-
Ourapproach{σ5,ωu} 0.98-65.53 2 0.9988 0.02%
Ourapproach{σN,ωm} 0.98-65.53 2 0.9988 0.01% alone entity whereby the evolution of the involved terminals’
behaviourwiththerestofthenetworkisnotconsidered.These
resultsarepromisingandsuggestfurtherresearch,forexample
what concerns model complexity, we note that the number of by executing a larger campaign of experiments on diverse
support vectors chosen by the SVM-RBF is never greater than scenarios.
1% of the training set, ensuring a low model complexity.
REFERENCES
A. Model performance on test data set [1] R. Abdulhammed, H. Musafer, A. Alessa, M. Faezipour, and
A. Abuzneid, “Features dimensionality reduction approaches for ma-
Performance achieved on test data is reported at the bottom
chine learning based network intrusion detection,” Electronics, vol. 8,
of Table III, for all the considered combinations of σ and p.322,032019.
ω. We observe that ωu and ωm achieve the same results [2] N.Thockchom,M.Singh,andU.Nandi,“Anovelensemblelearning-
based model for network intrusion detection,” Complex & Intelligent
for σ < N, while ωw and ωm achieve the same results
Systems,042023.
for σ = N. This can be explained by the fact that for σ1 [3] M.Rodr´ıguez,A.Alesanco,L.Mehavilla,andJ.Garc´ıa,“Evaluationof
and σ5 the selected features (CC and BC) do not depend on machinelearningtechniquesfortrafficflow-basedintrusiondetection,”
Sensors,vol.22,p.9326,112022.
the weights, while for σN they (DC) do. For the case with
[4] D. Zhao and I. Traore, “P2p botnet detection through malicious fast
σ = N, we observe that classifiers working on the weighted flux network identification,” in 2012 Seventh International Conference
graph (ωw) are unable to distinguish normal from malicious onP2P,Parallel,Grid,CloudandInternetComputing,2012,pp.170–
175.
behaviour. This suggests that it must hold that ω ̸= ωw,
[5] I.Sharafaldin,A.HabibiLashkari,andA.Ghorbani,“Towardgenerating
because although the classifier is able to separate training set anewintrusiondetectiondatasetandintrusiontrafficcharacterization,”
instances, it fails with instances from the test set, resulting in Proceedings of the 4th International Conference on Information
SystemsSecurityandPrivacy-ICISSP,012018,pp.108–116.
in overfitting. For this reason, we discard the weighted case.
[6] R. Puzis, M. Tubi, Y. Elovici, C. Glezer, and S. Dolev, “A decision
Sincethemisclassifiedattacksarealwaysthesameforbothωu support system for placement of intrusion detection and prevention
and ωm (all Bot, Heartbleed and Infiltration attacks and three devices in large-scale networks,” ACM Trans. Model. Comput. Simul.,
vol.22,no.1,dec2011.
DDoS attacks), also the False Negative Rate (FNR) is always
[7] A.A.Rasheed,“Vulnerabilitydetectiontowardsprotectingintrusionby
the same. Therefore, we must base the decision of the best socialnetworkanalysisapproach,”in20215thInternationalConference
modelforσ <N andσ =N ontheFalsePositiveRate(FPR). on Trends in Electronics and Informatics (ICOEI). IEEE, 2021, pp.
1219–1224.
This leads to the selection of {σ5,ωu} (FPR =0.02%) and
[8] P.-Y.Chen,S.Choudhury,andA.O.Hero,“Multi-centralitygraphspec-
{σN,ωm} (FPR=0.01%) as the best configurations. These tral decompositions and their application to cyber intrusion detection,”
models not only achieve excellent detection performance for in2016IEEEInternationalConferenceonAcoustics,SpeechandSignal
Processing(ICASSP),2016,pp.4553–4557.
99.63% of the attacks tested, failing only for the attacks
[9] J.-w. Jang, J. Woo, J. Yun, and H. K. Kim, “Mal-netminer: Malware
mentioned above, but also manage to maintain a very low classification based on social network analysis of call graph,” in Pro-
FPR. ceedingsofthe23rdInternationalConferenceonWorldWideWeb,ser.
WWW’14Companion. AssociationforComputingMachinery,2014,
p.731–734.
B. Comparison with previous approaches
[10] V. Mohanasruthi, A. Chakraborty, B. Thanudas, S. Sreelal, and B. S.
By comparing our approach with the state of the art, Manoj, “An efficient malware detection technique using complex
network-based approach,” in 2020 National Conference on Communi-
as done in Table IV, it can be seen that with a smaller
cations(NCC),2020,pp.1–6.
number of features required, better results are achieved in [11] Z.Wan,Y.Mahajan,B.W.Kang,T.J.Moore,andJ.-H.Cho,“Asurvey
every evaluation metric considered. It should also be noted oncentralitymetricsandtheirnetworkresilienceanalysis,”IEEEAccess,
vol.9,pp.104773–104819,2021.
that the size of the training set is significantly smaller than
[12] A. H. Abdo and A. P. S. de Moura, “Clustering as a measure of the
thatofotherapproaches,highlightingboththemodelabilityto localtopologyofnetworks,”2006.
achievebetterdetectionperformancedespiteasmallernumber [13] T.P.Peixoto,“Thegraph-toolpythonlibrary,”figshare,2014.
[14] C.CortesandV.Vapnik,“Support-vectornetworks,”Machinelearning,
of training samples and the reliability of the results obtained
vol.20,pp.273–297,1995.
by testing the model on a larger test data set. [15] A.HabibiLashkari,G.DraperGil,M.Mamun,andA.Ghorbani,“Char-
acterizationofencryptedandvpntrafficusingtime-relatedfeatures,”in
VI. CONCLUSION Proceedingsofthe2ndInternationalConferenceonInformationSystems
SecurityandPrivacy-ICISSP,2016.
We proposed the use of metrics derived from graph theory
to detect cyber threats from network traffic. By using a
graphtomodelinteractionsbetweennetworknodes,insteadof
analysing the content of the information exchanged between