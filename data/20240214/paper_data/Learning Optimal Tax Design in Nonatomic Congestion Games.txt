Learning Optimal Tax Design in Nonatomic Congestion Games
Qiwen Cui∗ Maryam Fazel† Simon S. Du‡
February 13, 2024
Abstract
We study how to learn the optimal tax design to maximize the efficiency in nonatomic congestion
games. It is known that self-interested behavior among the players can damage the system’s efficiency.
Tax mechanisms is a common method to alleviate this issue and induce socially optimal behavior. In
this work, we take the initial step for learning the optimal tax that can minimize the social cost with
equilibrium feedback, i.e., thetax designercan only observetheequilibrium stateundertheenforced tax.
Existing algorithms are not applicable due to the exponentially large tax function space, nonexistence
of the gradient, and nonconvexity of the objective. To tackle these challenges, our algorithm leverages
several novel components: (1) piece-wise linear tax to approximate the optimal tax; (2) an extra linear
termtoguaranteeastronglyconvexpotentialfunction;(3)efficientsubroutinetofindthe“boundary”tax.
The algorithm can find an ǫ-optimal tax with O(βF2/ǫ) sample complexity, where β is the smoothness
of thecost function and F is thenumberof facilities.
1 Introduction
In modern society, large-scale systems often consist of many self-interested players with shared resources,
such as transportation and communication networks. Importantly, the objectives of individual players are
notalignedwiththe systemefficiency,andthe systemdesignershouldtakethis intoconsideration. Awidely
knownexample is Braess’sparadox,where adding moreroads to a networkcanmake the networkmore con-
gested[Braess,1968]. Priceofanarchyisthenotionthatmeasurestheinefficiencycausedbyselfishbehavior
comparedwithoptimalcentralizedbehavior[Koutsoupias and Papadimitriou,1999]. Characterizingsuchin-
efficiencyhasbeenanactiveresearchareawithapplicationsinresourceallocation[Marden and Roughgarden,
2014], traffic congestion [Roughgarden and Tardos, 2004], and others. The inefficiency motivates research
on how to design the mechanisms to improve performance even when the players are still behaving selfishly.
Tax mechanisms are typical approaches to resolve the inefficiency issue, which are widely studied in
economics,operationsresearch,andgametheory. Thegoaloftaxmechanismsistoincentivizeself-interested
playerstofollowsociallyoptimalbehavior,inotherwords,minimizingthepriceofanarchy. Congestiongames
arewidelystudiedgametheorymodelsaboutthe interactionbetweenplayerssharingfacilities suchthatthe
cost of each facility depends on the “congestion” level of the facility [Wardrop, 1952, Rosenthal, 1973]. As
a motivating example, in traffic routing games, each facility corresponds to an edge in the network, and
each player chooses a path that connects her source node and the target node. The cost of each facility
corresponds to the latency of each edge and is a function of the number of players using that edge. Then,
the tax can be interpreted as the toll collected by the road owner or the government. Carefully designed
tolls can help to alleviate traffic congestion and to maximize social welfare [Bergendorff et al., 1997].
Existingworksontaxdesignincongestiongamesmostlyfocusonthecomputationcomplexityoftheopti-
mal tax [Nisan et al., 2007, Caragiannis et al., 2010]. However,they assume the designer has full knowledge
ofthe underlying game,whichisunrealistic inmanyapplications. We considerhowto learnthe optimaltax
withonlyatypeofpartialinformationfeedback,whichwerefertoasthe“equilibriumfeedback". Specifically,
thedesignerobtainsinformationonlythroughenforcingataxandobservingonlytheequilibriumstateunder
∗UniversityofWashington. Email: qwcui@cs.washington.edu
†UniversityofWashington. Email: mfazel@uw.edu
‡UniversityofWashington. Email: ssdu@cs.washington.edu
1
4202
beF
21
]TG.sc[
1v73470.2042:viXrathis tax (here the term feedback refers to information that is received in response to a query). Equilibrium
feedback is more realistic, but brings new challenges to the designer, as strategic exploration is necessary
to learn or design the optimal tax. In this work, we aim to fill the gap in learning optimal tax design for
nonatomic congestion games, and we study the following problem:
How can we learn the optimal tax design in congestion games with equilibrium feedback?
Inthis paper,we takethe initialsteps towardsthe abovequestion. Belowwehighlightourcontributions.
1.1 Main Contributions and Technical Novelties
1. First algorithm for learning optimal tax design in congestion games. Tothebestofourknowl-
edge,this is the firstresultfor learningthe optimaltax in congestiongameswith equilibriumfeedback. Our
algorithmenjoys O(F2β/ǫ)sample complexity to learnanǫ-optimaltax, where F is the number of facilities
and β is the smoothness coefficient of the cost function. The sample complexity has no dependence on the
number of the actions, which could be exponential in F. In addition, we provide an efficient implementa-
tion for network congestion games with O(poly(V,E,ǫ)) computational complexity, where V and E are the
number of the vertexes and edges in the network.
e
2. Piece-wiselinearfunctionapproximation. Inthiswork,wemakenoparameterizationassumptions
onthe costfunctions asthey areusuallynotsatisfiedinreal-worldapplications. Totacklethis challenge,we
use a piece-wise linear function to approximate the optimal tax function. While only the values of the cost
functions canbe observed,we showthat a carefully designed piece-wise linear function canapproximatethe
unobservable optimal tax function well.
3. Strongly convex potential function. One challenge in designing tax is the sensitivity of the Nash
equilibrium w.r.t. the tax. To avoid this issue, we always enforce tax functions with subgradient lower
boundedbysomepositivevalue,whichleadstoastronglyconvexpotentialfunctionandtheNashequilibrium
will be unique and Lipschitz with respect to tax perturbation. As the potential function for optimal tax is
not necessarily strongly convex, we carefully choose the strong-convexitycoefficient to balance the bias.
4. Exploratorytaxdesign. Asonlytheequilibriumfeedbackoftheenforcedtaxisobserved,thedesigner
canonly indirectly query some points of the costfunction. Consequently, explorationin tax design becomes
harderthanthatinstandardbanditproblemswhereactionscanbedirectlychosen[Lattimore and Szepesvári,
2020]. The exploratory tax we design makes the equilibrium on the “boundary", i.e., an additional tax
perturbation will change the equilibrium and reveal information about at least one unknown facility.
In this work, we focus on the well-known nonatomic congestion games. We hope our algorithm and
analysisprovidenew insightonthe intriguingstructureofnonatomiccongestiongames. Inaddition,the tax
design algorithm might find applications in real-worldproblems such as toll design in traffic networks. Due
to the space limitation, most proofs are deferred to the appendix.
Notations. [m] = 1,2, ,m . For a set of real numbers and a real number x : min x
max , we define [x{ ]+ :=··· min} y and [x]− := max K y. The clip operation cli{ pK (a} ,l≤ ,r) :=≤
{K} K y∈K:y≥x K y∈K:y≤x
min max a,l ,r clipaintotheinterval[l,r]. WeuseO()tohideabsoluteconstantsandO()tohidepolylog
{ { } } · ·
termsaswell. Afunctionf : Risα-stronglyconvexiff(y) f(x)+ f(x)⊤(y x)+α y x 2, x,y
X 7→ ≥ ∇ − 2 k − k2 ∀ ∈
. f is β-smooth if f(x) f(y) β x y , x,y . e
X k∇ −∇ k2 ≤ k − k2 ∀ ∈X
2 Related Work
Learning incongestiongames. Forageneralintroductiontocongestiongames,priceofanarchyandop-
timal tax mechanism, we refer the readersto the textbook Nisan et al. [2007]. Nonatomic congestiongames
were first studied in [Pigou, 1912] and formalized by [Wardrop, 1952]. Atomic congestion games were intro-
ducedby[Rosenthal,1973]andtheconnectionwithpotentialgamesisdevelopedby[Monderer and Shapley,
21996]. In contrast to general-sum games without structures, (approximate) Nash equilibrium can be com-
putedefficientlyincongestiongamesduetotheexistenceofthepotentialfunction. Recently,manyworksde-
velopedvariousalgorithmstolearntheNashequilibriuminbothkindsofcongestiongameswithdifferentfeed-
back oracles [Krichene et al., 2015, Chen and Lu, 2016, Cui et al., 2022, Jiang et al., 2022, Panageas et al.,
2023, Dong et al., 2023, Dadi et al., 2024]. These algorithms are derivedfrom the perspective of the players
in the system, while our algorithm is essentially different in that it is utilized by the system designer to
induce better equilibrium.
Optimal tax design in congestion games. Tax mechanisms are a common approach to improve the
systemefficiencyandreducethepriceofanarchy. Fornonatomiccongestiongames,optimaltaxdesigniswell
studied by using marginal cost mechanism [Nisan et al., 2007]. For atomic congestion games, marginal cost
mechanism is shown to deteriorate the system efficiency [Paccagnan et al., 2021]. Instead, different mecha-
nismsareproposedforoptimallocal/globalandcongestiondependent/independenttaxinatomiccongestion
games[Caragiannis et al.,2010,Bilò and Vinci,2019,Paccagnan et al.,2021,Paccagnan and Gairing,2021].
Notably, all of these mechanisms assume full knowledgeof the cost function while we consider learning with
partial information feedback.
Stackelberg games. Stackelberg games Von Stackelberg [2010] models the interactions between leaders
andfollowerssuchthatthe leaderstakeactionsfirstandthefollowersmakedecisionsafterobservingleaders’
actions. This framework can model tax design where the designer is the leader and the game players
are the followers. Letchford et al. [2009], Blum et al. [2014], Peng et al. [2019] study learning Stackelberg
equilibrium with a best response oracleto predict follower’sactions. Recently, Bai et al. [2021], Zhong et al.
[2021], Zhao et al. [2023] generalize the results to learning Skackelberg equilibrium with bandit feedback.
However, their results assume finite actions or linear function approximation. For tax design, the search
space is an exponentially large function space with complicated dependence on the objective. Consequently,
existing Stackelberg games results become vacuous when specialized to our problem.
Mathematical programming under equilibrium constraint. Tax design can be formulated as mini-
mizing social cost with respect to tax under the constraint that players are following the equilibrium. This
fallsintotheclassofmathematicalprogramswithequilibriumconstraints(MPEC)[Luo et al.,1996]. MPEC
are usually intractable and the analyses rely on assumptions making the equilibrium unique and differen-
tiable [Colson et al., 2007]. As a bilevel optimization problem, existing approach use specific inner loop
algorithms to approach the equilibrium so that the gradient can be propagated to the outer loop [Li et al.,
2020, Liu et al., 2022, Li et al., 2022]. However, such an approach requires strong assumptions, such as
the tax designer can control the algorithm of the agents, convex objective function and parameterized tax
function. In contrast, our results make none of these assumptions.
3 Preliminaries
Nonatomic congestion games. A weighted nonatomic congestion game (congestion game) is described
by the tuple ( , ,w ,c ), where is the set of facilities with cardinality F, m is the number of
[m] [m] F
F A F
commodities,A isthe actionsetforcommodityi [m],w [0,1]isthe weightforcommodityi [m]such
i i
∈ ∈ ∈
that w = 1, and c : [0,1] [0,1] is the cost function for facility f . Each commodity consists
i∈[m] i f 7→ ∈ F
of infinite number of infiniesimal players with total load to be w . Each individual player is self-interested
i
P
and has negligible affect on the game.
In congestion games, action a ,i [m] is a subset of , i.e. a , which denotes the facilities
i
∈ A ∈ F ⊆ F
utilized by action a. For commodity i
∈
[m], we use strategy x
i
= (x i,a)
a∈Ai
∈
[0,w i]|Ai| with constraint
x =w to denote how the load is distributed over all the actions. The joint strategy for the game
a∈Ai i,a i
is represented by x = (x ,x , ,x ) [0,1]A, where A = . We use to denote the set of all
P 1 2 ··· m ∈ i∈[m]|Ai | X
feasible strategies.
P
A decentralized perspective of strategy x for commodity i is that eachself-interested infiniesimal player
i
follows a randomized strategy that chooses a with probability proportional to x . With the law of
i i,a
∈ A
large number, the load on action a would be x .
i,a
3Cost function. For a strategy x, the cost of a facility is c (l (x)), where l (x) = x is
f f f i∈[m] a∈Ai i,a
the load on facility f. The cost of an action a is the sum of the facility cost that a utilizes: c (x) :=
P P a
c (l (x)).
f∈a f f
We make the following assumption on the cost function. Monotonicity is a standard congestion game
P
assumption,whichisalsoobservedinmanyreal-worldapplicationsasmoreplayerssharingonefacility,each
player will have less gain or more cost [Nisan et al., 2007]. Smoothness is a standard technical assumption
for analysis.
Assumption 1. We assume the cost function satisfies:
1. Monotonicity: c () is non-decreasing for all f ,
f
· ∈F
2. Smoothness: c () is β-smooth for all f .
f
· ∈F
Nash equilibrium. Nashequilibrium in nonatomic congestiongames, also known as the Wardropequlib-
rium[Wardrop,1952],isthestrategythatnoplayerhastheincentivetodeviatefromitsstrategyasformalized
in Definition 1. As a result, Nash equilibrium is a stable state for a system with selfish players.
Definition 1. A Nash equilibrium strategy x is a joint strategy such that each player is choosing the best
action: for any commodity i [m] and actions a,a′ , we have
i
∈ ∈A
c a(x) c a′(x), if x
i,a
>0.
≤
Similarly, an ǫ-approximate Nash equilibrium x satisfies that
i [m],a,a′ i,c a(x) c a′(x)+ǫ, if x
i,a
>0.
∀ ∈ ∈A ≤
Forastrategyxandcommodityi,actionsa suchthatx >0arenamedasthe“in-support"action
i i,a
∈A
andtheothersare“off-support"actions. ForaNashequilibrium,in-supportactionsmusthavethesamecost
and off-support actions are no better than in-support actions. It is well known that Nash equilibria always
exist in congestion games [Beckmann et al., 1956].
Potential Function. An important concept in congestion games is the potential function:
lf(x)
Φ(x):= c (u)du.
f
f Z0
X
If Assumption 1 is satisfied, then Φ(x) is a convex function and Nash equilibrium is equivalent to the
minimizer of the potential function [Beckmann et al., 1956].
Network congestion games. Network congestion games are congestion games with multicommodity
networkstructure,whicharealsoknownastheselfishroutinggames[Roughgarden,2005]. Amulticommodity
network is described by a directed graph ( , ) where is the vertex set and is the edge (facility) set. In
V E V E
addition, each commodity i [m] corresponds to a pair of source and target vertex (s ,t ), and actions are
i i
∈
paths connecting s and t . Each edge is associated with a nondecreasing cost (delay) function.
i i
4 Tax Design for Congestion Games
In this section, we introduce tax design in congestion games. Before we get into the details, we will first
introduce some notions to simplify the problem.
44.1 Polytope Description for Congestion Games
For a strategy x
i
R|Ai|, the dimension
i
can be as large as 2F. However, it is usually convenient to
considerthefacility∈ loady RF suchthat|A y | = x . Inaddition,wedefiney = y RF
i ∈ i,f a∈Ai:f∈a i,a i∈[m] i ∈
to be the total facility load. We use φ () to denote the reparameterizationmapping:
(i) · P P
φ(x)=y,φ (x )=y , i [m],
i i i
∀ ∈
andweset = y RF : x ,y =φ(x) tobe the setofallfeasibleloads. Note thatφis notnecessarily
Y { ∈ ∃ ∈X }
a bijection, i.e., there could exist multiple x mapped to the same y. We use φ−1(y) := x : φ(x) = y
{ ∈ X }
to denote the set of strategies that are mapped to y. We can also the define the potential function after the
repameterization:
yf
Φrepa(y):= c (u)du=Φ(x), x Φ−1(y).
f
∀ ∈
f Z0
X
Importantly, Φrepa(y) does not depend on the choice of x φ−1(y). For the reparameterized potential
∈
function, wehavethe followinglemmashowingthatitisalmostequivalenttothe originalpotentialfunction.
When it is clear from the context, we will simplify Φrepa as Φ.
Lemma 1. Under Assumption 1, Φrepa is convex. If y∗ =argmin Φrepa(y), then for any x φ−1(y∗), x is
y ∈
a Nash equilibrium.
For any Nash equilibrium strategy x, we call y =φ(x) the Nash equilibrium load (Nash load).
4.2 Optimal Tax for Congestion Games
Nash equilibrium is a stable state for self-interestedplayers,as no player has the incentive to deviate unilat-
erally. However, Nash equilibrium does not efficiently utilize the facilities, which is measured by the social
cost:
Ψ(y):= y c (y ).
f f f
f
X
Price of anarchy is a concept that measures the efficiency of selfish agents in a system, defined as the ratio
between the worst-case social cost for equilibria and the optimal social cost:
max Ψ(y)
yisaNashequilibriumload
PoA=
min Ψ(y)
y∈Y
For example, in nonatomic congestion game with polynomial cost functions, the price of anarchy grows as
Θ(d/lnd) where d is the degree of the polynomials [Nisan et al., 2007].
Toreducethepriceofanarchy,onetypicalapproachistoenforcetaxoneachfacilitytochangethebehav-
ior of the self-interested players. Formally, a taxed congestion game is described by ( , ,w ,c ,τ )
[m] [m] F F
where the additional term τ : [0,1] R is the tax function on facility f . The coF stA of facility f with
f
→ ∈ F
load u under tax becomes c (u)+τ (u). Correspondingly,we define the potential function with tax τ as
f f
yf
Φ(y;τ):= [c (u)+τ (u)]du,
f f
f Z0
X
and the Nash load would satisfy y∗ argmin Φ(y;τ).
∈ y
The optimal tax is defined as the tax that can induce optimal social behavior for self-interested players.
We want to note that the tax is not included in the social cost as the convention in tax mechanism design.
Definition 2. A tax τ is an optimal tax if all Nash equilibria under tax τ can minimize the social cost:
argminΦ(y;τ) argminΨ(y).
⊆
y∈Y y∈Y
In addition, a tax τ is an ǫ-optimal tax if we have
Ψ(y) argminΨ(y′)+ǫ, y argminΦ(y′′;τ).
≤ y′∈Y ∀ ∈ y′′∈Y
5Protocol 1 Online Tax Design for Congestion Game
Initialize: Facility set .
F
for t=1,2,...,T do
Designer chooses tax τt.
Designer observes Nash load yt =argmin Φ(y;τ) and Nash cost ct =[c (yt)] for f .
y∈Y f f f∈F ∈F
end for
The marginal cost tax is τ∗ :τ∗(u)=uc′(u), f [Nisan et al., 2007]. As Φ(y;τ∗)=Ψ(y), the Nash
f f ∀ ∈F
equilibrium under tax τ∗ will minimize the socialcost and τ∗ is an optimal tax. We will make the following
assumption so that the cost combined with tax c+τ∗ is still non-decreasing.
Assumption 2. Margin cost tax τ∗(u)=uc′(u) is non-decreasing for all f .
f f ∈F
4.3 Tax Design for Congestion Games
Inthispaper,weconsiderthecasewherethesystemdesigner(e.g. government)wanttoenforcean(approxi-
mate)optimaltaxtoinduceoptimalsocialbehaviorandmaximizesocialwelfare. However,thecostfunction
is unknown so the optimal tax function cannot be computed directly via the marginal cost mechanism. On
the other hand, the designer can enforce several taxes and observe the equilibrium information.
Formally, the learning process can be viewed as an online problem shown in Protocal 1. At round t,
the designer can choose a tax τt and observe the corresponding Nash equilibrium load yt RF and Nash
equilibrium cost ct RF. The sample complexity of a tax design algorithm is the numbe∈ r of rounds for
∈
designing an ǫ-optimal tax.
Anaiveapproachis thatthe designerfirstenumeratesallthe ǫ-approximationsofτ∗ andchoosesthe tax
with minimal socialcost. However,such anapproachwould requireO((1/ǫ)Fβ/ǫ) samples as the complexity
of using piece-wise linear function to approximate τ∗ (a β-smooth function) with ǫ error is O((1/ǫ)β/ǫ),
f
resulting in exponential dependence on the parameters β, 1/ǫ and F.
Another approach is applying algorithms for mathematical programming under equilibrium constraints.
Specifically, we can formulate tax design as solving
minΨ(y(τ)), s.t. y(τ)=argminΦ(y;τ).
τ y∈Y
However,y(τ)isnotdifferentiableorevencontinuousw.r.t. τ andΨ(y(τ))isnotconvexw.r.t. τ (Lemma5).
Previousresultsarenotapplicabletoourproblemastheyapplygradient-basedmethodsandmakeconvexity
assumptions [Li et al., 2020, Liu et al., 2022].
5 Learning Optimal Tax in nonatomic Congestion Games
In this section, we describe our algorithm that learn an ǫ-optimal tax with O(F2β/ǫ) samples. First, we
introduce piece-wise linear functions as a nonparametric way to approximate the marginal cost tax τ∗
[Takezawa, 2005].
Definition 3. (Piece-wise Linear Function) We use a dictionary∗ d = (x ,y ), ,(x ,y ) for x =
1 1 n n i
{ ··· } 6
x , i=j (w.l.o.g. we let x <x < <x ) to represent a piece-wise linear function d() on [x ,x ] such
j 1 2 n 1 n
∀ 6 ··· ·
that
x x x x
i+1 i
d(x)= − y + − y , x [x ,x ].
i i+1 i i+1
x x x x ∀ ∈
i i+1 i i+1
− −
In addition, we use to represent the update method for dictionary. I.e., d (x,y) is the piece-wise linear
function interpolating one more point (x,y) if (x,d(x)) is not already in d, otherwise it will update d(x) to
S S
y.
We will maintain the piece-wise function on a grid = 0,∆,2∆, ,K∆ = 1 with K = 2β and
L { ··· } ǫ
∆=1/K. It is easy to check that the time complexity for computing d(x) is O(logK). l m
∗Inthisdictionary, keyisxi andvalueisyi. Forreaders unfamiliarwiththedictionary datastructure, itcanberegarded
asasetwithaspecialupdateoperation.
65.1 Main Algorithm
Algorithm 1 Tax Design for Congestion Game
1: Initialize: Facility set , number of rounds T, tolerance ǫ, smoothness β, perturbation δ =ǫ∆2/8.
F
2: Set initial tax τ1 :τ1 = (0,0),(1,β+ǫ) for all f . Set 1 to be 0 for all f .
f { } ∈F Kf { } ∈F
3: for t=1,2,...,T do
4: Observe yt,ct RF as the Nash load and the Nash cost of each facility under tax τt.
5: Set ¯ to be th∈ e unknown facility set (Definition 4).
6: Set F l f =τ ft([y ft]− Kt f)+ǫ(y ft −[y ft]− Kt f) and r f =τ ft([y ft]+ Kt fS{1})+ǫ(y ft −[y ft]+ Kt fS{1}) for each f ∈F¯.
7: Run Algorithm 2 with input yt, ct, τt =[τ ft(y ft)] f, F¯ and [l f,r f] f∈F¯.
8: if Algorithm 2 return False then
9: return τt
10: else
11: Algorithm 2 return τ RF,f ¯,sign 1,1 .
∈ ∈F ∈{− }
12: Apply tax τ˙t :τ˙t =τt (yt,τt)+sign δ and τ˙t =τt (yt,τt) for f =f.
f f f f · f f f f 6
13: Observe y˙t,c˙t
eRF eae
s
Sthee Ne ase
h load and the Nash cos St of each facility.
14: Update τ t+1 an∈ d t+1 accordeing to (1). e e
K
15: end if
16: end for
In this section, we introduce our main algorithm. At each round t, we will maintain a known index set
t where the marginal cost tax can be accurately estimated (Lemma 7), and use a piece-wise linear
Kf ⊆ L
function to approximate the tax function by interpolating the values at the known indexes. The piece-wise
linear function takes the form τt = (xt,yt) and the known index set t satisfies xt = t 1 and
f { i i }i Kf { i}i Kf { }
t . Here 1is a specialcaseasit is notin the knownindex setinitially butit isneededas the boundary
Kf ⊆L S
forthepiece-wiselinearfunctionτt. Initially,thetaxissettobeτ1(u)= (0,0),(1,β+ǫ) andtheauxiliary
f f { }
tax is τ1 = (0,0),(1,β) for f (Line 2). Here we set τ1(1) = β as β is always an upper bound on
f { } ∈ F f
τ∗(1). The auxiliary tax τt is a non-decreasing piece-wice linear approximationof τ∗ and we always set tax
f f f
τt(u)=bτt(u)+ǫu to ensure that the subgradient of the tax ebnforced is lower bounded by ǫ.
f f
At round t, after obsebrving the Nash equilibrium load yt RF and the Nash equilibrium cost ct RF,
∈ ∈
the facilibties are split into two sets: known facilities and unknown facilities.
Definition 4. For each round t, facility f is known if the Nash load yt [0,1] satisfies [yt]− t and
f ∈ f L ∈ Kf
[yt]+ t. Otherwise, facility f is unknown for round t.
f L ∈Kf
For a known facility f, the Nash load is either in the known index set or sandwiched by two consecutive
known indexes. As a result, the tax estimate for the Nash load τt(yt) will be close to the true optimal
f f
tax τ∗(yt) with error 2ǫ (Lemma 8). Then we apply Algorithm 2 to find the exploratory tax to gather
f f
information about unknown facilities (Line 7).
Proposition 1. If Algorithm 2 return False at round t, then tax τt is an 6ǫF-optimal tax. If Algorithm 2
output τt,ft,signt at round t, then we have
e e 0< yt y˙t ∆.
f et − f et ≤
(cid:12) (cid:12)
(cid:12) (cid:12)
IfAlgorithm2outputτt,ft,signt atroundt,(cid:12)weupdat(cid:12)ethetaxandtheknownindexsetbythefollowing
rule. For u [yt ]+,[yt ]− t (this set is not empty as ft is an unknown facility), we set
∈{ ft L ft L}\Kft
e e e e e
ct c˙t e
τt+1 =τt u,clip u f et − f et ,τt ([yt ]− ),τt ([yt ]+ ) , (1)
f et f et
[(cid:16) (cid:0)
· y ft
et
−y˙ ft
et
f et f et Kt fet f et f et Kt fetS{1}
(cid:1)(cid:17)
bt+1 =bt u . b b (2)
Kf et Kf et { }
[
7and τt+1 =τt, t+1 = t for f =ft. Then we set τt+1(u)=τt+1(u)+ǫu for all f and u [0,1].
f f Kf Kf 6 f f ∈F ∈
ct −c˙t
τt+1In (b uw )o isrd ss tb, ilw
l
ae c nl oip n-t dh ee crt ew ao sinp goi pn it ee ce es -t wim isa ete linu e· ary ff t ee att p− py˙f f rte et t oxo imn at th ie ob nle oft fa thn ed mrig ah rgt ink an low con stin td axex τo ∗f
.
τ τft e tt +( 1u) isso adt dh ea dt
f et f bf
withanextralineartermtoguaranteeastronglyconvexpotentialfunction(Lemma2). As0< yt y˙t ∆,
b f − f ≤
the two point estimate of the gradient yct f ft− −c y˙ ˙t f ft is accurate enough for c′ f(u) such that τ ft e+ t1(u(cid:12) (cid:12) (cid:12)) −τ f(u(cid:12) (cid:12) (cid:12)) ≤ ǫ
(Lemma 6). (cid:12) (cid:12)
(cid:12) (cid:12)
As t increases by 1 at round t and there are F such sets with size bounded b(cid:12)y O(β/ǫ), Algor(cid:12)ithm
|Kft|
e
2 will output False within at most O(Fβ/ǫ) rounds, which implies τt is an ǫF-optimal tax (Proposition 1).
With proper rescaling, the sample complexity for ǫ-optimal tax is O(F2β/ǫ).
Theorem 1. UnderAssumption 1and Assumption2, Algorithm 1will outputan 6ǫF tax within T 2Fβ/ǫ
≤
rounds. In addition, each round has at most two tax realizations.
Remark 1. To uniformly approximate a β-smooth function, we have to know its value at O(β/ǫ) points
[Takezawa, 2005]. For an ǫ-optimal tax, we should estimate τ∗ with ǫ/F accuracy as the error accumulates
f
with all the facilities. As a result, we conjecture that O(F2β/ǫ) is tight.
5.2 Subroutine for Finding Next Tax
In this section, we describe Algorithm 2, which can find an exploratory tax that satisfies Proposition 1.
The idea is to perturb the tax so that we can observe another similar but different Nash equilibrium load.
However, there are two challenges:
1. Perturbing the tax might change the Nash equilibrium load drastically.
2. Perturbing the tax might not change the Nash equilibrium load at all.
Toresolvethe firstissue,wealwaysapplytaxesthathave(sub)gradientlowerboundedbyǫ>0. ByLemma
2, the potential function is always ǫ-strongly convex. This is achieved by using the input [l ,r ] as the
f f
feasible range for updating tax τt with (yt, ) so that the updated tax still maintains the subgradient lower
f f ·
bound. As a result, the Nash load for any feasible tax is unique and Lipschitz w.r.t. tax perturbation. To
resolve the second issue, we find the tax that makes the current Nash equilibrium on the “boundary". I.e.,
an additional perturbation will make the Nash equilibrium change. Intuitively, this is similar to removing
the slackness in a constrained optimization problem. By Lemma 3, we can observe a different Nash load on
f if we make the additional perturbation.
Lemma 2. If the subgradient of the cost function c is lower bounded by ǫ > 0 for all f , then the
f
∈ F
potential function Φrepa(y) is ǫ-strongly convex. However, Φ(x) is not necessarily strongly convex.
Lemma 3. If two taxes τ and τ˙ only differ in facility f and the Nash loads y and y˙ are different, then
y =y˙ .
f f
6
In the algorithm, we use the following quantity to measure the cost gap between in-support actions and
off-support actions for commodity i.
Definition 5. The gap for a strategy x with cost c RF is defined as
∈X ∈
Gap (x,c)= min c max c .
i a:xi,a=0 f −a:xi,a6=0 f
f:f∈a f:f∈a
X X
Specifically, if x is a Nash equilibrium and c is the Nash cost, then the minimum for the first term is
achieved by any in-support action a:x =0 as they all have the same cost.
i,a
6
Now we discuss how Algorithm 2 finds the “boundary” tax in detail. The input to the algorithm is
the Nash flow y, the Nash cost c, the Nash tax τ, the unknown facility set ¯ and the feasible tax range
F
8Algorithm 2 Test Tax Design
1: Initialize: Nash flow y RF, tax τ RF, cost c RF, unknown facility set ¯, unknown facility range
[l ,r ] for f F¯. ∈ ∈ ∈ F
f f
2: Set x=φ−1(∈ y). Compute corresponding y i RF for i [m].
∈ ∈
3: Set I =False
4: if Exists f ¯ and i [m] such that 0<y i(f)<w i then
∈F ∈
5: return τ,f,1.
6: end if
7: for Commodity i [m] do
8: Let F¯ i = {f ∈∈ F¯ : a:f∈ax i,a =w i
}
and F¯ i′ = {f F¯ : a:f∈ax i,a =0 }.
9: Set τ¯:τ¯ F¯ i =r F¯ i,τ¯ F P¯ i′ =l F¯ i′,τ¯ F\(F¯ iSF¯ i′) =τ F\(F¯ iSF¯ i′) P
10: if Gap (x,c+τ¯)<0 then
i
11: Set I =True
12: break
13: end if
14: end for
15: if I =False then
16: return False
17: end if
18: Set τ′ =τ
19: for f ¯ i do
∈F
20: Set τu :τu =u,τu =τ′
f F\{f} F\{f}
21: Set u=argmax u:Gap (x,c+τu) 0, j
{ j ≥ ∀ }
22: if ue r fethen e
≤
23: return τu,f,1 e
24: end if
25: Set τ′ =τrfe
26: end for
27: for f ∈F¯ i′ d eo
28: Set τu :τu =u,τu =τ′
f F\{f} F\{f}
29: Set u=argmin u:Gap (x,c+τu) 0, j
{ j ≥ ∀ }
30: if ue l fethen e
≥
31: return τu,f, 1 e
−
32: end if
33: Set τ′ =τlfe
34: end for
e
[l ,r ] for each unknown facility f ¯. We emphasize that here the Nash cost/tax are the values of the
f f
cost/tax function on the Nash load∈ anF d they are vectors in RF instead of functions. [l ,r ] is the feasible
f f
range for the perturbed tax value at facility f. By the definition of l and r , current tax τt updated with
f f f
(yt,u),u [l ,r ] is still a tax with subgradient lower bounded by ǫ.
f ∈ f f
Forthefirststep,thealgorithmwillcomputestrategyx φ−1(y)astheNashequilibriumstrategy(Line
∈
2). If there exists an unknown facility f and commodity i such that not all load of commodity i is using f
or not using f (Line 4), then perturbing the tax at facility f will make x not longer a Nash equilibrium as
in-support actions have different costs.
Otherwise,foreachunknownfacilityf andcommodityi,eitheralloftheloadisusingf oralloftheload
is not using f. As a result, in-support actions always have the same cost after perturbing the tax. For the
next step, we verify if there exists a tax within the feasible ranges for unknown facilities that makes x not a
Nash equilibrium. However, there does not exist a universal worst case tax that can verify if x is always a
Nash equilibrium or not.
Fortunately, for eachcommodity the worst-casetax has a closed form: the taxes for facilities used by all
of the Nash load should be r and the taxes for facilities used by none of the Nash load should be l , thus
f f
9maximizingthecostforin-supportactionsandminimizingthecostforoff-supportactions(Line9). Foreach
commodity i, we apply the corresponding worst-case tax and check if the in-support actions are still the
optimal actions (Line 10). If for all commodities, the in-support actions are optimal under the worst-case
tax, then for any tax within the feasible range, y is the Nash loadand the algorithmwill output False (Line
16). As τ∗ is approximately within the range, yt approximately minimizes the social cost (Lemma 10).
Otherwise,thealgorithmfindscommodityisuchthatxisnottheNashequilibriumundertheworst-case
tax (Line 11). For the laststep, we gradually transformthe initial tax to this worst-casetax and stop when
x is not the Nash equilibrium for some commodity. Specifically, the algorithmiteratively changesthe tax in
the unknown facility set ¯ = ¯ ¯′ (Line 19 and Line 27) to the worst-case tax.
For facility f ¯, thF e algF ori ithmFi finds the boundary tax for facility f that satisfies
i
∈F S
u=argmax u:Gap (x,c+τu) 0, j [m] .
{ j ≥ ∀ ∈ }
u
Ifu r , wewilloutputτu,f,1. Bythe definitionofu,ifweefurther increaseu,oneofthegapswillbecome
f
≤
negative andx is no longer the Nashequilibrium. Otherwise, allfeasible taxes for f havea nonnegativegap
for allcommodities, whichemeans x is still the Nashequilibrium, andwe continue for the nextfacility. After
enumerating all the facilities in ¯, we similarly enumerate all the facilities in ¯′. Eventually, the tax is
Fi Fi
transformed into the worst-case tax with negative gap for commodity i, so this process will end and output
τu,f,sign such that τu is the tax that makes the Nash equilibrium on the boundary, f is the facility to
perturb and sign is the direction to perturb the tax at f.
e e
6 Computation Complexity
In this section, we discuss the computation complexity of Algorithm 1 and Algorithm 2. We will show that
thesetwoalgorithmscanbeimplementedwithO(poly(A,F,m))complexityforeachround. Fornetworkcon-
gestiongames,the computationcomplexity canbe sharpened to O(poly(V,E,m)), avoidingthe dependence
on A that can be exponential in V and E. e
e
6.1 General Congestion Games
For Algorithm 1, we compute/update the value of the cost/tax function for each facility. As we use the
dictionarydatastructure,computing value andupdating value only haveO(logK)=O(logβ/ǫ)complexity.
As a result, the complexity of one round in Algorithm 1 is O(F).
ForAlgorithm2,x φ−1(y)isaCaratheodorydecompositionproblemandcanbeformulatedasalinear
∈
program with A variables, F +m equation constraints andeA inequality constraints (Proposition 2), which
can be solved in polynomial time [Cohen et al., 2021].
Then the bottleneck is in computing u = argmax u : Gap (x,c+τu) 0, j [m] for τu : τu =
u{ j ≥ ∀ ∈ } f
u,τu = τ′ , f F¯. For simplicity, we use the notation: cu = c+τu as the cost with tax τu. By
F\{f} F\{f} ∈ i
Definition 5 and the definition of action cost, we have e e e
e e e e
Gap (x,c+τu)= min cu max cu. (3)
j a:xj,a=0 a −a:xj,a6=0 a
Foractioncostcu,iff a,itisalinearfunctieonu+C forsoemeconstanteC. Otherwise,itisaconstantw.r.t.
u. As a result, wa e can d∈ etermine the function cu with O(F) computationas we only need to compute cτ f′ to
a a
decide the consetant. Then we can compute Gap (x,c+τu) in closed form and compute u = argmax u :
j j u{
Gap j(x,c+τu)
≥
0
}
with O(AF) complexitye. Finally, u = min j∈[m]u
j
can be computed with O(meAF)
complexity. Similarly, u=argmin u:Gap (x,c+τu) e0, j [m] has O(mAF) complexity.
u{ j ≥ ∀ ∈ }
e
6.2 Network Congestion Games e e
We showthat Algorithm2 can be implemented by applying shortestpathalgorithmson a modified network
for network congestion games, thus avoiding the dependence on A. We will apply Dijkstra’s algorithm with
O(V +E) complexity while other shortest path algorithms can be used as well.
e
10First,the Caratheodorydecompositionx φ−1(y)canbe done efficientlywith O(VE+E2)stepsby the
∈
decompositionalgorithmin [Panageas et al.,2023]. While their algorithmis for the flowpolytopes withone
commodity, it can be directly generalized to the multi-commodity case.
For u = argmax u : Gap (x,c+τu) 0, j [m] , the computation complexity can be boosted to
u{ j ≥ ∀ ∈ }
O(m(E+V)). To achieve this, we consider how (3) changes as u increases from τ′ to r . By Algorithm 2,
f f
we have Gap (x,c+τu) 0 when u=eτ′ as otherwise the algorithm ends at the last iteration. In addition,
j ≥ f
feacilityf eitherhasnoneoftheNashloadorhasalloftheNashloadforfacilityj accordingtothealgorithm
design. For the first case, the in-support action costs will not change as u increases. As the off-support
e
action costs are nondecreasing w.r.t. u, Gap (x,c+τu) 0 always holds.
j ≥
Forthe secondcase(allin-supportactionsusef), the in-supportactioncoststakethe formofu+C and
C can be determined by applying shortest path algoerithm with edge weight c+ττ f′ . For off-support action
cost, we observe that
min cu =min min cu, min cu e
a a a
a:xj,a=0 a:xj,a=0,f∈a a:xj,a=0,f∈/a
=min emin c(cid:8) u a, min cτ af′ e. e (cid:9) (4)
a:xj,a=0,f∈a a:f∈/a
(cid:8) (cid:9)
where the secondequationis fromthatthe actioncostdoes notdepend on u and x =0 if f / a. The first
e e j,a
∈
termin(4)growslinearlyw.r.t. uasf a,soitisalwayslargerthanthein-supportactioncost. Thesecond
∈
term in (4) is the shortestpath length for commodity j that does not use facility f, which can be computed
as the shortest path in the network aefter removing f. As a result, u = argmax u : Gap (x,c+τu) 0
j u{ j ≥ }
can be computed with O(E+V) complexity. Then the complexity for u=min u is O(m(E+V)).
j∈[m] j
Similarly, u =argmin u:Gap (x,c+τu) 0 can be reduced to solving the shortest path theat must
j u{ j ≥ }
use edge f in the network. We consider how (3) changes as u decreases from τ to l . Inietially, the gap is
f f
nonnegative. If f has all of the Nash load,ethen the in-support action cost is a linear function u+C and
it decreases at least as fast as the first term. As a result, the gap is always nonnegative. Otherwise, f has
none of the Nash load and in-support action cost remains constant.
We notice the following equation:
min cu =min min cu, min cu
a a a
a:xj,a=0 a:xj,a=0,f∈a a:xj,a=0,f∈/a
=min mein cu a, m(cid:8) in cτ af′ , e e (cid:9) (5)
a:f∈a a:xj,a,f∈/a
(cid:8) (cid:9)
where the second equation is from that fe
∈
a impliees a is off-support (x
j,a
= 0) and f ∈/ a implies cu
a
is
independent of u. The second term in (5) is a constant and is always greater than the in-support action
cost. The first term in (5) is a linear function u and it can be determined by computing the shortest path
e
that always uses f and with edge weight c+ττf. This subproblem can be solved by applying the shortest
path algorithmtwice: the first one is to connect the source node and the starting node of f, and the second
one is to connectethe end node of f and the t earget node. As a result, the complexity for u = max j∈[m]u
j
is O(m(E +V)) as well. Thus the computation complexity for Algorithm 2 in network coengestion game is
O(VE+E2+mV +mE). e
e
7 Conclusion
We studied the problem of learning the optimal tax design in nonatomic congestion games. We proposed
an algorithm with polynomial sample complexity to learn an ǫ-optimal tax with novel algorithm design. In
addition, our algorithm is computationally efficient for network congestion games. We hope our result can
shed light on real-worldtax design.
References
Yu Bai, Chi Jin, Huan Wang, and Caiming Xiong. Sample-efficient learning of stackelberg equilibria in
general-sum games. Advances in Neural Information Processing Systems, 34:25799–25811,2021.
11MartinBeckmann,CharlesB McGuire,andChristopherBWinsten. Studies inthe economicsoftransporta-
tion. Technical report, 1956.
Pia Bergendorff, Donald W Hearn, and Motakuri V Ramana. Congestion toll pricing of traffic networks.
Springer, 1997.
Vittorio Bilò and Cosimo Vinci. Dynamic taxes for polynomial congestion games. ACM Transactions on
Economics and Computation (TEAC), 7(3):1–36, 2019.
AvrimBlum, Nika Haghtalab,andArielD Procaccia. Learningoptimalcommitment to overcomeinsecurity.
Advances in Neural Information Processing Systems, 27, 2014.
Dietrich Braess. Über ein paradoxonaus der verkehrsplanung. Unternehmensforschung, 12:258–268,1968.
IoannisCaragiannis,ChristosKaklamanis,andPanagiotisKanellopoulos. Taxesforlinearatomiccongestion
games. ACM Transactions on Algorithms (TALG), 7(1):1–31,2010.
Po-An Chen and Chi-Jen Lu. Generalized mirror descents in congestion games. Artificial Intelligence, 241:
217–243,2016.
MichaelBCohen,YinTatLee,andZhaoSong. Solvinglinearprogramsinthecurrentmatrixmultiplication
time. Journal of the ACM (JACM), 68(1):1–39,2021.
BenoîtColson,PatriceMarcotte,andGillesSavard.Anoverviewofbileveloptimization.Annalsofoperations
research, 153:235–256,2007.
Qiwen Cui, Zhihan Xiong, Maryam Fazel, and Simon S Du. Learning in congestion games with bandit
feedback. Advances in Neural Information Processing Systems, 35:11009–11022,2022.
Leello Dadi, Ioannis Panageas, Stratis Skoulakis, Luca Viano, and Volkan Cevher. Polynomial convergence
of bandit no-regret dynamics in congestion games. arXiv preprint arXiv:2401.09628, 2024.
Jing Dong, Jingyu Wu, Siwei Wang, Baoxiang Wang, and Wei Chen. Taming the exponential action set:
Sublinear regret and fast convergence to nash equilibrium in online congestion games. arXiv preprint
arXiv:2306.13673, 2023.
Haozhe Jiang, Qiwen Cui, Zhihan Xiong, Maryam Fazel, and Simon S Du. Offline congestion games: How
feedback type affects data coverage requirement. arXiv preprint arXiv:2210.13396, 2022.
Elias Koutsoupias and Christos Papadimitriou. Worst-case equilibria. In Annual symposium on theoretical
aspects of computer science, pages 404–413.Springer, 1999.
WalidKrichene,BenjaminDrighès,andAlexandreMBayen. Onlinelearningofnashequilibriaincongestion
games. SIAM Journal on Control and Optimization, 53(2):1056–1081,2015.
Tor Lattimore and Csaba Szepesvári. Bandit algorithms. Cambridge University Press, 2020.
Joshua Letchford, Vincent Conitzer, and Kamesh Munagala. Learning and approximating the optimal
strategy to commit to. In Algorithmic Game Theory: Second International Symposium, SAGT 2009,
Paphos, Cyprus, October 18-20, 2009. Proceedings 2, pages 250–262.Springer, 2009.
Jiayang Li, Jing Yu, Yu Nie, and ZhaoranWang. End-to-end learning and intervention in games. Advances
in Neural Information Processing Systems, 33:16653–16665,2020.
Jiayang Li, Jing Yu, Qianni Wang, Boyi Liu, Zhaoran Wang, and Yu Marco Nie. Differentiable bilevel
programming for stackelberg congestion games. arXiv preprint arXiv:2209.07618, 2022.
Boyi Liu, Jiayang Li, Zhuoran Yang, Hoi-To Wai, Mingyi Hong, Yu Nie, and Zhaoran Wang. Inducing
equilibria via incentives: Simultaneous design-and-play ensures global convergence. Advances in Neural
Information Processing Systems, 35:29001–29013,2022.
12Zhi-Quan Luo, Jong-Shi Pang, and Daniel Ralph. Mathematical programs with equilibrium constraints.
Cambridge University Press, 1996.
Jason R Marden and Tim Roughgarden. Generalized efficiency bounds in distributed resource allocation.
IEEE Transactions on Automatic Control, 59(3):571–584,2014.
Dov Monderer and Lloyd S Shapley. Potential games. Games and economic behavior, 14(1):124–143,1996.
NoamNisan,Tim Roughgarden,Éva Tardos,andVijay V. Vazirani. Algorithmic Game Theory. Cambridge
University Press, New York, NY, USA, 2007.
Dario Paccagnan and Martin Gairing. In congestion games, taxes achieve optimal approximation. In Pro-
ceedings of the 22nd ACM Conference on Economics and Computation, pages 743–744,2021.
Dario Paccagnan, Rahul Chandan, Bryce L Ferguson, and Jason R Marden. Optimal taxes in atomic
congestion games. ACM Transactions on Economics and Computation (TEAC), 9(3):1–33,2021.
Ioannis Panageas,Stratis Skoulakis, Luca Viano, Xiao Wang, and Volkan Cevher. Semi bandit dynamics in
congestiongames: Convergencetonashequilibriumandno-regretguarantees. InInternationalConference
on Machine Learning, pages 26904–26930.PMLR, 2023.
Binghui Peng, Weiran Shen, Pingzhong Tang, and Song Zuo. Learning optimal strategies to commit to. In
Proceedings of the AAAI Conference on Artificial Intelligence, volume 33, pages 2149–2156,2019.
Arthur Cecil Pigou. Wealth and welfare. Macmillan and Company, limited, 1912.
Robert W Rosenthal. A class of games possessing pure-strategy nash equilibria. International Journal of
Game Theory, 2:65–67,1973.
Tim Roughgarden. Selfish routing and the price of anarchy. MIT press, 2005.
Tim Roughgarden and Éva Tardos. Bounding the inefficiency of equilibria in nonatomic congestion games.
Games and economic behavior, 47(2):389–403,2004.
Kunio Takezawa. Introduction to nonparametric regression. John Wiley & Sons, 2005.
Heinrich Von Stackelberg. Market structure and equilibrium. Springer Science & Business Media, 2010.
John Glen Wardrop. Road paper. some theoretical aspects of road traffic research. Proceedings of the
institution of civil engineers, 1(3):325–362,1952.
Geng Zhao, Banghua Zhu, Jiantao Jiao, and Michael Jordan. Online learning in stackelberg games with an
omniscient follower. In International Conference on Machine Learning, pages 42304–42316.PMLR, 2023.
Han Zhong, Zhuoran Yang, Zhaoran Wang, and Michael I Jordan. Can reinforcement learning find
stackelberg-nash equilibria in general-sum markov games with myopic followers? arXiv preprint
arXiv:2112.13521, 2021.
13A Basics about Congestion Games
Lemma 4. If strategy x is an ǫ-NE in a congestion game, then x is an ǫ-minimizer of the corresponding
potential function Φ().
·
Proof. Let x∗ =argmin Φ(x) and y =φ(x). First, we show that
x∈X
yf
Φ(x)= c (u)du
i,a i,a f
∇ ∇
f
Z0
X
yf
= c (u)du
i,a f
∇
f∈aZ0
X
= c (y ) y
f f i,a f
∇
f∈a
X
= c f(y f) i,a x i′,a′
∇
f∈a i′,a′:f∈a′
X X
= c (y ).
f f
f∈a
X
Then we have
Φ(x) Φ(x∗) x x∗, Φ(x) (Convexity)
− ≤h − ∇ i
x x∗, Φ(x)
≤ h i − i ∇i i
iX∈[m]
x c (y ) minw c (y )
i,a f f i f f
≤  −a∈Ai 
iX∈[m] a X∈Ai Xf∈a Xf∈a
 
x ǫ
i,a
≤
iX∈[m]a X∈Ai
= w ǫ
i
iX∈[m]
=ǫ.
Lemma 1. Under Assumption 1, Φrepa is convex. If y∗ =argmin Φrepa(y), then for any x φ−1(y∗), x is
y ∈
a Nash equilibrium.
Proof. For y1,y2 , we have
∈Y
y1+y2 y f1 y f2
yf1+ 2yf2
Φrepa(y1)+Φrepa(y2) 2Φrepa( )= c (u)du+ c (u)du 2 c (u)du .
f f f
− 2  − 
f Z0 Z0 Z0
X
 
y1 y2
yf1+yf2
Now we show that f c (u)du+ f c (u)du 2 2 c (u)du is nonnegative for all f . W.l.o.g., we
0 f 0 f − 0 f ∈F
assume y1 y2 and we have
f ≤ f R R R
y1 y2
yf1+yf2
y2
yf1+yf2
f f 2 f 2
c (u)du+ c (u)du 2 c (u)du= c (u)du c (u)du
Z0 f Z0 f − Z0 f Zyf1+ 2yf2 f − Zy f1 f
=
yf1+ 2yf2
c (u+
y f2 −y f1
) c (u) du
f f
Zy f1 " 2 − #
140,
≥
where the last step is from Assumption 1 (monotonicity). As a result, Φrepa is convex.
Let y∗ = argmin Φrepa(y) and x φ−1(y∗). If there exists x′ such that Φ(x′) < Φ(x), then we
y ∈ ∈ X
haveΦrepa(φ(x′))<Φrepa(y∗), whichcontradicts the definition ofy∗. As a result, x is the minimizer of Φ(),
·
which means x is a Nash equilibrium.
Lemma 5. The Nash load under tax τ: y(τ) = argmin Φ(y;τ) is not continuous w.r.t. τ. In addition,
y∈Y
the social welfare Ψ(y(τ)) is not convex w.r.t. τ.
Proof. For the first part, we construct a congestion game with two facilities f ,f , one commodity with
1 2
actionset f ,f ,andconstantcostc =1,c =1 ǫ withǫ>0. Thenfor taxτ =0,we havey(τ)=[0,1].
1 2 1 2
{ } −
For constant tax τ =0,τ =2ǫ, we have y(τ)=[1,0]. As ǫ can be arbitrarily small, y(τ) is not continuous
1 2
w.r.t. τ.
Forthesecondpart,weconstructacongestiongamewithtwofacilitiesf ,f ,onecommoditywithaction
1 2
set f ,f , and cost function c = 1,c (u) = √u for u [0,1]. We apply constant tax τ : τ = t,τ = 0
1 2 1 2 1 2
{ } ∈
for t [ 1,0]. The Nash equilibrium under tax τ is y(τ) = [1 (1+t)2,(1+t)2]. Then the social cost is
∈ − −
Ψ(y(τ))=1 t(1+t)2, which is not convex on [ 1,0].
− −
B Missing Proofs in Section 5
Lemma 2. If the subgradient of the cost function c is lower bounded by ǫ > 0 for all f , then the
f
∈ F
potential function Φrepa(y) is ǫ-strongly convex. However, Φ(x) is not necessarily strongly convex.
Proof. First, by the definition of the potential function Φ, it is easy to show that Φ(y)=[c (y )] . For
f f f∈F
∇
y1,y2 , we have
∈Y
( Φ(y1) Φ(y2))⊤(y1 y2)= (c (y1) c (y2))(y1 y2) ǫ(y1 y2)2 =ǫ y1 y2 2 ,
∇ −∇ − f f − f f f − f ≥ f − f − 2
f∈F f∈F
X X (cid:13) (cid:13)
(cid:13) (cid:13)
which implies Φ() is a ǫ-strongly convex function.
·
Forthesecondargument,weonlyneedtoconstructacongestiongamesuchthatthereexiststwostrategy
x1,x2 such that for φ(tx1+(1 t)x2) is a constant for t [0,1], which implies the potential function
∈ X − ∈
Φ(tx1+(1 t)x2) = Φrepa(φ(tx1 +(1 t)x2)) is a constant w.r.t. t. However, a strongly convex function
− −
cannot be a constant on a line, which implies Φ is not strongly convex.
We construct a congestion game with three facilities f ,f ,f , three actions a = f ,a = f ,a =
1 2 3 1 1 2 2 3
{ } { }
f and three commodities with action set a ,a , a ,a , a ,a . Strategy x1 : x1 = [1,0,0],x1 =
{ 3 } { 1 2 } { 2 3 } { 3 1 } 1 2
[0,1,0],x1 = [0,0,1] and x2 : x2 = [0,1,0],x2 = [0,0,1],x2 = [1,0,0]. Then tx1 +(1 t)x2 is a feasible
3 1 2 3 −
strategy and we have φ(tx1+(1 t)x2)=[1,1,1] for all t [0,1].
− ∈
Lemma 3. If two taxes τ and τ˙ only differ in facility f and the Nash loads y and y˙ are different, then
y =y˙ .
f f
6
Proof. For simplicity, we consider the equivalent tax-free case that we have two costs c,c˙ with subgradient
lower bounded by ǫ and they only differ in facility f˙. The potential functions are
Yf Yf
Φ(Y)= c (u)du,Φ˙(Y)= c˙ (u)du.
f f
f Z0 f Z0
X X
By Lemma 2, Φ andΦ˙ arestronglyconvexandthus the Nashequilibriumloady andy˙ areunique. Suppose
y =y˙ . Consider any Y such that Y =y , we have
f˙ f˙
∈Y
f˙ f˙
Φ˙(Y) Φ˙(y)=
Yf
c˙ (u)du=
Yf
c˙ (u)du+
Y f˙
c˙ (u)du=
Yf
c (u)du=Φ(Y) Φ(y) 0.
−
f f f˙ f
− ≥
Xf Zyf fX6=f˙Zyf Zy f˙ fX6=f˙Zyf
As a result, we have Φ˙(y) Φ˙(y˙). By the optimality of y˙, we have y = y˙. By contradiction, if y = y˙, we
≤ 6
have y =y˙ .
f˙ f˙
15Lemma 6. If u u ∆, then for any u u ∆, we have
1 2 3 1
| − |≤ | − |≤
c (u ) c (u )
f 1 − f 2 c′(u ) ǫ.
u u − f 3 ≤
(cid:12) 1 − 2 (cid:12)
(cid:12) (cid:12)
Proof. Thisis adirectcorollaryofthe(cid:12)β-smoothness. Bymeanv(cid:12)aluetheorem,wehave cf(u1)−cf(u2) =c′(u)
for some u [u ,u ]. As u u
u(cid:12)
u + u u 2∆
(cid:12)
ǫ , we have
u1−u2 f
∈ 1 2 | − 3 |≤| − 1 | | 1 − 3 |≤ ≤ 2β
c (u ) c (u )
f 1 − f 2 c′(u ) ǫ.
u u − f 3 ≤
(cid:12) 1 − 2 (cid:12)
(cid:12) (cid:12)
(cid:12) (cid:12)
(cid:12) (cid:12)
Lemma 7. For round t and facility f, if u t, then we have τt(u) τ∗(u) 2ǫ.
∈Kf f − f ≤
(cid:12) (cid:12)
Proof. By the algorithm design, for each u ∈Kft, τ ft(u) will not (cid:12) (cid:12)change after u(cid:12) (cid:12)is added to Kf. We will use
induction on t to prove τt(u) τ (u) ǫ for u t. At round t = 1, 1 = 0 and τ1(0) = τ∗(0) = 0
f − f ≤ ∈ Kf Kf { } f f
holds. (cid:12) (cid:12)
Suppose at round t, w(cid:12) (cid:12)be have t+1 =(cid:12) (cid:12) t u with u [yt ]+,[yt ]− t , and t+b1 = t for f =ft.
Kft Kft { } ∈{ ft L ft L}\Kft Kf Kf 6
e e e e e
By the induction hypothesis, we only need toSprove τt+1(u) τ∗ (u) 2ǫ. Recall that
ft − ft ≤ e
e e
(cid:12) (cid:12)
ct c˙t (cid:12) (cid:12)
τt+1(u)=clip u f et − f et ,τ(cid:12)b t ([yt ]− ),τt ([(cid:12) yt ]+ ) .
f et · y ft
t
−y˙ ft
t
f et f et Kt fet f et f et Kt fetS{1}
(cid:0) e e (cid:1)
Then we have the followb ing three cases. For simplicib ty we replaceb ft with f.
(1) τt+1(u)=u
ct f−c˙t
f. By Lemma 11 and Lemma 6, we have
f · y ft−y˙ ft e
ct c˙t
b τt+1(u) τ∗(u) = u f − f uc′(u) ǫ.
(cid:12)
f − f
(cid:12)
(cid:12)
(cid:12)
y ft −y˙ ft − f (cid:12) (cid:12)≤
(cid:12) (cid:12) (cid:12) (cid:12)
(2) τt+1(u)=τt([yt]− ) and(cid:12)b u ct f−c˙t f τt([(cid:12) yt]−(cid:12) (cid:12) ). Then we have(cid:12) (cid:12)
f f f Kt f · y ft−y˙ ft ≤ f f Kt f
τt+1(u)=τt([yt]− ) τ∗([yt]− )+ǫ τ∗(u)+ǫ,
b b f f fbKt f ≤ f f Kt f ≤ f
where the first inequality is from the induction hypothesis as [yt]− t and the second inequality is from
b b f Kt
f
∈Kf
Assumption 2. In addition, we have
ct c˙t
τt+1(u) u f − f uc′(u) ǫ=τ∗(u) ǫ.
f ≥ · yt y˙t ≥ f − f −
f − f
(3) τt+1(u)=τt([yt]+ b ) and u ct f−c˙t f τt([yt]+ ). Then we have
f f f Kt fS{1} · y ft−y˙ ft ≥ f f Kt fS{1}
ct c˙t
b b τt+1(u) u f − fb uc′(u)+ǫ τ∗(u)+ǫ.
f ≤ yt y˙t ≤ f ≤ f
f − f
If [yt]+ t, then we habve
f Kt fS{1} ∈Kf
τt(u)=τt([yt]+ ) τ∗([yt]+ ) ǫ τ∗(u) ǫ.
f f f Kt fS{1} ≥ f f Kt fS{1} − ≥ f −
If [yt]+ =1 and 1 / t, we still have
f Kt fS{1} ∈b Kf b
τt(u)=β uc′(u)=τ∗(u).
f ≥ f f
For each of these three cases, the induction holds.
b
As τt(u)=τt(u)+ǫu for all f and u [0,1], we have τt(u) τ∗(u) 2ǫ.
f f ∈F ∈ f − f ≤
(cid:12) (cid:12)
(cid:12) (cid:12)
b (cid:12) (cid:12)
16Lemma 8. For round t, if facility f is known, then we have τt(yt) τ∗(yt) 3ǫ.
f f − f f ≤
(cid:12) (cid:12)
Proof. If yt t, we can directly apply Lemma 7. Otherwise(cid:12), we set u =[y(cid:12)t]− and u =[yt]+. Then we
f ∈Kf (cid:12) 1 (cid:12)f L 2 f L
have u < yt < u and u ,u t. There exists λ [0,1],λ +λ = 1 such that yt = λ u +λ u . By
1 f 2 1 2 ∈ Kf 1 ∈ 1 2 f 1 1 2 2
Lemma 6, we have τt(u ) τ∗(u ) 2ǫ for i 1,2 . Then we have
f i − f i ≤ ∈{ }
(cid:12) (cid:12)
τ ft(y ft) −τ f(y ft) =(cid:12) (cid:12)λ 1τ ft(u 1)+λ 2τ(cid:12) (cid:12)ft(u 2) −(λ 1u 1+λ 2u 2)c′ f(u)
(cid:12)
(cid:12)
(cid:12) (cid:12)≤(cid:12) (cid:12)λ 1τ ft(u 1) −λ 1u 1c′ f(u) + λ 2τ ft(u 2) −λ 2u 2c(cid:12) (cid:12)′ f(u)
≤λ(cid:12) (cid:12)1 τ ft(u 1) −τ f∗(u 1) +(cid:12) (cid:12)λ 1u(cid:12) (cid:12)1 c′ f(u 1) −c′ f(u) +λ 2(cid:12)
(cid:12)
τ ft(u 2) −τ f∗(u 2) +λ 2u 2 c′ f(u 2) −c′ f(u)
2λ 1(cid:12)ǫ+λ 1ǫ+2λ 2ǫ+(cid:12) λ 2ǫ (cid:12) ((cid:12)Lemma(cid:12) 6, β-smoothnes(cid:12)s and u(cid:12) u i ǫ/β.) (cid:12)
≤ (cid:12) (cid:12) (cid:12) (cid:12) (cid:12) (cid:12) | (cid:12)− |≤ (cid:12)
3ǫ.
≤
Lemma 9. If Algorithm 2 return False at round t, then for any τ RF such that τ =τt(y ) for f ¯t
∈ f f f ∈F\F
andτ [lt,rt]for f ¯t, wehave Gap (xt,ct+τ) 0forall i [m]. Inaddition, xt is aNashequilibrium
f ∈ f f ∈F i ≥ ∈
for tax τ. e e
e e
Proof. For simplicity, we will omit t when there is no confusion. Algorithm 2 return False if and only if for
e
all i ∈[m] and tax τ¯ i :τ¯ F¯
i
=r F¯ i,τ¯ F¯ i′ =l F¯ i′,τ¯ F\(F¯ iSF¯ i′) =τ F\(F¯ iSF¯ i′), we have
Gap (x,c+τ¯)= min (c +τ¯ ) max (c +τ¯ ) 0.
i a:xi,a=0 f f −a:xi,a6=0 f f ≥
f:f∈a f:f∈a
X X
By the definition of F¯, for any f F¯ and a : x = 0, we have f a. Similarly, for any f F¯′ and
i ∈ i i,a 6 ∈ ∈ i
a:x =0, we have f / a. Thus for any a:x =0, we have
i,a i,a
6 ∈ 6
(c +τ¯ ) (c +τ )= (r τ ) 0.
f f f f f f
− − ≥
f X:f∈a f X:f∈a fX∈F¯
i
e e
For any a:x =0, we have
i,a
(c +τ¯ ) (c +τ )= (l τ ) 0.
f f f f f f
− − ≤
f X:f∈a f X:f∈a f∈XF¯ i′Ta
e e
As a result, we have
Gap (xt,ct+τ)= min (c +τ ) max (c +τ ) min (c +τ¯ ) max (c +τ¯ ) 0.
i a:xi,a=0 f f −a:xi,a6=0 f f ≥a:xi,a=0 f f −a:xi,a6=0 f f ≥
f:f∈a f:f∈a f:f∈a f:f∈a
X X X X
e e e
ToprovethatxtisNashequilibriumfortaxτ,weonlyneedtoshowthatforin-supportactionsa:xt =0,
i,a 6
the action costs (ct +τ ) are the same. This can be derived by
f:f∈a f f
e
P
(cet
f
+τ ft)
−
(ct
f
+τ f)= (τ ft −τ f), ∀a:xt
i,a
6=0,
f X:f∈a f X:f∈a fX∈F¯
i
e e
whichisindependentofa. Asxt isNashequilibriumfortaxτt, (ct +τt)isalsoindependentofa.
f:f∈a f f
Lemma 10. If Algorithm 2 return False at round t, then tax τPt is an 6Fǫ-optimal tax.
Proof. For knownfacility f, by Lemma 8, we have τ∗(yt) τt(yt) 3ǫ. By Lemma 7, for any u t, we
f f − f f ≤ ∈Kf
have τ f∗(u) −τ ft(u) ≤2ǫ. Thus for unknown facili(cid:12) (cid:12) (cid:12)ty f, we have (cid:12) (cid:12)
(cid:12)
(cid:12) (cid:12)
(cid:12) (cid:12) l ft =(cid:12) (cid:12) τ ft([y ft]− Kt f)+ǫ ·(y ft −[y ft]− Kt f) ≤τ f∗([y ft]− Kt f)+2ǫ+ǫ=τ f∗([y ft]− Kt f)+3ǫ,
17rt =τt([yt]+ )+ǫ (yt [yt]+ ) τ∗([yt]+ ) 2ǫ ǫ=τ∗([yt]+ ) 3ǫ,
f f f Kt fS{1} · f − f Kt fS{1} ≥ f f Kt fS{1} − − f f Kt fS{1} −
As τ∗ is nondecreasing (Assumption 2), we have
f
lt 3ǫ τ∗([yt]− ) τ∗(yt) τ∗([yt]+ ) rt +3ǫ.
f − ≤ f f Kt f ≤ f f ≤ f f Kt fS{1} ≤ f
Thus there exists tax τt such that τt(yt) satisfies the condition of Lemma 9 and τ∗(yt) τt(yt) 3ǫ for
f f f f − f f ≤
all f . xt is the Nash equilibrium for tax τt, we have (cid:12) (cid:12)
∈F (cid:12) (cid:12)
e e (cid:12) e (cid:12)
i [m],a,a′ , c (yt)+τt(yt) c (yt)+τt(yt), if xt >0.
∀ ∈ ∈Ai f fe f f ≤ f f f f i,a
f∈a f∈a′
X X
e e
Thus we have
i [m],a,a′ , c (yt)+τ∗(yt) c (yt)+τ∗(yt)+6Fǫ, if xt >0.
∀ ∈ ∈Ai f f f f ≤ f f f f i,a
f∈a f∈a′
X X
By Lemma 4, Ψ(yt) min Ψ(y) 6Fǫ.
f − y∈Y ≤
Lemma 11. If Algorithm 2 output τt,ft,signt at round t, then we have
e e 0< y ft et −y˙ ft et ≤∆.
(cid:12) (cid:12)
(cid:12) (cid:12)
Proof. First, we prove yt y˙t >0. We consi(cid:12)der the fo(cid:12)llowing two cases.
ft − ft
e e
(1) Algorithm 2 ret(cid:12)urn at L(cid:12)ine 5. As we have 0 < y (ft) < w , there exists a,a′ such that
(cid:12) (cid:12) i i ∈ Ai
x i,a >0,x i,a′ > 0 and f(cid:12)t ∈a,ft(cid:12) ∈/ a′. Suppose y ft t =y˙ ft t. Then by Lemma 3, we have yt = y˙t as τt and τ˙t
e e e
only differ in facility ft. As a result, xt is Nash equilibrium for tax τ˙t. However,xt is the Nash equilibrium
e e
for tax τt implies
f
e c (yt)+τt(yt)= c (yt)+τt(yt).
f f f f f f f f
f∈a f∈a′
X X
As τt and τ˙t only differ in facility ft and ft a,ft / a′, we have
∈ ∈
ec f(y ft)e+τ˙ ft(y fet) 6= c f(y ft)+τ˙ ft(y ft),
f∈a f∈a′
X X
which means xt is not the Nash equilibrium for tax τ˙. By contradiction, we have yt =y˙t .
ft ft
e e
(2) Algorithm 2 return τu,f,sign at Line 23 or Line 31. As there exists j [m] such that Gap (x,c+
∈ j
τu+sign·ǫ)<0, x is not a Nash equilibrium under tax τ˙t. Let τ¨t :τ¨t =τt (yt,τu) for f . Then τ˙t and
f f f f ∈F
τ¨t only differs in f and x isethee Nash equilibrium under tax τ¨t. By applying Lemma 3 with τ˙t and τ¨u, we
S
heave yt =y˙t . e
ft ft
e e e
Second,weprove yt y˙t ∆. (1)Algorithm2returnatLine 5. Supposewehave yt y˙t >∆. By
ft − ft ≤ f − f
e e
the tax design, the (s(cid:12)ub)gradie(cid:12)nt of the tax (τt)′(u) ǫ for u [0,1]. As a result, Φ(y,c(cid:12)+τt) is(cid:12)ǫ-strongly
(cid:12) (cid:12) f ≥ ∈ (cid:12) (cid:12)
convex by Lemma 2.(cid:12)As yt =a(cid:12)rgmin Φ(y;c+τt), we have (cid:12) (cid:12)
y∈Y
Φ(y˙t;c+τt) Φ(yt;c+τt)>ǫ∆2/2.
−
However, we have Φ(y;c+τt) Φ(y;c+τ˙t) δ for all y . Thus we have
| − |≤ ∈Y
Φ(y˙t;c+τ˙t) δ Φ(yt;c+τ˙t) δ/2 Φ(yt;c+τt) Φ(y˙t;c+τt) Φ(y˙t;c+τ˙t)+δ.
− ≤ − ≤ ≤ ≤
Comparing to the inequality above, we have 2δ > ǫ∆2/2, which is incorrect by the definition of δ. By
contradiction, we have yt y˙t ∆.
f − f ≤
(cid:12) (cid:12)
(cid:12) (cid:12)
(cid:12) (cid:12)
18(2) Algorithm 2 return τu,f,sign at Line 23 or Line 31. Let τ¨t :τ¨t =τt (yt,τu) for f . Then x is
f f f f ∈F
the Nash equilibrium under tax τ¨t. Let τ¨: τ¨t = τt (yt,τ ) for all f . By the definition of τ¨t and the
f f f f ∈ F S
feasible rangeτ
f
∈[l f,r f],etheesubgradientof τ¨ ft is lo Swer bounded by ǫ. As a resulte, Φ( ·;c+τ¨t) is ǫ-strongly
convex on [0,1]. We can prove yt y˙t ∆ by followingethe analysis for case (1) and replacing τt with τ¨t.
f − f ≤
e
(cid:12) (cid:12)
(cid:12) (cid:12)
(cid:12) (cid:12)
Proposition 1. If Algorithm 2 return False at round t, then tax τt is an 6ǫF-optimal tax. If Algorithm 2
output τt,ft,signt at round t, then we have
e e 0< yt y˙t ∆.
f et − f et ≤
(cid:12) (cid:12)
Proof. This is directly from Lemma 10 and Lem(cid:12)ma 11. (cid:12)
(cid:12) (cid:12)
Lemma 12. Algorithm 1 return False in at most KF rounds.
Proof. By Lemma 11 and the update rule (1), if Algorithm 2 return τt,f,sign at round t, then we will have
one more known point, i.e., t+1 = t +1. As t for all f and = K +1, we
f∈FKf f∈FKf Kf ⊆ L ∈ F |L|
proved the lemma.
e
P P
Theorem 1. UnderAssumption 1and Assumption2, Algorithm 1will outputan 6ǫF tax within T 2Fβ/ǫ
≤
rounds. In addition, each round has at most two tax realizations.
Proof. The proof is directly from Proposition 1 and Lemma 12.
C Missing Proofs in Section 6
Proposition 2. Finding x φ−1(y) can be formulated as the following linear program.
∈
min 1
x∈RA
s.t. y = x a
i,ai i
iX∈[m]a Xi∈Ai
w = x , i [m]
i i,ai
∀ ∈
a Xi∈Ai
x 0, i [m],a
i,ai
≥ ∀ ∈
i ∈Ai
Proof. The second and third constraints guarantees x is a feasible strategy. The first constraint indicates
y =φ(x). As a result, any feasible point of the program is a solution of φ−1(y).
19