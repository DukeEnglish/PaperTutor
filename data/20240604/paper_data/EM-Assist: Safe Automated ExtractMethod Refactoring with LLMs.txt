EM-Assist: Safe Automated ExtractMethod Refactoring with LLMs
DorinPomian*,AbhiramBellur*,MalindaDilhara
ZarinaKurbatova,EgorBogomolov,AndreySokolov,TimofeyBryksin,DannyDig
UniversityofColoradoBoulder,JetBrainsResearch
USA,Cyprus,theNetherlands,Serbia
{dorin.pomian,abhiram.bellur,malinda.malwala,danny.dig}@colorado.edu
{zarina.kurbatova,egor.bogomolov,andrey.sokolov,timofey.bryksin}@jetbrains.com
ABSTRACT 1 INTRODUCTION
Excessivelylongmethods,loadedwithmultipleresponsibilities, Longmethodsencapsulatemultipleresponsibilitiesandarechal-
arechallengingtounderstand,debug,reuse,andmaintain.The lengingtocomprehend,debug,reuse,andevolve[2,15,31].They
solutionliesinthewidelyrecognizedExtractMethodrefactoring. oftenleadtocodethatisnotonlydifficulttounderstandbutalso
Whiletheapplicationofthisrefactoringissupportedinmodern error-prone,therebybecomingasignificantsourceoftechnicaldebt
IDEs,recommendingwhichcodefragmentstoextracthasbeenthe insoftwareprojects[15].Toalleviatethis,developersfrequentlyuse
topicofmanyresearchtools.However,theyoftenstruggletorepli- theExtractMethodrefactoring,whichdividesmethodsintosmaller,
catereal-worlddeveloperpractices,resultinginrecommendations moremanageableunits.Thisrefactoringconsistentlyranksamong
thatdonotalignwithwhatahumandeveloperwoulddoinreal thetopfivemostcommonlyperformedinpractice[22,23,32].
life.Toaddressthisissue,weintroduceEM-Assist,anIntelliJIDEA TheExtractMethodrefactoringprocesscomprisestwophases:
pluginthatusesLLMstogeneraterefactoringsuggestionsandsub- (i)Selectingstatementsforextractionfromtheoriginalmethod,
sequentlyvalidates,enhances,andranksthem.Finally,EM-Assist involvingameticulousexaminationofcodesegmentsthatencap-
usestheIntelliJIDEtoapplytheuser-selectedrecommendation. sulatespecificresponsibilitiesorlogic,withthegoalofisolating
Inourextensiveevaluationof1,752real-worldrefactoringsthat themintoadistinctmethod,(ii)Applyingtherefactoring,involving
actuallytookplaceinopen-sourceprojects,EM-Assist’srecallrate movingtheselectedstatementsintoabrandnewmethod,passing
was53.4%amongitstop-5recommendations,comparedto39.4% necessaryvariablesasparameters,andinvokingthenewmethod
forthepreviousbest-in-classtoolthatreliessolelyonstaticanaly- fromtheoriginalcontext.Whiletheapplicationparthasbeena
sis.Moreover,weconductedausabilitysurveywith18industrial staplefeatureofallmodernIDEs,theyleaveituptodevelopersto
developersand94.4%gaveapositiverating. choosewhichstatementstoextract.Theresearchcommunityhas
The source code, datasets, and distribution of the plugin are developeddiversetechniquestosuggeststatementsforextraction.
availableonGitHub[18].ItisalsoavailabletoinstallonJetBrains Someresearchtoolsusestaticanalysisinconjunctionwithsoftware
Marketplace[17].AdemonvideoandscreencastisonYouTube[16]. qualitymetrics[6,21,30,31,34],suchasstatementcohesion[31],
whileothersemploymachinelearning-basedclassifiers[7,33]
CCSCONCEPTS Whiletheexistingtoolsadheretosoftwarequalitymetricsbased
onsoftwareengineeringprinciples,theyoftengeneratesugges-
•Softwareanditsengineering→Softwaremaintenancetools;
tionsthatdonotalignwithreal-worldExtractMethodinstances.
•Computingmethodologies→Artificialintelligence.
Weattributethistothefactthatrefactoringrequiresbothtechni-
calrigorandsubjectivediscernment.Inotherwords,developers
KEYWORDS
relyontheirunderstandingofsoftwareengineeringprinciplesand
Refactoring,LLMs,Codesmells,LongMethods,Java,Kotlin theirsubjectiveinterpretationofcodecontextwhendecidingwhat
makesagoodmethod.Whileexistingtechniquesexcelintheformer,
ACMReferenceFormat: theyoftenfallshortinthelatter.Thisgapmayexplaindevelopers’
DorinPomian*,AbhiramBellur*,MalindaDilharaandZarinaKurbatova, reluctancetouseautomatedrefactoringsupport[29].
EgorBogomolov,AndreySokolov,TimofeyBryksin,DannyDig.2024.EM-
TobridgethegapandgenerateExtractMethodsuggestionsthat
Assist:SafeAutomatedExtractMethodRefactoringwithLLMs.InCompan-
developersarelikelytoaccept,weutilizeLargeLanguageModels
ionProceedingsofthe32ndACMInternationalConferenceontheFoundations
(LLMs).Theyaretrainedonextensivecoderepositoriescontaining
ofSoftwareEngineering(FSECompanion’24),July15–19,2024,PortodeGal-
millionsofmethodsauthoredbyactualdevelopers.Thus,theyare
inhas,Brazil.ACM,NewYork,NY,USA,5pages.https://doi.org/10.1145/
3663529.3663803 morelikelytomimichumanbehaviorandreplicatehowdevelopers
createmethods,makingthemlikelytoproposerefactoringsthat
developerswouldembrace[10,25].Ourformativestudy,conducted
Permissiontomakedigitalorhardcopiesofpartorallofthisworkforpersonalor onanextendedcorpussizeof1,752ExtractMethodrealrefactorings
classroomuseisgrantedwithoutfeeprovidedthatcopiesarenotmadeordistributed from open-source systems, demonstrated that LLMs are highly
forprofitorcommercialadvantageandthatcopiesbearthisnoticeandthefullcitation
effectiveinprovidingexpertsuggestions,generating27suggestions
onthefirstpage.Copyrightsforthird-partycomponentsofthisworkmustbehonored.
Forallotheruses,contacttheowner/author(s). permethod.Thishighlightsthesubstantialpotentialofintegrating
FSECompanion’24,July15–19,2024,PortodeGalinhas,Brazil LLMsintothedomainofcoderefactoring.Nevertheless,LLMoutput
©2024Copyrightheldbytheowner/author(s).
ACMISBN979-8-4007-0658-5/24/07
https://doi.org/10.1145/3663529.3663803 *Theseauthorscontributedequallytothiswork.
4202
yaM
13
]ES.sc[
1v15502.5042:viXraFSECompanion’24,July15–19,2024,PortodeGalinhas,Brazil Pomianetal.
Extracted Method Call Site
1 3
Trigger: Light Bulb -> Extract Method
Suggestions
Extract Method Candidates
Pop-up Window
Extract Method
Candidates List
H Toig Bh elig Eh xte trd a cC teo dde Fragment 2 Extracted Method Extracted Method
Preview
Figure1:WorkflowforusingEM-AssistwithinIntelliJIDEA:1)theusertriggerstheplugintogeneratesuggestions,2)the
plugindisplaysthreerefactoringoptionsinapopupwindow,3)theuserselectsoneoftheoptionsandinspectsthefinalcode.
S sue gle gc et s a ti on Rank suggestions8 JetBrains/intellij-community.TheusertriggersEM-Assistbychoos-
ingthe“Extractmethodsuggestions”optionfromtheintention
select
apply actions(yellowlightbulb)1 forthemethod(1 inFigure1).Ina
method to refactor 1 9 V Ea nl hid a, n U cs ee df u El x ta rn ad ct 7 popupwindow,EM-Assistshowsthreedistinctsuggestionsforex-
P Er xo trm acp tt ? M ethod(s2 ) I In Dte Ell AiJ method suggestions tractingcodefragments,accompaniedbyasuggestedmethodname
suggestions? LLM (GPT 3.5) Is valid?5 Is Useful?6 (2 inFigure1).Inthisexample,thepluginsuggeststhreeextract
methods:writeInterfaces(),writeFields(),andwriteMethods(),and
E sux gtr ga ec st tm ioe nt shod 3 Enhancer 4 itindicatesthesizeofthecodefragmentforeachsuggestion.To
makeitconvenientfortheusertoassesseachsuggestion,EM-Assist
Figure2:Theworkflowofgeneratingrefactoringsuggestions helpstheuserpreviewthesignatureoftheproposednewmethod
(includingmethodparameters)directlywithinthepopupwindow.
cannotbedirectlyadopted.Ourfindingsindicatethat76.3%ofLLM Additionally,foreachsuggestion,EM-Assist highlightsthecode
suggestionsarehallucinationsoftwokinds.First,57.4%oftheLLM fragmentslatedforextraction.Forexample,theblue-coloredstate-
suggestionsareinvalid(e.g.,syntacticallyincorrect),potentially mentsinFigure1(line85-90of 1)representtheproposedstate-
causingcompilationerrors.Second,18.9%ofthesuggestionsare mentsforextractionwithinthewriteMethods()suggestion.Likewise,
notuseful(e.g.,suggesttoextracttheentiremethodbody). thepluginaffordsflexibilitytousers,allowingthemtochoosethe
Toadvancethefieldofrefactoring,weintroduceEM-Assist,the mostappropriateextractmethodsuggestionandseamlesslyapply
firstautomatedrefactoringtooltouseLLMs.EM-AssistisanIntelliJ ittothewriteJvmClass()method.Todoso,theuserclicksthe“Ex-
IDEAplugin.ItemploysLLMstogeneraterefactoringsuggestions, tract”buttonconvenientlylocatedwithinthepopupwindow.In
thenfiltersthosethatareinvalidandnon-useful,andfurtheren- thisexample,theuserchosetoapplythewriteMethodssuggestion
hancesvalidsuggestionsusingprogramslicingtechniques.Itthen tothecode,andtheresultingcodeisshownas 3 inFigure1.
ranksthemtoofferhigh-qualityoptionstodevelopers.Moreover,
EM-Assistbridgesthegapbetweensuggestingandapplyingrefac- 2.2 Workflow
toringsbyencapsulatingselectedsuggestionsintorefactoringcom-
Inthissection,wepresenttheinternalworkflowthatEM-Assistuses
mandsandexecutingthemwithintheIDE.Thisprocessleverages
toautomaticallysuggestandperformExtractMethod.Asshownin
theIDEtoensurethesafeexecutionofrefactorings,providinga
Figure2,thedeveloperinvokesthepluginbyclickingthe“Extract
seamlesstransitionfromsuggestiontoexecution.
Method”optionintheintentionactionsforaparticularmethod
Insection3.1,wefirstquantitativelyevaluatetheEM-Assistin
theyintendtoapplytheextractmethodrefactoringto(1 inFig-
termsofitseffectivenesscomparedtobaselinetools.Theninsec-
ure2).ThenEM-AssistcreatesaLLMfew-shotlearningprompt(2
tion3.2wequalitativelyevaluateEM-Assist’susability.Inevalu-
inFigure2)thatcontainsthemethoddeclaration,anditinvokesthe
ations, we observed that EM-Assist really shines over previous
LLMprogrammaticallytogeneraterefactoringsuggestions(3 in
approacheswhenreplicatingreal-worldrefactoringsincontem-
Figure2).Totamethenon-determinismofLLMs,EM-Assistrepeats
porarycodebases.Whenreplicating1,752actualExtractMethod
thesamepromptrequest,usingoptimalvaluesthatwedetermined
refactoringsthattookplaceinopen-sourceprojects,EM-Assist’sre-
empirically(i.e.,between5-10iterations).ThenEM-Assistenhances
callratewas53.4%,comparedto39.4%forthepreviousbest-in-class
theLLMsuggestionsbyadjustingthecodefragments,usingpro-
toolthatreliessolelyonstaticanalysis(JExtract).Forourqualita-
gram slicing (4 in Figure 2). However, not all these enhanced
tiveevaluation(section3.2),wesurveyed18industrialdevelopers,
suggestionsaresafetoapply,assomemayresultinnon-compilable
confirmingthetool’susabilityatanapprovalrateof94.4%.
anderroneouscode.Infact,ouranalysisconductedonadataset
of1,752methods,revealsthat76.3%ofthesuggestionsgenerated
2 EM-ASSIST
bytheLLMareinvalid,potentiallyresultinginnon-compilable
2.1 ExampleUsageofEM-Assist code.Tofilterinvalidsuggestions,EM-AssistemploystheIntelliJ
Figure1showsanexampleofusingEM-Assisttosuggestandexe-
cuterefactoringsonthemethodwriteJvmClass()withintheproject 1https://www.jetbrains.com/help/idea/intention-actions.htmlEM-Assist:SafeAutomatedExtractMethodRefactoringwithLLMs FSECompanion’24,July15–19,2024,PortodeGalinhas,Brazil
IDEAAPIsfordeterminingwhetheracodefragmentmeetsthe Nielsen’susabilityguidelines[24],thisresponsetimeisacceptable
refactoringpreconditionsforextractmethod(5 inFigure2). forhuman-operatedsoftwaretools,ensuringthattheuser’sflowof
Somevalidsuggestionsarenotpracticalforreal-worldimplemen- thoughtremainsuninterrupted.Moreover,whendeveloperswork
tation(e.g.,thosethatcontainthewholemethodbody).Therefore, onproprietarycode,oracompanypolicyprohibitsusingGenerative
EM-Assistfiltersunusefulsuggestions(6 inFigure2).Intheend, AIsolutions,thiscurrentlylimitstheuseofEM-Assist.Emerging
EM-Assistgeneratesnumeroussuggestionsperlongmethod(7 solutionssuchasdeployingLLMserversfullyon-premise(foren-
inFigure2),whichcouldpotentiallyoverwhelmtheuserifallare terprisecustomersorgovernmentorganizations)orusingmedium-
presentedatonce.Toaddressthis,weemployarankingmechanism sizemodelslocally,couldmakeGenerativeAI-basedsolutionseven
(8 inFigure2)thatreliesonthefrequencyofLLMsuggestions. morebroadlyapplicable.Moreover,EM-Assist’sarchitecturemake
Therankingmechanismiscenteredontheideathatifaparticular iteasytoswitchbetweendifferentLLMs.
codefragmentisrepeatedlysuggestedforextractionbytheLLM
duringsubsequenttriggers,itmustrepresentanimportantfunc- 3 EVALUATION
tionalconcernthatissuitabletobeinaseparatemethod.Then,
WeconductedacomprehensiveevaluationofEM-Assist,usinga
EM-Assist presentstherankedsuggestions(top-n,defaultistop-
harnessoftwocomplementaryapproaches.(i)Quantitative(sec-
3)todevelopersthroughouruserinterface,offeringpreviewsof
tion3.1):wecomparedtheeffectivenessofEM-Assistwithtwo
extractedmethodsignaturesandassociatedcodefragments.After
state-of-the-art extract method recommendation tools by repli-
theuserselectstheirpreferredsuggestion,EM-Assistencapsulates
catingalargedatasetof1,752actualextractmethodsperformed
itinarefactoringcommand,seamlesslyinvokingIntelliJIDEAto
byopen-sourcedevelopers.Unlikepreviousstudiesthatuseda
executetherefactoringcorrectly(9 inFigure2).
small,syntheticcorpusofartificially-createdExtractMethods,we
arereplicatingreal-worldrefactoringsfromfamous,contemporary
2.3 Implementation open-sourceprojects.Webelievethisismoreindicativeofatool’s
capabilitiesindealingwiththecomplexitiesofreal-worldrefactor-
EM-AssistisimplementedasanIntelliJIDEApluginandworksas
ings,andthelargescaleofexperimentsguardsagainstover-fitting
anintentionaction.IntelliJPlatformhasasuiteofAPIsforAbstract
atoolforasmallcorpus.(ii)Qualitative(section3.2):weevalu-
SyntaxTree(AST)manipulationandrefactoring.EM-Assistlever-
atedtheusabilityofEM-Assist’sapproachwhenguidingindustrial
agesIntelliJ’sASTmanipulationthroughtheProgramStructure
developerstofollowournovelworkflowforperformingExtract-
Interface(PSI),whichisthelayerintheIntelliJPlatformresponsible
Methodrefactorings.Unlikepreviousstudiesthathaveemployed
forcode,file,andprojectmodel.ExtractMethodrefactoringisap-
largenumberofstudents,webelieveourstudyemploying18full–
pliedthroughIntelliJ’srefactoringframework.Weemployfew-shot
time,experiencedprofessionaldevelopersismoreindicativeofthe
learning[5,26]toformtheLLMprompt.EM-Assistisconfigurable
qualityofthesuggestedrefactorings.
tousevariousLLMs,bydefaultweuseOpenAI’sGPT-3.5-turbo.
ThecommunicationwithLLMisasynchronous,thus,theIntelliJ
3.1 EffectivenessofEM-Assist
codeeditorisnotfrozenandmultiplerequestsaresenttotheLLM
inparallel.NotallsuggestionsprovidedbytheLLMarevalidand To determine EM-Assist’s effectiveness in recommending refac-
readytobeextracted,therefore,weusePSIelementstoadjustthe toringsthatalignwithdeveloperpreferences,wecompareitto
scopeoftheseExtractMethodcandidates.WeutilizeIntelliJ’sEx- previousstate-of-the-artapproachesthatrelysolelyonstaticanal-
tractMethodframeworktofurtherfilteroutthecandidateswhich ysisandsoftwarequalitymetrics.Inourtechnicalreport[25],we
cannotbeextracted.WeenhancedtheExtractMethodframework compareEM-AssisttosixothertoolsthatsuggestExtractMethod
tosupportcustommethodnamessuggestedbytheLLM. andweuseasyntheticcorpususedbyotherresearchers.Wefound
Extensions:EM-AssistcurrentlysupportsJavaandKotlin,but thatJExtract[28]outperformstheprevioustools,thusweuse
itsimplementationoffersanextensibleframeworkforsupporting JExtractasthestrongestcompetitortoEM-Assist.
otherlanguagesaswell.Forexample,tosupportExtractMethod First,weconstructanoracle.Weminedthecompleteversionhis-
inPythoncode,extensionswouldbeneededinsteps 1, 3, 5, toryofprojectsusingRefactoringMiner[32],astate-of-the-art
and 7 (Figure 2), whereas 2, 4, 6, 8, 9 (Figure 2), could toolforrefactoringdetection.Thusweidentified1,752caseswhen
bereused.TosupportotherIDEsthatprovidegoodsupportfor theopen-sourcedevelopersperformedExtractMethodrefactorings.
ExtractMethodrefactoring,steps 5 and 9 (Figure2)wouldneed Wethenreplicatealltheserefactoringsbyrunningthetoolson
change,whereasallremainingstepscouldbereused.Moreover,our theoriginalhostmethods(theversionbeforerefactoringwasap-
preliminaryexperimentswithusingLLMstosuggestotherkinds plied)andcomparethesuggestedrefactoringsagainsttheactually-
ofrefactoringsshowthatLLMsareprolific,butweneedtoemploy performedrefactoringsintheoracle.Theoracleexhibitedadiverse
asimilarapproach:usetheLLMfordeveloper-alignedsuggestions, rangeofmethodinvolvedinrefactoring,withmin/max/mean/me-
butcarryouttherefactoringplanwiththesafetyoftheIDE. dianvaluesof3/1494/30/5LOCforthehostmethod,and2/95/6/3
Limitations:Currently,usingEM-Assistrequiressendingthe LOCforextractmethods.Giventhesizeofhostmethods,therecan
user’shostmethodcodetoOpenAI.Asaresult,theresponsetime bemanywaystogroupcodefragmentsforextraction.
canvary.Ourexperimentsinvolving25,235invocationsofthetool Weexecutedthetwotoolsoneachhostmethodintheoracle.
revealedthat,onaverage,EM-Assist takes2secondstosuggest Wethencomparedtherefactoringsperformedbythesetoolsand
refactorings.ThisincludesthetimetakentoinvoketheLLMand cross-referencedthemwiththeoracletoensurethattheextracted
theadditionalprocessingtimerequiredbythetool.Accordingto codelinesmatchedthoseintheoracle.FollowingbestpracticesFSECompanion’24,July15–19,2024,PortodeGalinhas,Brazil Pomianetal.
establishedinpriorresearch[6,7,14,28,31,33]weevaluatetop-5 Very Unhelpful Somewhat Somewhat Helpful Very helpful
Unhelpful Unhelpful helpful
suggestions generated by the tools, calculating Recall@5 at tol-
1. How do you find the additional workflow provided by the plugin compared to what
erancelevel3%.WeselectedRecallastheperformancemetricas
was already available in IntelliJ IDEA?
thisisthemetricusedbyallprevioustools.Giventhesizeofhost 5.5% 55.5% 38.8%
methods,evenat3%tolerance,itmeansinmanycaseswemust 2. How convenient do you find the plugin's method of presenting refactoring
haveanexactmatchbetweenoneofthetop-5suggestionsandthe suggestions using a pop-up dialog window?
5.5% 16.6% 38.8% 22.2% 16.6%
extractedcodefragmentintheoracle.Wecomputetherecallby
3. How do you find the method names suggested by the plugin compared to the
dividingthetotalnumberofrefactoringsuggestionsthatmatched
method names suggested by IntelliJ IDEA?
theoracletothetotalnumberofextractmethodsintheoracle. 5.5% 27.7% 38.8% 27.7%
EM-Assist has a recall rate of 53.4%, significantly surpassing Figure3:Resultsoftheconductedusabilitysurvey.
itscounterpartswhosebestrecallwas39.4%.Acknowledgingthe
4 RELATEDWORK
probabilisticnatureofEM-Assist’sunderlyingLLM,weconducted
furtherstatisticalanalysisforrobustvalidation.Werepeatedeach Researchersdevelopedtoolstosuggestcodefragmentstoextract.
predictionfromEM-Assist50timesandperformedaone-sample Manyprimarilyrelyonstaticanalysis-basedruleslikeprogram
t-testagainstJExtract,thesecond-bestperformingtool.Thetest slicing[1,20,21],theseparationofconcerns[27],orthesingle
decisivelyrejectedthenullhypothesisassertingthatJExtracthad responsibilityprinciple[6].Whilethesetoolsexcelatadhering
abetterrecallratethanEM-Assist,withap-valueof<10−5. tosoftwarequalityprinciples,theyfaceasignificantlimitation.
Theyarenotabletoadaptsuggestionstodevelopers’subjective
intentions,possiblybecauseoftheirlackofaccesstoreal-world
dataillustratingactualdeveloperrefactoringpractices.
3.2 UsabilityofEM-Assist Asanalternativetorule-basedtechniques,machinelearning-
Wecomplementthepreviousquantitativeevaluationwithasurvey basedclassifiers[7,33]havebeenproposedforrefactoringsugges-
toevaluatedevelopers’perceptionofusingthenovelworkflowof tions.Despitehavingaccesstorelevantdata,theygrapplewith
EM-AssistincomparisontothecurrentworkflowintheIDEs.Wein- practicalchallengessuchasdatascarcity,protractedtrainingperi-
tentionallydesignedthesurveytoallowparticipantstoviewabrief, ods,andresource-intensivetrainingprocedures.Furthermore,these
feature-focuseddemooftheplugin,ratherthanrequiringthemto MLmodelsareoftenspecifictoparticulartasks,necessitatingperi-
installandexecuteit.Previousresearch[8,19]demonstratedthat odicretrainingtomaintaintheireffectiveness[9,11–13].Incontrast
thisapproachisusefulforevaluatingthefundamentalconceptsand totheseexistingtools,EM-AssistleveragesLLMsasapromisingso-
ideasbehindatool,ashigh-fidelityprototypesmightoverwhelm lution.LLMsaregeneral-purposemodelspre-trainedonextensive
surveyparticipantswithexcessiveimplementationdetails. sourcecodeandtext,enablingthemtogeneraterefactoringsugges-
Wesurveyed18qualifiedprofessionalsoftwaredevelopers.Among tionsalignedwithdeveloperintentionsusingknowledgefromboth
theseparticipants,50%havemorethanadecadeofexperiencein codeandtextualdocuments.EM-Assisttakesthisastepfurtherby
softwaredevelopment,33%havebetweenoneandthreeyearsof removinghallucinations,validatingandenhancingtheLLMoutput,
experience,whileothershavebetweenthreeandsevenyearsofex- andprovidingdeveloperswithtailoredrecommendations..
perience.WeusedLikert-typequestions[4]toevaluateEM-Assist’s Whileobtainingthetrainingsetforeverykindofrefactoringis
features,andweincludedopen-endedquestionstocapturetheir aformidablechallengeforpreviousapproaches,itisnotforLLM-
insightsregardingfutureenhancements.Weadheredtoestablished basedtools.Whilepreviousapproachesrequirecontinuous/custom
bestpracticesinusabilitystudies[3]. modeltrainingorcustomanalysis,giventhebroadknowledge-base
Figure3showstheresultsoftheLikert-typequestions.The ofLLMs,oursolutioniseasiertouse,maintain,anddeployinIDEs.
respondentsexpressedhighlypositiveattitudestowardstheoverall
5 CONCLUSIONS
usabilityanduserinterfacesofEM-Assist.94.4%oftherespondents
foundtheadditionalworkflowstages,includingtriggeringtheplu- WepresentEM-Assist,thefirstautomatedrefactoringtoolthatem-
gin,generatingLLMsuggestions,andselectingonetoapply,tobe ploysLLMs,implementedasanIntelliJIDEAplugin.Itbridgesthe
convenientandeasytohandle.EM-Assistusesapopupwindowto gapbetweensuggestingandapplyingExtractMethodrefactoring,
presentthesuggestions,andover77.7%ofrespondentsagreedthat andshrinksthegapbetweenrefactoringsuggestionsanddeveloper
itissomewhathelpfulorgreater.Additionally,94.4%ofrespondents practices.EM-AssistgeneratesrefactoringsuggestionsusingLLMs,
likedthesuggestedmethodnames.Whileuserscouldgetname thenvalidatesandenhancesthemwithstaticanalysisintheIDE.
suggestionsfromanLLMatalatertime,weconvenientlyoffer Toavoidoverwhelmingdevelopers,EM-Assistranksandpresents
meaningfulnamesatthetimeofperformingextractmethod. onlythehighest-qualitysuggestions,andthencorrectlyexecutes
Intheopen-endedquestions,therespondentssuggestedvaluable theuser-selectedrefactoringsuggestionwiththeIDE.Wecompre-
enhancementstoEM-Assistintermsofusability,configurability, hensivelyevaluateEM-Assistanditoutperformsstate-of-the-art.
andmodeofexecution,whichwewilluseinafuturerelease. Additionally,adevelopersurveyconfirmedthehighusabilityofthe
Overall,wereceivedpositivepraisesfromthesurveyrespon- plugin.EM-AssistusesanovelwaytocheckLLMresultsandmake
dentsaboutEM-Assist:“Itlookssupercoolsofar!:fire:”.Anothersaid: themusefulforrefactoringtasks.Beingthefirsttooltoemploy
“Thankyouforinterestingsuggestions!Hopetoseethisinproduction LLMsforExtractMethodrefactoring,EM-Assistdemonstratesthe
inthefuture.”Andanother:“...thesesuggestionsmademelookatthis potentialofLLMsaseffectiverefactoringassistants.Wearenow
codewithneweyesoncemore,andIwilltrytorefactorit.” expandingEM-Assisttosupportmanymorekindsofrefactorings.EM-Assist:SafeAutomatedExtractMethodRefactoringwithLLMs FSECompanion’24,July15–19,2024,PortodeGalinhas,Brazil
6 ACKNOWLEDGEMENTS
(ICSE’22).AssociationforComputingMachinery,NewYork,NY,USA,13pages.
[14] SaraFernandes,AdemarAguiar,andAndréRestivo.2022.ALiveEnvironment
We thank the ML Methods in Software Engineering Lab at Jet-
toImprovetheRefactoringExperience.
BrainsResearch,andtheFSE-2024reviewersfortheirinsightful [15] MartinFowler.1999.Refactoring:ImprovingtheDesignofExistingCode.Addison-
andconstructivefeedbackforimprovingthepaper.Thisresearch Wesley.
[16] JetBrains.2024. EM-Assistdemovideoandscreencast. https://youtu.be/
waspartiallyfundedthroughtheNSFgrantsCNS-1941898,CNS- 3E6KsHAg3js
2213763,andtheIndustry-UniversityCooperativeResearchCenter [17] JetBrains.2024. EM-AssistinstallationfromMarketplace. https://plugins.
jetbrains.com/plugin/23403-llm-extract-function
onPervasivePersonalizedIntelligence.
[18] JetBrains.2024.EM-Assistsourcecodeanddatasets. https://github.com/llm-
refactoring/llm-refactoring-plugin
REFERENCES [19] MaryBethKery,DonghaoRen,FredHohman,DominikMoritz,KanitWongsupha-
sawat,andKayurPatel.2020.mage:Fluidmovesbetweencodeandgraphical
[1] AharonAbadi,REttinger,andYAFeldman.2009. Fineslicingforadvanced
workincomputationalnotebooks.
methodextraction.3rdworkshoponrefactoringtools.
[20] ArunLakhotiaandJean-ChristopheDeprez.1998.Restructuringprogramsby
[2] RajivDBanker,SrikantMDatar,ChrisFKemerer,andDaniZweig.1993.Software
tuckingstatementsintofunctions.Elsevier.
complexityandmaintenancecosts.Commun.ACM.
[21] KatsuhisaMaruyama.2001.AutomatedMethod-ExtractionRefactoringbyUsing
[3] CarolMBarnum.2010.Usabilitytestingessentials.Elsevier.
Block-BasedSlicing.
[4] HarryNBooneJrandDeborahABoone.2012.Analyzinglikertdata.TheJournal
[22] EmersonMurphy-Hill,ChrisParnin,andAndrewP.Black.2012. HowWe
ofextension.
Refactor,andHowWeKnowIt.TSE.
[5] Tomet.alBrown.2020. LanguageModelsareFew-ShotLearners. Curran
[23] StasNegara,NicholasChen,MohsenVakilian,RalphE.Johnson,andDannyDig.
Associates,Inc.
2013.AComparativeStudyofManualandAutomatedRefactorings.ECOOP.
[6] SofiaCharalampidou,ApostolosAmpatzoglou,AlexanderChatzigeorgiou,Anto-
[24] JakobNielsen.1994.Usabilityengineering.MorganKaufmann.
niosGkortzis,andParisAvgeriou.2017.IdentifyingExtractMethodRefactoring
[25] DorinPomian,AbhiramBellur,MalindaDilhara,ZarinaKurbatova,EgorBogo-
OpportunitiesBasedonFunctionalRelevance.TSE.
molov,TimofeyBryksin,andDannyDig.2024.TogetherWeGoFurther:LLMs
[7] DiCui,QiangqiangWang,SiqiWang,JianleiChi,JiananLi,LuWang,andQing-
andIDEStaticAnalysisforExtractMethodRefactoring.arXiv:2401.15298[cs.SE]
shanLi.2023.REMS:RecommendingExtractMethodRefactoringOpportunities
[26] AlecRadford,JeffreyWu,RewonChild,DavidLuan,DarioAmodei,IlyaSutskever,
viaMulti-viewRepresentationofCodePropertyGraph.InICPC.
etal.2019.Languagemodelsareunsupervisedmultitasklearners.OpenAIblog.
[8] ScottDavidoff,MinKyungLee,AnindKDey,andJohnZimmerman.2007.Rapidly
[27] DaniloSilva,RicardoTerra,andMarcoTulioValente.2014. Recommending
exploringapplicationdesignthroughspeeddating.InUbiComp.Springer.
automatedextractmethodrefactorings.ICPC.
[9] MalindaDilhara.2021.DiscoveringrepetitivecodechangesinMLsystems.In [28] DaniloSilva,RicardoTerra,andMarcoTúlioValente.2015.Jextract:Aneclipse
Proceedingsofthe29thACMJointMeetingonEuropeanSoftwareEngineering plug-inforrecommendingautomatedextractmethodrefactorings.
ConferenceandSymposiumontheFoundationsofSoftwareEngineering(Athens, [29] DaniloSilva,NikolaosTsantalis,andMarcoTulioValente.2016.WhyWeRefac-
Greece)(ESEC/FSE2021).AssociationforComputingMachinery,NewYork,NY, tor?ConfessionsofGitHubContributors.FSE.
USA,3pages. [30] OmkarendraTiwariandRushikeshJoshi.2022. IdentifyingExtractMethod
[10] MalindaDilhara,AbhiramBellur,TimofeyBryksin,andDannyDig.2024.Un- Refactorings.ISEC.
precedentedCodeChangeAutomation:TheFusionofLLMsandTransformation [31] NikolaosTsantalisandAlexanderChatzigeorgiou.2011.Identificationofextract
byExample.FSE(2024). arXiv:2402.07138 methodrefactoringopportunitiesforthedecompositionofmethods.
[11] MalindaDilhara,DannyDig,andAmeyaKetkar.2023.PYEVOLVE:Automat- [32] NikolaosTsantalis,AmeyaKetkar,andDannyDig.2022.RefactoringMiner2.0.
ingFrequentCodeChangesinPythonMLSystems.In2023IEEE/ACM45th TSE.
InternationalConferenceonSoftwareEngineering(ICSE). [33] SihanXu,AishwaryaSivaraman,Siau-ChengKhoo,andJingXu.2017.GEMS:
[12] MalindaDilhara,AmeyaKetkar,andDannyDig.2021.UnderstandingSoftware- AnExtractMethodRefactoringRecommender.ISSRE.
2.0:AStudyofMachineLearningLibraryUsageandEvolution. ACMTrans. [34] LimeiYang,HuiLiu,andZhendongNiu.2009. IdentifyingFragmentstoBe
Softw.Eng.Methodol.,Article55(July2021),42pages. ExtractedfromLongMethods.APSEC.
[13] MalindaDilhara,AmeyaKetkar,NikhithSannidhi,andDannyDig.2022.Dis-
coveringrepetitivecodechangesinpythonMLsystems.InProceedingsofthe Received2024-01-29;accepted2024-04-15
44thInternationalConferenceonSoftwareEngineering(Pittsburgh,Pennsylvania)