Safe Interval RRT for Scalable Multi-Robot
∗
Path Planning in Continuous Space
Joonyeol Sim Joonkyung Kim Changjoo Nam
Department of Electronic Engineering Department of Electronic Engineering Department of Electronic Engineering
Sogang University Sogang University Sogang University
Email: jysim@u.sogang.ac.kr Email: joonkyung@u.sogang.ac.kr Email: cjnam@sogang.ac.kr
Abstract—In this paper, we consider the problem of Multi- Obstacle Agent Goal Point
Robot Path Planning (MRPP) in continuous space to find
conflict-freepaths.Thedifficultyoftheproblemarisesfromtwo
primaryfactors.First,theinvolvementofmultiplerobotsleadsto
combinatorial decision-making, which escalates the search space
exponentially. Second, the continuous space presents potentially
infinite states and actions. For this problem, we propose a two-
level approach where the low level is a sampling-based planner
SafeIntervalRRT∗(SI-RRT∗)thatfindsacollision-freetrajectory
forindividualrobots.Thehighlevelcanuseanymethodthatcan
resolve inter-robot conflicts where we employ two representative
methods that are Prioritized Planning (SI-CPP) and Conflict
Based Search (SI-CCBS). Experimental results show that SI-
RRT∗ can find a high-quality solution quickly with a small
number of samples. SI-CPP exhibits improved scalability while
SI-CCBS produces higher-quality solutions compared to the
state-of-the-art planners for continuous space. Compared to the
most scalable existing algorithm, SI-CPP achieves a success rate
that is up to 94% higher with 100 robots while maintaining
solution quality (i.e., flowtime, the sum of travel times of all
robots) without significant compromise. SI-CPP also decreases
the makespan up to 45%. SI-CCBS decreases the flowtime by
9% compared to the competitor, albeit exhibiting a 14% lower Fig. 1: Challenging instances with 100 robots. In densely populated
success rate. environments, robots often experience conflicts. As their numbers
grow and the surroundings become more cluttered, the significance
I. INTRODUCTION of a scalable MRPP method becomes increasingly evident. These
are also test environments Circ10, Circ20, Rect10, and Rect20
Multi-Robot Path Planning (MRPP) is the problem of find-
(arranged clockwise) used in our experiments.
ing collision-free paths of multiple robots while optimizing a
givenobjective,suchasthesumofcostsormakespan[1].Itis of the most successful methods, there exist several variants,
a computationally challenging problem to solve optimally, as such as Enhanced CBS [9] and Explicit Estimation CBS [10].
proventobe -hard[2].MRPPhasbeenstudiedextensively While the existing methods are effective for instances in
NP
in the context of multi-agent systems to develop algorithms moderate-sizeddiscretespace,theyoftendonotscalewiththe
that produce high-quality solutions quickly, even in congested problem size. Also, they often demand discretizing continu-
spaceswithmanyrobots(likethechallenginginstancesshown ous environments, which unnecessarily simplifies the original
in Fig. 1). problem. These limitations indicate the necessity for a fast
Existingmethodscanbeclassifiedintocoupled,decoupled, continuous-space MRPP algorithm.
and dynamically-coupled as suggested in [3]. The coupled Our goal is to develop a scalable MRPP algorithm in
approach (e.g., Operator Decomposition [4], Enhanced Partial continuous space that can handle up to 100 robots efficiently,
Expansion A [5]) using a high-dimensional joint state space even in dense clutters, without significantly compromising
∗
ofallrobotsdoesnotscalewiththenumberofrobotsalthough solution quality. We propose a two-level approach consisting
they guarantee completeness and optimality. The decoupled of a low-level single-robot planner and a high-level conflict-
approach (e.g., Prioritized Planning [6], Hierarchical Cooper- resolving method. For the low level, we propose SI-RRT
∗
ative A [7]) reduces the search space by considering robots where the concept of using safe time intervals is borrowed
∗
separately, but their theoretical guarantees are not established. from Safe Interval Path Planning (SIPP) [11]. Unlike SIPP,
Dynamically-coupled methods (e.g., Conflict-Based Search which requires discretization of the environment, SI-RRT
∗
(CBS) [8], M [3]) combine the advantages of the former two allowsarobottonavigateincontinuousspacewithouttheneed
∗
by coupling robots only whenever necessary. As CBS is one fordiscretetimesteps.Thehigh-levelcanuseanyconflictres-
4202
rpA
2
]OR.sc[
1v25710.4042:viXraolutionmethod,suchasPrioritizedPlanning(PP)andConflict branching factor in the search and making roadmaps sparse,
BasedSearch(CBS),whichwillbereviewedwithmoredetails SSSP can find a solution quickly. However, the proposed
in Sec. II. We suggest two variants Safe Interval Continuous method has a critical issue that limits its applicability. The
space PP (SI-CPP) and Safe Interval Continuous space CBS solution is sequential, meaning that only one robot can move
(SI-CCBS), which have their advantages in computational at each time. Although a postprocessing method is provided,
efficiency and solution quality, respectively. it requires additional computation which does not seem to be
The main contributions of the proposed method include: negligible.Inaddition,theproofforprobabilisticcompleteness
Scalability: Our methods can find a high-quality solution does not hold as it is built upon the sequential solution.
•
toanMRPPinstanceeveninacrampedenvironmentwith In [14], a Graph Transformer (GT) is used as a heuristic
100 moving robots and static obstacles. function to accelerate CBS in non-grid settings, aiming for
Theoretical analysis: We provide analytic results proving both completeness and bounded-suboptimality. A contrastive
•
that SI-RRT is probabilistically complete and asymptot- loss training objective is introduced for learning a heuristic
∗
ically optimal. that ranks search nodes, demonstrating the generalizability of
Extensive experiments: We test our methods in four themethodwithpromisingresultsinacceleratingCBS.While
•
different environments where comparisons are done with the approach of learning the heuristic function is novel, the
the state-of-the-art methods (such as SSSP [12], ST- successrateofthesearchdecreasessignificantlyasthenumber
RRT -PP [13], and Graph Transformer (GT) [14]). of robots increases.
∗
We propose the single-robot planner SI-RRT ∗ in Sec. IV and ST-RRT ∗ [13]isabidirectionalplannerworkinginaspace-
its multi-robot extension in Sec. V. time configuration space, which consists of Cartesian coordi-
nates and a time dimension. Prioritized planning (PP) [16]
II. RELATEDWORK is used to resolve conflicts such that the robot with a lower
There has been an extensive line of research on MRPP in priority modifies its individual path generated by ST-RRT .
∗
the context of multi-agent pathfinding (MAPF). Among them, Since the search space has a time dimension, the robots can
we are particularly interested in MRPP and MAPF methods exploit temporality for more effective collision avoidance.
in continuous space. We introduce several recent works that Although PP does not guarantee deadlock-free paths, ST-
are closely related to our research. RRT -PP exhibits remarkable scalability and high quality
∗
Safe Interval Path Planning (SIPP) is introduced in [11] solutions.
for efficient path planning of a single robot in environments
withmovingobstacles.SIPPassumestheexistenceofanother
III. PROBLEMDEFINITION
system responsible for predicting future trajectories of dy- We consider the MRPP problem of finding collision-free
namic obstacles. A safe interval is defined as a contiguous trajectoriesfork robotsfromtheirstartlocationstorespective
period of time for a specific configuration during which goal locations in a workspace Rd where d 2,3 . A
W ∈ ∈ { }
there is no collision with the trajectories of the obstacles. point w can be occupied by an obstacle where the sets
∈W
As the number of safe intervals is significantly smaller than of static and dynamic obstacles are S and D, respectively.
O O
the number of time steps, SIPP can plan more efficiently We assume that S and D are all known. The free space
O O
by reducing the dimensionality of the problem. Nevertheless, is f = where = S D. The configuration
W W \O O O ∪O
SIPP is designed for discrete space so with limited flexibility space (C-space) i is the set of configurations of robot
C ⊆W
to handle continuous changes in the environment. i. For a configuration q i, the set of points occupied by i
∈C
Continuous-time Conflict-Based Search (CCBS) [15] intro- at q is denoted as hi(q) , where hi(q) depends on the
⊂ W
ducesseveralmodificationstoCBS.Tohandlecontinuoustime shapeofroboti.ThefreeC-space(freespace)is i = q
Cfree { ∈
androbotswitharbitrarygeometricshapesandvariableaction i hi(q) = . A trajectory of robot i is a continuous
C | ∩O ∅}
durations, CCBS implements a geometry-aware collision de- function πi : [0,ti ] i where ti means the last time
final → Cfree final
tectionandanunsafe-intervaldetectionforresolvingconflicts. of the trajectory of i. Each configuration q in a trajectory is
At the high-level search operating on a Constraint Tree (CT), given by πi(t) for t [0,ti ]. We assume that i moves with
∈ final
CCBS adds constraints over pairs of actions and time ranges a constant velocity denoted by veli.
instead of location-time pairs. For the low-level search, a ver- A safe interval of q is a continuous period of time ι =
sion of SIPP is employed to handle CCBS constraints. While [low,high) while q resides in i . With a slight abuse of
Cfree
CCBS can manage a variety of robot shapes, variable action notation,wedenotethesevaluesasι.lowandι.high.Foreach
durations, and continuous time while preserving optimality ιofq,arobotcanbeatq fromι.low untilι.high.Withinthis
and completeness, its scalability is hindered by the inherent safeinterval,therobotcannotarriveatqearlierthanι.lowand
limitations of CBS. mustleaveq beforeι.hightoavoidcollision.Whileq / i ,
∈Cfree
Simultaneous Sampling and Search Planning (SSSP) [12] q has a collision interval. Depending on the trajectories of
is a unified approach that does not separate the roadmap dynamic obstacles, a single configuration q can have multiple
construction and conflict resolution. SSSP not only keeps the safe intervals which are separated by collision intervals.
search space small through unified planning but also provides In Fig. 2 all points occupied by robot i (i.e., hi(q)) are
a guarantee for probabilistic completeness. By reducing the depictedbyacirclewhichcanbeanarbitraryshape.ThegreenSafe Interval Collision Interval Dynamic Obstacle configurations:
𝒕𝒊𝒎𝒆 𝒒𝜄! ∈.ℎ 𝐶𝑖𝑔 $ℎ
κ=
k
ti . (1)
!"## final
𝜄!.𝑙𝑜𝑤 i=1
X
𝒒∉𝐶$ The collision-free trajectories satisfy
!"##
𝒚
𝜄".ℎ𝑖𝑔ℎ hi(πi(t)) hj(πj(t))= i,j,i=j, t [0,t final] (2)
𝒒∈𝐶$ ∩ ∅ ∀ ̸ ∀ ∈
!"##
𝒙
ℎ$(𝒒)
𝒒 𝜄".𝑙𝑜𝑤 where t
final
=max {t1 final,
···
,tk final}.
Fig.2:Anillustrationofthesafeintervalatq.Theintervalisdefined IV. SINGLE-ROBOTPLANNER:SAFEINTERVALRRT ∗
for hi(q) to consider the size of robot i at q. The green zone
We propose a sampling-based planner SI-RRT which can
represents the safe interval where the robot can stay at q without a ∗
be used with a high-level planner for multiple robots. It also
collision.Duringthetimeintervalsrepresentedbyred(i.e.,collision
interval), robot i cannot stay at q as the dynamic obstacle (in blue) canbeusedasanindependentsingle-robotplannerindynamic
incurs a collision with i. Note that the shapes of the robot and environments. SI-RRT is based on the concept of using the
∗
dynamicobstaclecanbearbitrary.Thetrajectoryoftheobstaclealso safe intervals of SIPP [11] but more flexible as it works in
can be arbitrary.
continuous space without discrete time steps. Also, SI-RRT
∗
can find a high-quality trajectory with a lesser number of
zonerepresentsthesafeintervalsasnoobstaclehasanoverlap
with hi(q). The dynamic obstacle (in blue) crosses hi(q) so samples. For a simpler explanation, we temporarily omit the
robot index i (or j) throughout this section.
thecollisionintervals(inred)occurs.Inadiscretespace,each
discrete state has its own safe intervals ([11, 17]). Since the SI-RRT ∗ expands G up to iteration times to find a
number of configurations in i is not bounded, it is infeasible collision-free trajectory π(t) for t [t start,t goal]. SI-RRT ∗
to maintain the safe intervaC ls of all possible configurations has an anytime feature. Once a solu∈ tion is found, it keeps
in i. Thus, we construct a safe interval map such that improving the solution with more samples until iteration
oneC or more safe intervals at q are added to M only if q is expires. Here, t start and t goal represent the time at the start and
consideredinplanning,insteadofcontainingthM esafeintervals goal configurations q start and q goal of the robot, respectively.
of all configurations in i. The configurations q start and q goal belong to the vertices v start
A roadmap (or a tree)C G=( , ) is a topological graph in and v goal of G, respectively. We introduce several subroutines
a (d+1) dimensional space. ThV e rE oadmap is used to generate of SI-RRT ∗.
a trajectory and assumed to be connected. The roadmap of i
A. Functions for tree expansion
is denoted by Gi. Vertex v corresponds to a point in the
∈V
(d+1)-dim space where d dimensions are for the workspace Functions SAMPLING and STEER are used to grow G.
and the one dimension is for time. A vertex is specified by SAMPLINGrandomlyselectsaconfigurationq from with
rand C
its configuration q and t so in the (d+1)-dim space. The a probability of 1 λ or the goal configuration q with a
low − goal
quantity v.t is the earliest arrival time of v indicating that probability of λ. STEER returns a new configuration q . It
low new
the robot cannot arrive at v earlier than t low. Edge e identifies v near in G whose configuration v near.q is the nearest
∈ E
connects a pair of vertices in if there exists a trajectory to q rand. If the distance between them does not exceed d max,
V
between the configurations of the vertex pair given the safe q becomes q . Otherwise, q lies on the line between
rand new new
intervals of their configurations. v near.q and q
rand
at a distance of d max.
A conflict i,j,hi(πi(t)),hj(πj(t)) is defined for robots
i and j for
t⟨
[t ,t ] where
hi(πi(⟩
t)) represents the area
B. Functions for tree optimization
s e
∈
occupied by i at t while i moves along πi. Robots i and Functions GETNEIGHBOR, CHOOSEPARENT, and REWIRE
j collide within a collision interval [t s,t e] so hi(πi(t)) are used to optimize G. GETNEIGHBOR returns the set of
∩
hj(πj(t)) = for t [t ,t ]. A constraint for robot i is adjacent vertices which are within d from q .
̸ ∅ ∈ s e Vneighbor max new
defined as ⟨i,hj(πj(t)),t
⟩
where t
∈
[t s,t e] which indicates CHOOSEPARENT generates a new vertex of q
new
(i.e., v new),
that robot i must avoid hj(πj(t)) during [t ,t ]. In other finds the parent vertex of v from , and updates the
s e new neighbor
V
words, robot i must generate a trajectory while satisfying earliest arrival time t of v . The parent vertex is chosen
low new
hi(πi(t)) ∩hj(πj(t))=
∅
for t ∈[t s,t e]. suchthatt lowofv newisminimized.FunctionREWIREmodifies
Forasingleroboti,weaimtofindaconflict-freetrajectory thestructureofgraphG.Itreassignstheparentvertexofeach
πi from the start configuration qi to the goal configuration neighborintheset .Ifassigningv asthenewparent
start Vneighbor new
qi with the minimum arrival time ti . In other words, we results in a smaller t , the parent is updated accordingly.
goal final low
aim to minimize the travel time from qi to qi without Thesefunctionshelpoptimizethetreestructureandfindmore
start goal
collisions. For multiple robots, we aim to find conflict-free efficient trajectories.
trajectoriesforallkrobotsfromtheirrespectivestartpositions In CHOOSEPARENT (Alg. 1), three members of v
new
are
to their goal positions while minimizing the flowtime κ which initialized (line 1), which are the new configuration q , its
new
isthesumofindividualarrivaltimesofallrobotsattheirgoal earliest arrival time t , and the parent vertex. Alg. 1 iterates
lowSafe Interval Collision Interval Dynamic Obstacle Earliest Arrival Time Algorithm 1 CHOOSEPARENT
𝒕𝒊𝒎𝒆 𝒕𝒊𝒎𝒆 Input: q new, Vneighbor, G, M,
O
𝜄!"#.ℎ𝑖𝑔ℎ 𝜄!"#.ℎ𝑖𝑔ℎ Output: v new or NULL
𝜄.ℎ𝑖𝑔ℎ 𝜄.ℎ𝑖𝑔ℎ 𝑙𝑜𝑤 1: v new.q ←q new, v new.t low ←∞, v new.parent=NULL
2: for v in Vneighbor do
𝒙
𝜄!"#𝒚
.𝑙𝑜𝑤 𝒙
Collision 𝜄!"#𝒚
.𝑙𝑜𝑤
43 :: for loι wnew in ←M t( hv enew e.q ar) lied so
t arrival time of v new.q within
𝑣 𝜄. .𝑡 𝑙$ 𝑜% 𝑤& 𝑣!"#.𝒒 𝑣 𝜄. .𝑡 𝑙$ 𝑜% 𝑤& 𝑣!"#.𝒒 [ rι on bew o. tlo mw o, vι en sew f. rh oi mgh v) without colliding with O when the
𝑣.𝒒 𝑣.𝒒 5: if low does not exist then
6: continue
Fig.3:AnillustrationshowinghowlowisdeterminedinCHOOSEP- 7: end if
ARENT.(Left)Therobotcanstayv fromv.t low untilι.highwithout 8: if low<v new.t low then
Tco hl elis bi oo ln ds. aT rrh oe ws ra ef pe ri en st ee nrv tsal ao tf rav jene cw t. oq ryis to[ι mnew o. vl eow fr, oι mnew v. .h qig toh) v. n( eR w.i qgh at s) 19 0:
:
v vn ne ew w. .t pl aow re← ntl ←ow
v
early as possible without colliding with the blue dynamic obstacle. 11: end if
Thus, low is the earliest arrival time at v new.q along the arrow. 12: end for
13: end for
14: if v new.parent=NULL then
to check if each neighbor vertex v can be a parent (lines 2– 15: return NULL
13). For each safe interval ι of v .q, Alg. 1 checks if 16: end if
new new
t eh xe isr tsob ao tt lc ea an stm ono eve cofr lo lim siov n-t fo rev ene tw raw jei ct th oo ru y,t tc ho elli es aio rln ies s. tIf art rh ie vr ae
l
11 87 :: EV ←← EV ∪∪ (v vn ne ew w,v new.parent)
19: return v new
time of them is assigned to low (line 4).
In the left of Fig. 3, the robot can stay v from v.t until
low
ι.high without collisions. The safe interval of v .q (green)
new
the current parent (lines 10–12). If v.t / [ι.low,ι.high) as
is [ι new.low,ι new.high). Until, the earliest arrival time of v new low ∈
shown in Fig. 4b, a new vertex v is generated where v .q
(i.e., v .t ) is not found but initialized by infinity (line 1). re re
new low
is identical to v.q but their values of t differ (lines 14–15).
In the right of Fig. 3, the bold arrow represents a trajectory to low
This generation of a new vertex is caused by the presence of
movefromv.q tov .q asearlyaspossiblewithvel,without
new
the collision interval. If we update v.t with low, the robot
colliding with the dynamic obstacle (blue). Thus, the arrival low
wouldremainatv duringthecollisionintervalsoacollisionis
time at v .q along the arrow is assigned to low.
new
incurred. Accordingly, the earliest arrival time and the parent
If there is no overlap between the safe interval of v .q
new
of v are updated (lines 16–18).
and the time range that the robot can arrive at v .q, no re
new
Note that v and v have an identical configuration in
trajectory exists between v and v . If the robot collides re
new
the spatial dimension but different values in the temporal
with an obstacle no matter when it starts toward v .q, no
new
dimension.Asdiscussed,Gisatopologicalgraphina(d+1)-
trajectory can be found. In both cases, low does not exist.
dim space where sampling occurs in the spatial dimension
If low is not found, the rest of the loop is skipped (line 6)
for configurations. The value in the temporal dimension is
to move on to the next neighbor vertex in . If low
neighbor
V determined by t but not sampled.
is found and lower than any other previously found low, the low
earliest arrival time and the parent of v are updated with
new C. SI-RRT
low and v, respectively (lines 8–11). Iterating the outer loop ∗
(lines 2–13) ensures the lowest value of the earliest arrival Based on the subroutines described above, SI-RRT ∗ per-
time.Therefore,therobotcanarriveatv asearlyaspossible formsasdescribedinthepseudocodeAlg.3.Thesafeinterval
new
among all possible choices of the parent from . If no map is initialized to be empty and then updated to add the
Vneighbor M
collision-freetrajectorytov new.qisfoundfromanyof Vneighbor, safe intervals at q
start
and q
goal
(lines 1–5). GETSAFEINTER-
v new is rejected so no new vertex is returned (line 15). VALS searches C over time at the input configuration to find
Given v
new
generated from CHOOSEPARENT, REWIRE all safe intervals.
(Alg. 2) reconnects edges of G if doing so results in a better A robot should leave its start configuration within the
trajectory. Alg. 2 examines if v can be the parent of one or earliest safe interval of q which begins from zero. Oth-
new start
moreoftheneighborverticessuchthatv.t oftheneighbors erwise, it will collide with a dynamic obstacle. Thus, the safe
low
can decrease. While iterating for each neighbor vertex v, interval at q is upper bounded by high of the earliest
start
REWIRE attempts to update the earliest arrival time of v. If safe interval (line 4). Since a robot should be able to stay
low does not exist or low found does not optimize G, no at its goal configuration, it should arrive at q after all
goal
change is made. An update occurs if the earliest arrival time dynamic obstacles move away from the goal. Therefore, the
ofv (fromv )iswithintheinterval[ι.low,ι.high)(lines9– safe interval at q should start from the latest safe interval
new goal
12). In Fig. 4a, low falls within the current safe interval so so it is lower bounded by low of the latest safe interval. The
v.t isupdatedwithlow.Also,theparentofv isupdatedby upper bound is initially set to be infinity as we assume the
low
v since coming from v to v is faster than coming from robotstaysatq indefinitelyonceitarrivesthegoal(line5).
new new goal𝒕𝒊𝒎𝒆 𝜄.ℎ𝑖𝑔ℎ 𝒕𝒊𝒎𝒆 𝜄.ℎ𝑖𝑔ℎ Algorithm 3 SI-RRT ∗
𝑣 𝑣.𝑡!"# I On up tu pt u: tC :, TC rafr je ee, cO tor, yG π, (q ts )tar ot, rq Ngo Ual L,d Lmax, iteration
𝜄.𝑙𝑜𝑤 𝑙𝑜𝑤 𝜄.𝑙𝑜𝑤 𝑣 𝑣.𝑡!"# 1: M← an empty map
𝒚 𝒚 2 3: : I Is gt oa art l ← ←G GE ET TS SA AF FE EI IN NT TE ER RV VA AL LS S( (q qs gt oa art l, ,C C) )
𝒙 𝒙
4: M[q start]
←
{[0, minimum high in Istart)
}
𝑣.𝒒 𝑣.𝒒
5: M[q goal]
←
{[maximum low in Igoal, ∞)
}
(a)CaseI(lines9–12inAlg.2):v.t low∈[ι.low,ι.high);v.t low updated 76 :: vv gst oa ar lt. .qq ←←q qs gt oa art l, ,v vs gt oa art l. .t tl lo ow
w
← ←∞0,v ,s vta gr ot a. lp .pa are rn ent t← ←N NU UL LL L
𝒕𝒊𝒎𝒆 𝒕𝒊𝒎𝒆 8: while iteration>0 do
9: q SAMPLING(λ, q , )
rand ← goal C
𝑣 𝑣.𝑡!"# 𝑣 𝑣.𝑡!"# 10: q
new ←
STEER(q rand, V)
11: if q new ∈/ Cfree then
12: continue
𝜄.ℎ𝑖𝑔ℎ 𝒚 𝜄.ℎ𝑖𝑔ℎ 𝒚 13: end if
𝑙𝑜𝑤 𝑣$% 𝑣!".𝑡#$% 14: M[q new]
←
GETSAFEINTERVALS(q new, Cfree)
𝒙 𝜄.𝑙𝑜𝑤 𝒙 𝜄.𝑙𝑜𝑤 15: Vneighbor ← GETNEIGHBOR(d max, V)
𝑣.𝒒 𝑣.𝒒=𝑣$%.𝒒 16: v new ← CHOOSEPARENT(q new, Vneighbor, G, M, O)
(b)CaseII(lines14–18inAlg.2):v.t low∈/[ι.low,ι.high);vre generated 17: if v new =NULL then
18: continue
Fig.4:AnillustrationofREWIRE.(a)Iflowiswithinthecurrentsafe
19: end if
interval,v.t isupdatedbylow sincedoingsooptimizesGwitha
faster
arrival low
time at v. (b) Otherwise, a new vertex v is generated
20: REWIRE(v new, Vneighbor, G, M, O)
wherev .qisidenticaltov.qbuttheirvaluesoft
arere
different.The
21: if v new.q=v goal.q then
re low 22: if v new.t low <v goal.t low then
generation of the new vertex is caused by the red collision interval.
Ifwekeepusingv andupdatev.t bylow,therobotcouldhavea 23: v goal ←v new
low 24: end if
collision as it would stay at v within the collision interval.
25: end if
26: iteration iteration 1
← −
Algorithm 2 REWIRE 27: end while
Input: v new, Vneighbor, G, M,
O
2 28 9:
:
if v rg eo ta ul. rp nare Nn Ut L= LNULL then
Output: None
30: end if
1: for v in Vneighbor do 31: t final =v goal.t low
2 3:
:
for loι win M th( ev. eq a) rlid eo
starrivaltimeofv.qwithin[ι.low,ι.high)
32: return π(t) for t ∈[0,t final]
←
without colliding with when the robot moves from v
O new
4: if low does not exist then
5: continue If(i)theconfigurationofv isequaltothegoalconfigura-
new
6: end if tion (line 21) and (ii) the robot could arrive at the goal earlier
7: if low<v.t low then than the current earliest arrival time (line 22), v is updated
8 9: : if v v. .t tl lo ow w∈ ←[ι l. olo ww,ι.high) then by v new. If v goal has a parent, v goal is connectedgo ta ol G so π(t)
10: E ←E\(v,v.parent) is returned with the goal arriving time t final =v goal.t low.
11: v.parent ←v new Once a goal vertex is found, Alg. 3 keeps optimizing G
12: E ←E∪(v,v new) until iteration reaches zero through CHOOSEPARENT and
13: else
1 14 5:
:
v vr re e. .q
t
low← ←v. lq
ow
bR aE laW nI cR eE c. oT mh pis uta an tiy ot nim ale rec sa op ua rb ci el sity ano df sS oI l- uR tiR onT ∗ que an la itb yl .es us to
1 16 7:
:
v Vre ←.pa Vre ∪nt v←
re
v new D. Analysis of SI-RRT
∗
18: E ←E∪(v re,v new) We prove the probabilistic completeness and the asymptot-
19: end if
ical optimality of SI-RRT .
20: end if ∗
21: end for Theorem 1. SI-RRT ∗ is probabilistically complete.
22: end for
Proof: Let us consider v to connect it to a neighbor
new
v. In SI-RRT , the rejection of v occurs only under the
∗ new
Initializationoftheverticesofthestartandgoalconfigurations following two conditions:
follows (lines 6–7) where v .t is set to be infinity as the (Condition 1) No overlap in safe intervals: A robot
goal low
•
arrival time at the goal has not been computed. coming from v belongs to a safe interval. If the robot
The main loop iterates for iteration times (lines 8–27). If starts from v to v with velocity vel, the safe interval
new
q new is found from SAMPLING and STEER, the safe intervals is linearly translated by ∥v.q − vv elnew.q ∥ along the time axis.
atq areaddedto (line14).Ifanewvertexv forq If this translated safe interval does not have any overlap
new M new new
isfoundby CHOOSEPARENT, REWIRE optimizesG(line20). withallsafeintervalsatq new,therobotcannotreachv
newwithinanyofthesafeintervals.Inotherwords,therobot quality so one can choose either of them according to the
must collide with an obstacle if it moves from v to v requirements of the task.
new
with vel, regardless of its departure time from v.
A. Safe Interval Continuous space PP (SI-CPP)
(Condition 2) Colliding with dynamic obstacles: Even
•
though there is at least an overlap between the translated PP is a general approach based on a given, fixed priority of
interval and the safe intervals at v , the robot cannot robots. Each robot finds its trajectory independently and then
new
reach v if a dynamic obstacle occupies the entire avoids collisions with the trajectories of higher-rank robots.
new
overlap. PP is simple to implement and efficient. However, it is not
From these conditions, we can ensure that SI-RRT finds complete so deadlocks could occur where robots get stuck. In
∗
a trajectory between a newly sampled vertex and its neighbor SI-CPP, individual trajectories are found by SI-RRT ∗. Then
vertex if there exists an overlap of intervals between the pair the trajectory of a higher-rank robot is treated as a dynamic
and no dynamic obstacle obstructs such an overlap. In other obstacle to a lower-rank robot. Thus, lower-rank robots avoid
words, SI-RRT will find a solution if both Conditions 1 and alltrajectoriesofhigherrankersuntiltheyarriveattheirgoals.
∗
2 are not satisfied.
B. Safe Interval Continuous space CBS (SI-CCBS)
If a collision-free trajectory exists between v and v , the
new
CBS is a two-level algorithm which has proven to be
probabilityoffindingitapproachesoneunderinfiniteuniform
optimal and complete [8]. Like many CBS variants, the high-
sampling. Equivalently, one can think that SI-RRT samples
∗
level of SI-CCBS performs the best-first search in Constraint
new safe intervals until any of them has an overlap with the
Tree(CT).Weadoptthecostfunctionofthegreedyvariantof
current translated safe interval. The probability of having an
CBSproposedin[9],whichisthenumberofconflictsbetween
overlap approaches as the number of samples goes to infinity.
trajectoriesforefficientsearch.OthermodificationstoCBSare
Therefore,SI-RRT expandsGprogressivelyasmoresamples
∗
done on the definition of conflicts and constraints to handle
are added. This incremental growth of G enables SI-RRT
∗
continuous space as described in Sec. III. A CT node in the
to eventually connect G to v as the number of sample
goal
CT contains the cost, the set of individual trajectories, and
approaches to infinity.
the set of constraints. SI-CCBS begins with inserting the root
Theorem 2. SI-RRT ∗ is asymptotically optimal. node to the search frontier OPEN where the root is with
an empty constraint set. The search iterates by expanding the
Proof:SI-RRT isdesignedtomaintaint inallvertices
∗ low
node with the minimum cost from OPEN. The expanded
to be the earliest arrival time at the respective vertices. Thus,
nodeiseliminatedfromOPEN.Iftheexpandednodehasno
t of v , which is t , is also the earliest arrival time to
low goal final
conflict, the search terminates with a conflict-free solution. If
reach the goal configuration.
OPEN is empty, the search fails to find a solution.
1) Once a solution is found, the trajectory π(t) for t
∈ When a CT node is expanded, conflicts among all trajec-
[0,t ]isrepresentation-optimal1givenGbythedesign
final tories are found. The number of conflicts is used as the cost
of SI-RRT .
∗ of the node. The constraint set is constructed with a conflict
2) The configurations of vertices in approximate .
V Cfree (we choose the conflict with the smallest t) for the involved
As the number of sample approaches to infinity, the
robots i and j with trajectories πi(t) and πj(t), respectively.
configurations of the vertices converge to .
Cfree Subsequently, SI-RRT
∗
finds the trajectories that abide by the
Underinfiniteuniformsampling,Gcoversallconfigurations
constraintset.Withthenewtrajectories,anewnodeisinserted
in free so the representation converges to the solution space. to OPEN.
C
Since SI-RRT is representation-optimal, the solution found
∗
from G is optimal with an infinite number of samples. VI. EXPERIMENTS
The first set of experiments is done for single-robot plan-
V. CONFLICTRESOLUTIONOFMULTIPLESI-RRT
∗ ners. Then we compare MRPP and MAPF algorithms that
TRAJECTORIES
can handle continuous space and time. We have four test
SI-RRT ∗ enables each robot to find its own collision-free environments with different obstacle profiles: Circ10, Circ20,
trajectory. With multiple robots, the trajectories could have Rect10, and Rect20 as shown in Fig. 1. The size of all
conflicts between them. We present the bi-level framework environments is 40m 40m where the radius of all robots is
×
where the high level resolves conflicts between the individual 0.5m.Circ10andCirc20arefilledwithcircularobstacleswith
trajectories from the low level SI-RRT ∗. While any conflict differentdensitiesoftheobstacles(10%and20%oftheentire
resolving methods can be used in the high level, we show space, respectively). Likewise, Rect10 and Rect20 are with
SI-CPP and SI-CCBS which employ PP and CBS. While SI- rectangularobstacles.Foreachenvironment,wegenerateaset
CPPismoreefficient,SI-CCBSproducessolutionswithbetter of 50 unique instances while randomizing the start and goal
locationsaswellasthesizeandlocationoftheobstacles.The
1Thenotionofbeingrepresentation-optimal,alsooutlinedin[18],entails samesetofinstancesareusedtotestallcomparedmethodsfor
achieving an optimal solution within a given representation of the solution
fairness. We have parameter settings: λ = 0.05, d = 5m,
space. It is not necessarily saying that the solution space is identical to the max
representationitself. iteration = 1500, and vel = 0.5m/s. Unless otherwiseSI-RRT* ST-RRT* tinuous space and dynamic obstacles. In [13], ST-RRT out-
∗
Circ10 Circ20 performs RRT-Connect and RRT ∗ in dynamic environments.
In conjunction with PP, it also works efficiently for multi-
robot systems. For a comparison with ST-RRT , we place 30
∗
dynamic obstacles whose size and shape are the same as the
robot.Thetrajectoriesoftheobstaclesarerandomlygenerated
Rect10 Rect20 but known to both of the algorithms. The performance metric
is the earliest arrival time at q , which shows the quality
goal
of the tree and trajectory. With a lower earliest arrival time,
the robot can reach the goal faster. We measure the metric by
increasingthenumberofsamplesbecausewewanttocompare
the sample-efficiency of the algorithms.
Fig. 5: A comparison between SI-RRT∗ (yellow) and ST-RRT∗
Fig. 5 shows the results across the four environments. The
(green) for single-robot planning in the four test environments. The
earliest arrival time at q of SI-RRT decreases faster than
earliestarrivaltimeatthegoalofSI-RRT∗ decreasesfasterthanST- goal ∗
RRT∗,showingthatSI-RRT∗ canfindbettertrajectoriesfaster.Also, ST-RRT ∗, showing that SI-RRT ∗ can find better trajectories
SI-RRT∗ convergestoalowerearliestarrivaltime,althoughthegap faster.Althoughthegapbetweenthetwoalgorithmsdecreases
decreases with a sufficient number of samples. with a sufficient number of samples, SI-RRT converges to
∗
SI-CCBS SI-CPP ST-RRT* PP GT SSSP a lower earliest arrival time. Since both methods have the
anytime feature, using SI-RRT is more beneficial if the time
∗
budget for planning is tight.
Our analysis suggests that this result stems from the di-
mensionality of the space in which the algorithms generate
samples. ST-RRT samples from the entire space including
∗
the spatial and temporal dimensions while SI-RRT samples
∗
in the spatial dimension. Thus, the samples of SI-RRT can
∗
coveralargernumberofconfigurationswiththesamenumber
ofsamples.Ontheotherhand,ST-RRT tendstoexpandmore
∗
toward the temporal dimension than the spatial dimension
sincesamples spreadingoutin thespatialdimension aremore
likelyrejectedowingtoobstacles.Thus,ST-RRT needsmore
∗
samples for the tree to reach the goal configuration.
B. Multi-robot planners
The main metrics for multi-robot tests are the success rate
and flowtime. We measure the success rate by counting the
number of instances (out of 50) that can finish computation
within five minutes. The flowtime is our objective value to be
minimized (Eq. 1), which is the sum of the travel times of
the robots closely related to the energy consumption in the
navigation task. In congested environments, the significance
of flowtime increases as robots are compelled to wait longer
tocircumventconflictswithotherrobots.Wealsomeasurethe
Fig. 6: The success rates of compared methods under five minutes sum of distance and makespan (i.e., the elapsed time until all
of the time limit. The proposed method SI-CPP succeeds in almost
robots reach their goals) as auxiliary metrics.
all instances, even in congested environments. As the advantage of
One of the main advantages of SI-CPP and SI-CCBS lies
SI-CCBS is in its solution quality, its success rates are lower than
SI-CPPandST-RRT∗-PPbutsignificantlyhigherthanSSSPandGT. in the scalability, which can solve instances with 50+ robots.
Although ST-RRT with PP (ST-RRT -PP) is the only such
∗ ∗
noted,themaximumvelocityoftherobotsacrossallcompared scalable algorithm among the recently proposed algorithms,
algorithmsis0.5m/s.ThesystemhasanAMDRyzen5800X we also compare SSSP [12] and GT [14] for an expanded
3.8GHzCPUand32GRAM,andallalgorithmsexceptforGT comparison(allreviewedinSecII).Wenotethatthesolutions
are implemented in C++17. GT is implemented using Python of SSSP and GT specify the locations of the robots for each
3.8 because of its dependency on PyTorch. discrete time step. In other words, all robots are synchronized
with the time steps, so the robots which arrive at their next
A. Single-robot planners
waypointearlierthanpeerrobotsshouldwaituntilallofthem
Tothebestofourknowledge,ST-RRT isthemostefficient reach the waypoints. On the other hand, ST-RRT -PP can run
∗ ∗
sampling-based planner for single robots that can handle con- with continuous time without such a synchronization.SI-CCBS SI-CPP ST-RRT*-PP GT SSSP
Fig. 7: The flowtime of compared methods where the standard deviation is displayed by the error bar. Some statistics are not reliable as
they are with very few data points.
TABLE I: The test results in numbers. Owing to the limited space budget, we present the results of Circ20 and Rect20 only.
Environment Circ20 Rect20
Metric #robot SI-CCBS SI-CPP ST-RRT∗-PP GT SSSP SI-CCBS SI-CPP ST-RRT∗-PP GT SSSP
20 100 100 98 28 34 100 100 96 20 22
40 100 100 78 0 0 100 100 80 0 0
Successrate(%) 60 96 100 68 0 0 94 100 66 0 0
80 66 100 48 0 0 30 100 44 0 0
100 0 98 34 0 0 0 98 4 0 0
20 839.6 858.0 858.1 2295.3 17142.9 839.0 874.6 872.5 2364.9 16696.4
40 1788.7 1848.0 1848.7 - - 1837.2 1928.5 1893.7 - -
Flowtime(sec) 60 2843.8 2942.9 2857.1 - - 2945.6 3157.9 3092.6 - -
80 3978.3 4287.3 4150.3 - - 4129.9 4677.1 4538.5 - -
100 0 5829 5471.9 - - - 6479.8 6051 - -
20 409.8 414.2 414.8 443.5 507.9 407.4 418.0 416.4 468.6 507.3
40 846.0 864.0 871.2 - - 851.7 881.9 879.1 - -
Sumofdistance(m) 60 1285.4 1331.2 1319.1 - - 1319.7 1401.5 1386.1 - -
80 1747.1 1882.2 1852.8 - - 1752.7 1984.8 1950.4 - -
100 0 2480.6 2384.4 - - - 2644.2 2489.5 - -
20 77.6 79.0 79.2 114.8 1286.1 79.7 84.8 84.1 118.2 1259.6
40 84.7 88.0 91.1 - - 86.4 94.4 98.3 - -
Makespan(sec) 60 86.7 99.8 104.8 - - 87.3 117.3 118.7 - -
80 87.7 124.3 126.7 - - 88.8 140.0 163.1 - -
100 0 144 150.8 - - - 156.4 199.0 - -
SI-CCBS SI-CPP ST-RRT*-PP Even though the focus of SI-CCBS is on solution quality
over scalability, its scalability is promising. It can find so-
lutions for 60 robots in most instances, which significantly
outperforms SSSP and GT. Up to 60 robots, SI-CCBS shows
higher success rates than ST-RRT -PP. With 80 robots, its
∗
success rate in the most challenging environment Rect20
is outperformed by ST-RRT -PP (14% lower). However, SI-
∗
CCBSsucceedsmoreinotherenvironments.With100robots,
its success rates is outperformed by ST-RRT -PP. While
∗
having such high success rates, SI-CCBS also produces high-
Fig. 8: The makespan of SI-CCBS, SI-CPP, and ST-RRT∗-PP in quality solutions as shown in Fig. 7. When compared to ST-
Circ20 and Rect20 RRT -PP with 80 robots, SI-CCBS decreases solution quality
∗
by 4% and 9% in Circ20 and Rect20, respectively.
The experimental results are shown in Figs. 6 and 7 for
varying numbers of robots and different environments. Since Ontheotherhand,SI-CPPdemonstratessignificantlyhigher
running the extensive set of experiments is cost-expensive, performancethanallcomparedmethodsintermsofscalability,
we vary the number of robots unevenly up to 100. Owing while minimally sacrificing the solution quality. Even in
to the space constraint, we present values of the metrics in Rect20 with 100 robots, the success rate is 98% while ST-
Table I selectively focusing on more difficult environments. RRT -PP succeeds to find a solution only in two instances
∗
Standard deviations are also omitted. The success rates in out of 50 (so 4%) and all the other methods fail. Since the
Fig. 6 show that only SI-CPP, SI-CCBS, and ST-RRT -PP data points are limited to compare the solution quality in
∗
can find solutions for 40+ robots within the time limit. The Rect20with100,wecomparetheresultswith80robots.The
success rates of SSSP and GT drop significantly with more flowtimeofSI-CPPisincreasedby3.1%and2.96%compared
than 15 robots across all environments, especially in Circ20 to ST-RRT -PP. The amount of quality drop is consistent as
∗
and Rect20, which are with more static obstacles. Fig. 7 shows similar flowtime between SI-CPP and ST-RRT -
∗PP across different environments and numbers of robots. ference on Artificial Intelligence, vol. 24, no. 1, 2010,
The auxiliary metrics show an interesting result. The pp. 173–178.
makespan of SI-CPP is significantly smaller than ST-RRT - [5] M.Goldenberg,A.Felner,R.Stern,G.Sharon,N.Sturte-
∗
PPwithlargernumbersofrobots(Fig.8).Thereductionisup vant, R. C. Holte, and J. Schaeffer, “Enhanced partial
to30.8%and45.6%inCirc20andRect20,respectively.This expansion a,” Journal of Artificial Intelligence Research,
result implies that SI-CPP generates high-quality trajectories vol. 50, pp. 141–187, 2014.
evenlyforallrobots,whichisakeybenefitofusingSI-CPPfor [6] P. Velagapudi, K. Sycara, and P. Scerri, “Decentral-
tasks that finish when all robots reach their goals. The sum of ized prioritized planning in large multirobot teams,” in
distance(presentedonlyinTableI)showssimilarresultswith Proceedings of IEEE/RSJ International Conference on
the flowtime. This value of SI-CCBS is approximately 10% Intelligent Robots and Systems. IEEE, 2010, pp. 4603–
smaller than ST-RRT -PP while the value of SI-CPP is 1–2% 4609.
∗
higherthanST-RRT -PP.Othernotesincludetheperformance [7] D. Silver, “Cooperative pathfinding,” in Proceedings of
∗
of SSSP and GT, which are unable to find solutions beyond theaaaiconferenceonartificialintelligenceandinterac-
30+ robots. The flowtime of them is also greater than others. tive digital entertainment, vol. 1, no. 1, 2005, pp. 117–
Since SSSP allows robots move one by one at each time step, 122.
its flowtime increases rapidly. [8] G. Sharon, R. Stern, A. Felner, and N. R. Sturtevant,
Insummary,SI-CCBSandSI-CPPbothshowgreatscalabil- “Conflict-based search for optimal multi-agent pathfind-
itywithhighsolutionqualitywhereSI-CPPseemstobemore ing,” Artificial Intelligence, vol. 219, pp. 40–66, 2015.
robust comprehensively. While ST-RRT -PP performs well in [9] M. Barer, G. Sharon, R. Stern, and A. Felner, “Subop-
∗
manyinstances,itsscalabilityischallengedbydenseobstacles timal variants of the conflict-based search algorithm for
and large team sizes. the multi-agent pathfinding problem,” in Proceedings of
the International Symposium on Combinatorial Search,
VII. CONCLUSION
vol. 5, no. 1, 2014, pp. 19–27.
Weproposedatwo-levelapproachforaddressingthemulti- [10] J. Li, W. Ruml, and S. Koenig, “EECBS: A bounded-
robot path planning problem in continuous space to generate suboptimal search for multi-agent path finding,” in Pro-
conflict-freetrajectoriesefficiently.Weproposedasingle-robot ceedings of the AAAI Conference on Artificial Intelli-
planner SI-RRT that is sample-efficient. Based on SI-RRT , gence, vol. 35, no. 14, 2021, pp. 12353–12362.
∗ ∗
two variants for multi-robot systems are presented where SI- [11] M. Phillips and M. Likhachev, “Sipp: Safe interval path
CPP used prioritized planning and SI-CCBS used a search planning for dynamic environments,” in Proceedings of
algorithmtoresolveconflictsamongtheindividualtrajectories IEEEInternationalConferenceonRoboticsandAutoma-
computed by SI-RRT . Our experimental results demonstrate tion, 2011, pp. 5628–5635.
∗
that SI-CPP outperforms a state-of-the-art method in terms of [12] K. Okumura and X. De´fago, “Quick multi-robot motion
thesuccessrate,whichshowsthescalabilityofSI-CPPgivena planning by combining sampling and search,” in Pro-
time budget for computation. SI-CPP also shows significantly ceedings of International Joint Conferences on Artificial
smaller makespan. SI-CCBS outperforms the state-of-the-art Intelligence, 2023.
method in terms of the solution quality while not sacrificing [13] F.Grothe,V.N.Hartmann,A.Orthey,andM.Toussaint,
the scalability significantly. As a future direction, we are in “ST-RRT ∗: Asymptotically-optimal bidirectional motion
the progress of a physical multi-robot system using tens of planningthroughspace-time,”inProceedingsofInterna-
Sony toio robots (https://toio.io). tional Conference on Robotics and Automation. IEEE,
2022, pp. 3314–3320.
REFERENCES
[14] C.Yu,Q.Li,S.Gao,andA.Prorok,“Acceleratingmulti-
[1] R. Stern, N. Sturtevant, A. Felner, S. Koenig, H. Ma, agent planning using graph transformers with bounded
T. Walker, J. Li, D. Atzmon, L. Cohen, T. Kumar suboptimality,” in Proceedings of International Confer-
et al., “Multi-agent pathfinding: Definitions, variants, ence on Robotics and Automation, 2023.
and benchmarks,” in Proceedings of the International [15] A. Andreychuk, K. Yakovlev, D. Atzmon, and R. Sternr,
Symposium on Combinatorial Search, vol. 10, no. 1, “Multi-agent pathfinding with continuous time,” in Pro-
2019, pp. 151–158. ceedings of International Joint Conference on Artificial
[2] J.YuandS.LaValle,“Structureandintractabilityofopti- Intelligence, 2019, pp. 39–45.
malmulti-robotpathplanningongraphs,”inProceedings [16] A. Orthey, S. Akbar, and M. Toussaint, “Multilevel mo-
oftheAAAIConferenceonArtificialIntelligence,vol.27, tionplanning:Afiberbundleformulation,”arXivpreprint
no. 1, 2013, pp. 1443–1449. arXiv:2007.09435, 2020.
[3] G. Wagner and H. Choset, “Subdimensional expansion [17] J. Li, Z. Chen, D. Harabor, P. J. Stuckey, and S. Koenig,
for multirobot path planning,” Artificial intelligence, vol. “MAPF-LNS2: Fast repairing for multi-agent path find-
219, pp. 1–24, 2015. ing via large neighborhood search,” in Proceedings of
[4] T. Standley, “Finding optimal solutions to cooperative the AAAI Conference on Artificial Intelligence, vol. 36,
pathfinding problems,” in Proceedings of the AAAI Con- no. 9, 2022, pp. 10256–10265.[18] I. Solis, J. Motes, R. Sandstro¨m, and N. M. Amato,
“Representation-optimalmulti-robotmotionplanningus-
ing conflict-based search,” IEEE Robotics and Automa-
tion Letters, vol. 6, no. 3, pp. 4608–4615, 2021.Supplementary Material
Since SI-RRT assumes that robots move with a fixed velocity, the experimental results might be less convincing to use our
∗
methodsforphysicalrobotswithcomplexdynamics.Thus,weexecutedoursolutionsfromSI-CPPbyrobotsinNVIDIAIsaac
Sim (https://developer.nvidia.com/isaac-sim), which is a dynamic simulator with a high-fidelity physics engine. Since loading
tens of robots in Isaac Sim is resource-intensive, we chose one of the simple robots, Kaya which is shown in Fig. 1a. We
give a safe margin of 15cm for each robot, which is a common setup in real-robot implementations. Given the computational
resource of a PC with the same specification in the main manuscript, we could reliably run 60 robots in Isaac Sim.
A solution from SI-CPP provides waypoints and the time to visit them. The same information was given to the robots in
simulation to visit the waypoints until they arrive at their goals. A solution is valid if no collision or deadlock occurs during
the navigation. Among 20 test instances in the most challenging environment Rect20 (Fig. 1b), 95% of the solutions were
turned out to be valid. The supplementary video includes two example executions in Circ20 and Rect20.
One failed execution was caused by a collision between a robot and a static obstacle (wall). Although the solution provided
a collision-free path, the controller was not able to control the robot to follow the path exactly. Thus, the robot deviated from
the path slightly and collided with the wall. Nevertheless, no additional collision occurred afterward so all robots reached
their goals successfully. The deviations from the path were not significant most times. If the robot is with a more advanced
controller or a local collision avoidance scheme, such a collision can be prevented.
Overall, the execution result of solutions in dynamic simulation shows the feasibility of the proposed methods in real-world
applications.
(a)
(b)
Fig. 1: (a) Kaya robot (omnidirectional) (b) A tested instance of Rect20 with 60 robots in NVIDIA Isaac Sim
4202
rpA
2
]OR.sc[
1v25710.4042:viXra