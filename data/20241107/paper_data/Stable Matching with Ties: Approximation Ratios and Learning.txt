Stable Matching with Ties: Approximation Ratios and Learning
Shiyun Lin ∗ Simon Mauras † Nadav Merlis ‡ Vianney Perchet §
November, 2024
Abstract
We study the problem of matching markets with ties, where one side of the market does
not necessarily have strict preferences over members at its other side. For example, workers do
not always have strict preferences over jobs, students can give the same ranking for different
schools and more. In particular, assume w.l.o.g. that workers’ preferences are determined by
their utility from being matched to each job, which might admit ties. Notably, in contrast to
classical two-sided markets with strict preferences, there is no longer a single stable matching
that simultaneously maximizes the utility for all workers.
We aim to guaranteeeach workerthe largestpossible share from the utility in her best pos-
sible stable matching. We call the ratio between the worker’s best possible stable utility and
its assignedutility the Optimal Stable Share (OSS)-ratio. We firstprovethat distributions over
stable matchings cannot guarantee an OSS-ratio that is sublinear in the number of workers.
Instead, randomizing over possibly non-stable matchings, we show how to achieve a tight log-
arithmic OSS-ratio. Then, we analyze the case where the real utility is not necessarily known
andcanonlybe approximated. Inparticular,weprovideanalgorithmthatguaranteesasimilar
fractionoftheutilitycomparedtothebestpossibleutility. Finally,wemovetoabanditsetting,
whereweselectamatchingateachroundandonlyobservetheutilitiesformatchesweperform.
We show how to utilize our results for approximate utilities to gracefully interpolate between
problems without ties and problems with statistical ties (small suboptimality gaps).
1 Introduction
Two-sidedmarketsareprevalentinvariouscontexts,suchasmatchingstudentstoschools[Abdulkadirog˘lu et al.,
2005a,b],doctorstohospitals[Roth and Peranson,1999],orworkerstojobs[Arcaute and Vassilvitskii,
2009]. Consider a company with N workers and K jobs, where each worker can perform one job
and each job requires one worker, resulting in a set of possible matchings denoted by . The
M
objective is to find a matching that ensures each worker a sufficiently desirable job while taking
into account the preferences and skills of workers in a fair manner.
If each worker has strict preferences over jobs and each job requires skills that induce strict
priorities over workers, then this problem can be solved using the celebrated deferred acceptance
procedure of Gale and Shapley [1962]. It computes a stable matching with no justified envy, where
the only jobs a worker prefers over her own job are the ones that she is less suitable to face than
the currently assigned worker. Moreover, the resulting matching is worker-optimal – all workers
receive their most preferred job among those they could be assigned in a stable matching.
∗Peking University,ENSAE(FairPlay), shiyunlin@stu.pku.edu.cn
†INRIA(FairPlay),simon.mauras@inria.fr
‡FairPlay Joint Team, CREST, ENSAEParis, Merlis.nadav@gmail.com
§ENSAE& Criteo AI Lab (FairPlay), Vianney.perchet@normalesup.org
1
4202
voN
5
]TG.sc[
1v07230.1142:viXraHowever, in real-life scenarios, workers will be indifferent between some jobs. For example,
conference management systems, such as the Toronto Paper Matching System (TPMS), need to
assign papers to reviewers during the review process. Typically, the system generates a numeric
scorerepresentingthesuitabilityofeachreviewerforapaper. Thesescoresarecontinuous,andthus
it is reasonable to assume there are no ties. On the other hand, in the bidding phase, reviewers
can provide their own assessments for each paper as per their expertise and interest, through
categorical ratings such as ‘Eager’, ‘Willing’, ‘In a pinch’, and ‘Not Willing’. These categorical
ratings introduce potential ties in preferences, as the same rating may be bid to multiple papers.
AmatrixU quantifiesthepreferencesofworkersoverjobs,whereU(w,a) [0,1]istheutilityof
∈
aworker w forperformingajoba. Ifsheremainsunmatched,aworkerreceives utility U(w, ) = 0,
⊥
breakingties1infavorofremainingunmatchedratherthanreceivingajobofutility0. Weemphasize
thataworkercanhavethesameutilityfordifferentjobs,buteachjobahasastrictskillordering
a
≻
over workers. Besides, weassumejobshave completepreferencesover workers, thatis,theoption
⊥
of staying unmatched is ranked last. We define the class of stable matchings µ, for which no pair
S
(w,a) is blocking by preferring each other to their respective match (i.e., U(w,a) > U(w,µ(w))
and w µ(a)), where µ is a matching and µ(w) (µ(a)) represents the assigned job (worker) to
a
≻
worker w (job a). Finally, we definethe class of internally stable matchings, which is a relaxation
I
of stable matchings where a blocking pair is considered valid only when both elements of the pair
are currently matched. Notably, observe that .
S ⊂ I ⊂ M
Example 1 (Stable matching with indifference). Let = w ,w ,w be workers and =
1 2 3
W { } A
a ,a be jobs with w w w for all jobs. The utility matrix that encodes the preference of
1 2 1 2 3
{ } ≻ ≻
workers over jobs is as follows:
1 1
U = 1 0 .
 
0 1
 
There are 2 stable matchings in this instance: µ = (w ,a ),(w ,a ) , µ = (w ,a ),(w ,a ) .
1 1 1 3 2 2 1 2 2 1
{ } { }
There are 4 extra non-empty internally stable matchings, where exactly one worker is assigned a
job of utility 1, and unmatched workers/jobs cannot be involved in blocking pairs.
Whenworkershavepreferenceswithindifferences,aparticularstablematchingcanbecomputed
bybreakingtiesarbitrarilyandrunningthedeferred-acceptanceprocedureontheresultinginstance.
However, it is no longer worker-optimal, and workers might prefer different stable matchings. We
define the optimal-stable-share (OSS) of a worker w , denoted U∗(w ), as the highest utility she
i i
can receive in any stable matching.
Example 1 (continued). In Example 1, all workers have an OSS of 1. More precisely, w receives
1
utility U∗(w ) = U(w ,a )= U(w ,a ) = 1 in both stable matchings, w receives utility U∗(w )=
1 1 1 1 2 2 2
U(w ,a ) = 1 in matching µ , and w receives utility U∗(w ) = U(w ,a ) = 1 in matching µ .
2 1 2 3 3 3 2 1
However, it is not possible to guarantee this level of utility to all workers with a single matching
(even non-stable).
Firstly, we investigate theprobleminan offlinesetting. Themain objective is toguarantee each
worker a fraction of their favorite stable job. Since this is not achievable with a single matching, we
turn to randomization. Given a distribution over matchings D ∆( ), we consider the expected
∈ M
utility U (w) := E [U(w,µ(w))] of each worker w. Alternatively, randomizing over matchings
D µ∼D
1To avoid breaking ties, we could also assume that U(w,⊥) is positive, but arbitrarily small.
2can be understood as a rotating schedule, where workers are repeatedly assigned to different jobs.
Such a random matching would ensurethat over time, workers are guaranteed to get jobs that they
value, and will not be discriminated to only get jobs that they dislike.
Furthermore, in practical applications, preference utilities are often not known in advance and
can only beapproximated. Inonlinemarketplaces, forinstance, preferencesmay needto belearned
dynamically through ongoing interactions [Liu et al., 2021]. Therefore, we aim to generalize the
deterministic results to a setting with uncertainty, and further consider the problem in an online
learning setting by leveraging the multi-player multi-armed bandit framework.
1.1 Main contributions
Given an instance, we consider distributions with support included in a class of matchings . The
C
OSS ratio R is equal to the fraction of the optimal-stable-share that each worker is guaranteed to
C
receive, in the best distribution over . More formally,
C
U∗(w)
R := min max .
C D∈∆(C)w∈W U D(w)
First, given the inclusion , observe that R R R . Considering the class of
M I S
S ⊂ I ⊂ M ≤ ≤
stable matchings , observe that R N, as we can choose a distribution D that uniformly picks
S
S ≤
a worker and then chooses a stable matching that is favored by this worker. Unfortunately, our
first result shows that this bound is asymptotically tight.
Theorem 1 (Informal). There exists an instance such that R = Ω(N).
S
Theorem 1 indicates that it is necessary to investigate R to get abetter approximation result.
M
Theorem 2 (Informal). There exists an instance such that R = Ω(logN).
M
Theorem 2 shows a logarithmic lower bound on the OSS ratio, the next result shows that it is
asymptotically tight, even if we restrict our attention to the class of internally stable matchings .
I
Theorem 3 (Informal). For every instance, it holds that R = (logN).
I
O
We prove Theorem 3 by proposingan approximation algorithm (Algorithm 1), which duplicates
each job log N times and outputs a distribution D that randomizes on the log N matchings
⌈ 2 ⌉ ⌈ 2 ⌉
induced by the copies of each job, proving that U (w) U∗(w)/ log N . Importantly, our
D 2
≥ ⌈ ⌉
construction guarantees several additional properties: every matching in the support is internally
stable, our mechanism runs in polynomial time and is dominant strategy incentive compatible (see
Theorem 4).
Then we turn to the situation where the real utility is not necessarily known but can be ap-
proximated, i.e., we know that the utility matrix is in some uncertainty set , and we denote by
U
∗(w) the best optimal-stable-share within . We show that our positive result remains robust
U U
to uncertainty, achieving the same guarantee with only an additive loss bounded by the maximum
level of uncertainty.
Theorem 6 (Informal). For every uncertainty set , there exists a distribution D ∆( ) such
U ∈ M
that for every U ∈ U we have U D(w) ≥ U∗(w)/ ⌈log 2N ⌉−ǫ, where ǫ = 2 ·supU 1,U 2∈U ||U 1 −U 2 ||max.
Theorem6canbeappliedwithrectangularuncertaintysets,usedinstatisticallearningproblems
where the uncertainty set of a utility matrix could be estimated from a dataset (see Example 3).
Next, we take a step further and consider bandit learning in matching markets. All results in
the literature [Liu et al., 2020, Basu et al., 2021, Kong and Li, 2023] are limited to markets with-
out ties, aiming to minimize the worker-optimal stable regret Reg (T), i.e., the cumulated reward
i
3difference of T rounds between the worker-optimal stable matching and the algorithm output. In-
spired by the approximation ratio we derived for offline stable matching with ties, we first define
the α-approximation stable regret Regα(T), which uses an α fraction of the optimal-stable-share
i
as the regret benchmark to serve as a tractable objective in the case with (statistical) ties.
Also, define ∆ as the minimum preference gap among all workers and their first (N +1)-
min
rankedjobs, anddefine∆ as themaximalperturbationtoaworker’s utility suchthattheoptimal
rel
stable matching does not change. While ∆ better characterizes the complexity of learning (with
rel
∆ ∆ ), it is unclear whether computationally tractable algorithms can achieve bounds that
rel min
≥
depend on it, and ∆ serves as a tractable bound. We propose a bandit learning algorithm
min
(ETCO, Algorithm 3) with the following regret upper bound.
Theorem 7 (Informal). The ETCO algorithm with exploration phase of length T ensures that,
0
for every worker w ,
i
∈ W Reg (T) = KlnT , if ∆ = Ω KlnT ,
i O ∆2
min
min T0
(cid:16) (cid:17) (cid:16)q (cid:17)
Regα(T) = T +T KlnT , otherwise.
i O 0 T0
(cid:16) q (cid:17)
Theorem 7 characterizes the regret upper bound of our proposed Algorithm 3 in two regimes for
∆ . Specifically,when∆ islargeenough,thisupperboundmatchesthelowerbound[Sankararaman et al.,
min min
2021] in terms of T and ∆ . If we set T = T1−2δ, then the upper bound guarantees Reg (T) =
min 0 i
(T1−2δ) when ∆ = Ω˜(T−1/2+δ) and Regα(T) = ˜(T1−2δ+T1/2+δ) otherwise. Finally, we pro-
O min i O
vide a lower bound result to demonstrate the fundamental trade-off between the standard regret
in the large gap case and the approximation regret in the small / no gap case.
Theorem 8 (Informal). Assume that an algorithm guarantees sublinear regret for all workers in
all instances with ∆rel = Ω(T−1/2+δ), then there exists an instance such that this algorithm suffers
Ω(T1−2δ) approximation regret for some worker when ∆rel = 0.
Theorem8indicates thatitisimpossibleforany algorithm toobtain best-of-both-worldsregret.
For example, when having a problem instance with ∆ = cT−1/3 for some constant c and we
rel
would like to guarantee sublinearregret on it, we have to suffer Ω(T2/3) approximation regret when
∆ = 0. On the other hand, if we want to guarantee sublinear regret for a smaller ∆ = cT−2/5,
rel rel
we must suffer a larger approximation regret of Ω(T4/5) approximation regret when ∆ = 0.
rel
1.2 The Techniques Involved and Developed
Lower Bounds on the Approximation Ratio. Theorems 1 and 2 respectively provide lower
bound on R and R , by constructing instances where all jobs share the same global ranking of
S M
workers. In such settings, a key insight is that stable matchings have a much simpler combinatorial
structure, and can be computed using the serial dictatorship mechanism: workers sequentially
choose a job with the largest utility, in the order defined by the global ranking. Certain markets
have a global ranking on one side [Irving et al., 2008], and we emphasize that our lower bounds
also apply to this important restricted setting.
Upper Bound on the Approximation Ratio. Theorem 3 shows that by duplicating each job
m > log N times, every worker will receive a job that is as good as the best job they could have
2
received in the original instance. This proof is the first technical contribution of our paper. It
proceeds by showing that if our procedure with m duplications does not give a satisfactory job to
some worker w, it is because of the existence of m workers who received w’s job, who inductively
imply the existence of other workers, which implies that the total number of workers is N > 2m.
Robustness on the Approximation Ratio when Facing Uncertainty. To prove Theorem 6,
we first propose a variant of our first algorithm for generating allocation schemes in matching
4markets with ties. This variant modifies the definition of the duplicated preference list to incorpo-
rate the concept of ǫ-stable matching, it guarantees the same approximation ratio to the optimal
ǫ-stable matching with an additional ǫ additive error (Theorem 5). Moreover, incorporating ǫ-
stability enhances robustness to small perturbations in the utility matrix (Lemma 1). Combining
these two salient features of ǫ-stable matching, we are able to provide approximation guarantees
on the optimal stable share within an uncertainty set.
Upper and Lower Bounds in Bandit Learning. The upper bound (Theorem 7) proof fol-
lows the typical approach for explore-then-commit type algorithms in multi-armed bandits. First,
concentration inequalities are employed to ensure that the algorithm stops exploring whenever it
is possible to identify the workers’ preferences; otherwise, they quantify the estimation error in
the utilities. Afterward, the optimality of Gale-Shapley algorithm and the approximation oracle
provide a sound guarantee in the exploitation phase. For the lower bound (Theorem 8), we con-
struct two instances with 4 workers and 4 jobs, in which the utility matrices differ in only one
entry, which determines whether the problem has meaningful ties. This slight deviation results in
a linear difference in benchmark utilities for three workers, creating a discontinuity in both utility
and regret, which further highlights a trade-off between the two regimes of the utility gap. Tech-
nically, we apply an information-theoretic approach [Garivier et al., 2019] to prove that the entry
that changes between the instances must be sufficiently sampled to avoid linear regret. We then
show that due to the specific structure of the instance, this causes a large approximation regret for
one of the other players.
1.3 Related Work
Stable Matching with Ties The natural variant of the seminal work of Gale and Shapley [1962]
arises when the participants are permitted to have tied or incomplete preference lists. Irving [1994]
defined three stability criteria in this setting, namely weak stability, strong stability, and super-
stability. Weak stability has received the most attention in the literature [Manlove et al., 2002,
Halld´orsson et al., 2003, 2004, Kira´ly, 2011], since a weak stable matching is always guaranteed
to exist, unlike for strong or super-stability. Although existence is guaranteed, weakly stable
matchings can have different sizes. The problem of finding the largest-sized matching is NP-
hard [Iwama and Miyazaki, 2008], and the problem of deciding whether a matching pair is weakly
stable is NP-complete [Manlove et al., 2002].
While most of the literature focuses on finding a maximum cardinality weakly stable matching,
we investigate the problem from a different perspective, aiming to fairly allocate jobs to workers
such that each worker obtains a utility that is at least a certain fraction of their optimal stable
matching and we proceed to characterize the approximation ratio of such fair allocation.
Fairness in Two-sided Matching Therearegrowing concerns aboutfairness inatwo-sided mar-
ketinrecentyears. Regardingfairdivision,Freeman et al.[2021]considersmany-to-manymatching
andproposesthenotionof double envy-freeness up to one match (DEF1) anddouble maximin share
guarantee (DMMS). Igarashi et al. [2023] studies many-to-one matching and focuses on guarantee-
ing EF1 for one side together with a stability condition for both sides. Regarding fairness in
machine learning, Karni et al. [2022] focuses on producing stable matchings which also satisfy the
preference-informed individual fairness (PIIF)[Kim et al., 2020], which requires the allocations to
be individually fair[Dwork et al., 2012] but also allows for deviations aligned with preferences of
the users.
Our model distinguishes from these results as we consider a one-to-one matching market, in
which the standard notions such as EF1 and MMS are meaningless. We instead propose a novel
5share-based fairness notion (OSS-ratio), aiming to measure the gaining of each worker compared
to its optimal-stable-share. Building upon this, we provide an algorithm that returns a best-of-
both-worlds random matching, achieving a fraction of our optimal-stable-share in expectation, and
being internally stable for every realization.
Bandit Learning in Matching Markets Das and Kamenica [2005] first introduces the bandit
problem in matching markets. Recently, a rich line of works has studied this model [Liu et al.,
2020,2021,Basu et al.,2021,Sankararaman et al.,2021,Kong and Li,2023]. Inthebanditsetting,
players and arms correspond to the two sides of the market, each arm has fixed known preference
over players while each player has unknown preferences over arms, which is encoded by utilities.
Player-optimal stable regret [Liu et al.,2020]isdefinedforeachplayer,whichcomparestheexpected
utilityofthealgorithm’soutputwiththeutilityofitsmostpreferredstablematchingarm. However,
all results in the current bandit learning literature have a fundamental limit – requiring the market
not to admit ties, otherwise, the stable regret would be infinite and meaningless, and the previous
frameworkcouldn’tbegeneralizedtoamarketpossiblywithties,sincethestableregretisessentially
intractable in such scenario.
Our work first focuses on the offline stable matching with ties, derives a tight logarithmic
approximation ratio (OSS-ratio), and provides an offline oracle to achieve this ratio. Building upon
the offline result, we define the approximation regret, a tractable objective in the setting with
(statistical) ties. We then propose a learning algorithm, which aims at good performance both in
problems without ties (stable regret) and with ties (approximation stable regret).
2 Preliminaries
We refer to the matching market and the designer outputting a matching as a company. There are
N workersandK jobswithinthecompany. Wedenotethesetofworkersby = w ,w , ,w
1 2 N
W { ··· }
and the set of jobs by = a ,a , ,a . The company assigns jobs to the workers, such that
1 2 K
A { ··· }
each job could be assigned to at most one worker, and each worker could execute at most one job.
The assignment is therefore a matching µ. We shall use µ(w) to represent the allocated job to
worker w, and µ(a) to denote the worker with job a. If a worker w or a job a remain unmatched,
we will use the notation µ(w) = or µ(a) = .
⊥ ⊥
For every job, the company has a strict rating over the workers based on their expertise and
ability on this job. Specifically, if w w′, worker w performsjob a strictly better than w′. On the
a
≻
otherhand,workersalsohavepreferencesover thejobs,anditispossiblethataworkerisindifferent
among several jobs. The preferences of workers on jobs are represented through a utility matrix U,
where U(w,a) [0,1] denotes the preference of worker w on job a. If U(w,a) > U(w,a′), worker
∈
w prefers job a over a′, and U(w,a) = U(w,a′) implies that w is indifferent between jobs a and a′.
For simplicity, we will assume that a worker w will refuse to be matched with job a if it has utility
U(w,a) = 0; stated otherwise, either U(w, ) is positive but infinitely small or U(w, ) = 0 and
⊥ ⊥
ties are broken in favor of . As a consequence, a problem instance (U,P ) is defined by a utility
a
⊥
matrix U and a preference profile P representing the preferences of jobs over workers.
a
Stabilityisakeyconceptintwo-sidedmatchingmarkets. Withindifference,thereexistsdifferent
notions of stability and we shall focus on weak stability [Irving, 1994]. Specifically, a matching µ is
weakly stable if there is no worker-job pair such that they both strictly prefer each other to their
allocated partners:
Definition 1 (Weak Stability). A matching µ is weakly stable if there is no blocking pair (w,a)
such that w µ(a) and U(w,a) > U(w,µ(w)).
a
≻
6If a matching is weakly stable, there exists a tie-breaking mechanism such that this matching
is stable in the resulting instance with strict preferences. Conversely, any stable matching that is
generated using a tie-breaking mechanism is also weakly stable in the original instance. Without
causing ambiguity, we will refer to weak stable as stable for brevity. Furthermore, internally sta-
ble matching [Liu et al., 2014] refers to a matching where there are no blocking pairs when only
considering the matched workers and jobs.
Definition 2 (Internal Stability). A matching µ is internally stable if there is no internally block-
ing pair (w,a) such that 1) both w and a are matched in µ, and 2) w µ(a) and U(w,a) >
a
≻
U(w,µ(w)).
Given a problem instance, we define the following classes of matchings:
:= µ : µ is a matching , := µ :µ is a stable matching ,
M { } S { }
:= µ : µ is an internally stable matching .
I { }
In a matching market with indifferences, stable matching is not unique, given different tie-
breaking mechanisms. A job a is called a valid stable match of worker w if there exists a sta-
ble matching matches w with a. We say a is the optimal stable match of worker w if it is the
most preferred valid stable match, i.e., there exists a matching µ∗ such that µ∗(w) = a and
∈ S
U(w,µ∗(w)) = max U(w,µ(w)). WecallU(w,µ∗(w))theoptimal stable share (OSS)forworker
µ∈S
w, denoted as U∗(w).
The canonical results in two-sided matching markets are the Gale-Shapley theorem and algo-
rithm (GS) [Gale and Shapley, 1962], which assert that stable matchings always exist for every
matching market instance and the algorithm finds one in O(n2) time. The GS algorithm proceeds
as follows. First, each worker independently asks to beallocated to the jobs she prefers most. Each
job rejects all but the worker it prefers most among those requests. In the following steps, workers
ask to be allocated to their most preferred job among those who have not rejected it, and every
job only accepts its most preferred request. The algorithm stops when no rejection happens, and
outputs the last matching. In a matching market without ties, a matching returned by the GS
algorithm is always optimal for each member of the proposing side. However, when there is indif-
ference in the preference ranking, the optimal valid job for each worker may come from different
stable matchings.
Example 1 in Section 1 demonstrates that different workers may have different favored stable
matchings in a market. In particular, worker w and w receive their OSS in stable matching µ
2 3 2
and µ , respectively, while w receive her OSS in both stable matchings. However, it is impossible
1 1
to give every worker a utility no less than their OSS with a single matching (even non-stable).
Based on this impossibility result, a natural question arises as to whether an allocation exists such
that every worker is at least satisfied at a certain level. Formally, given a problem instance and a
class of matchings , we are interested in the following optimal stable share-ratio (OSS-ratio):
C
U∗(w)
R := min max , (1)
C D∈∆(C)w∈W U D(w)
where ∆( ) is the set of distributions over and U (w) is the expected utility of worker w given
D
C C
a distribution D, i.e., U (w) = E [U(w,µ(w))]. When we are constrained to search over the
D µ∼D
set of matchings, stable matchings and internally stable matchings, R , R and R are defined
M S I
accordingly. Intuitively, Eq.(1) is an approximation ratio that quantifies the fraction of utility that
any worker in the market could expect to obtain compared to their stable matching benchmark.
If a company guarantees maxU R
M
α, then it is guaranteed that given any possible worker and
≤
job preferences, every worker w can gain at least 1U∗(w ) in the market in expectation.
i α i
73 Approximation Ratios for Stable Matching with Ties
In this section, we aim to characterize the scale of the OSS-ratio R . As a first observation,
C
implies R R R . In Section 3.1, we provide a lower bound on R , which is
M I S S
S ⊂ I ⊂ M ≤ ≤
linear in the number of workers N. In Section 3.2, we extend the support of the distribution from
stable matchings to all possible matchings, showing that R = Ω(logN). Then in Section 3.3, we
M
proposeanalgorithm thatoutputsadistributionover internally stablematchings, anddemonstrate
that R = (logN), which indicates the asymptotic optimality of the proposed algorithm.
I
O
3.1 Lower Bound for Distributions over Weakly Stable Matchings
We firstprove thatto obtain afavorable OSS-ratio, itis necessary to consider non-stablematchings
in the support of the allocation distribution D.
Theorem 1. There exists an instance, such that for any distribution over stable matchings, one
worker only receives a 2/N fraction of their optimal stable share, i.e.,
N
R = Ω(N). (2)
S
≥ 2
We defer the formal proof of Theorem 1 to Appendix C. As illustrated in Figure 1, we con-
struct an instance with N/2 highly-skilled workers and N/2 regular workers, such that every stable
matching can satisfy at most one regular worker at a time, proving that R N/2.
S
≥
highly-skilled workers
regular workers
Figure 1: Lower bound on R . All jobs have the same ordering over workers, from top to bottom.
S
Any stable matching can be obtained by letting the first worker pick an job, then the second, etc.
Hence, each stable matching contains at most one blue edge.
However, a closer look atour instancereveals thatall regular workers can besatisfiedin asingle
(non-stable) matching (containing all blue edges). Thus, we turn our attention to distribution over
(possibly non-stable) matchings, and the ratio R .
M
3.2 Lower Bound for Distributions over Matchings
Next, we show that if we extend the support of D to include all matchings (including non-stable
ones), i.e., D ∆( ), the ratio R is still lower bounded by logN.
M
∈ M
Theorem 2. There exists an instance such that for any distribution over (possibly non-stable)
matchings, one worker only receives an 1/Ω(logN) fraction of their optimal stable share, i.e.,
R = Ω(logN). (3)
M
8I
n−1
I
n−1
I0 I1 I2 In
Figure 2: Lower bound on R . In each example, left nodes represent workers while right nodes
M
representjobs. Ifthereisanedgeconnectingaleftnodew andarightnodea,wehaveU(w,a) = 1,
and U(w,a) = 0 otherwise. All the right nodes without edges connecting to them are hidden from
the graph.
WedefertheformalproofofTheorem2toAppendixC,andpresenthereahighleveldescription
oftheconstruction. AsillustratedinFigure2,werecursivelyconstructinstances whereeachworker
could be assigned to a job they like, but such that the number of workers grows logarithmically
faster than the number of valuable jobs, proving that each worker can only receive a logarithmic
fraction of their optimal stable share.
3.3 Upper Bound
Finally, we show that the logarithmic ratio obtained in the previous section is asymptotically tight,
even if we consider distributions over internally stable matching.
Theorem 3. For any problem instance, there exists a distribution D over internally stable match-
ings such that all workers only receive an 1/ (logN) fraction of their optimal stable share, i.e.,
O
R = (logN). (4)
I
O
Algorithm1willgeneratesauniformdistributionoverminternallystablematchingsµ˜ ,...,µ˜ .
1 m
Each worker w will be matched in exactly one matching µ˜ , where we call i the index of w, denoted
i
index(w). The main technical part of the proof is to show that having m > log N guarantees that
2
U (w) = U(w,µ˜ (w))/m U∗(w)/m.
D i
≥
We use Example 2 to illustrate the procedure stated in Algorithm 1.
Example 2. Let = w ,w ,w , = a ,a ,a . We consider the following preference list P
1 2 3 1 2 3 a
W { } A { }
of jobs over workers, and utility matrix U that encodes the preference of workers over jobs:
a :w w w , 1 1 0
1 2 1 3
≻ ≻
a :w w w , U = 0.5 0.1 0.1 .
2 1 3 2
≻ ≻  
a :w w w . 0 0.8 0
3 1 2 3
≻ ≻
 
If m =2, the preference profile P generated from the algorithm is
w
(1) (1) (2) (2) (1) (2)
w :a a a a a a ,
1 1 ≻ 2 ≻ 1 ≻ 2 ≻ 3 ≻ 3
(1) (2) (1) (1) (2) (2)
w :a a a a a a ,
2 1 ≻ 1 ≻ 2 ≻ 3 ≻ 2 ≻ 3
(1) (2) (1) (1) (2) (2)
w :a a a a a a .
3 2 ≻ 2 ≻ 1 ≻ 3 ≻ 1 ≻ 3
9Algorithm 1 Internally Stable Matchings for Matching Market with Indifference
Input: N workers, K jobs, Utility matrix U that encodes the preference of workers over jobs,
strict preference list P of jobs over workers, a positive number m.
a
1: For each job a , duplicate it m times and denote the i-th copy as a(i).
∈A
2: Each replica a(i) shares the same preference P a as the original job a.
3: For each worker w, define an ordering P w, by sorting jobs a( ki) by decreasing utility U(w,a),
breaking ties in favour of lower duplication index i, then in favour of lower index k. That is,
U(w,a ) > U(w,a ) or
k ℓ
a(i) a(j) U(w,a ) = U(w,a ) and i< j or
k ≻Pw ℓ ⇔  k ℓ
 U(w,a ) = U(w,a ) and i= j and k < ℓ
k ℓ

4: Run Gale-Shapley algorithm on P w and P a to compute a worker-optimal stable matching µ˜.
5: For each i [m], build a matching µ˜ i, which matches each job a with µ˜ i(a) := µ˜(a(i)).
∈
Output: the distribution D which selects each matching µ˜ with probability 1/m.
i
Running Gale-Shapley algorithm on P and P , the worker-optimal stable matching would be µ˜ =
w a
(1) (1) (2)
(w ,a ),(w ,a ),(w ,a ) , and we can recover two internally stable matchings from µ˜, i.e.,
{ 1 2 2 1 3 2 }
µ˜ = (w ,a ),(w ,a ) and µ˜ = (w ,a ) .
1 1 2 2 1 2 3 2
{ } { }
Recall that after running Algorithm 1, we define the index of a worker as the index of the job
(i)
she receives, that is, index(w) = i if worker w receives a for some j.
j
Definition 3. Given any stable matching µ, we define a graph G = (V ,E ) where
µ µ µ
V := w : U(w,µ(w)) m U (w) ,
µ D
{ ∈ W ≥ · }
E := (w,w′) V2 : µ(w) = µ˜ (w′) where j = index(w′) < index(w) .
µ { ∈ µ j }
Informally, G is the graph of workers who (weakly) prefer µ to their match in distribution
µ
D, where an edge (w,w′) means that w′ received a job that w would have liked. Next, we show
properties on the graph G , which we illustrate in Figure 3.
µ
index workers jobs
µ˜
1 a(1) ...a(1)
1 K
µ
2 a(2) ...a(2)
1 K
E
µ
3 a(3) ...a(3)
1 K
Figure 3: The graph G = (V ,E ) is a directed forest. The matching µ˜, computed in Algorithm 1
µ µ µ
matches each worker to a single (copy of) job in µ˜. In the stable matching µ, each worker w is
connected to all copies of µ(w) which have lower index.
Proposition 1. For any stable matching µ, the following holds
• G is a directed forest (there is no cycle and each vertex has at most one incoming edge),
µ
10• For every worker w V with i = index(w), and for every 1 j < i, there is a worker
µ
∈ ≤
w′ V with j = index(w′) such that (w,w′) E .
µ µ
∈ ∈
Proof. The graph G is a directed forest by construction. Indeed, it has no cycle because edges
µ
connect workers to lower index workers. And every node has at most one incoming edge because µ˜
matches each worker to at most one job, and µ matches each job to at most one worker.
Fix a worker w V with i = index(w), let 1 j < i, and let a = µ(w). By definition of V ,
µ µ
∈ ≤
worker w weakly prefers µ to D, that is U(w,a) m U (w) = U(w,µ˜ (w)). By definition of w’s
D i
≥ ·
preference list P in Algorithm 1, the lexicographic ordering gives that
w
a(j) µ˜(w).
≻Pw
Because µ˜ is a stable matching, it should not be blocked by the pair (w,a(j)). Thus, there exists a
worker w′ such that µ˜(w′) = a(j) and
∈ W
w′ w.
a
≻
Finally, because µ is a stable matching, it should not be blocked by the pair (w′,a), thus
U(w′,µ(w)) U(w′,a) = m U (w′),
D
≥ ·
proving that w′ V . Hence, there is an edge (w,w′) E , which concludes the proof.
µ µ
∈ ∈
Proposition 2. In the graph G , each node of index i 1 can reach 2i−1 nodes (including itself).
µ
≥
Proof. We show that the property holds by induction on i. The property trivially holds for i = 1.
Let i > 1 such that there is a worker w V with index(w) = i. Using Proposition 1, there is an
µ
∈
edge (w,w ) E with index(w ) = j for every 1 j < i. Because the graph is a directed forest,
j µ j
∈ ≤
the set of nodes reachable from each w are disjoint. Thus, the number of nodes reachable from w
j
(including itself) is 1+ i−1 2j−1 = 2i−1.
j=1
Finally, we concludePwith the proof that Algorithm 1 computes a distribution over internally
stable matching which guarantees each worker a logarithmic fraction of their optimal stable share.
Proof of Theorem 3. Algorithm 1 first computes a stable matching µ˜ for the instance with dupli-
cated jobs, then build m matchings µ˜ ,...,µ˜ . If there were a pair (w,a) with index(w) = i which
1 m
blocks matching µ˜ , that is U(w,a) > U(w,µ˜ (w)) and w µ˜ (a), then (w,a(i)) would block µ˜,
i i a i
≻
which is a contradiction. Thus, each matching µ˜ is internally stable.
i
Now, let us assume, that there is a stable matching µ in which a worker w with index(w) = i
receives a = µ(w) having utility U(w,a) > U(w,µ˜ (w)). In the matching µ˜, job a(m) must be
i
matched to some worker w′ such that w′ w, otherwise (w,a) would block µ˜. Moreover, we
a
≻
must have U(w′,µ(w′)) m U (w′) otherwise (w′,a) would be blocking µ. Thus, there is a node
D
≥ ·
w′ V of index m, which proves that there exists at least 2m−1 nodes, and thus that N 2m−1.
µ
∈ ≥
By contrapositive, if we set m > 1+log N, then we have m U (w) U∗(w) for every worker w,
2 D
· ≥
which concludes the proof.2
Finally, we show that Algorithm 1 cannot be manipulated by a worker who mis-report her
preferences to obtain a distribution that gives them a higher utility.
2Interestingly, we can show that m > log N is sufficient, because each µ(w)(i) is matched in µ˜ to a different
2
worker w
i
∈V µ, who can reach 2i−1 distinct workers in G µ, none of them being w (which would contradict the fact
thatµ˜ istheworkeroptimalmatching),whichgivesatleast 2m workersintotal. However,forthesakeofsimplicity,
we do not present thisimproved bound.
11Theorem 4. Algorithm 1 is dominant strategy incentive compatible: for every utility matrices U
and U′ that differ only on the row of worker w, let D and D′ be the distributions computed by
Algorithm 1, then U D(w) U D′(w).
≥
Proof. We will use the fact that when workers have strict preferences, Gale and Shapley’s worker-
proposing deferred acceptance procedure is dominant strategy incentive compatible, in the sense
that it is always optimal for workers to report their true preferences [Dubins and Freedman, 1981].
First, notice that for each worker w, the ranking P used in Algorithm 1 is consistent with the
w
utilities of w, and that all copies of a job with higher utility will be ranked before copies of a worse
job.
To see that it is optimal for a worker w to report her true vector of utility, we will give her
more strategic power, and we will let her choose her ranking P′ over all the duplicated jobs. By
w
the incentive compatibility property of the deferred acceptance procedure with strict preferences,
she cannot obtain any job ranked above µ˜(w) in P . And because P is consistent with w’s utility,
w w
it is optimal to report P′ = P .
w w
4 Robustness and ǫ-Stability
InSection 3, we proposean asymptotically tight algorithm to approximate theoptimal stable share
in a matching market with ties, where the stability concept under consideration is fully resistant
to blocking pairs. However, in many real-world scenarios, slight fluctuations in preferences or
minor uncertainties can make exact stability difficult to achieve or overly restrictive. This brings
us to the concept of ǫ-stable matching, where we relax the stability condition to allow for minor,
bounded blocking pairs. By tolerating small instabilities up to a predefined threshold ǫ, ǫ-stable
matchingoffersaframeworkforrobustmatchingsthatareresilienttosmallperturbationsinagents’
preferences,makingthematchingmodelmoreadaptabletopracticalenvironments. Inthefollowing,
we first introduce the concept of ǫ-stability.
Definition 4 (ǫ-Stability). Given ǫ 0, a matching µ is ǫ-stable if there is no ǫ-blocking pair
≥
(w,a) such that w µ(a) and U(w,a) > U(w,µ(w))+ǫ.
a
≻
Thenotionofǫ-stability is arelaxation ofweak stability, wheresettingǫ =0makes itequivalent
toweakstability (Definition1). Ingeneral, ǫ-stablematchingisnotunique,andthereisnotasingle
ǫ-stable matching that simultaneously maximizes the utilities for all workers. Therefore, similar
to matching markets with ties, we define := µ :µ is an ǫ-stable matching , and we call a as a
ǫ
S { }
valid ǫ-stable match of worker w if there exists an ǫ-stable matching matches w with a, and it is
the optimal ǫ-stable match of worker w if it is the most preferred valid ǫ-stable match, i.e., there
exists a matching µ∗ such that µ∗(w) = a and U(w,µ∗(w)) = max U(w,µ(w)). And we
ǫ ∈ Sǫ ǫ ǫ µ∈Sǫ
say U(w,µ∗(w)) is the optimal ǫ-stable share for worker w, denoted as U∗(w).
ǫ ǫ
We then proposeAlgorithm 2 which outputs a randomized matching whoseexpected utility has
a (logN)-approximation ratio for the optimal ǫ-stable share U∗(w) with an additional ǫ error.
ǫ
Theorem 5. Given any utility matrix U, parameter m = log N , and the instability tolerance
⌈ 2 ⌉
ǫ 0, Algorithm 2 computes a distribution D ∆( ) over internally stable matchings, such that
≥ ∈ I
U∗(w)
U (w) ǫ ǫ, w . (5)
D
≥ m − ∀ ∈W
The proof of Theorem 5 is similar to that of Theorem 3 and we defer it to Appendix D. Inter-
estingly, the distribution D randomizes over internally-stable matchings, which do not depend on
12Algorithm 2 ǫ-Oracle for Approximated Worker Optimal Stable Matching
Input: N workers, K jobs, Utility matrix U that encodes the preference of workers over jobs,
strict preference profile P of jobs, an integer m 1, and the instability tolerance ǫ 0.
a
≥ ≥
1: For each job a , duplicate it m times and denote the i-th copy as a(i).
∈A
2: Each replica a(i) shares the same preference P a as the original job a.
3: For every worker w and job a(i), define the utility
U(w,a(i)) := U(w,a) (i 1)ǫ
− −
anduseittogenerate theworkers’preferenceprofileP (breakingties infavor oflower indices).
w
4: Run Gale-Shapley algorithm on P w and P a to compute a worker-optimal stable matching µ˜.
5: For each i [m], build a matching µ˜ i, which matches each job a with µ˜ i(a) := µ˜(a(i)).
∈
Output: the distribution D which selects each matching µ˜ with probability 1/m.
i
ǫ. The next lemma aims to characterize the robustness introduced by ǫ-stability. For convenience,
we denote U (resp. U ) the stable matchings (ǫ-stable matchings) with respect to U.
S Sǫ
Lemma 1. Fix the preferences of jobs over workers. Given two utility matrices U and U such
1 2
that3 U U < ǫ, then any stable-matching µ for U , is also ǫ-stable with respect to U .
k 1 − 2 kmax 2 1 2
Proof. If a matching µ is stable with respect to U , then for any (w,a) pair such that w µ(a),
1 a
≻
we must have
U (w,a) U (w,µ(w)), (6)
1 1
≤
from the definition of stable matching (Definition 1).
Since U U ǫ, we have that for any (w,a) pair, U (w,a) U (w,a) ǫ. Therefore,
k 1 − 2 kmax ≤ 2 | 1 − 2 | ≤ 2
ǫ ǫ
U (w,a) U (w,a)+ U (w,µ(w))+ U (w,µ(w))+ǫ, (7)
2 1 1 2
≤ 2 ≤ 2 ≤
where the first and the last inequality come from U U ǫ, while the second inequality
k 1 − 2 kmax ≤ 2
holds according to Eq.(6). Therefore, combining w µ(a) and Eq.(7), we can conclude that
a
≻
matching µ is ǫ-stable with respect to U .
2
In labor markets, the preferences of workers are usually estimated with some uncertainty. For
instance, we may have a dataset that consists of i.i.d. observations from the ground-truth utility
matrix, and we can build an uncertainty set for each entry based on concentration inequalities. In
Theorem 6, we aim to show that given an uncertainty set for a utility matrix, using the ǫ-oracle
(Algorithm 2) and leveraging the robustness of ǫ-stable matching, we are able to derive a (random)
matching which gives every worker a logarithmic approximation to the optimal stable share within
the uncertainty set.
Theorem 6. Given an uncertainty set , the optimal stable share within is
U U
∗(w) := sup max U(w,µ(w)), w . (8)
U U∈Uµ∈SU ∀ ∈W
We define the center Uˆ of the set , and the uncertainty parameter as
U
Uˆ(w,a) =
infU∈U U(w,a)+supU∈U U(w,a)
, ǫ = 2 sup U U .
1 2 max
2 ·U 1,U 2∈U|| − ||
3We recall that themax norm of a matrix A=(A i,j),is definedby kAk
max
=max i,j|A i,j|.
13Algorithm 2 with input Uˆ, m = log N , and ǫ outputs a distribution D ∆( ) such that
⌈ 2 ⌉ ∈ M
∗(w)
U (w) U ǫ, w .
D
≥ m − ∀ ∈ W
Proof. By running Algorithm 2 with U =Uˆ,ǫ = ǫ,m = log N , from Theorem 5, we get
2
⌈ ⌉
Uˆ∗(w)
U (w) ǫ ǫ, w . (9)
D
≥ m − ∀ ∈W
By construction, any utility matrix U satisfies U Uˆ ǫ. From Lemma 1, we know
∈ U k − kmax ≤ 2
that for any matching µ U , U , we have µ Uˆ , that is
∈ S ∀ ∈ U ∈ Sǫ
U Uˆ
.
S ⊆ Sǫ
U∈U
[
Therefore, for the optimal stable share, we have
∗(w) Uˆ∗(w), w . (10)
U ≤ ǫ ∀ ∈ W
Combining Eq.(9) and (10), the conclusion holds.
Example 3 illustrates an application of Theorem 6 to batch learning problems.
Example 3 (Batch learning). Suppose that we have a dataset of size T, where each data point U
is a noisy observation of the ground-truth utility matrix U˜, i.e., each U(i,j), i [N],j [K] is
sampled from a1-sub-GaussiandistributionwithmeanU˜(i,j). Givenδ asapre-∀ spe∈ cified par∈ ameter,
ln(1)
set ǫ = 2 δ , and define the uncertainty set for each entry (w,a) as
T
q
ǫ
= U(w,a) : U(w,a) Uˆ(w,a) ,
w,a
U | − | ≤ 2
n o
and = , where Uˆ is the empirical mean utility matrix computed from the
U
(w,a)∈W×AUw,a
dataset. The optimal stable share within the uncertainty set ∗(w) could be defined as in Eq.(8).
By LemmaN 3, we know that with probability 1 δ, the grouU nd-truth utility matrix U˜ , and
− ∈ U
hence U˜∗(w) ∗(w). Therefore, by running Algorithm 2 with the empirical mean utility matrix
≤ U
ln(1)
as input, and set ǫ = 2 δ , m = log N , we have the corresponding output distribution D
T ⌈ 2 ⌉
over matchings satisfiesq
U˜∗(w) ln(1)
U (w) 2 δ , w , with probability 1 δ.
D
≥ log N − s T ∀ ∈W −
⌈ 2 ⌉
5 Bandit Learning in Matching Markets
In Example 3, we illustrate an application of our proposed offline oracle within learning problems.
In this section, we shift our focus to the online learning setting, recasting the learning problem in
matching markets as a multi-player, multi-armed bandit problem, and we aim to show how the
offline result could be used to gracefully interpolate between learning problems without ties and
problems with statistical ties.
In an online marketplace, a company can conduct interviews to evaluate worker capabilities be-
foreemployment, butthepreferencesofworkersoverdifferentjobsareusuallyunknownbeforehand.
14Fortunately, companies usually have numerous similar jobs to be delegated and the uncertain pref-
erences can thus be learned by some ex-post evaluation during the iterative matching. Recently, a
richlineofworks usesthemulti-armed bandit(MAB) frameworktomodelthissituation [Liu et al.,
2020, 2021, Basu et al., 2021, Kong and Li, 2023] (where the workers are usually called “players”
and jobs are “arms”). The preferences of jobs over workers are known while the utility matrix U
that encodes the preferences of workers over jobs is learned through interactions.
Formally, we consider a company that outputs at each round t = 1,2, a matching µ ,
t
···
which allocates jobs to workers. For every matched pair (w ,µ (w )), the company observes a 1-
i t i
subgaussian random reward X (t) of expectation U(w,µ (w)), and we assume that U(w,a) [0,1]
i t
∈
forall(w,a)-pairs. Asinpreviousworksonbanditstablematchingliterature,toensureeachworker
has a chance of being matched at each round, we assume that there are more jobs than workers
(N K) [Liu et al., 2020, 2021, Sankararaman et al., 2021, Basu et al., 2021, Kong and Li, 2023].
≤
Actually, as we consider the problem in a centralized way, we can without loss of generality add
jobs with zero utilities if N > K, and can also randomly allocate some jobs to workers that were
not matched by the offline oracle used in the online algorithm.
The company objective is to learn the worker-optimal stable matching µ∗(w ) through inter-
i
actions. In particular, it aims is to minimize the worker-optimal stable regret for each w ,
i
∈ W
defined as the cumulative reward difference between being matched with µ∗ and that w receives
i i
over T rounds:
T
Reg (T)= T U∗(w ) E X (t) . (11)
i i i
· −
" #
t=1
X
The expectation is taken over the randomness of the received reward and the company allocation
strategy.
Previous workson banditlearningin matching markets consider minimizingtheworker-optimal
stable regret in markets without ties [Liu et al., 2020, Basu et al., 2021, Kong and Li, 2023], and
their results are inapplicable in markets with ties. Specifically, all the previous regret bounds
depend on 1 , where ∆ is the minimum utility gap across all workers w and jobs a, i.e., ∆ =
∆2
min wmin a,a′ U(w,a) U(w,a′)4. As noted in Example 2 in Liu et al. [2020], this dependence
| − |
cannot be improved in general, implying that to achieve sublinear stable regret, ∆ should be
ω(1/√T).
When the benchmark is not achievable (either due to computational or statistical reasons),
it is common to consider an α-approximation regret, which aims to guarantee sublinear regret
with respect to an α-fraction of the benchmark utility [Kakade et al., 2007, Streeter and Golovin,
2008, Chen et al., 2016]. In our context, we showed that when ties are present, no algorithm can
simultaneously guaranteethatallworkersgettheiroptimalstableshare. Therefore, weassumethat
given a utility matrix U, we have an offline oracle that can output a randomized matching such
that the expected matching utility for each worker is at least an α-fraction of the optimal stable
share U∗(w), with additional error ǫ. Formally, assume that we have the following approximation
oracle:
Definition 5 ((α,ǫ)-ApproximationOracle). An(α, ǫ)-approximation oracle takes a utility matrix
U as input and outputs a (randomized) matching µ˜, such that for every worker w, we have
E[U (w)] αU (w) U∗(w) ǫ,
µ˜
≥ · −
4Different works may have slightly different definitions on ∆; this is the strongest definition, and the negative
result could begeneralized to other definitions of ∆.
15where αU (0,1]N is the approximation ratio vector of elements αU (w) , which might
∈ w∈W
depend on the input utility matrix U, and ǫ 0 is the additional error term. For brevity, we
≥ (cid:8) (cid:9)
usually drop the superscript and denote it as α. Moreover, if an approximation oracle guarantees
the same ratio for all workers independent of U, we refer to it as an (α,ǫ)-approximation oracle.
For example, Algorithm 2 guarantees that for any input utility matrix U, αU (w) 1/log N.
≥ 2
With ties, our regret metric should not compare against the optimal stable share each time, but
against an α-fraction of the optimal stable share, since the offline oracle can only guarantee this
fraction in expectation:
T
Regα(T)= αT U∗(w ) E X (t) , (12)
i · i − i
" #
t=1
X
where α (0,1] is the approximation ratio given by the offline oracle. We sometimes want to
∈
emphasize that the observations X(t) come from a distribution ν; we then write Reg (T;ν) and
i
Regα(T;ν).
i
Without ties, Kong and Li [2023] proposed an algorithm that guarantees the optimal stable re-
gretofeachworkerisboundedby (KlnT/∆2),matchingthelowerboundΩ(N lnT/∆2)[Sankararaman et al.,
O
2021] in terms of time horizon T and minimum preference gap ∆. Therefore, our goal is to obtain
best-of-both-worlds regret bounds,that is, to findan algorithm, such that if ∆ = ω(1/√T), we have
Reg (T)= (lnT/∆2) and if ∆ = (1/√T), we have Regα(T) = o(T).
i O O i
In the rest of this section, We first propose an algorithm and derive its corresponding upper
bound. Then, we derive a lower bound that proves a fundamental trade-off between the normal
regret in the no-tied case and the approximation regret in the tied case. In particular, supporting
smaller minimal gaps in problems without ties necessarily implies larger approximation regret in
problem with ties. Thus, algorithms cannot obtain best-of-both-worlds under general preference
structures. Finally, we provide two possible choices for the input parameter of the algorithm and
demonstrate their corresponding guarantees for the two regrets.
5.1 Algorithm: Explore-then-Choose-Oracle
We present our algorithm, called Explore-then-Choose-Oracle (ETCO, Algorithm 3). For brevity,
we present an abstract version here and the full version is deferred to Appendix E. The algorithm
consists of two phases. In each round of the exploration phase, the company allocates a job to
every worker in a round-robin way, aiming to obtain an accurate estimate of each worker’s utilities.
In the second phase, the company decides whether the workers’ utilities have plausible ties, and
depending on this, either calculates a matching using GS algorithm or uses the approximation
oracle. In the remaining rounds, the company allocates jobs to workers based on the output from
the chosen oracle.
In the exploration phase, the company allocates jobs to workers in a round-robin way (Line 3),
according to the index of the workers. In this way, every K rounds, each worker is matched to
every job exactly once. The maximal number of exploration rounds is bounded by a parameter T .
0
After each allocation, based on the observation, we update the estimated utility Uˆ(i,µ (i)) and the
t
observation count T of worker w and job µ (i) as
i,µt(i) i t
Uˆ(i,µ (i)) T +X (t)
Uˆ(i,µ (i)) = t · i,µt(i) i,µt(i) , T = T +1. (13)
t
T +1
i,µt(i) i,µt(i)
i,µt(i)
The company also constructs a confidence set for each estimated preference utility, such that the
sets include the expected utility with high probability. In particular, the confidence set of worker
16Algorithm 3 Explore-then-Choose-Oracle (Abstract Version)
Input: N workers, K jobs, horizon T, exploration length T < T, preference profile (P ) ,
0 a a∈K
approximation stable-matching oracle O.
1: for t = 1,2, ,T do
···
2: if t T 0 and w i whose CIs of top (N +1)-ranked jobs have overlaps then
≤ ∃
3: Match µ t(i) a ((t+i−1) modK)+1, i [N].
← ∀ ∈
4: if t mod K == 0 then ⊲ Completed a full round of round-robin
5: if CIs for all worker’s top (N +1)-ranked jobs are disjoint then
6: µˆ∗ GS algorithm.
←
7: else if t == T 0 then
8:
µˆ∗ O.
←
9: end if
10: end if
11: else
12: µ t µˆ∗.
←
13: end if
14: end for
w for the preference utility over job a is [LCB ,UCB ], with the upper and lower confidence
i j i,j i,j
bounds defined as
6lnT 6lnT
UCB = Uˆ(i,j)+ , LCB = Uˆ(i,j) , (14)
i,j i,j
smax T i,j,1 −smax T i,j,1
{ } { }
If the confidence sets for two jobs a j,a j′ are disjoint, i.e., LCB i,j > UCB i,j′ or LCB i,j′ > UCB i,j,
we can infer the relative preference order for w on these two jobs. When the confidence intervals
i
(CIs) of the first N-ranked jobs for worker w are disjoint, we know the worker’s true preferences
i
relevant to the worker-optimal stable matching w.h.p..
If for all workers, the top N-ranked CIs become disjoint before the pre-determined end of the
exploration phase T , we know that with high probability, there is no tie in the first N-ranked jobs
0
for all the workers, so we can enter the exploitation phase and choose the Gale-Shapley oracle to
determine the matching. On the other hand, if up to T , we still have overlaps in the confidence
0
intervals for the first N-ranked jobs for some worker w , we treat them as potential ties and turn
i
to the approximation oracle in the exploitation phase.
5.2 Theoretical Analysis
BeforestatingtheregretguaranteeforAlgorithm3,wefirstgiveaformaldefinitionoftheminimum
preference gap, which measures the hardness of the learning problem.
Definition 6 (Minimum Preference Gap). For each worker w i and job a j = a j′, let ∆ i,j,j′ =
6
U(i,j) U(i,j′) be the preference gap for w
i
between a
j
and a j′. Let r
i
be the preference
| − |
ranking of worker w and r be the k-th preferred job in w ’s ranking for k [K]. Define
i i,k i
∈
∆ = min ∆ as the minimum preference gap among all workers and their
min i∈[N];k∈[N] i,ri,k,ri,k+1
first (N +1)-ranked jobs.
Next, we present the upper bound for the worker-optimal stable regret for each worker by
following the ETCO algorithm.
17Theorem 7 (Upper Bound). Following the ETCO algorithm (Algorithm 3) with exploration phase
of length T and an α,2 6KlnT -approximation oracle, for w , we have that
0 T0 i ∈ W
(cid:16) q (cid:17)
KlnT 96KlnT KlnT
Reg (T) = if ∆ > = Ω , (15)
i O ∆2 min T T
(cid:18) min (cid:19) r 0 r 0 !
KlnT 96KlnT KlnT
Regα(T) 2αT + T if ∆ = . (16)
i ≤ 0 O T min ≤ T O T
r 0 ! r 0 r 0 !
Theproof can befoundin AppendixG. At a high level, the regret upperboundfor Algorithm 3
has two regimes. If the minimum preference gap ∆ is large enough, learning the preference
min
order for the first (N +1)-ranked jobs for each worker could be done with high probability before
the end of the pre-specified exploration phase T . Therefore, by implementing Gale-Shapley algo-
0
rithm in the exploitation phase, we can find the worker-optimal stable matching with the correct
preference ranking for the top N jobs. In this scenario, our algorithm is equivalent to the ETGS
algorithm [Kong and Li, 2023] if a centralized platform is deployed. On the other hand, if the
minimum preference gap ∆ is small, and especially, if we have ties in the ground-truth utility
min
matrix, it is impossible to hope for worker-optimal stable matching as seen in Section 3. Therefore,
we aim to guarantee approximation regret upper bound by implementing an approximation offline
oracle.
In instances where ∆ is large enough, our upper bound matches the lower bound derived in
min
Sankararaman et al.[2021]intermsoftimehorizonT andtheminimumpreferencegap∆ , while
min
they considered a special market with serial dictatorship, i.e., all jobs have the same preferences
over the workers. In the following theorem, we show that there is a fundamental trade-off between
the two regimes, i.e., if we want to guarantee sublinear regret for a wider range of minimal gaps,
we must suffer higher approximation regret in the small / no gap case.
Before we present the trade-off lower bound, we first define the Pareto-optimal stable matching
U
set and the relevant preference gap ∆ of the utility matrix. Intuitively, the Pareto-optimal
Sopt rel
stable matching set consists of stable matchings that cannot be Pareto improved from the workers’
side: any matching that strictly improves one worker’s utility, must yield a lower utility for another
worker. The minimal gap ∆ is the maximal perturbation size of workers’ utility such that the
rel
U
set cannot change by any such perturbation.
Sopt
Definition 7 (Pareto-optimal Stable Matching Set). Given a utility matrix U, the worker-optimal
U
Pareto-optimal stable matching set is the set of all matchings µ such that: 1) µ is stable; 2)
Sopt
If there exists a stable matching µ′ and a worker w such that U(w,µ′(w)) > U(w,µ(w)), then for
some w′ = w, it holds that U(w′,µ′(w′)) < U(w′,µ(w′)).
6
U
Any µ is (weakly) stable, by the property of weak stability, we know that there exists
∈ Sopt
a tie-breaking mechanism such that µ is stable with respect to the resulting strict preference.
Moreover, by the Pareto-optimality stated in Definition 7, we know that µ is worker-optimal. For
example, consider a system with two workers and two jobs, where w w for all jobs, and the
1 2
≻
preferenceutilitiesareU(w ,a )= U(w ,a ) = U(w ,a )= 1,andU(w ,a ) = 0. Bothmatchings
1 1 1 2 2 1 2 2
U
µ = (w ,a ),(w ,a ) andµ = (w ,a ),(w ,a ) areweaklystable,but = µ asµ could
1 { 1 1 2 2 } 2 { 1 2 2 1 } Sopt { 2 } 1
be Pareto-improved.
Definition 8 (Relevant Utility Gap). Given a utility matrix U, the relevant preference gap ∆rel is
defined as follows,
∆rel := inf ε :
∃
i
∈
[N],j
∈
[K],U˜(i,j)
∈
[U(i,j) −ε,U(i,j)+ε] s.t. SoU
pt
6= SoU˜
pt
. (17)
n o
18U
By definition, ∆ 0, and if is not a singleton, then ∆ = 0, since any perturbation is
rel ≥ Sopt rel
equivalenttoatie-breakingmechanisminacertaindirection, whichwouldresultindeletingatleast
U
one matching from by the uniqueness of worker-optimal stable matching in a market without
Sopt
ties. Moreover, since no perturbation of size smaller than ∆ can change the top-N preference
min
ranking for any worker and hence the worker-optimal stable matching, we have that ∆ ∆ 5.
rel min
≥
Theorem 8 (Trade-offbetweenRegretandApproximationReget). Let δ (0, 1) and fix N = K =
∈ 2
4. Consider the class of instances with a large relevant utility gap, denoted as (T), i.e., for any
ℓ
instance ν (T), we have ∆ν cT−1/2+δ for some absolute c > 0. AssumeE that an algorithm
ℓ rel
∈ E ≥
π guarantees sublinear regret for all workers, for all ν (T). Then there exists an instance such
ℓ
∈ E
that this algorithm suffers Ω(T1−2δ) approximation regret for some worker when ∆rel = 0 w.r.t the
best approximation ratio α∗ for this instance, i.e.,
If w , limsup
supν∈Eℓ(T)Reg i(T;ν)
= 0,
i
∀ ∈ W T
T→∞
= w , ν′ s.t. ∆ν′ = 0, and Regα∗(wi) (T;ν′ ) = Ω(T1−2δ), (18)
⇒∃ i ∈ W rel i
where α∗(w ) = max α(w ) :α(w) 1/RU , w , for any w , and RU isthe OSS-ratio
i i ≥ M ∀ ∈ W i ∈ W M
on matchings with a given utility matrix U.
(cid:8) (cid:9)
Proof. Let = w ,w ,w ,w and = a ,a ,a ,a and w w w w for all the jobs.
1 2 3 4 1 2 3 4 1 2 3 4
W { } A { } ≻ ≻ ≻
Throughoutthe proof, we assume that all observations are Gaussian of unit variance, that is, when
matching w to a at round t, we observe X (t) (U(i,j),1). Consider two instances ν and ν′
i j i
∼ N
with the following mean utility matrices U and U′, respectively.
1 1 0 0 1 +γ 1 0 0
2 2 2 2
1 0 1 0 1 0 1 0
U = 2 2 , U′ =  2 2 ,
1 0 0 1 1 0 0 1
2 4 2 4
0 0 1 0  0 0 1 0
 2   2 
   
where γ < 1.
4
Lemma 2 (Properties of Instances ν and ν′ ). Based on the utility matrices U and U′, we have
the following properties of ν and ν′ :
1. Under ν, the optimal stable shares are U∗(w) = 1, w ; Under ν′ , the optimal stable
2 ∀ ∈ W
shares are (U′)∗(w )= 1 +γ, (U′)∗(w ) = 1, (U′)∗(w ) = 1, and (U′)∗(w ) = 0.
1 2 2 2 3 4 4
ν ν′
2. The relevant utility gaps for the two instances are ∆ = 0, and ∆ = γ.
rel rel
3. Given an offline oracle that could compute the best approximation ratio, the benchmark utili-
ties for the four workers (after multiplying the approximation ratio) are (1, 3,3, 3) under ν
2 8 8 8
and (1 +γ,1, 1,0) under ν′ .
2 2 4
We provide the proof of Lemma 2 in Appendix H.
For a worker w ,i [N], job a ,j [K] and time slot t [T], denote N (t) N 0 as the
i j ij
∈ ∈ ∈ ∈ ∪{ }
numberof times worker w is matched to job a , upto and includingtime t, and denote thepast in-
i j
formationasI := (µ ,X(1),µ ,X(2), ,µ ,X(t 1)),whereX(t) = (X (t),X (t), ,X (t))
t 1 2 t−1 1 2 N
··· − ···
is the realized reward vector for all N workers in round t. Finally, let P ν,π be the joint probability
5Actually, if we assume an oracle that can determine whether there is a unique worker-optimal stable matching
within theuncertainty set, we can provea similar upperbound as in Theorem 7 with ∆ replaced by ∆ .
min rel
19measure over the history and E ν,π be the expectation induced by instance ν and policy π, and
P ν′,π, E ν′,π be defined similarly. By divergence decomposition theorem [Lattimore and Szepesv´ari,
2020, restated in Lemma 4], we have that
N K
D KL P ν,π,P ν′,π = E ν,πN ij(T) ·D KL ν ij,ν i′ j ,
i=1 j=1
(cid:0) (cid:1) XX (cid:0) (cid:1)
where ν is the distribution of utilities obtained when worker w is matched to job a in the
ij i j
environment ν.
Since the only change in utility distribution happens in (w ,a ) pair, we have that
1 1
γ2
D KL P ν,π,P ν′,π = D KL(ν 11,ν 1′ 1)E ν,π[N 11(T)] = E ν,π[N 11(T)]
· 2
, (19)
(cid:0) (cid:1)
where the second equality comes from the fact that for two Gaussian distributions with means 1
2
and 1 +γ and variance 1, the KL divergence is γ2 .
2 2
By data-processing inequality [Lattimore and Szepesv´ari, 2020, restated in Lemma 5], we know
that for all σ(I )-measurable random variable Z [0,1], we have that
T
∈
D KL P ν,π,P ν′,π kl E ν,π(Z),E ν′,π(Z) . (20)
≥
wherekldenotestheKLdivergenc(cid:0)ebetweent(cid:1)woBe(cid:0)rnoullidistribution(cid:1)s,i.e., p,q [0,1]2,kl(p,q) =
∀ ∈
pln p +(1 p)ln 1−p.
q − 1−q
Let Z =
N21(T)+N23(T)
, then Z [0,1], by Pinsker’s inequality, we have that
T ∈
kl E ν,π(Z),E ν′,π(Z) 2 E ν,π(Z) E ν′,π(Z) 2 . (21)
≥ · −
Combining Eq.(19), (20), ((cid:0)21), we have that(cid:1) (cid:2) (cid:3)
γ2
E ν,π[N 11(T)] 2 E ν,π(Z) E ν′,π(Z) 2 . (22)
· 2 ≥ · −
We now divide into two cases, depending on the a(cid:2) symptotic number o(cid:3) f matches E ν,π[N 11(T)].
Case I: liminf Eν,π[N11(T)] = 0. We assume that both Reg (T;ν′ ) and Regα∗(wi) (T;ν) are
T→∞ T1−2δ i i
sublinear for all workers and show that we have a contradiction.
Since γ = cT− 21+δ, by Eq. (22), we have
E ν,π[N 21(T)+N 23(T)] E ν′,π[N 21(T)+N 23(T)]
liminf − = 0. (23)
T→∞ (cid:12) T (cid:12)
(cid:12) (cid:12)
Inν′ ,iftheground-truthutilitymatrixU′ isknownandwewouldliketoachievethebenchmark
utility for w , we need N (T)+N (T)= T, since worker w could only get positive utilities from
2 21 23 2
jobs a and a and her benchmark utility is 1. In particular, the regret for this worker is
1 3 2
1
Reg i(T;ν′)= T E ν′,π[N 21(T)+N 23(T)] ,
2 −
(cid:0) (cid:1)
and to guarantee sublinear regret for w for any large enough T, we must have
2
E ν′,π[N 21(T)+N 23(T)]
liminf = 1.
T→∞ T
20Therefore, to satisfy Eq.(23), we must also have
E ν,π[N 21(T)+N 23(T)]
liminf = 1. (24)
T→∞ T
On the other hand, since w only gets positive utilities in U(4,3), to achieve the benchmark utility
4
in ν, we need N (T) = 3T. Therefore, to guarantee sublinear approximation regret for w , we
43 4 4
must have
E ν,π[N 43(T)] 3
liminf ,
T→∞ T ≥ 4
which implies limsup
Eν,π[N23(T)]
1, since the total number of times that jobs a being
T→∞ T ≤ 4 3
allocated cannot be more than the horizon T. Therefore, liminf
Eν,π[N21(T)]
3 according to
T→∞ T ≥ 4
Eq.(24). Using again the fact that a job can be allocated no more than T times, we get
E ν,π[N 31(T)] 1
limsup . (25)
T ≤ 4
T→∞
Finally, we write the regret of w as
3
3T 1 1
Reg 3α(T) =
8 −
2E ν,π[N 31(T)]
−
4E ν,π[N 34(T)]
3T 1 1
= E ν,π[N 31(T)] (E ν,π[N 34(T)]+E ν,π[N 31(T)])
8 − 4 − 4
T 1
E ν,π[N 31(T)],
≥ 8 − 4
wheretheinequality issincew
3
ismatched atmostT times, namely, E ν,π[N 34(T)]+E ν,π[N 31(T)]
T. Combining with Eq. (25), we have liminf Reg 3α(T;ν,π) 1 1 1 = 1 , which implies worke≤ r
T→∞ T ≥ 8−4·4 16
w suffers linear approximation regret in ν.
3
Thus, to summarize, assuming that all workers in both problem exhibit sublinear regret for this
case leads to a contradiction.
Case II: liminf Eν,π[N11(T)] > 0. Our goal is to prove a lower bound on the regret in ν for
T→∞ T1−2δ
some worker.
For a fixed T, denote for brevity N = E ν,π[N 11(T)], and assume with contradiction that all
workers w ,w ,w suffer a regret smaller than N/32. Denote the cumulative allocation given by
2 3 4
the algorithm by D [0,T]4×4, namely D(i,j) = T 1 (w ,a ) µ . In particular, we know
∈ t=1 { i j ∈ t }
that D(1,1) = N and that for all i 2,3,4 , it holds that
∈ { } P
4
3T N
i 2,3,4 , U(i,j)D(i,j) (26)
∀ ∈ { } ≥ 8 − 32
j=1
X
We now state a set of assumptions on the matching that the policy outputs at each round.
Each of these assumptions never decreases the worker utility. Thus, and since we want to prove
a contradiction in the utility lower bound of Eq. (26), they could be assumed without loss of
generality.
1. When w is not matched to a , it is always matched to a (D(1,1)+D(1,2) = T) – so that
1 1 2
it suffers zero regret.
212. a is always matched to either w or w (D(2,3)+D(4,3) = T).
3 2 4
3. a is always assigned to one of the first three workers (D(1,1)+D(2,1)+D(3,1) = T).
1
4. If a is not assigned to w , then a is assigned to w (D(3,1)+D(3,4) = T).
1 3 4 3
Noticethatchangingeachindividualallocation tofollowthisconditioncanonlyrequireunmatching
a worker from a job that yields her no utility and matching all conditions is feasible (e.g., by
µ = (w ,a ),(w ,a ),(w ,a ) ).
1 1 3 4 4 3
{ }
We now modify the matching allocation D to allocation D¯ while maintaining the above prop-
erties as follows:
• We initialize D¯ = D.
• If D(4,3) 3T + N, we set D¯(4,3) = 3T + N and D¯(2,3) = T N; otherwise, we leave
≤ 4 16 4 16 4 − 16
D¯(4,3) = D(4,3). By Eq. (26), we know that D(4,3) 3T N, and combined with
≥ 4 − 16
Assumption 2, this change can only decrease the allocation to worker w by
2
N
D(2,3) D¯(2,3) = D¯(4,3) D(4,3)
− − ≤ 8
This decreases the utility of worker w by 1 D(2,3) D¯(2,3) N, and after this modifi-
2 2 − ≤ 16
cation, the cumulative utility of worker w is 3T + N.
4 (cid:0) 8 32 (cid:1)
• By Assumption 1, we know that D(1,1) = N and D(1,2) = T N. We also know by
−
assumption 4 that in all rounds where a was assigned to w , a was assigned to w , and
1 1 4 3
therefore, D(3,4) N. In D¯, we move all the N assignments of (w ,a ) to (w ,a ), so that
1 1 1 2
≥
D¯(1,1) = 0 and D¯(1,2) = T; in particular, w still gets its OSS. We split the allocation of a
1 1
evenly between w and w by letting:
2 3
1. D¯(2,1) = min T D¯(2,3),D(2,1)+N/2 , thus making sure that the utility of w is
2
−
at least either T/2 3T/8+N/16 or
(cid:8) ≥ (cid:9)
1 1 N N 3T N 3N 3T 5N
D¯(2,1)+D¯(2,3) D(2,1)+ +D(2,3) + = + ,
2 ≥ 2 2 − 8 ≥ 8 −32 16 8 32
(cid:18) (cid:19)
(cid:0) (cid:1)
wherein the last inequality weagain usedthe assumption on the regret of w in Eq.(26).
2
2. We move the matches from (w ,a ) that were not allocated to D(2,1) as follows:
1 1
D¯(3,1) = D(3,1)+N D¯(2,1) D(2,1) D(3,1)+N/2, and,
− − ≥
D¯(3,4) = D(3,4) N D¯(2,1) D(2,1) D(3,4) N/2.
(cid:0) (cid:1)
− − − ≥ −
Both allocations are valid sin(cid:0)ce D((cid:0)3,4) N due to (cid:1)A(cid:1)ssumption 4. In particular, this
≥
shift from a to a increases the utility of w by at least 1 1 N = N, ensuring it a
4 1 3 2 − 4 2 8
total utility of at least 3T/8+3N/32.
(cid:0) (cid:1)
Notice that all changes either kept D¯ a doubly-stochastic matrix or decreased the sum of a row -
we can w.l.o.g increase another element of D¯ or use partial matchings.
Importantly, at the end of this process, the utility of w under the matching distribution D¯
1
remained T/2, while the utility of all other workers increased by at least N/16 - contradicting the
fact that no matching distribution can collect more than 3T/8 to all workers w ,w ,w . Thus,
2 3 4
Eq. (26) cannot hold and at least one worker must suffer a regret of at least N/32. Finally, since
liminf
Eν,π[N11(T)]
> 0, we get the same for the regret of one of the workers, concluding the
T→∞ T1−2δ
proof.
22Theorem 8 shows a fundamental trade-off between the two regimes, i.e., the utility matrix with
large preference gaps and with small or no gaps. Specifically, if δ 0, guaranteeing sublinear
→
regret in the large gap regime would force us to suffer linear approximation regret in the other
scenario. This implies that when implementing Algorithm 3, we need to make a suitable choice on
the length of the exploration phase T such that desirable guarantees in one of the regimes could
0
be achieved. In the following, we show two possible choices for T and provide their corresponding
0
regret upper bound guarantees in the two regimes.
Corollary 1. Following theETCOalgorithm (Algorithm3)withT = T2/3(KlnT)1/3, forw ,
0 i
∈ N
we have that
KlnT
Reg i(T)= O ∆2 if ∆ min = Ω˜ T−1 3 ,
(cid:18) min (cid:19)
(cid:16) (cid:17)
Reg iα(T)=
O
(KlnT)31 T2 3 if ∆ min = O˜ T− 31 .
(cid:16) (cid:17) (cid:16) (cid:17)
Choosing T = T2/3(KlnT)1/3 yields the optimal approximation regret upper bound in the
0
small gap regime when implementing explore-then-commit type algorithms. However, we would
suffer linear regret for ∆ [Ω˜ T−1/2 , ˜ T−1/3 ], while if we keep exploring till ˜(T), we can
min
∈ O O
have sublinear regret for this range of ∆ . Therefore, in the following, we provide a second choice
min
(cid:0) (cid:1) (cid:0) (cid:1)
of T .
0
Corollary 2. Following the ETCO algorithm (Algorithm 3) with T = T , for w , we have
0 lnT i ∈ N
that
KlnT
Reg i(T) =
O ∆2
if ∆
min
= Ω˜ T− 21 ,
(cid:18) min (cid:19)
(cid:16) (cid:17)
Reg iα− ln1 T(T) =
O
√KT lnT if ∆ min = O˜ T−1 2 .
(cid:16) (cid:17) (cid:16) (cid:17)
Choosing T = T/lnT yields the optimal regret that matches the lower bound for any ∆ =
0 min
Ω˜ T−1/2 . However, for ∆ = ˜ T−1/2 , we can only guarantee sublinear approximation regret
min
O
with an approximation ratio of α 1/lnT even if we implement an offline α-approximation oracle.
(cid:0) (cid:1) −(cid:0) (cid:1)
6 Conclusion
In this paper, we study stable matching with one-sided indifferences, casting the problem as a
company with workers and jobs. Using a utility matrix to encode the possibly tied preferences of
workers over jobs, we definethe optimal stable share(OSS) for each worker, which is the maximum
utility that she could receive in some stable matching. Moreover, concerning fairness, we define
the OSS ratio, which quantifies the fraction of the optimal stable share that each worker could
obtain with random matchings. We show that for distributions over stable matchings, a linear
approximation to the OSS is trivially obtained, and it cannot be improved asymptotically. Next,
we consider distributions over any possible matchings, and prove that the approximation should
be no better than logarithmic in general. To achieve a tight logarithmic approximation, we pro-
pose a polynomial time algorithm that computes a distribution over internally stable matchings.
We prove that this algorithm is asymptotically optimal in terms of the OSS ratio and dominant
strategy incentive compatible. Building on the offline result, we then consider a setting where the
utility matrix is not exactly known but is assumed to lie within a given uncertainty set. We first
propose a variant of the approximation algorithm in the deterministic setting, by incorporating the
23consideration of ǫ-stable matching. Then we show a relationship between the ǫ-stable matching
and stable matching when the corresponding utility matrix is perturbed by ǫ/2. Combining these
two components, we show a result on approximating the OSS within the uncertainty set, which
shares thesamelogarithmic approximation ratio as in thedeterministic case butwith an additional
ǫ error. Finally, we step forward to the online learning setting. Firstly, observe that the stable
regret framework in the literature is significantly limited to the matching markets without ties,
the fairness-based OSS ratio motivates us to define the α-approximation stable regret in the case
with possible ties. We provide an algorithm whose upper bound matches the lower bound in the
no-tied case when the number of workers equals the number of jobs, and on this basis, we derive
the approximation regret upper bound in the small / no gap case. Then, we show a lower bound
to demonstrate a fundamental trade-off between the two types of regrets in the two regimes of the
utility gap, which implies the necessity to make a decision of the exploration stopping time.
Acknowledgements
This project has received funding from the European Union’s Horizon 2020 research and innova-
tion programme under the Marie Sklodowska-Curie grant agreement No 101034255. Shiyun Lin
acknowledges the financial support from the China Scholarship Council (Grant No.202306010152).
Vianney Perchet’s research was supported in part by the French National Research Agency (ANR)
in theframework of the PEPR IAFOUNDRY project (ANR-23-PEIA-0003) and through thegrant
DOOM ANR-23-CE23-0002. It was also fundedby theEuropean Union (ERC, Ocean, 101071601).
Views and opinions expressed are however those of the author(s) only and donot necessarily reflect
those of the European Union or the European Research Council Executive Agency. Neither the
European Union nor the granting authority can be held responsible for them.
References
Atila Abdulkadirog˘luandTayfunSo¨nmez. Schoolchoice: Amechanism designapproach. American
economic review, 93(3):729–747, 2003.
Atila Abdulkadirog˘lu, Parag A Pathak, and Alvin E Roth. The new york city high school match.
American Economic Review, 95(2):364–367, 2005a.
Atila Abdulkadirog˘lu, Parag A Pathak, Alvin E Roth, and Tayfun So¨nmez. The boston public
school match. American Economic Review, 95(2):368–371, 2005b.
Elliot Anshelevich, Sanmay Das, and Yonatan Naamad. Anarchy, stability, and utopia: creating
better matchings. Autonomous Agents and Multi-Agent Systems, 26(1):120–140, 2013.
Esteban Arcaute and Sergei Vassilvitskii. Social networks and stable matchings in the job market.
In International Workshop on Internet and Network Economics, pages 220–231. Springer, 2009.
Haris Aziz, Rupert Freeman, Nisarg Shah, and Rohit Vaish. Best of both worlds: Ex ante and ex
post fairness in resource allocation. Operations Research, 2023.
Moshe Babaioff, Tomer Ezra, and Uriel Feige. On best-of-both-worlds fair-share allocations. In
International Conference on Web and Internet Economics, pages 237–255. Springer, 2022.
24Soumya Basu, Karthik Abinav Sankararaman, and Abishek Sankararaman. Beyond log2(t) regret
fordecentralizedbanditsinmatchingmarkets. InInternational Conference onMachine Learning,
pages 705–715. PMLR, 2021.
Garrett Birkhoff. Three observations on linear algebra. Univ. Nac. Tacuman, Rev. Ser. A, 5:
147–151, 1946.
Eric Budish. The combinatorial assignment problem: Approximate competitive equilibrium from
equal incomes. Journal of Political Economy, 119(6):1061–1103, 2011.
Ioannis Caragiannis, Aris Filos-Ratsikas, Panagiotis Kanellopoulos, and Rohit Vaish. Stable frac-
tional matchings. In Proceedings of the 2019 ACM Conference on Economics and Computation,
pages 21–39, 2019a.
Ioannis Caragiannis, David Kurokawa, Herv´e Moulin, Ariel DProcaccia, Nisarg Shah,and Junxing
Wang. The unreasonable fairness of maximum nash welfare. ACM Transactions on Economics
and Computation (TEAC), 7(3):1–32, 2019b.
Wei Chen, Yajun Wang, Yang Yuan, and Qinshi Wang. Combinatorial multi-armed bandit and
its extension to probabilistically triggered arms. Journal of Machine Learning Research, 17(50):
1–33, 2016.
Sanmay Das and Emir Kamenica. Two-sided bandits and the dating market. In Proceedings of the
19th international joint conference on Artificial intelligence, pages 947–952, 2005.
LesterEDubinsandDavidAFreedman. Machiavelli andthegale-shapleyalgorithm. The American
Mathematical Monthly, 88(7):485–494, 1981.
Cynthia Dwork, Moritz Hardt, Toniann Pitassi, Omer Reingold, and Richard Zemel. Fairness
through awareness. In Proceedings of the 3rd innovations in theoretical computer science confer-
ence, pages 214–226, 2012.
Michal Feldman, SimonMauras, VishnuVNarayan, andTomasz Ponitka. Breakingtheenvy cycle:
Best-of-both-worlds guarantees for subadditive valuations. arXiv preprint arXiv:2304.03706,
2023.
Duncan Karl Foley. Resource allocation and the public sector. Yale University, 1966.
Rupert Freeman, Evi Micha, and Nisarg Shah. Two-sided matching meets fair division. In Inter-
national Joint Conference on Artificial Intelligence, 2021.
Yi Gai, Bhaskar Krishnamachari, and Rahul Jain. Combinatorial network optimization with
unknown variables: Multi-armed bandits with linear rewards and individual observations.
IEEE/ACM Transactions on Networking, 20(5):1466–1478, 2012.
David Gale and Lloyd S Shapley. College admissions and the stability of marriage. The American
Mathematical Monthly, 69(1):9–15, 1962.
Aur´elien Garivier, Pierre M´enard, and Gilles Stoltz. Explore first, exploit next: The true shape of
regret in bandit problems. Mathematics of Operations Research, 44(2):377–399, 2019.
Magnu´s M Halld´orsson, Robert W Irving, Kazuo Iwama, David F Manlove, Shuichi Miyazaki,
Yasufumi Morita, and Sandy Scott. Approximability results for stable marriage problems with
ties. Theoretical Computer Science, 306(1-3):431–447, 2003.
25Magnu´s M Halld´orsson, Kazuo Iwama, Shuichi Miyazaki, and Hiroki Yanagisawa. Randomized
approximation of the stable marriage problem. Theoretical Computer Science, 325(3):439–465,
2004.
Ayumi Igarashi, Yasushi Kawase, Warut Suksompong, and Hanna Sumita. Fair division with
two-sided preferences. In Proceedings of the Thirty-Second International Joint Conference on
Artificial Intelligence, pages 2756–2764, 2023.
Robert W Irving. Stable marriage and indifference. Discrete Applied Mathematics, 48(3):261–272,
1994.
Robert W Irving, David F Manlove, and Sandy Scott. The stable marriage problem with master
preference lists. Discrete Applied Mathematics, 156(15):2959–2977, 2008.
Kazuo Iwama and Shuichi Miyazaki. Stable marriage with ties and incomplete lists. Encyclopedia
of algorithms, pages 883–885, 2008.
Sham M Kakade, Adam Tauman Kalai, and Katrina Ligett. Playing games with approximation
algorithms. In Proceedings of the thirty-ninth annual ACM symposium on Theory of computing,
pages 546–555, 2007.
Gili Karni, Guy N Rothblum, and Gal Yona. On fairness and stability in two-sided matchings. In
13th Innovations in Theoretical Computer Science Conference (ITCS 2022). Schloss-Dagstuhl-
Leibniz Zentrum fu¨r Informatik, 2022.
Michael P Kim, Aleksandra Korolova, Guy N Rothblum, and Gal Yona. Preference-informed
fairness. In 11th Innovations in Theoretical Computer Science Conference, ITCS 2020, pages
16–1. Schloss Dagstuhl-Leibniz-Zentrum fur Informatik GmbH, Dagstuhl Publishing, 2020.
Zolta´n Kira´ly. Better and simpler approximation algorithms for the stable marriage problem.
Algorithmica, 60(1):3–20, 2011.
Donald E Knuth. Mariages stables et leurs relations avec d’autres probl`emes combinatoires (stable
marriage and its relation to other combinatorial problems). In CRM Proceedings and Lecture
Notes, volume 10. Les Presses de l’Universit´e de Montr´eal, 1976.
Fang Kong and Shuai Li. Player-optimal stable regret for bandit learning in matching markets. In
Proceedings of the 2023 Annual ACM-SIAM Symposium on Discrete Algorithms (SODA), pages
1512–1522. SIAM, 2023.
Tor Lattimore and Csaba Szepesv´ari. Bandit algorithms. Cambridge University Press, 2020.
Richard J Lipton, Evangelos Markakis, Elchanan Mossel, and Amin Saberi. On approximately
fair allocations of indivisible goods. In Proceedings of the 5th ACM Conference on Electronic
Commerce, pages 125–131, 2004.
Lydia T Liu, Horia Mania, and Michael Jordan. Competing bandits in matching markets. In
International Conference on Artificial Intelligence and Statistics, pages 1618–1628. PMLR,2020.
Lydia T Liu, Feng Ruan, Horia Mania, and Michael I Jordan. Bandit learning in decentralized
matching markets. The Journal of Machine Learning Research, 22(1):9612–9645, 2021.
Yicheng Liu, Pingzhong Tang, and Wenyi Fang. Internally stable matchings and exchanges. In
Proceedings of the AAAI Conference on Artificial Intelligence, volume 28, 2014.
26DavidFManlove. Thestructureofstablemarriagewithindifference. Discrete AppliedMathematics,
122(1-3):167–181, 2002.
David F Manlove, Robert W Irving, Kazuo Iwama, Shuichi Miyazaki, and Yasufumi Morita. Hard
variants of stable marriage. Theoretical Computer Science, 276(1-2):261–279, 2002.
Nadav Merlis and Shie Mannor. Batch-size independentregret boundsfor the combinatorial multi-
armed bandit problem. In Conference on Learning Theory, pages 2465–2489. PMLR, 2019.
Pierre Perrault. When combinatorial thompson sampling meets approximation regret. Advances
in Neural Information Processing Systems, 35:17639–17651, 2022.
Alvin E Roth and Elliott Peranson. The redesign of the matching market for american physicians:
Some engineering aspects of economic design. American economic review, 89(4):748–780, 1999.
Alvin E Roth, Uriel G Rothblum, and JohnH Vande Vate. Stable matchings, optimal assignments,
and linear programming. Mathematics of operations research, 18(4):803–828, 1993.
Abishek Sankararaman, Soumya Basu, and Karthik Abinav Sankararaman. Dominate or delete:
Decentralized competing bandits in serial dictatorship. In International Conference on Artificial
Intelligence and Statistics, pages 1252–1260. PMLR, 2021.
Hugo Steinhaus. Sur la division pragmatique. Econometrica: Journal of the Econometric Society,
pages 315–319, 1949.
Matthew Streeter and Daniel Golovin. An online algorithm for maximizing submodular functions.
Advances in Neural Information Processing Systems, 21, 2008.
Chung-Piaw Teo and Jay Sethuraman. The geometry of fractional stable matchings and its appli-
cations. Mathematics of Operations Research, 23(4):874–891, 1998.
Hal R Varian. Equity, envy, and efficiency. Journal of Economic Theory, 9(1):63–91, 1974.
John H Vande Vate. Linear programming brings marital bliss. Operations Research Letters, 8(3):
147–153, 1989.
John Von Neumann. A certain zero-sum two-person game equivalent to the optimal assignment
problem. Contributions to the Theory of Games, 2(0):5–12, 1953.
Dietrich Weller. Fair division of a measurable space. Journal of Mathematical Economics, 14(1):
5–17, 1985.
27A Further Related Work
Fractional Matchings Aside from integral matchings, fractional matchings have also attracted
researchinterestsduetotheirpracticalimplications. Forinstance,inourrunningexample,consider
a time-sharing scenario [Roth et al., 1993], where each worker could spend five days a week at
work. An integral matching requires every worker to work full-time on a single job, while fractional
matchings allow them to switch among different jobs, making it natural in such situations. By
the well-known Birkhoff-von-Neumann (BvN) theorem [Birkhoff, 1946, Von Neumann, 1953], a
fractional matching could be written as a convex combination of several integral matchings.
In the context of stable matching, fractional matching has also been studied. Considering
purely ordinal preferences, several notions of stability have been proposed, such as strong stabil-
ity [Roth et al., 1993], ex-post stability [Roth et al., 1993], and fractional stability [Vate, 1989]. In
these works, the stable matching problem is formulated as a linear program, Teo and Sethuraman
[1998] showed that any fractional solution in the stable matching polytope is a convex combi-
nation of integral stable matchings. On the other hand, concerning purely cardinal preferences,
Anshelevich et al. [2013] proposes the notions of stability and ε-stability, while Caragiannis et al.
[2019a]showsthatthesetofstablefractionalmatchingsthatsatisfiesthenotioncanbenon-convex.
In this paper, we consider a two-sided market where the worker side has cardinal preferences
while the job side has ordinal preferences. We do not concern the notions of fractional stable
matchings, instead, we focus on finding a distribution over integral matchings such that it is fair in
thesensethateveryworkercouldreceiveacertainfractionofitsoptimalstableshareinexpectation.
Fair Division Fair division is the problem of dividing a set of items among several people in
a fair manner. Steinhaus [1949] pioneers this line of research and defines a share-based notion,
i.e., proportionality, where each player gets a 1/N fraction of all items. Foley [1966] and Varian
[1974] define envy-freeness, where no player prefers the bundle allocated to another player, and
this notion is later generalized by Weller [1985]. In two-sided matching markets, a stable matching
eliminates justified envy [Abdulkadirog˘lu and So¨nmez, 2003]. Regarding the problem of sharing
indivisible goods, share-based guarantees such as MMS [Budish, 2011] and envy-based guaran-
tees such as EF1 [Lipton et al., 2004, Budish, 2011] or EFX [Caragiannis et al., 2019b] are pro-
posed. Recent works have studied best-of-both-world fairness [Aziz et al., 2023, Babaioff et al.,
2022, Feldman et al., 2023], providing random allocation with fairness guarantees both in expecta-
tion and for every realization.
Approximation Regret in Bandit Learning In combinatorial bandit problems, approxima-
tionregret isoftenconsideredinsteadofthestandardregret[Kakade et al.,2007,Streeter and Golovin,
2008, Gai et al., 2012, Chen et al., 2016, Merlis and Mannor, 2019, Perrault, 2022]. The reason
mainly lies in the complex reward structure and the computational intractability of the problem,
i.e., rewards are often dependent on the combination of actions, leading to an exponentially large
action space, which makes it computationally prohibitive to find the exact solution.
Besides computational intractability, there is another more fundamental reason for using the
approximation regret framework in this paper. The stable regret is defined for each worker, which
means the company aims to solve a multi-objective optimization problem while it couldn’t satisfy
everyone simultaneously. Consequently, the approximation regret serves as a compromise between
fairness and efficiency.
28B Discussion regarding other types of ties
In this paper, we consider a matching market where one side has possibly tied cardinal preferences
and the other side has strict ordinal preferences. It directly generalizes to the setting that both
sides have cardinal preferences but only one side admits ties, by recovering an ordinal preference
list from the utility, and we can define the OSS-ratio for the jobs in a similar fashion, denoted as
Ra ; in the following, we rename the OSS-ratio for the workers as Rw for distinguishment. We
M M
claim that the setting with one-sided ties is not only practical in reality, but also important for our
theoretical results, if we want to consider the OSS-ratio for both sides of the market.
Stable Matching Without Ties The distributive lattice structure is a striking feature for a
matching market without ties [Knuth, 1976], which reveals that all workers could be optimally
matched simultaneously, by simply runningthe deferred-acceptance algorithm with worker propos-
ing, denoted as µ . Conversely, job-proposing deferred-acceptance algorithm, denoted as µ , gives
w a
every job its corresponding optimal stable match. Therefore, construct the distribution D as fol-
lows:
1 1
P(D = µ ) = , P(D = µ )= .
w a
2 2
Since µ and µ are both stable matchings, with distribution D, we know that Rw Rw 1, and
w a M ≤ S ≤ 2
the same result holds for Ra . This implies that both Rw and Ra are Θ(1), and Ω(1) is a trivial
M M M
lower bound for the two ratios.
Stable Matching With One-sided Ties The lattice structure is absent when ties exist in the
preference profiles [Manlove, 2002]. When only one side of the market admits ties, we have proved
that Rw = Θ(logN). On the other hand, for Ra , we have the following result.
M M
Theorem 9. For a matching market where the workers have ties while the jobs have strict prefer-
ences, there exists an instance such that Ra =Ω(N).
M
Proof. Consider the following utility matrix for a market with N workers and N jobs. The matrix
encodes the preferences of the workers and the jobs simultaneously.
1 1 1
···
ε ε ε
1 1 1
 ··· 
U = ε 2 ε 2 ε 2 ,
···


. .
.
. .
.
... . .
.


 
0 0 0
 ··· 
 
where ε 1 > ε 2 >
···
> 0. u i,j
≥
u i,j′ implies a j % wi a j′ and u i,j
≥
u i′,j implies w i % aj w i′. In this
example, every worker is indifferent among all the jobs, while every job has the preference profile
that w w w . The optimal stable share for each job is 1, and it is achieved by an
1 2 N
≻ ≻ ··· ≻
appropriate tie-breaking of w . However, in any matching, exactly one job would receive a utility
1
U∗(a)
of 1. When ε , ε , approach 0, we have that max N, with the equality achieved when
1 2 ··· a U D(a) ≥
we consider the distribution D that assigns probability 1/N on matching µ , where µ refers to a
j j
matching in which job a gets a utility of 1. Therefore, lim Ra = Ω(N).
j ε→0 M
29Stable Matchingwith Two-sidedTies Whenbothsidesofthemarkethaveties,bysymmetry,
the OSS-ratio for the worker side and the job side would be of the same order.
Theorem 10. For a matching market where both sides admit ties, there exists an instance, such
that Rw = Ra = Ω(N).
M M
Proof. Consider the following N N utility matrix which simultaneously encodes the preferences
×
of the workers and the jobs.
1 1 1
···
1 0 0
U =  .
.
.
.
.
.
· .· ..· .
.
.,
 
1 0 0
 ··· 
 
where the entries of this utility matrix share the same correspondence to the preference profile as
those in the example in Theorem 9. In this example, worker w is indifferent among all the jobs,
1
whilealltheotherworkerssharethesamepreferenceoverthejobs,thatis,a a a a .
1 2 3 N
≻ ∼ ∼ ··· ∼
The preference of jobs over workers is symmetrically derived. Every matching that involves all the
workersandjobsisastablematching,whichgivesautilityof1toworkerw andjoba ,whileforthe
1 1
remaining workers and jobs, at most one worker and one job would receive a utility of 1, and all the
otherworkersget0. Foreveryworkerandeveryjob,thereexistsatie-breakingmechanismsuchthat
itgetsautilityof1. Therefore,theoptimalstableshareisU∗(w) = U∗(a) =1foranywanda. And
any distribution D over matchings gives
U∗(w1)
=
U∗(a1)
= 1, max
U∗(w)
N 1,
U D(w1) U D(a1) w∈{w2,w3,···,wN} U D(w) ≥ −
U∗(a)
and max N 1, with the equality achieved when we adopt the random
a∈{a2,a3,···,aN} U D(a) ≥ −
allocation that assigns probability 1/(N 1) on matching µ , in which workers w and w , jobs a
i 1 i 1
−
and a receive a utility of 1, while all the other workers and jobs get 0.
i
C Lower bounds on OSS ratios
Proof of Theorem 1. Assume that N is even, let = w ,w , ,w and = a ,a , ,a
1 2 N 1 2 K
W { ··· } A { ··· }
with K = N +1 and w w w for all the jobs. The utility matrix that encodes the
2 1 ≻ 2 ≻ ··· ≻ N
preference of workers over jobs is as follows:
1 0 0 1
···
0 1 0 1
 . .
.
. .
.
· .· ..· . .
.
. . .  N
2

   
0 0 1 1
U =  ···  .
1 0 0 0 
 ···   
0 1 0 0
 ···   N
 . . . . . . ... . . . . . .    2
  
0 0 1 0
  ···    

In any stable matching, every worker w in w ,w , ,w must be assigned to a or a ,
i 1 2 ··· N/2 i N 2+1
leading to a utility of 1 for them. Without loss of generality, let µ be the matching such that
(cid:8) (cid:9) i
µ(w ) = a . Then in µ , only worker w would receive a utility of 1, by matching it to job a ,
i N+1 i N+i i
2 2
while all workers in w , ,w ,w , ,w would be unmatched and receive
N/2+1 N/2+i−1 N/2+i+1 N
··· ···
(cid:8) (cid:9)
30a utility of 0. Indeed, for any j = i, the unique optimal match of worker w is already taken
N/2+j
6
by worker w .
j
For every stable matching, at most one of the workers in w ,w , ,w could be
N/2+1 N/2+2 N
···
assigned to their optimal match. Since there are N/2 such workers, then for any distribution D,
(cid:8) (cid:9)
there must be at least one of the workers for which the probability to be optimally matched is
smaller than 2/N, for this worker, it holds that
U∗(w)
N, which implies R N/2.
U D(w) ≥ 2 S ≥
Theorem 1 shows that if we only consider random allocations of stable matchings, then in the
worst case, workers could only expect (1/N) profit share compared to their benchmark. On the
O
other hand, define
µ = (w ,a ): i 1,2, ,N/2 ,
1 i i
{ ∈ { ··· }}
µ = (w ,a ): i 1,2, ,N/2 .
2 i+N/2 i
∈{ ··· }
(cid:8) (cid:9)
Here, µ is a stable matching while µ is non-stable. We construct a distribution D as follows:
1 2
1 1
P(D = µ )= , P(D = µ ) = ,
1 2
2 2
U∗(w)
then all workers have = 2. This result implies that if we consider possibly non-stable
U D(w)
matchings for the support of D, there is space for improvement on the OSS-ratio.
Proof of Theorem 2. Consider thefollowing sequenceof problem instances, as depicted in Figure2.
In each bipartite graph, left nodes represent the set of workers while the right nodes represent the
set of jobs. Jobs share a global preference over the workers, with the topmost node being the most
preferred and the preference decreasing from top to bottom. From the worker side, the utility
matrix is binary. Specifically, for a worker-job pair (w,a), U(w,a) = 1 if (w,a) is connected, while
U(w,a) = 0 otherwise. For example, I is the graph representation of the problem instance of
1
Example 1.
Instance I is constructed recursively. Given I , we first duplicate this instance, denoted the
n n−1
replications as upper class and lower class, respectively. Take K as the number of right nodes
n−1
and N as the number of left nodes in I , and denote these nodes as au,au, ,au ,
n−1 n−1 1 2 ··· Kn−1
wu,wu, wu and aℓ,aℓ, ,aℓ , wℓ,wℓ, wℓ for the uppn er and lower classeo s,
1 2 ··· Nn−1 1 2 ··· Kn−1 1 2 ··· Nn−1
rnespectively. Then,owe intnroduce K
n−1
prioroitizned workers in I n,owho are uniformly more preferred
by the jobs than the workers in the upper and lower classes. In particular, denote the set of
prioritized workers as w ,w , ,w , we have
1 2
···
Kn−1
w w (cid:8) w wu (cid:9) wu wu wℓ wℓ wℓ .
1 ≻ 2 ≻ ··· ≻ Kn−1 ≻ 1 ≻ 2 ≻ ··· ≻ Nn−1 ≻ 1 ≻ 2 ≻ ··· ≻ Nn−1
Andfor each w , we have U(w ,au) = U(w ,aℓ)= 1, and U(w ,a) = 0otherwise. We firstprove by
i i i i i i
inductionthattheoptimal-stable-shareisU∗(w) = 1foranyworkerw. ForI ,theuniquematching
0
is stable. Suppose that for any worker w in I , there exists at least one stable matching µ such
n−1
that U(w,µ(w)) = 1. Then in I , all the prioritized workers could be matched in any stable
n
matching. Furthermore, as long as they simultaneously choose to be matched to the jobs in the
same class, the other class is free, and hence by induction assumption, every worker in that class
gets a chance to be matched in at least one stable matching. Therefore, by breaking ties for the
upper (lower) class, all workers in the lower (upper) class can be matched.
31On theother hand,given that U∗(w) = 1 for any w, the ratio R is equal to min max 1
M D w U D(w)
fortheseinstances, whichisnoless thantheratiobetween thenumberofleftnodesandthenumber
of connected right nodes.
Finally, in instance I , by the recursive construction, we have
n
K = 2 K ,
n n−1
·
N = 2 N +K .
n n−1 n−1
·
Solving the recursive equation with the initial condition K = N = 1, we know that there are 2n
0 0
right nodes and N = (n+2)2n−1 left nodes in I , which implies that R n/2+1. We rewrite
n M
≥
N = (n+2)2n−1 to obtain 2n =2N/(n+2) and we deduce that
N/n 2n 2N.
≤ ≤
Taking a logarithm in the inequalities, we have
log N log n n 1+log N.
2 − 2 ≤ ≤ 2
And thus
n log N log n log N log (1+log N).
≥ 2 − 2 ≥ 2 − 2 2
Therefore, n = Ω(logN) and hence R is Ω(logN).
M
D Proof of Theorem 5
Similarly to the proof of Theorem 3, we run Algorithm 2 and define the index of a worker as the
(i)
index of the job she receives in µ˜, that is, index(w) = i if worker w receives a for some j.
j
Definition 9. Given any ǫ-stable matching µ, we define a graph G =(V ,E ) where
µ µ µ
V := w U(w,µ(w)) m U (w) ǫ ,
µ D
{ ∈W | ≥ · − }
E := (w,w′) V2 µ(w) = µ˜ (w′) where j = index(w′)< index(w) .
µ { ∈ µ | j }
Once again, G is the graph of workers who prefer µ to their match in distribution D, where
µ
an edge (w,w′) means that w′ received a job that w would have liked. Next, we show properties
on the graph G .
µ
Proposition 3. For any stable matching µ, we have that
• G is a directed forest (there is no cycle and each vertex has at most one incoming edge),
µ
• For every worker w V with i = index(w), and for every 1 j < i, there a worker w′ V
µ µ
∈ ≤ ∈
with j = index(w′) such that (w,w′) E .
µ
∈
Proof. The proof is almost identical to that of Proposition 1. Fix a worker w V with i =
µ
∈
index(w), let 1 j < i, and let a = µ(w). By definition of V , worker w prefers µ to D, that is
µ
≤
U(w,a) m U (w) ǫ =U(w,µ˜ (w)) ǫ. By definition of w’s preference list P in Algorithm 2,
D i w
≥ · − −
the lexicographic ordering gives that
a(j) µ˜(w).
≻Pw
32Because µ˜ is a ǫ-stable matching, it should not be blocked by the pair (w,a(j)). Thus, there exists
a worker w′ such that µ˜(w′) = a(j) and
∈ W
w′ w.
a
≻
Finally, because µ is a stable matching, it should not be blocked by the pair (w′,a), thus
U(w′,µ(w)) U(w′,a) ǫ = m U (w′) ǫ,
D
≥ − · −
proving that w′ V . Hence, there is an edge (w,w′) E , which concludes the proof.
µ µ
∈ ∈
We will once again use Proposition 2 to give a lower on the number of nodes in the graph
G . Finally, we conclude with the proof that Algorithm 2 computes a distribution over internally
µ
ǫ-stablematchingwhichguarantees each worker alogarithmic fraction oftheiroptimalstableshare.
Proof of Theorem 5. Algorithm 2 first computes a stable matching µ˜ for the instance with dupli-
cated jobs, then build m matchings µ˜ ,...,µ˜ . If there were a pair (w,a) with index(w) = i which
1 m
ǫ-blocks matching µ˜ , that is U(w,a) > U(w,µ˜ (w))+ǫ and w µ˜ (a), then (w,a(i)) would block
i i a i
≻
µ˜, which is a contradiction. Thus, each matching µ˜ is internally stable.
i
Now, let us assume, that there is a stable matching µ in which a worker w with index(w) = i
receives a = µ(w) having utility U(w,a) > U(w,µ˜ (w))+mǫ. In the matching µ˜, job a(m) must be
i
matched to some worker w′ such that w′ w, otherwise (w,a) would block µ˜. Moreover, we must
a
≻
have U(w′,µ(w′)) m U (w′) ǫ otherwise (w′,a) would be blocking µ. Using Proposition 2,
D
≥ · −
there is a node w′ V of index m, which proves that there exists at least 2m−1 nodes, and thus
µ
∈
that N 2m−1. By contrapositive, if we set m > 1+log N, then we have U (w) U∗(w)/m ǫ
≥ 2 D ≥ −
for every worker w, which concludes the proof.
E Explore-then-Choose-Oracle Algorithm
Algorithm 4 is the full version of the Explore-then-Choose-Oracle algorithm.
F Technical Lemmas
Lemma 3 (Corollary 5.5 in Lattimore and Szepesv´ari [2020]). Assume that X ,X , ,X are
1 2 n
···
independent, σ-subgaussian random variables centered around µ. Then for any ε > 0,
1 n nε2 1 n nε2
P X µ+ε exp , P X µ ε exp .
n i ≥ ≤ −2σ2 n i ≤ − ≤ −2σ2
! !
i=1 (cid:18) (cid:19) i=1 (cid:18) (cid:19)
X X
Lemma 4 (Divergence Decomposition, Lemma 15.1 in Lattimore and Szepesv´ari [2020]). For two
bandit instances ν = ν : i [N],j [K] , and ν′ = ν′ :i [N],j [K] , fix some policy π
{ ij ∈ ∈ } ij ∈ ∈
and let P ν,π and P ν′,π be the probability measures inducednby the T-round inteorconnection of π and
ν (respectively, π and ν′), the following divergence decomposition holds,
N K
D P ν,π,P ν′,π = E ν,πN ij(T) ·D ν ij,ν i′
j
. (27)
i=1 j=1
(cid:0) (cid:1) XX (cid:0) (cid:1)
33Algorithm 4 Explore-then-Choose-Oracle (Full version)
Input: N workers, K jobs, horizon T, exploration length T < T, preference profile P for all jobs
0 a
a , approximation stable-matching oracle O.
1: In∈ itiK alize: Uˆ(i,j) = 0,T i,j = 0, i [N],j [K].
∀ ∈ ∈
2: Initialize: F i False. ⊲ Whether the CIs of the first (N +1)-ranked jobs are disjoint.
←
3: Set t = 1,T 0 K T 0/K ,t m = 0 ⊲ To have full rounds of round-robin.
← ⌊ ⌋
4: while t T 0 and i [N] s.t. F i == False do ⊲ Phase 1, round-robin exploration.
≤ ∃ ∈
5: Match µ t(i) a
((t+i−1)
modK)+1, i [N].
← ∀ ∈
6: Observe X i,µt(i)(t) and update Uˆ(i,µ t(i)),T i,µt(i). ⊲ See Equation (13)
7: t t+1
←
8: if t mod K == 0 then ⊲ Completed a full round of round-robin
9: t m t m+1.
←
10: Compute UCB i,j and LCB i,j for all i [N],j [K]. ⊲ See Equation (14)
∈ ∈
11: for i= 1,2, ,N do
12: Uˆ sort(i, )··· Sort(Uˆ(i, ),decreasing)
· ← ·
13: ∆ i,min min Uˆ sort(i,j) Uˆ sort(i,j +1),j [N]
← − ∈
14: if ∆ i,min > 2 n6 tln mT then o
15: F i Truqe.
←
16: end if
17: end for
18: if F i == True, i [N], then ⊲ No ties – standard oracle
∀ ∈
19: Compute preference list P w for all w according to Uˆ
∈ W
20: µˆ∗ worker-optimal stable matching w.r.t P w and P a (using GS algorithm)
←
21: else if t = T 0 then ⊲ Potential ties – approximation oracle
22: µˆ∗ O(U¯) for U¯ s.t. U¯(i,j) = UCB i,j for all i [N],j [K]
← ∈ ∈
23: end if
24: end if
25: end while
26: while t T do ⊲ Phase 2, exploitation with the chosen oracle.
≤
27: Match µ t(i) µˆ∗(i), i.
← ∀
28: t t+1
←
29: end while
34Lemma 5 (Data-processing Inequality, Lemma 1 in Garivier et al. [2019]). Consider a measurable
space (Ω, ) equipped with two distributions P and P , and any -measurable random variable
1 2
F F
Z :Ω [0,1]. We denote respectively by E and E the expectations under P and P . Then,
1 2 1 2
→
KL(P ,P ) kl(E [Z],E [Z]),
1 2 1 2
≥
where kl denotes the KL divergence for Bernoulli distributions, i.e., p,q [0,1]2,kl(p,q) = pln p+
∀ ∈ q
(1 p)ln 1−p.
− 1−q
G Proof of Therorem 7
For convenience, let Uˆ(t)(i,j), T(t) , UCB(t) , LCB(t) be the value of Uˆ(i,j), T , UCB , LCB
i,j i,j i,j i,j i,j i,j
at the end of round t. Define = t [T],i [N],j [K]: Uˆ(t)(i,j) U(i,j) > 6lnT as
F (∃ ∈ ∈ ∈ | − | T i( ,t j) )
r
the bad event that some preference is not estimated well during the horizon.
Lemma 6.
P( ) 2NK/T.
F ≤
Proof.
6lnT
P( ) = P 1 t T,i [N],j [K]: Uˆ(t)(i,j) U(i,j) >
F ∃ ≤ ≤ ∈ ∈ | − |
s
T(t) 
i,j
 
T
6lnT
P Uˆ(t)(i,j) U(i,j) >
≤ t=1i∈[N]j∈[K] | − | s T i( ,t j) 
X X X
T t 
6lnT
P T(t) = s, Uˆ(t)(i,j) U(i,j) >
≤ i,j | − | s
r !
t=1i∈[N]j∈[K]s=1
X X X X
T
t 2exp( 3lnT)
≤ · −
t=1i∈[N]j∈[K]
X X X
2NK/T,
≤
where the second last inequality results from Lemma 3.
Lemma 7. Conditional on q , UCB(t) < LCB(t) implies U(i,j) <U(i,j′).
F i,j i,j′
Proof. According to the definition of LCB and UCB, we have that conditional on q ,
F
6lnT 6lnT
LCB(t) = Uˆ(t) U(i,j) Uˆ(t)(i,j)+ = UCB(t) .
i,j i,j −
s
T(t) ≤ ≤
s
T(t) i,j
i,j i,j
(t) (t)
Therefore, if UCB < LCB , we have that
i,j i,j′
U(i,j) UCB(t) LCB(t) U(i,j′).
≤ i,j ≤ i,j′ ≤
35Lemma 8. In round t, let T(t) = min T(t) . Conditional on q , if T(t) > 96lnT/∆2 , we
i j∈[K] i,j F i min
(t) (t) (t) (t)
have LCB > UCB for any k [N], and LCB > UCB for any N +1 k K.
i,ρi,k i,ρi,k+1 ∈ i,ρi,N i,ρi,k ≤ ≤
(t)
Proof. We prove it by contradiction, suppose that there exists k [N] such that LCB
∈ i,ρi,k ≤
(t) (t) (t)
UCB or there exists N + 1 k K such that LCB UCB . Without loss of
i,ρi,k+1 ≤ ≤ i,ρi,N ≤ i,ρi,k
generality, denote j as the arm on the LHS and j′ as the arm on the RHS.
Conditional on q and by the definition of LCB and UCB, we have that
F
6lnT 6lnT
U(i,j) 2 LCB(t) UCB(t) U(i,j′)+2 .
−
s
T(t) ≤ i,j ≤ i,j′ ≤
s
T(t)
i i
Therefore, ∆ i,j,j′ = U(i,j) −U i,j′
≤
4 6 Tl in (tT
)
, which implies that T i(t)
≤
9 ∆6
2
il ,n j,jT
′ ≤
9 ∆6
2
mln inT, which is a
r
contradiction.
Lemma 9. Conditional on q , if ∆ > 96KlnT, Algorithm 3 would enter the exploitation
F min T0
phase and choose the Gale-Shapley oracle at sqome t T 0.
≤
Proof. If ∆ > 96KlnT, we have T > 96KlnT. Since for every worker, Algorithm 3 allocates
min T0 0 ∆2
min
jobs in a round-roqbin fashion, we have that T(t) > 96lnT.
i ∆2
min
(t) (t)
By Lemma 8, we know that for any worker w , LCB > UCB for any k [N], and
i i,ρi,k i,ρi,k+1 ∈
(t) (t)
LCB > UCB for any N +1 k K, i.e., the preference utility for the first N-ranked
i,ρi,N i,ρi,k ≤ ≤
jobs for every worker has been estimated well enough with the confidence intervals disjoint. The
flag F would be set as True as in Line 15 in Algorithm 3 and we would enter Phase 2 at some time
i
t T .
0
≤
Lemma 10. Given a utility matrix U without ties, the worker-optimal stable matching job of
N×K
each worker must be its first N-ranked.
Proof. We implement the Gale-Shapley algorithm with the workers as the proposing side. Once a
job is proposed, it has a temporary worker. By contradiction, once N jobs have been proposed,
we have N workers occupied. Therefore, each worker would be allocated with a job and the Gale-
Shapley algorithm would stop. Since in the deferred-acceptance procedure, workers proposeto jobs
one by one according to their preference list, then the worker-optimal stable matching job of each
worker must be its first N-ranked.
Proof of Theorem 7. We consider the two cases separately.
Case 1. ∆ > 96KlnT.
min T0
Let ∆
i,max
= maxq j∈[K][U∗(w i) U(i,j)] be the maximum worker-optimal stable regret that
−
may be suffered by w in all rounds, we have ∆ 1. The worker-optimal stable regret for each
i i,max
≤
36worker w by following Algorithm 3 satisfies
i
T
Reg (T) = E (U∗(w ) X (t))
i i i
−
" #
t=1
X
T
E 1 µ (i) = µ∗(i) ∆ (28)
t i,max
≤ { 6 }·
" #
t=1
X
T
E 1 µ (i) = µ∗(i) q ∆ +P( ) T ∆
t i,max i,max
≤ { 6 } | F · F · ·
" #
t=1
X
T
E 1 µ (i) = µ∗(i) q ∆ +2NK∆ (29)
t i,max i,max
≤ { 6 } | F ·
" #
t=1
X
96KlnT
∆ +2NK∆ (30)
≤ ∆2 · i,max i,max
(cid:24) min (cid:25)
KlnT
= O ,
∆2
(cid:18) min (cid:19)
whereEq.(28)comes fromthefactthatinamatchingmarketwithoutties, thereisauniqueworker-
optimal stable matching and hence a unique optimal stable match µ∗(i) for worker i, Eq.(29) holds
based on Lemma 6, Eq.(30) holds according to Lemma 9 and 10 and the fact that Gale-Shapley
algorithm could always outputthe worker-optimal stable matching with respect to the given utility
matrix by treating worker as the proposing side.
Case 2. ∆ 96KlnT.
min ≤ T0
The objective funqction is the approximation regret Regα(T). Denote (t) as the event that
i Fd
(t) (t) (t) (t)
LCB > UCB for all k [N], and LCB > UCB for all N +1 k K. We
i,ρi,k i,ρi,k+1 ∈ i,ρi,N i,ρi,k ≤ ≤
have
T
Regα(T) = E αT U∗(w ) X (t) P( )
i · i − i | F · F
" #
t=1
X
T
+E αT U∗(w ) X (t) q P(q )
i i
· − | F · F
" #
t=1
X
T
αT P( )+E αT U∗(w ) X (t) q (31)
i i
≤ · F · − | F
" #
t=1
X
T
2αNK +E αT U∗(w ) X (t) q (32)
i i
≤ · − | F
" #
t=1
X
T
2αNK +E αT U∗(w ) X (t) 1 (T0) q
≤ · i − i Fd | F
" ! #
Xt=1 n o
T
+E αT U∗(w ) X (t) 1 q (T0) q
· i − i Fd | F
" ! #
Xt=1 n o
T
2αNK +αT +E αT U∗(w ) X (t) 1 q (T0) q , (33)
≤ 0 · i − i Fd | F
" ! #
Xt=1 n o
37where Eq.(31) comes from the fact that U∗(w ) 1 and X (t) 0. Eq.(32) holds according to
i i
≤ ≥
Lemma 6. Eq.(33) comes from the fact that when the good event q that all utilities are well
F
estimated and the top (N+1)-ranked CIs are disjoint before T , the Gale-Shapley algorithm would
0
give us the OSS in the exploitation phase, and since α (0,1], the approximation regret would be
∈
no larger than αT +(α 1) (T T ) αT .
0 0 0
− · − ≤
When q
(T0)
happens,wehave overlaps intheconfidenceintervals forsomeworker w ’s firstN-
Fd i
ranked jobs upto time horizon T , henceby implementing Algorithm 3, we would choose to call the
0
offline approximation oracle in the exploitation phase. Moreover, conditional on q , we have the
F
ground-truth utility matrix U lies in the uncertainty set constructed by the empirical mean utility
matrix Uˆ(T0) and the UCB(T0) and LCB(T0), i.e., for any (i,j) [N] [K], Uˆ(T0)(i,j) U(i,j)
∈ × | − | ≤
6KlnT. If we implement an (α,ǫ)-oracle, with ǫ being 2 6KlnT, follow a similar proof as that
T0 T0
qfor Theorem 6, in each round t in the exploitation phase, wqe have that
6KlnT
αU∗(w ) EX (t) 2 . (34)
i i
− ≤ T
r 0
Since there are in total T T rounds of exploitation, we have that
0
−
T
6KlnT
E αT U∗(w ) X (t) 1 q (T0) q αT +2 (T T ). (35)
· i − i Fd | F ≤ 0 T − 0
" Xt=1 ! n o # r 0
Therefore, combining Eq.(33) and (35), we have
6KlnT
Regα(T) 2αNK +2αT +2 (T T ).
i ≤ 0 T − 0
r 0
H Proof of Lemma 2
Proof. We proof the three properties as follows.
1. Optimal Stable Share
Underν,considerthefollowingstablematchings: µ = (w ,a ),(w ,a ),(w ,a ),(w ,a ) and
1 1 2 2 1 3 4 4 3
{ }
µ = (w ,a ),(w ,a ),(w ,a ),(w ,a ) . The optimal stable share is U∗(w) = 1, w with
2 { 1 2 2 3 3 1 4 4 } 2 ∀ ∈ W
w andw receives itinbothmatchings,w receives itinmatchingµ andw receivesitinmatching
1 2 3 2 4
µ . Under ν′ , the optimal stable shares are (u′)∗(w ) = 1 +γ, (u′)∗(w ) = 1, (u′)∗(w ) = 1, and
1 1 2 2 2 3 4
(u′)∗(w ) = 0, achieved through the stable matching µ′ = (w ,a ),(w ,a ),(w ,a ),(w ,a ) .
4 1 1 2 3 3 4 4 2
{ }
2. Relevant Utility Gap
Besides, the relevant utility gap for ν is ∆ν = 0 since both µ and µ belongs to the Pareto-
rel 1 2
U
optimal stable matching set . On theother hand, since thejobs have global preferencerankings
over the workers, i.e., serialS do icpt tatorship, µ′ is the unique stable matching with respect to ν′ , i.e.,
U′ = µ′ . A perturbation of γ in U(1,1) or γ in U(1,2) brings ties for worker w , and hence
wSo op ut ld c{ ha} nge U′ tp U . On− the other hand, a perturbation of 1 in U(3,2) or 1 1 in U(3,4)
would make
USo ′p it ncludS eop bt
oth µ′ and µ′ = (w ,a ),(w ,a ),(w
,a4
),(w ,a ) .
All− o4
ther entries
Sopt 2 { 1 1 2 3 3 2 4 4 }
need a perturbation of scale larger than 1 to change the Pareto-optimal stable matching set. Since
4
γ < 1, we have that ∆ν′ = γ.
4 rel
3. Benchmark Utility
38Let γ = cT−1/2+δ for some δ (0, 1). Then, under ν, we aim to minimize the approxi-
mation regret Regα(T) for every w∈ orker 2 w , while under ν′ , the objective is to minimize regret
i i
Reg (T) for each worker w . Given an offline oracle that could compute the best possible approx-
i i
imation ratio, the benchmark utilities for the four workers (after multiplying the approximation
ratio) are 1,3,3, 3 under ν and 1 +γ, 1,1,0 under ν′ . For ν′ , by serial dictatorship, the
2 8 8 8 2 2 4
allocation scheme is equivalent to letting the workers choose their favorite jobs one by one. Do-
(cid:0) (cid:1) (cid:0) (cid:1)
ing so leads to the matching µ = (w ,a ),(w ,a ),(w ,a ),(w ,a ) , which is unique since for
1 2 2 3 3 1 4 4
{ }
all workers, when they choose their jobs, only a single unallocated job maximizes their utility.
Hence, the benchmark utilities are immediately determined by the utility under this matching.
For ν, since all workers but w have no utility from job a , and U∗(w ) = U(1,2), it is always
1 2 1
optimal to assign a to w deterministically and the benchmark utility for w is 1/2. For the
2 1 1
other players, if we match w to a , then for w and w , there are two possible matchings, i.e.,
2 1 3 4
(w ,a ),(w ,a ) and (w ,a ),(w ,a ) , but the first one is always better since it gives both
3 4 4 3 3 3 4 4
{ } { }
players higher utilities. Similarly, if we match w to a , it is always better to select the matching
2 3
(w ,a ),(w ,a ) rather than (w ,a ),(w ,a ) , and if w is matched to a , then we choosing
3 1 4 4 3 4 4 3 2 4
{ } { }
(w ,a ),(w ,a ) yields higher utilities than choosing (w ,a ),(w ,a ) . Since all three three
3 1 4 3 3 3 4 1
{ } { }
players have an OSS of 1/2, to maximize the OSS ratio, we need to compute a distribution D
over the three matchings µ = (w ,a ),(w ,a ),(w ,a ) , µ = (w ,a ),(w ,a ),(w ,a ) and
a 2 1 3 4 4 3 b 2 3 3 1 4 4
{ } { }
µ = (w ,a ),(w ,a ),(w ,a ) , such that min u (w ),u (w ),u (w ) is maximized. Noticing
c 2 4 3 1 4 3 D 2 D 3 D 4
{ } { }
that each of the three matchings yields the OSS to two players and a lower utility for the third
one, we can conclude that the optimal balance would be u (w ) = u (w ) = u (w ) – otherwise,
D 2 D 3 D 4
we could increase the OSS-ratio by moving utility from the highest rewarded player to the lowest
rewarded one. This condition is satisfied iff
1 1 1
P(µ )= , P(µ )= , P(µ )= ,
a b c
2 4 4
and the benchmark utility for any of these three players is 3.
8
39