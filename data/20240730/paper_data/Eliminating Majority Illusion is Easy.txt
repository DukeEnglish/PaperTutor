Eliminating Majority Illusion is Easy
Jack Dippel∗ Max Dupr´e la Tour† April Niu‡ Sanjukta Roy§ Adrian Vetta¶
Abstract
Majority Illusion is a phenomenon in social networks wherein the decision by the majority
of the network is not the same as one’s personal social circle’s majority, leading to an incorrect
perception of the majority in a large network. In this paper, we present polynomial-time al-
gorithms which can eliminate majority illusion in a network by altering as few connections as
possible. Additionally, we prove that the more general problem of ensuring all neighbourhoods
in the network are at least a p-fraction of the majority is NP-hard for most values of p.
1 Introduction
Perceptions areliabletobecomedistortedonasocialnetwork. Anexemplarofthisisthefriendship
paradox [10]: on average, a person has fewer friends than their friends do.1 Similarly, on average,
a researcher is less productive than their co-authors [8, 3]. This network characteristic, whereby
local observations can lead to erroneous conclusions regarding a global state, was dubbed majority
illusion by Lerman et al. [16]. This nomenclature relates to situations where a minority viewpoint
is perceived to be the majority viewpoint [23].
One of the simplest manifestation of majority illusion concerns election. Let’s model a two-
party election by a graph G = (V,E) where each node represents a voter and each edge connects
two voters that are neighbours (or friends). Furthermore, imagine party preference is given by a
colouring function f : V → {B,R}. If there are more blue nodes than red nodes then we say
blue is the majority. A node v ∈ V is then under (majority) illusion if it has strictly more red
neighbours than blue neighbours. It is easy to construct instances where some nodes are under
majority illusion; see Figure 1(a). Much more surprising is the existence of instances where every
node is under illusion; see Figure 1(b).
Network topology can have abigimpact on misinformation. Indeed, electoral networks are very
susceptibletomajorityillusionbecausetheirunderlyingnetworktopology hasasocialdeterminant.
For example, homophily, the tendency for humans to connect with similar people, contributes to
the creation of information bubbles and polarization [19].
Another topical example of majority illusion concerns vaccinations [14]. Here node colours may
indicate vaccinated or unvaccinated. If a personal decision to vaccinate oneself is influenced by
the actions of people in your local social network then misinformation here may have significant
consequences. Moreover, a smaller number of influential high degree nodes may suffice to cause
∗McGill University: jack.dippel@mail.mcgill.ca
†McGill University: max.duprelatour@mail.mcgill.ca
‡McGill University: yuexing.niu@mail.mcgill.ca
§University of Leeds: s.roy@leeds.ac.uk
¶McGill University: adrian.vetta@mcgill.ca
1Thisisasimpleconsequenceofthefact thatahigherdegreenodeappearsinmoreneighbourhoodsthanalower
degree node.
1
4202
luJ
92
]AM.sc[
1v78102.7042:viXra(a) v 1 (b) v 1
v v
v 2 3
2
v v v v v v v v
3 4 5 6 4 5 6 7
v v v v
7 8 8 9
Figure 1: In network (a) there are two nodes, v and v , under majority illusion; in network (b)
1 2
every node suffers illusion!
major distortions. An illusion can occur even when there are more than two alternatives and each
node selects one alternative. Then, a node under illusion has strictly less blue neighbors (i.e.,
the neighbors select the winning alternative) compared to red neighbors (denotes the set of all
non-winning alternatives). Indeed, this observation indicates the relevance of majority illusion to
advertising, campaigning, and influence maximization [2, 26]. Moreover, the effects of illusion have
been studied in many disparate areas, including voting theory [1, 4, 6, 24], participatory budgeting
and the allocation of public goods [15, 25].
These applications highlighting the importance of creating social networks that give everyone
fair and unbiased information [14]. That is the focus of this paper. Specifically, to determine
whether or not majority illusion can be eliminated in a network? If so, can we do this optimally in
polynomial time?
1.1 The Illusion Elimination Problem
To answer these questions we first study a class of majority illusion elimination problems. We are
given a social network G= (V,E), a non-negative integer k, and a voting function f : V → {B,R},
where blue is the strict majority. Can we eliminate (majority) illusion, for every node, by altering
(adding and/or deleting) at most k edges? That is, after the alteration, no node can have a strict
majority of red nodes in its neighbourhood.
Observe that, since we may remove edges of G or add non-edges of G, there are three variants
of the majority illusion elimination problems where we can only add edges, only remove edges, or
bothaddandremoveedges. Formally, thisgives thefollowingthreedecisionproblems,respectively:
Majority Illusion Addition Elimination (MIAE)
Input: A graph G = (V,E), a function f : V 7→ {B,R}, and a non-negative integer k.
Question: Is there an edge set E′ on V with E ⊂ E′,|E′ \E| ≤ k such that no node is
under illusion in G′ = (V,E′) under f?
Majority Illusion Removal Elimination (MIRE)
Input: A graph G = (V,E), a function f : V 7→ {B,R}, and a non-negative integer k.
Question: Is there an edge set E′ on V with E′ ⊆ E,|E \ E′| ≤ k such that no node is
under illusion in G′ = (V,E′) under f?
2Majority Illusion Elimination (MIE)
Input: A graph G = (V,E), a function f : V 7→ {B,R}, and a non-negative integer k.
Question: Is there an edge set E′ on V with |E \E′|+|E′ \E| ≤ k such that no node is
under illusion in G′ = (V,E′) under f?
It may be helpful to illustrate these three problems using the two examples we encountered in
Figure 1. Figure 2 considers the example from Figure 1(a) where only two nodes, v and v , are
1 2
under majority illusion. It presents optimal solutions that require the minimum number of edge
alterations for the three problems (that is, solutions to optimization versions of the above decision
problems). Similarly, Figure3 considers theexample Figure1(b)whereevery nodeis underillusion
and gives the three corresponding optimal solutions to eliminate illusion.
(a) v 1 (b) v 1
v v
2 2
v v v v v v v v
3 4 5 6 3 4 5 6
v v v v
7 8 7 8
(c) v 1 (d) v 1
v v
2 2
v v v v v v v v
3 4 5 6 3 4 5 6
v v v v
7 8 7 8
Figure 2: In (a) only v and v are under majority illusion. An optimal solution to the MIAE
1 2
problem, adding just 2 edges, is shown in (b); an optimal solution to the MIRE problem, removing
5 edges, is shown in (c); an optimal solution to the MIE problem, adding 1 edge and removing 1
edge, is shown in (d).
We remark that the assumption that blue party is strict majority is not necessary. However the
assumption of strictness ensures that, for all three problems, it is always feasible to alter the graph
to eliminate majority illusion.
Grandi et al. [12] left unresolved the computational complexity of these problems. Instead,
rather than completely eliminating illusion at every node, they showed it was NP-complete to
partially eliminate illusion for a fraction of the nodes. In particular, they studied the following
q-partial (majority) illusion elimination problem: can at most a q-fraction of the nodes be left
under illusion after altering (adding and/or deleting) at most k edges in G.
They proved this problem is NP-complete for q ∈ (0,1). Observe that the MIAE, MIRE, and
MIE problems correspond to the case q = 0, that is, where no nodes are allowed to be left under
3(a) v 1 (b) v 1
v v v v
2 3 2 3
v v v v v v v v
4 5 6 7 4 5 6 7
v v v v
8 9 8 9
(c) v 1 (d) v 1
v v v v
2 3 2 3
v v v v v v v v
4 5 6 7 4 5 6 7
v v v v
8 9 8 9
Figure 3: In (a) every node is under majority illusion. An optimal solution to the MIAE problem,
adding11edges,isshownin(b); anoptimalsolutiontotheMIREproblem,requiringtheremovalof
all 12 edges, is shown in (c); an optimal solution to the MIE problem, adding 3 edges and removing
3 edges, is shown in (d).
illusion. Therefore, the computational complexity of the main problems of interest remained open
and motivated this work.
1.2 Our Contributions.
We make two contributions regarding illusion elimination in social networks. First, we prove that
themajorityillusioneliminationproblemissolvableinpolynomialtimeforallthreevariants(MIAE,
MIRE and MIE). Thus completely eliminating majority illusion in a social network is easy. The
result is very surprisinggiven, as described above, that the problem of partially eliminating illusion
is hard [12].
In our second contribution, we generalize the problem of eliminating majority illusion and
consider the problem of p-illusion. The majority illusion elimination problems assume the blue
party has at least 1 the votes. Suppose, instead, we do not assume the votes for the blue party and
2
ask if it is possible to ensure that every voter believes that the blue party has at least a p-fraction
of the ballots, where p ∈ [0,1] is a rational number. Thus, we define the p-Illusion problem: Given
a graph G = (V,E), a colouring function f : V → {B,R}, and a rational number p ∈ [0,1],
can we modify at most k edges such that every node has at least p-fraction of blue nodes in its
neighbourhood? This question induces three problems for p-Illusion (analogous to majority illusion
elimination), namely, p-IA, p-IR, and p-I,2 which as we prove are all polynomial time solvable for
2Weemphasize thedistinction between thep-Iproblem and theq-partialMIE problem or theq-majority illusion
problem of [12]. In p-I (and p-IA/p-IR) every node must have at least a p-fraction of blue neighbors. In contrast,
4p = 1. However, the majority case p = 1 is very special. We prove that p-IA, p-IR, and p-I are all
2 2
NP-complete for any rational p ∈ [0,1] except for p ∈ {0, 1,1, 2,1}.
3 2 3
An overview of the rest of the paper is as follows. In Section 1.3 we discuss related works.
In Section 2, we present preliminary results and observations concerning illusion elimination. Our
threepolynomialtime algorithms for MIAE,MIRE,andMIE are thengiven inSections 3, 4, and5,
respectively. Finally, inSection6weprovetheNP-completeness ofthep-IA,p-IRandp-Iproblems,
for p ∈/ {0, 1,1,2,1}.
3 2 3
1.3 Related Work.
Several studies have delved into the dynamics of decision-making within social networks and the
manipulation of these networks, offering insights into various related phenomena. The article by
Grandi et al. [12] is the most relevant, as it directly addresses the phenomenon of majority illusion
in social networks, where individuals perceive a majority opinion that does not reflect the actual
distribution of opinions. Through analysis and experimentation, the authors propose methods for
identifying and mitigating majority illusion, offering valuable insights into the dynamics of opinion
formation andsocial influenceinnetworked environments. Theresults inthis paperarebased upon
their model.
Liu et al. [18] explore the concept of “information gerrymandering” in elections, where the
strategic distribution of individuals within social networks can influence voting outcomes. They
introduces a metric called influence assortment to quantify this phenomenon and demonstrates its
effectiveness in predicting voting outcomes in various network structures.
The effect of adding and/or deleting edges in a social network has been investigated in several
settings. For example, Castiglioni et al. [4] study election control in social networks through
the addition or removal of connections between individuals. Their study proposes methods for
strategically manipulating network connections to influence election outcomes, highlighting the
potential for network topology to shape democratic processes.
Byanalyzingtheimpactoflinkadditionsoninformationdiffusionandexposurediversity,Becker
et al. [2] propose methods to mitigate bias and improve the accessibility of diverse viewpoints.
Through empirical analysis and simulations, their study provides insights into the potential of
structural interventions to promote fairness and inclusivity in online information dissemination.
Kempe et al. [15] explore methods for inducing equilibria in networked public goods games
by modifying the structure of the network. Through mathematical modeling and simulations,
their research investigates strategies for promoting cooperation and achieving desirable outcomes
in public goods dilemmas. Their work also proffers insights into the role of network topology in
shaping collective behavior.
Wilder and Vorobeychik [24] investigate opinion diffusion and campaigning strategies on so-
ciety graphs. Their research studies how opinions spread through networks and the effectiveness
of various campaigning approaches. They focus on the dynamics of opinion formation and diffu-
sion in social networks, with the aim of understanding influence dynamics and designing effective
communication strategies.
Faliszewski et al. [9] examine techniques for controlling elections through social influence. By
manipulatingthespreadofinformationandopinionswithinsocialnetworks,theyconsiderstrategies
for influencing voter behavior and election outcomes and provides insights into the potential for
socialinfluencetoshapeelectoral processes,highlightingtheneedforunderstandingandaddressing
such dynamics in democratic systems.
q-partialMIEeliminatestheillusionofany(1−q)-fractionofthenodes;andintheq-majorityillusionproblemasks
if at least q fraction of thenodes be underillusion.
5In a recent work Fioravantes et al. [11] study the problem of eliminating majority illusion by
alteringthecolorofatmostk vertices andshowthat, unlikeouredgeeditingproblem,itisNP-hard
and W[2]-hard with respect to k. They present FPT algorithm parameterized by treewidth of the
input graph and PTAS for planar graphs.
2 Preliminaries
We begin by defining the following notations. Given a graph G = (V,E), let B be the set of
blue nodes and R the set of red nodes. For any node v ∈ V, let Γ(v) denote the neighbourhood
of v, r(v) = |{u ∈ R : u ∈ Γ(v)}| be the number of red nodes in the neighbourhood of v, and
b(v) = |{u ∈ B :u ∈ Γ(v)}| be the number of blue nodes in its neighbourhood.
Definition (Illusion). Let G = (V,E) be a graph such that
|B|
> p. Then, a node v ∈ V is under
|V|
b(v)
illusion if it has strictly less than p-fraction of blue neighbors, i.e., < p. When p = 1/2, it is
|Γ(v)|
known as majority illusion.
|B|
Equivalently, if < p, then a node v ∈ V is under illusion if it has at least p-fraction of blue
|V|
b(v)
neighbors, i.e., ≥ p.
|Γ(v)|
Next, we describe basic properties that optimal solutions to our three majority illusion elim-
ination problems must possess. For a node v ∈ V, if r(v) > b(v) then we say v is in deficit; if
r(v) < b(v) then we say v is in surplus. So the task is to add/remove as few edges as possible so
that no node is in deficit.
We begin with the trivial observation that it is never of benefit to add an edge between two red
nodes.
Observation 1. In an optimal solution E′ to an instance (V,E,f,k) of MIE or MIAE, there are
no edges of E′\E between two red nodes.
Proof. Assume there exist two red nodes u,v with uv ∈ E′\E. Then E′\uv is also be a solution
to the instance (V,E,f,k), because removing uv can only decrease the ratio of red nodes to blue
nodes in both affected neighbourhoods. Thus uv cannot be added in an optimal solution.
Analogously, it is never of benefit to remove an edge between two blue nodes.
Observation 2. In an optimal solution E′ to an instance (V,E,f,k) of MIE or MIRE, there are
no edges of E\E′ between two blue nodes.
Proof. Assume there exist two blue nodes u,v with uv ∈E\E′. Then E′∪uv is also a solution to
the instance (V,E,f,k), because adding uv can only decrease the ratio of red nodes to blue nodes
in both affected neighbourhoods. Thus uv cannot be removed in an optimal solution.
We conclude this section with three more observations, one for each of our three problems.
The first, for the addition variant, essentially states that for any red node, it is never beneficial to
connect it to more new blue neighbours than is absolutely necessary.
Lemma 1. In an optimal solution E′ to (V,E,f,k) of MIAE, there are exactly max(r(v)−b(v),0)
edges of E′\E incident to each red node v.
6Proof. Supposetherearefewerthan max(r(v)−b(v),0) edges of E′\E incidenttosomerednodev.
Then N E′[v] is majority red, contradicting the feasibility of E′.
On the other hand, suppose there are more than max(r(v)−b(v),0) edges of E′ \E incident
to some red node v. Then, by Lemma 1, there are more than max(r(v)−b(v),0) edges between
v and the set of blue nodes. For any blue node u with uv ∈ E′ \E, observe that E′ \uv must
also be a solution to the instance (V,E,f,k). This is because removing uv does not cause there
to be more red nodes than blue nodes in the neighbourhood of v, and it decreases the ratio of red
nodes to blue nodes in the neighbourhood of u. Thus uv cannot be added in an optimal solution,
a contradiction.
Similarly, for the removal variant, for any blue node, it is never beneficial to disconnect it from
more red neighbours than is absolutely necessary.
Lemma 2. In an optimal solution E′ to (V,E,f,k) of MIRE, there are exactly max(r(v)−b(v),0)
edges of E\E′ incident to each blue node v.
Proof. Supposethere are fewer than max(r(v)−b(v),0) edges of E\E′ incident to some blue node
v. Then N E′[v] is majority red, contradicting the feasibility of E′.
On the other hand, suppose there are more than max(r(v)−b(v),0) edges of E \E′ incident
to some blue node v. Then, by Lemma 2, there are more than max(r(v)−b(v),0) edges between
v and the set of red nodes. For some red node u with uv ∈ E\E′, observe E′∪uv must also be a
solution to the instance (V,E,f,k). This is because adding uv does not cause there to be more red
nodes than blue nodes in the neighbourhood of v, and it decreases the ratio of red nodes to blue
nodes in the neighbourhood of u. Thus uv cannot be removed in an optimal solution.
Finally, for the general majority illusion elimination problem, we have the following more sub-
stantial observation.
Lemma 3. There exists an optimal solution E′ to an instance (V,E,f,k) of MIE with no edges of
E′\E incident to any red node, and no edges of E\E′ incident to any blue node.
Proof. We provide a method of transforming any optimal solution E′ to an instance (V,E,f,k) of
MIE into an optimal solution of the desired form.
Suppose there is an edge of E′ \E incident to some red node v. By Observation 1, this edge
connects v to some node u ∈ B. E′ is an optimal solution, meaning N E′(v) contains at least as
many blue nodes as red nodes. Removing uv from E′ would reduce the size of |E \E′|+|E′\E|,
and result in one fewer blue node in N E′(v) and one fewer red node in N E′(u), while leaving all
other neighbourhoods unchanged. By the optimality of E′, E′ \{uv} is not a solution, therefore
it must be true that removing a blue node from N E′(v) creates a majority red neighbourhood,
meaning there are exactly as many red nodes in N E′(v) as blue nodes. Therefore, we will alter E′
by removing all edges of E′\E incident to v, and removing an equal numberof edges of E′ between
v and red nodes. This operation, maintains the size of |E \E′|+|E′ \E|, decreases the number
of edges of E′\E incident to a red node, and increases the number of edges between red nodes in
E \E′ by the same amount.
Now, supposethere is an edge of E\E′ incident to a blue node u. Then, by Observation 2, this
edge connects u to some node v ∈ R. E′ is an optimal solution, meaning N E′(v) contains at least
as many blue nodes as red nodes. Adding uv from E′ would reduce the size of |E \E′|+|E′\E|,
and result in one more blue node in N E′(v) and one more red node in N E′(u), while leaving all
other neighbourhoods unchanged. By the optimality of E′, E′ ∪{uv} is not a solution, therefore
it must be true that adding a red node to N E′(u) creates a majority red neighbourhood, meaning
7there are exactly as many red nodes in N E′(u) as blue nodes. Therefore, we will alter E′ by adding
all edges of E \E′ incident to u, and adding an equal number of edges of E between u and blue
nodes. This operation, maintains the size of |E \E′|+|E′ \E|, decreases the number of edges of
E\E′ incident to a blue node, and increases the number of edges between blue nodes in E′\E by
the same amount.
Repeated application of these two operations returns an optimal solution E′ with no edges of
E′\E incident to any red node, and no edges of E \E′ incident to any blue node.
3 Majority Illusion Addition Elimination (MIAE)
The Majority Illusion Addition Elimination (MIAE) Problem is the Majority Illusion Elimination
Problem (MIE) restricted to adding edges.
3.1 A First Attempt
Given G = (B∪R,E) we define an auxiliary graph G∗ = (B∪R,E∗), called the availability graph.
Motivated by Lemma 1, its edges are the edges in the complement of G excluding those between
two red nodes. That is, E∗ = E(R,B)∪E(G[B]). Now let
max(r(v)−b(v),0) if v ∈ R
b∗(v) =
(b(v)−r(v) if v ∈ B
Now consider the following integer program.
(IP−1a) max −y (1)
e
e∈E∗(G∗)
X
s.t. y = b∗(v) v ∈ R(G∗) (2)
uv
u:u∈N XE∗(v)∩B
−y + y ≤ b∗(v) v ∈ B(G∗) (3)
uv uv
u:u∈N XE∗(v)∩B u:u∈N XE∗(v)∩R
y ∈ {0,1} e∈ E∗(G∗) (4)
e
Theorem 4. The integer program (IP-1a) is the MIAE problem.
Proof. Observe, by (4), that an optimal solution y to the integer program (IP-1a) corresponds to
a set of edges Y. We will demonstrate that Y is an optimal solution to the MIAE problem.
First, by Observation 1, an optimal solution to the MIAE problem is a subset of E∗. Thus
constraint (4) is valid.
Second, by Lemma 1, an optimal solution to the MIAE problem has the property that there
are exactly max(r(v)−b(v),0) edges of incident to each red node v. Thus the equality constraints
(2) are valid.
Third, any feasible solution to the MIAE problem must satisfy the property that the number of
red nodes does not exceed the number of blue nodes in the neighbourhood of any blue node. That
is,
r(v)+ y ≤ b(v)+ y v ∈ B(G∗) (5)
uv uv
u:u∈N XE∗(v)∩R u:u∈N XE∗(v)∩B
8But, for any blue node v, by definition b∗(v) = b(v)−r(v). Thus rearranging (5) we obtain (3).
Finally, an optimal solution to the MIAE problem contains as few edges of E∗ as possible.
However, minimizing y is equivalent to maximizing the objective function (1).
e∈E∗(G∗) e
It follows that an optimal solution y to integer program (IP-1a) is an optimal solution to the
P
MIAE problem, as desired.
Therefore to solve the MIAE problem, we can simply solve the integer program (IP-1a). But
runningan integer programming solver is not polynomial time in the worst case, so we need a more
efficient method. Observe that the (IP-1a) has size polynomial in the cardinality of the graph.
Thus, its linear program relaxation can be solved in polynomial time. So, if the optimal solution
to the LP relaxation is always integral then, by Theorem 4, we would have an efficient algorithm
for the MIAE problem. Unfortunately, this property is not guaranteed. The LP relaxation is not
integral.
v v
3 3
1
2 1
2
v v v 1 v
2 4 2 4
2
v v
1 1
Figure 4: A non-integral optimal solution to the linear program relaxation of (IP-1a).
To see this, consider the graph shown in the LHS of Figure 4. Each of the three blue nodes
suffers from majority illusion as it has only a red node in its neighbour. So they need an additional
blue neighbour. To rectify this the optimal solution (IP-1a) requires the addition of two edges.
However, the linear program relaxation has optimal value 3. This is illustrated in the RHS of
2
Figure 4; simply add a cycle on the three blue nodes, shown in bold, and assign these new edges
weight 1.
2
3.2 A Second Attempt
So we desire an integer program that (i) exactly models the MIAE problem, (ii) has an integral LP
relaxation, and (iii) the LP relaxation is solvable in polynomial time.
Towards this goal we make two alterations to the integer program (IP-1a). The first is we alter
the constraint (3) for each blue node v by adding |N E∗(v)∩B| to both sides. This transformation
is evidently innocuous. The new altered constraints are then
(1−y uv)+ y
uv
≤ b∗(v)+|N E∗(v)∩B| v ∈ B(G∗) (6)
u:u∈N XE∗(v)∩B u:u∈N XE∗(v)∩R
For ease of exposition, we define a new function b′(v) to account for this modification. Namely, let
max(r(v)−b(v),0) if v ∈ R
b′(v) =
( |N E∗(v)∩B|+b(v)−r(v) if v ∈ B
9Critically, we also add the following new set of constraints to the integer program.
1 ∀X ⊆B ∪R
(1−y )+ y ≤ b′(v)+|F| (7)
e e
e:e∈E X∗(G∗[B]) e:e∈E X∗(R,B)
j2
(cid:16)v X:v∈X (cid:17)k
∀F ⊆ δ E∗(X)
e∈E∗(G∗[X])∪F e∈E∗(G∗[X])∪F
We willshow inTheorem5thattheconstraints aresatisMIEd byany feasiblesolution totheMIAE
problem. For the motivation underlying these constraints consider again the example in Figure 4.
Consider the case of X = B and F = ∅. This gives a violated constraint for the non-integral
solution y illustrated in Figure 5.
v
3
1
2 1
2
v 1 v
2 4
2
v
1
Figure 5: A violated constraint: 1−y +1−y +1−y ≤ ⌊3⌋
v3v4 v3v2 v2v4 2
Observe, for this example, that (7) becomes
1
(1−y ) ≤ b′(v) (8)
e
2
e:e∈E X∗(G∗[B]) j (cid:16)v X:v∈B (cid:17)k
Now
(1−y ) = (1−y )+(1−y )+(1−y )
e v2v3 v2v4 v3v4
e:e∈E∗(G∗[B])
X
= 3−(y +y +y )
v2v3 v2v4 v3v4
1
= 3−3·
2
3
=
2
10On the other hand
1 1
b′(v) = (|N E∗(v)∩B|+b(v)−r(v))
2 2
j (cid:16)v X:v∈B (cid:17)k j (cid:16)v X:v∈B (cid:17)k
1
= (2+0−1)
2
j (cid:16)v X:v∈B (cid:17)k
1
= 1
2
j v X:v∈B k
3
=
2
j k
= 1
Ergo, the constraint (8) is violated for the non-integral solution y. In fact, we will prove adding
this set of new constraints will eliminate all non-integral solutions.
Putting all this together our new integer program is
(IP−1b) max −y
e
e∈E∗(G∗)
X
s.t. y = b′(v) v ∈ R(G∗)
uv
u:u∈N XE∗(v)∩B
(1−y )+ y ≤ b′(v) v ∈ B(G∗)
uv uv
u:u∈N XE∗(v)∩B u:u∈N XE∗(v)∩R
1 ∀X ⊆ B∪R
(1−y )+ y ≤ b′(v)+|F|
e e
e:e∈E X∗(G∗[B]) e:e∈E X∗(R,B)
j2
(cid:16)v: Xv∈X (cid:17)k
∀F ⊆ δ E∗(X)
e∈E∗(G∗[X])∪F e∈E∗(G∗[X])∪F
y ∈{0,1} e ∈ E∗(G∗)
e
Our first step then is to verify that (i) still holds; that is, (IP-1b) solves the MIAE problem.
Theorem 5. The integer program (IP-1b) is the MIAE problem.
Proof. By Theorem 4, it suffices to prove that the integer program (IP-1b) is the integer pro-
gram (IP-1a). As mentioned, the alterations to the previous inequality constraints are trivial.
What remains is to show the newly added constraints (7) do not eliminate any solutions. So take
any solution y to the integer program (IP-1a), any collection X ⊆ B∪R and any subset of edges
F ⊆ δ E∗(X) leaving X in E∗(G∗). For each node v ∈B, the constraint on v gives
(1−y )+ y + (1−y )+ y ≤ b′(v) (9)
e e e e
e:v∈e e:v∈e e:v∈e e:v∈e
e∈E∗X(G∗[B]) e∈EX∗(R,B) e∈E∗X(G∗[B]) e∈EX∗(R,B)
e∈E∗(G∗[X]) e∈E∗(G∗[X]) e∈F e∈F
Also, for each node v ∈ R, the constraint on v gives
y + y ≤ b′(v) (10)
e e
e:v∈e e:v∈e
e∈EX∗(R,B) e∈EX∗(R,B)
e∈E∗(G∗[X]) e∈F
11Therefore, when we sum these constraints for every node in X, we get
2· (1−y )+2· y + (1−y )+ y ≤ b′(v) (11)
e e e e
e:e∈E∗(G∗[B]) e:e∈E∗(R,B) e:e∈E∗(G∗[B]) e:e∈E∗(R,B) v:v∈X
X X X X X
e∈E∗(G∗[X]) e∈E∗(G∗[X]) e∈F e∈F
Also, trivially, we have
|F| = 1+ 1
e:e∈E∗(G∗[B])∩F e:e∈E∗(R,B)∩F
X X
≥ (1−y )+ y (12)
e e
e:e∈E∗(G∗[B])∩F e:e∈E∗(R,B)∩F
X X
Summing (11) and (12), we obtain
2· (1−y )+2· y ≤ b′(v)+|F|
e e
e:e∈E∗(G∗[B]) e:e∈E∗(R,B) v:v∈X
X X X
e∈E∗(G∗[X])∪F e∈E∗(G∗[X])∪F
Finally divide both sides by two and take their floors. By the integrality of y, we have
1
(1−y )+ y ≤ b′(v)+|F|
e e
2
e:e∈E X∗(G∗[B]) e:e∈E X∗(R,B) j (cid:16)v: Xv∈X (cid:17)k
e∈E∗(G∗[X])∪F e∈E∗(G∗[X])∪F
Thus y is also a solution to the integer program (IP-1b).
Again, Theorem 5 implies that we can solve the MIAE problem by solving the integer program
(IP-1b). We will do this efficiently by solving its linear program relaxation. To achieve this
successfully, we must show that the LP relaxation is integral and also that it can be solved in
polynomial time despite the fact that there are an exponential number of constraints of type (7).
3.3 A TDI System
The LP relaxation of (IP-1b) is
(IP−1b) max −y (13)
e
e∈E∗(G∗)
X
s.t. y = b′(v) v ∈ R(G∗) (14)
uv
u:u∈N XE∗(v)∩B
(1−y )+ y ≤ b′(v) v ∈ B(G∗) (15)
uv uv
u:u∈N XE∗(v)∩B u:u∈N XE∗(v)∩R
1 ∀X ⊆ B ∪R
(1−y )+ y ≤ b′(v)+|F| (16)
e e
e:e∈E X∗(G∗[B]) e:e∈E X∗(R,B)
j2
(cid:16)v X:v∈X (cid:17)k
∀F ⊆ δ E∗(X)
e∈E∗(G∗[X])∪F e∈E∗(G∗[X])∪F
0 ≤ y ≤ 1 e ∈E∗(G∗) (17)
e
It will now be cleaner to impose a change of variables. Specifically, let
y if e∈ E∗(R,B)
e
x =
e
(1−y
e
if e∈ E∗(G∗[B])
12The LP relaxation then simplifies to
(LP−1c) max x − x −|E∗(G[B])| (18)
e e
e∈E∗(G[B]) e∈E∗(R,B)
X X
s.t. x = b′(v) v ∈ R (19)
e
e:e∈δ(v)
X
x ≤ b′(v) v ∈ B (20)
e
e:e∈δ(v)
X
1 ∀X ⊆ B ∪R
x + x ≤ b′(v)+|F| (21)
e e
2 ∀F ⊆ δ E∗(X)
e:e∈E X∗(G∗[X]) e X:e∈F j (cid:16)v: Xv∈X (cid:17)k
0 ≤ x ≤ 1 e∈ E∗(G∗) (22)
e
One method to prove that a polytope has integer nodes involves the concept of total dual
integrality (TDI).
Definition. A polytope Ax ≤ b is Total Dual Integral (TDI) if A,b have rational entries, and
if for any c ∈ Zn such that max cx s.t Ax ≤ b has an optimal solution, then there is an integer
optimal dual solution.
A proof that a linear program is TDI allows us to use the following result to show that it is
integral.
Theorem 6. [7] If a linear system {Ax ≤ b} is TDI, and b is integral, then {Ax ≤ b} is integral.
We will prove that (LP-1c) is total dual integral (TDI) to show its integrality. To do this, we
turn our attention to simple b-matchings.
Theorem 7. [22] The following simple b’-matching polytope is TDI:
(b’−matching LP) x ≤ b′(v) v ∈B ∪R (23)
e
e:e∈δ(v)
X
1 ∀X ⊆ B ∪R
x + x ≤ b′(v)+|F| (24)
e e
2 ∀F ⊆ δ E∗(X)
e:e∈E X∗(G∗[X]) e X:e∈F j (cid:16)v X:v∈X (cid:17)k
0 ≤ x ≤ 1 e ∈ E∗(G∗) (25)
e
This TDI system is very similar to our system. We merely require one more result.
Theorem 8. [5] Let Ax ≤ b be TDI and let A’x ≤ b’ arise from Ax ≤ b by adding −aTx ≤ −β
for some inequality aTx ≤ β in Ax ≤ b. Then also A’x ≤ b’ is TDI.
Corollary 9. The linear system of (LP-1b) is TDI.
Proof. The b’-matching LP is total dual integral by Theorem 7. Therefore, the linear system of
(LP-1c) is total dual integral, as it is the result of applying Theorem 8 to the constraints of the
b’-matching LP. But, via the given change of variables, this implies the linear system of (LP-1b) is
total dual integral.
Corollary 10. The linear program (LP-1b) is integral.
Proof. This follows immediately from Corollary 9 and Theorem 6.
133.4 A Polynomial Time Algorithm
So (LP-1b) is integral. But because it has exponentially many constraints, we need to show it can
be solved in polynomial time. To do so, we apply a separation oracle.
Definition. Separation Problem: Given a convex set P ⊆ Rn and a vector y ∈ Qn, either
determine that y ∈ P or find a vector d ∈ Qn such that dTx < dTy for all x ∈ P.
Theorem 11. [13] Let n ∈ N and c ∈ Qn. Let P ⊆ Rn be a rational polytope, and let x ∈ Qn
0
be a point in the interior of P. Let T ∈ N such that size(x ) ≤ logT and size(x) ≤ logT for all
0
nodes x of P. Given n,c,x ,T and a polynomial-time oracle for the Separation Problem for
0
P, a node x∗ of P attaining max{cTx : x ∈ P} can be found in time polynomial in n, logT and
size(c).
Theorem 12. [20, 17] For undirected graphs G,u : E(G) → N ∪ {∞} and b : V(G) → N, the
Separation Problem for the b-matching polytope of (G,u) can be solved in O(n4) time.
Theorem 13. The Separation Problem for (LP-1b) can be solved in O(n4) time.
Proof. By Theorem 11 it suffices to have a polynomial-time algorithm for the Separation Prob-
lem for the vector y and the feasible set in (LP-1b), which we will refer to as P. Such an algorithm
exists for the convex set in (b’-matching LP), which we will refer to as Q, by Theorem 12. If we
define vector x∈
RE∗
by setting
y if e∈ E∗(R,B)
e
x =
e
(1−y
e
if e∈ E∗(G∗[B])
and then change variables from y to x, we can transform P into a subset of Q. This means if
x 6∈ Q, then y 6∈ P, and we can determine this in O(n4) time. We can also determine if x ∈ Q in
O(n4) time, and if this is the case, we just need to check |R| equality constraints to determine if
y ∈ P, which we can do in linear time.
Corollary 14. The 1 -Illusion Addition Problem can be solved in polynomial time.
2
Proof. LP-1c will solve the 1-Illusion Addition problem just as it solves MIAE. When a strict
2
majority of the vertices are blue, the two problems are equivalent. The removal of the strict
majority requirement, which is the only diffence between MIAE and 1-IA, changes nothing except
2
that it allows input graphs where LP - 1c has no solution, for example in cases where there is a
blue vertex adjacent to more red vertices than there are blue vertices. In these cases, there is no
solution of size less than or equal to k, meaning 1-IA is a NO instance.
2
4 Majority Illusion Removal Elimination (MIRE)
The Majority Illusion Removal Elimination (MIRE) Problem is the Majority Illusion Elimination
(MIE) Problem restricted to removing edges
Given G = (B ∪R,E) we define an auxiliary graph G∗ = (B ∪R,E∗), called the removable
graph. Its edges are the edges in G excluding those between two blue nodes. That is, E∗ =
E(R,B)∪E(G[R]). Now let
max(r(v)−b(v),0) if v ∈ B
b∗(v) =
(b(v)−r(v) if v ∈ R
14Now consider the following integer program.
(IP−2) max −y (26)
e
e∈E∗(G∗)
X
s.t. y = b∗(v) v ∈ B(G∗) (27)
uv
u:u∈N XE∗(v)∩R
−y + y ≤ b∗(v) v ∈ R(G∗) (28)
uv uv
u:u∈N XE∗(v)∩R u:u∈N XE∗(v)∩B
y ∈ {0,1} e ∈E∗(G∗) (29)
e
Theorem 15. The integer program (IP-2) is the MIRE problem
Proof. The proof is the same as for the MIAE case, as (IP-2) is symmetric to (IP-1) with the roles
of B and R swapped.
As one might expect, our strategy for solving the MIRE problem will mirror the approach for
the MIAE problem. We will modify (IP-2) to create a linear program (LP-2) which is symmetric
to (LP-1b).
Just like for (LP-1b), we add a value to both sides of each inequality. In this case, it is
|N E∗(v)∩R|. Once again we define function b′(v) to account for this change:
max(r(v)−b(v),0) if v ∈ B
b′(v) =
(|N E∗(v)∩R|+b(v)−r(v) if v ∈ R
Finally, we add an analogous set of new constraints to the integer program.
1 ∀X ⊆ B∪R
(1−y )+ y ≤ b′(v)+|F| (30)
e e
e:e∈E X∗(G∗[R]) e:e∈E X∗(R,B)
j2
(cid:16)v: Xv∈X (cid:17)k
∀F ⊆ δ E∗(X)
e∈E∗(G∗[X])∪F e∈E∗(G∗[X])∪F
The LP relaxation of (IP-2) is
(LP−2) max −y (31)
e
e∈E∗(G∗)
X
s.t. y = b′(v) v ∈ B(G∗) (32)
uv
u:u∈N XE∗(v)∩R
(1−y )+ y ≤ b′(v) v ∈ R(G∗) (33)
uv uv
u:u∈N XE∗(v)∩R u:u∈N XE∗(v)∩B
1 ∀X ⊆ B ∪R
(1−y )+ y ≤ b′(v)+|F| (34)
e e
e:e∈E X∗(G∗[R]) e:e∈E X∗(R,B)
j2
(cid:16)v X:v∈X (cid:17)k
∀F ⊆ δ E∗(X)
e∈E∗(G∗[X])∪F e∈E∗(G∗[X])∪F
0 ≤ y ≤ 1 e ∈E∗(G∗) (35)
e
Corollary 16. The linear program (LP-2) is integral.
Proof. The proof is identical to the proof of Corollary 10.
Corollary 17. The Separation Problem for linear program (LP-2) can be solved in O(n4) time.
15Proof. The proof is identical to the proof of Theorem 13.
Corollary 18. The 1 -Illusion Removal Problem can be solved in polynomial time.
2
Proof. LP-2 will solve the 1-Illusion Removal problem just as it solves MIRE. When a strict ma-
2
jority of the vertices are blue, the two problems are equivalent. The removal of the strict majority
requirement, which is the only difference between MIRE and 1-IR, changes nothing.
2
5 Majority Illusion Elimination (MIE)
Finally, wearriveatthethegeneralproblem. TakeG = (B∪R,E)andletN (v) = {u : (u,v) ∈ E}
E
betheneighbourhoodofv. Tosolvethegeneralproblem,wewillcreatenewgraphsGa = (R∪B,Ea)
and Gs = (R∪B,Es). Specifically:
• Create Ga from G by removing all edges of G[R].
• Create Gr from G by adding all edges of the complement of G[B].
The remarkable fact now is that an optimal solution to the general problem on G = (V,E) can
be reduced to an optimal solution to the MIAE problem on Ga plus an optimal solution to the
MIRE problem on Gs.
Theorem 19. There is an optimal solution E∗ to the MIE problem on G composed of the union
of the optimal solution Ea to the MIAE problem on Ga and the optimal solution Er to the MIRE
problem on Gr
Proof. By Observation 2 and Lemma 3, the edges removed from G to create Ga are a superset of
those removed in an optimal solution E∗ to MIE on G. These removals are strictly beneficial, as
all edges removed are between two red nodes. Therefore any optimal solution Ea to MIAE on Ga
will be a subset of the edges added in some optimal solution E∗ to MIE on G.
By Observation 1 and Lemma 3, the edges added to G to create Gr are a superset of those
added in an optimal solution E∗ to MIE on G. These additions are strictly beneficial, as all edges
added are between two blue nodes. Therefore any optimal solution Er to MIRE of Gr will be a
subset of the edges removed in some optimal solution E∗ to MIE on G′.
Because |Er|+|Ea| ≤ |E∗|, all that remains is to show that Er together with Ea eliminates
illusion in G. Observe that in Gr the blue nodes from a clique. Consequently, no blue node is
under illusion, and only red nodes can be under illusion. Therefore the only edges removed in an
optimal solution Er to the MIRE problem will be between two red nodes. That is, removing an
edge between a red and blue node cannot help the red node and is not necessary for the blue node,
as it is not under illusion.
Similarly, in Ga the red nodes from an independent set. Consequently, no red node is under
illusion, and only blue nodes can be under illusion. Therefore the only edges added in an optimal
solution Ea to theMIAE problemwill bebetween two bluenodes. Thatis, addingan edgebetween
a red and blue node cannot help the blue node and is not necessary for the red node, as it is not
under illusion.
Furthermore, all the red nodes in Gr are under exactly the same illusion as the red nodes in
G; therefore Er eliminates all illusion on R. Symmetrically, all the blue nodes in Ga are under
exactly the same illusion as the blue nodes in G; therefore Ea eliminates all illusion on B. Thus,
crucially, Er and Ea do not affect each other, because they do not add or remove any edges in
(R,B). Therefore together they eliminate all illusion in G. The theorem follows.
16Theorem 19 implies we can solve the MIE problem in polynomial time. We reduce it to a
MIAE probelm and a MIRE problem, which we can both solve in polynomial time by the methods
developed in Sections 3 and 4.
However, we can exploit Theorem 19 to solve the FIA directly using a single linear program.
This is because the reduction worked by essentially reducing the problem to to two independent
b-matchingproblemswithinthesamegraph! Inparticular,takeG = (B∪R,E)anddefinefunctions
ba(v) = |N E∗(v)∩B|+b(v)−r(v) ∀v ∈ B
br(v) = |N E∗(v)∩R|+b(v)−r(v) ∀v ∈ R
Our linear program is then
(LP−3) max −y (36)
e
e∈E∗(G∗)
X
s.t. (1−y ) ≤ ba(v) v ∈ B(G∗) (37)
uv
u:u∈N XE∗(v)∩B
1 ∀X ⊆ B
(1−y ) ≤ ba(v)+|F| (38)
e
e:e∈E X∗(G∗[B])
j2
(cid:16)v X:v∈X (cid:17)k
∀F ⊆ δ E∗(X)
e∈E∗(G∗[X])∪F
(1−y ) ≤ br(v) v ∈ R(G∗) (39)
uv
u:u∈N XE∗(v)∩R
1 ∀X ⊆ R
(1−y ) ≤ br(v)+|F| (40)
e
e:e∈E X∗(G∗[R])
j2
(cid:16)v X:v∈X (cid:17)k
∀F ⊆ δ E∗(X)
e∈E∗(G∗[X])∪F
0 ≤ y ≤ 1 e ∈ E∗(G∗) (41)
e
Corollary 20. The linear program (LP-3) is integral.
Proof. Thislinear program is equivalent to two independentcopies of the b′-matching LP,therefore
its integrality follows directly from Theorem 7 and Theorem 8.
Corollary 21. The SeparationProblem for linear program (LP-3) can be solved in O(n4) time.
Proof. This follows directly from Theorem 12.
Corollary 22. The 1-Illusion Problem can be solved in polynomial time.
2
Proof. From the proof of Lemma 3, we know it is always preferable to correct a blue node in
deficit by adding a blue neighbour than removing a red neighbour. However, without the strict
majority restriction, this is not always possible. The fix is rather simple. For the set of blue
nodes B′ = {v : v ∈ B,N (v) ≥ |B|}, we add edges between every node of B′ to all nodes of
R
B, including B′, as we know there is a solution that contains all these edges. Now the remaining
edges of the solution to 1-Illusion consist of optimally removing edges of G[R∪B′] and optimally
2
adding non-edges of G[B \B′], both of which we can do in polynomial time by Corollary 14 and
Corollary 18.
176 Hardness
In this section we present variants of the MIE, MIAE and MIRE problems.
Definition. Let p ∈ [0,1],p ∈ Q. We define the p-IA problem as follows: Given a graph G= (V =
R∪B,E) and integer k, the objective is to determine if the addition of at most k edges can ensure
each node has at least a p-fraction of blue nodes in its neighbourhood.
Definition. Let p ∈[0,1],p ∈Q. We define the p-IR problem as follows: Given a graph G= (V =
R ∪ B,E) and integer k, the objective is to determine if the subtraction of at most k edges can
ensure each node has at least a p-fraction of blue nodes in its neighbourhood.
Definition. Let p ∈ [0,1],p ∈ Q. We define the p-I problem as follows: Given a graph G = (V =
R∪B,E) and integer k, the objective is to determine if the addition/subtraction of at most k edges
can ensure each node has at least a p-fraction of blue nodes in its neighbourhood.
For p = 1, if we add the requirement that blue be the strict majority, these extended problems
2
correspondtotheoriginalMIAE,MIREandMIEproblemsforwhichwehaveprovidedpolynomial-
time algorithms in the previous sections of this paper. Our algorithms can be extended to handle
the case when blue is not the true majority, showing that the problems are solvable in polynomial
time when p = 1. Regardless, to show NP-hardness for other values of p, we provide a polynomial
2
time reduction from the following NP-complete, satisfiability problem.
Definition. XSAT for l-CNFl is the problem of determining whether a boolean formula in con-
+
junctive normal form composed of n variables appearing exactly l times as positive literals within
clauses of size exactly l has an assignment which evaluates to TRUE such that each clause has
exactly one variable assigned TRUE.
Theorem 23. [21][Theorem 29] XSAT for l-CNFl is NP-complete for any l ≥ 3
+
Theorem 24. The p-IA problem and p-I problem are NP-hard for p ∈ Q,0 < p < 1,p 6= 1.
2 3
Proof. First, we write p as an irreductible fraction p = a where a,b ∈ N are coprime and p < 1.
b 2
This implies 2a < b. Therefore, we can write p = a = a for l ≥ 3, l > a, and gcd(a,l) = 1. Note
b a+l
that 1 cannot be written this way because of the condition l ≥ 3.
3
Consider an instance of XSAT for l-CNFl with n variables and n clauses, where n ≥ 2l. We
+
build an auxiliary graph G = (B ∪R,E) of polynomial size such that there is a solution to this
XSAT instanceforl-CNFl ifandonly if thep-Iproblemassociated withGcan besolved byadding
+
or removing at most n·(l+a) edges. Moreover if there is a solution to this XSAT instance, there is
l
a solution to the p-I problem that add exactly n·(l+a) edges and remove no edges. Consequently,
l
this also works as a reduction to the p-IA problem. Note that n must be an integer, as otherwise
l
the XSAT problem trivially has no solution.
We design the graph G to have nodes of six types: dummy blue nodes B , where |B | =
D D
a·n2+l−(2a·n+2); equalizing blue nodes B , where |B |= 2a·n−(n−1); dummy red nodes
E E
R , where |R | = l·n2−2l·n+(n−l); equalizing red nodes R , where |R | = 2l·n−(n−l);
D D E E
blue variable nodes B , where |B | = n (we have a blue variable node v for each variable x of the
V V x
XSAT instance); and red clause nodes R , where |R |= n (we have a red clause node w for each
C C c
clause c of the XSAT instance).
We now describe the graph G by detailing the neighborhood of each node. We remind the
reader of the notation b(v) and r(v), which denote the number of blue and red neighbors of node
v, respectively.
18• Variable nodes: The neighbourhood of v for all v ∈ B is B ∪R ∪{w : w ∈ R ,x 6∈
x x V E E c c C
c in the XSAT problem}∪(B −v ). Notethatb(v )= a·r(v )forallv ∈B ,andtherefore
V x x l x x V
exactly a p-fraction of the neighbourhood of each node of B is blue.
V
• Clause nodes: The neighbourhood of w for all w ∈ R is B ∪R ∪B ∪R ∪{v :v ∈
c c C E E D D x x
B ,x 6∈ C in the XSAT problem}. Note that b(w ) = a ·r(w )−1 for all w ∈ R , so each
V c l c c C
w ∈ R can add one more blue neighbour without violating the p-fraction constraint.
c c
• Dummy blue nodes: The neighbourhood of v for all v ∈ B is B ∪R ∪B −v. There are
D E C D
an2 +l−n+2 blue nodes and n red nodes in the neighbourhood of each v ∈ B , so there
D
are at least p-fraction of blue nodes in the neighbourhood.
• Dummy red nodes: Theneighbourhoodofv forallv ∈ R isB ∪R . Thereare2an−(n−1)
D E C
blue nodes and n red nodes in the neighbourhood of each v ∈ R , so there are at least p-
D
fraction of blue nodes in the neighbourhood.
• Equalizing blue nodes: The neighbourhood of v for all v ∈ B is R ∪R ∪B ∪B ∪
E C D V D
B −v. Therearean2+l−2bluenodesandl·n2+2n−2l·n−lrednodesintheneighbourhood
E
of each v ∈ B , so there are at least p-fraction of blue nodes in the neighbourhood.
E
• Equalizing red nodes: The neighbourhood of v for all v ∈ R is R ∪B . There are at
E C V
least p-fraction of blue nodes in the neighbourhood.
B R
D D
R
C
w w w w w w
c1 c2 c3 c4 c5 c6
B R
E v v v v v v E
x1 x2 x3 x4 x5 x6
B
V
Figure 6: An example of a network G which reduces the 3−XSAT3 problem (x ∨x ∨x )∧(x ∨
+ 1 2 3 1
x ∨x )∧(x ∨x ∨x )∧(x ∨x ∨x )∧(x ∨x ∨x )∧(x ∨x ∨x ) to 1-MIE and 1-MIAE
2 4 1 3 4 2 5 6 3 5 6 4 5 6 4 4
Now that we’ve constructed G, consider thep-I problemonG. Assumethereisasolution to the
instance of XSAT for l-CNFl . There is therefore a set of n variables set to TRUE in the solution,
+ l
19each belonging to l clauses. For each of the true variables x, add an edge between b and r for
x C
each clause C containing x. Theresult of this addition of n edges is that all red nodes are nolonger
under illusion in G. However, there are now n blue nodes corresponding to the TRUE variables
l
which each have l new red neighbours. They each require a new blue neighbours to maintain the
blue to red neighborhood ratio a. We therefore add a edges to each of them, connecting them to
l
some of the nodes of B , for a total of na new edges. This fully eliminates illusion using a total of
D l
n(a+l) edges.
l
Conversely, assume there is a solution to the p-I problem on G which uses n(a + l) edges.
l
Let x ,y denote the number of red neighbours removed in the solution from x ∈ R , y ∈ B
r r C V
respectively. Let x ,y denote the number of blue neighbours added in the solution from x ∈ R ,
b b C
y ∈ B respectively. We know that each x ∈ R begins under illusion, which the solution can
V C
eliminate by adding a blue neighbour or removing ⌈l⌉ red neighbours. Thus
a
a
x + ·x = 1
b r
l
j k
for each x ∈ R . As there are n clauses, and the clause nodes form an independent set, we have
C
a
n = x + ·x (42)
b r
l
x X∈RC(cid:16) j k(cid:17)
Next, if a clause node adds a blue neighbour, it must be a variable node, as each clause node is
adjacent to all other blue nodes. The variable nodes have b(b ) = ar(b ) for all b ∈ B , therefore
x l x x V
adding new red neighbours increases illusion, which can be removed by removing a different red
neighbour, or adding more blue neighbours. This gives us the following equation:
l
x = y + ·y (43)
b r b
a
x X∈RC y X∈BV (cid:18) (cid:22) (cid:23)(cid:19)
Summing Equations 42 and 43 gives us
a l
n = ·x + y + ·y (44)
r r b
l a
x X∈RCj k y X∈BV (cid:18) (cid:22) (cid:23)(cid:19)
By initial assumption, there exists a solution which uses n(a+l) edges. This means
l
n
(x +x )+ (y +y )≤ (a+l) (45)
r b r b
l
x X∈RC y X∈BV
If we subtract Equations 42 and a·44 from Inequality 45, this gives us
l
l+a a l−a a l
x − · ·x )+ ·y +y − · ·y ≤ 0 (46)
r r r b b
l l l l a
x X∈RC(cid:18) j k(cid:19) y X∈BV (cid:18) (cid:22) (cid:23)(cid:19)
Recall that
a
x + ·x = 1
b r
l
j k
for all x ∈ R , meaning x ∈ {0,⌈l⌉}. This means the terms x − l+a ·⌊a ·x ⌋ ),
C r a x∈RC r l l r
l−a · y and y − a ·⌊l ·y ⌋ are all non-negative. They must all be equal to 0
y∈BV l r y∈BV b l a b P (cid:0) (cid:1)
to satisfy Inequality 45. This requires x = 0 for all x ∈ R , y = 0 for all y ∈ B , and finally
r C r V
P P (cid:0) (cid:1)
y = a ·⌊l ·y ⌋ for all y ∈ B . Note that this final equation implies each y is a multiple of a
b l a b V b
because gcd(a,l) = 1. This simplifies Equations 42 and 44 to:
20n= x (47)
b
x X∈RC
n y
b
= (48)
l a
y X∈BV
n(l+a)
Together these form all edges of the solution. This and the fact that each y is a multiple
l b
of a implies there are n variable nodes which the solution connects to l clauses each, so that each
l
clause connects to exactly one of its variables. These correspond to the variables which satisfy the
original X-SAT instance, as desired.
Theorem 25. The p-IR problem and p-I problem is NP-hard for p ∈ Q,1 < p < 1,p 6= 2.
2 3
Proof. First, p = l > 1 for l,b ∈ N =⇒ 2l > b, therefore we can write p = l = l for
b 2 b a+l
l ≥ 3,l > a,gcd(l,a) = 1.
Consideraninstanceof XSATforl-CNFl withnvariables andnclauses. Webuildanauxiliary
+
graph G= (B ∪R,E) such that there is a solution to this XSAT for l-CNFl if and only if the p-I
+
problem can be solved by removing n ·(l+a) edges and adding no edges. Consequently, this also
l
works as a reduction to p-IR. We design the graph G to have nodes of seven types: blue variable
nodesB ,where|B | = n,andredclausenodesR ,where|R | = n,aswellasDummybluenodes
V V C C
BC for each clause C, where |BC| = ln−(n−1), Equalizing blue nodes B , where |B | = l−1,
D D E E
Dummy red nodes RC for each clause C, where |RC| = an−(l − 1), Equalizing red nodes R ,
D D E
where |R |= a, and extra blue nodes B′, where |B′|= n4. G will have the following properties:
E
• Variable nodes: The neighbourhood of r for all r ∈ R is R ∪ {b : b ∈ B ,x ∈
x x V E c c C
C in the XSAT problem}. Note that r(r ) = ab(r ) for all r ∈ R .
x l x x V
• Clause nodes: The neighbourhood of b for all b ∈ B is Bc ∪Rc ∪{r : r ∈ R ,x ∈
c c C D D x x V
C in the XSAT problem}∪B −b . Note that r(b )= a ·b(b )+1 for all b ∈ B .
C c c l c c C
• Dummy blue nodes: The neighbourhood of b for all b ∈ Bc is B′ ∪{b }. Note no node of
d d D c
B is under illusion.
D
• Dummy red nodes: The neighbourhood of r for all r ∈ Rc is B ∪ R ∪ {b }. Note
d d D E E c
r(r )= ab(r ) for all r ∈ R .
d l d d D
• Equalizing blue nodes: The neighbourhood of b for all b ∈ B is R ∪B′. Note no node
e e E D
of B is under illusion.
E
• Equalizing red nodes: Theneighbourhoodofr forallr ∈ R isB′∪R ∪ Rc .
e e E V cisaclause D
Note no node of R is under illusion.
E
S
• Extra blue nodes: The neighbourhood of b′ for all b′ ∈ B′ is B′∪R ∪B . Note no node
E E
of B′ is under illusion.
WithGconstructed,thereadercanseethatitsconstructionisanalogous tothatinTheorem24,
and a nearly identical argument can be applied to complete the proof.
Theorem 26. The p-IA problem is NP-hard for p ∈ Q,1 < p < 1,p 6= 2.
2 3
21Proof. First, p = l > 1 for l,b ∈ N =⇒ 2l > b, therefore we can write p = l = l for
b 2 b a+l
l ≥ 3,l > a,gcd(l,a) = 1.
Consider an instance of XSAT for l-CNFl with n variables and n clauses, where n ≥ 2l. We
+
build an auxiliary graph G = (B ∪R,E) such that there is a solution to this XSAT for l-CNFl
+
if and only if the p-IA problem can be solved by adding n ·(l+a) edges. We design the graph G
l
to have nodes of eight types: Dummy blue nodes B , where |B | = ln2 −(l −1)n, Dummy red
D D
nodes R , where |R | = an2−a(n−2)+ n, Equalizing red nodes R , where |R | =a, Equalizing
D D l E E
blue nodes B , where |B | = l −1, blue variable nodes B , where |B | = n, blue clause nodes
E E V V
B , where |B | = n, extra red nodes R′, where |R′| = a(n−2), and extra blue nodes B′, where
C C
|B′| = (l−2)n−(l−1). G will have the following properties:
• Variable nodes: The neighbourhood of b for all b ∈ B is B′ ∪R′ ∪{b : b ∈ B ,x 6∈
x x V c c C
C in the XSAT problem}∪(B −b ). Note that b(b ) = l(n−2) = la(n−2) = lr(b ) for
V x x a a x
all b ∈ B .
x V
• Clause nodes: Theneighbourhoodofb forallb ∈R isB′∪R′∪R ∪B ∪{b : b ∈ B ,x 6∈
c c C E E x x V
C in the XSAT problem}∪B −b . Notethatb(b )= l(n−1)−1= la(n−1)−1= lr(b )−1
C c c a a c
for all b ∈ B .
c C
• Dummy blue nodes: The neighbourhood of b for all b ∈ B is R ∪B ∪R′∪B′∪B −b .
d d D E E D d
Note that no node of B is under illusion.
D
• Dummy red nodes: The neighbourhood of r for all r ∈ R is R ∪B′. Note no node of R
d d D E D
is under illusion.
• Equalizing blue nodes: The neighbourhood of b for all b ∈ B is B ∪B ∪B′. Note
e e E D C
no node of B is under illusion.
E
• Equalizing red nodes: The neighbourhood of r for all r ∈ R is R′ ∪B′ ∪R ∪B ∪
e e E D D
B ∪B . Note each node r requires n new blue neighbours to correct its illusion.
C E e l
• Extra blue nodes: The neighbourhood of b′ for all b′ ∈ B′ is B ∪R ∪R ∪B ∪B ∪
V D E D C
B ∪B′−b′. Note no node of B′ is under illusion.
E
• Extra red nodes: The neighbourhood of r′ for all r′ ∈R′ is B ∪R ∪B ∪B ∪B . Note
V E D C E
no node of R′ is under illusion.
With G constructed, the reader can see that any solution to p-IA on G must add an edges to
l
n(l+a)
correct the deficit of the red nodes. Given this, the proof that a solution using a total of
l
edges exists if and only if there is a solution to the X-SAT problem follows directly from the proof
of Theorem 24.
Theorem 27. The p-IR problem is NP-hard for p ∈Q,0 < p < 1,p 6= 1.
2 3
Proof. First, p = a < 1 for a,b ∈ N =⇒ 2a < b, therefore we can write p = a = a for
b 2 b a+l
l ≥ 3,l > a,gcd(l,a) = 1.
Consideraninstanceof XSATforl-CNFl withnvariables andnclauses. Webuildanauxiliary
+
graph G = (B∪R,E) such that there is a solution to this XSAT for l-CNFl if and only if the p-IR
+
problem can be solved by removing n ·(l+a) edges. We design the graph G to have nodes of eight
l
types: Dummy blue nodes B , where |B | = a Dummy red nodes R , where |R |= 1, Equalizing
D D D D
red nodes R , where |R |= l, Equalizing blue nodes B , where |B |= a, red variable nodes R ,
E E E E V
where |R | = n, red clause nodes R , where |R | = n, extra red nodes R′, where |R′| = n, and
V C C l
extra blue nodes B′, where |B′|= n. G will have the following properties:
22• Variable nodes: The neighbourhood of r for all r ∈ R is B ∪ {r : r ∈ R ,x ∈
x x V E c c C
C in the XSAT problem}. Note that b(r ) = a = aa = ar(r ) for all r ∈ R .
x l l x x V
• Clause nodes: The neighbourhood of r for all r ∈ R is B ∪ {r : r ∈ R ,x ∈
c c C D x x V
C in the XSAT problem}. Note that r(r )= l+1 = la+1= lb(r ) for all r ∈ R .
c a a c c C
• Dummy blue nodes: The neighbourhood of b for all b ∈ B is R ∪B′. Note that no node
d d D C
of B is under illusion.
D
• Dummy red nodes: The neighbourhood of r for all r ∈R is R ∪B′. Note no node of R
d d D C D
is under illusion.
• Equalizing blue nodes: The neighbourhood of b for all b ∈ B is R′ ∪R ∪B′. Note
e e E V
each node b requires n fewer red neighbours to correct its illusion.
e l
• Equalizing red nodes: The neighbourhood of r for all r ∈ R is R′∪B′. Note no node
e e E
of R is under illusion.
E
• Extra blue nodes: The neighbourhood of b′ for all b′ ∈B′ is R ∪B ∪R ∪B ∪B′−b′.
E D D E
Note no node of B′ is under illusion.
• Extra red nodes: The neighbourhood of r′ for all r′ ∈ R′ is B ∪R . Note b(r′) = a =
E E
al = ar(r′).
l l
With G constructed, the reader can see that any solution to p-IR on G must add an edges to
l
n(l+a)
correct the deficit of the red nodes. Given this, the proof that a solution using a total of
l
edges exists if and only if there is a solution to the X-SAT problem follows directly from the proof
of Theorem 24.
7 Conclusion
We’ve settled the q-Illusion Elimination problems studied in [12] for the special q = 0 case.
While the previous paper showed hardness for q = (0,1) and a trivial solution for q = 1, we
present here the surprising result that fully determining and eliminating illusion can be solved in
polynomial time. The three problems, MIAE, MIRE, and MIE, have simple linear programs with
integer solutions.
We also define a natural extension to all three problems. For any p ∈ [0,1], the p-IA, p-IR, and
p-I problems ask if it is possible to alter a network to ensure the neighbourhood of every node has
a p-fraction of blue nodes by adding edges, removing edges, or both respectively. These problems
reduce to MIAE, MIRE and MIE when p = 1, and just as in those problems, we ask that the total
2
numberof blue nodes besuch that the problems are solvable regardless of the initial network given.
We show that these problems are hard for p ∈(0, 1)∪(1,1)∪(1, 2)∪(2,1).
3 3 2 2 3 3
In terms of future work, our p-IA, p-IR, and p-I problems have two p-values for which there is
no polynomial time algorithm nor a hardness result: p = 1 and p = 2. Interestingly, if we add edge
3 3
weights to the linear programs used to solve MIAE, MIRE and MIE, we can create linear programs
to solve the p-IA, p-IR, and p-I problems. All values of p except for p = 0,1,1 result in a program
2
that is no longer totally dual integral. However, p = 1,2 are the only other values for which the
3 3
program is half integral. Therefore, it is entirely possible that for p = 1, 2, these problems are
3 3
solvable in polynomial time, which would be an interesting result.
23References
[1] J. Bara, O. Lev, and P. Turrini. Predicting voting outcomes in presence of communities.
In Proceedings of the 20th International Conference on Autonomous Agents and Multiagent
Systems (AAMAS 2021), pages 151–159, 2021.
[2] R. Becker, G. D’Angelo, and S. Ghobadi. Improving fairness in information exposure by
adding links. In Proceedings of the AAAI Conference on Artificial Intelligence, volume 37,
pages 14119–14126, 2023.
[3] F. Benevenuto, A. Laender, and B. Alves. The h-index paradox: your coauthors have a higher
h-index than you do. Scientometrics, 106:469–474, 2006.
[4] M.Castiglioni, D. Ferraioli, andN.Gatti. Election control insocial networks viaedge addition
or removal. InProceedings of the AAAI Conference on Artificial Intelligence, volume 34, pages
1878–1885, 2020.
[5] W. Cook. Operations that preserve total dual integrality. Operations Research Letters, 2(1):
31–35, 1983.
[6] J.Doucette, A.Tsang,H.Hosseini,K.Larson,andR.Cohen. Inferringtruevotingoutcomesin
homophilic social networks. Autonomous Agents and Multi-Agent Systems, 33:298–329, 2019.
[7] J.EdmondsandR.Giles. Amin-max relation for submodularfunctionson graphs. InP.Ham-
mer, E. Johnson, B. Korte, and G. Nemhauser, editors, Studies in Integer Programming, vol-
ume 1 of Annals of Discrete Mathematics, pages 185–204. Elsevier, 1977.
[8] Y. Eom and H. Jo. Generalized friendship paradox in complex networks: The case of scientific
collaboration. Scientoific Reports, 4:4603, 2014.
[9] P. Faliszewski, R. Gonen, M. Koutecky´, and N. Talmon. Opinion diffusion and campaigning
on society graphs*. Journal of Logic and Computation, 32(6):1162–1194, 2022.
[10] S. Feld. Why your friends have more friends than you do. Am. J. Sociol, 96:1464–1477, 1991.
[11] Foivos Fioravantes, AbhirukLahiri,AntonioLauerbach,MarieDianaSieper,andSamuelWolf.
Eliminating majority illusion. hal-04574647, 2024.
[12] U. Grandi, L. Kanesh, G. Lisowski, R. Sridharan, and P. Turrini. Identifying and eliminat-
ing majority illusion in social networks. Proceedings of the AAAI Conference on Artificial
Intelligence, 37(4):5062–5069, 2023.
[13] M. Gro¨tschel, L. Lov´asz, and A. Schrijver. Geometric Algorithms and Combinatorial Opti-
mization. Springer-Verlag, 1988.
[14] N. Johnson, N. Vel´asquez, N. Restrepo, R. Leahy, N. Gabriel, S. El Oud, M. Zheng, P. Man-
rique, S. Wuchty, and Y. Lupu. The online competition between pro- and anti-vaccination
views. Nature, 582(7811):230–233, 2020.
[15] D. Kempe, S. Yu, and Y. Vorobeychik. Inducing equilibria in networked public goods games
through network structure modification. In Proceedings of the 19th International Conference
on Autonomous Agents and MultiAgent Systems, pages 611–619, 2020.
24[16] K. Lerman, X. Yan, and X-Z. Wu. The “majority illusion” in social networks. PLOS ONE,
11(2):1–13, 2016.
[17] A. Letchford, G. Reinelt, and D. Theis. Odd minimum cut sets and b-matchings revisited.
SIAM Journal on Discrete Mathematics, 22(4):1480–1487, 2008.
[18] X.Liu,S.Kato,F.Ren,G.Su,M.Zhang,andW.Gu.Informationgerrymanderinginelections.
In S. Wu, W. Yang, M. Amin, B-H. Kang, and G. Xu, editors, Knowledge Management and
Acquisition for Intelligent Systems, pages 83–97. Springer Singapore, 2023.
[19] M.McPherson,L.Smith-Lovin,andJ.Cook. Birdsofafeather: Homophilyinsocialnetworks.
Annual Review of Sociology, 27(1):415–444, 2001.
[20] M. Padberg and M. Rao. Odd minimum cut-sets and b-matchings. Mathematics of Operations
Research, 7(1):67–80, 1982.
[21] Tatjana Schmidt. Computational complexity of SAT, XSAT and NAE-sat for linear and mixed
horn CNF formulas. Su¨dwestdeutscher Verlag fu¨r Hochschulschriften, 2011.
[22] A. Schrijver. Combinatorial Optimization: Polyhedra and Efficiency, volume B. Springer-
Verlag, 2003.
[23] A. Stewart, M. Mosleh, M. Diakonova, A. Arechar, D. Rand, and J. Plotkin. Information
gerrymandering and undemocratic decisions. Nature, 573(7772):117–121, 2019.
[24] B.WilderandY.Vorobeychik. Controllingelections throughsocialinfluence. InProceedings of
the 17th International Conference on Autonomous Agents and MultiAgent Systems (AAMAS),
page 265–273. International Foundation for Autonomous Agents and Multiagent Systems,
2018.
[25] S. Yu, D. Kempe, and Y. Vorobeychik. Altruism design in networked public goods games.
arXiv:2105.00505, 2021.
[26] X.ZhouandZ.Zhang. Maximizinginfluenceofleadersinsocialnetworks. InProceedings of the
27th ACM SIGKDD Conference on Knowledge Discovery & Data Mining, pages 2400–2408,
2021.
25