Cutsets and EF1 Fair Division of Graphs
Jiehua Chen1 and William S. Zwicker2
1TU Vienna, Austria, jiehua.chen@ac.tuwien.ac.at
2
Murat Sertel Center for Advanced Economic Studies, Bilgi University, Turkey, and Union College,
Schenectady, New York, USA, zwickerw@union.edu
Abstract
In fair division of a connected graph G = (V,E), each of n agents receives a share of
G’s vertex set V. These shares partition V, with each share required to induce a connected
subgraph. Agentsusetheirownvaluationfunctionstodeterminethenon-negativenumerical
values of the shares, which determine whether the allocation is fair in some specified sense.
Weintroduceforbiddensubstructurescalledgraphcutsets,whichblockdivisionsthatarefair
intheEF1(envy-freeuptooneitem)sensebycuttingthegraphinto“toomanypieces”. Two
parameters – gap and valence – determine blocked values of n. If G guarantees connected
EF1 allocations for n agents with valuations that are CA (common and additive), then G
contains no elementary cutset of gap k ≥ 2 and valence in the interval [n−k+1,n−1].
If G guarantees connected EF1 allocations for n agents with valuations in the broader CM
(common and monotone) class, then G contains no cutset of gap k ≥ 2 and valence in the
interval [n−k+1,n−1]. These results rule out the existence of connected EF1 allocations
in a variety of situations. For some graphs G we can, with help from some new positive
results, pin down G’s spectrum – the list of exactly which values of n do/ do not guarantee
connectedEF1allocations. Examplessuggestaconjecturedcommonspectralpatternforall
graphs. Further, we show that it is NP-hardto determine whether a graphadmits a cutset.
We alsoprovideanexample of a(non-traceable)graphoneightverticesthat hasno cutsets
of gap ≥2 at all, yet fails to guarantee connected EF1 allocations for three agents with CA
preferences.
1 Introduction
In the original, continuous setting for fair division [5, 18, 17], a single divisible good or “cake,”
often modeled by the closed interval [0,1], is divided into n pieces, with each agent allocated a
different piece of the resulting partition. One thread of this literature studies allocations that
are both envy-free (each agent values her assigned piece at least as highly as she values any of
the other pieces) and connected (each piece forms a single subinterval of [0,1]).
Forthealternativesettingofindivisibleitems,afinitesetOofindivisiblegoodsispartitioned
intodisjointsubsets,witheachagentallocatedadifferentsubsetfromthepartition. Thiscontext
precludes envy-freeness as a reasonable goal; for example, if O contains but a single item, only
one agent can get it. Budish [6] proposed a relaxation, envy-freeness up to one good (in short
EF1), that circumvents this obstacle. It requires that whenever one agent i envies another
agent j, there exists some item in j’s share whose removal would eliminate that envy. An EF1
allocation always exists and it can be found via a simple envy cycle elimination algorithm in
polynomial time [15].
Fair division of graphs, our context here, provides a natural way to import the connectivity
requirement from the continuous world into the world of indivisible goods. The vertices of a
1
4202
beF
8
]TG.sc[
1v48850.2042:viXrafiniteconnected graphG = (V,E) areviewed asindivisibleitems, andweinsistthattheshareof
vertices allocated toeachagentformaconnected subgraph. Naturalapplications representedby
this model (and mentioned in the paper [14] of Igarashi and Zwicker) include, for example, the
problemof dividingcities connected by aroadnetwork amongseveral parties, as whenan island
is partitioned and each party wishes to drive among its allocated cities without leaving its own
territory. Alternatively, consider offices allocated to several departments of an organization,
where an edge represents a section of corridor joining a pair of offices in the organization’s
building, and each department must receive contiguous offices. It is known that connectivity
and EF1 can be incompatible. Graph I of Figure 1 provides a particularly simple example and
is discussed in Section 2.
There are other cases that do guarantee EF1 allocations. For a traceable graph (one that
admits a Hamiltonian path) and up to four agents, Bil`o et al. [3] provide an algorithm to
construct a connected EF1outer allocation even if the four agents have arbitrary but monotone
valuations. Here, EF1outer means that no agent shall envy another agent after an outer item
is removed from the share of the second agent, and an item is called outer if removing it does
not destroy connectivity. Igarashi [12] recently extended the positive result to arbitrarily many
agents:
Proposition 1 ([3], [12]). For each traceable graph G and positive integer n ≥ 1, and for all
monotone valuations of the n agents, there exists a connected EF1outer allocation.
We restate this result informally, as follows: Under arbitrary monotone valuations, traceable
graphs universally guarantee connected EF1outer allocations. Here universally conveys that the
result holds for arbitrarily many agents.
IsthepositiveresultbehindProposition1balancedbyacorrespondingnegativeone,showing
that every non-traceable graph fails this universal guarantee? This remains the most important
open question in the study of EF1 graph fair division.
Question 1. Do any non-traceable graphs offer the same universal guarantee? Does the answer
change if the valuation functions are CA?
Notethatforcontinuous graphs,however, suchageneralnegative resultdoes exist, asshown
by Igarashi and Zwicker [14]. The continuous analogue of traceable is called stringable, and
stringability characterizes the class of continuous graphs that universally guarantee existence of
connected EF allocations.1
Our contributions. While thediscrete context of connected graphs still lacks a corresponding
negative result of full generality, the graph cutsets we introduce here represent progress to that
end. The cutset itself is a set of subgraphs; when the vertices in those subgraphs are excised,
G falls into a number of disconnected sections. Some agent j will wind up with a share A
j
that lacks enough critical vertices from the deleted subgraphs to form a path connecting any
pair of disconnected sections. This confines A to a single section, so that if one has chosen
j
the valuations appropriately, then A ’s value is too small to be fair, in the EF1 sense. In
j
Theorem1,amaincontribution,wemakethisideaprecise,showingthatgraphcutsetsconstitute
obstructions to connected EF1 allocations.
By Igarashi [12], graph cutsets also obstruct traceability of a graph. Suppose we think of
a graph that has such an obstruction as being “clearly non-traceable.” Then our results here
can be rephrased as follows: Every clearly non-traceable graph fails to universally guarantee
1A continuous graph, aka a tangle, is a topological space wherein each edge of some connected graph is
replaced by a copy of the [0,1] interval of real numbers. Full EF replaces EF1 in this context, and stringable
tangles correspond to traceable graphs. The characterization result for tangles uses a typeof tangle cutset that
is related to, butdistinct from (and with a much simpler definition than) our graph cutsets here.
2connected EF1 allocations. Some non-traceable graphs fail to be “clearly” non-traceable, as
we show in Theorem 2, but it seems possible that further generalizations of the cutset concept
might address this shortfall.
Cutsets generalize one direction of the characterization, in Bil´o et al. [3], of graphs that
guarantee connected EF1 allocations for n = 2 agents as those containing no trident (see
Definition 2), regardless of whether valuations are common and additive (CA) or common
and monotone (CM). Our results suggest that the CA vs. CM distinction may first become
consequential for EF1 graph division when there are more than 2 agents (see Section 2 for the
definitions).
Inadditiontodiscussinguniversalresults(thepartialanswertoQuestion1),wealsodescribe
two special restrictions on graphs that guarantee the existence of EF1outer allocations once the
number n of agents becomes large enough. From algorithmic and complexity points of view,
we show that cutsets are NP-hard to detect. We also analyze the existence of EF1 allocations
for some interesting graphs and conjecture that the guarantee of existence displays a certain
common pattern for all graphs, as the number of agents varies.
Related work. Since its introduction [1, 4], fair division of graphs has been among the most
relevant research topics of fairdivision withconstraints. Recent workin thissetting investigates
different fairness concepts with respect to matters of existence and (parameterized) complex-
ity [3, 14, 12, 13, 2, 21, 11, 16, 7, 8].
The graph cutsets we introduce here are related to cutsets for tangles (“continuous graphs”;
see footnote 1), introduced by Igarashi and Zwicker [14], but with some differences. Envy-
free fair division of tangles tells us a lot about EF1 fair division of saturated graphs (in which
each edge has at least one endpoint of degree one or two), but less about non-saturated ones.
Differencesbetweenthegraphandtangledefinitionsofcutsetseemdriven,inpart,byadditional
subtlety in defining graph cutsets for non-saturated graphs. The graphical cake model in [9]
is similar to the tangle concept, but cannot be used to draw direct conclusions about graphs
because with graphical cake, agents’ shares are allowed to overlap at the vertices. We refer the
reader to the survey paper by Suksompong [20] on fair division with other constraints.
Paper outline. The rest of the paper is organized as follows. In Section 2, we introduce
necessary definitions and concepts for connected EF1 division of graphs. In Section 3, we
define our main concept of “graph cutsets” and provide two main obstruction results: 1. The
existence of a tame graph cutset precludes the graph from guaranteeing EF1 allocations even
when all agents have common and additive (CA) valuations. 2. The existence of a graph cutset
precludes the graph from guaranteeing EF1 allocations even when all agents have common and
monotone (CM) valuations. We also show a counterexample to any converse, in the form of a
graph G containing no cutsets of any kind, yet there exist CA valuations for 3 agents that rule
out the existence of a connected EF1 allocation. In Section 4, we show that finding a graph
cutset is indeed NP-hard. In Section 5, we analyze how different graphs behave in terms of
EF1 allocations for increasing numbers of agents. In particular, we show two positive cases
that guarantee the existence of connected EF1outer allocations. We conclude with some future
research directions.
2 Preliminaries: EF1 Divisions of Graphs
Let N = {1,2,...,n} be a finite set of agents and G = (V,E) be a connected undirected graph.
WecallGtraceable ifitadmitsaHamiltonian path. Wecallavertex subsetV′ ⊆ V connectedor
a (connected) piece if it induces a connected subgraphof G. Each agent i ∈ N has a valuation –
a function v : 2V → R+ assigning non-negative real values to connected pieces, with v (∅) = 0.
i i
3A valuation v is monotone if for all X,Y ∈ C(V) it holds that X ⊆ Y implies v (X) ≤ v (Y).
i i i
Monotone valuations treat vertices as goods; we do not consider bads (or chores) here. The
valuation functions of the agents are called common if v = v holds for all i,j ∈ N, and are
i j
arbitrary if not required to becommon. Valuations are additive if v i(I) = P x∈Iv i({x}) for each
agent i and each piece I ∈ C(V). We will use abbreviations CM for “common and monotone”,
and CA for “common and additive.” Additive valuations form a proper sub-class of monotone
valuations (becauseofthenon-negativity constraintonvaluations), andCAformsapropersub-
class of CM. A (connected) allocation A = {A } of G assigns each agent i ∈ N a connected
i i∈N
piece A i ∈ C(V), with these pieces partitioning V, so that S i∈N A i = V and A i∩A j = ∅ when
i 6= j.
In fair division of a graph G, we ask whether there exists such an allocation that is fair, in
some well-defined sense. Maximin share fairness was the principal fairness criterion studied by
Bouveret et al. [4], which first introduced the topic of graph fair division. Three later works –
[3],[12], and[14]–insteadfocus(asdoesthispaper)onthetwovariantsofenvy-freenessdefined
below. The original definition of envy-freeness requires, of an allocation A that v (A ) ≥ v (A )
i i i j
hold for every pair i,j ∈ N of agents. With indivisible objects, envy-free allocations may not
exist, and so we instead use the following notions.
Definition 1 ([6]). An allocation A = (A1,A2,...,A n) of the vertices in a graph G is envy-free
up to one good, aka EF1, if for each pair i,j of agents, either v (A ) ≥ v (A ), or there is an
i i i j
element x of A such that v (A ) ≥ v (A \ {x}). A is envy-free up to one outer good, aka
j i i i j
EF1outer if for each pair i,j of agents, either v i(A i) ≥ v i(A j), or there is an element x of A
j
such that A \{x} is connected in G and v (A ) ≥ v (A \{x}).
j i i i j
Two previous results concern which untraceable graphs guarantee existence of an EF1outer
allocation for n = 2 or n = 3 agents. The first is a complete characterization for the two-agent
case; the second applies to three agents, but is narrower in scope. The first result requires two
additional notions:
Definition 2 (Bipolar orderings and tridents). Let G = (V,E) denote a connected graph. A
bipolar ordering of a graph G is a linear order x1,x2, ...,x
k
of G’s vertices such that every
initial segment x1,x2,...,x
m
(1 ≤ m ≤ k) of the order induces a connected subgraph, as does
every final segment x m,x m+1,...,x k. Equivalently, each vertex x
i
is adjacent to some vertex
x appearing earlier on the order (unless i = 1) and is adjacent to some vertex x appearing
j j
later on the order (unless i = k).
Let C ⊆ V be a subset of vertices, and let G\C denote the subgraph of G induced by the
vertex set V \C.
(1) If |C|= 1, and G\C has three or more connected components, then C is a type-1 trident.
(2) If |C| > 1; G \ C has exactly three connected components H1,H2, and H3; for each H
j
exactly one vertex s ∈ C (referred to as H ’s contact vertex), is adjacent to any vertices of
j j
H j; and the vertices s1,s2,s3 are distinct, then C is a type-2 trident.
Note that every Hamiltonian path is a bipolar ordering, but the converse fails: Graph IV
of Figure 2 is not traceable, but has a bipolar ordering – for example, order the vertices from
left to right, with the middle pair of vertices ordered either way. Removing a trident cuts the
graph into 3 or more disconnected pieces.
Example 1. Here we review material found in [3], explaining how tridents act to block EF1fair
divisions for n = 2 agents. Figure 1 shows three connected graphs; Graph I contains a type-1
trident, while Graphs II and III each contain a type-2 trident (consisting of all vertices with
labels). In Graph I, deleting vertex a would disconnect the graph into three components (each
4b c e f
a
d h g
j
k
I II III
Figure 1: Graph I has a type-1 trident; Graphs II and III have type-2 tridents.
of which consists of a single vertex). Only one agent can receive a piece including a; we say
that this agent dominates a. The piece of the second agent (we call him deprived) contains at
most a single one of the three components, as he cannot use a to forge a connected share from
vertices belonging to different components. Next, assume that each of the four vertices has
value 1 to both agents, and the value of a set of vertices is obtained by summing the values of
the individual vertices. Then the deprived agent receives at most single vertex of value 1, while
the other agent receives at least three vertices, each worth 1 to the deprived agent, thus leaving
him envious of the other agent by more than one item. In other examples, deleting vertex a
might leave more than three connected components, each with more than one vertex. We can
similarly force envy by assigning value 1 to a and to one vertex from each component, with
value 0 assigned to all other vertices. In these situations, vertex a is an example of a type-1
trident – an obstacle to connected EF1allocations for two agents, when paired with a suitable
choice of CA valuations. Similar arguments, deferred to Example 1, apply to Graphs II and III.
Deleting any single vertex from Graph II yields at most two disconnected components, so
this graph has no type-1 trident. It does have what we will call a type-2 trident, however, in
the form of the central subgraph CII induced by vertex set {b,c,d}, which acts collectively in a
manner similar to a type-1 trident. Deleting the vertices in CII would yield three disconnected
components, and only one agent can dominate CII by being allocated at least two of the three
vertices b,c,d. The share of a second, deprived agent contains at most one of these three
vertices – not enough for him to form a connected share containing vertices from more than
one of the components. Note that this last argument requires that each component have its
own distinct contact point s ∈ C, with s adjacent to a vertex in that component. For a type-2
trident, the counterexample CA valuations that defy connected EF1 allocations for 2 agents are
1
a bit different. We assign value
3
to each of the three contact points b,c and d of CII, value 1
to one vertex from each of the three components, and value 0 to all other vertices (from the
components, or from CII).2 The deprived agent now receives a share with at most two valuable
1
vertices, whose values are 1 and 3, while the agent who dominates CII is left with at least four
1 1
valuable vertices with values 1, 1, , and , so he is envied by more than one item.
3 3
What about variants of Graph II for which deleting a subgraph C leaves more than three
components? This happens in Graph III if we declare the trident to be the central square
induced by vertices e,f,g, and h. We would then get 4 components, each with its own distinct
contact point in the square. However, we disallow tridents with more than three contact points
(and they are not needed for the 2-agent characterization). In the case of Graph III we can
instead enlargethesquareby havingourtridentCIII absorbthefourthcomponent(withvertices
j and k in Figure 1) completely, as suggested by the dashed gray ellipse in the figure. For the 2
agent case, the same can be done any time the proposed type-2 trident has more than 3 contact
points, or has 3 contact points with multiple components sharing a common contact point.
We are ready to state the two known results.
2Value 1 would also work for thecontact vertices here, but related examples require a strictly smaller value.
5c
c d g hk m
a b f
e a jn b
d
IV V VI
Figure 2: Three examples of cutsets with valence 2 and gap ≥ 2, forbidding connected EF1
allocations for 3 agents under CA valuations.
Proposition 2 ([3]). The following are equivalent for all finite connected graphs G: (i) G guar-
antees connected EF1outer allocations for 2 agents with arbitrary monotone valuations. (ii) G
guarantees connected EF1outer allocations for 2 agents with CA valuations. (iii) G contains no
tridents. (iv) G has a bipolar ordering.
Proposition 3([14]). The lipsgraph,3 and allof itssubdivisions, guarantees connected EF1outer
allocations for 3 agents with monotone valuations.
Theproofof Proposition 3usesa discretization of amodifiedversion of Stromquist’s famous
moving knife argument [19] for continuous fair division of the [0,1] interval. The technique
works for a few other graphs, but we know of no characterization for 3 agents analogous to
Proposition 2. For positive results, the situation for 4 or more agents is worse yet – there are
none, except those for traceable graphs already implied by Proposition 1, and those implied,
for a few very small graphs, by two additional special cases that we provide in Section 5.
The graph cutsets we introduce in Definition 3 provide new negative results for a variety of
specificgraphsand values of n ≥ 3, thus generalizing therole of tridents in Proposition 2, which
applied only to n = 2 agents. A cutset C resembles a set of tridents that achieve the necessary
disconnections by acting collectively. If any of these are type-II, then C is a generalized cutset
(cutset, for short), if at most one is type-II then C is a tame generalized cutset (tame cutset, for
short), and if none are type-II then C is an elementary cutset.
3 Graph Cutsets and Main Obstruction Theorem
Cutsets provide obstacles to connected EF1 allocations for more than just two agents, general-
izing tridents; see Definition 2. The consecutive numbers 1,2 and 3 played a critical role in a
type-1 trident; we removed 1 point from a connected graph, we had 2 agents, and the point’s
removal yielded 3 subgraphs that were disconnected from one another. Suppose instead we
remove 2 points from the graph, we have 3 agents, and when we remove both of the points we
get 4 disconnected subgraphs? This is exactly the situation for Graph IV in Figure 2, when
removing the circled points a and b. It will follow from Definition 5 that CIV = {a,b} is an
elementary cutset of gap ≥ 2. The word “gap” here refers to the difference between the number
of points removed and the number of disconnected subgraphs that result. We see next how
connected EF1 allocations for three agents are blocked by a cutset like the one for Graph IV.
Lemma 1. For each graph in Figure 2, there exist CA valuations for n = 3 agents such that
no connected EF1 allocations exist (so no connected EF1outer allocations exist).
Proof. We consider each graph one by one. For graph IV, given any partition of the vertices
into three connected shares, at most one agent dominates vertex a (meaning a is in her share)
3ThelipsgraphofIgarashi and Zwickerhasverticesa,b,andc;twoedgesjoinatob,twojoinbtoc,andone
joins a to c. Graph L⋆ of Figure 3 shows a version with added subdivision vertices v1 – v5.
6and at most one other dominates b. With three agents, this leaves some third agent (we call
him deprived) dominating neither member of the cutset. Just as in the earlier argument for
Graph I (with the type-I trident) his share will contain vertices from at most one of the four
disconnectedsubgraphs. ConsidertheCAvaluationthatassignsvalue1toa,1tob,1toexactly
one vertex selected from each of the four disconnected subgraphs, and value 0 to all remaining
vertices (if there are any – of course, there are none for Graph IV). The deprived agent gets at
most one valuable vertex, worth 1, leaving 5 valuable vertices, worth 1 each, to be split between
the remaining two agents. One agent gets at least three of these, and the deprived agent envies
her by more than one item.
Graph V is different; removing two vertices from the graph never yields more than three
disconnected subgraphs.4 But the subgraph induced by c,d, and e acts like a type-2 trident; at
most one agent x can dominate the subgraph (meaning x’s share contains at least two of the
three contact points c,d, and e). We set the gap ≥ 2 cutset to be CV = {{f},{c,d,e}}, our first
example of a generalized cutset; see Definition 3. The additional set braces clarify that CV has
two members – a type-I member resembling a type-1 trident, and a type-II member resembling a
type-2 trident. Deleting the vertices from both members yields 4 disconnected subgraphs, while
the number of agents who can dominate at least one cutset member is at most 2, making the
gap equal to 4−2= 2. We can think of each cutset member as being a kind of ticket, on which
a face value of 1 is printed:
1 pass-through allowed.
Any agent who dominates a member of CV gets to use the ticket, granting her the possibility
to obtain a share containing vertices from two of the four subgraphs. Yet other examples have
tickets with face values k > 1 as well; these can be used by k agents and correspond to cutset
members with enough contact points to be passed through by k agents. See Graph VII from
Figure 3 and Lemma 2 for more discussion.
The valence of a cutset is the sum of the face values on the tickets, so CV has valence 2, as
does cutset CIV for Graph IV. When the number of agents is greater than the valence of the
cutset (at least three, for graphs IV or V), we know that some deprived agent has no ticket to
use, so his share has vertices from at most one of the disconnected subgraphs; when the number
of agents is less than the number of components (at most three, for graphs IV or V), some
(other) privileged agent must have a share overlapping two disconnected subgraphs.
WeuseCV toblockconnectedEF1outer allocationsfor3agentswithCAvaluationsasfollows:
Assign weight 1 to each of the four unlabeled vertices of Graph V – that’s one vertex from each
1
disconnected subgraph, weight 1 to vertex f, and weight to each of the vertices c,d,e; if there
3
were any additional vertices, we would have assigned them weight 0. Now the deprived agent
1
receives at most two valuable vertices, with values of 1 and . The remaining agents receive at
3
least three unlabeled vertices, so some agent y gets at least two of these. These two come from
different disconnected subgraphs, so to connect them agent y must also get a “ticket,” meaning
y’s share either includes f or includes at least two of the three vertices in {c,d,e}. So agent
1 1
y either gets three vertices valued at 1, 1, and 1, or gets four vertices valued at 1, 1, and .
3 3
Either way, the deprived agent envies y by more than one item.
TheproofforGraphVIisabitmoreinvolved. ConsiderthecutsetCVI = {{g,h,j},{k,m,n}},
1
with 2 type-II members, and valence of 2. We assign weight to each of the vertices g and m,
3
1
and weight to each of the remaining vertices from the cutset, i.e., h,j,k, and n. We assign
4
weight 1 to each of the vertices a,b,c, and d not from the cutset CVI. With three agents, there
will again be a deprived agent Alice who gets at most one vertex from {g,h,j}, at most one
vertex from {k,n,m}, and at most one vertex from {a,b,c,d}. So Alice’s share must be one of
the following (or a subset of one):
4Italso holdsfortraceable graphsthat deletingk verticesyieldsnomore thank+1disconnected subgraphs.
72 3 2 v1 v3
a b fc d e a 2 2
c
d
3
f2 2 h a
v2 b v4
c
b g
e v5
Figure 3: Left: Graph VII has a cutset of valence 3 and gap ≥ 2. Middle: The JCS graph.
Right: The graph L∗ from Figure 11 in the paper of Igarashi and Zwicker [14].
(1) {h,c,k} (or {j,d,n}); the worth is 1/4+1+1/4.
(2) {a,g} (or {b,m}); the worth is 1+1/3.
Some privileged agent Lily gets at least two from {a,b,c,d}, hence also gets either at least two
from {g,h,j} or at least two from {k,n,m}. Thus Lily’s share must be one of the following (or
a superset of one):
(3) {c,h,j,d} (or {c,k,n,d}); the worth is 1+1/4+1/4+1.
(4) {a,g,h,c} (or {a,g,j,d}); the worth is 1+1/3+1/4+1.
(5) {b,m,k,c} (or {b,m,n,d}); the worth is 1+1/3+1/4+1.
NowAliceenviesLilybymorethanoneitem,exceptinonecase: Alice’sshareisoftype(1)(and
not a proper subset of type (1)) and Lily’s is of type (3). But this combination is impossible,
as their shares would intersect.
ThetypeofadditivevaluationsusedintheproofaboveforGraphValsoworkmoregenerallyfor
elementary cutsets that are tame, meaning they are limited to at most a single type-II member,
but this approach falls apart for the general case when there are two or more such members.
For the particular case of Graph VI we were only able to come up with CA valuations (that
forbade connected EF1 allocations for three agents) thanks to the final argument, establishing
that for connected allocations the share of a deprived agent cannot contain single vertices from
two different type-II members without overlapping the share of a privileged agent. There exist
other graphs in which shares are not forced to intersect in this way, leaving us without an
argument showing existence of a CA counterexample. For these examples, a more general CM
construction still works; see Theorem 1.
Lemma 2. Graph VII from Figure 3 has a cutset that blocks connected EF1 allocations for 4
agents with CA valuations.
Proof. Our cutset for this graph is CVII = {{a},{b,c,d,e,f}}, with two members; H1 = {a} is
type-I and H2 = {b,c,d,e,f} is type-II, but has 5 contact points rather than only 3. Consider
any connected share that contains 2 of the 5 unlabeled vertices of graph VII, but omits a. To
connect those two, it must include at least two of H2’s vertices – that is, it must dominate H2.
But H2 has only 5 vertices, so it can be dominated by at most two agents. Its ticket reads
2 pass-throughs allowed.
This enables as many as two agents to pass through H2, while an additional ticket enables one
more agent to pass through H1. The valence of CVII is the sum 1+2 = 3 of the pass-through
numbers on these two tickets. The rest of the argument is similar to the one for graph V. With
four agents, some deprived agent dominates neither member of C and their share contains at
VII
most one unlabeled vertex. If we assign weight 1 to a and to each unlabeled vertex, and assign
1
weight
3
to each of the five contact vertices of H2, then the deprived agent will envy one of the
others by more than one item.
The seven examples from Figures 2 and 3 portend all of the main ideas used in the general
proofs of our main theorem, as well as most – but not all – of the features found in the precise
8definitions of cutset. Other examples, not presented here, have stretched these definitions in
two directions, relaxing some requirements so as to be satisfied by these other examples, while
forcing the imposition of additional requirements not needed for graphs I – VII. We seek a
definition as broad as possible, to encompass any situation for which a version of the deprived
agent argument applies. For example, we want to allow cutsets for which the “gap” (between
valence of some cutset C and the number of connected components that remain after excising
C) is more than two, but the requirement that contact points be unique and distinct must
also be imposed on these excess components, and these requirements then sometimes rule out
cutset examples that we might think to include. In some cases we can bypass that problem
by merging several components into one. The merged version is a subgraph that might no
longer be internally connected, so we will not call it a “component” any more; note that the
deprived agent argument only needs these subgraphs to be disconnected from each other, and
neverneedsthemtobeinternallyconnectedassubgraphs.5 Otherrequirementsarenecessitated
for generalized cutsets that are not tame (meaning they have more than one type-II member).
For example, we need to be sure that the deprived agent cannot put together a path from one
section to a different one by crossing from one type-II member to a different type-II member
while using only one contact point from each.
3.1 Main theorem
The definition given here for elementary cutset is quite simple – much more so than that for
the generalized version of cutsets to follow. An elementary cutset is just a set of t vertices,
that – when excised – break the graph into at least t+2 pieces that are disconnected from one
another (expressed as “at least t+2 connected components” in the precise version, below). The
valence, in this case, is just the number t of vertices that are cut (but valence will become more
complicated for cutsets). This simpler type of cutset was exemplified in graphs I (with valence
1) and IV (with valence 2) of the previous section, and can be thought of as a generalization of
the type-1 tridents from Bil`o et al. [3]. We fold the argument showing that elementary cutsets
can block the existence of connected EF1 allocations for agents with CA valuations into the
more general version for tame cutsets given in our proof of Theorem 1.6
Definition 3 (elementary cutset). For G = (V,E) a finite connected graph, let C = {c1,...,c t}
be a set of t vertices in V. If the subgraph of G induced by the vertex set V \C contains at
least t+r nonempty connected components H1,...,H t,H t+1,...,H t+r with r ≥ 2, then C is a
elementary cutset of gap r ≥ 2 and valence t.
In the definition above the valence reduces to being simply the number of the members of
the cutset, each of the sets in H can be presumed to be connected, and there are no restrictions
on connectivity between pairs of cutset members. This now all changes with the more general
definition. The valence of a cutset can now exceed its cardinality, as a type-II cutset member
C may have 2x+1 contact vertices, allowing as many as x agents to dominate C by owning
j j
shares that contain 2 such vertices. Each of those x agents could use these contact vertices to
connect a pair of vertices from different components; Graph VII is an example. Also, members
of the partition H may now be (internally) disconnected, and connections between pairs of
type-II members are restricted. These complications are needed, if we wish our main theorem
5Curiously, the argument also does not require that a type-II member be internally connected. But it is
certainly easier to find cutsets hiding within a graph such that each type-II member is connected, and we show
in Section 3.2 that imposing connectivity neverlimits theconsequences for connected EF1 allocations.
6But notethat aseparateargument forthiscase would beshorter(and quitesimilar towhat wasseen in the
examples).
9to apply to the widest collection of cases. Before giving the definition, we need some additional
terminology:
Definition 4 (big S, independent family). For X any family of subsets of a universe, let SX
denote the union of all sets in X; that is, x ∈SX iff x ∈ S for some S ∈ X.
Let K = (V,E) be a finite graph, not necessarily connected. Two vertex subsets L,M ⊆ V
are connected if at least one vertex in L is adjacent to some vertex in M; otherwise they are
independent. A family H = {H1,...H s} of subsets of V is independent if each two members
from the family are independent.
Definition 5 (generalized cutset; in short, cutset). For G = (V,E) a finite connected graph,
let
– C = {C1,...,C t} be a family of t pairwise disjoint, nonempty subsets of V, each inducing a
connected subgraph,
– τ = (τ1,...,τ t) be a sequence of natural numbers, with τ
j
called C j’s pass-through number
and the sum Στ of all τ called the valence,
j
– G\C be the subgraph of G induced by V \SC, and
– H = {H1,...,HΣτ+r} be an independent partition of V \SC with r ≥ 2.
Assume, in addition, that
– for each C and H there is at most one vertex s in C adjacent to any vertices in H , with
i j i,j i j
s referred to as the contact vertex for C and H ,
i,j i j
– each C ∈ C is either a “type-I member” containing one vertex, or a “type-II member”
j
containing more than one,
– τ = 1 for each type-I C ,
i i
– the type-II members of C form an independent family, and
– for each type-II member C , there are 2τ +1 sets H for which there exists a contact vertex
i i j
s ∈ C , and these contact vertices are distinct.
i,j i
Then C is a cutset of gap r ≥ 2 and valence Στ, with witness H. Such a cutset is tame if it
contains at most one type-II member.
Note that we do not require any H to be connected.
j
Observation 1. Every elementary cutset C of gap ≥ 2 and valence t satisfies Definition 5
for cutset of gap ≥ 2 with the same valence t, once each vertex c ∈ C is converted into the
i
corresponding singleton set {c }, τ is set equal to (1,1,...,1) with Στ = t, and H is set equal
i
to the set of connected components in G\C.
Observation 1 explains why we present only one version of the main theorem that follows.
Theorem 1 (Main Theorem). Let G = (V,E) be a finite, connected graph. Suppose C =
{C1,C2,...,C t} is a cutset for G, of gap r ≥ 2 and valence Στ, with witness H = {H1,H2,...,
HΣτ+r}. Then for each integer n lying within the “critical interval” Στ < n< r+Στ,
– there exist common monotone valuations for n agents, under which no connected EF1 allo-
cations exist (whence no connected EF1outer allocations exist);
– if C is tame, there exist common additive valuations for n agents, under which no connected
EF1 allocations exist (whence no connected EF1outer allocations exist).
Proof. We begin by introducing some necessary definitions. We say that a set S ⊆ V dominates
a type-I member C = {c } ∈ C if c ∈ S; S dominates a type-II member C ∈ C if S includes
i i i i
two or more of C i’s contact vertices s i,j. Given an allocation A = (A1,A2,...,A n)of G’s vertices
to the n agents, we say that agent j dominates a member C ∈ C if their assigned piece A
i j
dominates C . An agent who dominates no member of C is deprived.
i
10Choose one distinguished vertex h ∈ H from each H ∈ H, so that the number of dis-
j j j
tinguished vertices is |H|. An agent whose share includes two or more of these distinguished
vertices is said to be privileged. We first show that deprived and privileged agents both exist,
then construct valuations under which the former envies the latter by more than one item:
Claim 1.1. For every allocation, a deprived agent and a privileged exist.
Proof of Claim 1.1. Let A = (A1,...,A n) be an arbitrary allocation for n agents. Then, at
most τ agents can dominate any single member C ∈ C, so the number of agents who dominate
i i
members of C is at most Στ. But there are n > Στ agents. This means that there must be one
agent that does not dominate any cutset member, showing the first part of the statement.
For the second part, recall that the number of agents is n < r + Στ = |H|. With more
distinguished vertices than agents, some agent’s share A must include two or more of the h ,
k j
meaning that some agent is privileged, as desired. ⋄
Claim 1.2. For every connected allocation, privileged agents are never deprived.
Proof of Claim 1.2. LetA= (A1,...,A n)beanarbitraryconnected allocation fornagents. By
Claim 1.1, letibeaprivileged agent, sothatA isaconnected sharethatcontains distinguished
i
vertices from two different members of H. Let ρ = x1,x2,...,x k−1,x
k
be a shortest path
possible consisting entirely of vertices from A
i
and joining members x1 and x
k
of different sets
in H. As H is an independent collection, x1 and x
k
are not adjacent, so there must be at least
one vertex in the “middle” part x2,...x k−1 of ρ. None of those middle vertices are in SH,
else we would get a shorter path of the desired kind, so they all come from SC. If any middle
vertex is some c ∈ {c } = C ∈ C then i dominates that type-I member C , so i is not deprived,
j j j j
as desired. If not, then all of the middle vertices come from type-II members of C. But the
type-II members form an independent collection, so all of the middle vertices come from the
same type-II member C j. Thus x2 and x k−1 are each contact vertices from the same C j, but
for distinct sets from H. We cannot have x2 = x k−1, because contact vertices for different sets
in H and the same C j are required to be distinct. So x2 and x k−1 are two contact points from
the same type-II member C , showing that A dominates C , as desired. ⋄
j i j
Now, wearereadyto stateconcrete valuations for whichnoconnected EF1allocations exist.
We define the common valuation v of a set of vertices as the sum v =v +v of an H-part and
H C
a C-part. For the H-part, set v (h ) = 1 for each distinguished vertex h , and v (y) = 0 for
H j j H
every other vertex y ∈ SH. Then v H(A i) is the sum of these values for all vertices in the set
A
i
∩(SH). The definition of v
C
depends on whether C is tame:
Case 1: C is tame. Then for each x ∈ SC we set v C(x) = 1 if {x} is a type-I member of C,
1
v (x) = if x is one of the contact vertices in the only type-II member of C, and v (y) = 0
C 3 C
foreveryother vertex y ∈ SC. Thenv C(A i)isdefinedtobesumofthesevaluesforallvertices
in the set A
i
∩(SC). In this case, v = v
H
+v
C
is additive as well as common and the total
1
value of any deprived agent’s share A is at most 1+ ; see Claim 1.2.
j 3
Case 2: C is not tame. Then v (A ) is defined to be the number of members of C dominated by
C i
A . In this case, v = v +v is still CM, but is not additive (because one or more contact
i H C
vertices, each from a different type-II member, add no value to a share, whereas two or more
contact points from the same type-II member adds 1 to the value). As v contributes no
C
value to the share of a deprived agent, and deprived agents are not privileged, the total value
of any deprived agent’s share A is at most 1.
j
Let A = (A1,...,A n) bea connected allocation. We know that some privileged agent k receives
a share A containing two or more distinguished vertices, each of value 1. By Claim 1.2 we
k
know that k is not deprived, so A dominates some member of the cutset, by including either
k
11some one vertex x with {x} being a type-I member of C, or some two contact vertices from the
same type-II member C of C.
j
1 1
In Case 1 we conclude that A has (additive) value of at least 1+1+ + or 1+1+1,
k 3 3
2
so removing any single vertex leaves A with value at least 1 . The deprived agent thus envies
k 3
1
agent k by more than 1 item, as his own share is worth at most 1 for Case 1.
3
In Case 2 we conclude that v awards a value of at least 1+1 to A with v providing an
H k C
additional value of at least 1, for a total of at least 3. Removing any single vertex would not
reduce that value below 2. The deprived agent again envies agent k by more than 1 item, as
his own share is worth at most 1 in Case 2.
Note that requiringr ≥ 2inTheorem 1guarantees thatthecritical interval contains atleast
one integer n. Further, two restrictions in the cutset definition—that cutset members induce
connected subgraphs and that pass-through numbers 2τ +1 be odd—are not used in the proof
j
of Theorem 1, but help to reduce the search space for cutsets. As we see next, the imposition
of these two restrictions does not eliminate any cases to which the theorem applies.
3.2 Two optional restrictions in the cutset definition
The phrase “relaxed version of Definition 5,” as used below, refers to the following modification
of the definition for graph cutset:
A type-II member C of C is no longer required
i
(R1) to induce a connected subgraph, or
(R2) to contain an odd number 2τ +1 of contact vertices s —an even number 2τ
i i,j i
is also permitted.
We show here that the additional “relaxed” cutsets admitted by these loosened requirements
yield no consequences for connected EF1 fair division beyond those that already follow from
the narrower class of “restricted” cutsets that meet the original definition. In particular, the
condition I C ⊆ I C′ in Proposition 4 (below) implies, for any connected graph G and integer
n, that if some relaxed cutset C can be applied, via Theorem 1, to show that connected EF1
allocations are not guaranteed for n agents, then some restricted cutset C′ can similarly be
applied to reach the same conclusion.
In what follows, it is helpful to recall the notation of SX. Thus, while |C| denotes the
number of members of the cutset C, SC stands for the set of vertices contained in the union of
those members; |H| and SH have analogous meanings for H (C’s witness partition.)
Proposition 4. Let G = (V,E) be a connected graph and C a cutset, with pass-through num-
bers τ and witness partition H, satisfying the relaxed version of Definition 5 (see (R1)–(R2))
for G. Let I denote the critical interval of integers n with Στ < n < |H| = Στ + r, i.e.,
C
I = {Στ +1,...,Στ +r−1}. Then there exists a cutset C′ with valence Στ′, witness partition
C
H′, and critical interval I C′ for which:
(1) Στ′ = Στ and |H′|≥ |H|, so that I
C
⊆ I C′, and
(2) C′ satisfies the original version of Definition 5.
Proof. Given a graph G and a cutset C as described above, assume that some type-II member
C ∈ C fails to satisfy at least one of the two restrictions under discussion. It is enough to con-
i
struct a cutset C⋆ that continues to meet the relaxed version of the definition, and additionally
satisfies:
(1∗) Στ⋆ = Στ and |H⋆|≥ |H|, so that I
C
⊆ I C⋆,
12(2∗) |C⋆|≥ |C| and SH⋆ ⊇ SH, and either
|C⋆|> |C| or SH⋆ ) SH.
Here condition (1∗) mirrors condition (1). Condition (2∗) asserts that the ⋆-operation never
decreases the number of members of the cutset, and never remove vertices from the union of all
subsets in the witness partition; moreover, this operation either strictly increases the number
of members in the cutset or strictly enlarges the set of the vertices in the witness partition. (In
practice, we will see that these changes happen when a member of the cutset is split in two,
or when vertices are transferred from SC to SH, with no cutset member ever disappearing
completely, and no vertex transfers ever going in the opposite direction.)
This C⋆ either satisfies the original definition, or else we can iterate the construction, gen-
erating a chain C⋆, C⋆⋆, C⋆⋆⋆, .... This chain only terminates when the terminal cutset C⋆⋆···⋆
satisfies the original, restricted definition. Moreover, it must terminate because neither the
number of cutset members, nor the number of vertices contained by all sets in the witness par-
tition, can grow beyond the number of vertices of the finite graph G. The construction of C⋆
from C now proceeds via cases.
Case 1: Assume that C has an even number 2τ ≥ 4 of contact vertices, and let s be one of
i i i,j
them. Construct C⋆ from C as follows: remove C from C, and replace it with two new
i
members: C \{s } (which is type-II, with 2τ⋆+1 = 2(τ −1)+1 contact vertices) and
i i,j i i
{s } (which is type-I); note that the original C makes a contribution to total valence
i,j i
equal to the combined contributions of its two replacements C \ {s } and {s }. Set
i i,j i,j
H⋆ = H. Then C⋆ satisfies the relaxed definition of cutset, with Στ⋆ = Στ, H⋆ = H, and
|C⋆| = |C|+1.
Case 2: Assume that C has 2 contact vertices, s and s (with j 6= k). Construct C⋆ from
i i,j i,k
C as follows: remove C from C, and replace it with the new type-I member {s }. Note
i i,j
that the original C and its replacement make the same contribution of 1 to the valence.
i
To construct H⋆ from H, move all vertices in C \{s } into H . Then C⋆ satisfies the
i i,j k
relaxed definition of cutset, with Στ⋆ = Στ, |H⋆| = |H|, |C⋆|= |C|, and SH⋆ ) SH.
Case 3: Assume that C has an odd number 2τ +1 ≥ 3 of contact vertices, induces a subgraph
i i
of G having morethan one connected component, and one of these connected components
D contains none of C ’s contact vertices. To construct C⋆ from C, remove C from C, and
i i
replace it with C \D, a type-II member containing the same number 2τ +1 of contact
i i
vertices. To construct H⋆ from H, add D to H as a new piece of the partition. Then, C⋆
satisfies the relaxed definition of cutset, with Στ⋆ = Στ, |H⋆| = |H|+1, |C⋆| = |C|, and
SH⋆ ) SH.
Case 4: Assume that C has an odd number 2τ +1 ≥ 3 of contact vertices, induces a subgraph
i i
of G having more than one component, and does not fit Case 3, but some connected
component D of C contains exactly one contact vertex s of C . To construct C⋆ from
i i,j i
C, remove C from C, and replace it with C \D, a type-II member containing 2τ contact
i i i
vertices, sothat theoriginal C and its replacement both make the samecontribution of τ
i i
to total valence. To constructH⋆ from H, add all vertices of D into H . Then, C⋆ satisfies
j
the relaxed definition of cutset, with Στ⋆ = Στ, |H⋆|= |H|, |C⋆|= |C|, and SH⋆ ) SH.
Case 5: Assume that C has an odd number 2τ +1 ≥ 3 of contact vertices, induces a subgraph
i i
of G having more than one component, and each of these components contains at least
†
two contact vertices of C . Let D be any component having an odd number 2τ +1 ≥ 3
i i
†† †
of contact vertices, so that C
i
\D contains 2τ
i
contact points with 2τ
i
+1 = (cid:0)2(τ i)+
1(cid:1)+(cid:0)2τ i†† (cid:1). To construct C⋆ from C, remove C
i
from C and replace it with the two type-II
membersD andC \D, notingthattheoriginalC makes acontribution τ tototal valence
i i i
† ††
equal to the combined contributions τ +τ of its two replacements D and C \D. Set
i i i
H⋆ = H. Then, C⋆ satisfies the relaxed definition of cutset, with Στ⋆ = Στ, H⋆ = H, and
13|C⋆| = |C|+1.
3.3 A Counterexample
Consider the following three conditions on a finite and connected graph G:
(C1) G is traceable.
(C2) G guarantees connected EF1outer allocations universally, for CM valuations.
(C3) G contains no generalized cutsets of gap ≥ 2.
We know the following implications: “(C1) ⇒ (C2)” (from Proposition 1) and “(C2) ⇒ (C3)”
(from Theorem 1). At one point, we did not know whether either arrow reversed. Recently
we found a 10-vertex graph showing that “(C3) ⇒ (C1)” fails. This was not a great surprise
as “(C3) ⇒ (C1)” would imply that “(C3) ⇔ (C1)”, and hence NP is contained in coNP; the
latter, however, is widely considered as unlikely. The reason is that checking traceability is
an NP-complete problem, while checking the non-existence of generalized cutsets is a coNP
problem; see next section for the complexity of the latter problem.
The example was a bit too large to check directly whether connected EF1outer allocations
were guaranteed universally. Much more recently we were able to reduce the earlier example
to the 8-vertex graph JCS presented here, which was small enough to yield to a trial-and-error
search for a “bad” common additive valuation. It is worth noting that while the valuation used
in the proof for JCS is not very complicated, it does seem quite different from the valuations
used (in the previous section) to defeat EF1outer allocations in graphs that contain cutsets.
Theorem 2. The non-traceable JCS graph of Figure 3 has no cutsets of gap ≥ 2 (of any kind),
yet fails to guarantee connected EF1outer allocations for three agents, even for agents with CA
valuations. Thus “(C3) ⇒ (C2)” fails.
Proof. Onecan check by inspection that the JCSgraph contains no cutsets of gap ≥ 2, and it is
alsoeasy toseethatnoHamiltonian pathexists(which,alternately, follows fromProposition1).
To see that connected EF1 allocations may fail to exist, consider the vertex weights appearing
directly above the vertices in Figure 3. Let the common value v(S) assigned (by all agents) to
a connected set S of vertices be given by the sum of the weights of the vertices in S.
Apartition P of theJCSvertex setVintothreeconnected pieces willbecalled a3-partition.
Let X and Y be pieces of a 3-partition P, and X⋆ denote the set of vertices that remain in
X after X’s most valuable vertex is removed. We will write X >> Y if v(X⋆) > v(Y). If
a 3-partition P contains two such pieces X and Y, then any assignment of P’s pieces to the
agents clearly fails to be EF1 (whence EF1outer also fails). In this case we will say simply that
P fails. Our goal, then, will be to show that every 3-partition fails in this way.
Claim 2.1. Let P be a 3-partition, A denote the piece of P containing vertex a in Figure 3,
and H denote the piece containing vertex h. Then for P to avoid a failure of type X >>Y we
must have that A6= H, with
(i) A containing b and c, and omitting d and e, and
(ii) H containing g and f, and omitting d and e.
Proof of Claim 2.1. To prove the claim, note that if A = {a} or A = {a,b} then v(A) is only 2
or 4, andthe value of theremaining vertices in V \A is at least 14. But thereexists nopartition
of V \A into two connected pieces of value 7 each, so one of these pieces X must have value
at least 8, whence X >> A. So A contains a, b, and at least one more vertex. Similarly, H
contains h,g and at least one more vertex. If A contains g then A = H, with v(A) ≥ 8. But
then the value of the remaining vertices is only 10 – small enough to force A >> Y for some
Y ∈ P. So for P to avoid failure we must have a,b, and c in A; f,g, and h in H; and A6= H. If
14A also contained d or e, we would again get A >> Y for some Y ∈ P, and the same reasoning
applies to H. This establishes the claim. ⋄
The theorem follows from Claim 2.1 because the third piece of P is forced to be {d,e}, which
is disconnected.
4 NP-Hardness of Finding Graph Cutsets
We begin with a reduction showing that finding an elementary elementary cutset is computa-
tionally hard, then modify it for our more general cutset notion.
Theorem 3. It is NP-complete to decide whether an undirected graph admits an
elementary cutset of valence t and gap ≥ 2.
Proof. NP-containment is straightforward since one can check in linear time whether a given
subset of t vertices is an elementary cutset of valence t and gap ≥ 2. To show NP-hardness, we
reduce from the NP-complete Clique problem [10]. This problem has as input an undirected
graph Gˆ = (Vˆ,Eˆ) and a number h. The task is to decide whether there exists a vertex
subset V′ ⊆ Vˆ of size h which induces a complete subgraph (aka. clique), i.e., one for which
each two vertices in V′ are adjacent.
Let I = (Gˆ = (Vˆ,Eˆ),h) denote an instance of Clique with Vˆ = {v1,...,v nˆ} and Eˆ =
{e1,...,e mˆ}. We construct a graph G for the cutset problem as follows.
– For each edge e∈ Eˆ, create an e-vertex called u .
e
– For each vertex v ∈ Vˆ, create a v-vertex called v . All v-vertices form a huge clique while
i i
each e-vertex u is only adjacent to the v-vertices that correspond to the endpoints of e.
e
– Finally,create(cid:0)h 2(cid:1)+h+1dummyverticesa1,...,a (h) andb1,...,b h+1 suchthateachvertexb z′
2
is only adjacent to each vertex a , while each a is adjacent to all other vertices. Let A =
z z
{a
z
| z ∈ [(cid:0)h 2(cid:1)]} and B = {b1,...,b h+1}.
h
To complete the construction, let t = (cid:0) (cid:1)+h. We continue to show that the construction is
2
correct, i.e., graph Gˆ has a clique of size h if and only if G has cutset of valence t deleting which
yields at least t+2 connected components.
For the “only if” direction, it is straightforward to verify that deleting all vertices in A
h
together with the h v-vertices which correspond to the size-h clique results in (cid:0) (cid:1)+h+2= t+2
2
connected components. These connected components are (cid:0)h (cid:1) isolated e-vertices, the h dummy
2
vertices from B, and the rest.
For the “if” direction, let U′ ⊆ V(G) denote a subset of t vertices deleting which yields at
least t+2 = (cid:0)h (cid:1)+h+2 connected components. Let G′ denote the resulting graph G−U′.
2
First, observe that every dummy a must be in the cutset U′ since every vertex is adjacent
z
to a z. This means that A ⊆ U′, and each b z′ is a single connected component in G′. There
remain h vertices in U′ \ A and (cid:0)h (cid:1)+ 1 connected components in G′ − B to be determined.
2
Since there are more than h v-vertices and all v-vertices are adjacent among each other, we
cannot delete h vertices to disconnect any two v-vertices. This implies that among the (cid:0)h (cid:1)+1
2
connected components in G′ −B, there is exactly one which intersects the v-vertices. Let X
denote this component. If two e-vertices are in the same component, then they are in X since
they are only adjacent to their endpoint v-vertices and each component in G′ is connected. In
other words, there must be at least (cid:0)h (cid:1) isolated e-vertices left in G′ −B. We claim that these
2
(cid:0)h (cid:1) isolated e-vertices correspond to a clique in the original graph Gˆ. To show this, it suffices to
2
show that there are h endpoints of the edges corresponding to the (cid:0)h (cid:1) e-vertices. To this end,
2
let V E′ = {u
e
| u
e
is an isolated vertex in G′}. Since |V E′| ≥ (cid:0)h 2(cid:1), the corresponding edges have
15in total at least h end points such that the lower bound is reached only if they correspond to a
size-h clique. By previous reasoning that there remaining h vertices in U′\A, we can delete at
most h many v-vertices. Hence, these deleted v-vertices must correspond to a size-h clique.
The reduction behind Theorem 3 introduces an enforcement gadget (the large clique) and
uses a counting argument that only works for the case when all cutset members are type-I (see
Definition 5). This argument alone does not work for the more general cutset definition with
type-II members, however, since a type-II cutset member can use a valence that accounts for
half the number of “disconnected components” in the remaining graph. To amend this, the
argument uses a second type of enforcement gadget to show:
Theorem 4. It is NP-complete to decide whether an undirected graph admits a cutset of va-
lence t and gap ≥ 2.
Proof. We adapt the construction given in the proof of Theorem 3. So we will again reduce
from Clique.
Let I = (Gˆ = (Vˆ,Eˆ),h) denote an instance of Clique with Vˆ = {v1,...,v nˆ} and Eˆ =
{e1,...,e mˆ}. Without loss of generality, assume that h is odd. We construct a graph G for the
cutset problem as follows.
– For each edge e∈ Eˆ, create an e-vertex called u .
e
– For each vertex v ∈ Vˆ, create a v-vertex called v and a copy of it, called w . Every w is only
i i i i
adjacent to its primary v . All v-vertices form a huge clique, while each e-vertex u is only
i e
adjacent to the v-vertices that correspond to the endpoints of e and to the a-vertices that we
specify next. For the sake of brevity, let W = {w | i∈ [nˆ]}.
i
– Finally, create two groups of dummy vertices, where L is an integer larger than mˆ.
• Create L+nˆ +(cid:0)h 2(cid:1)+2 dummy vertices, called a1,...,a L+nˆ+(h) and b1,b2 such that each
2
vertex b z′ is only adjacent to all dummy vertices a z, while each a z is adjacent to all other
vertices. Define A= {a
z
|z ∈ [L+nˆ +(cid:0)h 2(cid:1)]} and B = {b1,b2}.
• Create 2(2L+nˆ+h) dummy vertices, called x1,...,x2L+nˆ+h and d1,...,d2L+nˆ+h. Define
X = {x | z ∈ [2L+nˆ +h]} and D = {d | z ∈ [2L+nˆ +h]}. Each dummy d is only
z z z
adjacent to the corresponding dummy x , while all dummies x are adjacent to each other
z z
and to all v-vertices.
Let the valence be Στ = 2L+2nˆ+(cid:0)h (cid:1)+h.
2
It remains to show that graph Gˆ has a clique of size h if and only if G has a cutset of
valence Στ and gap at least 2.
For the “only if” direction, let U′ denote a size-h vertex subset which induces a clique with
U′ ={v ,...,v }. Let R denote the set consisting of the v-vertices and e-vertices not from the
j1 jh
clique. It is straightforward to verify that the following collection {{a1},...,{a L+nˆ+(h)},X ∪
2
R,{v },...,{v }} is a cutset of valence τ, deleting which yields τ+2 disconnected subgraphs:
j1 jh
the 2L+nˆ+h dummies from D, the 2 dummies from B, the nˆ copies of the v-vertices, and the
h
(cid:0) (cid:1) e-vertices corresponding to the clique.
2
For the “if” direction, let C be a cutset of valence Στ and gap at least 2, and H =
H1,...,HΣτ+2 the corresponding witness. Our method for showing that Gˆ admits a size-h
clique is to demonstrate that any such cutset C and witness H must necessarily resemble the
ones wejustdescribedin the“if direction”. Inparticular, itwillturnoutthat SH mustconsist
of (cid:0)h (cid:1) e-vertices that correspondto the edges of a size-h clique, the2L+nˆ+h+2 dummiesfrom
2
D∪B,andallnˆ vertices w i, i∈ [nˆ]. NotethatsinceH mustcontain atleast2L+2nˆ+(cid:0)h 2(cid:1)+h+2
members, it will follow that each member in H must be a singleton. As for the cutset C, we
will see that C consists of Στ −1 type-I members and one type-II member. The Στ −1 type-I
16membersare{a z}, z ∈ [L+nˆ+(cid:0)h 2(cid:1)]andhv-vertices v iz,z ∈[h]. Theseh-vertices willdisconnect
the (cid:0)h (cid:1) e-vertices from H and hence must necessarily form a size-h clique by our construction.
2
The contact vertices in the unique type-II member will be all dummies from X together with
h
the remaining n−h v-vertices. In total, C will contain 2L+2nˆ +(cid:0) (cid:1)+h contact vertices.
2
To support the above description, we proceed with a sequence of claims.
Claim 4.1. Every dummy vertex a forms a type-I member in C.
z
Proof of Claim 4.1. By construction, every vertex a is adjacent to all other vertices. If a were
z z
not in SC, then there can be at most one member of H, the witness. If a
z
were in a type-II
memberC of C, thenas differentmembersH inthewitnessmusthavedistinctcontact vertices
i j
in C , there again could be at most one H-member. Hence, a can only be in a type-I member
i z
of C , as desired. ⋄
i
Claim 4.2. Every dummy from X is in SC.
Proof of Claim 4.2. Supposenot. Then, since every dummy vertex from X is adjacent to every
other vertex from X, no two vertices from X ∪V(Gˆ) can be in the same cutset member D of
C; if they were, then all dummies from D must be also in the cutset as well since they would
both be contact vertices for D and whatever member of the witness partition H contained the
vertex from X lying outside SC, but such contact vertices must be unique. By Claim 4.1, the
vertices of A already contribute L+nˆ+(cid:0)h (cid:1) towards the total valence Στ = 2L+2nˆ+(cid:0)h (cid:1)+h,
2 2
so cutset C cannot contain more than L+nˆ+h vertices from X∪V(Gˆ) without making Στ too
great. These L+nˆ+h vertices can “disconnect” at most L+2nˆ+mˆ +h subsets H : L+nˆ+h
z
dummies from D, mˆ e-vertices, and the copy of each v-vertex. This is, however, less than τ
since L > mˆ, a contradiction. ⋄
Claim 4.3. C admits a type-II member C′′ such that C′′ contains at least two vertices of X
and at least two v-vertices, with no type-II member other than C′ containing any v-vertices or
vertices from X. Moreover, every v-vertex is in SC.
Proof of Claim 4.3. By Claim 4.2, we know that every dummy from X must be in SC. Hence,
again by Claim 4.1, at least two dummies from X must be in the same cutset member (which
must be type-II) as otherwise the valence would exceed Στ. Let C′ denote a type-II member
in C containing at least two dummies from X. Consequently, every v-vertex must also be in
SC, as otherwise it would have two contact vertices in C′; this shows the last part of the claim.
Moreover, as type-II members are independent, no type-II members other than C′ can contain
any v-vertices or any vertices of X.
⋄
Let h′ be the number of type-I members which consists of a single v-vertex. We claim that
h′ ≤ h. By Claim 4.3, let C′ be the unique type-II member which contains more than one
v-vertex and more than one dummy from X. Define n = |C′ ∩X| and n = |C′∩V|. Then,
x v
the valence induced by X and V is at least
n +n n +n
x v x v
+(2L+nˆ+h−n )+(nˆ−n )= 2L+2nˆ+h− .
x v
2 2
By Claim 4.1 and the valence bound Στ, we infer that
n +n
x v
2L+2nˆ+h− ≤ L+nˆ+h
2
⇔ 2L+2n−n ≤ n .
v x
17Sincen ≤ |X| = 2L+nˆ+h, wefurtherinferthatn ≥ nˆ−h. Thisimplies thath′ = nˆ−n ≤ h.
x v v
Now,sinceC′canonlydisconnectatmost2L+2nˆ+h−h′ subsets: 2L+nˆ+hfromthedummiesD
and nˆ −h′ due to the contact vertices from V(Gˆ), we have that the h′ type-I members from
V(Gˆ) must disconnect at least (cid:0)h 2(cid:1)+h′ subsets, h′ of which coming from the copies w i. Note
that by Claims 4.1 to 4.3 no vertex in the union D∪W ∪B∪E(Gˆ) can disconnect any subsets
since the neighbors of each vertex in the union are already in the cutset. Hence, the remaining
(cid:0)h (cid:1) subsets are e-vertices, which is only possible if they correspond to a clique of size h′ = h
2
since h′ ≤ h, as desired.
5 EF1 Spectrum of A Graph
SupposethatwefixafinitegraphG= (V,E)alongwithsomeclassV ofvaluations(allmonotone
valuations, for example) and ask: for which natural numbers n are EF1outer allocations of G
guaranteed for n agents with valuations in V? We will record the answer in the form of an
infinite sequence of yes-no answers, with the
nth
member of the sequence being a “yes” if the
EF1outer guarantee holds for n, and a “no” if the EF1 guarantee fails for n. We will refer to
that sequence as the EF1outer spectrum of G for the class V (or just as the spectrum, when the
context is clear). For example, we know from Proposition 1 that the spectrum of a traceable
graph is hyes, yes, ..., yes, ...i.
What general patterns hold for thespectra of all graphs? We begin with two positive results
that make use of a picking order when the number of agents is large enough relative to the size
of the graph. The first holds for any connected graph whenever the number of agents is at least
one less than the number of vertices; the second holds for graphs meeting a simple condition,
when the number of agents is two less than the number of vertices. In combination with our
main Theorem 1 these allow us to pin down the complete spectrum for a few graphs, and the
common pattern they exhibit in turn suggests a general conjecture.
Observation 2. For connected graphs with |V| vertices and under monotone preferences, there
always exists a connected EF1outer allocation for n ≥ |V|−1 agents.
Proof. If n = |V|−1, we order the agents arbitrarily and let each in the order pick his most
preferred vertex among those still available after agents earlier in the order have picked. The
one remaining vertex is no more valuable to any agent than the vertex picked earlier by that
agent, so it can be given to any agent for which connectivity is maintained. The resulting
allocation is connected and EF1outer for arbitrary monotone preferences.
If n≥ |V|of vertices, wecan give each vertex to adifferent agent (with someagents possibly
getting no vertices); the result is EF1outer regardless of V.
When n = |V| − 2, we also identify a large class of connected graphs which guarantee
the existence of connected EF1outer allocations for n agents. That class includes all connected
graphs for which no two degree-one vertices share the same neighbor.
Theorem 5. Let G be a connected graph with |V| vertices in which there are no three ver-
tices a,b,u such that u is a’s only neighbor and is also b’s only neighbor. Then under monotone
preferences, there is always a connected EF1outer allocation of G for n = |V|−2 agents.
Proof. Since Observation 2 implies that the conclusion holds for all connected graphs with at
most three vertices, we assume G to be a graph with at least four vertices in which there are no
three vertices a,b,u such that u is a’s only neighbor and is also b’s only neighbor. We modify
thepickingprocedurefor |V|−1agents behindObservation 2andshow thatitalways computes
a connected EF1outer allocation. There are two phases. In phase one, we order the agents and
18let every one in the order pick his most preferred vertex among those still available after agents
earlier in the order have picked. There remain two vertices, called a and b, which we consider
in the second phase. Without loss of generality, let us assume that the order of the agents is
1,...,n with each agent i picking vertex v in phase one. Note that no agent i values either a
i
or b more than the vertex v that he currently has. In phase two, we distinguish between two
i
cases:
Case I: There exist vertices v
i
6= v
j
among {v1,...,v n}\{a,b} with v
i
a neighbor of a and v
j
a neighbor of b. Then we assign vertex a (along with v ) to agent i and assign b (along with
i
v ) to agent j, which maintains connectivity. As no agent has more than two vertices and the
j
agents with two have either a or b (neither of which is more valuable to any agent than is the
vertex that agent picked in phase one), the resulting allocation is EF1outer.
Case II: CaseIfails to hold. Thenas Gisconnected, atleast oneof aor bmusthaveaneighbor
among v1,...,v n, so without loss of generality assume that b is adjacent to u ∈ {v1,...,v n}.
As Case I fails to hold, a is not adjacent to any vertex other than u among v1,...,v n. But
vertex a is not isolated, so it must be that either
1. a’s sole neighbor is b, or else
2. a has b and u as its only two neighbors.
(Note that it is impossible for a’s sole neighbor to be u; if that happened, then the theorem’s
hypothesis—thatunotbeboththesoleneighborofaandthesoleneighborofb—wouldimply
that b must have a second neighbor among v1,...,v n, putting us into Case I, not II.)
In either of these two sub-cases, we check whether some agent i finds the bundle {a,b} more
valuable than his current vertex v . If not, then we will give both a and b to the agent who
i
already has u, which maintains the connectivity constraint. It is straightforward to verify
that the resulting allocation is EF1outer; note that for the agent that receives {u,a,b} we can
delete his picked vertex u to help establish EF1outer.
Otherwise, let i be the first agent in the order (1,...,n) who finds {a,b} more valuable than
his current vertex v . We remove v from agent i’s share, giving him the piece {a,b} instead.
i i
Then, we let the agents from {i+1,...,n} (in the same order as originally used) pick single
vertices from {v ,...,v } in the same way as before, with each agent z in the order picking
i n
the most preferred vertex still available after all agents from {i+1,...,z −1} have picked.
For all z ∈ {i+1,...,n}, let w z denote the vertex picked by agent z, and set w z′ equal to
v z′ for all z′ ∈ {1,...,i−1}; this defines the phase-two picking sequence. Note that by using
the original picking order, we know that each agent j with j 6= i either picks the same vertex
in phase two that he had picked originally in phase one, or instead picks one that he prefers
at least as much as the phase one choice. Now, there remains a last vertex; call it vertex x.
We’ll show next that x is adjacent to some vertex w
j
∈ W = {w1,...w i−1,w i+1,...w n} =
V \{a,b,x}.
In sub-case II(1), b is the sole neighbor of a, so by the statements hypothesis, b cannot also
be the sole neighbor of x, whence x must have some neighbor w ∈ W.
j
In sub-case II(2), a’s only neighbors are b and u. Also, b’s only neighbors are a and u, for
otherwise we would again be back in Case I. As G is connected, u must then be adjacent to
some vertex y other than a or b, with y equal to some w ∈ W. Thus, if x = u, x is adjacent
j
to w ∈ W. On the other hand, if x 6= u, then as G is connected, x must have a neighbor y,
j
which is not a or b, so y is equal to some w ∈ W.
j
In any of these three situations, we add x to agent j’s share, with j’s share becoming {w ,x}.
j
Theresulting allocation is connected. We claim that it is also EF1outer. Every agent k, except
for agent i, had the option of choosing x in the phase-two picking sequence, but instead chose
anoption w theyweakly prefertox. Soifweremove w fromagent j’s share{w ,x}, agentk
k j j
does not envy agent j. Any such agent k also does not envy agent i, who receives share {a,b},
19because in the phase-one sequence agent k chose a vertex v which they weakly preferred to
k
either a or b alone, and in the phase-two sequence they received a vertex w that they weakly
k
preferred to v . Thus they feel no envy towards {a,b} after either of these two vertices is
k
removed; agent j similarly feels no envy towards {a,b} after either vertex of the two vertices
is removed. Agent i had the option of choosing x in the phase-one picking sequence (because
we know that any agent p with p < i did not choose x in either the phase-one or phase-two
sequence) but instead chose v and later replaced that choice by {a,b}, which they strictly
i
preferred to v . So, they strictly prefer their share to agent j’s share {w ,x}, after w is
i j j
removed. Of course, no agent feels envy towards an agent who received only one vertex, after
that one is removed, and we conclude that the allocation is EF1outer.
As we have constructed an EF1outer allocation in both cases, the statement follows.
So, what common patterns can we now assert for the spectra of all graphs? Each spectrum
th
for a connected graph starts with a yes, andis all yes fromthe (|V|−1) position on. For many
th
connected graphs, Theorem 5 tells us that they are all yes already from the (|V|−2) position
on. Each spectrum with any nos thus has a last no at some location j. Accordingly, we record
a YES in capital letters at location j +1 to indicate that the sequence is all yes from then on.
The following conjecture represents the simplest pattern that fits these two observations.
Conjecture 1. The spectrum of anyconnected graph G consists of an initialyes string, followed
by a (possibly empty) no string, followed by an unending yes string.
Conjecture 1 is supported by several examples, as we see next. Note, also, that the middle no
string of the conjecture mirrors the “critical interval” in the Theorem 1 statement.
Lemma 3. (1) The 5-pointed star has spectrum hyes, no, no, no, YESi.
(2) Graph IV in this paper, aka the friendly diamond graph, has spectrum hyes, yes, no, YESi.
(3) The version L∗ of the Lips graph found in [14] has 8 vertices (also see Figure 3), with
spectrum hyes, yes, yes, no, YESi.
Proof. A 5-pointed star has a central vertex adjacent to 5 vertices of degree 1. The three nos in
its spectrum follow from reasoning like that used for Graph I. The YES sits in the 5th position
because of the general rule (discussed above) for n ≥ |V|−1. Similar reasoning applies to a
k-pointed star, yielding a string of k −2 nos. For these graphs, all the yes answers hold for
arbitrary monotone valuations, and all no answers arise from CA counterexamples, so the class
V of valuations for this spectrum can be taken to be any of the classes of valuations that we
have discussed.
For Graph IV with 6 vertices in Figure 2, the yes in location 2 follows from the bipolar
ordering for the graph, and the no at location 3 follows from the cutset of valence 2 (both
discussed earlier). The yes for n ≥ 4 follows from Theorem 5 and Observation 2.
For the Lips graph L∗ (see the right part of Figure 3), the second yes uses the existence of a
bipolar orderingpairedwith Proposition 2. Thethird yes, proved in [14], uses the discretization
(mentionedearlier)ofamodifiedversionofStromquist’smovingknifeargumentforthreeagents
in[19].
Thenointhe4th
positionusesagraphcutsetofvalence3,consistingofthethreevertices
of degree greater than 2 in L∗.7
For five agents {1,2,3,4,5}, we can modify the picking sequence strategy for the case with
n = |V|−2 to obtain an EF1outer allocation. First use the previous picking procedure to let
the agents pick five of the eight vertices, called v1,...,v5,a,b,c; note that we use the same
names depicted in the right part of Figure 3. Without loss of generality, let the picking order be
7That argument, from “Example 1 continued” of [14], does not use the term “graph cutset,” but the idea is
thesame.
20(1,...,5). There remain three vertices; call them x,y,z. Note that no agent prefers any vertex
from {x,y,z} over his current picked vertex.
If these three vertices have three distinct neighbors that have been already picked, then we
can allocate each of themtoaseparateagent withoutdestroying theconnectivity. Theresulting
allocation is EF1outer since no agent receives more than two vertices and the agent that receives
two vertices has one from {x,y,z}.
Ifthesethreeverticesdonothavethreedistinctneighborsthathavealreadybeenpicked,then
anexhaustivesearchreveals 9possibilitiesfortheset{x,y,z}, whichweformintotwogroupsas
follows: {v1,a,v2},{v1,b,v2},{v3,c,v4}, and {v3,b,v4} are in Group 1; with {a,v1,b},{a,v2,b},
{c,v3,b},{c,v4,b}, and {c,v5,a} in Group 2. Each of these 9 sets has a path as induced
subgraph, so each is connected and remains connected when either of the two endpoints of the
path is removed. Let σ(i) denote the vertex picked by agent i, i ∈[5] initially.
Case 1: Assume that {x,y,z} belongs to Group 1. The proof we give here for the special case
{x,y,z} = {v1,a,v2} uses only that the middle vertex a of the path is adjacent to some third
vertex other thanthepath’s endpoints(here, v1 andv2), soasimilar proofworks fortheother
sets in Group 1. We may need 2-3 rounds of reallocation. First, we check whether we can
allocate {a,v1} to the agent that receives vertex v5 i.e., agent σ−1(v5), by checking whether
for every agent i except agent σ−1(v5), it holds that he values σ(i) at least as much as the
worse of {a,v1} and {a,v5}. If this is the case, then we can allocate {a,v1} to agent σ−1(v5)
without violating the EF1outer property. We allocate the remaining vertex v2 to agent σ−1(b).
This maintains EF1outer.
If someone (other than σ−1(v5)) likes the worse of {a,v1} and {a,v5} more than his current
vertex, then let i be the first agent in the order (1,...,5) who prefers bundle {a,v1} to his
current vertex σ(i). We remove vertex σ(i) from agent i and allocate {a,v1} to him.
Afterwards, we reallocate the vertices X = {v2,v3,v4,v5,b,c} to the agents except i by al-
lowing each agent in (1,...,i−1,i+1,...,5) one-by-one pick his most preferred vertex from
among those vertices in X that remain available to him. Let x be the vertex that is picked
k
by agent k from [5]\{i}. There remain two vertices. By our previous reasoning, one of them
must be v2. If the other one is not b, then we can assign each of the remaining vertices to a
different agent and obtain an EF1outer allocation.
If the remaining vertices are v2 and b, then we check whether some agent z from [5] prefers
{b,v2} to his current share. We distinguish between three sub-cases:
Case 1(i): Ifnoagent from[5]prefershiscurrentshareto{b,v2},thenadd{v2,b}totheshare
of the agent who picked v3. It is straightforward to verify that the resulting allocation is
EF1outer.
Case 1(ii): If no agent from [5] \ {i} prefers {b,v2} to his current share {x z}, but agent i
prefers {b,v2} to his share {a,v1}, then we switch the bundle of agent i from {a,v1} to
{b,v2}. Next, allow the agents from [5]\{i} one-by one (in the original order, as always) to
choose their preferredvertex from among those still available in {a,c,v1,v3,v4,v5}. It must
be that a and v1 are the two vertices that remain unpicked. Check whether it is possible –
without violating EF1– to add a and v1 to the share of the agent who already holds v5. If
so, do that, and we are done. If not, let j be the first agent in [5]\{i} who prefers {a,v1}
to the single vertex q that is her current share; note that from our previous reasoning,
we know j > i. Remove q and replace it with {a,v1} as agent j’s share. Then allow the
remaining agents from {j +1,...,5} to choose anew from among those vertices that are
not in the shares of agents {1,...,j} and are still available. There will be one unassigned
vertex y, which is not among a,v1,v2, or b. Any such y has at least one neighbor w other
than a,v1,v2, or b. Add y to the share of the agent holding w. Three of the five shares now
contain two vertices apiece, while the other two shares consist of a single vertex, and the
21allocation is EF1outer.
Case 1(iii): Some agent from [5]\{i} prefers {b,v2} to his current share {x z}. Then, let j be
the first agent in the picking sequence [5]\{i} who prefers {v2,b} to his share, and assign
{b,v2} as his share in place of x j. Now have the remaining agents in [5]\{i} who come
after j in the order choose their preferred vertex from among those still available. As in the
previous sub-case 1(ii) there will be one unassigned vertex y, which is not among a,v1,v2,
or b, and so the rest of the argument is the same as that for the previous sub-case.
Case 2: Assume that {x,y,z} belongs to Group 2. Four of the five sets in this group ({a,v1,b},
{a,v2,b}, {c,v3,b}, and {c,v4,b}) are symmetric to one another, while the argument for
the fifth set {c,v5,a} is quite similar to the others. So here we provide the argument for
{x,y,z} = {a,v1,b}.
First, check whetherevery agent otherthanσ−1(v2)likes hercurrentshareatleast asmuchas
the worse of {a,v1} and {a,v2}. If so, we can can add a and v1 to the share of agent σ−1(v2),
and add the single remaining vertex b to the share of agent σ−1(v3). The resulting allocation
is EF1outer. If not, and some agent (other than σ−1(v2)) prefers the worse of {a,v1} and
{a,v2} to his current vertex, let i be the first such agent in the order (1,...,5). The rest of
this case follows just as in Case 1. (Agent i’s share now becomes {a,v1}, we invite each agent
in (1,...,i−1,i+1,...,5) to re-pick from those vertices still available in {b,c,v2,v3,v4,v5}.
After that, one of the two remaining vertices must be b while the second may or may not be
v2, and this is the same situation we had found ourselves in for the comparable stage of Case
1.)
Finally, the yes for n ≥ 6 is due to Theorem 5 and Observation 2. The class V for this
spectrum can again be any of those we have mentioned.
6 Conclusion
Wehave introducedgraphcutsetsas obstructionsfortheexistence ofconnected EF1allocations
and show that detecting such structure is NP-hard. In terms of future research directions, it
would be interesting to characterize important structures that preclude the non-traceable JCS
graph from having a connected EF1 allocation; such a characterization may have something
interesting to tell us about whether it is only traceable graphs that guarantee existence of
connected EF1allocations for arbitrarily many agents (this was Question 1). Second, it would
be interesting to look at the parameterized complexity of finding cutsets. Last but not least, it
would be interesting to see whether Conjecture 1 holds true.
Acknowledgments
Jiehua Chen is supported by the Vienna Science and Technology Fund (WWTF) [10.47379/
VRG18012]. The work has been partially supported by the Funds for International Relation-
ships at TU Wien. William Zwicker was supported by the CY Initiative of Excellence (grant
“Investissements d’Avenir” ANR-16-IDEX-0008). We thank Manuel Sorge for suggestions that
clarified some of these concepts.
References
[1] I.B´ara´nyandV.S.Grinberg. Block partitionsofsequences. Israel Journal of Mathematics,
206:155–164, 2015.
22[2] X. Bei, A. Igarashi, X. Lu, and W. Suksompong. The price of connectivity in fair division.
SIAM Journal on Discrete Mathematics, 36(2):1156–1186, 2022.
[3] V. Bil`o, I. Caragiannis, M. Flammini, A. Igarashi, G. Monaco, D. Peters, C. Vinci, and
W.S.Zwicker. Almostenvy-freeallocations withconnectedbundles. Games and Economic
Behavior, 131:197–221, 2022.
[4] S. Bouveret, K. Cechla´rov´a, E. Elkind, A. Igarashi, and D. Peters. Fair division of a
graph. In Proceedings of the 26th International Joint Conference on Artificial Intelligence
(IJCAI17), pages 135–141, 2017.
[5] S. J. Brams and A. D. Taylor. Fair division - from cake-cutting to dispute resolution.
Cambridge University Press, 1996.
[6] E. Budish. The combinatorial assignment problem: Approximate competitive equilibrium
from equal incomes. Journal of Political Economy, 119:1061–1103, 2011.
[7] A. Deligkas, E. Eiben, R. Ganian, T. Hamm, and S. Ordyniak. The parameterized com-
plexity ofconnected fair division. InProceedings of the 30th International Joint Conference
on Artificial Intelligence (IJCAI21), pages 139–145, 2021.
[8] A. Deligkas, E. Eiben, R. Ganian, T. Hamm, and S. Ordyniak. The complexity of envy-
free graph cutting. In L. D. Raedt, editor, Proceedings of the 31st International Joint
Conference on Artificial Intelligence (IJCAI22), pages 237–243, 2022.
[9] E.Elkind,E.Segal-Halevi, andW.Suksompong.Graphicalcakecuttingviamaximinshare.
In Z. Zhou, editor, Proceedings of the 30th International Joint Conference on Artificial
Intelligence (IJCAI21), pages 161–167, 2021.
[10] M. R. Garey and D. S. Johnson. Computers and Intractability: A Guide to the Theory of
NP-Completeness. W. H. Freeman, 1979.
[11] P. Goldberg, A. Hollender, and W. Suksompong. Contiguous cake cutting: Hardness
results and approximation algorithms. Journal of Artificial Intelligence Research, 69:109–
401, 2020.
[12] A. Igarashi. How to cut a discrete cake fairly. Technical report, arXiv:2209.01348, 2022.
[13] A. Igarashi and D. Peters. Pareto-optimal allocation of indivisible goods with connec-
tivity constraints. In Proceedings of the 33rd AAAI Conference on Artificial Intelligence
(AAAI19), pages 2045–2052, 2019.
[14] A. Igarashi and W. S. Zwicker. Fair division of graphs and of tangled cakes. Mathematical
Programming, pages 1–45, 2023. Special issue in memory of Michel Balinski.
[15] R. J. Lipton, E. Markakis, E. Mossel, and A. Saberi. On approximately fair allocations
of indivisible goods. In Proceedings the 5th ACM Conference on Electronic Commerce
(EC04), pages 125–131, 2004.
[16] N. Misra, C. Sonar, P. R. Vaidyanathan, and R. Vaish. Equitable division of a path, 2021.
[17] A. D. Procaccia. Cake cutting algorithms. In Handbook of Computational Social Choice.
Cambridge, 2016.
23[18] J. M. Robertson and W. Webb. Cake-Cutting Algorithms–Be Fair if You can. A K Peters,
1998.
[19] W. Stromquist. How to cut a cake fairly. The American Mathematical Monthly, 87(8):
640–644, 1980.
[20] W. Suksompong. Constraints in fair division. ACM SIGecom Exchanges, 19(2):46–61,
2021.
[21] M. Truszczynski and Z. Lonc. Maximin share allocations on cycles. Journal Artificial
Intelligence Research, 69:613–655, 2020.
24