Agent-Based Triangle Counting and its Applications in
Anonymous Graphs
PrabhatKumarChand1[0000−0001−6190−4909],ApurbaDas2[0000−0001−6250−3752],and
AnisurRahamanMolla3[0000−0002−1537−3462]
1 IndianStatisticalInstitute,Kolkata,India
pchand744@gmail.com
2 BITSPilani,Hyderabad,India
apurba@hyderabad.bits-pilani.ac.in
3 IndianStatisticalInstitute,Kolkata,India
molla@isical.ac.in
Abstract. Trianglecountinginagraphisafundamentalproblemandhasawide
rangeofapplicationsinvariousdomains.Itiscrucialinunderstandingthestruc-
turalpropertiesofagraphandisoftenusedasabuildingblockformorecom-
plexgraphanalytics.Inthispaper,wesolvethetrianglecountingprobleminan
anonymous graphinadistributedsettingusingmobileagentsandsubsequently
usethisasasubroutinetotacklethetrussdecompositionandtrianglecentrality
problem.Thepaperemploysmobileagents,placedonthenodesofthegraphto
coordinateamongthemselvestosolvethetriangleenumerationproblemforthe
graph.Followingtheliterature,weconsiderthesynchronoussystemswhereeach
robot executesitstasksconcurrentlywithallothersandhencetimecomplexity
canbemeasuredasthenumberofroundsneededtocompletethetask.Thegraph
isanonymous,i.e.,withoutanynodelabelsorIDs,buttheagentsareautonomous
withdistinctIDsandhavelimitedmemory.Agentscanonlycommunicatewith
other agents locally i.e., if and only if they are at the same node. The goal is
todevisealgorithms thatminimiseboththetimerequired fortrianglecounting
and the memory usage at each agent. Wefurther demonstrate how thetriangle
count obtained through themobile agent approach canbe leveraged to address
thetrussdecomposition,trianglecentralityandlocalclusteringcoefficientprob-
lems,whichinvolvesfindingmaximalsub-graphswithstronginterconnections.
Truss decomposition helps in identifying maximal, highly interconnected sub-
graphs,ortrusses,withinanetwork,thus,revealingthestructuralcohesionand
tight-knit communities in complex graphs, facilitating the analysis of relation-
ships and information flow in various fields, such as social networks, biology,
andrecommendationsystems.
Keywords: MobileAgents·TriangleCounting·k-Truss·TrussDecomposition
·TriangleCentrality·LocalClusteringCoefficientTimeComplexity·Memory
Complexity·NetworkAlgorithms·DistributedAlgorithms
1 Introduction
Countingandlistingtrianglesinagraphhasreceivedmuchattentioninthelastcouple
of decades as it serves as a building block of complex network analysis [54, 7]. The
4202
beF
6
]CD.sc[
1v35630.2042:viXra2 P.K.Chandetal.
number of triangles in a graph is used for computing the clustering coefficient, one
of the most used metrics for network analysis [54, 7], and triangle centrality [37, 1,
8]. Triangle counting also plays a pivotal role in the hierarchical decomposition of a
graph such as truss decomposition [53] which is an important hierarchical subgraph
structure in community detection [24, 2]. Triangle counting is used in solving many
practicalapplications.Becchettietal. [6]usedtrianglecountsindetectingwebspam
andestimatingthecontentqualityofawebpage.EckmannandMoses[18]haveused
theclusteringcoefficientinfindingcommontopicsonwebpages.Otherapplicationsof
trianglecountingincludequeryoptimizationindatabases[5],linkpredictioninsocial
network[51],andcommunitydetectioninsystembiology[27].
Inthispaper,weareinterestedinthetrianglecountingproblemalongwithitsap-
plications in truss decomposition, computing triangle centrality and local clustering
coefficient using autonomous agents (or robots) on anonymous graphs. Suppose we
are given n agents positioned initially on the nodes (each node has one agent) of an
n-nodeanonymousgraphG.Theagentscoordinateamongthemselvestosolvethetri-
anglecountingproblemsuchthateachagent(atanode)outputs(i)node-basedtriangle
count,(ii)edge-basedtrianglecountandthetotalnumberoftrianglesinthegraph(see
theproblemstatementsinSection3).
Ouragent-basedmodelhasbeengainingsignificantattentionrecently.Forexample,
therehavebeensomerecentworksonhowtopositiontheagentsonnodesofthegraph
Gsuchthateachagent’spositioncollectivelyformthemaximalindependentset(MIS)
ofG[44,42]ortheyidentifyasmalldominatingset[11]ofG.Anotherrelatedproblem
is of dispersion in which k ≤ n agents are positioned on k differentnodesof G, see
[34] and the references therein. A solution to the dispersion problem guarantees that
k agents are positioned on k different nodes; which is a requirement for the triangle
counting problem defined in this paper. Exploration problem on graphs using mobile
agentsreferstosolvingagraphanalytictaskusingoneormoreagents[16].
In this work, we consider triangle counting in a simple, undirected, anonymous
graphusingmobileagents.Themotivationstemsfromscenarioslikeprivatenetworks
in the military or sensor networks in inaccessible terrain where direct access to the
network is obstructed, but small battery-powered agents can navigate to learn net-
workstructuresandtheirpropertiesforoverallnetworkmanagement.Prominentuseof
agentsinnetworkexplorationcanbeseeninareassuchasunderwaternavigation[15],
network-centricwarfareinmilitarysystems[36],modellingsocialnetwork[56],study-
ingsocialepidemiology[19]etc.
1.1 OurContributions
We first enumerate the triangles in the graph G and apply the triangle counting
methodologyto 3 applications: (i) Truss Decomposition, (ii) Triangle Centrality, and
(iii)LocalClusteringCoefficient.LetGbeann-nodeundirectedandconnectedgraph
withthemaximumdegree∆anddiameterD.LetnmobileagentswithdistinctIDsin
therange[0,nc] (c beinganarbitraryconstant)with thehighestagentIDλ ∈ [0,nc],
be placed at each of the n nodes of G in a dispersed initial configuration. Then, we
solvethefollowingproblems.Agent-BasedTriangleCountinganditsApplicationsinAnonymousGraphs 3
1. TriangleCounting
• Eachagentr cancalculateandoutputthenumberoftrianglesadjacenttothe
i
vertexwherer isplacedon,inO(∆logλ)rounds.
i
• Eachagentr cancalculatethenumberoftrianglesbasedoneachofitsadja-
i
centedgesinO(∆logλ)rounds.
• Each agent r can calculate the number of triangles in G in O(D∆logλ)
i
rounds.
ThememoryrequirementforeachagentisO(∆logn)bits.
2. TrussDecomposition-TheTrussDecompositionProblemforGcanbesolvedby
the mobileagentsinO(m∆Dlogλ) roundswith O(∆logn)bitsofmemoryper
agent.
3. TriangleCentrality-TheTriangle Centralityofeach nodev ∈ G canbecalcu-
latedinO(∆logλ)roundsifT(G)isknownandinO(D∆logλ)rounds,ifT(G)
isunknown.T(G)isthetotaltrianglecountofthegraphG.
4. LocalClusteringCoefficient-TheLocalClusteringCoefficientofeachnodev ∈
G,i.e.,LCC(v)canbecalculatedbythenagentsinO(∆logλ)rounds.
ThenotationsarefromTable1.
1.2 PossibleApplications
Triangle Counting and Truss Decomposition, in general, have various applicationsin
community detection, social network analysis, biological networks, recommendation
systems etc. Mobile agents on the other hand, equipped with truss decomposition
capabilities,postdispersion,candynamicallyidentifyandnavigatethroughstructurally
significant regions of the graph. For example, an unmanned mobile agent can help
prioritize areas within a large area that require prompt rescue and can carry rescue
materialsto difficult-to-accessterrain.Similarly,robotscarryingdifferentagricultural
materials(likefertilizersorpesticides)candynamicallyarrangethemselvesandfocus
onspecificareasthatexhibitparticularstructuralcharacteristicsrelevanttocrophealth.
Truss decomposition can contribute to the autonomy of vehicles by helping them
navigateefficientlythroughroadnetworksorcomplexurbanenvironmentsorhelping
them identify core areas in a city. In general, mobile robots can prioritize exploring
areas with high truss density, indicating regions of potential interest or connectivity
withintheenvironment.Inaddition,itsabilitytomodifyitselfinchallengingscenarios
improvesfaulttoleranceandhelpsmaintaintheconnectivityofthenetwork.
2 Related Work
2.1 TriangleCounting
Trianglecountingisawell-studiedgraphminingprobleminbothsequentialandparallel
settings.4 P.K.Chandetal.
SequentialAlgorithms: In1985,ChibaandNishizeki[13]proposedanalgorithmfor
countingalltrianglesinasimplegraphbycomputingtheintersectionoftheneighbor-
hoods of the adjacent vertices with time complexity O(m3 2) where m is the number
of edges in the graph. Other sequential algorithmsfor triangle countingare based on
vertex-iterator [47] and edge-iterator [26]. In vertex iterator based technique, it iter-
atesovereachvertexvofthegraphandintersectstheadjacencylistofeachpairofthe
neighborsof v. In edge-iterator based technique,it iterates over each edge and inter-
sectstheadjacencylistofitstwoendpoints.
ParallelAlgorithms: Ingeneral,anumberofdistributedandparallelalgorithmsfortri-
angleenumerationhavebeenproposedforvariousmodels(distributedmemory,shared
memory,multi-coremachines,messagepassinginterface(MPI)etc.).In[3],theauthors
implementedanMPI-baseddistributedmemoryparallelalgorithm,calledPATRIC,for
counting triangles in massive networks. Shun et al. in [48], designed multi-core par-
allelalgorithmsforexact,aswellasapproximate,trianglecountingandothertriangle
computationsthatscale to billionsof nodesand edges. In [4] presentedtwo efficient
MPI-baseddistributedmemoryparallelalgorithmsforcountingexactnumbertriangles
inbiggraphs.Theyachievedafasteralgorithmusingoverlappingpartitioningandeffi-
cientloadbalancingschemeswhileaspace-efficientonebydividingthenetworkinto
non-overlappingpartitions. Ghosh et al. in [22] presented a simple MPI-based graph
triangle countingmethodfor shared and distributed-memorysystems, which assumes
avertex-basedunderlyinggraphdistributioncalledTriC.Itwaslaterimprovedin[21].
Adetailedaccountofrelatedworksontriangleenumerationforvariousmodelset-ups
maybefoundin[52,6,5,51,35,47,23,50,41].
2.2 TrussDecomposition
In [14], Cohen introduced and visualized truss as a relaxation to cliques in graphs
and defined it to be a non-trivial, one-component sub-graph such that each edge is
reinforced by at least k − 2 pairs (for a k-truss) of edges making a triangle with
that edge. He established the existence of polynomialtime algorithmsfor identifying
k-trusseswithinagivengraph.Sincethen,trusseshavebecomethesubjectofextensive
investigation the problem has been studied in various models [24, 12, 25, 29]. In
general, truss decomposition is explored in two main contexts: a serialized version,
primarilysuitableforsmalltomedium-sizedgraphs,andaparallelversiondesignedfor
handlinglargergraphs.In[53],Yangetal.providedanimprovedserializedin-memory
algorithm for computing k−truss in graphs of moderate sizes. In particular, their
algorithm computed the k−trusses for all k ≥ 3 in O(m1.5) time using O(m + n)
memory space. They further proposed two I/O efficient algorithms for handling
massivenetworkswhichareill-equippedforthemainmemoryofasinglemachine.To
tackle the large memory requirement for massive graphs, several parallel implemen-
tations for truss decomposition were introduced. In [28], the authors implemented a
parallel version of the serialized algorithm in [53] and used data structures adaptive
to concurrent updates instead of hash tables. Sariyuce et al. in [46] employed the
iterative h-index computation, formulated by [38], for nucleus decomposition andAgent-BasedTriangleCountinganditsApplicationsinAnonymousGraphs 5
provedits convergencebounds.The truss decompositionproblem is a particular case
ofthegeneralnucleusdecompositionproblem.Theydevelopedparallelalgorithmsfor
both synchronousand asynchronousversions of the nucleus decompositionproblem.
In the synchronous version, the computations for specific iterations are made over a
singlesnapshotofcurrentvalueswhereasintheasynchronousversion,thelatestvalues
of each variable is used instantly in the current computation. Voegele et al. in [52]
proposeda parallelgraph-centrick− trussdecompositionandestablishedtherelation
between a k− truss and a k−core. When a k− core computationproceeds k− truss,
a lot of edges from the graph may be waived off from being processed since a k−
truss is always contained in a k −1 core. Jian Wuet al. in [55], engineered both the
serialized and parallel algorithms of [53] and [46] to reduce their memory usage
by optimizing the underlying data structures and by using WebGraph. In [20], the
authorsimplemented the truss decompositionon probabilistic graphs. They proposed
analgorithmbasedonh-indexupdatingandobtainedanupperboundonthenumberof
iterationsfor convergence.The efficiencyof mostof the algorithmsis describedwith
theaidofextensiveexperimentalresults.
Agent-basedComputationsonGraphs:In[49],Sudoetal.consideredtheexploration
problemwithasingleagentinundirectedgraphs.Startingfromanarbitrarynode,the
agent has to explore all the nodes and edges in the graph and return to the starting
node.Theauthorsusedawhiteboardmodel,thatreducedthememoryrequirementper
robot. In [30], the authors explored the graph exploration problem based on Depth-
First-Searchandstudiedthetrade-offbetweennode-memoryvsrobot-memory.In[17],
Dereniowskietal.proposedanalgorithmforcollectivegraphexplorationwithateam
of k (k beingpolynomialsize) agents in O(D) time. Theyalso obtainedalmost tight
boundsontheasymptoticrelationbetweenexplorationtimeandteamsize,forlargek,
inboththelocalandtheglobalcommunicationmodel.Furtherresultsonagent-based
graph exploration and dispersion (spreading agents across the graph so that there are
at-mostoneagentateachnode)canbefoundinseveralrecentpapers[31,32,33,39,
40,43,10].
3 Model andProblem Definitions
Graph: The underlying graph G(V,E) is connected, undirected, unweighted and
anonymous with |V| = n nodes and |E| = m edges. The nodes of G do not have
any distinguishing identifiers or labels. The nodes do not possess any memory and
hence cannot store any information.The degree of a node v ∈ V is denotedby δ(v)
and the maximum degree of G is ∆. Edges incident on v are locally labelled using
portnumbersin the range[0,δ(v)−1]. A single edgeconnectingtwo nodesreceives
independentport numbering at the two ends. The edges of the graph serve as routes
throughwhich the agents can commute.Any numberof agents can travel throughan
edgeatanygiventime.
Mobile Agents (or Mobile Robots): We have a collection of n agents
R = {r ,r ,...,r } residing on the nodes of the graph in such a way that each
1 2 n6 P.K.Chandetal.
nodeisoccupiedbya distinctID agentatthestart(knownasdispersed configuration
inliterature).EachagenthasauniqueIDintherange[0,nc](cisanarbitraryconstant)
and has O(∆·log(n)) bits to store information. An agent therefore cannot store the
whole graph structure information within its limited memory. An agent retains its
memoryaslongasneededanditcanbeupdatedasrequired.Twoormoreagentscan
be present (co-located) at a node or pass through an edge in G. However, an agent
is not allowed to stay on an edge. An agent can recognise the port number through
which it has entered and exited a node. The agents do not have any visibility beyond
their (current) location at a node. An agent at node v can only see the adjacent ports
(connectingto edges) at v. Only the collocatedagentsat a node can sense each other
and exchange information. An agent can transfer all the information stored in its
memoryinasingleround.Weinterchangeablyusethetermsrobotsandagents.
Communication Model: We consider a synchronous system where the agents are
synchronised to a common clock. As mentioned earlier, we consider the local com-
munication model where only co-located agents (i.e., agents at the same node) can
communicateamongthemselves.
TimeCycle: Eachagentr ,onactivation,performsaCommunicate−Compute−
i
Move(CCM)cycleasfollows.
- Communicate:r maycommunicatewithotheragentspresentatthesamenodeas
i
itself.
- Compute: Based on the gathered information and subsequent computations, r
i
mayperformallmannerofcomputationswithintheboundsofitsmemory.
- Move:r maymovetoaneighbouringnodeusingthecomputedexitport.
i
AnagentcanperformtheCCM taskinonetimeunit,calledround.Thetimecomplex-
ityofanalgorithmisthenumberofroundsrequiredtoachievethegoal.Thememory
complexityisthenumberofbitsrequiredbyeachagenttoexecutethealgorithm.
ThefollowingTable1providesaquickreferenceofthenotationsusedthroughout
thepaper.
3.1 ProblemStatements
Problem1. (TriangleCountingusingMobileAgents)Consideranundirected,simple,
connectedanonymousn-nodegraphG=(V,E)andacollectionR={r ,r ,...,r }
1 2 n
agents,eachofwhichinitiallyplaceddistinctlyateachnodeofG.Wesolvethefollow-
ingproblems.
1. Node-BasedTriangleCounting:Tocountthenumberoftriangleswithagivennode
asavertex.
2. Edge-BasedTriangleCounting:Tocountthenumberoftrianglesbasedonagiven
edge.
3. TotalTriangleCounting:TocountthetotalnumberoftrianglesinthegraphG.
Problem 2. (Truss Decomposition using Mobile Agents) Consider an undirected,
simple, connected anonymous n-node graph G = (V,E) and a collection R =
{r ,r ,...,r }ofnagents,eachofwhichareinitiallyplaceddistinctlyateachnode
1 2 nAgent-BasedTriangleCountinganditsApplicationsinAnonymousGraphs 7
Symbols Meaning
G(V,E) Graphwithedge-setEandnode-setV
n,m NumberofnodesandedgesofGrespectively
R Collectionofnmobilerobots{r1,r2,...,rn}
λ IDoftherobotwithmaximumID
δ(v) Degreeofthenodev
∆ HighestdegreeofnodeinG
D DiameterofG
Tk k-trussofG
T(v) Numberoftriangleswithvasvertex(node)
T(G) TotaltrianglecountofG
N(v) {u:(u,v)∈E(G)}
NT(v) {u∈N(v):N(u)∩N(v)6=φ}
N T+(v) {v}∪NT(v)
LCC(v) LocalClusteringCoefficientofnodev
Table1.Notationsusedinthepaper.
of G. The n autonomousagents coordinateamong themselvesto solve the Truss De-
compositionProblem.
Problem3. (TriangleCentralityusingMobileAgents)Consideranundirected,simple,
connectedanonymousn-nodegraphG=(V,E)andacollectionR={r ,r ,...,r }
1 2 n
of n agents, each of which initially placed distinctly at each node of G. The n au-
tonomous agents coordinate among themselves to compute the Triangle Centrality
TC(v)foreachnodev ∈G.
Problem 4. (Local Clustering Coefficient using Mobile Agents) Consider an undi-
rected, simple, connected anonymous n-node graph G = (V,E) and a collection
R = {r ,r ,...,r } of n agents, each of which initially placed distinctly at each
1 2 n
node of G. The n autonomous agents coordinate among themselves to compute the
LocalClusteringCoefficient,LLC(v)foreachnodev ∈G.
Inthispaper,westudytheaboveproblemsfromatheoreticalperspectiveandaim
tosolvethemwhileminimizingbothtimeandmemory-per-agentasmuchaspossible.
4 TriangleCounting viaMobileAgents
In this section, we developalgorithmsforn mobile agentsthat are initially dispersed
among the n nodes of the graph G to enumeratethe numberof triangles in G. Since
thenodesthemselvesarememory-lessandindistinguishable,thealgorithmreliesonthe
memoryandIDsofthemobileagentsthatresideonthenodesofthegraph.Also,since
theagentscannotcommunicateamongthemselves(unlesstheyareatthesamenode),
synchronisingthemovementoftheagentsisanotherchallenge.
Inouralgorithm,theagents(technicallyrepresentingthenodestheyaresittingat)
first scan their neighbourhood. Once all the information about the neighbourhood is
collected,theagentsnowcountthenumberofcommonneighbourhoodsbetweentwo8 P.K.Chandetal.
adjacentagents.Aftereachagentreceivesthatcount,thesumofeachsuchcountstored
ateachagentisevaluated,whichwhendividedbythreegivesusthenumberoftrian-
glesinG.Thealgorithmrunsinthreephases.Inthefirstphase,theagentslearntheir
neighbours.Inthesecondphase,theagentscheckthenumberofcommonneighbours
witheachofitsadjacentagents.Inthisphase,eachagentr alsocountsthenumberof
i
localtriangleswithr asavertexandthenumberoftriangleswith(r ,r )asanedge,
i i j
wherer isanadjacentagenttor .Inthethirdandlastphase,eachagentcollectsthe
j i
localtrianglecountfromeveryotheragentandcountsthenumberoftrianglesinG.We
nowexplaineachphaseindetail,below.
4.1 Phase1:KnowtheNeighbourhood
Eachnodeisoccupiedbyadistinct(viatheirIDs)agentbeforethestartofthealgorithm
andwerepresenteachnodeofGbyitsstationedagent.ThealgorithmstartswithPhase
1, whereeachagentdiscoversandrecordsits neighbour.As theIDs ofthe agentsare
unknown, agents cannot synchronously start scanning the neighbourhood.With each
agent executing the same algorithm, agents may not find other agents at their exact
placewhentheymove.Therefore,weneedtoensurethateachgetstorecordthecorrect
neighboursetofit.TodothisweexploittheIDbitsoftheagents.Weusethefactthe
IDsoftheagentsaredistinct.Tothisend,westatethefollowinglemma.
Lemma1. Letr andr betwodistinctagentsinR,withtheirIDsfieldbeingr .ID
i j i
andr .IDrespectively.Then,thereexistsatleastonedissimilarbitinr .IDandr .ID
j i j
withonebeing0andtheotherbeing1.
LetλdenotethelargestIDamongallthenagents.Therefore,theagentsusealogλ
bitfieldtostoretheIDs.Now,tolisttheneighbouringagents,anagentr stationedat
i
anodeudoesthefollowing.Here,δ(u)denotesthedegreeofanodeuand∆denotes
thehighestdegreeofanodeinG.
1. Forlogλroundsr executesthefollowing.
i
(a) r checksthecurrentIDbitinitsIDfromtheright.(Atthestart,thecurrent
i
IDbitistherightmostbitintheIDfield).
(b) Inthenext2∆rounds,r choosestodooneofthefollowingtwo:
i
• IfthecurrentIDbitis0,r waitsatitsownnodefor2∆rounds.
i
• IfthecurrentIDbitis1,r visitseachofitsneighbourandbackusingport
i
number0tillportδ(u)−1.Whenr meetsanewagentr ,itchecksr ’s
i k k
currentIDbit.IfthecurrentIDbitofr is0,itaddsr andrecordsitto
k k
r ’sneighbourslist.(Thisistoensurethatr istheoriginalneighbourof
i k
r andr isnotanexploratoryagentfromadifferentneighbouringnode).
i k
Theagentr alsosimultaneouslyrecordsr asitsneighbouraswell.The
k i
agentsignoreanyagentthathasalreadybeenregistered.
(c) After the 2∆ rounds have elapsed, the next left bit in the ID field becomes
the current ID bit. If no more bits are remaining and logλ roundshave not
been completed(implyingthat r has a smaller ID length than logλ bits), r
i i
assumesthecurrentbitas0andstaysbackatitsownnodefortherestpartof
thealgorithm.Agent-BasedTriangleCountinganditsApplicationsinAnonymousGraphs 9
AfterthecompletionofPhase1ofouralgorithm,itisguaranteedthateachagentcor-
rectlyrecordsallitsneighbouringagentsinO(∆·logλ)rounds,whichweproveinthe
followinglemma.
Lemma2. Eachagentr correctly recordstheexhaustivelistofits neighbouragents
i
inO(∆·logλ)roundsafterthecompletionofPhase1.
Proof. Let r (placed at node v) be a neighbour of r (at node u). Then there exists
j i
a portjoining u to v havingportnumberbetween [0,δ(u)−1]. Since r and r have
i j
distinctIDs,thereexistsabit(saythepthbitfromtheright)inr .IDandr .ID,which
i j
aredifferentfromoneanother(onebitbeing0,theotherbeing1)[Lemma1].Without
thelossofgenerality,letusassumethatthepth bitofr is1andthepth bitofr is0.
i i
Therefore,whenthepth bitbecomesthecurrentIDbit,r startsexploringitsneigh-
i
boursoneby oneduringwhichit findsthe agentr now stationaryatv with current
j
IDbit0.Thereforer recordsr asitsneighbour(simultaneouslyr alsoregistersr in
i j j i
itsneighbourlist).Inasimilarway,r recordsallofitsneighboursexhaustivelyeither
i
byvisitingastationaryagentinitsneighbourhoodorbymeetinganexploratoryagent
fromitsneighbour.Phase1runsforlogλroundswitheachroundconsistingofO(∆)
sub-roundstoallowtheagentstovisiteachneighbour.Therefore,Phase1completesin
O(∆·logλ)rounds.
Therefore,with the end of Phase 1, each agenthas now enlisted its neighbouring
agentsinitsmemory.ThealgorithmnowmovestoPhase2whereeachagentr counts
i
thenumberoftriangleswithr asoneofitsvertex(node).
i
4.2 Phase2:LocalTriangleCounting
Inphasetwo,eachagent,nowequippedwiththelistofitsneighbouringagents,visits
each of its neighbours once again, in exactly the similar fashion described in Phase
1. Whenever the agent r meets its neighbour r , they communicate to find out the
i j
numberofcommonneighbourstheybothhave.Hereasthenodesareanonymous,they
areidentifiedusingthemobileagentsthatresideonthenodes.Thiscommunicationis
alsousedtheupdatethefollowingvariablesofr :
i
1. r .edge(r ) :A variablewhichstoresthecountofthenumberofcommonneigh-
i j
bours of r and r which represents the number of triangles based on the edge
i j
containing(r ,r ).r has∆suchvariablesr .edge(x),wherexrepresentsanother
i j i i
agent that has an edge with r . Each of these variables are initially set to 0. A
i
variabler .edge(x)remains0,iftherearenotriangleswith(r ,x)asanedge.
i i
2. r .local_sum : Initially set to 0, adds up the counts of the number of common
i
neighboursforeachdistinctneighbourofr .Asr findsitsneighboursonebyone,
i i
itcumulativelyaddsupthecountofthenumberofcommonneighbourswitheach
ofitsneighbours.Mathematically,r .local_sum=Σ r .edge(r ),wherethesum
i j i j
runsovereveryneighbouringagentr ofr .
j i
In the given window of logλ rounds (each round containing a ∆ sub-round), as the
agents communicate with their neighbours, the variables r .edge(·) are updated. At
i
the end of this phase, r also builds on the count of the variable r .local_sum =
i i
Σ r .edge(r ).Togetthecorrectnumberoftriangleswithr asoneofthevertex(local
j i j i10 P.K.Chandetal.
triangle counting),we divide r .local_sum by 2. We state the reason for the same in
i
thefollowinglemma.
Lemma3. The number of triangles with agent r as a vertex is given by
i
1(r .local_sum).
2 i
Proof. First, we see that if the agents r and r have a common neighbour r , then,
i j k
(r ,r ,r )formatrianglewithr asoneofthevertex.Now,thetriangle(r ,r ,r )has
i j k i i j k
beentallied oncewhilecountingthe commonneighbourofr with r andre-counted
i j
again as a common neighbour of r with r . Therefore, each (r ,r ,r ) with r as
i k i j k i
vertex,iscountedtwice,oncethroughr andothertimethroughr .So,thenumberof
j k
triangleswithagentr asavertexisexactlyhalfofr .local_sum.
i i
ThereforeattheendofPhase2,eachagentr getsalocalcountofthenumberof
i
triangleswithr asavertexandalistofthenumberoftrianglesthatarebasedonthe
i
edgesadjacenttor .Inthenextphase,thealgorithmfindsthenumberoftrianglesofG
i
usingthecountsgeneratedinthisphase.
4.3 Phase3:CountingtheNumberofTrianglesinG
To find the number of triangles in G, we need to take into account the local triangle
countsofeachagent.We firstneedtoaccumulatether .local_sumvaluesofeachof
i
thenagentsandcalculatethetrianglesofGfromthere.However,duetotheabsence
ofaleaderagentandthedifficultyofsynchronisingthemovementoftheagents,gath-
ering the r .local_sum is notstraightforward.The high-levelidea is to communicate
i
repeatedlywith the neighboursandcontinuallygatherup the valuesof local_sum of
eachagenthopbyhoptilleachagentgetseverylocal_sumvalue.
As describedin the previouscase, the agentscan assuredly communicatewith all
theirneighboursin∆·logλrounds.Insidethefirst∆·logλroundofthisphase,the
agentscommunicatewith their neighboursandexchangethe variablelocal_sum. An
agentr ,alongwithitsownr .local_sum,collectsr .local_sumvaluesforeachofits
i i j
neighbourr andstoresitinthememory.Withinthenext∆·logλrounds,r meetsits
j i
neighbouragentsr again to check if they havecollected any new local_sum values
j
(possiblyfromtheirownneighbour).r againstoresanynewlocal_sumrecord(ofits
i
neighbour’sneighbour)thatitreceivesthroughitsneighbourr inthecurrentphase.By
j
theendofthesecondphase,r hastheinformationofthelocal_sumofalltheagents
i
thatareatadistanceof2−hopsfromit.Now,withthecompletionofD(thediameter
ofthegraphG)such∆·logλrounds,eachagentr nowhasthelocal_sumrecordof
i
everyagentin G. ThenumberoftrianglesinG isfinallycalculatedbyeachagentby
summingupthenlocal_sumvaluesthattheyhavegatheredanddividingitby6.
Lemma4. Letr andr betwoagentsatadistanceofdhopsfromeachother.Then,
i k
thevalueofr .local_sumcanbecommunicatedtor withind·O(∆·logλ)rounds.
k j
Proof. Since r and r are at a distance of d hops from each other, there exists
i k
a sequence of agents (nodes) (r ,r ,r ,...,r ,r ) from r to r . In the first
i i1 i2 id−1 k i k
O(∆·logλ)rounds,r cancommunicatewithr togetthevalueofr .local_sum.In
i i1 i1Agent-BasedTriangleCountinganditsApplicationsinAnonymousGraphs 11
themeanwhile,r also collectsthevalueofr .local_sumin thesameO(∆·logλ)
i1 i2
round. Therefore, in the second sub-phase of O(∆ ·logλ) rounds, when r commu-
i
nicateswithr again,r receivesthevalueofr .local_sumthroughr .Continuing
i1 i i2 i1
in a similar way, r is guaranteed to receive the value of r .local_sum from r at a
i k k
distanceofdhopsthroughtheagentsr ,r ,...,r bytheendofd·O(∆·logλ)
i1 i2 id−1
rounds.
LetDdenotethediameterofthegraphG.SinceanytwoagentsinGarelocatedat
adistanceofatmostDhops,thefollowinglemmafollowsfromLemma4.
Lemma5. AftertheendofPhase3,whichtakesO(D·∆·logλ)rounds,eachagent
r has the complete record of local_sum values of every agent in G. Here, D is the
i
diameterofthegraphG.
IfthediameterDofthegraphisunknown,Dcouldbereplacedbyn.
Lemma6. ThenumberoftrianglesingraphGisgivenby 1·Σ (r .local_sum),where
6 i i
thesumrunsoverallthenagentsofG.
Proof. Thenumberoftriangleswithagentr asavertexisgivenby 1 ·r .local_sum.
i 2 i
Now since each triangle is counted once for every vertex it has, the total number of
trianglesinGisgivenby 1 ·Σ 1 ·(r .local_sum).
3 i2 i
Notation: We shall denote the number of triangle containing the vertex(node)v
andthetotalnumberoftrianglesinGwithT(v)andT(G),respectively.Foranodev
witharobotr onit,weuser andvinterchangeablytodenotethenode.
i i
Atthe endofthisphase,eachagenthasthe valueofthe numberoftrianglesin G
i.e.,T(G). Inthefollowingtheorem,weassemblethelistofresultswegotduringthe
3phases.
Theorem1. LetGbeannnodearbitrary,simple, connectedgraphwith amaximum
degree ∆ and diameter D. Let n mobile agents with distinct IDs in the range [0,nc]
with the highestagentID λ ∈ [0,nc], where c is constant,be placedateachofthe n
nodesofGinadispersedinitialconfiguration.Then,
1. Eachagentr cancalculatethenumberoftriangleswithr asavertexi.e.,T(r )
i i i
inO(∆·logλ)rounds.
2. Eachagentr cancalculatethenumberoftrianglesbasedoneachofitsadjacent
i
edgesinO(∆·logλ)rounds.
3. Eachagentr cancalculatethenumberoftrianglesinG,T(G),inO(D·∆·logλ)
i
rounds.
5 Applications: Truss Decomposition, Triangle Centrality and
Local Clustering Coefficient
Inthissection,weshowsomenovelapplicationsofourtriangle-countingalgorithmvia
mobileagentsinananonymousgraph.12 P.K.Chandetal.
5.1 TrussDecomposition
We first use the techniques from Section 4 to identify a k-truss sub-graphof a given
graphG using mobileagents, whenit exists. A sub-graphT of G is called a k-truss
k
if every edge of T is a part of at least k −2 triangles i.e, each edge in T ⊂ G is
k k
supportedbyatleastk−2trianglesinT .
k
Inouralgorithm,weusethepopulartrussdecompositionmethodtofirstcalculate,
whatiscalled,trussnessvalueforeachedge.Thetrussnessvaluesarethenusedto
constructthek-trusssub-graphforanyvalueofk.
Before we explain our algorithms in detail, we formally define support, k-truss
andtrussness.
Definition1 (support).ForagivengraphG(V,E),thesupportofanedgee ∈ E is
thenumberoftrianglesinGthatcontaine.
Definition2 (k-truss).k−truss isdefinedasthelargestsub-graphT ofG(V,E)in
k
whicheveryedgehassupport≥k−2withrespecttoT .Incase,T isanullgraph,
k k
wesayk-truss forGdoesnotexist.
Definition3 (trussness).The trussnessofanedgee, is definedasthe maximumk
suchthatebelongstoT butdoesnotbelongtoT .
k k+1
Algorithm for Truss Decomposition: Let us now propose an algorithm for mobile
agents to evaluate trussness for each edge of the graph G(V,E). The algorithm is
basedontheparalleltrussdecompositiondescribedin[55].Thetrussnessvaluesde-
termineapartition(thusanequivalencerelation)onE,whereeachclasshavetheedges
of G with the same trussness value. Let t k denote the equivalence class of edges
having trussness = t . To find the k-truss, T we construct a sub-graph of G with
k k
edges from the equivalence classes t k,t k+1,...,t max, where t
max
is the maximum
trussnessofanyedgeinG.Mathematically,T
k
= ∪t i=m kaxt i.Thereforebycomputing
the trussness foreach edgein G(V,E), we obtain a partition(equivalenceclasses) of
E,therebyobtainingthek-trussesofGforanykbytakingtheunionoftheequivalent
classes.Therefore,thek-trussdecompositionofagraphisequivalenttocomputingthe
trussnessofeachedgeinthegraph.
trussness values of each edge in G can be computed efficiently using existing
serialandparallelalgorithms.Theserialtrussdecompositionalgorithmfirstcalculates
support for each edge and iteratively removes a single edge each time until all the
edges of the graph are removed. Each time, the edges are sorted in ascending order
andtheedgewiththelowestsupportisremoved.Theremovededge(saye)keepsits
finalsupport+2asitstrussnessvalue.Oncetheeisremoved,thesupportvalueof
theedgesthatformedthetrianglewitheisre-evaluated.Theremainingedgesareonce
againsortedinorderbeforerunninganotherpass.Theneedtosortthe edgesin order
ofsupportmakesthealgorithminherentlysequential.
In the parallel version of the algorithm, the sorting condition is relaxed with the
use of h−index updating.For a set of integersS, the h−indexof S is defined as
thelargestnumberh suchthatthereare atleasthelementsinS thatare equalto and
greaterthanh.Thetrussnessofanedgeisrelatedtoh−index,for,thetrussnessAgent-BasedTriangleCountinganditsApplicationsinAnonymousGraphs 13
of an edge e can be thought of as the largest k such that it is contained in at least k
triangleswhoseedgeshaveatrussnessvalueofatleastk.Inthealgorithm,eachedge
einGisinitializedtoitssupportasthefirstapproximationtoitstrussness.Now,the
supportvaluesofalltriangleswitheasanedgearestoredinasetLanditsh−indexis
computed.Ateachiteration,theh−indexofeisupdatedtothesmallestofitscurrent
valueandtheh−indexofL.Thealgorithmiterativelyupdatesanedge’sh−indexby
computingtheh−indexofalledgesthatsupportit,untilachievingconvergencewhen
noupdateswouldhappen.Thefinalh−indexofeachedgebefore,nofurtherupdates
happen,providethetrusnessvalueforeachedge.
However,mobileagentsbringuniquechallenges.Theagentsdonothaveanyglobal
knowledgeofthetopologyofthenetworkandcanonlycommunicatewithotheragents
if they are located in the same node (or they are in sufficientproximity).Further,the
movementoftheagents,althoughsynchronous,doesnothaveanycentralizedcontrol.
Theselimitationsposeuniquechallengesinconstructingalgorithmsfortrussdecompo-
sition.We,therefore,engineertheexistingparallelversion[55]ofthetrussdecomposi-
tionalgorithmtoadapttoourmobileagentmodel.
Tostartwith,eachofthenagents,r hasthefollowingvariables:
i
1. r .ID-storestheIDstringoftheagentr .Asperourassumption,agentshaveID
i i
in the range [0,nc], where c is an arbitrary but fixed constant, so r .ID requires
i
O(logn)bitsofstoragespace.
2. r .edge_set-tostoretheedgesincidentonaparticularnodecontainingr .r stores
i i i
onlyedges(r ,r ),wherer > r .edge_setrequiresO(∆)bitofmemory,where
i j j i
∆ is the highest degree of a node in G. The orderingof edges ensures that each
edgebecomesassociatedwithexactlyoneagent.
3. h - a variableassociated with each edgein edge_set;initially storesthe support
ofeachedge.hisnextupdatedaccordingtotheh−indexvaluesasthealgorithm
progresses, as described earlier. The final h values provide the trussness for a
particularedge.
4. L - also associated with each edge in edge_set. L is used to store the values
min{h(e′),h(e′′)}forforeachtriangle(e,e′,e′′)containinge.
5. N - is used to temporarilystore the edges e′,e′′ for each triangle (e,e′,e′′) con-
taininge.
6. scheduled - to identify the edges in the edge_set that need further updating in
consequentroundsofthealgorithm.Initially,everyedgeinedge_setisscheduled
(true).
7. r .change - initially assigned 0. If no more edges in r .edge_set are scheduled,
i i
r .changebecomes1.
i
OuralgorithmformobileagentsrunsinPhasesasdescribedbelow,indetail.
Phase 1 (Registering neighbour agents, adjacent edges and port numbers) With
each nodeof G hosting a distinctagent, each agentfirst visits and registersits list of
neighbours. Due to a lack of movement synchronisation, the agents follow the exact
protocolasdescribedinPhase1ofSection4toregistertheneighbours,theportswhich
leadtotherespectiveneighboursandtherespectiveedges.Toavoidinconsistency,the
agentsmaintaintherecordoftheedgesinaspecificorder.Anagentr onlystoresthe
i14 P.K.Chandetal.
recordofanedge(r ,r )onlyifr isaneighbourofr andr .ID >r .ID.Thisgives
i j j i j i
atotalorderingontheedges.ThisphasetakesO(∆·logλ)roundstocomplete.Nowthe
agentsbeginthe nextphase ofcalculatingsupport foreach edge.With the execution
ofPhase1,edge_setgetsrecorded.
Phase 2 (support calculation and initial h initialization) The agents now calcu-
late the support for each edge. To do this, the agents use a similar methodology to
the one used in Phase 2 of Section 4. The agentsgo to each of their neighboursonce
again.Letusassume,atsomepointoftimeduringthealgorithm,anagentr meetsits
i
neighbourr . r then checksthe numberof commonneighbourswith r and records
j i j
thecountintor .support(r ,r )(wehaveassumedthatr .ID > r .ID;otherwiseif
i i j j i
r .ID < r .ID, then the edge (r ,r ) (simultaneously, r .support(r ,r )) does not
j i i j i i j
register in r ’s recordsand in such case, the agentr does nothing.However,in such
i i
case, the edge does register in r ’s record, and r then does the needful in that re-
j j
spect.).SupportcalculationtakesO(∆logλ)rounds,afterwhich,eachagentreceives
its support number.With the executionof this, h value foreach edge in r .edge_set
i
getsinitializedtothesupportoftheparticularedge.
Phase 3 (Iterative h − index up-gradation) With each edge receiving its initial
supportvalue,thealgorithmnowupdateshforeachedgethroughmultipleiterations
ofthisphase.Thephaseiteratestill thechangevalueinanyofthe agentsr remains
i
0andterminatesoncethevalueofchangeineachandeveryagentbecomes1.Ineach
runningphase,eachagentr doesthefollowinginparallel.
i
1. Checksifanyedgeisscheduledforfurtherup-gradationinitsedge_set.Ifno,set
r .change ← 1andstopsexecutingthealgorithmbutremainsactive.r provides
i i
anyinformationwhenrequiredtootheragents.
2. ResetsthesetsLandN.
3. For each edge e in edge_set which is scheduled for up-gradation, L stores
min{h(e′),h(e′′)}foreachtriangle(e,e′,e′′)inG.Toobtainmin{h(e′),h(e′′)},
r must communicate with its neighbouring agent. For example, consider the
i
edge (r ,r ) with r < r , stored in r .edge_set. Also, consider another agent
i j i j i
r (r < r < r ) stationed on another node such that (r ,r ,r ) forms a tri-
p p i j i j p
angle. Let e = (r ,r ),e′ = (r ,r ),e′′ = (r ,r ). Now for r to calculate
i j p i p j i
min{h(e′),h(e′′)},r mustvisitr .Sincethemovementoftheagentsisnotcen-
i p
tralised, r must execute "Know the Neighbourhood" (Phase 1, Sec. 4.1) which
i
takesadditionalO(∆logλ)rounds,inordertoguaranteethatr meetsr .Along
i p
with the set L, the set N is also updated. Let e = (r ,r ). For each triangle
i j
(e,e′,e′′) the agents add e′,e′′ to their respective N sets. Now, since each edge,
e′ ore′′ isassociatedwithauniqueagent,aninvocationof"KnowtheNeighbour-
hood"(Phase1,Sec.4.1)isrequiredtoinformthecorrectagentassociatedwitha
particularedgesothattheagentcanscheduletheparticularedgeinthenextstepif
required.
4. r nowcomputestheh−indexforthesetL.Ifthe calculatedh−indexisless
i
thanh(e),then,ealongwiththeedgese′ ∈N withh−index(L)<h(e′)≤h(e)
is further scheduled for up-gradationin the next iteration and h(e) is updated toAgent-BasedTriangleCountinganditsApplicationsinAnonymousGraphs 15
thenewh−index.Otherwise,eisunscheduledanditscurrenthvaluegivesthe
trussnessattheendofthealgorithm(ifnotupdatedfurtherduringthealgorithm).
5. Basedonwhetherthereareschedulededgesinr .edge_set,r .changeupdatesits
i i
valueifnecessary.
6. CheckingforTermination:Eachagent,afterhavingevaluatedthechangevalue
forthecurrentphase,communicateswitheachoftheotheragentstocheck,ifthe
algorithm is ready for termination. The agent sends the change values to every
agentinmultiplerounds.Tocommunicate,eachagentstartsbyvisitingitsimmedi-
ateneighbours.Inthefirstround,eachagentsendsthechangetoitsneighbour.In
thesecondround,thesamechangevalueispropagatedtothe2-hopneighbourand
soon.BytheendofDrounds,eachagentreceiveseverychangedvaluefromevery
otheragent.Now,theagentscalculatethebinaryproductofallthechangevalues
received.Ifthebinaryproductofthechangevalueresultsin1(alltheagentsmust
getthesamebinaryproductvalue),theagentsterminatethealgorithm.Otherwise,
theagentsrerunPhase3again,tilltheproductbecomes1.
Lemma7. Algorithm5.1takesO(m∆Dlogλ)roundstoterminate
Proof. Phase 1 and Phase 2 takes O(∆logλ) rounds, as shown in Lemma 2 and
Lemma3.IneachexecutionofPhase3,theagentneedstocommunicatewithitsneigh-
bour to update its trussness(h) values taking O(∆logλ) rounds. Finally, to check
fortermination,eachagentpropagatesthechangevaluetoeveryotheragent,needing
O(D∆logλ)rounds.
Atworst,thealgorithmmayupdatethe h−indexvalueofoneedgeduringeach
executionofPhase3.Also,theup-gradationoftheh−indexvalueofanedgeisequiv-
alenttothefactthatthetrianglecount(support)ofthatparticularedge(andpossibly
someotheredges)inGhasbeendecreased.Therefore,eachtimeanh−indexofan
edgeisupdated(itcanonlydecrease),thegraphGlosesatleastoneedge.Therefore,
thealgorithmmayneedtoexecutePhase3,mtimesbeforetermination.ThereforeAl-
gorithm5.1takesO(∆logλ)+m·(O(∆logλ)+O(D∆logλ)) = O(m∆Dlogλ)
roundstoexecute.
Theorem2. LetGbeann-nodearbitrary,simple,connectedgraphwithamaximum
degree ∆ and diameter D. Let n mobile agents with distinct IDs in the range [0,nc]
with the highest agent ID λ ∈ [0,nc], where c is constant, be placed at each of the
nnodesofGinadispersedinitialconfiguration.Then,the TRUSS DECOMPOSITION
PROBLEM for G can be solved by the mobile agents in O(m∆Dlogλ) rounds with
O(∆·logn)bitsofmemoryperagent.
5.2 TriangleCentrality
TheconceptofTriangleCentralitywasintroducedin [9]byPaulBurkhardt.Thecon-
ceptmaybeusefulforfindingimportantverticesinagraphbasedontheconcentration
oftrianglessurroundingeachvertex.Animportantnodeintrianglecentralityisatthe
centreofmanytriangles,andthereforeitmaybeinmanytrianglesornoneatall.Inthis
section, we employ n mobile agents, each with a distinct ID starting at each distinct16 P.K.Chandetal.
node of an arbitrarily connected anonymousgraph to compute the triangle centrality
foreachnodeofthegraph.
Mathematically,TriangleCentrality,TC(v)ofanodev ∈ Gisformulatedin [9]
as:
1P T(u)+P T(w)
TC(v)=
3 u∈NT+(v) w∈N(v)\NT(v)
T(G)
where,whereN(v)istheneighborhoodsetofv,NT(v)isthesetofneighborsthatare
intriangleswithv,andN+(v)istheclosedsetthatincludesv.T(v)andT(G)denote
T
therespectivetrianglecountsbasedonvandtotaltrianglecountinG.Mathematically,
N(v) = {u : (u,v) ∈ E(G)}, NT(v) = {u ∈ N(v) : N(u)∩ N(v) 6= φ} and
N T+(v) = {v}∪NT(v). Now, we outline our algorithm that computes TC(v) for a
nodev ∈Gusingthemobileagentsthatrunsinthese3phases:
1. ComputingT(v)andT(G)-We usethetrianglecountingalgorithmformobile
agentsdescribedinSection4toevaluatethenumberoftrianglesinvolvingthenode
v,T(v)andthetotalnumberoftrianglesinG,T(G).Theexecutionofthisphase
takesO(∆logλ)+O(D∆logλ) = O(D∆logλ)rounds[Lemma3,6].Withthe
completionofthisphase,theagentsbeginthenextphase.Notethatifthecountof
thetotalnumberoftrianglesisavailableapriori,onlyT(v)needstoevaluated.
2. ComputingN(v),N T+(v)andNT(v)-N(v),theneighboursofvcanberecorded
inO(∆logλ)roundsbytheagents(Lemma2).Afterweallowtheagentstorecord
theirneighbourhoodinthefirstO(∆logλ)rounds,inthesubsequentO(∆logλ)
rounds,theagentscannowmeettheirneighboursonceagain,withthistime,learn-
ingaboutN(u)foreachneighbouragentuofv.Nowtheagentfromv communi-
cateswitheachu∈N(v)toevaluatethesetNT(v).Similarly,theagentscanalso
buildthesetN+(v).Now,astheagentmeetswitheachofitsneighboursu∈N(v),
T
itcumulativelyevaluatesthesumss=P andx=P simulta-
u∈NT+(v) u∈N(v)T(v)
neously.FinallythesumP = s−x+T(v)isevaluated.Thisstep
w∈N(v)\NT(v)
takesO(∆logλ)rounds.
3. ComputingTC(v)-WiththevaluesofP T(u),
u∈NT+(v)
P T(w)andT(G)havenowbeenobtained,theagentatv cannow
w∈N(v)\NT(v)
evaluate
TC(v)=
1 3P u∈NT+(v)T(u)+Pw∈N(v)\NT(v)T(w)
T(G)
Tothisend,wehavethefollowingtheorem.
Theorem3. Let G be an n nodearbitrary, simple connectedgraphwith a maximum
degree ∆ and diameter D. Let n mobile agents with distinct IDs in the range [0,nc]
withthehighestIDλ,wherecisanarbitraryconstant,beplacedateachnnodeofG
inaninitialdispersedconfiguration.Then,thetrianglecentralityofeachnodev ∈ G
canbecalculatedinO(∆logλ)roundsifT(G)isknownandinO(D∆logλ)rounds,
ifT(G)isunknown.T(G)isthetotaltrianglecountofthegraphG.
5.3 LocalClusteringCoefficient
The local clustering coefficientof a node in a graphis used to quantifyhow close its
neighboursaretobeingaclique(completegraph)i.e.,howwellconnectedthenetworkAgent-BasedTriangleCountinganditsApplicationsinAnonymousGraphs 17
isaroundaparticularnode.Mathematically,thelocalclusteringcoefficient(LCC)ofa
nodev ∈ GcanbewrittenasLCC(v) = T(v) ,(from [45]).Hereδ(v)denotes
δ(v)(δ(v)−1)
the degree of the node v. This metric can be easily calculated using mobile agents.
T(v)foranodevcanbecalculatedinO(∆logλ)rounds[Lemma3].Theagentwhich
alreadyknowsδ(v)atvcannowevaluateLCC(v)usingtheformula.
Theorem4. Let G be an n nodearbitrary, simple connectedgraphwith a maximum
degree ∆ and diameter D. Let n mobile agents with distinct IDs in the range [0,nc]
with the highest ID λ, where c is an arbitrary constant, be placed at each n node of
Ginaninitialdispersedconfiguration.Then,theLocalClusteringCoefficientofeach
nodev ∈G,LCC(v)canbecalculatedinO(∆logλ)rounds.
6 Conclusionand Future Work
In this paper,we introducedalgorithmsfor countingtriangles via mobile agents. The
agentsenumeratedthetrianglesbasedonnodesandedges.Finally,thetotalnumberof
trianglesinthegraphwascalculated.We usedthetriangleenumerationalgorithmand
appliedittotheTrussDecompositionProblem,andtocalculatetheTriangleCentrality
andLocalClusteringCoefficientforeachnode.
Itwouldinterestingtoestablishlowerboundsfortheabovecomputationsinterms
of both time complexity and memory per robot. Also, a lower bound on the number
ofrobotsusedtoexecutetheabovealgorithmcanbeaninterestinginvestigation.Fur-
thermore,theefficiencyoftheprobleminthefaultyrobotmodelcanbeanothertaskto
considerinfuture.
References
[1] Abdullah,W.M., Awosoga,D.,Hossain,S.:Efficientcalculationoftrianglecen-
tralityinbigdatanetworks.In:HPEC(2022)
[2] Akbas, E., Zhao, P.: Truss-based community search: a truss-equivalence based
indexingapproach.ProceedingsoftheVLDBEndowment(2017)
[3] Arifuzzaman,S.,Khan,M.,Marathe,M.:Patric:Aparallelalgorithmforcounting
trianglesinmassivenetworks.In:CIKM(2013)
[4] Arifuzzaman, S., Khan, M., Marathe, M.: Fast parallel algorithms for counting
andlistingtrianglesinbiggraphs.ACMTrans.Knowl.Discov.Data(2019)
[5] Bar-Yossef, Z., Kumar, R., Sivakumar, D.: Reductions in streaming algorithms,
withanapplicationtocountingtrianglesingraphs.In:SODA(2002)
[6] Becchetti, L., Boldi, P., Castillo, C., Gionis, A.: Efficient semi-streaming algo-
rithmsforlocaltrianglecountinginmassivegraphs.In:SIGKDD(2008)
[7] Brandes,U.:Networkanalysis:methodologicalfoundations,vol.3418.Springer
Science&BusinessMedia(2005)
[8] Burkhardt,P.:Trianglecentrality.arXivpreprintarXiv:2105.00110(2021)
[9] Burkhardt,P.:Trianglecentrality(2021)
[10] Chand,P.K.,Kumar,M.,Molla,A.R.,Sivasubramaniam,S.:Fault-tolerantdisper-
sionofmobilerobots.In:CALDAM(2023)18 P.K.Chandetal.
[11] Chand, P.K., Molla, A.R., Sivasubramaniam, S.: Run for cover: Dominating set
viamobileagents.In:ALGOWIN(2023)
[12] Chen,P.L.,Chou,C.K.,Chen,M.S.:Distributedalgorithmsfork-trussdecompo-
sition.In:IEEEBigData2014(2015)
[13] Chiba,N.,Nishizeki,T.:Arboricityandsubgraphlistingalgorithms.SIAMJour-
naloncomputing(1985)
[14] Cohen.,J.:Trusses:Cohesivesubgraphsforsocialnetworkanalysis.(2008)
[15] Cong, Y., Gu, C., Zhang, T., Gao, Y.: Underwater robot sensing technology: A
survey.FundamentalResearch(2021)
[16] Das,S.:Graphexplorationswithmobileagents.DistributedComputingbyMobile
Entities:CurrentResearchinMovingandComputing(2019)
[17] Dereniowski,D.,Disser,Y.,Kosowski,A.,Paja˛k,D.,Uznan´ski,P.:Fastcollabo-
rativegraphexploration.InformationandComputation(2015)
[18] Eckmann,J.P.,Moses,E.:Curvatureofco-linksuncovershiddenthematiclayers
intheworldwideweb.Proceedingsofthenationalacademyofsciences(2002)
[19] El-Sayed,A.M.,Scarborough,P.,Seemann,L.,Galea,S.:Socialnetworkanalysis
andagent-basedmodelinginsocialepidemiology.EpidemiologicPerspectives&
Innovations(2012)
[20] Esfahani,F.,Daneshmand,M.,Srinivasan,V.,Thomo,A.,Wu,K.:Trussdecom-
positiononlargeprobabilisticnetworksusingh-index.In:SSDBM(2021)
[21] Ghosh,S.:Improveddistributed-memorytrianglecountingbyexploitingthegraph
structure.In:HPEC(2022)
[22] Ghosh,S.,Halappanavar,M.:Tric:Distributed-memorytrianglecountingbyex-
ploitingthegraphstructure.In:HPEC(2020)
[23] Gonzalez, J.E., Low, Y., Gu, H., Bickson, D., Guestrin, C.: Powergraph: Dis-
tributedgraph-parallelcomputationonnaturalgraphs.In:OSDI(2012)
[24] Huang,X.,Cheng,H.,Qin,L.,Tian,W.,Yu,J.X.:Queryingk-trusscommunityin
largeanddynamicgraphs.In:SIGMOD(2014)
[25] Huang,X.,Lu,W.,Lakshmanan,L.:Trussdecompositionofprobabilisticgraphs:
Semanticsandalgorithms.In:SIGMOD(2016)
[26] Itai,A.,Rodeh,M.:Findingaminimumcircuitinagraph.In:Proceedingsofthe
ninthannualACMsymposiumonTheoryofcomputing(1977)
[27] Jia,S.,Gao,L.,Gao,Y.,Wang,H.:Anti-trianglecentrality-basedcommunityde-
tectionincomplexnetworks.IETsystemsbiology(2014)
[28] Kabir, H., Madduri, K.: Shared-memory graph truss decomposition. In: HiPC
(2017)
[29] Katunka,A.M.,Yan,C.,Serge,K.B., Zhang,Z.:K-trussbasedtop-communities
searchinlargegraphs.In:CBD(2017)
[30] Kshemkalyani, A., Ali, F.: Fast graph exploration by a mobile robot. In: AIKE
(2018)
[31] Kshemkalyani,A.D.,Ali,F.:Efficientdispersionofmobilerobotsongraphs.In:
ICDCN(2019)
[32] Kshemkalyani,A.D., Molla, A.R., Sharma,G.: Fast dispersionof mobilerobots
onarbitrarygraphs.In:ALGOSENSORS(2019)
[33] Kshemkalyani,A.D.,Molla,A.R.,Sharma,G.:Dispersionofmobilerobotsusing
globalcommunication.J.ParallelDistributedComput.(2022)Agent-BasedTriangleCountinganditsApplicationsinAnonymousGraphs 19
[34] Kshemkalyani, A.D., Sharma, G.: Near-optimal dispersion on arbitrary anony-
mousgraphs.In:OPODIS(2021)
[35] Latapy, M.: Main-memory triangle computations for very large (sparse (power-
law))graphs.Theoreticalcomputerscience(2008)
[36] Lee,J.,Shin,S.,Park,M.,Kim,C.:Agent-basedsimulationanditsapplicationto
analyzecombateffectivenessinnetwork-centricwarfareconsideringcommunica-
tionfailureenvironments.MathematicalProblemsinEngineering(2018)
[37] Li,F.,Bader,D.A.:A graphblasimplementationoftrianglecentrality.In:HPEC
(2021)
[38] Lü,L.,Zhou,T.,Zhang,Q.M.,Stanley,H.E.:Theh-indexofanetworknodeand
itsrelationtodegreeandcoreness.NatureCommunications(2016)
[39] Molla,A.R.,Mondal,K.,MosesJr.,W.K.:Efficientdispersiononananonymous
ringinthepresenceofweakbyzantinerobots.In:ALGOSENSORS(2020)
[40] Molla, A.R., Mondal, K., Moses Jr., W.K.: Byzantine dispersion on graphs. In:
IPDPS(2021)
[41] Park,H.M.,Silvestri,F.,Kang,U.,Pagh,R.:Mapreducetriangleenumerationwith
guarantees.In:CIKM(2014)
[42] Pattanayak,D.,Bhagat,S.,GanChaudhuri,S.,Molla,A.R.:Maximalindependent
setviamobileagents.In:ICDCN(2024)
[43] Pattanayak,D.,Sharma,G.,Mandal,P.S.:Dispersionofmobilerobotstolerating
faults.In:ICDCN(2021)
[44] Pramanick,S.,Samala,S.V.,Pattanayak,D.,Mandal,P.S.:FillingMISverticesof
agraphbymyopicluminousrobots.In:ICDCIT(2023)
[45] Sanders,P.,Uhl,T.N.:Engineeringadistributed-memorytrianglecountingalgo-
rithm.In:IPDPS(2023)
[46] Sariyuce,A.E.,Seshadhri,C.,Pinar,A.:Parallellocalalgorithmsforcore,truss,
andnucleusdecompositions(2017)
[47] Schank,T.:Algorithmicaspectsoftriangle-basednetworkanalysis(2007)
[48] Shun, J., Tangwongsan,K.: Multicore triangle computationswithout tuning. In:
IEEEICDE(2015)
[49] Sudo,Y.,Baba,D.,Nakamura,J.,Ooshita,F., Kakugawa,H.,Masuzawa,T.:An
agent exploration in unknown undirected graphs with whiteboards. In: WRAS
(2010)
[50] Suri,S.,Vassilvitskii,S.:Countingtrianglesandthecurseofthelastreducer.In:
WWW(2011)
[51] Tsourakakis,C.E., Drineas,P.,Michelakis,E.,Koutis, I.,Faloutsos,C.:Spectral
countingoftrianglesviaelement-wisesparsificationandtriangle-basedlinkrec-
ommendation.SocialNetworkAnalysisandMining(2011)
[52] Voegele, C., Lu, Y.S., Pai, S., Pingali, K.: Parallel triangle counting and k-truss
identificationusinggraph-centricmethods.In:HPEC(2017)
[53] Wang,J.,Cheng,J.:Trussdecompositioninmassivenetworks.Proc.VLDBEn-
dow.(2012)
[54] Watts,D.J.,Strogatz,S.H.:Collectivedynamicsof‘small-world’networks.Nature
(1998)
[55] Wu,J.,Goshulak,A.,Srinivasan,V.,Thomo,A.:K-trussdecompositionoflarge
networksonasingleconsumer-grademachine.In:ASONAM(2018)20 P.K.Chandetal.
[56] Zhuge,C.,Shao,C.,Wei,B.:Anagent-basedspatialurbansocialnetworkgener-
ator:Acasestudyofbeijing,china.Journalofcomputationalscience(2018)