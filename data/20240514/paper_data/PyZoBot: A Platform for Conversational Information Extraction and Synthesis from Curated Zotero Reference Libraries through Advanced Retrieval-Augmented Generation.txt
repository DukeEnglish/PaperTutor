PyZoBot: A Platform for Conversational Information Extraction and Synthesis
from Curated Zotero Reference Libraries through Advanced Retrieval-Augmented
Generation.
1,2Suad Alshammari, Pharm.D., 1,3Walaa Abu Rukbah, Pharm.D., 1,4Lama Basalelah, Pharm.D.,
1,5Ali Alsuhibani, Pharm.D., 1Dayanjan S. Wijesinghe, Ph.D.
1 Virginia Commonwealth University School of Pharmacy, Richmond, Virginia USA.
2 Department of Clinical Pharmacy, Faculty of Pharmacy, Northern Border University, Rafha
91911, Saudi Arabia
3Faculty of Pharmacy, University of Tabuk, Saudi Arabia
4Faculty of Pharmacy, Imam Abdulrahman Bin Faisal University, Saudi Arabia
5Department of Pharmacy Practice, Unaizah College of Pharmacy, Qassim University, Unaizah,
Saudi Arabia.
Abstract:
The exponential growth of scientific literature has resulted in information overload, presenting
significant challenges for researchers attempting to navigate and effectively synthesize relevant
information from a vast array of publications. In this paper, we explore the potential of merging
traditional reference management software with advanced computational techniques,
specifically Large Language Models (LLMs) and Retrieval-Augmented Generation (RAG), to
address these challenges. We introduce PyZoBot, an AI-driven platform developed using
Python that incorporates Zotero’s reference management capabilities alongside OpenAI’s
sophisticated LLMs. PyZoBot is designed to streamline the extraction and synthesis of
knowledge from extensive human curated scientific literature databases. Our work showcases
PyZoBot’s proficiency in handling complex natural language queries, integrating and
synthesizing data from multiple sources, and meticulously presenting references to uphold
research integrity and facilitate further exploration. By harnessing the combined power of LLMs,
RAG, and the expertise of human researchers through a curated library of pertinent scientific
literature, PyZoBot offers an effective solution to manage the deluge of information and keep
pace with rapid scientific advancements. The development and implementation of such
AI-enhanced tools promise to significantly improve the efficiency and effectiveness of research
processes across various disciplines.
Keywords: Reference Management Software, Large Language Models (LLMs), Information
Overload, Literature Review, Artificial Intelligence, Retrieval-Augmented Generation (RAG).Introduction:
Information overload has become a pervasive problem in today's digital age, as
individuals and organizations struggle to keep pace with the exponential growth of data and the
constant influx of information from various sources1. The rapid advancement of knowledge and
communication technologies has made it easier to access and share information, but it has also
contributed to the overwhelming volume of data that people must process and manage2. This
issue is particularly pronounced in academic research, where the amount of published literature
has been growing rapidly3. Researchers conducting literature reviews face the challenge of
navigating vast repositories of articles, books, and other sources to identify, evaluate, and
synthesize relevant information4, often spending significant time sifting through irrelevant,
minimally relevant or low-quality sources5. They may struggle to keep up with the latest
developments, overlook important studies, or fail to identify critical gaps and opportunities6. The
multidisciplinary nature of many research topics further compounds the problem, as researchers
must explore and integrate knowledge from various fields and disciplines, each with its own
terminologies, methodologies, and publication practices7,8, making it more challenging to identify
and synthesize relevant information9 .
Large Language Models (LLMs) have emerged as a potential solution to the problem of
information overload in various domains, including literature reviews. By leveraging the power of
LLMs, researchers can automate and streamline various aspects of the literature review
process, such as searching for relevant sources, extracting key information, and generating
summaries and syntheses10. One of the primary advantages of using LLMs in literature reviews
is their ability to quickly process and analyze large volumes of text data. LLMs can be trained on
a massive corpora of scientific literature, allowing them to identify relevant sources, extract key
information, and generate concise summaries of the main findings and conclusions10. This can
significantly reduce the time and effort required by researchers to manually search, read, and
synthesize information from large bodies of literature7,10. Moreover, LLMs can assist researchers
in discovering new connections and insights across different disciplines and domains. By
analyzing patterns and relationships in the text data, LLMs can help identify potential gaps,
inconsistencies, or opportunities for future research, thus facilitating the development of more
comprehensive and innovative literature reviews11.
However, despite their potential benefits, LLMs also have several limitations that should
be considered when applying them to literature reviews. One major concern is the potential for
biases and inaccuracies in the generated output11,12. LLMs are trained on existing text data,
which may contain biases, errors, or outdated information13. As a result, the summaries,
syntheses, or recommendations generated by LLMs may perpetuate these biases or
inaccuracies, leading to flawed or misleading conclusions in the literature review14. Another
limitation of LLMs is their lack of domain-specific knowledge and as of now, somewhat limited
reasoning capabilities13. While LLMs can process and generate text based on patterns in the
training data, they may struggle to capture the nuances, complexities, and context-specific
meanings of scientific literature. This can result in oversimplifications, misinterpretations, or
omissions of critical information in the generated output, which can compromise the quality and
reliability of the literature review10,15 .
Retrieval-augmented generation (RAG) has emerged as a promising approach to
address the limitations of LLMs in the context of information overload and literature reviews16.RAG combines the strengths of LLMs in generating fluent and coherent text with the ability to
retrieve and incorporate relevant information from specified external knowledge sources16. One
of the key advantages of RAG is its ability to retrieve and utilize the most relevant and
up-to-date information from a corpus of internally curated knowledge16,17. In the context of
literature reviews, this means that RAG models can access and incorporate the latest research
findings, methodologies, and insights from a wide range of sources, ensuring that the generated
output is informed by the most current and reliable evidence17. Moreover, RAG models can be
trained to retrieve information from domain-specific knowledge bases, such as scientific
databases, citation networks, or expert-curated ontologies. By leveraging these specialized
sources of information, RAG can capture the nuances, complexities, and context-specific
meanings of scientific literature more effectively than traditional LLMs .
To harness the full potential of RAG in literature reviews, researchers should carefully
consider the design and implementation of RAG models, including the selection of appropriate
retrieval corpora, the development of domain-specific knowledge bases, and the integration of
human feedback and oversight into the generation process16 . By combining the strengths of
RAG enhanced LLM’s with the expertise and critical thinking skills of human researchers, it is
possible to create a more efficient, effective, and reliable approach to managing information
overload associated with research.
One powerful external knowledge source that can be leveraged by RAG models is
Zotero, a popular reference management software that allows researchers to collect, organize,
and share bibliographic data, including articles, books, and other sources18–20 . By integrating
Zotero with RAG models, researchers can access a vast repository of curated and annotated
scientific literature, enabling the models to retrieve the most relevant and up-to-date information
for a given research topic. This approach can potentially mitigate biases, inaccuracies, and lack
of domain-specific knowledge in traditional LLMs, leading to more accurate, comprehensive,
and relevant summaries, syntheses, and recommendations. Moreover, using Zotero provides
greater transparency by explicitly retrieving and citing sources, offering deeper insight into the
reasoning and evidence behind the generated content, facilitating critical evaluation and
validation of the output's quality, trustworthiness, and relevance to specific research objectives.
Materials and Methods:
1- Python: Python is a versatile and widely-used programming language known for its
simplicity, efficiency, and object-oriented approach21,22. It is an interpreted language with
dynamic typing and high-level data structures, making it ideal for various applications across
different platforms. Python's popularity in fields like data science, machine learning, analytics,
and geoprocessing is attributed to its robust standard libraries and ease of use. Moreover,
Python's flexibility, visualization capabilities, and extensive library support make it a preferred
choice for this project.
2- Zotero: Zotero, an open-source reference management software19, is highly valued by a wide
range of academic and professional users for its ability to simplify the collection, organization,
and citation of research materials18. Developed at George Mason University, it plays a significant
role in enhancing scholarly research and writing by streamlining the management of references,
citations, and bibliographies19. One of its key features is the easy collection of references from
various sources such as websites and academic journals, with automatic extraction of citationinformation from web pages and PDFs16,23. The user-friendly interface allows for the
organization of references through folders, tags, and notes, ensuring quick retrieval. Notably,
Zotero excels in generating citations and bibliographies in different styles like APA and MLA,
thereby saving time on formatting16,20. Its integration with popular word processors like Microsoft
Word and Google Docs enables users to directly insert citations and generate bibliographies in
documents, ensuring accuracy and consistency20. Furthermore, its PDF management capability
allows users to attach, organize, and annotate PDFs within the reference library23. Zotero
fosters collaborative research through shared library features, which are essential for research
teams23. Additionally, it offers cloud synchronization for easy access across devices and data
backup, which enhances data security24. Browser extensions for Chrome and Firefox simplify
the process of capturing online references16,25. As an open-source software, Zotero is
continuously improved through community contributions, and its availability on multiple
platforms expands its user base. Its applications are diverse, benefiting academic research,
education, library services, as well as professionals in fields such as legal, medical, and media,
by facilitating the management and citation of a wide range of references.
Build RAG system with vectorstore search:
Building a RAG system has several key steps (figure 1).
Figure 1: Outline of the key components of the RAG architecture, which includes a data source
(PDFs from Zotero library), an embedding model, a vector store, user query input, query
processing, text retrieval, response generation, and user response via the chat interface.
1.Collect and extract source data: Upon execution, PyZoBot initiates the establishment of a
digital interface connection with Zotero by utilizing a designated Application Programming
Interface (API) key for the purpose of authentication. Upon successful connection, it proceeds to
navigate to a preselected library which contains a collection of PDF documents, and
subsequently sends a request to Zotero to systematically list all PDFs housed within the said
library. Zotero, in response to the request, initiates the process of generating a comprehensive
catalog of documents inclusive of crucial metadata. Following this, the system undertakes the
task of methodically downloading each individual PDF document that is listed within the catalog.These downloaded PDF files are then either stored locally on the system or in a specifically
assigned repository for the purpose of facilitating further processing and analysis.
2.Split the source data into smaller chunks:
Recursive Chunking, also known as RecursiveCharacterTextSplitter, is a technique
proposed to enhance machine reading comprehension (MRC) on long texts26. This method
involves chunking lengthy documents into segments that are more likely to contain complete
answers and provide sufficient context around the answers for accurate predictions27,28. By
utilizing reinforcement learning and recurrent mechanisms, Recursive Chunking allows models
to flexibly decide the next segment to process and enables information flow across segments,
improving the model's ability to handle long inputs effectively. This approach contrasts with
traditional methods that chunk texts into equally-spaced segments, potentially missing crucial
information and hindering cross-segment question answering. Recursive Chunking
demonstrates effectiveness in various MRC tasks, showcasing its potential to optimize
information processing in NLP tasks.
The RecursiveCharacterTextSplitter is a tool provided by the langchain library that
intelligently divides text into smaller pieces while preserving the meaning and structure of the
content. It achieves this by splitting the text at specific characters, such as punctuation marks,
while ensuring that paragraphs, sentences, and words remain intact within each chunk. The size
of the chunks is determined by the number of characters, and users can specify an overlap
between adjacent chunks to ensure that the context is not lost during the splitting process. The
characters used for splitting and the chunk size are configurable, giving users control over the
output29,30.
3.Embedding:
In the field of natural language processing (NLP), embedding is a technique that
converts words or phrases into high-dimensional numerical vectors. These vectors are designed
to capture the semantic relationships between words, ensuring that words with similar meanings
have similar vector representations. Embeddings play a crucial role in various NLP tasks31.
For this particular application, the ADA-002 model, a state-of-the-art second-generation
text embedding tool created by OpenAI, was employed. ADA-002 is renowned for its advanced
capabilities in processing and comprehending texts in multiple languages. It outperforms its
predecessors in tasks involving text similarity, demonstrating remarkable efficiency and
cost-effectiveness. With its 1536-dimensional embeddings, ADA-002 provides an unparalleled
level of semantic representation, making it an ideal choice for applications that require a deep
understanding of text and accurate similarity assessments32.
4. Vector Store:
The vector embeddings generated from the text documents were stored in Chroma DB,
an open-source database designed for efficient storage and retrieval of vector representations.
Chroma DB offers a range of similarity search techniques, allowing users to find and retrieve
similar vectors quickly and accurately. One of the key advantages of Chroma DB is its ability tostore the database locally on the machine, providing users with greater control and flexibility
over their data storage and access33.
5. Retriever:
The retriever is a key component in the RAG system, responsible for quickly and
effectively finding relevant documents or data from a large corpus based on a given query. Its
primary task is to scan through the documents and identify those that are most pertinent to the
query at hand.34
In this application, the ContextualCompressionRetriever from LangChain was employed.
This tool is designed to improve document retrieval in language model applications by
prioritizing the relevance of the information to the query. It addresses a common issue in
traditional document retrieval methods, where both relevant and irrelevant information is often
retrieved35. The ContextualCompressionRetriever utilizes the DocumentCompressor abstraction,
which compresses the retrieved documents in a way that aligns with the context of the query.
This can involve either compressing the contents of individual documents or filtering out entire
documents that are not relevant to the query36.
The retriever offers three different retrieval methods through the "search_type" parameter37:
1. "similarity": This method focuses on finding documents that are closely aligned with the
query vector36.
2. "mmr" (Maximal Marginal Relevance): This method balances relevance and diversity in
the results, ensuring that the retrieved documents are not only relevant but also cover a
wide range of information36.
3. "similarity_score_threshold": This method ensures that only documents meeting a
minimum relevance threshold are retrieved, filtering out documents that fall below the
specified threshold.
Each of these methods caters to specific retrieval needs, allowing users to customize the
retrieval process based on their requirements36.
Results:
PyZoBot: PyZoBot, an AI agent implemented with Python and built by combining the vast
resources of Zotero's database, and the cutting-edge language models from OpenAI, is set to
modernize the way scientific literature is managed and analyzed. With its advanced capabilities,
PyZoBot showcases unparalleled efficiency and effectiveness in organizing, processing, and
synthesizing information from scientific publications, ultimately providing users with concise,
accurate, and insightful answers to their queries. To demonstrate the effectiveness of PyZoBot
in managing and synthesizing answers from scientific literature, we conducted a series of user
queries to evaluate the system's performance. The following results highlight PyZoBot's ability to
retrieve relevant information from the Zotero library and provide accurate and concise answers
using OpenAI's language models.
Use Case: Investigating Sickle Cell Disease with PyzoBotThe figure presents a screenshot of PyzoBot in action, exemplifying its capabilities through a
use case on sickle cell disease, a genetic blood disorder. This particular instance demonstrates
how PyzoBot adeptly addresses a complex biomedical query.
Interface Overview (figure 2):
● Question Identification (Red Highlight): The system successfully identifies the user's
question, which inquires about the molecular consequences of the HBB gene mutation
and its role in producing the characteristic sickle shape of red blood cells in sickle cell
disease.
● Answer Synthesis (Blue Highlight): PyzoBot processes the question and synthesizes
a coherent and comprehensive answer. It explains the mutation as a single-nucleotide
polymorphism causing a substitution in the beta-globin chain of hemoglobin, and
delineates the process by which this mutation leads to red blood cell sickling.
● Reference Compilation (Yellow Highlight): The system collates a list of references
that substantiate the synthesized answer, showing its ability to pull from and attribute
information to relevant academic sources.
● Source Documentation (Green Highlight): PyzoBot displays its capacity to trace back
and display excerpts from source documents that were utilized to generate the response.
This not only adds a layer of transparency to the answer provided but also allows users
to delve deeper into the primary literature if desired.
System Capabilities Demonstrated:
● Complex Query Handling: The use case illustrates PyzoBot’s ability to interpret and
respond to intricate queries that require an understanding of genetic mutations and their
phenotypic outcomes.
● Data Integration and Synthesis: PyzoBot showcases its competency in integrating
data from multiple documents and synthesizing this into a single, concise, and
informative response.
● Reference Management: The system proves effective in managing and presenting
references, which is critical for research integrity and further exploration of the topic.Figure 2: PyzoBot interface demonstrating question and answer about Sickle Cell Disease.
Conclusion:
PyzoBot, empowered by the retrieval-augmented generation approach, signifies a significant
step towards more efficient and effective management of the deluge of information that
researchers grapple with. It serves not only as a technological solution but as a catalyst for a
paradigm shift in how literature reviews are conducted, promising a future where researchers
can devote more time to innovation and less to the arduous task of data curation. With the
successful implementation of this system, we anticipate a marked improvement in the quality of
literature reviews and a notable reduction in the time researchers spend on data processing.
PyzoBot stands as a testament to the power of technology when harmoniously blended with
human intellect and creativity, opening new horizons for scientific exploration and knowledge
discovery.
Link to the Code:
● https://github.com/dayanjan-lab/PyZoBot.git
The application is meant to be implemented as a Google Colab Notebook.References:
1. Arnold M, Goldschmitt M, Rigotti T. Dealing with information overload: a comprehensive
review. Front Psychol. 2023;14. doi:10.3389/fpsyg.2023.1122200
2. Eppler M, Mengis J. The Concept of Information Overload: A Review of Literature From
Organization Science, Accounting, Marketing, MIS, and Related Disciplines. Inf Soc.
2004;20:325-344. doi:10.1080/01972240490507974
3. Bornmann L, Mutz R. Growth rates of modern science: A bibliometric analysis based on the
number of publications and cited references: Growth Rates of Modern Science: A
Bibliometric Analysis Based on the Number of Publications and Cited References. Journal of
the Association for Information Science and Technology. 2014;66. doi:10.1002/asi.23329
4. Bornmann L, Haunschild R, Mutz R. Growth rates of modern science: A latent piecewise
growth curve approach to model publication numbers from established and new literature
databases. Published online September 21, 2021. doi:10.48550/arXiv.2012.07675
5. Pautasso M. Ten Simple Rules for Writing a Literature Review. PLOS Computational Biology.
2013;9(7):e1003149. doi:10.1371/journal.pcbi.1003149
6. Alshammari S, Basalelah L, Rukbah WA, Alsuhibani A, Wijesinghe DS. KNIMEZoBot:
Enhancing Literature Review with Zotero and KNIME OpenAI Integration using
Retrieval-Augmented Generation. Published online November 7, 2023.
doi:10.48550/arXiv.2311.04310
7. Wagner G, Lukyanenko R, Pare G. Artificial intelligence and the conduct of literature reviews.
Journal of Information Technology. Published online June 9, 2022:1-18.
doi:10.1177/02683962211048201
8. Kousha K, Thelwall M. Artificial intelligence to support publishing and peer review: A
summary and review. Learned Publishing. 2024;37(1):4-12. doi:10.1002/leap.1570
9. Borgeaud S, Mensch A, Hoffmann J, et al. Improving Language Models by Retrieving from
Trillions of Tokens. In: Proceedings of the 39th International Conference on Machine
Learning. PMLR; 2022:2206-2240. Accessed April 7, 2024.
https://proceedings.mlr.press/v162/borgeaud22a.html
10. Thapa S, Adhikari S. ChatGPT, Bard, and Large Language Models for Biomedical
Research: Opportunities and Pitfalls. Ann Biomed Eng. Published online June 16, 2023.
doi:10.1007/s10439-023-03284-0
11. Alqahtani T, Badreldin HA, Alrashed M, et al. The emergent role of artificial intelligence,
natural learning processing, and large language models in higher education and research.
Res Social Adm Pharm. 2023;19(8):1236-1242. doi:10.1016/j.sapharm.2023.05.016
12. Jungwirth D, Haluza D. Artificial Intelligence and Public Health: An Exploratory Study. Int
J Environ Res Public Health. 2023;20(5):4541. doi:10.3390/ijerph20054541
13. Pan S, Luo L, Wang Y, Chen C, Wang J, Wu X. Unifying Large Language Models and
Knowledge Graphs: A Roadmap. IEEE Trans Knowl Data Eng. Published online 2024:1-20.
doi:10.1109/TKDE.2024.3352100
14. Ge J, Sun S, Owens J, et al. Development of a Liver Disease-Specific Large Language
Model Chat Interface using Retrieval Augmented Generation. medRxiv. Published online
November 10, 2023:2023.11.10.23298364. doi:10.1101/2023.11.10.23298364
15. Eggmann F, Weiger R, Zitzmann NU, Blatz MB. Implications of large language models
such as ChatGPT for dental medicine. J Esthet Restor Dent. 2023;35(7):1098-1102.
doi:10.1111/jerd.13046
16. Chen J, Lin H, Han X, Sun L. Benchmarking Large Language Models in
Retrieval-Augmented Generation. Published online 2023. doi:10.48550/ARXIV.2309.01431
17. Ghodratnama S. Towards Personalized and Human-in-the-Loop Document
Summarization. arXiv.org. Published August 21, 2021. Accessed January 17, 2024.
https://arxiv.org/abs/2108.09443v2
18. Kim T. Building student proficiency with scientific literature using the Zotero referencemanager platform. Biochem Mol Biol Educ. 2011;39(6):412-415. doi:10.1002/bmb.20551
19. Coar JT, Sewell JP. Zotero: Harnessing the Power of a Personal Bibliographic Manager.
Nurse Educator. 2010;35(5):205. doi:10.1097/NNE.0b013e3181ed81e4
20. Ahmed KKM, Al Dhubaib BE. Zotero: A bibliographic assistant to researcher. J
Pharmacol Pharmacother. 2011;2(4):303-305. doi:10.4103/0976-500X.85940
21. Baliyan A, Kaswan KS, Dhatterwal JS. An Empirical Analysis of Python Programming for
Advance Computing. In: 2022 2nd International Conference on Advance Computing and
Innovative Technologies in Engineering (ICACITE). ; 2022:1482-1486.
doi:10.1109/ICACITE53722.2022.9823643
22. Stančin I, Jović A. An overview and comparison of free Python libraries for data mining
and big data analysis. In: 2019 42nd International Convention on Information and
Communication Technology, Electronics and Microelectronics (MIPRO). ; 2019:977-982.
doi:10.23919/MIPRO.2019.8757088
23. Zhang Y. Comparison of Select Reference Management Tools. Medical Reference
Services Quarterly. 2012;31(1):45-60. doi:10.1080/02763869.2012.641841
24. Luan A, Momeni A, Lee GK, Galvez MG. Cloud-Based Applications for Organizing and
Reviewing Plastic Surgery Content. Eplasty. 2015;15:e48.
25. Chen PY, Hayes E, Larivière V, Sugimoto CR. Social reference managers and their
users: A survey of demographics and ideologies. PLoS One. 2018;13(7):e0198033.
doi:10.1371/journal.pone.0198033
26. Gong H, Shen Y, Yu D, Chen J, Yu D. Recurrent Chunking Mechanisms for Long-Text
Machine Reading Comprehension. In: Jurafsky D, Chai J, Schluter N, Tetreault J, eds.
Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics.
Association for Computational Linguistics; 2020:6751-6761.
doi:10.18653/v1/2020.acl-main.603
27. Muszyńska E. Graph- and surface-level sentence chunking. In: He H, Lei T, Roberts W,
eds. Proceedings of the ACL 2016 Student Research Workshop. Association for
Computational Linguistics; 2016:93-99. doi:10.18653/v1/P16-3014
28. Anderson MD, Vilares D. Increasing NLP Parsing Efficiency with Chunking. Proceedings.
2018;2(18):1160. doi:10.3390/proceedings2181160
29. Mishra A. Five Levels of Chunking Strategies in RAG| Notes from Greg’s Video. Medium.
Published January 15, 2024. Accessed January 21, 2024.
https://medium.com/@anuragmishra_27746/five-levels-of-chunking-strategies-in-rag-notes-fr
om-gregs-video-7b735895694d
30. Recursively split by character | 🦜🔗 Langchain. Accessed January 21, 2024.
https://python.langchain.com/docs/modules/data_connection/document_transformers/recursi
ve_text_splitter
31. Dupouy H. Embedding in OpenAI API. Medium. Published June 25, 2023. Accessed
January 22, 2024.
https://medium.com/@basics.machinelearning/embedding-in-openai-api-b9bb52a0bd55
32. Li X, Henriksson A, Duneld M, Nouri J, Wu Y. Evaluating Embeddings from Pre-Trained
Language Models and Knowledge Graphs for Educational Content Recommendation. Future
Internet. 2024;16(1):12. doi:10.3390/fi16010012
33. Hsain A, Housni HE. Large language model-powered chatbots for internationalizing
student support in higher education. Published online March 16, 2024.
doi:10.48550/arXiv.2403.14702
34. Retrievers | 🦜🔗 Langchain. Accessed January 28, 2024.
https://python.langchain.com/docs/modules/data_connection/retrievers/
35. Contextual compression | 🦜🔗 Langchain. Accessed January 28, 2024.
https://python.langchain.com/docs/modules/data_connection/retrievers/contextual_compressi
on/36. Improving Document Retrieval with Contextual Compression. LangChain Blog.
Published April 21, 2023. Accessed January 28, 2024.
https://blog.langchain.dev/improving-document-retrieval-with-contextual-compression/
37. langchain_community.vectorstores.astradb.AstraDB — 🦜🔗 LangChain 0.1.4.
Accessed January 28, 2024.
https://api.python.langchain.com/en/latest/vectorstores/langchain_community.vectorstores.ast
radb.AstraDB.html