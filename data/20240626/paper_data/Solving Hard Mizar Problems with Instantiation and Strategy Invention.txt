Solving Hard Mizar Problems with
Instantiation and Strategy Invention
Jan Jakub˚uv1,2(cid:12)[0000−0002−8848−5537], Mikol´aˇs Janota1[0000−0003−3487−784X],
and Josef Urban1[0000−0002−1384−1613]
1 Czech Technical University in Prague, Czechia
Mikolas.Janota@cvut.cz josef.urban@gmail.com
2 University of Innsbruck, Austria
jakubuv@gmail.com
Abstract. In this work, we prove over 3000 previously ATP-unproved
Mizar/MPTP problems by using several ATP and AI methods, raising
thenumberofATP-solvedMizarproblemsfrom75%toabove80%.First,
we start to experiment with the cvc5 SMT solver which uses several
instantiation-based heuristics that differ from the superposition-based
systems,thatwerepreviouslyappliedtoMizar,andaddmanynewsolu-
tions.Thenweuseautomatedstrategyinventiontodevelopcvc5strate-
gies that largely improve cvc5’s performance on the hard problems. In
particular, the best invented strategy solves over 14% more problems
than the best previously available cvc5 strategy. We also show that dif-
ferent clausification methods have a high impact on such instantiation-
basedmethods,againproducingmanynewsolutions.Intotal,themeth-
ods solve 3,021 (21.3%) of the 14,163 previously unsolved hard Mizar
problems. This is a new milestone over the Mizar large-theory bench-
mark and a large strengthening of the hammer methods for Mizar.
1 Introduction: Mizar, ATPs, Hammers
The Mizar Mathematical Library (MML) [1] is one of the earliest large libraries
of formal mathematics, containing a wide selection of lemmas and theorems
from various areas of mathematics. The MML and the Mizar system [35,2,19]
hasbeenusedasasourceofautomatedtheoremproving(ATP)[46]problemsfor
over 25 years, starting with the export of several Mizar articles done by the ILF
system[11,10].Since2003,theMPTPsystem[52,53]hasbeenusedtoexportthe
MML in the DFG [20] and later TPTP [51] formats. In the earliest (2003) ATP
experiments over the whole library, state-of-the-art ATPs could prove about
40% of these problems when their premises were limited to those used in the
human-written Mizar proofs (the so called bushy3, i.e., easier, mode).
Since2013,afixedversionoftheMML(1147)andMPTPconsistingof57880
problems has been used as a large benchmark for ATPs and related hammer [7]
(large-theory) methods over Mizar [41,28,50,42,21,9]. When using many ATP
3 https://tptp.org/MPTPChallenge
4202
nuJ
52
]IA.sc[
1v26771.6042:viXra2 J. Jakub˚uv et al.
and premise-selection methods, 56.2% of the problems could be proved in [30].
Thiswasrecentlyraisedto75.5%[24],mainlybyusingthelearning-guidedE[48]
(ENIGMA [27,17]) and Vampire [33] (Deepire [49]) systems.
Both E and Vampire are mainly saturation-style superposition systems. In
the recent years, instantiation-based systems and satisfiability modulo theories
(SMT) solvers such as cvc5 [3], iProver [32] and Z3 [12] are however becoming
competitive even for problems that do not contain explicit theories in the SMT
sense [6,13,18]. The problems that they solve are often complementary to those
solved by the superposition-based systems.
1.1 Contributions
In this work, we use instantiation-based methods (Section 2) to solve automati-
cally as many hard Mizar problems as possible. Our main result is that the set
of ATP-provable MPTP problems has been increased by over 3,000, from 75.5%
to80.7%.Alltheseproblemsareprovedbythecvc5systemwhichweimprovein
several ways. First, we use the Grackle system [22] (Section 3) to automatically
invent stronger strategies for MPTP (Section 4.3). Our best strategy outper-
formsthepreviouslybestcvc5strategyby14%andourbest7-strategyportfolio
solves8.8%moreproblemsthanthecorrespondingCASCportfolio(Section4.4).
We also combine strategy development with alternative clausification methods.
This turns out to have a surprisingly high impact on the instantiation-based
system, contributing many new solutions (Section 4.5). Finally, we obtain fur-
ther solutions by modifying the problems with premise selection (Section 4.6).
Ultimately, these methods double the number of the previously ATP-unproved
Mizar problems solved by cvc5 from 1,534 to 3,021. In this context, we consider
a problem proved if there is at least one system that can solve it. We show that
the methods extend to previously unseen Mizar problems coming from newly
added articled in a new version of MML (Section 4.7). We analyze the invented
strategies (Section 5) and discuss several hard Mizar problems proved by them
(Section 6).
2 Instantiation-Based Methods
Incontrasttosaturation-stylesuperpositionsystems,SMTsolvers,namelycvc5,
tackle quantifiers by instantiations, which can be seen as a direct application of
the Herbrand’s theorem. A subformula (∀x ...x ϕ) produces lemmas of the
1 n
form (∀x ...x ϕ) → ϕ[x /t ,...,x /t ], with ϕ quantifier-free and t ground
1 n 1 1 n n i
terms. For example, ∀xR(f(x),c) may be instantiated as (∀xR(f(x),c)) →
R(f(c),c). Existential quantifiers are removed by Skolemization.
This approach consists of a loop alternating between a ground solver and an
instantiation module (Figure 1), where the ground solver perceives quantified
formulas as opaque propositions. After identifying a model for the ground part,
control shifts to the instantiation module. This module generates new instances
of the quantified sub-formulas that are currently meant to hold, strengtheningSolving Hard Mizar Problems 3
SMT
solver
Instantiation
Input satisfiable
formula Ground
Instances
assignment
unsatisfiable
Ground solver
or infinite loop
Fig.1. Schematic of an SMT solver with quantifier instantiation.
the grounded part of the formula. The process stops if the ground part becomes
unsatisfiable, if ever (model-based quantifier instantiation can also lead to sat-
isfiable answers [16]).
Thecvc5solverimplementsseveralinstantiationmethods.Fordecidablefrag-
ments,dedicatedapproachesexist,suchasbit-vectorsorlineararithmetic[44,15,38,5].
Some of those can be seen as syntactic-driven approaches, e-matching [14,36]
or syntax-guided instantiation [39]. Other methods are semantic-driven such
as model-based [16] or conflict-based [45]. A straightforward, but complete, ap-
proach for FOL is enumerative instantiation [29,43], which exhaustively goes
through all ground terms in the ground part. Instantiation itself can also be
guided by ML methods [47].
3 Grackle: Targeted Strategy Invention for cvc5
Grackle[22]isasystemfortheautomatedinventionofaportfolioofsolverstrate-
gies targeted to selected benchmark problems. A user provides a set of bench-
mark problems and Grackle can automatically discover a set of diverse solver
strategies that maximize the number of solved benchmark problems. Grackle
supports the invention of good-performing strategies for several solvers, includ-
ingATPsolversE[48],Vampire[33],Lash[8],andanSMTsolverBitwuzla[37].
Supportforadditionalsolverscanbeeasilyaddedbyprovidingaparametrization
of the solver strategy space, and by implementing a simple wrapper to launch
the solver. In this paper, we extend Grackle to support an SMT solver cvc5 [3],
and we evaluate its capabilities on a first-order translation of Mizar problems.
Grackle is a successor of BliStr [54], with which Grackle shares the core
of the strategy invention algorithm. Grackle, however, generalizes the algorithm
foranarbitrarysolver.BliStr/Gracklestartswithuser-providedsolverstrategies
andinterleavesastrategy evaluation withastrategy invention phase.Duringthe
strategyevaluationphase,allavailablestrategiesareevaluatedonallbenchmark
problems,typicallywithsomehigherresourcelimitT.Thisevaluationpartitions
thebenchmarkproblemsbyindividualstrategyperformance,givingus,foreach
strategy S, the set of problems P where S performs best. The best strategy S
S
is then specialized on problems P in the follow-up strategy invention phase in
S
order to search for a strategy S′ with an increased performance on P . This is
S4 J. Jakub˚uv et al.
achievedbylaunchinganexternalparametertuningsoftware,likeParamILS[23]
orSMAC3[34],onproblemsP withthestrategyS astheinitialstartingpoint.
S
Moreover, a lower resource limit t than in the evaluation phase (T) is imposed
onthesolverduringthetuninginordertoguidethetunertowardsanimproved
performance on P . The core idea, verified in previous research [54,26,25,22], is
S
that improved performance on P will bring about an improvement on other
S
not-yet-solved problems as well. A new evaluation phase then proceeds with the
extended portfolio. Grackle has been extensively described [22] and we refer the
reader therein for a detailed exposition.
To use cvc5 with Grackle requires providing a parametrization of the cvc5
strategy space. A strategy for cvc5 is specified as command line options and
their values. While cvc5 supports more than 400 different options, we select all
options with non-numeric values relevant to problems in the theory of uninter-
preted functions (UF) with quantifiers. This choice is guided by our indented
application on the Mizar benchmark problems which are expressed in the UF
theory with a large number of quantified formulae. The cvc5 solver divides its
optionsbetweenregular andexpert.Henceweconstructtwoparametrizationsof
cvc5 strategy space, one smaller with the regular options only, and the second
one with both regular and expert options. The regular parametrization has 98
parameters and the strategy space covers about 1035 different strategies, while
thefullparametrizationhas168parametersandthespacesizeisabout1058.As
an exception, one of the expert options, namely --cbqi-vo-exp, was used also
in the regular strategy space, to accommodate all the options from the CASC
strategies in both spaces. We automatically extract all the options and their
values from cvc5’s source files decision options.toml, prop options.toml, quanti-
fiers options.toml, smt options.toml, and uf options.toml.4
Grackle additionally allows to express dependencies among options and thus
to describe options that are effective only under specific settings of another
option. We automatically construct some dependencies from common prefixes
of option names, for example, the option --cbqi-mode is applicable only when
the option --cbqi is turned on. While many of the dependencies might be left
unspecified,andwhilemanyoftheoptionsmightbeunrelatedtoourbenchmark
problems, we leave this problem to Grackle and to the underlying parameter
tuner to deal with. In this way, we also test Grackle’s abilities to deal with
redundancies in the strategy space. The cvc5 strategy space for Grackle can be
found in the Grackle repository.5
4 Experiments
4.1 Dataset
OurgoalistoproveasmanyoftheremainingATP-unprovedMPTPproblemsas
possible.Ofthe57,880problems,43,717havebeenproved6 intotalintheprevi-
4 https://github.com/cvc5/cvc5/tree/cvc5-1.1.1/src/options
5 https://github.com/ai4reason/grackle/tree/v0.2/grackle/trainer/cvc5
6 https://github.com/ai4reason/ATP ProofsSolving Hard Mizar Problems 5
ousexperiments[24,30],thus,14,163problemsremaintobeproved.Ourstrategy
invention methods work by gradually developing strategies that are faster and
faster on solvable problems. That is why we extend the set of the 14,163 ATP-
unprovedproblemsbyanother4,283hardproblemsthatwereprovedonlyinthe
latest stages of the previous ATP experiments. We will use their versions with
heuristically minimized premises (using subproblem based minimization [24]) to
increase the chances of the ATP systems. We also remove from this set 1,585
problems for which the minimization was not done yet.7 This results in a set of
16,861hardproblemsonwhichwedevelopourstrategies.Theseproblemsareby
defaultintheFOFformat.Wedenotethemmin below.Lateron(Section4.5),
fof
we apply different clausifications to them. In Section 4.6 we additionally exper-
iment with different premise selections for them.
4.2 Overview of the Experiments
Most of the experiments in this paper are conducted on the set of 16,861 hard
MizarproblemsdescribedinSection4.1.Section4.3focusessolelyondescribing
three Grackle runs performed to develop a robust portfolio of cvc5 strategies
specializedforMizarproblems.Allstrategiesareevaluatedwithatimelimitof30
seconds. Since increasing the time limit can still yield significant improvements,
selected strategies are evaluated in Section 4.4 with a higher time limit, namely
600 seconds. Sections 4.3 and 4.4 use the same version of problems (min ) and
fof
differ only in the time limit. In Section 4.5, we explore different clausification
methods, and in Section 4.6, we investigate various premise selection methods.
ThisimpliesthatSections4.5and4.6usesyntacticallydifferentbutsemantically
equivalent versions of Mizar problems. On the other hand, Section 4.7 attempts
toassesstheoverfittingofGrackle-inventedstrategiesonanewversionofMML,
thus the numbers reported therein are not directly comparable with those in
previous sections since the problem sets differ.
4.3 Experiments with Grackle Strategy Invention
We evaluate8 the Grackle’s ability to invent good-performing strategies for cvc5
on the min benchmark. As a baseline, we consider all 16 strategies used in
fof
the cvc5’s CASC competition script (see Table 5). We evaluate these 16 strate-
gies with a 30-second time limit per strategy and problem. The best strategy
solves2,508problems,whileallthestrategiestogethersolve3,460problems.The
two most complementary strategies are used as the initial portfolio for the first
Grackle run.
We perform consequently three Grackle runs, each with an overall timeout
of 7 days. Grackle terminates when all strategies have been already specialized,
or when the time is exhausted. All three runs were terminated by timeout.
7 Thesearethenon-theoremMizartoplevellemmas,forwhichthesubproblemlook-up
(and thus also minimization) is more challenging.
8 OntwoAMDEPYC751332-Coreprocessors@3680MHzandwith514GBRAM.6 J. Jakub˚uv et al.
Fig.2. Time progress of solved problems in Grackle runs.
(run #1) ThefirstGracklerunstartswiththetwomostcomplementaryCASC
strategies and uses the regular strategy space (see Section 3). The first run
terminated after 7 days with 50 new strategies solving together 3,459 prob-
lems with a 30-second time limit per strategy and problem. Out of these
problems, 345 are not solved by any of the 16 baseline CASC strategies.
(run #2) The second run uses the same regular strategy space as run #1 but
it starts from the best 6 strategies found in the first Grackle run. These
initialstrategiessolve3,425problemsandGrackleinvented45newstrategies
solving together 3,696 problems with 485 unsolved by baseline strategies.
(run #3) The third run uses the same setup as run #2 but it uses the full
strategyspaceinsteadoftheregularone.Grackleinvented48newstrategies
solving together 3,856 problems with 629 unsolved by baseline strategies.
The time progress of the Grackle runs is visualized in Figure 2. The lower
part (new) shows the number of new problems solved by the strategy invented
at that time, while the upper part (total) shows the total number of problems
solved. The red dotted line marks the performance of the 16 baseline CASC
strategies. The x-axis additionally shows the time of invention of the best three
strategies (grk ).
i
The figure shows that the expert options added in run #3 helped to develop
stronger strategies and to improve the results. Strong strategies are sometimes
invented after several days of stagnation. Grackle invented 143 strategies, which
togethersolve4,113problems.Thebest16Gracklestrategiessolve4,039,which
increases the number of 3,460 problems solved by the 16 baseline strategies by
16.7%.Thebestsinglestrategysolves2,796,whichimprovesonthebestbaseline
strategy (which solves 2,508) by 11.5%.Solving Hard Mizar Problems 7
solved single strategies specializations
run
initial final new casc+ best initial new needed total failed
#1 2823 3459 +636 +345 2696 2 50 28 56 6
#2 3425 3696 +271 +482 2696 6 45 27 56 11
#3 3425 3856 +431 +629 2796 6 48 29 58 10
Table 1. Grackle strategy invention for cvc5 on Mizar problems (Section 4.3).
AdditionaldatafromtheexperimentsaredepictedinTable1.Columnssolved
describe the initial and the final count of solved problems together with the im-
provement over the initial strategies (new), and over the 16 baseline CASC
strategies(casc+).Thecolumnsingle best statesthenumberofproblemssolved
by the best invented strategy. Columns strategies describe the initial count of
strategies, the count of new strategies, and how many strategies are needed
to cover the final number of solved problems (the length of the greedy cover
sequence). Columns specializations provide the number of attempted specializa-
tions (total) and failed specializations where the output strategy was already
known.
4.4 Experiments with Higher Time Limits
The above (Section 4.3) strategies were evaluated in a 30s time limit. To solve
moreMizarproblemsweproceedbyevaluatingthebeststrategieswithahigher
time limit of 600s. Evaluation of a single strategy with this time limit takes
about 20hours. Hence, we evaluate strategies selectively as follows. We start
with the strategies evaluated in 30s and construct their greedy cover. The best
30s strategy is then evaluated in 600s. The newly evaluated strategy is then
added to the greedy cover and the process is iterated until new problems are
being proved. The best Grackle strategy grk solves 3,496 problems, while the
1
best CASC strategy solves 3,059. This is a 14.3% improvement. We ended up
with 7 Grackle strategies and with 7 CASC strategies evaluated in 600s solving
together4,653problems(4,398byGracklesand4,043byCASCs).Togetherwith
thestrategiesevaluatedinthelowertimelimitwesolvedaltogether5,035ofthe
benchmark problems at this point.
This experiment with higher time limits also shows an interesting difference
inbehaviorbetweensaturation-basedATPproversandinstantiation-basedSMT
solvers.WhileSMTsolversseemtobenefitsignificantlyfromhighertimelimits,
ATP solvers typically benefit much less from it. For example, in the comparable
single-strategy setting, cvc5 solves almost 50% more problems when the time
limit is increased from 60 to 600 seconds (see columns alone of grk in version
1
bushy in Table 2 and Table 4). However, E Prover in the auto mode solves only
11% more problems on the same benchmark problems with the same increase
of the time limit. A similar relative performance gap is observed across different
benchmarks.8 J. Jakub˚uv et al.
4.5 Experiments with Clausification Methods
TheMizarproblemsaregivenasTPTP[51]problemsinfirst-orderlogic(FOF).
For cvc5 we translate them to the SMT2 language [4] in the theory of uninter-
preted functions (UF). By default, cvc5 converts to clausal normal form (CNF)
internally but since instantiation-based heuristics seem sensitive to problem re-
formulation, we also experiment with external clausification. This gives us syn-
tacticallydifferentvariantsoftheproblemsandwecantestwhethercvc5benefits
from such alternative ways of clausification.
We use E as the external clausifier and we construct two more problem vari-
ants min and min . The min version is produced by using E’s default
cnf1 cnf2 cnf1
clausification parameters, while for min we use a much more aggressive in-
cnf2
troduction of definitions for frequent subformulas. In particular, this is achieved
by the E Prover’s option --definitional-cnf with values 24 (default) and 4,
respectively. The value indicates how many times a subformula needs to appear
for a new definition to be introduced via a new constant. The min methods
cnf2
comparedtomin almosthalvetheaveragenumberofliteralsintheproblems
cnf1
(368.3 vs 668.2) and the average number of symbols drops to 60% (2,512.7 vs
4,124.1).
The best Grackle strategy then solves 3,231 problems in 600s compared to
3,125 by the best CASC strategy. Both these results use the min clausi-
cnf1
fication. While the individual performance of the strategies on the externally
clausified problems is lower than on the FOF variants, they are indeed highly
complementary. Eight Grackle strategies and six CASC strategies evaluated in
600s increase the number of the solved hard problems from 5,035 to 5,404.
4.6 Experiments on Premise Selection Slices
Based on the success with such problem reformulation, we perform additional
experiments, this time with different premise selection methods developed in
our prior work [24]. Namely, we evaluate Grackle and baseline strategies on the
bushy(i.e.,notsubproblem-minimized)variantsoftheproblems,onthestrongest
GNN (graph neural network [40]) premise selection slices with the threshold −1
(denoted here gnn), and on LightGBM [31] premise selection slices with the
threshold 0.1 (lgbm). These variants were found complementary in our previous
experiments[24].Inanutshell,thetrainedGNNputsatalltheavailablepremises
into a large graph with the edges going between formulas, terms, subterms and
symbols, runs several iterations of a message passing algorithm in this large
graph, and ultimately uses the aggregated information for deciding which of the
premises are relevant for the conjecture. The LightGBM instead trains many
decisiontreesonsuitablefeaturescharacterizingthepremisestodeterminetheir
relevance.Thesemethodsworkquitedifferentlyandalsosometimesrecommend
premises that are quite different from the ones used by human formalizers.
We again evaluate our strategies on such problems, first with a lower (60s)
timelimit.Table2showsacomparativeevaluationofthe60sGrackleandCASCSolving Hard Mizar Problems 9
version strat addon total alone new
min grk +3034 - 3034 3034 968
fof 1
gnn grk +521 +17.17% 3555 1024 336
1
min grk +486 +13.67% 4041 2828 887
fof 3
lgbm grk +264 +6.53% 4305 1260 405
1
min grk +187 +4.34% 4492 2772 904
fof 2
bushy grk +177 +3.94% 4669 963 329
2
min casc +73 +1.56% 4742 2175 598
fof 10
min casc +58 +1.22% 4800 2348 666
fof 13
gnn grk +46 +0.96% 4846 930 280
3
lgbm grk +30 +0.62% 4876 1183 384
2
min casc +28 +0.57% 4904 2650 828
fof 14
bushy casc +25 +0.51% 4929 795 239
13
lgbm grk +24 +0.49% 4953 1074 313
3
gnn grk +23 +0.46% 4976 1000 336
2
bushy casc +17 +0.34% 4993 913 302
14
bushy casc +11 +0.22% 5004 609 188
10
bushy grk +9 +0.18% 5013 962 319
1
bushy grk +8 +0.16% 5021 746 195
3
gnn casc +7 +0.14% 5028 899 287
13
lgbm casc +7 +0.14% 5035 895 262
10
gnn casc +6 +0.12% 5041 954 313
14
lgbm casc +5 +0.10% 5046 1051 309
13
lgbm casc +4 +0.08% 5050 1137 363
14
Table2.FullgreedycoveronFOFslicesmin ,bushy,gnn,andlgbmwith60stimeout.
fof
strategies on these slices. In the table, the column version displays the bench-
mark version and the column strat is the strategy name. The column addon
describestheadditionofthestrategytotheportfolio,thatis,itliststhenumber
of problems added, and the same in percents. The column total lists the cumu-
lative performance of the portfolio up to that line. Finally, the column alone
shows the individual performance of the strategy and the column new shows
the number of Mizar problems unproved in our previous research [24,30]. The
specification of Grackle-invented strategies (grk ) can be found in Table 6 while
i
the definitions of CASC strategies is in Table 5. These strategies are further
analyzed in Section 5.
Based on this, we evaluate the best Grackle strategy grk on all three slices
1
in 600s. This alone raises the number of solved problems from 5,404 to 6,363.
Afteraddingalsothe60sresults,weobtainintotal6,469hardproblemssolved,
of which 3,021 were not proved by ATPs before.9 This is our main result. We
haveproved21.3%oftheremainingATP-unprovedproblems,andincreasedthe
total number of all ATP-proved Mizar problems to 46,738 (80.7%). About half
of the 3,021 problems (1,534) can be solved by the cvc5 CASC strategies. For
9 Thelistsofproblemssolvedbytheindividualstrategiesandthestrategydefinitions
are available at https://github.com/ai4reason/cvc5 grackle mizar.10 J. Jakub˚uv et al.
Results on MML Transfer to new MML
version strat addon alone version strat addon alone
min grk +3496 3496 cnf1 grk +4861 4861
fof 1 2
min grk +738 3231 fof grk +433 4541
cnf1 2 1
gnn grk +535 1215 cnf1 grk +164 4495
1 3
bushy grk +311 1441 fof casc +78 4406
1 13
min grk +298 3220 fof grk +53 4195
fof 3 3
lgbm grk +233 1512 fof grk +39 4418
1 2
min grk +161 3223 cnf1 grk +33 4811
cnf1 3 1
min casc +112 3125 cnf1 casc +17 4211
cnf1 10 10
min grk +90 3146 cnf2 grk +14 4417
fof 2 1
min grk +62 2949 fof casc +12 3952
cnf2 2 10
Table 3. Results on MML (left), transfer to new MML (right).
theremaininghalf,someofourmethods(newstrategies,differentclausifications
or premise slices) are necessary.
The first 10 strategies in the final greedy cover are shown in Table 3 (left).
ThemeaningofthecolumnsisthesameasinTable2,thatis,thecolumnversion
displays benchmark version, the column strat is the strategy name, the column
addon describes the addition of the strategy to the portfolio, and alone shows
theindividualperformanceofthestrategy.WecanseethattheGrackle-invented
strategies clearly dominate the greedy cover. While premise selection slices gnn,
lgbm, and bushy exhibit low individual performance, they provide many new
solutions. This is often due to the alternative proofs proposed by the premise
selection methods trained over many previous proofs.
For the sake of completeness, Table 4 additionally presents extended results.
The table mixes strategies evaluated with different time limits denoted in the
column timeout. The meaning of other columns is the same as in Table 2. All
Grackle and CASC strategies solve together 6,363 Mizar problems.10
4.7 Transfer to New MML
To assess the overfitting of the methods we evaluate the best three Grackle
and the best three CASC strategies on one more benchmark. We use 13,370
bushyproblemscomingfromnewlyaddedarticlesinMMLversion1382.Table3
(right)showstheresults.TheGracklestrategiesoutperformallCASCstrategies,
even though the improvement is smaller than on the MML problems they were
developed for. Alternative clausification methods again provide a considerable
improvement.
10 The strategies not listed in Table 6 (like grk ) can be found in our repository
169baa
(Note 9).Solving Hard Mizar Problems 11
version timeout strat addon total alone new
min 600 grk +3496 - 3496 3496 1243
fof 1
min 600 grk +738 +21.11% 4234 3231 1192
cnf1 2
gnn 600 grk +535 +12.64% 4769 1215 432
1
bushy 600 grk +311 +6.52% 5080 1441 553
1
min 600 grk +298 +5.87% 5378 3220 1146
fof 3
lgbm 600 grk +233 +4.33% 5611 1512 541
1
min 600 grk +161 +2.87% 5772 3223 1092
cnf1 3
min 600 casc +112 +1.94% 5884 3125 999
cnf1 10
min 600 grk +90 +1.53% 5974 3146 1131
fof 2
min 600 grk +62 +1.04% 6036 2949 1045
cnf2 2
min 600 grk +49 +0.81% 6085 3086 1063
fof 5
min 600 grk +35 +0.58% 6120 3163 1110
cnf1 1
min 600 grk +31 +0.51% 6151 2909 1030
cnf2 5
min 600 grk +27 +0.44% 6178 3113 1099
cnf1 5
min 600 grk +22 +0.36% 6200 2851 934
cnf2 3
min 600 casc +16 +0.26% 6216 2711 848
fof 13
min 600 casc +14 +0.23% 6230 2695 787
cnf2 10
min 600 casc +13 +0.21% 6243 2575 795
fof 10
min 600 grk +12 +0.19% 6255 2993 722
fof 169baa
min 600 casc +12 +0.19% 6267 2334 1002
cnf1 06
min 600 casc +11 +0.18% 6278 1064 150
fof 09
min 600 casc +10 +0.16% 6288 3059 1057
fof 14
min 30 grk +9 +0.14% 6297 2901 986
fof d73c5e
min 600 casc +8 +0.13% 6305 2380 716
fof 06
min 30 grk +7 +0.11% 6312 2671 803
fof 393769
min 600 casc +7 +0.11% 6319 2948 977
cnf1 13
min 600 casc +5 +0.08% 6324 2955 916
fof 07
min 600 casc +5 +0.08% 6329 2976 885
fof 16
min 30 grk +5 +0.08% 6334 2770 992
fof 1fe2d9
min 600 casc +5 +0.08% 6339 2726 968
cnf2 13
min 30 grk +3 +0.05% 6342 2666 849
fof 014565
min 30 grk +3 +0.05% 6345 2544 769
fof 043c34
min 600 casc +3 +0.05% 6348 2090 631
cnf2 06
min 600 grk +3 +0.05% 6351 2817 933
cnf2 1
min 600 grk +2 +0.03% 6353 3320 859
fof 4
min 30 grk +2 +0.03% 6355 2671 1163
fof 166bee
min 30 grk +1 +0.02% 6356 2484 725
fof 04f79f
min 30 grk +1 +0.02% 6357 2465 723
fof 0f4750
min 30 grk +1 +0.02% 6358 2238 641
fof 1499bd
min 30 grk +1 +0.02% 6359 463 41
fof 1afb4a
min 30 grk +1 +0.02% 6360 2556 742
fof 340075
min 30 grk +1 +0.02% 6361 2670 800
fof 52ae2f
min 30 grk +1 +0.02% 6362 173 6
fof 7dac18
min 30 grk +1 +0.02% 6363 1810 509
fof ba0f42
Table 4. Full complete greedy cover on MML problems.12 J. Jakub˚uv et al.
name cvc5 strategy options
casc --decision=internal --simplification=none --no-inst-no-entail
1
--no-cbqi --full-saturate-quant
casc --no-e-matching --full-saturate-quant
2
casc --no-e-matching --enum-inst-sum --full-saturate-quant
3
casc --finite-model-find --uf-ss=no-minimal
4
casc --multi-trigger-when-single --full-saturate-quant
5
casc --trigger-sel=max --full-saturate-quant
6
casc --multi-trigger-when-single --multi-trigger-priority
7
--full-saturate-quant
casc --multi-trigger-cache --full-saturate-quant
8
casc --prenex-quant=none --full-saturate-quant
9
casc --enum-inst-interleave --decision=internal --full-saturate-quant
10
casc --relevant-triggers --full-saturate-quant
11
casc --finite-model-find --e-matching --sort-inference --uf-ss-fair
12
casc --pre-skolem-quant=on --full-saturate-quant
13
casc --cbqi-vo-exp --full-saturate-quant
14
casc --no-cbqi --full-saturate-quant
15
casc --macros-quant --macros-quant-mode=all --full-saturate-quant
16
Table 5. CASC baseline strategies used in the experiments.
5 Analysis of the Invented Strategies
As usual with automated strategy invention, there are many new combinations
ofparametersthatmayrequiredeeperanalysistounderstandtheautomatically
inventedbehavior.Thatiswhywemakethempubliclyavailable.11 Asabaseline
andasastartingpointforGracklestrategyinventions,weconsider16strategies
usedinthecvc5’sCASCcompetitionscript.12ThestrategiesarelistedinTable5.
The best Grackle strategies are depicted in Table 6.
Interestingly,thedifferentGrackle-inventedstrategiesfocusmainlyonchang-
ingthebehaviorofthedifferentcomponentsofthequantifierinstantiationmod-
ule of cvc5, cf. Section 2. By default cvc5 relies on e-matching [14,36], which is
incomplete, which also means that the solver may quickly give up (return the
outputunknown).Theoption--full-saturate-quant,runsthedefaultmodebut
if that fails to answer, the solver resorts to the enumerative mode (complete
for FOL [43]). This explains why this option is so prevalent in the invented
strategies.
11 See Note 9.
12 https://github.com/cvc5/cvc5/blob/cvc5-1.1.1/contrib/competitions/casc/run-
script-cascj11-fofSolving Hard Mizar Problems 13
name cvc5 strategy options
grk --cbqi-vo-exp --cond-var-split-quant=agg --full-saturate-quant
1
--relational-triggers
grk --cbqi-vo-exp --full-saturate-quant --miniscope-quant=off
2
--multi-trigger-priority --no-static-learning --relevant-triggers
--ieval=off
grk --full-saturate-quant --multi-trigger-priority
3
--multi-trigger-when-single --term-db-mode=relevant
grk --cbqi-vo-exp --cond-var-split-quant=agg
4
--full-saturate-quant --inst-when=last-call
grk --cbqi-all-conflict --full-saturate-quant --inst-when=full-delay
5
--macros-quant --multi-trigger-priority --quant-dsplit=none
--quant-dsplit=none --trigger-sel=min-s-all --uf-ss=none
Table 6. Best five strategies invented by Grackle.
In grk and grk , e-matching’s behavior is changed by changing the trigger-
1 3
generationpolicy.Ingrk andgrk ,theoption--cbqi-vo-expaffectsthebehavior
1 2
of the conflict-driven instantiation [45]. The option --cond-var-split-quant af-
fectsthequantifiersplittingpolicy.Theoption--term-db-mode=relevantenforces
a stricter policy on ground term filtering. In general, it seems that the essence
of a successful strategy is a combination of enumerative instantiations with an
appropriate trigger selection for e-matching. In the next section (Section 6) we
discuss the influence of such options on the solution of several hard Mizar prob-
lems.
6 Interesting Mizar Problems Proved
Since we are focusing on the 25% of the Mizar problems that have not been
proved by ATPs so far, the newly solved problems are typically quite involved,
with long proofs both in Mizar and in cvc5. 127 of them take more than 100
lines to prove in Mizar, and the average Mizar proof length is 41. This is one
page of a proof in a paper like this.
A previously ATP-unproved problem that seems relatively easy for many
of the cvc5 strategies is KURATO 1:613 related to the well-known Kuratowski’s
closure-complementproblem.14ThetheoremshowsthatforanysetA,itsKurat14Set
(i.e., a family of 14 sets created by applying closure and complement operations
in a particular way to A) is already closed under complement and closure:
definition
13 http://grid01.ciirc.cvut.cz/∼mptp/7.13.01 4.181.1147/html/kurato 1.html#T6
14 https://en.wikipedia.org/wiki/Kuratowski%27s closure-complement problem14 J. Jakub˚uv et al.
let T be non empty TopSpace;
let A be Subset of T;
func Kurat14Set A -> Subset-Family of T equals
{ A, A-, A-‘, A-‘-, A-‘-‘, A-‘-‘-, A-‘-‘-‘ } \/
{ A‘, A‘-, A‘-‘, A‘-‘-, A‘-‘-‘, A‘-‘-‘-, A‘-‘-‘-‘ };
end;
theorem Th6: for T being non empty TopSpace
for A, Q being Subset of T st Q in Kurat14Set A holds
Q‘ in Kurat14Set A & Q- in Kurat14Set A;
Theproofhas131linesinMizar,howeveritindeedseemsachievablebyinstantiation-
basedmethodsthatgraduallyenumeratetheapplicationsofclosureandcomple-
ment to the skolems and use congruence closure when a more complex term can
be shown to be equal to a less complex term. The problem is a combination of
equationalreasoningandalargecasesplit(14cases),whichiswhatlikelymakes
ithardforthesuperposition-basedsystems.Thesuccessmayindicatethatafull
ATP(orAI/TP)solutionoftheKuratowski’sclosure-complementproblemmay
not be too far today, because proposing the Kurat14Set and finding automati-
cally a suitable family of 14 distinct sets (to show that 14 is indeed the smallest
number) also seems within the reach of today’s systems.
The problem ASYMPT 1:1815 is on the other hand only provable with a sin-
gle Grackle-invented strategy grk and external clausification, taking 62 s. The
2
problem states that the functions f(n) = nmod2 and g(n) = n+1mod2 are
not in the Big O relation (in any direction).
theorem
for f,g being Real_Sequence st
(for n holds f.n = n mod 2) & (for n holds g.n = n+1 mod 2)
holds ex s,s1 being eventually-nonnegative Real_Sequence
st s = f & s1 = g & not s in Big_Oh(s1) & not s1 in Big_Oh(s)
The Mizar proof has 122 lines and again goes through several case splits related
to the mod 2 values. However a lot of knowledge (often equational) about the
arithmetical expressions, modulo and inequality has to be applied too.16 The
fact that this can be done by an instantiation-based system is quite remarkable,
and probably also due to the fact that the terms that arise in the proof are
not extremely complicated thanks to the {0,1} codomain of the functions in-
volved.Theoption--multi-trigger-priorityseemsindispensableforsolving
theproblem,showingtheimportanceoftheheuristicsforhandlinginstantiation
triggers. This may be an opportunity for further AI/ML methods learning even
finer control of the triggers in such systems.
Finally, theorem ROBBINS4:317 shows an equivalent condition for ortholat-
tices:
15 http://grid01.ciirc.cvut.cz/∼mptp/7.13.01 4.181.1147/html/asympt 1.html#T18
16 NotethattheMizar/MPTPtranslationtranslateseverythingasuninterpretedfunc-
tions, i.e., there is no reliance on the arithmetical theories implemented in cvc5.
17 http://grid01.ciirc.cvut.cz/∼mptp/7.13.01 4.181.1147/html/robbins4.html#T3Solving Hard Mizar Problems 15
for L being non empty OrthoLattStr holds L is Ortholattice iff
(for a, b, c being Element of L holds
(a "\/" b) "\/" c = (c‘ "/\" b‘)‘ "\/" a)
& (for a, b being Element of L holds a = a "/\" (a "\/" b))
& for a, b being Element of L holds a = a "\/" (b "/\" b‘)
The problem can only be solved by the Grackle-invented strategy 89fc24 and
it takes 137 s. The Mizar proof has 145 lines and uses a lot of equational
reasoning in lattice theory. It is quite surprising that a proof with so much
equality could not be done by the superposition based systems, and that it
can be done by cvc5. Again, triggers seem important here, together with the
--term-db-mode=relevantoptionwhichfurtherlimitsthesetsofpossiblequan-
tifier instantiations.
7 Conclusions and Future Work
We have solved 3,021 (21.3%) of the remaining 14,163 hard Mizar problems,
raising the percentage of automatically proved Mizar problems from 75.5% to
80.7%.Thiswasmainlydonebyautomaticallyinventingsuitableinstantiation-
based strategies for the cvc5 solver, using our Grackle system. Further improve-
ments were obtained by using alternative clausifications of the problems, and
also alternative premise selections. Such problem transformations have a sur-
prisingly large effect on the instantiation-based procedures and are likely to be
explored further when creating strong portfolios for such systems.
Theinventedcvc5strategiesperformwellalsoonasetofnewproblemsadded
in a later version of the Mizar library, showing only limited overfitting. Given
today’scvc5’sgoodperformanceoncorporasuchasIsabelle/Sledgehammerand
TPTP,itmaybealsointerestingtorepeatourstrategyinventionexperimentsfor
theTPTPproblemsandforproblemsexportedfromvariousnon-Mizarhammer
systems. In general, training instantiation-based systems in various ways is an
emerging research topic that may bring interesting improvements to some of
today’s strongest ATP/SMT methods.
Acknowledgments
Supported by the Czech MEYS under the ERC CZ project no. LL1902 POST-
MAN, by Amazon Research Awards, by EU ICT-48 2020 project no. 952215
TAILOR, by ERC PoC grant no. 101156734 FormalWeb3, by CISCO grant no.
2023-322029, and co-funded by the European Union under the project ROBO-
PROX (reg. no. CZ.02.01.01/00/22 008/0004590).
References
1. Grzegorz Bancerek, Czeslaw Bylinski, Adam Grabowski, Artur Kornilowicz, Ro-
manMatuszewski,AdamNaumowicz,andKarolPak. TheroleoftheMizarMath-
ematical Library for interactive proof development in Mizar. J. Autom. Reason.,
61(1-4):9–32, 2018.16 J. Jakub˚uv et al.
2. Grzegorz Bancerek, Czeslaw Bylinski, Adam Grabowski, Artur Kornilowicz, Ro-
man Matuszewski, Adam Naumowicz, Karol Pak, and Josef Urban. Mizar: State-
of-the-art and beyond. In Manfred Kerber, Jacques Carette, Cezary Kaliszyk,
Florian Rabe, and Volker Sorge, editors, Intelligent Computer Mathematics - In-
ternational Conference, CICM 2015, Washington, DC, USA, July 13-17, 2015,
Proceedings, volume 9150 of Lecture Notes in Computer Science, pages 261–279.
Springer, 2015.
3. HanielBarbosa,ClarkW.Barrett,MartinBrain,GereonKremer,HannaLachnitt,
MakaiMann,AbdalrhmanMohamed,MudathirMohamed,AinaNiemetz,Andres
No¨tzli, Alex Ozdemir, Mathias Preiner, Andrew Reynolds, Ying Sheng, Cesare
Tinelli, and Yoni Zohar. cvc5: A versatile and industrial-strength SMT solver. In
TACAS (1), volume 13243. Springer, 2022.
4. Clark Barrett, Aaron Stump, Cesare Tinelli, et al. The SMT-LIB standard: Ver-
sion 2.0. In Proceedings of the 8th international workshop on satisfiability modulo
theories (Edinburgh, UK), volume 13, page 14, 2010.
5. Nikolaj Bjørner and Mikola´ˇs Janota. Playing with quantified satisfaction. In
20th International Conferences on Logic for Programming, Artificial Intelligence
and Reasoning – Short Presentations, LPAR,volume35,pages15–27.EasyChair,
2015.
6. JasminChristianBlanchette,SaschaBo¨hme,andLawrenceC.Paulson. Extending
sledgehammer with SMT solvers. J. Autom. Reason., 51(1):109–128, 2013.
7. Jasmin Christian Blanchette, Cezary Kaliszyk, Lawrence C. Paulson, and Josef
Urban. Hammering towards QED. J. Formalized Reasoning, 9(1):101–148, 2016.
8. Chad E. Brown and Cezary Kaliszyk. Lash 1.0 (system description). In IJCAR,
volume 13385 of Lecture Notes in Computer Science, pages 350–358. Springer,
2022.
9. KarelChvalovsky´,KonstantinKorovin,JellePiepenbrock,andJosefUrban. Guid-
ing an instantiation prover with graph neural networks. In LPAR, volume 94 of
EPiC Series in Computing, pages 112–123. EasyChair, 2023.
10. Ingo Dahn. Interpretation of a Mizar-like logic in first-order logic. In Ricardo
CaferraandGernotSalzer,editors,FTP(LNCSSelection),volume1761ofLNCS,
pages 137–151. Springer, 1998.
11. Ingo Dahn and Christoph Wernhard. First order proof problems extracted from
an article in the MIZAR Mathematical Library. In Maria Paola Bonacina and
UlrichFurbach,editors,Int.WorkshoponFirst-OrderTheoremProving(FTP’97),
RISC-LinzReportSeriesNo.97-50,pages58–62.JohannesKeplerUniversit¨at,Linz
(Austria), 1997.
12. LeonardoMendonc¸adeMouraandNikolajBjørner. Z3:AnEfficientSMTSolver.
InC.R.RamakrishnanandJakobRehof,editors,TACAS,volume4963ofLNCS,
pages 337–340. Springer, 2008.
13. Martin Desharnais, Petar Vukmirovic, Jasmin Blanchette, and Makarius Wenzel.
Seventeen provers under the hammer. In ITP, volume 237 of LIPIcs, pages 8:1–
8:18. Schloss Dagstuhl - Leibniz-Zentrum fu¨r Informatik, 2022.
14. David Detlefs, Greg Nelson, and James B. Saxe. Simplify: A theorem prover for
program checking. J. ACM, 52(3):365–473, 2005.
15. Azadeh Farzan and Zachary Kincaid. Strategy synthesis for linear arithmetic
games. Proc. ACM Program. Lang., 2(POPL):61:1–61:30, 2018.
16. Yeting Ge and Leonardo Mendonc¸a de Moura. Complete instantiation for quan-
tified formulas in satisfiability modulo theories. In Computer Aided Verification,
21st International Conference, CAV, pages 306–320, 2009.Solving Hard Mizar Problems 17
17. Zarathustra Amadeus Goertzel, Karel Chvalovsky´, Jan Jakub˚uv, Miroslav Olsa´k,
andJosefUrban.FastandslowEnigmasandparentalguidance.InFroCoS,volume
12941 of Lecture Notes in Computer Science, pages 173–191. Springer, 2021.
18. Zarathustra Amadeus Goertzel, Jan Jakub˚uv, Cezary Kaliszyk, Miroslav Olsa´k,
Jelle Piepenbrock, and Josef Urban. The Isabelle ENIGMA. In ITP, volume 237
of LIPIcs, pages 16:1–16:21. Schloss Dagstuhl - Leibniz-Zentrum fu¨r Informatik,
2022.
19. AdamGrabowski,ArturKornil(cid:32)owicz,andAdamNaumowicz. Mizarinanutshell.
J. Formalized Reasoning, 3(2):153–245, 2010.
20. Reiner Ha¨hnle, Manfred Kerber, and Christoph Weidenbach. Common syntax of
theDFGSchwerpunktprogrammdeduction. TechnicalReportTR10/96,Fakulta¨t
fu¨r Informatik, Universita¨t Karlsruhe, Karlsruhe, Germany, 1996.
21. Edvard K. Holden and Konstantin Korovin. Graph sequence learning for premise
selection. CoRR, abs/2303.15642, 2023.
22. JanH˚ula,JanJakub˚uv,Mikol´asJanota,andLuka´sKubej. Targetedconfiguration
ofanSMTsolver. InCICM,volume13467ofLecture Notes in Computer Science,
pages 256–271. Springer, 2022.
23. Frank Hutter, Holger H. Hoos, Kevin Leyton-Brown, and Thomas Stu¨tzle.
ParamILS: an automatic algorithm configuration framework. J. Artificial Intel-
ligence Research, 36:267–306, October 2009.
24. JanJakub˚uv,KarelChvalovsky´,ZarathustraAmadeusGoertzel,CezaryKaliszyk,
Mirek Olsa´k, Bartosz Piotrowski, Stephan Schulz, Martin Suda, and Josef Urban.
MizAR 60 for Mizar 50. In ITP, volume 268 of LIPIcs, pages 19:1–19:22. Schloss
Dagstuhl - Leibniz-Zentrum fu¨r Informatik, 2023.
25. Jan Jakub˚uv, Martin Suda, and Josef Urban. Automated invention of strategies
andtermorderingsforvampire.InGCAI,volume50ofEPiCSeriesinComputing,
pages 121–133. EasyChair, 2017.
26. JanJakub˚uvandJosefUrban. BliStrTune:hierarchicalinventionoftheoremprov-
ingstrategies. InYvesBertotandViktorVafeiadis,editors,Proceedings of the 6th
ACM SIGPLAN Conference on Certified Programs and Proofs, CPP 2017, Paris,
France, January 16-17, 2017, pages 43–52. ACM, 2017.
27. JanJakub˚uvandJosefUrban.ENIGMA:efficientlearning-basedinferenceguiding
machine. In Herman Geuvers, Matthew England, Osman Hasan, Florian Rabe,
and Olaf Teschke, editors, Intelligent Computer Mathematics - 10th International
Conference, CICM 2017, Edinburgh, UK, July 17-21, 2017, Proceedings, volume
10383 of Lecture Notes in Computer Science, pages 292–302. Springer, 2017.
28. JanJakub˚uvandJosefUrban. HammeringMizarbylearningclauseguidance. In
John Harrison, John O’Leary, and Andrew Tolmach, editors, 10th International
Conference on Interactive Theorem Proving, ITP 2019, September 9-12, 2019,
Portland, OR, USA, volume 141 of LIPIcs, pages 34:1–34:8. Schloss Dagstuhl -
Leibniz-Zentrum fu¨r Informatik, 2019.
29. Mikola´ˇs Janota, Haniel Barbosa, Pascal Fontaine, and Andrew Reynolds. Fair
and adventurous enumeration of quantifier instantiations. In Formal Methods in
Computer-Aided Design, 2021.
30. Cezary Kaliszyk and Josef Urban. MizAR 40 for Mizar 40. J. Autom. Reasoning,
55(3):245–256, 2015.
31. GuolinKe,QiMeng,ThomasFinley,TaifengWang,WeiChen,WeidongMa,Qiwei
Ye,andTie-YanLiu. Lightgbm:Ahighlyefficientgradientboostingdecisiontree.
In NIPS, pages 3146–3154, 2017.18 J. Jakub˚uv et al.
32. KonstantinKorovin. iprover-aninstantiation-basedtheoremproverforfirst-order
logic (system description). In IJCAR, volume 5195 of Lecture Notes in Computer
Science, pages 292–298. Springer, 2008.
33. LauraKova´csandAndreiVoronkov. First-ordertheoremprovingandVampire. In
NatashaSharyginaandHelmutVeith,editors,CAV,volume8044ofLNCS,pages
1–35. Springer, 2013.
34. Marius Lindauer, Katharina Eggensperger, Matthias Feurer, Andr´e Biedenkapp,
Difan Deng, Carolin Benjamins, Tim Ruhkopf, Ren´e Sass, and Frank Hutter.
SMAC3: A versatile bayesian optimization package for hyperparameter optimiza-
tion, 2021.
35. Roman Matuszewski and Piotr Rudnicki. Mizar: the first 30 years. Mechanized
Mathematics and Its Applications, 4:3–24, 2005.
36. Michal Moskal, Jakub Lopuszanski, and Joseph R. Kiniry. E-matching for fun
and profit. In Sava Krstic and Albert Oliveras, editors, Proceedings of the 5th In-
ternationalWorkshop onSatisfiabilityModuloTheories,SMT@CAV2007, Berlin,
Germany,July1-2,2007,volume198ofElectronicNotesinTheoreticalComputer
Science, pages 19–35. Elsevier, 2007.
37. Aina Niemetz and Mathias Preiner. Bitwuzla at the SMT-COMP 2020. CoRR,
abs/2006.01621, 2020.
38. Aina Niemetz, Mathias Preiner, Andrew Reynolds, Clark W. Barrett, and Cesare
Tinelli. Solving quantified bit-vectors using invertibility conditions. In Computer
AidedVerification–30thInternationalConference,CAV2018,HeldasPartofthe
Federated Logic Conference, FloC 2018, volume 10982, pages 236–255. Springer,
2018.
39. Aina Niemetz, Mathias Preiner, Andrew Reynolds, Clark W. Barrett, and Cesare
Tinelli. Syntax-guided quantifier instantiation. In Tools and Algorithms for the
Construction and Analysis of Systems – 27th International Conference, TACAS
2021, Held as Part of the European Joint Conferences on Theory and Practice of
Software, ETAPS, volume 12652, pages 145–163. Springer, 2021.
40. MiroslavOlsa´k,CezaryKaliszyk,andJosefUrban. Propertyinvariantembedding
forautomatedreasoning. InGiuseppeDeGiacomo,AlejandroCatala´,BistraDilk-
ina, Michela Milano, Sen´en Barro, Alberto Bugar´ın, and J´eroˆme Lang, editors,
ECAI 2020 - 24th European Conference on Artificial Intelligence, volume 325 of
Frontiers in Artificial Intelligence and Applications, pages 1395–1402. IOS Press,
2020.
41. Michael Rawson and Giles Reger. A neurally-guided, parallel theorem prover.
In FroCos, volume 11715 of Lecture Notes in Computer Science, pages 40–56.
Springer, 2019.
42. Michael Rawson and Giles Reger. lazyCoP: Lazy paramodulation meets neurally
guided search. In TABLEAUX, volume 12842 of Lecture Notes in Computer Sci-
ence, pages 187–199. Springer, 2021.
43. Andrew Reynolds, Haniel Barbosa, and Pascal Fontaine. Revisiting enumerative
instantiation. In Tools and Algorithms for the Construction and Analysis of Sys-
tems, volume 10806, pages 112–131, 2018.
44. Andrew Reynolds, Tim King, and Viktor Kuncak. Solving quantified linear
arithmetic by counterexample-guided instantiation. Formal Methods Syst. Des.,
51(3):500–532, 2017.
45. AndrewReynolds,CesareTinelli,andLeonardoMendonc¸adeMoura.Findingcon-
flictinginstancesofquantifiedformulasinSMT. InFormal Methods in Computer-
Aided Design, FMCAD, pages 195–202. IEEE, 2014.Solving Hard Mizar Problems 19
46. John Alan Robinson and Andrei Voronkov, editors. Handbook of Automated Rea-
soning (in 2 volumes). Elsevier and MIT Press, 2001.
47. Mikola´ˇs Janota, Jelle Piepenbrock, and Bartosz Piotrowski. Towards learning
quantifier instantiation in SMT. In Kuldeep S. Meel and Ofer Strichman, edi-
tors, 25th International Conference on Theory and Applications of Satisfiability
Testing, SAT 2022, August 2-5, 2022, Haifa, Israel, volume 236 of LIPIcs, pages
7:1–7:18. Schloss Dagstuhl - Leibniz-Zentrum fu¨r Informatik, 2022.
48. StephanSchulz. Systemdescription:E1.8. InKennethL.McMillan,AartMiddel-
dorp,andAndreiVoronkov,editors,LPAR,volume8312ofLNCS,pages735–743.
Springer, 2013.
49. Martin Suda. Improving ENIGMA-style clause selection while learning from his-
tory. In CADE, volume 12699 of Lecture Notes in Computer Science, pages 543–
561. Springer, 2021.
50. Martin Suda. Vampire with a brain is a good ITP hammer. In FroCoS, volume
12941 of Lecture Notes in Computer Science, pages 192–209. Springer, 2021.
51. Geoff Sutcliffe, Christian B. Suttner, and Theodor Yemenis. The TPTP problem
library. In CADE, volume 814 of Lecture Notes in Computer Science, pages 252–
266. Springer, 1994.
52. JosefUrban. MPTP–Motivation,Implementation,FirstExperiments. J.Autom.
Reasoning, 33(3-4):319–339, 2004.
53. Josef Urban. MPTP 0.2: Design, implementation, and initial experiments. J.
Autom. Reasoning, 37(1-2):21–43, 2006.
54. Josef Urban. BliStr: The Blind Strategymaker. In Georg Gottlob, Geoff Sutcliffe,
and Andrei Voronkov, editors, Global Conference on Artificial Intelligence, GCAI
2015,Tbilisi,Georgia,October16-19,2015,volume36ofEPiCSeriesinComput-
ing, pages 312–319. EasyChair, 2015.